<?xml version="1.0" standalone="yes"?>
<library-reference id="date_time_reference"><title>Date Time Reference</title><header id="doxygen.date_time_reference.adjust__functors_8hpp" name="boost/date_time/adjust_functors.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__functor" name="day_functor"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Functor to iterate a fixed number of days. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__functor_1a5554277347dc9c839889eb6b685d699d" name="duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__functor_1a14cc4a10366edc3bae3f7b8d6abdf3b8"><parameter name="f"><paramtype>int</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__functor_1abd9215f4152babfc209bb85dc8afe78e" name="get_offset" cv="const"><type>duration_type</type><parameter name=""><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__functor_1ad06e564d6c2fb79e42e4507fef502098" name="get_neg_offset" cv="const"><type>duration_type</type><parameter name=""><paramtype>const date_type &amp;</paramtype></parameter></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__functor" name="month_functor"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Provides calculation to find next nth month given a date. </purpose><description><para>This adjustment function provides the logic for 'month-based' advancement on a ymd based calendar. The policy it uses to handle the non existant end of month days is to back up to the last day of the month. Also, if the starting date is the last day of a month, this functor will attempt to adjust to the end of the month. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__functor_1a958209444f14040c9b7304a8c71acacb" name="duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__functor_1ae160539c47c4af6c8c97e58c311c3e1d" name="cal_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__functor_1a4b52a938fa8ef98941efb0a1ea616f3b" name="ymd_type"><type>cal_type::ymd_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__functor_1a50f5c4ef7c23fb8ffb0f4c8ee1ece53e" name="day_type"><type>cal_type::day_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__functor_1a1c987a877133b006739aafc5a5b3153a"><parameter name="f"><paramtype>int</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__functor_1a19e9f6ad655b4a387d1ab214a3ce4788" name="get_offset" cv="const"><type>duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__functor_1a0a395cd9ad399ad86890022c9cee088e" name="get_neg_offset" cv="const"><type>duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><purpose>Returns a negative duration_type. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1week__functor" name="week_functor"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Functor to iterate a over weeks. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1week__functor_1a27a1e2ece5c48c5b36d97f91a6e41000" name="duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1week__functor_1afbcdf2da4d06a7450ae7795d4dae7593" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1week__functor_1ad6ea87db45b29e6789902b863313d424"><parameter name="f"><paramtype>int</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1week__functor_1a388abd32ec22f46f32c7dac2c74259a7" name="get_offset" cv="const"><type>duration_type</type><parameter name=""><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1week__functor_1aeffa2c4d43c802b2fd74f963aae8b8e2" name="get_neg_offset" cv="const"><type>duration_type</type><parameter name=""><paramtype>const date_type &amp;</paramtype></parameter></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__functor" name="year_functor"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Functor to iterate by a year adjusting for leap years. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__functor_1a9f68baa54ea4a37a50b1c5e3b4493c18" name="duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__functor_1a916a89ece088626bdd6d4a273b677ec8"><parameter name="f"><paramtype>int</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__functor_1a5103721d843fabb4f7e3aca15a417e95" name="get_offset" cv="const"><type>duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__functor_1a49f7465e5f30f10e4db8a579ace76bd7" name="get_neg_offset" cv="const"><type>duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.c__local__time__adjustor_8hpp" name="boost/date_time/c_local_time_adjustor.hpp">
<para>Time adjustment calculations based on machine </para><namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1c__local__adjustor" name="c_local_adjustor"><template>
      <template-type-parameter name="time_type"/>
    </template><purpose>Adjust to / from utc using the C API. </purpose><description><para>Warning!!! This class assumes that timezone settings of the machine are correct. This can be a very dangerous assumption. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1c__local__adjustor_1a10517fadfa0e1e8acd65eef6462e2998" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1c__local__adjustor_1aa65c2cb7bd8ba6e6adec227878cf9da7" name="date_type"><type>time_type::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1c__local__adjustor_1aac49592ab5e7545712ba87df0c700df1" name="date_duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1c__local__adjustor_1ac48750e4d55c05941b6baadeec6fea8d" name="utc_to_local" specifiers="static"><type>time_type</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter><purpose>Convert a utc time to local time. </purpose></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.c__time_8hpp" name="boost/date_time/c_time.hpp">
<para>Provide workarounds related to the ctime header </para><namespace name="std">
</namespace>
<namespace name="boost">
<namespace name="date_time">
<struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1c__time" name="c_time"><purpose>Provides a uniform interface to some 'ctime' functions. </purpose><description><para>Provides a uniform interface to some ctime functions and their '_r' counterparts. The '_r' functions require a pointer to a user created std::tm struct whereas the regular functions use a staticly created struct and return a pointer to that. These wrapper functions require the user to create a std::tm struct and send in a pointer to it. This struct may be used to store the resulting time. The returned pointer may or may not point to this struct, however, it will point to the result of the corresponding function. All functions do proper checking of the C function results and throw exceptions on error. Therefore the functions will never return NULL. </para></description><method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1c__time_1a6f75da6507b423dad1effbfc501b0f02" name="localtime" specifiers="static"><type>std::tm *</type><parameter name="t"><paramtype>const std::time_t *</paramtype></parameter><parameter name="result"><paramtype>std::tm *</paramtype></parameter><purpose>requires a pointer to a user created std::tm struct </purpose></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1c__time_1aaa1e1d0f292563c2596d6368180b4ffe" name="gmtime" specifiers="static"><type>std::tm *</type><parameter name="t"><paramtype>const std::time_t *</paramtype></parameter><parameter name="result"><paramtype>std::tm *</paramtype></parameter><purpose>requires a pointer to a user created std::tm struct </purpose></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1c__time_1a6f75da6507b423dad1effbfc501b0f02" name="localtime" specifiers="static"><type>std::tm *</type><parameter name="t"><paramtype>const std::time_t *</paramtype></parameter><parameter name="result"><paramtype>std::tm *</paramtype></parameter><purpose>requires a pointer to a user created std::tm struct </purpose></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1c__time_1aaa1e1d0f292563c2596d6368180b4ffe" name="gmtime" specifiers="static"><type>std::tm *</type><parameter name="t"><paramtype>const std::time_t *</paramtype></parameter><parameter name="result"><paramtype>std::tm *</paramtype></parameter><purpose>requires a pointer to a user created std::tm struct </purpose></method>
</method-group>
</struct>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.compiler__config_8hpp" name="boost/date_time/compiler_config.hpp">
<namespace name="std">
</namespace>
</header>
<header id="doxygen.date_time_reference.constrained__value_8hpp" name="boost/date_time/constrained_value.hpp">
<namespace name="boost">
<namespace name="CV">
<class id="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value" name="constrained_value"><template>
      <template-type-parameter name="value_policies"/>
    </template><purpose>A template to specify a constrained basic value type. </purpose><description><para>This template provides a quick way to generate an integer type with a constrained range. The type provides for the ability to specify the min, max, and and error handling policy.</para><para><emphasis role="bold">value policies</emphasis> A class that provides the range limits via the min and max functions as well as a function on_error that determines how errors are handled. A common strategy would be to assert or throw and exception. The on_error is passed both the current value and the new value that is in error. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value_1ae3b1ed5ae78be69a1b15fe6654533117" name="value_type"><type>value_policies::value_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value_1a0ce826663e8a91b535d32d03c6dba6a1"><parameter name="value"><paramtype>value_type</paramtype></parameter></constructor>
<copy-assignment id="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value_1a65fe42791a6acb6257c74569dfeeb3a2"><type>BOOST_CXX14_CONSTEXPR <classname>constrained_value</classname> &amp;</type><parameter name="v"><paramtype>value_type</paramtype></parameter></copy-assignment>
<method id="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value_1a9b61178994016ba0c5c732ea00e62c42" name="operator value_type" cv="const"><type>BOOST_CXX14_CONSTEXPR</type><purpose>Coerce into the representation type. </purpose></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value_1a39d45afc75249bd1c48709b85e4e98f5" name="BOOST_PREVENT_MACRO_SUBSTITUTION" specifiers="static"><type>BOOST_CONSTEXPR value_type max</type><purpose>Return the max allowed value (traits method) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value_1a88422c1ded351d92515e590ff4776acf" name="BOOST_PREVENT_MACRO_SUBSTITUTION" specifiers="static"><type>BOOST_CONSTEXPR value_type min</type><purpose>Return the min allowed value (traits method) </purpose></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value_1a55c40af77924bf6269a52c9eba030a9c" name="assign"><type>BOOST_CXX14_CONSTEXPR void</type><parameter name="value"><paramtype>value_type</paramtype></parameter></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1CV_1_1simple__exception__policy" name="simple_exception_policy"><template>
      <template-type-parameter name="rep_type"/>
      <template-nontype-parameter name="min_value"><type>rep_type</type></template-nontype-parameter>
      <template-nontype-parameter name="max_value"><type>rep_type</type></template-nontype-parameter>
      <template-type-parameter name="exception_type"/>
    </template><purpose>Template to shortcut the <link linkend="doxygen.date_time_reference.classboost_1_1CV_1_1constrained__value">constrained_value</link> policy creation process. </purpose><struct id="doxygen.date_time_reference.structboost_1_1CV_1_1simple__exception__policy_1_1exception__wrapper" name="exception_wrapper"><inherit access="public">exception_type</inherit><method-group name="public member functions">
<method id="doxygen.date_time_reference.structboost_1_1CV_1_1simple__exception__policy_1_1exception__wrapper_1a995203e091956e32bb4f5d0b9b8cd50b" name="conversion-operator" cv="const"><type>std::out_of_range</type></method>
</method-group>
</struct><typedef id="doxygen.date_time_reference.classboost_1_1CV_1_1simple__exception__policy_1aef2585fba29b296a27d7d666698c35c2" name="value_type"><type>rep_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1CV_1_1simple__exception__policy_1a3dd8e0118837eba8c8e5a6305efc256b" name="BOOST_PREVENT_MACRO_SUBSTITUTION" specifiers="static"><type>BOOST_CONSTEXPR rep_type min</type></method>
<method id="doxygen.date_time_reference.classboost_1_1CV_1_1simple__exception__policy_1aadaba30dbbfa6f96ee39273973e49832" name="BOOST_PREVENT_MACRO_SUBSTITUTION" specifiers="static"><type>BOOST_CONSTEXPR rep_type max</type></method>
<method id="doxygen.date_time_reference.classboost_1_1CV_1_1simple__exception__policy_1a33581bc14f6af5bdb6b219a1b00d3715" name="on_error" specifiers="static"><type>void</type><parameter name=""><paramtype>rep_type</paramtype></parameter><parameter name=""><paramtype>rep_type</paramtype></parameter><parameter name=""><paramtype>violation_enum</paramtype></parameter></method>
</method-group>
</class><enum id="doxygen.date_time_reference.namespaceboost_1_1CV_1ac693f96b4fb6707715ddd4b0957c244d" name="violation_enum"><enumvalue id="doxygen.date_time_reference.namespaceboost_1_1CV_1ac693f96b4fb6707715ddd4b0957c244da54e64803ebb5e13b70d57932d8e013fb" name="min_violation"/><enumvalue id="doxygen.date_time_reference.namespaceboost_1_1CV_1ac693f96b4fb6707715ddd4b0957c244da38fb8ab8ed842a47816b0e2f4c8e262a" name="max_violation"/><purpose>Represent a min or max violation type. </purpose></enum>
</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date_8hpp" name="boost/date_time/date.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date" name="date"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="calendar"/>
      <template-type-parameter name="duration_type_"/>
    </template><inherit access="private">boost::less_than_comparable&lt; T, boost::equality_comparable&lt; T &gt; &gt;</inherit><purpose>Representation of timepoint at the one day level resolution. </purpose><description><para>The date template represents an interface shell for a date class that is based on a year-month-day system such as the gregorian or ISO 8601 systems. It provides basic operations to enable calculation and comparisons.</para><para><emphasis role="bold">Theory</emphasis></para><para>This date representation fundamentally departs from the C tm struct approach. The goal for this type is to provide efficient date operations (add, subtract) and storage (minimize space to represent) in a concrete class. Thus, the date uses a count internally to represent a particular date. The calendar parameter defines the policies for converting the the year-month-day and internal counted form here. Applications that need to perform heavy formatting of the same date repeatedly will perform better by using the year-month-day representation.</para><para>Internally the date uses a day number to represent the date. This is a monotonic time representation. This representation allows for fast comparison as well as simplifying the creation of writing numeric operations. Essentially, the internal day number is like adjusted julian day. The adjustment is determined by the Epoch date which is represented as day 1 of the calendar. Day 0 is reserved for negative infinity so that any actual date is automatically greater than negative infinity. When a date is constructed from a date or formatted for output, the appropriate conversions are applied to create the year, month, day representations. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1ac063aafffbf85a0352cd6e24e87fc920" name="date_type"><type>T</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1af167019c4253dcbd1f6bae5b5a826582" name="calendar_type"><type>calendar</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1afefed9e6cd893d2d0fb4af9c7c4567db" name="traits_type"><type>calendar::date_traits_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1ac78b4c2100fe1b0c8bc5ff4c8ff61aeb" name="duration_type"><type>duration_type_</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a57f8e3f295243bf7337320397896145b" name="year_type"><type>calendar::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1ab6baeaf7277de9d6661b444964df50fe" name="month_type"><type>calendar::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1add9ee5deaed61114f587e96a31bf2760" name="day_type"><type>calendar::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a6853b559ce421d3835174eea0c89eef7" name="ymd_type"><type>calendar::ymd_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a9544b8c9bf37b5d63bb140404e63d380" name="date_rep_type"><type>calendar::date_rep_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a40aebbc10f0526790ba519c57b608aa4" name="date_int_type"><type>calendar::date_int_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a5921e5d8d6bf0e4b715e51ed484805b4" name="day_of_week_type"><type>calendar::day_of_week_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a65f0d5974d63e06506476c77976c1c8c"><parameter name="y"><paramtype>year_type</paramtype></parameter><parameter name="m"><paramtype>month_type</paramtype></parameter><parameter name="d"><paramtype>day_type</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1acc9ee1e2cb8dd83ee070ff6d3e0c3ee8"><parameter name="ymd"><paramtype>const ymd_type &amp;</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a5bcf498d0947499aa4f20291c0e98e20" name="year" cv="const"><type>BOOST_CXX14_CONSTEXPR year_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1aa18c3bec49d9d982c66bb8946f6276d0" name="month" cv="const"><type>BOOST_CXX14_CONSTEXPR month_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a6525f995660ba80e25db9a52ec817412" name="day" cv="const"><type>BOOST_CXX14_CONSTEXPR day_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a155dd6c3f6a9ab746c21281596eb9e73" name="day_of_week" cv="const"><type>BOOST_CXX14_CONSTEXPR day_of_week_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a6abdaf91641dda1c817c89114a687ec3" name="year_month_day" cv="const"><type>BOOST_CXX14_CONSTEXPR ymd_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1ad6aee967742b348f266164a9d9cb2093" name="operator&lt;" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a3c5541eae88e5002484a4b6d3e17d004" name="operator==" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a2af285c7cf5898ec05cf7867e4b0b4a8" name="is_special" cv="const"><type>BOOST_CONSTEXPR bool</type><purpose>check to see if date is a special value </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a0d1b4b5702dadeed56f99eda056a3efa" name="is_not_a_date" cv="const"><type>BOOST_CONSTEXPR bool</type><purpose>check to see if date is not a value </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1abad5f9c1bb5e5f5f04e09f41c4af3b1b" name="is_infinity" cv="const"><type>BOOST_CONSTEXPR bool</type><purpose>check to see if date is one of the infinity values </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a76a1fb5caed25a17d87df453aa8fdc73" name="is_pos_infinity" cv="const"><type>BOOST_CONSTEXPR bool</type><purpose>check to see if date is greater than all possible dates </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1aae455b18b825f8a02621fbe467ff2a15" name="is_neg_infinity" cv="const"><type>BOOST_CONSTEXPR bool</type><purpose>check to see if date is greater than all possible dates </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1af1ded1876ce74c2fe94e40e62eab9c23" name="as_special" cv="const"><type>BOOST_CXX14_CONSTEXPR special_values</type><purpose>return as a special value or a not_special if a normal date </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a78a77804de871c4ff4a01df9d75daf12" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a881f03906762a2004cac01d566bee669" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR date_type</type><parameter name="dd"><paramtype>const duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1ae6e057adc65812e89bedefc682be07f4" name="operator-="><type>BOOST_CXX14_CONSTEXPR date_type</type><parameter name="dd"><paramtype>const duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a29de8e99550cac1f66087ec074054dc2" name="day_count" cv="const"><type>BOOST_CONSTEXPR date_rep_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1aeee480f82d2723da700e49ea78dd1725" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR date_type</type><parameter name="dd"><paramtype>const duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1aa3c73d7f6b3680235c87c171fd9299a9" name="operator+="><type>BOOST_CXX14_CONSTEXPR date_type</type><parameter name="dd"><paramtype>const duration_type &amp;</paramtype></parameter></method>
</method-group>
<method-group name="protected member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a70e263251f7d56c95a6ad496075fba9a" specifiers="explicit"><parameter name="days"><paramtype>date_int_type</paramtype></parameter><description><para>This is a private constructor which allows for the creation of new dates. It is not exposed to users since that would require class users to understand the inner workings of the date class. </para></description></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date_1a4191ba4acd93ae20eedcf02b464bde9e" specifiers="explicit"><parameter name="days"><paramtype>date_rep_type</paramtype></parameter></constructor>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__clock__device_8hpp" name="boost/date_time/date_clock_device.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__clock" name="day_clock"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>A clock providing day level services based on C time_t capabilities. </purpose><description><para>This clock uses Posix interfaces as its implementation and hence uses the timezone settings of the operating system. Incorrect user settings will result in incorrect results for the calls to local_day. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__clock_1aec714b45cdf74a8c76a1617f61ff0267" name="ymd_type"><type>date_type::ymd_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__clock_1a100d48a3f199177f08026c1f47706d56" name="local_day" specifiers="static"><type>date_type</type><purpose>Get the local day as a date type. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__clock_1a5be7793550a945c70cc8465866da67cb" name="local_day_ymd" specifiers="static"><type>date_type::ymd_type</type><purpose>Get the local day as a ymd_type. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__clock_1a426731328a704fc58b046fbec05e6c41" name="universal_day_ymd" specifiers="static"><type>date_type::ymd_type</type><purpose>Get the current day in universal date as a ymd_type. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__clock_1a65113c36075e3e16ecd31f73a09096e0" name="universal_day" specifiers="static"><type>date_type</type><purpose>Get the UTC day as a date type. </purpose></method>
</method-group>
<method-group name="private static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__clock_1afe9454ad4b6f107814b47c843a103614" name="get_local_time" specifiers="static"><type>::std::tm *</type><parameter name="result"><paramtype>std::tm &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__clock_1a59288183be68069f0e388ef3f1b1ec5a" name="get_universal_time" specifiers="static"><type>::std::tm *</type><parameter name="result"><paramtype>std::tm &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__defs_8hpp" name="boost/date_time/date_defs.hpp">
<namespace name="boost">
<namespace name="date_time">
<enum id="doxygen.date_time_reference.date__defs_8hpp_1a0d11d72713fdb7374365671f7aba646d" name="weekdays"><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a0d11d72713fdb7374365671f7aba646da834282af08c5d71b6b8ff8c56642150f" name="Sunday"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a0d11d72713fdb7374365671f7aba646da807b71aeee4ad2c7ee6c045edd5169fd" name="Monday"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a0d11d72713fdb7374365671f7aba646dae7f90b5a3b7074acea8897013e59a7a0" name="Tuesday"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a0d11d72713fdb7374365671f7aba646dab296ac4925c0227782d9df968c5a8fdf" name="Wednesday"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a0d11d72713fdb7374365671f7aba646da83bc2cee39a221da6f518464c7ccacbb" name="Thursday"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a0d11d72713fdb7374365671f7aba646da90acc016702289a55827d9db3f00d119" name="Friday"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a0d11d72713fdb7374365671f7aba646daa60a4d6a2959e7ebb4d0eefb3de67432" name="Saturday"/><purpose>An enumeration of weekday names. </purpose></enum>
<enum id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21" name="months_of_year"><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a13c5e001872c5bef50f4f86be5aa52f4" name="Jan"><default>1</default></enumvalue><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a47219cf8f86d74654862806131cd9eae" name="Feb"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a6d9bb78fcb02bca0b3b4426d78fe8be2" name="Mar"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21adf1e125d9edd1cd84fdc7ffde170c8f7" name="Apr"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a2971c13ae05940c8e5e2925610c26d5c" name="May"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a01643211a722f831ff50a50ae58fea96" name="Jun"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21aab1653cddbda104ac85eb49518ce0b2a" name="Jul"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21aa6667e33837cfd4138f49769ea4d4fe6" name="Aug"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a3f5b95952e54a3a708f1d09c37e0fdd2" name="Sep"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a8b1a5a212811dfe8752a71e4e3878bc4" name="Oct"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a7002594ffc1528ac6b302cf1a4264808" name="Nov"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21aaac379a0510e11c1c332cee606e46fff" name="Dec"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a7fd7e21db89481a0ab9a233c191a1c63" name="NotAMonth"/><enumvalue id="doxygen.date_time_reference.date__defs_8hpp_1a51108ee4099fe98a9b6f672a649b4c21a39c9a69cebd85fe550e8698bb4e5a05a" name="NumMonths"/><purpose>Simple enum to allow for nice programming with Jan, Feb, etc. </purpose></enum>

































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__duration_8hpp" name="boost/date_time/date_duration.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration" name="date_duration"><template>
      <template-type-parameter name="duration_rep_traits"/>
    </template><inherit access="private">boost::less_than_comparable1&lt; date_duration&lt; duration_rep_traits &gt;, boost::equality_comparable1&lt; date_duration&lt; duration_rep_traits &gt;, boost::addable1&lt; date_duration&lt; duration_rep_traits &gt;, boost::subtractable1&lt; date_duration&lt; duration_rep_traits &gt;, boost::dividable2&lt; date_duration&lt; duration_rep_traits &gt;, int &gt; &gt; &gt; &gt; &gt;</inherit><purpose>Duration type with date level resolution. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a1d4e8a6c686ab1b3b6f6230a1568f11a" name="duration_rep_type"><type>duration_rep_traits::int_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a0a11d8c1a5bd71f6303885aea0846888" name="duration_rep"><type>duration_rep_traits::impl_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a7f8ae85e398f1167ce6cb3d969b932e1" specifiers="explicit"><parameter name="day_count"><paramtype>duration_rep</paramtype></parameter><purpose>Construct from a day count. </purpose></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a66da9568a6b0a82939cd61aabcc93db0"><parameter name="sv"><paramtype>special_values</paramtype></parameter><description><para>construct from special_values - only works when instantiated with <link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__adapted">duration_traits_adapted</link> </para></description></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1afa9c7923c0ff093781dfb74bc934c743" name="get_rep" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_rep</type><purpose>returns days_ as it's instantiated type - used for streaming </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a461987995c5ae4c015d9a48797c5bfa9" name="as_special" cv="const"><type>BOOST_CXX14_CONSTEXPR special_values</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a6b9bd9b8800482103309c5ca5a7a5f4d" name="is_special" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1ac061514b936dddca335e52fd5394bb2e" name="days" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_rep_type</type><purpose>returns days as value, not object. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a776d6f1c9a88cada0ce70e9264741cff" name="operator==" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter><purpose>Equality. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a96cbc6852fde8b8c5ba90d45e8c3be5b" name="operator&lt;" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter><purpose>Less. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1ab016c7f16c5d2b4c81f0a69fb9d3ee7e" name="operator-="><type>BOOST_CXX14_CONSTEXPR <classname>date_duration</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter><purpose>Subtract another duration – result is signed. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1ace328c06954de7ff29e6ddd155f8445f" name="operator+="><type>BOOST_CXX14_CONSTEXPR <classname>date_duration</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>date_duration</classname> &amp;</paramtype></parameter><purpose>Add a duration – result is signed. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a1bc2071af001d125f5ff75036aa77e49" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>date_duration</classname></type><purpose>unary- Allows for dd = -date_duration(2); -&gt; dd == -2 </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1adf8d78775cd7a379b9bf370d7a2e70bc" name="operator/="><type>BOOST_CXX14_CONSTEXPR <classname>date_duration</classname> &amp;</type><parameter name="divisor"><paramtype>int</paramtype></parameter><purpose>Division operations on a duration with an integer. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1afb2065c62da55fd0f5c22e965f1d43ef" name="is_negative" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>return sign information </purpose></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration_1a72ea194dcbd9910564ccc0d413a85644" name="unit" specifiers="static"><type>BOOST_CXX14_CONSTEXPR <classname>date_duration</classname></type><purpose>Returns the smallest duration – used by to calculate 'end'. </purpose></method>
</method-group>
</class><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__adapted" name="duration_traits_adapted"><description><para>Struct for instantiating <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration">date_duration</link> <emphasis role="bold">WITH</emphasis> special values functionality. Allows for transparent implementation of either date_duration&lt;long&gt; or <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration">date_duration</link>&lt;int_adapter&lt;long&gt; &gt; </para></description><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__adapted_1a3b73cfb4accc66b79efa545f79592c1a" name="int_type"><type>long</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__adapted_1a4977f8da076552e0c89fa45ef339a476" name="impl_type"><type><classname>boost::date_time::int_adapter</classname>&lt; long &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__adapted_1a8ddc5c1a13ba010cd69ee8979bbdc7fe" name="as_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR int_type</type><parameter name="i"><paramtype><classname>impl_type</classname></paramtype></parameter></method>
</method-group>
</struct><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__long" name="duration_traits_long"><description><para>Struct for instantiating <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration">date_duration</link> with <emphasis role="bold">NO</emphasis> special values functionality. Allows for transparent implementation of either date_duration&lt;long&gt; or <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__duration">date_duration</link>&lt;int_adapter&lt;long&gt; &gt; </para></description><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__long_1ab573472c6ca3e6adbfd738f51b7e7447" name="int_type"><type>long</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__long_1a3dbd8d6289c39c7fb0e07ebff555d967" name="impl_type"><type>long</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1duration__traits__long_1af45c78a0b15e26365515edcc3098c367" name="as_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR int_type</type><parameter name="i"><paramtype>impl_type</paramtype></parameter></method>
</method-group>
</struct>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__duration__types_8hpp" name="boost/date_time/date_duration_types.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration" name="months_duration"><template>
      <template-type-parameter name="base_config"/>
    </template><purpose>additional duration type that represents a logical month </purpose><description><para>A logical month enables things like: "date(2002,Mar,2) + months(2) -&gt; 
2002-May2". If the date is a last day-of-the-month, the result will also be a last-day-of-the-month. </para></description><method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a3b9a85b4f43b2ec0cfc66096a29bc6ac"><parameter name="num"><paramtype>int_rep</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a5ef68113a6bff443b99ea4b198ba4555"><parameter name="sv"><paramtype>special_values</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a8c566821bc8f751874be46357b0b48a2" name="number_of_months" cv="const"><type>int_rep</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1ac217c5edfe6a02996e5ee3704cd0eac4" name="get_neg_offset" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><purpose>returns a negative duration </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a89bc2d22ee32b832e515d76a9efd1f35" name="get_offset" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1ab91745902d709347b48d2adc13de68c5" name="operator==" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>months_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1aee771c14c1ef31848c770e4b43a8df0e" name="operator!=" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>months_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a6244f9173b2c7525f010f99d69cb6f37" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname></type><parameter name="rhs"><paramtype>const <classname>months_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1ac223bb6954dfec0218920ea366ebb6b7" name="operator+="><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>months_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a81e76ff21eda8a6cecf9717a4efc3cdf" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname></type><parameter name="rhs"><paramtype>const <classname>months_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a5cc02569817f820797116c96daffc938" name="operator-="><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>months_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1ab62541d5d327a59f18d75cf3c015f05a" name="operator*" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname></type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a4c47bbec75cdc14a7d97b30e576506e4" name="operator*="><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname> &amp;</type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a30cd8eb189e11d3bf95f801f240fc638" name="operator/" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname></type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a8d91a1a2317a3025aeff7739a33737e9" name="operator/="><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname> &amp;</type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a2360a456ca5743efeedfbd7fa54c0502" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname></type><parameter name="y"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a6886bed86ce33d718ed4bd8e15a543c1" name="operator+="><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname> &amp;</type><parameter name="y"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a41a49006edc3f9d8a1794f17ee3d2c16" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname></type><parameter name="y"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1months__duration_1a08da12a994d6d5117766781c3a18be47" name="operator-="><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname> &amp;</type><parameter name="y"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1weeks__duration" name="weeks_duration"><template>
      <template-type-parameter name="duration_config"/>
    </template><inherit access="public">boost::date_time::date_duration&lt; duration_config &gt;</inherit><purpose>Additional duration type that represents a number of n*7 days. </purpose><method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1weeks__duration_1afdf8ed7118c9888ca7005e9f6ac7c2eb"><parameter name="w"><paramtype>typename duration_config::impl_type</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1weeks__duration_1af8d81c4140b0dfc859579aa7ce4459a8"><parameter name="sv"><paramtype>special_values</paramtype></parameter></constructor>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration" name="years_duration"><template>
      <template-type-parameter name="base_config"/>
    </template><purpose>additional duration type that represents a logical year </purpose><description><para>A logical year enables things like: "date(2002,Mar,2) + years(2) -&gt; 
2004-Mar-2". If the date is a last day-of-the-month, the result will also be a last-day-of-the-month (ie date(2001-Feb-28) + years(3) -&gt; 2004-Feb-29). </para></description><method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a8ba2af98fb27b95fa557119f8e9e4f02"><parameter name="num"><paramtype>int_rep</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1aa944bfbab068c38172dc3c2cb4af61b1"><parameter name="sv"><paramtype>special_values</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1aac6ec05ec79f4d29dcac2cbc8a41522d" name="number_of_years" cv="const"><type>BOOST_CXX14_CONSTEXPR int_rep</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1af5350bba6765542df20ec7784e24344d" name="get_neg_offset" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><purpose>returns a negative duration </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a66f73602422bcaadc246362c50eff542" name="get_offset" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1abf823ee24421ba9edd0af690d43c7086" name="operator==" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a70912dea6a4d7cfce5241ed2871f5bb8" name="operator!=" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a2db971651e91751b844c5890f5758c83" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>years_type</classname></type><parameter name="rhs"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a0cfe1e8f6ed1a2efef0eb1b868f9277c" name="operator+="><type>BOOST_CXX14_CONSTEXPR <classname>years_type</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a41a74447af37b2da15f3ba13d2e01abb" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>years_type</classname></type><parameter name="rhs"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a527cf98e5d0b84ea14601f12cc946097" name="operator-="><type>BOOST_CXX14_CONSTEXPR <classname>years_type</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>years_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1aecf23e6aa643e37356f5b626fcb58aaa" name="operator*" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>years_type</classname></type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a50f89dd2486daeb647ce8912c868317f" name="operator*="><type>BOOST_CXX14_CONSTEXPR <classname>years_type</classname> &amp;</type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a689f1e58fa3afd93e979f22960c7a290" name="operator/" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>years_type</classname></type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a832592a47707f564d87d92b85c49d296" name="operator/="><type>BOOST_CXX14_CONSTEXPR <classname>years_type</classname> &amp;</type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1af7af3ad0588f0ca438fbdc069aa34173" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname></type><parameter name="m"><paramtype>const <classname>months_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1years__duration_1a14a302eb60037f6abbca3bbc81807243" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>months_type</classname></type><parameter name="m"><paramtype>const <classname>months_type</classname> &amp;</paramtype></parameter></method>
</method-group>
</class><data-member id="doxygen.date_time_reference.date__duration__types_8hpp_1a1b682e5770704817b0533ea7681271f5" name="years_duration"><type>class BOOST_SYMBOL_VISIBLE</type></data-member>

































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__facet_8hpp" name="boost/date_time/date_facet.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet" name="date_facet"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="OutItrT"><default>std::ostreambuf_iterator&lt;CharT, std::char_traits&lt;CharT&gt; &gt;</default></template-type-parameter>
    </template><inherit access="public">std::locale::facet</inherit><description><para>Class that provides format based I/O facet for date types.</para><para>This class allows the formatting of dates by using format string. Format strings are:</para><para><itemizedlist>
<listitem><para>A =&gt; long_weekday_format - Full name Ex: Tuesday</para>
</listitem><listitem><para>a =&gt; short_weekday_format - Three letter abbreviation Ex: Tue</para>
</listitem><listitem><para>B =&gt; long_month_format - Full name Ex: October</para>
</listitem><listitem><para>b =&gt; short_month_format - Three letter abbreviation Ex: Oct</para>
</listitem><listitem><para>x =&gt; standard_format_specifier - defined by the locale</para>
</listitem><listitem><para>Y-b-d =&gt; default_date_format - YYYY-Mon-dd</para>
</listitem></itemizedlist>
</para><para>Default month format == b Default weekday format == a </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a35b5bde1ed0009f0e3340dd29ec5ac9d" name="duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a03632f527a842caa519fa976cce5ae31" name="day_of_week_type"><type>date_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a9fd89e9fec99d94e38e477a17c90e6c2" name="day_type"><type>date_type::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a0c23c805a3fd065eeb198064918cd803" name="month_type"><type>date_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a5d22db4ccf78f4dc48a78dd7eea09522" name="period_type"><type><classname>boost::date_time::period</classname>&lt; date_type, duration_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a87245d846dd7492cb8dd1b57e709cd7a" name="string_type"><type>std::basic_string&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a68ec4d04399067ad0f6a3f749d5e782f" name="char_type"><type>CharT</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a5bdf464d1671193eda3a177e02020273" name="period_formatter_type"><type><classname>boost::date_time::period_formatter</classname>&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a29a058c4f9e2165f8fb5fb551c7b9fe9" name="special_values_formatter_type"><type><classname>boost::date_time::special_values_formatter</classname>&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a9f59d60de5eec3d5bb65efc33f24eb63" name="input_collection_type"><type>std::vector&lt; std::basic_string&lt; CharT &gt; &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a956fc6728a65d778a02e750df3b75b06" name="date_gen_formatter_type"><type><classname>date_generator_formatter</classname>&lt; date_type, CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a6d923d20202c2d2073ce4de77f9f3289" name="partial_date_type"><type><classname>partial_date</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a2fdc72cbd4f1bbb6e695678a3cdbbc04" name="nth_kday_type"><type><classname>nth_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ad4287860e2fde42a8541016636c9c23c" name="first_kday_type"><type><classname>first_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a7c4608caabc22422e08133ebd3920efb" name="last_kday_type"><type><classname>last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a364fd6883fff8b982032052b63a5f5ee" name="kday_after_type"><type><classname>first_kday_after</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1aeeaf0381ca2a72e909cce2fa35062ad9" name="kday_before_type"><type><classname>first_kday_before</classname>&lt; date_type &gt;</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a136da13bb67926d1cac8ac37a4e5b703" name="long_weekday_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a7cc5546d04d246f34a5cae10e733e1c5" name="short_weekday_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a96b878aa3e43dfc11c391c274b580b29" name="long_month_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a069492903d935e7a599e83ad3fe4c71d" name="short_month_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1af478ec59d22394a1885e382966e35d38" name="default_period_separator" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1afbc912d59a844d271479976858c17536" name="standard_format_specifier" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1aac4d817be1b4da1cc44a734ab97d8db6" name="iso_format_specifier" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ac6935ffaafbbed71816040712fa8deb6" name="iso_format_extended_specifier" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a5eb688eda34b69dbd5db1e161dbf1f1f" name="default_date_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a8cd55aa35a08b2bea165f165616d8af1" name="id" specifiers="static"><type>std::locale::id</type></data-member>
<method-group name="public member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ad13ae65da0329dd6ce41a71eb034276b" name="__get_id" cv="const"><type>std::locale::id &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a1641ee87c1c1b03224477ac9bda380c6" specifiers="explicit"><parameter name="a_ref"><paramtype>::size_t</paramtype><default>0</default></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a9a7b7e2fffaaeeaef51d3084b2f78bcb" specifiers="explicit"><parameter name="format_str"><paramtype>const char_type *</paramtype></parameter><parameter name="short_names"><paramtype>const input_collection_type &amp;</paramtype></parameter><parameter name="ref_count"><paramtype>::size_t</paramtype><default>0</default></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ac7d0c434d353ea61af04ce9cc254bf15" specifiers="explicit"><parameter name="format_str"><paramtype>const char_type *</paramtype></parameter><parameter name="per_formatter"><paramtype><classname>period_formatter_type</classname></paramtype><default>period_formatter_type()</default></parameter><parameter name="sv_formatter"><paramtype><classname>special_values_formatter_type</classname></paramtype><default>special_values_formatter_type()</default></parameter><parameter name="dg_formatter"><paramtype><classname>date_gen_formatter_type</classname></paramtype><default>date_gen_formatter_type()</default></parameter><parameter name="ref_count"><paramtype>::size_t</paramtype><default>0</default></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a656c511c8cede3dbaed51500d2ecaa63" name="format"><type>void</type><parameter name="format_str"><paramtype>const char_type *const</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ae7098a4bdcaf4dca1e889f8212515167" name="set_iso_format" specifiers="virtual"><type>void</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a3a48b448871eda009dec16a6c8279b07" name="set_iso_extended_format" specifiers="virtual"><type>void</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a28e84de0bf790dd64bcb598d3404f7f1" name="month_format"><type>void</type><parameter name="format_str"><paramtype>const char_type *const</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ad4d47e3ad8fb0fcc4e66f32cedf3e391" name="weekday_format"><type>void</type><parameter name="format_str"><paramtype>const char_type *const</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a0adcd6af5eec2136def1c31fd8f9b50a" name="period_formatter"><type>void</type><parameter name="per_formatter"><paramtype><classname>period_formatter_type</classname></paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1afe13bc9fc7311df66ff8722bef0b5c82" name="special_values_formatter"><type>void</type><parameter name="svf"><paramtype>const <classname>special_values_formatter_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a1ca3654bf1c11505f941fbabb77fbd4f" name="short_weekday_names"><type>void</type><parameter name="short_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a98a23beba4d57cc1524b6e1767c62e23" name="long_weekday_names"><type>void</type><parameter name="long_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a106372bf51b1d3af98f57b7e9d148581" name="short_month_names"><type>void</type><parameter name="short_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ab031562ccfab7ff78f65fbf16f750136" name="long_month_names"><type>void</type><parameter name="long_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a35d367912b66e31b90ac1601ff2d86af" name="date_gen_phrase_strings"><type>void</type><parameter name="new_strings"><paramtype>const input_collection_type &amp;</paramtype></parameter><parameter name="beg_pos"><paramtype>typename date_gen_formatter_type::phrase_elements</paramtype><default>date_gen_formatter_type::first</default></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a6234f2b4fd11eadc243c884b324e2a44" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ac250c80e04a92a5d392a967323871a5e" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="dd"><paramtype>const duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a2fe2ad7cd5e5696bf923c0e7122492e4" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="m"><paramtype>const month_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a4fc9585af6680e4d9275721a0155dd34" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="day"><paramtype>const day_type &amp;</paramtype></parameter><purpose>puts the day of month </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ad9820606340e3d8a833e251bd3906789" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="dow"><paramtype>const day_of_week_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1aa718bafbe0348c665f2d0391538c6b92" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="p"><paramtype>const <classname>period_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a24a1ae0197f5bf0cd38aa93edb930de9" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="pd"><paramtype>const <classname>partial_date_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a05bbedccc8ba1c614bce36dfd2d9538d" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="nkd"><paramtype>const <classname>nth_kday_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a18febe511c7d2bc04d59e3464fe9a5f7" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="fkd"><paramtype>const <classname>first_kday_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a39f0cf3ad3f1f1445229fcc4a1b809bb" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="lkd"><paramtype>const <classname>last_kday_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ac69f9f5f7f74cb2d31571a404e4e8cf1" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="fkb"><paramtype>const <classname>kday_before_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1ad00e920428476ef7744d869a3f068288" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="fka"><paramtype>const <classname>kday_after_type</classname> &amp;</paramtype></parameter></method>
</method-group>
<method-group name="protected member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a1408e85ab9d475c5eb86b412be61b204" name="do_put_special" cv="const" specifiers="virtual"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name=""><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name=""><paramtype>char_type</paramtype></parameter><parameter name="sv"><paramtype>const boost::date_time::special_values</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet_1a486da5dd93b0f4c3c38ef7580eff919f" name="do_put_tm" cv="const" specifiers="virtual"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_char"><paramtype>char_type</paramtype></parameter><parameter name="tm_value"><paramtype>const tm &amp;</paramtype></parameter><parameter name="a_format"><paramtype>string_type</paramtype></parameter></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet" name="date_input_facet"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="InItrT"><default>std::istreambuf_iterator&lt;CharT, std::char_traits&lt;CharT&gt; &gt;</default></template-type-parameter>
    </template><inherit access="public">std::locale::facet</inherit><purpose>Input facet. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ae8b6284dbd00889f3c7e6ed664d166d0" name="duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a15dd277ec5705c16073a5597fc047e22" name="day_of_week_type"><type>date_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a17f545481206491b231877654684c110" name="day_type"><type>date_type::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ad571c2cb3ef2638152a34d29102e03f9" name="month_type"><type>date_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1abdeef926454d8a01545a34c9a2c6ae52" name="year_type"><type>date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a322d6f0ee8eb191201471b30914fa4b3" name="period_type"><type><classname>boost::date_time::period</classname>&lt; date_type, duration_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a1e68fafd906477014b9246bc87ce0bfc" name="string_type"><type>std::basic_string&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a99c26e331d1b9b25c079c2a0a64a3604" name="char_type"><type>CharT</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1aa98b7c76c2910126adf277cd9fb9bcdc" name="period_parser_type"><type><classname>boost::date_time::period_parser</classname>&lt; date_type, CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ae08339cdc5f99af07ad2308ab10bf1c6" name="special_values_parser_type"><type><classname>boost::date_time::special_values_parser</classname>&lt; date_type, CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1afc0f5d5301a3edb624ac5bfac992d809" name="input_collection_type"><type>std::vector&lt; std::basic_string&lt; CharT &gt; &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a80cd47bc1a2d0263b37ade1894da0b8d" name="format_date_parser_type"><type><classname>format_date_parser</classname>&lt; date_type, CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1af5380a33538d7dd1a968ddb6ad3640a2" name="date_gen_parser_type"><type><classname>date_generator_parser</classname>&lt; date_type, CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ae9aa4e1750ed538b577a05c6d3c9baa0" name="partial_date_type"><type><classname>partial_date</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ab698bd5a4784e907278ce9d8a1d1a27c" name="nth_kday_type"><type><classname>nth_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1abbb006c10bf1593f09418d4e19e54045" name="first_kday_type"><type><classname>first_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a394c3b0651d4d1421b1b224cc5998bc2" name="last_kday_type"><type><classname>last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a5728d059acf53a4eef290fae3a5ee088" name="kday_after_type"><type><classname>first_kday_after</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a4e1b11329b3e48a620237c833b7ddd37" name="kday_before_type"><type><classname>first_kday_before</classname>&lt; date_type &gt;</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a4bf9b0cbd679c1be9e7e797966ee3c9f" name="long_weekday_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a67577c86d76578409f0ebf7f53412736" name="short_weekday_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a8e5fde4b75e49028a6e23661d3bd5bb3" name="long_month_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a3bb33eb4395204a6bd9a6b6bd0c92e5f" name="short_month_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1afd7daa52be77eebfc59cdc57ef65dbe2" name="four_digit_year_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ad2b143a71b88295001ddef71566003bc" name="two_digit_year_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a9281309446d86814d9ff3e4105620fe3" name="default_period_separator" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a4d252ccc46b82cfe1edecdef09cd5564" name="standard_format_specifier" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ae05e4a17f7d845975529a18fa34386b9" name="iso_format_specifier" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a6a9953419a6788f18bcf1ad38e20a348" name="iso_format_extended_specifier" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a81c5cf70eb71808d1d050960b2eeee87" name="default_date_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a4b570750a6255a400cd8de69a3a26ba0" name="id" specifiers="static"><type>std::locale::id</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ad81afc209f85a4669cfe49c4fe0e271f" specifiers="explicit"><parameter name="a_ref"><paramtype>::size_t</paramtype><default>0</default></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a28b4bd0e36f0d4379016e17b83077f85" specifiers="explicit"><parameter name="format_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="a_ref"><paramtype>::size_t</paramtype><default>0</default></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ae67a9452ac655c1d9eed74cca826e6ba" specifiers="explicit"><parameter name="format_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="date_parser"><paramtype>const <classname>format_date_parser_type</classname> &amp;</paramtype></parameter><parameter name="sv_parser"><paramtype>const <classname>special_values_parser_type</classname> &amp;</paramtype></parameter><parameter name="per_parser"><paramtype>const <classname>period_parser_type</classname> &amp;</paramtype></parameter><parameter name="date_gen_parser"><paramtype>const <classname>date_gen_parser_type</classname> &amp;</paramtype></parameter><parameter name="ref_count"><paramtype>::size_t</paramtype><default>0</default></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1aff76a8a05cecc1e7c91c0eeeb28328c9" name="format"><type>void</type><parameter name="format_str"><paramtype>const char_type *const</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1adc0ffae9469b78ab742c07d7a408b516" name="set_iso_format" specifiers="virtual"><type>void</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1aecded1db411f9c3ab6ca250a0779acc7" name="set_iso_extended_format" specifiers="virtual"><type>void</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a2daa5ef7634ced74218e1c91c84c32a4" name="month_format"><type>void</type><parameter name="format_str"><paramtype>const char_type *const</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a62f5a26e335d5298906f56e05b224f8b" name="weekday_format"><type>void</type><parameter name="format_str"><paramtype>const char_type *const</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a2c0c6ce45fe8c18633f15f1bea962d07" name="year_format"><type>void</type><parameter name="format_str"><paramtype>const char_type *const</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1aa487f056ad2f40e97b4fe413c62ba54b" name="period_parser"><type>void</type><parameter name="per_parser"><paramtype><classname>period_parser_type</classname></paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a4cfd4798903ce9bafe9c462aeb0c932e" name="short_weekday_names"><type>void</type><parameter name="weekday_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a21cf404b1d7eb3481a37cc58b31a0c90" name="long_weekday_names"><type>void</type><parameter name="weekday_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a95ec7f36ae88f667c9cf7662ad90c190" name="short_month_names"><type>void</type><parameter name="month_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1aaef14bc3b708dd3eb4505c80d4aa97b9" name="long_month_names"><type>void</type><parameter name="month_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a415fe4da5471f7fdd5685ec5edb98f11" name="date_gen_element_strings"><type>void</type><parameter name="col"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1abd1019ca32a37c2a203d4e1dfb5d1bce" name="date_gen_element_strings"><type>void</type><parameter name="first"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="second"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="third"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="fourth"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="fifth"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="last"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="before"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="after"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="of"><paramtype>const string_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ae9144bddab386797d1e5fa19db89dfa2" name="special_values_parser"><type>void</type><parameter name="sv_parser"><paramtype><classname>special_values_parser_type</classname></paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a9bc7558ba16554ae72556e117b5c2681" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name=""><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="d"><paramtype>date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a589064b6adb61ceb4980ac02181571b4" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name=""><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="m"><paramtype>month_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a6a1613742ba2af7de84f1b9e6dfc4621" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name=""><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="wd"><paramtype>day_of_week_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1aeb00ab387597dc4ed1653b3099e626a0" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name=""><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="d"><paramtype>day_type &amp;</paramtype></parameter><purpose>Expects 1 or 2 digit day range: 1-31. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a39da009c31e91190bc103f9ed9702578" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name=""><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="y"><paramtype>year_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a197bcec4f4c3c2329b63c94f6b3f71e7" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="dd"><paramtype>duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1afd704b65aee4452d1f78a13ed20605c0" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="p"><paramtype><classname>period_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1ab6480973fc0dec7da32fa9c46fe0db56" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="nkd"><paramtype><classname>nth_kday_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a18101798c6219bfdccef9397fa57f02c" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="pd"><paramtype><classname>partial_date_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1aeb5f5ca43f93cf6ad5cc8a69e1489c21" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fkd"><paramtype><classname>first_kday_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1a54482b5f1917ce15baf9bbc06fba8702" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="lkd"><paramtype><classname>last_kday_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1adc97a3088eb2d3daab4d48eb3ddf7c17" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fkb"><paramtype><classname>kday_before_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet_1acf07f42829c8c349ff4641220ef72877" name="get" cv="const"><type>InItrT</type><parameter name="from"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="to"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fka"><paramtype><classname>kday_after_type</classname> &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__format__simple_8hpp" name="boost/date_time/date_format_simple.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format" name="simple_format"><template>
      <template-type-parameter name="charT"/>
    </template><purpose>Class to provide simple basic formatting rules. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1a702b6c2736361b2257fcb89b03cae491" name="not_a_date" specifiers="static"><type>const charT *</type><purpose>String used printed is date is invalid. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1a59dfd3aeac2ba196b74fc9cc8bfa3c2b" name="pos_infinity" specifiers="static"><type>const charT *</type><purpose>String used to for positive infinity value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1adc5b3efcf1445bb1c266638af54639bf" name="neg_infinity" specifiers="static"><type>const charT *</type><purpose>String used to for positive infinity value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1a2c2aac9ea9d70b677dbba6516c3b4e67" name="month_format" specifiers="static"><type>month_format_spec</type><purpose>Describe month format. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1ae67d79c3df41e84bb371c4ae694243a4" name="date_order" specifiers="static"><type>ymd_order_spec</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1ab0c16fdf80f154127126a3fd7415aaa8" name="has_date_sep_chars" specifiers="static"><type>bool</type><purpose>This format uses '-' to separate date elements. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1a5f0890ef1103602bdaa98fe46e06577e" name="year_sep_char" specifiers="static"><type>charT</type><purpose>Char to sep? </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1abc49f0b52c1f20e7a7022187e8b1fa3f" name="month_sep_char" specifiers="static"><type>charT</type><purpose>char between year-month </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1a4a54b1f024e5a9bcfe9407eac181296f" name="day_sep_char" specifiers="static"><type>charT</type><purpose>Char to separate month-day. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1aede7374199daf68588ae9c911e036ef3" name="hour_sep_char" specifiers="static"><type>charT</type><purpose>char between date-hours </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1ab9bceb2116e8927cacfbbea4ba2ea486" name="minute_sep_char" specifiers="static"><type>charT</type><purpose>char between hour and minute </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_1a5712146dd2a333f57752b683720ac9ee" name="second_sep_char" specifiers="static"><type>charT</type><purpose>char for second </purpose></method>
</method-group>
</class><class-specialization id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4" name="simple_format"><template>
    </template><specialization><template-arg>wchar_t</template-arg></specialization><purpose>Specialization of formmating rules for wchar_t. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1acef0c7e9076c30e4c25ddcf83c3b641e" name="not_a_date" specifiers="static"><type>const wchar_t *</type><purpose>String used printed is date is invalid. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1a8b00658170a5631cc79c773a2a787536" name="pos_infinity" specifiers="static"><type>const wchar_t *</type><purpose>String used to for positive infinity value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1a244de07e971e3d1c0c049d5bc29d745a" name="neg_infinity" specifiers="static"><type>const wchar_t *</type><purpose>String used to for positive infinity value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1a885831a6af4eb41439d71594bf81009e" name="month_format" specifiers="static"><type>month_format_spec</type><purpose>Describe month format. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1a7352edabcbdc0d1a8f3056ba9c88cda3" name="date_order" specifiers="static"><type>ymd_order_spec</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1a488db82975b7cfaf901267feed7bc673" name="has_date_sep_chars" specifiers="static"><type>bool</type><purpose>This format uses '-' to separate date elements. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1a08edf597cbaa842e3910a51b50a9e855" name="year_sep_char" specifiers="static"><type>wchar_t</type><purpose>Char to sep? </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1aad7a1693e6f5b0d6c7aea2790d0ed61d" name="month_sep_char" specifiers="static"><type>wchar_t</type><purpose>char between year-month </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1abe1ded029830cc1af6a9d8477410c340" name="day_sep_char" specifiers="static"><type>wchar_t</type><purpose>Char to separate month-day. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1afae1296a85bab1406c12cd84f34147ac" name="hour_sep_char" specifiers="static"><type>wchar_t</type><purpose>char between date-hours </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1a4fbc3847ec762436cbfa0cb750eac91c" name="minute_sep_char" specifiers="static"><type>wchar_t</type><purpose>char between hour and minute </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1simple__format_3_01wchar__t_01_4_1a2b38ba1d90282edd9781044b27fd7250" name="second_sep_char" specifiers="static"><type>wchar_t</type><purpose>char for second </purpose></method>
</method-group>
</class-specialization>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__formatting_8hpp" name="boost/date_time/date_formatting.hpp">
<namespace name="boost">
<namespace name="date_time">

































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__formatting__limited_8hpp" name="boost/date_time/date_formatting_limited.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__formatter" name="date_formatter"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="format_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Convert a date to string using format policies. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__formatter_1ad4f6dd86a22bb11f20eabc4ba393561b" name="date_to_string" specifiers="static"><type>std::string</type><parameter name="d"><paramtype>date_type</paramtype></parameter><purpose>Convert to a date to standard string using format policies. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__formatter_1acf0cb3fcf170bbb42fb88ece571a276e" name="date_to_string" specifiers="static"><type>string_type</type><parameter name="d"><paramtype>date_type</paramtype></parameter><purpose>Convert to a date to standard string using format policies. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__formatter" name="month_formatter"><template>
      <template-type-parameter name="month_type"/>
      <template-type-parameter name="format_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Formats a month as as string into an ostream. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__formatter_1a255aa570deec5b86f24c89b152f527fa" name="format_month" specifiers="static"><type>std::ostream &amp;</type><parameter name="month"><paramtype>const month_type &amp;</paramtype></parameter><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><purpose>Formats a month as as string into an ostream. </purpose><description><para>This function demands that month_type provide functions for converting to short and long strings if that capability is used. </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1month__formatter_1a14afd16cfeaec26486a601fa5a90dc02" name="format_month" specifiers="static"><type>ostream_type &amp;</type><parameter name="month"><paramtype>const month_type &amp;</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><purpose>Formats a month as as string into an ostream. </purpose><description><para>This function demands that month_type provide functions for converting to short and long strings if that capability is used. </para></description></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1ymd__formatter" name="ymd_formatter"><template>
      <template-type-parameter name="ymd_type"/>
      <template-type-parameter name="format_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Convert ymd to a standard string formatting policies. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ymd__formatter_1a4326ac15adcd24088b66ad1ed2aff80d" name="ymd_to_string" specifiers="static"><type>std::string</type><parameter name="ymd"><paramtype>ymd_type</paramtype></parameter><purpose>Convert ymd to a standard string formatting policies. </purpose><description><para>This is standard code for handling date formatting with year-month-day based date information. This function uses the format_type to control whether the string will contain separator characters, and if so what the character will be. In addtion, it can format the month as either an integer or a string as controled by the formatting policy </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ymd__formatter_1a5835c2562de7f19fbd6cda309e4b497d" name="ymd_to_string" specifiers="static"><type>std::basic_string&lt; charT &gt;</type><parameter name="ymd"><paramtype>ymd_type</paramtype></parameter><purpose>Convert ymd to a standard string formatting policies. </purpose><description><para>This is standard code for handling date formatting with year-month-day based date information. This function uses the format_type to control whether the string will contain separator characters, and if so what the character will be. In addtion, it can format the month as either an integer or a string as controled by the formatting policy </para></description></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__formatting__locales_8hpp" name="boost/date_time/date_formatting_locales.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__date__formatter" name="ostream_date_formatter"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="facet_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Convert a date to string using format policies. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__date__formatter_1aae71d7eb07bee9641656260ce5bdf62a" name="ostream_type"><type>std::basic_ostream&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__date__formatter_1aae27fd5100138663b674490f78831e1e" name="ymd_type"><type>date_type::ymd_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__date__formatter_1a60389490dcc2696bcddd71b6b48f1e91" name="date_put" specifiers="static"><type>void</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><parameter name="f"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Put date into an ostream. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__date__formatter_1aad7003e8daa001ddb2eb449c39f322a6" name="date_put" specifiers="static"><type>void</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><purpose>Put date into an ostream. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__month__formatter" name="ostream_month_formatter"><template>
      <template-type-parameter name="facet_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Formats a month as as string into an ostream. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__month__formatter_1a35734bfadf6162f85ed87589991cad2d" name="month_type"><type>facet_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__month__formatter_1af916ea011167058617133414d780e1dc" name="ostream_type"><type>std::basic_ostream&lt; charT &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__month__formatter_1a86e5b65a7ef7a12b9f42f1f233e96362" name="format_month" specifiers="static"><type>void</type><parameter name="month"><paramtype>const month_type &amp;</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><parameter name="f"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Formats a month as as string into an output iterator. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__weekday__formatter" name="ostream_weekday_formatter"><template>
      <template-type-parameter name="weekday_type"/>
      <template-type-parameter name="facet_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Formats a weekday. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__weekday__formatter_1adcc623304a4383ee5ea4aa445ee8ece5" name="month_type"><type>facet_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__weekday__formatter_1a5b1d934f16117b92caddd8607d84e34d" name="ostream_type"><type>std::basic_ostream&lt; charT &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__weekday__formatter_1a949675861ae5f9811fa30e04d1794627" name="format_weekday" specifiers="static"><type>void</type><parameter name="wd"><paramtype>const weekday_type &amp;</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><parameter name="f"><paramtype>const facet_type &amp;</paramtype></parameter><parameter name="as_long_string"><paramtype>bool</paramtype></parameter><purpose>Formats a month as as string into an output iterator. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__ymd__formatter" name="ostream_ymd_formatter"><template>
      <template-type-parameter name="ymd_type"/>
      <template-type-parameter name="facet_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Convert ymd to a standard string formatting policies. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__ymd__formatter_1a1eb99619225e0327346b839ccc5be300" name="month_type"><type>ymd_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__ymd__formatter_1a35adb0651d4a18db8501db7c408062ee" name="month_formatter_type"><type><classname>ostream_month_formatter</classname>&lt; facet_type, charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__ymd__formatter_1afec76df85985239d033890784d0c5189" name="ostream_type"><type>std::basic_ostream&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__ymd__formatter_1a4f720c8fc6757f42c620cd84fe066a84" name="foo_type"><type>std::basic_string&lt; charT &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__ymd__formatter_1a1b1fdb817d807e4d3a7807dabcc96622" name="ymd_put" specifiers="static"><type>void</type><parameter name="ymd"><paramtype>ymd_type</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><parameter name="f"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Convert ymd to a standard string formatting policies. </purpose><description><para>This is standard code for handling date formatting with year-month-day based date information. This function uses the format_type to control whether the string will contain separator characters, and if so what the character will be. In addtion, it can format the month as either an integer or a string as controled by the formatting policy </para></description></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__generator__formatter_8hpp" name="boost/date_time/date_generator_formatter.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter" name="date_generator_formatter"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="OutItrT"><default>std::ostreambuf_iterator&lt;CharT, std::char_traits&lt;CharT&gt; &gt;</default></template-type-parameter>
    </template><purpose>Formats date_generators for output. </purpose><description><para>Formatting of date_generators follows specific orders for the various types of date_generators.<itemizedlist>
<listitem><para><link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date">partial_date</link> =&gt; "dd Month"</para>
</listitem><listitem><para>nth_day_of_the_week_in_month =&gt; "nth weekday of month"</para>
</listitem><listitem><para>first_day_of_the_week_in_month =&gt; "first weekday of month"</para>
</listitem><listitem><para>last_day_of_the_week_in_month =&gt; "last weekday of month"</para>
</listitem><listitem><para>first_day_of_the_week_after =&gt; "weekday after"</para>
</listitem><listitem><para>first_day_of_the_week_before =&gt; "weekday before" While the order of the elements in these phrases cannot be changed, the elements themselves can be. Weekday and Month get their formats and names from the <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__facet">date_facet</link>. The remaining elements are stored in the <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter">date_generator_formatter</link> and can be customized upon construction or via a member function. The default elements are those shown in the examples above. </para>
</listitem></itemizedlist>
</para></description><enum id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1" name="phrase_elements"><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1a612ea2e057d3b91a263a734148b55d48" name="first"><default>0</default></enumvalue><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1a12fe4dc4bfd965b6869f2dcf8df73815" name="second"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1a6d424ffe375f195a671e5c3967c66edc" name="third"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1a09cd896571f5711693d369a88b49316c" name="fourth"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1a90cc3cd599d94ddad775d0ab6b176b4c" name="fifth"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1aa30370d8f9d2e6d9e0c1308edf47883e" name="last"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1a47825091e3a26363d6b98f62123f7c5f" name="before"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1aeac45b69339ad7e4c55bd09052887055" name="after"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1ac922f249ca9cd47f59a99d4d0097d1e0" name="of"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae1295a516780e9c4b33a31cebfa60ad1a9d2f8c03813efc93cbea6142733faeb7" name="number_of_phrase_elements"/></enum>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1abc6593f255cebd622762460a3203134f" name="partial_date_type"><type><classname>partial_date</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ade9e597a537c012c151b18ecc36f4087" name="nth_kday_type"><type><classname>nth_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a9c4e8724cfdb3fa1b46f132e432c639e" name="first_kday_type"><type><classname>first_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a25eee6c57fdd27d65b3b6caa10d20923" name="last_kday_type"><type><classname>last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a54895fd55a1a3d519d706d5a817d204e" name="kday_after_type"><type><classname>first_kday_after</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a005a839dc916e2609fc018e7c2475ce7" name="kday_before_type"><type><classname>first_kday_before</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a1790ec02560c98e237e15bdc2b3198d5" name="char_type"><type>CharT</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a1a86cf5b7e064807af94738eefd4a0b9" name="string_type"><type>std::basic_string&lt; char_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a019929926ceaee40f72513ccb3a4bcde" name="collection_type"><type>std::vector&lt; string_type &gt;</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1acc901ad6af5ce7e65c31d76d5f1a3a5f" name="first_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a82348a70ac118fc4b7a4e0da674128f0" name="second_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a696838eb69f85027122c6a98bc1cccf0" name="third_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ac623876b116e442592c570af3535d990" name="fourth_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a4ab0a1e2aa40eb00170473c8b6ec7b8e" name="fifth_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ab31dfe2006e80347ae6598008faf06ea" name="last_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ae2dc916348f25301ad9e841322a8283a" name="before_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1adc2dd60bdc7a9a39d4cf065ea68c01e8" name="after_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a498cba9e125ca625ae29eaf39ec1a334" name="of_string" specifiers="static"><type>const char_type</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a786be65eb95076c730c2eb7975284962"><purpose>Default format elements used. </purpose></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a3c3230491499e26b1c87954386edbeb5"><parameter name="first_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="second_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="third_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="fourth_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="fifth_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="last_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="before_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="after_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="of_str"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Constructor that allows for a custom set of phrase elements. </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a2e75cdeaa08db0d15ca266de0f1acdb7" name="elements"><type>void</type><parameter name="new_strings"><paramtype>const collection_type &amp;</paramtype></parameter><parameter name="beg_pos"><paramtype>phrase_elements</paramtype><default>first</default></parameter><purpose>Replace the set of phrase elements with those contained in new_strings. </purpose><description><para>The order of the strings in the given collection is important. They must follow:<itemizedlist>
<listitem><para>first, second, third, fourth, fifth, last, before, after, of.</para>
</listitem></itemizedlist>
</para><para>It is not necessary to send in a complete set if only a few elements are to be replaced as long as the correct beg_pos is used.</para><para>Ex: To keep the default first through fifth elements, but replace the rest with a collection of:<itemizedlist>
<listitem><para>"final", "prior", "following", "in". The beg_pos of date_generator_formatter::last would be used. </para>
</listitem></itemizedlist>
</para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a16c1142eaf79bde5d25420ec7968220b" name="put_partial_date" cv="const"><type>OutItrT</type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="a_fill"><paramtype>CharT</paramtype></parameter><parameter name="pd"><paramtype>const <classname>partial_date_type</classname> &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Put a <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date">partial_date</link> =&gt; "dd Month". </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1aa04a53d7b44eb908a8770c398bd041e5" name="put_nth_kday" cv="const"><type>OutItrT</type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="a_fill"><paramtype>CharT</paramtype></parameter><parameter name="nkd"><paramtype>const <classname>nth_kday_type</classname> &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Put an nth_day_of_the_week_in_month =&gt; "nth weekday of month". </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a623c309d1d8a2937e89d730f799e2d9d" name="put_first_kday" cv="const"><type>OutItrT</type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="a_fill"><paramtype>CharT</paramtype></parameter><parameter name="fkd"><paramtype>const <classname>first_kday_type</classname> &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Put a first_day_of_the_week_in_month =&gt; "first weekday of month". </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a2440af797396d122b2017c13bb9e1199" name="put_last_kday" cv="const"><type>OutItrT</type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="a_fill"><paramtype>CharT</paramtype></parameter><parameter name="lkd"><paramtype>const <classname>last_kday_type</classname> &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Put a last_day_of_the_week_in_month =&gt; "last weekday of month". </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1ad01cddd114e77dc9ee5a73950592ab38" name="put_kday_before" cv="const"><type>OutItrT</type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="a_fill"><paramtype>CharT</paramtype></parameter><parameter name="fkb"><paramtype>const <classname>kday_before_type</classname> &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Put a first_day_of_the_week_before =&gt; "weekday before". </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1abe664d07003cb1e60513952ed95ce127" name="put_kday_after" cv="const"><type>OutItrT</type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="a_fill"><paramtype>CharT</paramtype></parameter><parameter name="fka"><paramtype>const <classname>kday_after_type</classname> &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Put a first_day_of_the_week_after =&gt; "weekday after". </purpose></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__formatter_1a2be2373b43b437e38678401fef556b40" name="put_string" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="str"><paramtype>const string_type &amp;</paramtype></parameter><purpose>helper function to put the various member string into stream </purpose></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__generator__parser_8hpp" name="boost/date_time/date_generator_parser.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser" name="date_generator_parser"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="charT"/>
    </template><purpose>Class for date_generator parsing. </purpose><description><para>The elements of a date_generator "phrase" are parsed from the input stream in a particular order. All elements are required and the order in which they appear cannot change, however, the elements themselves can be changed. The default elements and their order are as follows:</para><para><itemizedlist>
<listitem><para><link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date">partial_date</link> =&gt; "dd Month"</para>
</listitem><listitem><para>nth_day_of_the_week_in_month =&gt; "nth weekday of month"</para>
</listitem><listitem><para>first_day_of_the_week_in_month =&gt; "first weekday of month"</para>
</listitem><listitem><para>last_day_of_the_week_in_month =&gt; "last weekday of month"</para>
</listitem><listitem><para>first_day_of_the_week_after =&gt; "weekday after"</para>
</listitem><listitem><para>first_day_of_the_week_before =&gt; "weekday before"</para>
</listitem></itemizedlist>
</para><para>Weekday and Month names and formats are handled via the <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__input__facet">date_input_facet</link>. </para></description><enum id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798" name="phrase_elements"><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798a905372352948dfcb3a61333fc0714a81" name="first"><default>0</default></enumvalue><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798aeda38fb2342c8bf1ece35b7fd9f3790b" name="second"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798a99c4f47928276293a70fcc605596f72e" name="third"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798aac80f33032fcbea80820a9c586a4713a" name="fourth"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798a921140e69e37a51ec8eaab2cfa02107b" name="fifth"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798a1d705bf0e50ee5d2e3ce5cb6d8a35847" name="last"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798afa65d7a21279b399ddb0a89554fe4d96" name="before"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798a4d119fe1b878650d701e5b9cf5603dd5" name="after"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798a8e18b378d4255bb9c73386431615dd56" name="of"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ad2554b573c102addf8ae6544beed4798aeb647dffb4adbb91dc9f819857213b41" name="number_of_phrase_elements"/></enum>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a65f3d66906178597f72dd863dd11affc" name="string_type"><type>std::basic_string&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a89be3f462474be31f791468b47919940" name="stream_itr_type"><type>std::istreambuf_iterator&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ae19ed9d41669c47f5769109a53e11550" name="month_type"><type>date_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1aa9e7d196ac3d00ec9232223e4c5efa7c" name="day_of_week_type"><type>date_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a6b241622d48d9e54dfa04430eb4ad060" name="day_type"><type>date_type::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a6e18b4790b17adcc7e2c8fd75cbe7867" name="parse_tree_type"><type><classname>string_parse_tree</classname>&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a63d79a4e18523e4e884def253035d03e" name="match_results"><type><classname>parse_tree_type::parse_match_result_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a2a5522758ebba95be58716bd5156764d" name="collection_type"><type>std::vector&lt; std::basic_string&lt; charT &gt; &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a5d114f8c3882df9635a02f77f7c2772c" name="partial_date_type"><type><classname>partial_date</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a6ccee9d7ba566836fcc94525acd3d404" name="nth_kday_type"><type><classname>nth_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1aa092cbc6a95a478a1a4c33091704a0dc" name="first_kday_type"><type><classname>first_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a8990e921e4f4368261e822a766cae5d4" name="last_kday_type"><type><classname>last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1abc74481661141a018b4b3f7f4489caa2" name="kday_after_type"><type><classname>first_kday_after</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1add2a5943fc5ddf3f707b07852deb9216" name="kday_before_type"><type><classname>first_kday_before</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a4437a64546d5dd92ceb0bcc2df447589" name="char_type"><type>charT</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ae1014f18c69862fa4d16ce80e783697d" name="first_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ae92e4e70b2a4b935bd2079e464a5be03" name="second_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a591f1f8862efc65682939b07448b3eea" name="third_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a63ccde7320ae0148fb65b011378ff22c" name="fourth_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a5f681d31f0af4c522119a7282655ef48" name="fifth_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1aa0da7c1f0dd9b44e24c21e950dabdd0d" name="last_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1afe5459e608552e9dee798ad16f78a626" name="before_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a3a041451807c1230426873c44ec3df68" name="after_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a6ffee94790fdba95d2670c885b3b5a58" name="of_string" specifiers="static"><type>const char_type</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a3b9f67b27ff8127e10aeaaec0d7af020"><purpose>Creates a <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser">date_generator_parser</link> with the default set of "element_strings". </purpose></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a8755ae749cd8accca44023e27d3fb45f"><parameter name="first_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="second_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="third_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="fourth_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="fifth_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="last_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="before_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="after_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="of_str"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Creates a <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser">date_generator_parser</link> using a user defined set of element strings. </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a5237e04d6971b3ac12bf2e8b5cd8fbdc" name="element_strings"><type>void</type><parameter name="first_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="second_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="third_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="fourth_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="fifth_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="last_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="before_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="after_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="of_str"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Replace strings that determine nth week for generator. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1aa55921408d91f323c8d258fe4f895e65" name="element_strings"><type>void</type><parameter name="col"><paramtype>const collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a95a676cdbc76c27b94b5bfa49be39402" name="get_partial_date_type" cv="const"><type><classname>partial_date_type</classname></type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>returns <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date">partial_date</link> parsed from stream </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a1e8275274ddaef4b68512c02595b637e" name="get_nth_kday_type" cv="const"><type><classname>nth_kday_type</classname></type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>returns nth_kday_of_week parsed from stream </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1afb841e1e762cc1451da56664d3bc81e6" name="get_first_kday_type" cv="const"><type><classname>first_kday_type</classname></type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>returns first_kday_of_week parsed from stream </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ab0893389040f9ca9a076945ca465e716" name="get_last_kday_type" cv="const"><type><classname>last_kday_type</classname></type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>returns last_kday_of_week parsed from stream </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1a06b96cb3c942d306d49389a0bc94d00e" name="get_kday_before_type" cv="const"><type><classname>kday_before_type</classname></type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>returns first_kday_of_week parsed from stream </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1ae3df0fc2dd13d34a4bc9fbd8b09e8ef3" name="get_kday_after_type" cv="const"><type><classname>kday_after_type</classname></type><template>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>returns first_kday_of_week parsed from stream </purpose></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__generator__parser_1aa7775e339792cc4c8ebead2870094c99" name="extract_element" cv="const"><type>void</type><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="ele"><paramtype>typename date_generator_parser::phrase_elements</paramtype></parameter><purpose>Extracts phrase element from input. Throws ios_base::failure on error. </purpose></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__generators_8hpp" name="boost/date_time/date_generators.hpp">
<para>Definition and implementation of date algorithm templates </para><namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__after" name="first_kday_after"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Calculate something like "First Sunday after Jan 1,2002. </purpose><description><para>Date generator that takes a date and finds kday after <programlisting language="c++">typedef <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__after">boost::date_time::first_kday_after&lt;date&gt;</link> firstkdayafter;
firstkdayafter fkaf(Monday);
fkaf.get_date(date(2002,Feb,1));
</programlisting> </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__after_1ab15202c1886808892afc9447367c28ff" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__after_1af4e02d43da9a9ab035ae6c620b2fb808" name="day_of_week_type"><type>calendar_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__after_1a123bccde38b6fedab496e7b6a37e2146" name="duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__after_1ae8d6de511c67b5dd414497ff1cf7c4ce"><parameter name="dow"><paramtype>day_of_week_type</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__after_1aa4a104193de09799cea0253e589f589c" name="get_date" cv="const"><type>date_type</type><parameter name="start_day"><paramtype>date_type</paramtype></parameter><purpose>Return next kday given. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__after_1a92bd1d6fca40e6a631c04b6cba107548" name="day_of_week" cv="const"><type>day_of_week_type</type></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__before" name="first_kday_before"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Calculate something like "First Sunday before Jan 1,2002. </purpose><description><para>Date generator that takes a date and finds kday after <programlisting language="c++">typedef <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__before">boost::date_time::first_kday_before&lt;date&gt;</link> firstkdaybefore;
firstkdaybefore fkbf(Monday);
fkbf.get_date(date(2002,Feb,1));
</programlisting> </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__before_1ab744910b3c7160bfaa81c97839530b79" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__before_1ae7b6678bdd1ec99d0232b40dafdcf4d0" name="day_of_week_type"><type>calendar_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__before_1a8974b7e58aaa7e950e0f771cfe79d281" name="duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__before_1a70371c225c4d265a0e155eb5596608a5"><parameter name="dow"><paramtype>day_of_week_type</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__before_1a7f805b90fd55c33ff03be4298eefa4d2" name="get_date" cv="const"><type>date_type</type><parameter name="start_day"><paramtype>date_type</paramtype></parameter><purpose>Return next kday given. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__before_1ab5eff1eba4dba9fa511bf0e716641fea" name="day_of_week" cv="const"><type>day_of_week_type</type></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month" name="first_kday_of_month"><template>
      <template-type-parameter name="date_type"/>
    </template><inherit access="public">boost::date_time::year_based_generator&lt; date_type &gt;</inherit><purpose>Useful generator functor for finding holidays and daylight savings. </purpose><description><para>Similar to <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month">nth_kday_of_month</link>, but requires less paramters </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1ab0d7e153eebaabd3bc796c2e8424ff69" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1a512835aef998afe4f254ea667daedc60" name="day_of_week_type"><type>calendar_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1a66431852503d66282660b0e585a28fb6" name="month_type"><type>calendar_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1ac9a15fb81931125ce768de461358c676" name="year_type"><type>calendar_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1aebc3765c05936f0a6c01bd366ae2c98f" name="duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1a176cc12ebd3d1036353e99302f8a8263"><parameter name="dow"><paramtype>day_of_week_type</paramtype><description><para>The day of week, eg: Sunday, Monday, etc </para></description></parameter><parameter name="m"><paramtype>month_type</paramtype><description><para>The month of the year, eg: Jan, Feb, Mar, etc </para></description></parameter><purpose>Specify the first 'Sunday' in 'April' spec. </purpose><description><para>
</para></description></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1a24ca47e34eea7be9bcb42852a622df46" name="get_date" cv="const" specifiers="virtual"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter><purpose>Return a concrete date when provided with a year specific year. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1a1b3fcab9f2fc505c92286066fadb97c0" name="month" cv="const"><type>month_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1a9285912a06f57dddd44aef66060d05cc" name="day_of_week" cv="const"><type>day_of_week_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1first__kday__of__month_1a0345436a021fd35a8945c82ce1bc7a18" name="to_string" cv="const" specifiers="virtual"><type>std::string</type><purpose>Returns string suitable for use in POSIX time zone string. </purpose><description><para>Returns a string formatted as "M4.1.0" ==&gt; 1st Sunday in April. </para></description></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month" name="last_kday_of_month"><template>
      <template-type-parameter name="date_type"><purpose><para>A date class that exports day_of_week, month_type, etc. </para></purpose></template-type-parameter>
    </template><inherit access="public">boost::date_time::year_based_generator&lt; date_type &gt;</inherit><purpose>Calculate something like Last Sunday of January. </purpose><description><para>Useful generator functor for finding holidays and daylight savings Get the last day of the month and then calculate the difference to the last previous day. 
</para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1ac6c238f42b5770db902732b8cec1b95c" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1aae662243c5847ab76905c34de3710db4" name="day_of_week_type"><type>calendar_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1a5ad9019acbec1b3f660bf3f72595abe6" name="month_type"><type>calendar_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1a16d704172cdc8fb84b6d00c44c3aed77" name="year_type"><type>calendar_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1aebf070108e1defdecf27fc2f3f5b3f68" name="duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1a34bb36670a7af9c650882e0e0ea8b314"><parameter name="dow"><paramtype>day_of_week_type</paramtype><description><para>The day of week, eg: Sunday, Monday, etc </para></description></parameter><parameter name="m"><paramtype>month_type</paramtype><description><para>The month of the year, eg: Jan, Feb, Mar, etc </para></description></parameter><purpose>Specify the date spec like last 'Sunday' in 'April' spec. </purpose><description><para>
</para></description></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1a858e9dd919d29f06727739b9ae698b6a" name="get_date" cv="const" specifiers="virtual"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter><purpose>Return a concrete date when provided with a year specific year. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1a92964ac3302c5f821fbcdf6a96edd3ec" name="month" cv="const"><type>month_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1afe738acce34575bef6065470a0bc0cb0" name="day_of_week" cv="const"><type>day_of_week_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1last__kday__of__month_1a94cd35c2ba7acdd1356073af22718252" name="to_string" cv="const" specifiers="virtual"><type>std::string</type><purpose>Returns string suitable for use in POSIX time zone string. </purpose><description><para>Returns a string formatted as "M4.5.0" ==&gt; last Sunday in April. </para></description></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month" name="nth_kday_of_month"><template>
      <template-type-parameter name="date_type"/>
    </template><inherit access="public">boost::date_time::year_based_generator&lt; date_type &gt;</inherit><purpose>Useful generator functor for finding holidays. </purpose><description><para>Based on the idea in Cal. Calc. for finding holidays that are the 'first Monday of September'. When instantiated with 'fifth' kday of month, the result will be the last kday of month which can be the fourth or fifth depending on the structure of the month.</para><para>The algorithm here basically guesses for the first day of the month. Then finds the first day of the correct type. That is, if the first of the month is a Tuesday and it needs Wednesday then we simply increment by a day and then we can add the length of a week until we get to the 'nth kday'. There are probably more efficient algorithms based on using a mod 7, but this one works reasonably well for basic applications. </para></description><enum id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a77bd9d3425b802d763b7ee4ba59823e2" name="week_num"><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a77bd9d3425b802d763b7ee4ba59823e2a88ed5f3b8549c717175fc84d8a729104" name="first"><default>1</default></enumvalue><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a77bd9d3425b802d763b7ee4ba59823e2a8152dd8cdc865ec0f9eda2110b33aae7" name="second"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a77bd9d3425b802d763b7ee4ba59823e2a58a5c604e7be9072ca7dbc5efdb50c80" name="third"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a77bd9d3425b802d763b7ee4ba59823e2ab774a7d0ef188a7c675da021992580e8" name="fourth"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a77bd9d3425b802d763b7ee4ba59823e2afd8eea5e27322ac17a3b9a3f5372b4b7" name="fifth"/></enum>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a35a49ff3e223d7b7c6ea08e4ad860188" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1aad91d525f49a3b60605b061a2ab199ef" name="day_of_week_type"><type>calendar_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a69b5ac420f9565eb0ef74d93184d37c2" name="month_type"><type>calendar_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a4fb6836fc98e41a16aa8880dfd5d1075" name="year_type"><type>calendar_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a1eb968b9d4bc92d676412fc90c440314" name="duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1ab2842c8f6874444d03aaa2acc1966fff"><parameter name="week_no"><paramtype>week_num</paramtype></parameter><parameter name="dow"><paramtype>day_of_week_type</paramtype></parameter><parameter name="m"><paramtype>month_type</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a6a485ee99a104a711f696851e1fb3739" name="get_date" cv="const" specifiers="virtual"><type>date_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter><purpose>Return a concrete date when provided with a year specific year. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a8b3dd8cb3766b6dc86907cb4752894da" name="month" cv="const"><type>month_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a4cbd52a0dc03b76c42baf2958eecc0f8" name="nth_week" cv="const"><type>week_num</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a268369369d94d2096fe3f9e095cbe76d" name="day_of_week" cv="const"><type>day_of_week_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a8b240bb516ff6e5ea011a0e8ff8becf5" name="nth_week_as_str" cv="const"><type>const char *</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1nth__kday__of__month_1a4cbe66ab4338fc3ac280aeb4cdf81105" name="to_string" cv="const" specifiers="virtual"><type>std::string</type><purpose>Returns string suitable for use in POSIX time zone string. </purpose><description><para>Returns a string formatted as "M4.3.0" ==&gt; 3rd Sunday in April. </para></description></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date" name="partial_date"><template>
      <template-type-parameter name="date_type"/>
    </template><inherit access="public">boost::date_time::year_based_generator&lt; date_type &gt;</inherit><purpose>Generates a date by applying the year to the given month and day. </purpose><description><para>Example usage: <programlisting language="c++">partial_date pd(1, Jan);
partial_date pd2(70);
date d = pd.get_date(2002); //2002-Jan-01
date d2 = pd2.get_date(2002); //2002-Mar-10
</programlisting> </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a78302bc45722209a6160b7d78457f560" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a4c0cfa6a68872411218c708a86327b1d" name="day_type"><type>calendar_type::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1aa6c451083f9df6208ae2a1afe73bfe25" name="month_type"><type>calendar_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1afb7c0896ac9552a239d10e59da74a3ca" name="year_type"><type>calendar_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1adb3a52b3eaf76e628c1120e1093949cb" name="duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a79964aa2d18bd0e1ebfd8678bb865d36" name="duration_rep"><type>duration_type::duration_rep</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1ad0405ae0bc299807926065028f30ee43"><parameter name="d"><paramtype>day_type</paramtype></parameter><parameter name="m"><paramtype>month_type</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a953a1b50e35cc7901fb552c417b674ea"><parameter name="days"><paramtype>duration_rep</paramtype></parameter><purpose>Partial date created from number of days into year. Range 1-366. </purpose><description><para>Allowable values range from 1 to 366. 1=Jan1, 366=Dec31. If argument exceeds range, <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date">partial_date</link> will be created with closest in-range value. 60 will always be Feb29, if <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1afb0632b0f8adc9050a8932f149e76f3b">get_date()</link> is called with a non-leap year an exception will be thrown </para></description></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1afb0632b0f8adc9050a8932f149e76f3b" name="get_date" cv="const" specifiers="virtual"><type>date_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter><purpose>Return a concrete date when provided with a year specific year. </purpose><description><para>Will throw an 'invalid_argument' exception if a <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date">partial_date</link> object, instantiated with Feb-29, has get_date called with a non-leap year. Example: <programlisting language="c++">partial_date pd(29, Feb);
pd.get_date(2003); // throws invalid_argument exception
pg.get_date(2000); // returns 2000-2-29
</programlisting> </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a814de043df412b1e44f2b39e8569ceb5" name="operator()" cv="const"><type>date_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a91779918d29a1247d9b66979014a7b88" name="operator==" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>partial_date</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a1e99c1cf4f656621f446561cb3bc6539" name="operator&lt;" cv="const"><type>bool</type><parameter name="rhs"><paramtype>const <classname>partial_date</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a1ee53d54515abcf163fe31df48b272fc" name="month" cv="const"><type>month_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a36c4d306c95d5c5fe1e97c4d15a63f60" name="day" cv="const"><type>day_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1partial__date_1a523e48f0abba2f08257b8a2e5f141f0f" name="to_string" cv="const" specifiers="virtual"><type>std::string</type><purpose>Returns string suitable for use in POSIX time zone string. </purpose><description><para>Returns string formatted with up to 3 digits: Jan-01 == "0" Feb-29 == "58" Dec-31 == "365" </para></description></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__based__generator" name="year_based_generator"><template>
      <template-type-parameter name="date_type"><purpose><para>The type representing a date. This type must export a calender_type which defines a year_type. </para></purpose></template-type-parameter>
    </template><purpose>Base class for all generators that take a year and produce a date. </purpose><description><para>This class is a base class for polymorphic function objects that take a year and produce a concrete date. 
</para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__based__generator_1a2df4e5c7ecf3a2a5723914189f2f2ad3" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__based__generator_1a556511f48a54dfed41056057e5cfa621" name="year_type"><type>calendar_type::year_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__based__generator_1afc493830476250bbf751c6ba8213c16f"/>
<destructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__based__generator_1af8c3f6e626b6d5e47ee8b61e48db7e68" specifiers="virtual"/>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__based__generator_1ad1a7c0babd681b69b3e8f3163cad6bda" name="get_date" cv="const = 0" specifiers="virtual"><type>date_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1year__based__generator_1a057152a9ff09fd89718a01f68163a0ba" name="to_string" cv="const = 0" specifiers="virtual"><type>std::string</type><purpose>Returns a string for use in a POSIX time_zone string. </purpose></method>
</method-group>
</class>



























<function id="doxygen.date_time_reference.date__generators_8hpp_1aea7bd4fea227058955ba39813317014a" name="nth_as_str"><type>const char *</type><parameter name="ele"><paramtype>int</paramtype></parameter><purpose>Returns nth arg as string. 1 -&gt; "first", 2 -&gt; "second", max is 5. </purpose></function>
<function id="doxygen.date_time_reference.date__generators_8hpp_1a3e489204498bee465144a762c254fcd2" name="days_until_weekday"><type>date_type::duration_type</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="weekday_type"/>
        </template><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="wd"><paramtype>const weekday_type &amp;</paramtype></parameter><purpose>Calculates the number of days until the next weekday. </purpose><description><para>Calculates the number of days until the next weekday. If the date given falls on a Sunday and the given weekday is Tuesday the result will be 2 days </para></description></function>
<function id="doxygen.date_time_reference.date__generators_8hpp_1aefc029f839fe1e006a989a60b1d40746" name="days_before_weekday"><type>date_type::duration_type</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="weekday_type"/>
        </template><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="wd"><paramtype>const weekday_type &amp;</paramtype></parameter><purpose>Calculates the number of days since the previous weekday. </purpose><description><para>Calculates the number of days since the previous weekday If the date given falls on a Sunday and the given weekday is Tuesday the result will be 5 days. The answer will be a positive number because Tuesday is 5 days before Sunday, not -5 days before. </para></description></function>
<function id="doxygen.date_time_reference.date__generators_8hpp_1a4dea03f4b8850cc6fadb4919d15f69ec" name="next_weekday"><type>date_type</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="weekday_type"/>
        </template><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="wd"><paramtype>const weekday_type &amp;</paramtype></parameter><purpose>Generates a date object representing the date of the following weekday from the given date. </purpose><description><para>Generates a date object representing the date of the following weekday from the given date. If the date given is 2004-May-9 (a Sunday) and the given weekday is Tuesday then the resulting date will be 2004-May-11. </para></description></function>
<function id="doxygen.date_time_reference.date__generators_8hpp_1a91b77c426eb19913c214bea9fbbcde9c" name="previous_weekday"><type>date_type</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="weekday_type"/>
        </template><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="wd"><paramtype>const weekday_type &amp;</paramtype></parameter><purpose>Generates a date object representing the date of the previous weekday from the given date. </purpose><description><para>Generates a date object representing the date of the previous weekday from the given date. If the date given is 2004-May-9 (a Sunday) and the given weekday is Tuesday then the resulting date will be 2004-May-4. </para></description></function>
</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__iterator_8hpp" name="boost/date_time/date_iterator.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr" name="date_itr"><template>
      <template-type-parameter name="offset_functor"/>
      <template-type-parameter name="date_type"/>
    </template><inherit access="public">boost::date_time::date_itr_base&lt; date_type &gt;</inherit><purpose>Overrides the base date iterator providing hook for functors. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr_1aabcdc9b9147b384d3fbd3322dfb378a5" name="duration_type"><type>date_type::duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr_1abaf73e8786d87102ea77d8ee6bc53ef6"><parameter name="d"><paramtype>date_type</paramtype></parameter><parameter name="factor"><paramtype>int</paramtype><default>1</default></parameter></constructor>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr_1aa656ce186e2ad92374ef686276e3919a" name="get_offset" cv="const" specifiers="virtual"><type>duration_type</type><parameter name="current"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr_1ae2231ce40636e7eadc000d399e4296bf" name="get_neg_offset" cv="const" specifiers="virtual"><type>duration_type</type><parameter name="current"><paramtype>const date_type &amp;</paramtype></parameter></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base" name="date_itr_base"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Base date iterator type. </purpose><description><para>This class provides the skeleton for the creation of iterators. New and interesting interators can be created by plugging in a new function that derives the next value from the current state. generation of various types of -based information.</para><para><emphasis role="bold">Template Parameters</emphasis></para><para><emphasis role="bold">date_type</emphasis></para><para>The date_type is a concrete date_type. The date_type must define a duration_type and a calendar_type. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1ac563adf30a9c68935e27fb7ab2220cbb" name="duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1a80b50c89b7f3d939cc69b79336fd84c2" name="value_type"><type>date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1aaff76474217364de4e4aa4a04aa0fd13" name="iterator_category"><type>std::input_iterator_tag</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1abf46eee43c24786bce30b07b462edfa1"><parameter name="d"><paramtype>date_type</paramtype></parameter></constructor>
<destructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1aa471d7ad128b8d553d3d8612815e3a4c" specifiers="virtual"/>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1ac3dd2361f708b1c524e93a2bbaf282d7" name="operator++"><type><classname>date_itr_base</classname> &amp;</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1a678122d68e32723182dc1f4c193389ea" name="operator--"><type><classname>date_itr_base</classname> &amp;</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1aa45fcd4d72346623cf5a1f2b330e8ae1" name="get_offset" cv="const = 0" specifiers="virtual"><type>duration_type</type><parameter name="current"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1acc9a2ae8340a177ef188413cf7f6d8d8" name="get_neg_offset" cv="const = 0" specifiers="virtual"><type>duration_type</type><parameter name="current"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1a5bcf681457c2c47a9665fe8a0dcb52a3" name="operator*" cv="const"><type>const date_type &amp;</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1ac66faa3341202dd2bce7899dce4892b9" name="operator-&gt;" cv="const"><type>const date_type *</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1a79d07e87d8c7ce82fe7c214c4344be13" name="operator&lt;" cv="const"><type>bool</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1a4d2f315887e3a94002384432004cbd22" name="operator&lt;=" cv="const"><type>bool</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1ae146bdc55c3558c43dd65e254e8f7bd4" name="operator&gt;" cv="const"><type>bool</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1a54fa22318660749ba9ee4fa89738e993" name="operator&gt;=" cv="const"><type>bool</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1a2d1330f020228641eca4ce8024561007" name="operator==" cv="const"><type>bool</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__itr__base_1a1d0ab31db6b74a15ab6f467cdc70e7d1" name="operator!=" cv="const"><type>bool</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter></method>
</method-group>
</class><enum id="doxygen.date_time_reference.date__iterator_8hpp_1ad1ccc6a5000a51c67e3719a70ae7226e" name="date_resolutions"><enumvalue id="doxygen.date_time_reference.date__iterator_8hpp_1ad1ccc6a5000a51c67e3719a70ae7226ea5cc19bdd1b55f48843de76c0e180dfbf" name="day"/><enumvalue id="doxygen.date_time_reference.date__iterator_8hpp_1ad1ccc6a5000a51c67e3719a70ae7226ea7a680a33832ee9da5e970ede340417d6" name="week"/><enumvalue id="doxygen.date_time_reference.date__iterator_8hpp_1ad1ccc6a5000a51c67e3719a70ae7226eac9261138c4adccbb382d885e48b59427" name="months"/><enumvalue id="doxygen.date_time_reference.date__iterator_8hpp_1ad1ccc6a5000a51c67e3719a70ae7226ea072be2d16417bf88f8613e253ca40939" name="year"/><enumvalue id="doxygen.date_time_reference.date__iterator_8hpp_1ad1ccc6a5000a51c67e3719a70ae7226ea1e1974e576740cb15bbf457d7a476428" name="decade"/><enumvalue id="doxygen.date_time_reference.date__iterator_8hpp_1ad1ccc6a5000a51c67e3719a70ae7226eaf4951671e8c07f3c2af3fbf98d7b3409" name="century"/><enumvalue id="doxygen.date_time_reference.date__iterator_8hpp_1ad1ccc6a5000a51c67e3719a70ae7226eafffb76e4197cbee1ad2a7dcbf353c710" name="NumDateResolutions"/><purpose>An iterator over dates with varying resolution (day, week, month, year, etc) </purpose></enum>

































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__names__put_8hpp" name="boost/date_time/date_names_put.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put" name="all_date_names_put"><template>
      <template-type-parameter name="Config"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
      <template-type-parameter name="OutputIterator"><default>std::ostreambuf_iterator&lt;charT&gt;</default></template-type-parameter>
    </template><inherit access="public">boost::date_time::date_names_put&lt; Config, char, std::ostreambuf_iterator&lt; char &gt; &gt;</inherit><purpose>A date name output facet that takes an array of char* to define strings. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1af7e2c122f0a3834b5daf70cd81efa454" name="iter_type"><type>OutputIterator</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a2ccb2717e18004e09889e582cc5deec5" name="month_enum"><type>Config::month_enum</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1addecfafc1b9cda4b2117f6fbbbd772dd" name="weekday_enum"><type>Config::weekday_enum</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a720362a394572392ea7f338379104ad0" name="special_value_enum"><type>Config::special_value_enum</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a7c382875c697ec7e8da31ec33f0bbd56"><parameter name="month_short_names"><paramtype>const charT *const</paramtype></parameter><parameter name="month_long_names"><paramtype>const charT *const</paramtype></parameter><parameter name="special_value_names"><paramtype>const charT *const</paramtype></parameter><parameter name="weekday_short_names"><paramtype>const charT *const</paramtype></parameter><parameter name="weekday_long_names"><paramtype>const charT *const</paramtype></parameter><parameter name="separator_char"><paramtype>charT</paramtype><default>'-'</default></parameter><parameter name="order_spec"><paramtype>ymd_order_spec</paramtype><default>ymd_order_iso</default></parameter><parameter name="month_format"><paramtype>month_format_spec</paramtype><default>month_as_short_string</default></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a031a10434e37b6807eed3679d60c25e7" name="get_short_month_names" cv="const"><type>const charT *const *</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1acd1c6a57d6b948409ab09af3c7b4d8c3" name="get_long_month_names" cv="const"><type>const charT *const *</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a2cd7dd43a63606a4833ac82bbcea73b0" name="get_special_value_names" cv="const"><type>const charT *const *</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1ade414a3763b517c69f0b670e43ca088a" name="get_short_weekday_names" cv="const"><type>const charT *const *</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1ac13113ca00483784025b6246eb8e4988" name="get_long_weekday_names" cv="const"><type>const charT *const *</type></method>
</method-group>
<method-group name="protected member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a3f7ad5b62ebbab46010a936e46f8b781" name="do_put_month_short" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="moy"><paramtype>month_enum</paramtype></parameter><purpose>Generic facet that takes array of chars. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a7aa851c7c82fa998305c02ffe1f9a488" name="do_put_month_long" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="moy"><paramtype>month_enum</paramtype></parameter><purpose>Long month names. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1ae2d6e81805c262481aa6940f9ba295db" name="do_put_special_value" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="sv"><paramtype>special_value_enum</paramtype></parameter><purpose>Special values names. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a3dd66aea6c0431f88eb4116370140340" name="do_put_weekday_short" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="wd"><paramtype>weekday_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a326767a24cdaa0f9909430e97c809a65" name="do_put_weekday_long" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="wd"><paramtype>weekday_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a57e46959afcf8b022c092383818862f7" name="do_month_sep_char" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><purpose>char between year-month </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1ae2d08623b66a85767cefc5341f93ad25" name="do_day_sep_char" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><purpose>Char to separate month-day. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a11bca4bbd2b3a61c3d763df239a8f9f7" name="do_date_order" cv="const" specifiers="virtual"><type>ymd_order_spec</type><purpose>Set the date ordering. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1all__date__names__put_1a555104426cc302347b55298078006d04" name="do_month_format" cv="const" specifiers="virtual"><type>month_format_spec</type><purpose>Set the date ordering. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put" name="date_names_put"><template>
      <template-type-parameter name="Config"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
      <template-type-parameter name="OutputIterator"><default>std::ostreambuf_iterator&lt;charT&gt;</default></template-type-parameter>
    </template><inherit access="public">std::locale::facet</inherit><purpose>Output facet base class for gregorian dates. </purpose><description><para>This class is a base class for date facets used to localize the names of months and the names of days in the week.</para><para>Requirements of Config<itemizedlist>
<listitem><para>define an enumeration month_enum that enumerates the months. The enumeration should be '1' based eg: Jan==1</para>
</listitem><listitem><para>define as_short_string and as_long_string</para>
</listitem></itemizedlist>
</para><para>(see langer &amp; kreft p334). </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1ab1e785ce887de21ae89b549fb64e05bf" name="iter_type"><type>OutputIterator</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a38d9242bba70a37d55ed1f8194f3db3f" name="month_type"><type>Config::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a8990efab6965d28c23325faf99a24749" name="month_enum"><type>Config::month_enum</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a033b12b22110f2e22890f2d5c35a4dab" name="weekday_enum"><type>Config::weekday_enum</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a6cc92e26cd59bc6e9928d63e8f331253" name="special_value_enum"><type>Config::special_value_enum</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1afd73e22b525ddf746669159d4d1ebdc0" name="string_type"><type>std::basic_string&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a768408f0b0ea7bd2f8d85c1c33ffb343" name="char_type"><type>charT</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a72dfc905041464a434d2ef26427059cd" name="default_special_value_names" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a4389b5c146bbca7a5cb6252baaa78a8c" name="separator" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1ada430a99ffe73b082430f1e886e65e37" name="id" specifiers="static"><type>std::locale::id</type><purpose>Generate storage location for a std::locale::id. </purpose></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1ac5702341c6dd547cce6697331cf98dc9"/>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1ab9f6a981b83fbc40f751d836c7430c7d" name="__get_id" cv="const"><type>std::locale::id &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a7c1ce825fea25ca711586826cc438562" name="put_special_value" cv="const"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="sv"><paramtype>special_value_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a341a05f381e8ba6191f737af8640b670" name="put_month_short" cv="const"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="moy"><paramtype>month_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a4f2d75d4bc929b3e964996cfb6419f46" name="put_month_long" cv="const"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="moy"><paramtype>month_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a68161784d16d3705440f8865e1f819b1" name="put_weekday_short" cv="const"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="wd"><paramtype>weekday_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a03fa69f96ef39f2800bb1a00e626e6d2" name="put_weekday_long" cv="const"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="wd"><paramtype>weekday_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a58c442f99d157d86193304e5b7b81330" name="has_date_sep_chars" cv="const"><type>bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a7d7ef5e041dd0a1923de189ca9f05119" name="year_sep_char" cv="const"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a23e0da7e4b0c35b7c6315905766ae79d" name="month_sep_char" cv="const"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><purpose>char between year-month </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a1083227c024e36773e149ba4f437db9c" name="day_sep_char" cv="const"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><purpose>Char to separate month-day. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a3b83f9bf19fbdea4dc4a601f203f6279" name="date_order" cv="const"><type>ymd_order_spec</type><purpose>Determines the order to put the date elements. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a9267dcfd2d9f38edfd597ee16c078125" name="month_format" cv="const"><type>month_format_spec</type><purpose>Determines if month is displayed as integer, short or long string. </purpose></method>
</method-group>
<method-group name="protected member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1abb79b58962ae55a475fe85ea318454c3" name="do_put_month_short" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="moy"><paramtype>month_enum</paramtype></parameter><purpose>Default facet implementation uses month_type defaults. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a7248f0087b320bf8e9fae1b0c8abcea5" name="do_put_month_long" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="moy"><paramtype>month_enum</paramtype></parameter><purpose>Default facet implementation uses month_type defaults. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1aa50a2ec1ca9614e716ef7fa886393519" name="do_put_special_value" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="sv"><paramtype>special_value_enum</paramtype></parameter><purpose>Default facet implementation for special value types. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a6e85e6925a620b4c439e59dd4b640ac7" name="do_put_weekday_short" cv="const" specifiers="virtual"><type>void</type><parameter name=""><paramtype>iter_type &amp;</paramtype></parameter><parameter name=""><paramtype>weekday_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a59b4fa0fd00e26c59e3a50d98a220d0d" name="do_put_weekday_long" cv="const" specifiers="virtual"><type>void</type><parameter name=""><paramtype>iter_type &amp;</paramtype></parameter><parameter name=""><paramtype>weekday_enum</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a5cba101d9353e3a45c3c719d3ba64a3f" name="do_has_date_sep_chars" cv="const" specifiers="virtual"><type>bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1abe8be5193b7edf7ba0011bd5bc663b94" name="do_year_sep_char" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a3281076459d38e637081115f162c5dd1" name="do_month_sep_char" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><purpose>char between year-month </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a2f56cfeed1996d99d6bb45cff660f57c" name="do_day_sep_char" cv="const" specifiers="virtual"><type>void</type><parameter name="oitr"><paramtype>iter_type &amp;</paramtype></parameter><purpose>Char to separate month-day. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1ad84efd196315161bc6da425ef8e2d9dd" name="do_date_order" cv="const" specifiers="virtual"><type>ymd_order_spec</type><purpose>Default for date order. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a822c46fe71443511b7e51d40adcbb529" name="do_month_format" cv="const" specifiers="virtual"><type>month_format_spec</type><purpose>Default month format. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a480e38c5cfd090bdbd9c7262bd45494a" name="put_string" cv="const"><type>void</type><parameter name="oi"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="s"><paramtype>const charT *const</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1date__names__put_1a67b2a7a2f338b6e6af2bfb6e89490653" name="put_string" cv="const"><type>void</type><parameter name="oi"><paramtype>iter_type &amp;</paramtype></parameter><parameter name="s1"><paramtype>const string_type &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.date__parsing_8hpp" name="boost/date_time/date_parsing.hpp">
<namespace name="boost">
<namespace name="date_time">



















<function id="doxygen.date_time_reference.date__parsing_8hpp_1a2b5ac454f7e3d5517f1844253fa805d1" name="convert_to_lower"><type>std::string</type><parameter name="inp"><paramtype>std::string</paramtype></parameter><purpose>A function to replace the std::transform( , , ,tolower) construct. </purpose><description><para>This function simply takes a string, and changes all the characters in that string to lowercase (according to the default system locale). In the event that a compiler does not support locales, the old C style tolower() is used. </para></description></function>
<function id="doxygen.date_time_reference.date__parsing_8hpp_1aea6bd7a5a2e9de8a72651c64d7808503" name="month_str_to_ushort"><type>unsigned short</type><template>
          <template-type-parameter name="month_type"/>
        </template><parameter name="s"><paramtype>std::string const &amp;</paramtype></parameter><purpose>Helper function for parse_date. </purpose></function>
<function id="doxygen.date_time_reference.date__parsing_8hpp_1a870f8052a8c9ca1c259afcd5d197961e" name="parse_date"><type>date_type</type><template>
          <template-type-parameter name="date_type"/>
        </template><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="order_spec"><paramtype>int</paramtype><default>ymd_order_iso</default></parameter><purpose>Generic function to parse a delimited date (eg: 2002-02-10) </purpose><description><para>Accepted formats are: "2003-02-10" or " 2003-Feb-10" or "2003-Feburary-10" The order in which the Month, Day, &amp; Year appear in the argument string can be accomodated by passing in the appropriate ymd_order_spec </para></description></function>
<function id="doxygen.date_time_reference.date__parsing_8hpp_1a2925ce03ec00bda709f9015fe05c3acc" name="parse_undelimited_date"><type>date_type</type><template>
          <template-type-parameter name="date_type"/>
        </template><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Generic function to parse undelimited date (eg: 20020201) </purpose></function>
<function id="doxygen.date_time_reference.date__parsing_8hpp_1ae315784036d6b499dea47bd94b3a9d57" name="from_stream_type"><type>date_type</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="iterator_type"/>
        </template><parameter name="beg"><paramtype>iterator_type &amp;</paramtype></parameter><parameter name="end"><paramtype>iterator_type const &amp;</paramtype></parameter><parameter name=""><paramtype>char</paramtype></parameter><purpose>Helper function for 'date gregorian::from_stream()'. </purpose><description><para>Creates a string from the iterators that reference the begining &amp; end of a char[] or string. All elements are used in output string </para></description></function>
<function id="doxygen.date_time_reference.date__parsing_8hpp_1a0d93dccf1c6eb40fcc0688a8410eb8cf" name="from_stream_type"><type>date_type</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="iterator_type"/>
        </template><parameter name="beg"><paramtype>iterator_type &amp;</paramtype></parameter><parameter name=""><paramtype>iterator_type const &amp;</paramtype></parameter><parameter name=""><paramtype>std::string const &amp;</paramtype></parameter><purpose>Helper function for 'date gregorian::from_stream()'. </purpose><description><para>Returns the first string found in the stream referenced by the begining &amp; end iterators </para></description></function>
<function id="doxygen.date_time_reference.date__parsing_8hpp_1a1d7a149b1243888f1745b6a5308907c1" name="from_stream_type"><type>date_type</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="iterator_type"/>
        </template><parameter name="beg"><paramtype>iterator_type &amp;</paramtype></parameter><parameter name="end"><paramtype>iterator_type const &amp;</paramtype></parameter><parameter name=""><paramtype>wchar_t</paramtype></parameter><purpose>Helper function for 'date gregorian::from_stream()'. </purpose><description><para>Creates a string from the iterators that reference the begining &amp; end of a wstring. All elements are used in output string </para></description></function>
<function id="doxygen.date_time_reference.date__parsing_8hpp_1ae6de95ffb55052b420209490658934af" name="from_stream_type"><type>date_type</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="iterator_type"/>
        </template><parameter name="beg"><paramtype>iterator_type &amp;</paramtype></parameter><parameter name=""><paramtype>iterator_type const &amp;</paramtype></parameter><parameter name=""><paramtype>std::wstring const &amp;</paramtype></parameter><purpose>Helper function for 'date gregorian::from_stream()'. </purpose><description><para>Creates a string from the first wstring found in the stream referenced by the begining &amp; end iterators </para></description></function>
<function id="doxygen.date_time_reference.date__parsing_8hpp_1ae46134c9889215f164ae0c0191bb5638" name="from_simple_string_type"><type><classname>period</classname>&lt; date_type, typename date_type::duration_type &gt;</type><template>
          <template-type-parameter name="date_type"/>
          <template-type-parameter name="charT"/>
        </template><parameter name="s"><paramtype>const std::basic_string&lt; charT &gt; &amp;</paramtype></parameter><purpose>function called by wrapper functions: date_period_from_(w)string() </purpose></function>





</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.dst__rules_8hpp" name="boost/date_time/dst_rules.hpp">
<para>Contains template class to provide static dst rule calculations </para><namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine" name="dst_calc_engine"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="time_duration_type"/>
      <template-type-parameter name="dst_traits"/>
    </template><purpose>Compile-time configurable daylight savings time calculation engine. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine_1a6769e87958477b86d5ad015733c59090" name="year_type"><type>date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine_1ac927e0daf2d8b9c1ac58548530d623a0" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine_1a2884b8d55c89f1fde0ea576aaadaf46b" name="dstcalc"><type><classname>dst_calculator</classname>&lt; date_type, time_duration_type &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine_1a6300cd2cd11fbedec7541dcb78536c52" name="local_is_dst" specifiers="static"><type>time_is_dst_result</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Calculates if the given local time is dst or not. </purpose><description><para>Determines if the time is really in DST or not. Also checks for invalid and ambiguous. 
</para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine_1a336851bfead738760aec9799b70d7b8e" name="is_dst_boundary_day" specifiers="static"><type>bool</type><parameter name="d"><paramtype>date_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine_1a7efd79b672c1c0f1ca8564ea0ccf060a" name="dst_offset" specifiers="static"><type>time_duration_type</type><purpose>The time of day for the dst transition (eg: typically 01:00:00 or 02:00:00) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine_1afbf866526ee8f9dbea075a831aa8a3dd" name="local_dst_start_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine_1a690792d6948c57cef276a73d11764e90" name="local_dst_end_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calculator" name="dst_calculator"><template>
      <template-type-parameter name="date_type_"/>
      <template-type-parameter name="time_duration_type_"/>
    </template><purpose>Dynamic class used to caluclate dst transition information. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calculator_1a6e8c98d2c0b526dd71695e68a2fbddf3" name="time_duration_type"><type>time_duration_type_</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calculator_1ad01b2ed2628e935f147e70e58690dbf0" name="date_type"><type>date_type_</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calculator_1a439bc20fa4cb5ae4808873d4c2e801ac" name="process_local_dst_start_day" specifiers="static"><type>time_is_dst_result</type><parameter name="time_of_day"><paramtype>const time_duration_type &amp;</paramtype><description><para>Time offset in the day for the local time </para></description></parameter><parameter name="dst_start_offset_minutes"><paramtype>unsigned int</paramtype><description><para>Local day offset for start of dst </para></description></parameter><parameter name="dst_length_minutes"><paramtype>long</paramtype><description><para>Number of minutes to adjust clock forward </para></description></parameter><purpose>Check the local time offset when on dst start day. </purpose><description><para>On this dst transition, the time label between the transition boundary and the boudary + the offset are invalid times. If before the boundary then still not in dst. 

</para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calculator_1a1e6f9412a58fef6eb4a59d6004b7755d" name="process_local_dst_end_day" specifiers="static"><type>time_is_dst_result</type><parameter name="time_of_day"><paramtype>const time_duration_type &amp;</paramtype><description><para>Time offset in the day for the local time </para></description></parameter><parameter name="dst_end_offset_minutes"><paramtype>unsigned int</paramtype><description><para>Local time of day for end of dst </para></description></parameter><parameter name="dst_length_minutes"><paramtype>long</paramtype></parameter><purpose>Check the local time offset when on the last day of dst. </purpose><description><para>This is the calculation for the DST end day. On that day times prior to the conversion time - dst_length (1 am in US) are still in dst. Times between the above and the switch time are ambiguous. Times after the start_offset are not in dst. 

</para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calculator_1a9a12bc8ab4248fb1e967fa28fef56129" name="local_is_dst" specifiers="static"><type>time_is_dst_result</type><parameter name="current_day"><paramtype>const date_type &amp;</paramtype><description><para>The day to check for dst </para></description></parameter><parameter name="time_of_day"><paramtype>const time_duration_type &amp;</paramtype><description><para>Time offset within the day to check </para></description></parameter><parameter name="dst_start_day"><paramtype>const date_type &amp;</paramtype><description><para>Starting day of dst for the given locality </para></description></parameter><parameter name="dst_start_offset"><paramtype>const time_duration_type &amp;</paramtype><description><para>Time offset within day for dst boundary </para></description></parameter><parameter name="dst_end_day"><paramtype>const date_type &amp;</paramtype><description><para>Ending day of dst for the given locality </para></description></parameter><parameter name="dst_end_offset"><paramtype>const time_duration_type &amp;</paramtype><description><para>Time offset within day given in dst for dst boundary </para></description></parameter><parameter name="dst_length"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Calculates if the given local time is dst or not. </purpose><description><para>Determines if the time is really in DST or not. Also checks for invalid and ambiguous. 

</para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calculator_1a67998fbb1debf77c57a0ad3c85b40784" name="local_is_dst" specifiers="static"><type>time_is_dst_result</type><parameter name="current_day"><paramtype>const date_type &amp;</paramtype><description><para>The day to check for dst </para></description></parameter><parameter name="time_of_day"><paramtype>const time_duration_type &amp;</paramtype><description><para>Time offset within the day to check </para></description></parameter><parameter name="dst_start_day"><paramtype>const date_type &amp;</paramtype><description><para>Starting day of dst for the given locality </para></description></parameter><parameter name="dst_start_offset_minutes"><paramtype>unsigned int</paramtype><description><para>Offset within day for dst boundary (eg 120 for US which is 02:00:00) </para></description></parameter><parameter name="dst_end_day"><paramtype>const date_type &amp;</paramtype><description><para>Ending day of dst for the given locality </para></description></parameter><parameter name="dst_end_offset_minutes"><paramtype>unsigned int</paramtype><description><para>Offset within day given in dst for dst boundary (eg 120 for US which is 02:00:00) </para></description></parameter><parameter name="dst_length_minutes"><paramtype>long</paramtype><description><para>Length of dst adjusment (eg: 60 for US) </para></description></parameter><purpose>Calculates if the given local time is dst or not. </purpose><description><para>Determines if the time is really in DST or not. Also checks for invalid and ambiguous. 

</para></description></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1null__dst__rules" name="null_dst_rules"><template>
      <template-type-parameter name="date_type_"/>
      <template-type-parameter name="time_duration_type_"/>
    </template><purpose>Used for local time adjustments in places that don't use dst. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1null__dst__rules_1a7c3e8932aa2a6d3b6a226703ffeead34" name="time_duration_type"><type>time_duration_type_</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1null__dst__rules_1afec1ecd93dfdde9733b41fff5b883ed3" name="date_type"><type>date_type_</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1null__dst__rules_1a20e83a1b0434c4f2a7db473347413199" name="local_is_dst" specifiers="static"><type>time_is_dst_result</type><parameter name=""><paramtype>const date_type &amp;</paramtype></parameter><parameter name=""><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Calculates if the given local time is dst or not. </purpose><description><para>
</para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1null__dst__rules_1ae241d18c680b86b4b131cc1a8e5a1f59" name="utc_is_dst" specifiers="static"><type>time_is_dst_result</type><parameter name=""><paramtype>const date_type &amp;</paramtype></parameter><parameter name=""><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Calculates if the given utc time is in dst. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1null__dst__rules_1a72a104ecdf2dd9b0f428d5c875484e0e" name="is_dst_boundary_day" specifiers="static"><type>bool</type><parameter name=""><paramtype>date_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1null__dst__rules_1aaf944531e3527869ad92590eeb56e62a" name="dst_offset" specifiers="static"><type>time_duration_type</type></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules" name="us_dst_rules"><template>
      <template-type-parameter name="date_type_"/>
      <template-type-parameter name="time_duration_type_"/>
      <template-nontype-parameter name="dst_start_offset_minutes"><type>unsigned int</type><default>120</default></template-nontype-parameter>
      <template-nontype-parameter name="dst_length_minutes"><type>short</type><default>60</default></template-nontype-parameter>
    </template><purpose>Depricated: Class to calculate dst boundaries for US time zones. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1ac680c39c17c5bd521ddf9a58086e35e6" name="time_duration_type"><type>time_duration_type_</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1a407226e87c6826e920121766b1accf06" name="date_type"><type>date_type_</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1ac95b0fade1f38be33b7eb7c7edbba51a" name="year_type"><type>date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1a0de5712b18aaedc2646eb43ec2a5b508" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1a595618dd3cc7fec5e6dcce408fe91f64" name="lkday"><type><classname>date_time::last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1a36f2703ad742411de8a1706e3aeb20db" name="fkday"><type><classname>date_time::first_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1ab3922b5081904d435abc2ca086dc62e0" name="nkday"><type><classname>date_time::nth_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1a60b0101b1536d3ce6e06b1be9ad460de" name="dstcalc"><type><classname>dst_calculator</classname>&lt; date_type, time_duration_type &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1a79b7dfc41d346b83e6b1ded391e8ed9b" name="local_is_dst" specifiers="static"><type>time_is_dst_result</type><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>Calculates if the given local time is dst or not. </purpose><description><para>Determines if the time is really in DST or not. Also checks for invalid and ambiguous. 
</para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1aa3b2c64e6c3ec2e209eb0870f89e528b" name="is_dst_boundary_day" specifiers="static"><type>bool</type><parameter name="d"><paramtype>date_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1abd00878c5102d3b04d4ad5409f7593b5" name="local_dst_start_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1a5fdec78ec54c62c16180a4a9915f0a3a" name="local_dst_end_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1us__dst__rules_1a30ef4d1ed38071cf08e81ff41b5bd5d4" name="dst_offset" specifiers="static"><type>time_duration_type</type></method>
</method-group>
</class><enum id="doxygen.date_time_reference.dst__rules_8hpp_1aa14f807130d1a024e48279e892cfd704" name="time_is_dst_result"><enumvalue id="doxygen.date_time_reference.dst__rules_8hpp_1aa14f807130d1a024e48279e892cfd704ac8b220651c46d5224b64b2aaa517a829" name="is_not_in_dst"/><enumvalue id="doxygen.date_time_reference.dst__rules_8hpp_1aa14f807130d1a024e48279e892cfd704a06d3856b8bcb15f3c96e48212e1bc7e3" name="is_in_dst"/><enumvalue id="doxygen.date_time_reference.dst__rules_8hpp_1aa14f807130d1a024e48279e892cfd704a614ca71c52c01c02fb9c1bee4c329d66" name="ambiguous"/><enumvalue id="doxygen.date_time_reference.dst__rules_8hpp_1aa14f807130d1a024e48279e892cfd704aa160bacb122a0df44ace090e25da3295" name="invalid_time_label"/></enum>

































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.dst__transition__generators_8hpp" name="boost/date_time/dst_transition_generators.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule" name="day_calc_dst_rule"><template>
      <template-type-parameter name="spec"><purpose><para>Provides a specifiction of the function object types used to generate start and end days of daylight savings as well as the date type. </para></purpose></template-type-parameter>
    </template><inherit access="public">boost::date_time::dst_day_calc_rule&lt; spec::date_type &gt;</inherit><purpose>Canonical form for a class that provides day rule calculation. </purpose><description><para>This class is used to generate specific sets of dst rules</para><para>
</para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1a93155139d85bab6d61a0dc19fee98195" name="date_type"><type>spec::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1a84e29b41951a74f665b798d107b53741" name="year_type"><type>date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1aceb683f050132e05c03ef6dfe05626cb" name="start_rule"><type>spec::start_rule</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1a269c81782e1c4c411cc3634e3100fbfe" name="end_rule"><type>spec::end_rule</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1a99dd74fbb722c22386b809f75ccee919"><parameter name="dst_start"><paramtype>start_rule</paramtype></parameter><parameter name="dst_end"><paramtype>end_rule</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1a30e87226a9744eba1b44cc16abbd7984" name="start_day" cv="const" specifiers="virtual"><type>date_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1a2f3013e0d7771a690406b1c83a01bf2f" name="start_rule_as_string" cv="const" specifiers="virtual"><type>std::string</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1a206a8e47098c78a2426afc4aaeaee8af" name="end_day" cv="const" specifiers="virtual"><type>date_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1day__calc__dst__rule_1a674c39fdf958633bc92f535fdf9a8c51" name="end_rule_as_string" cv="const" specifiers="virtual"><type>std::string</type></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__day__calc__rule" name="dst_day_calc_rule"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Defines base interface for calculating start and end date of daylight savings. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__day__calc__rule_1ab5711036d63166f5e0ff3ca042cbfc0a" name="year_type"><type>date_type::year_type</type></typedef>
<method-group name="public member functions">
<destructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__day__calc__rule_1a5b805fc5ae1efb5436d99d0d43c43557" specifiers="virtual"/>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__day__calc__rule_1a37d947502f1b4ed93f3a3689e6315bdf" name="start_day" cv="const = 0" specifiers="virtual"><type>date_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__day__calc__rule_1aece19b296a896c2c96e3fe14c11af24d" name="start_rule_as_string" cv="const = 0" specifiers="virtual"><type>std::string</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__day__calc__rule_1a3c2c6363cbf77885866e23aa59d31741" name="end_day" cv="const = 0" specifiers="virtual"><type>date_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__day__calc__rule_1a6d9d267c0bf88954d42a4c0d84fabb57" name="end_rule_as_string" cv="const = 0" specifiers="virtual"><type>std::string</type></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.filetime__functions_8hpp" name="boost/date_time/filetime_functions.hpp">
<para>Function(s) for converting between a FILETIME structure and a time object. This file is only available on systems that have BOOST_HAS_FTIME defined. </para><namespace name="boost">
<namespace name="date_time">


















<function id="doxygen.date_time_reference.filetime__functions_8hpp_1ae4da76c6afd88097cb838742c7d85551" name="time_from_ftime"><type>TimeT</type><template>
          <template-type-parameter name="TimeT"/>
          <template-type-parameter name="FileTimeT"/>
        </template><parameter name="ft"><paramtype>const FileTimeT &amp;</paramtype></parameter><purpose>Create a time object from an initialized FILETIME struct. </purpose><description><para>Create a time object from an initialized FILETIME struct. A FILETIME struct holds 100-nanosecond units (0.0000001). When built with microsecond resolution the file_time's sub second value will be truncated. Nanosecond resolution has no truncation.</para><para><note><para>The function is templated on the FILETIME type, so that it can be used with both native FILETIME and the ad-hoc boost::detail::winapi::FILETIME_ type. </para>
</note>
</para></description></function>














</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.find__match_8hpp" name="boost/date_time/find_match.hpp">
<namespace name="boost">
<namespace name="date_time">

















<function id="doxygen.date_time_reference.find__match_8hpp_1aa79c9d612482f40d07e4d95d3054a900" name="find_match"><type>short</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="short_names"><paramtype>const charT *const *</paramtype></parameter><parameter name="long_names"><paramtype>const charT *const *</paramtype></parameter><parameter name="size"><paramtype>short</paramtype></parameter><parameter name="s"><paramtype>const std::basic_string&lt; charT &gt; &amp;</paramtype></parameter><purpose>Find index of a string in either of 2 arrays. </purpose><description><para>find_match searches both arrays for a match to 's'. Both arrays must contain 'size' elements. The index of the match is returned. If no match is found, 'size' is returned. Ex. "Jan" returns 0, "Dec" returns 11, "Tue" returns 2. 'size' can be sent in with: (greg_month::max)() (which 12), (greg_weekday::max)() + 1 (which is 7) or date_time::NumSpecialValues </para></description></function>















</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.format__date__parser_8hpp" name="boost/date_time/format_date_parser.hpp">
<namespace name="std">
</namespace>
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser" name="format_date_parser"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="charT"/>
    </template><purpose>Class with generic date parsing using a format string. </purpose><description><para>The following is the set of recognized format specifiers<itemizedlist>
<listitem><para>a - Short weekday name</para>
</listitem><listitem><para>A - Long weekday name</para>
</listitem><listitem><para>b - Abbreviated month name</para>
</listitem><listitem><para>B - Full month name</para>
</listitem><listitem><para>d - Day of the month as decimal 01 to 31</para>
</listitem><listitem><para>j - Day of year as decimal from 001 to 366</para>
</listitem><listitem><para>m - Month name as a decimal 01 to 12</para>
</listitem><listitem><para>U - Week number 00 to 53 with first Sunday as the first day of week 1?</para>
</listitem><listitem><para>w - Weekday as decimal number 0 to 6 where Sunday == 0</para>
</listitem><listitem><para>W - Week number 00 to 53 where Monday is first day of week 1</para>
</listitem><listitem><para>x - facet default date representation</para>
</listitem><listitem><para>y - Year without the century - eg: 04 for 2004</para>
</listitem><listitem><para>Y - Year with century</para>
</listitem></itemizedlist>
</para><para>The weekday specifiers (a and A) do not add to the date construction, but they provide a way to skip over the weekday names for formats that provide them.</para><para>todo – Another interesting feature that this approach could provide is an option to fill in any missing fields with the current values from the clock. So if you have m-d the parser would detect the missing year value and fill it in using the clock.</para><para>todo – What to do with the x. x in the classic facet is just bad... </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1af04148f4c491ffbf7a6d7ba57642737a" name="string_type"><type>std::basic_string&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1af6552359bdf515944833ae87b6ef00cb" name="stringstream_type"><type>std::basic_istringstream&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a19688a058c5e2ad230782ec35a48c040" name="stream_itr_type"><type>std::istreambuf_iterator&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a72c19a45c23932633c8890e6c371562e" name="const_itr"><type>string_type::const_iterator</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a454455a4b8add0c80ebd0c197bbc4446" name="year_type"><type>date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a86e9f1be3858a1c7061134be267b9021" name="month_type"><type>date_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a6130e33fe3d7ff40cb2ab3f949c36ccc" name="day_type"><type>date_type::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a6034393e244e90ca7f3d727c539a819c" name="duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1ac3e838814bdfec997c4b43444769c8b6" name="day_of_week_type"><type>date_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1aa53213ac862264408a0c7a513d2d864c" name="day_of_year_type"><type>date_type::day_of_year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a077505f9ebfc8768b9b18cc4b134aaa9" name="parse_tree_type"><type><classname>string_parse_tree</classname>&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1ace1e5b1a85dc45c3369b2255953f1e40" name="match_results"><type><classname>parse_tree_type::parse_match_result_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a6c6783e51d41a803e967e8c49204b4eb" name="input_collection_type"><type>std::vector&lt; std::basic_string&lt; charT &gt; &gt;</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a631ed71e5a074e1aee161b2adf44153e"><parameter name="format_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="month_short_names"><paramtype>const input_collection_type &amp;</paramtype></parameter><parameter name="month_long_names"><paramtype>const input_collection_type &amp;</paramtype></parameter><parameter name="weekday_short_names"><paramtype>const input_collection_type &amp;</paramtype></parameter><parameter name="weekday_long_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a1102f3b6bee3eac4ce1033d926199a88"><parameter name="format_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="locale"><paramtype>const std::locale &amp;</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a1f362991200d055e4d353ec5ec8e42f4"><parameter name="fdp"><paramtype>const <classname>format_date_parser</classname>&lt; date_type, charT &gt; &amp;</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1ac232527832c59c80fd8ea9368607a4b9" name="format" cv="const"><type>string_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a30e915c85af396ff6b97ddab2873d344" name="format"><type>void</type><parameter name="format_str"><paramtype>string_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1af7727852a01cdf2ece4a26bf58080e5a" name="short_month_names"><type>void</type><parameter name="month_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1aa705ce81e451421ce091325fae95e5be" name="long_month_names"><type>void</type><parameter name="month_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a134dc7a9747d6d075c36999641d28a7f" name="short_weekday_names"><type>void</type><parameter name="weekday_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a30d876d49a83ccf26ad2c4605047f9f8" name="long_weekday_names"><type>void</type><parameter name="weekday_names"><paramtype>const input_collection_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a273eb43363362ddefb39872f040d8214" name="parse_date" cv="const"><type>date_type</type><parameter name="value"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="format_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="sv_parser"><paramtype>const <classname>special_values_parser</classname>&lt; date_type, charT &gt; &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1acac5e88858874ef6cc40bd58c6ebe64a" name="parse_date" cv="const"><type>date_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="sv_parser"><paramtype>const <classname>special_values_parser</classname>&lt; date_type, charT &gt; &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a8e4d58dea3ff010ff45997c2511927a5" name="parse_date" cv="const"><type>date_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="format_str"><paramtype>string_type</paramtype></parameter><parameter name="sv_parser"><paramtype>const <classname>special_values_parser</classname>&lt; date_type, charT &gt; &amp;</paramtype></parameter><description><para>Of all the objects that the <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser">format_date_parser</link> can parse, only a date can be a special value. Therefore, only parse_date checks for special_values. </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a43ab1896790c802c3b0c0200c18dda86" name="parse_month" cv="const"><type>month_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="format_str"><paramtype>string_type</paramtype></parameter><purpose>Throws bad_month if unable to parse. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a6d3814b1355ef05061e975ccd7478fed" name="parse_month" cv="const"><type>month_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="format_str"><paramtype>string_type</paramtype></parameter><parameter name="mr"><paramtype><classname>match_results</classname> &amp;</paramtype></parameter><purpose>Throws bad_month if unable to parse. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a9284f122965e7e7b61e2ae42b3e85caa" name="parse_var_day_of_month" cv="const"><type>day_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><purpose>Expects 1 or 2 digits 1-31. Throws bad_day_of_month if unable to parse. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a7c8becd3ff310032b453416e7c996c05" name="parse_day_of_month" cv="const"><type>day_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><purpose>Expects 2 digits 01-31. Throws bad_day_of_month if unable to parse. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1aba4c710b477039c611c3b391ce154325" name="parse_weekday" cv="const"><type>day_of_week_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="format_str"><paramtype>string_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a059a0f81150aaf4a41263d9a413e8a48" name="parse_weekday" cv="const"><type>day_of_week_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="format_str"><paramtype>string_type</paramtype></parameter><parameter name="mr"><paramtype><classname>match_results</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1a7b29c92a4716b8c91f7e232b7adb3987" name="parse_year" cv="const"><type>year_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="format_str"><paramtype>string_type</paramtype></parameter><purpose>throws bad_year if unable to parse </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1format__date__parser_1aa2999f0170149a0c50ad2535d458e3f9" name="parse_year" cv="const"><type>year_type</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="format_str"><paramtype>string_type</paramtype></parameter><parameter name="mr"><paramtype><classname>match_results</classname> &amp;</paramtype></parameter><purpose>throws bad_year if unable to parse </purpose></method>
</method-group>
</class>













<function id="doxygen.date_time_reference.format__date__parser_8hpp_1a17bfda183833296b776585fe1d1bffda" name="fixed_string_to_int"><type>int_type</type><template>
          <template-type-parameter name="int_type"/>
          <template-type-parameter name="charT"/>
        </template><parameter name="itr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="mr"><paramtype><classname>parse_match_result</classname>&lt; charT &gt; &amp;</paramtype></parameter><parameter name="length"><paramtype>unsigned int</paramtype></parameter><parameter name="fill_char"><paramtype>const charT &amp;</paramtype></parameter><purpose>Helper function for parsing fixed length strings into integers. </purpose><description><para>Will consume 'length' number of characters from stream. Consumed character are transfered to <link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result">parse_match_result</link> struct. Returns '-1' if no number can be parsed or incorrect number of digits in stream. </para></description></function>
<function id="doxygen.date_time_reference.format__date__parser_8hpp_1af2a80d854b47ca793d20c5a4f0fcedf5" name="fixed_string_to_int"><type>int_type</type><template>
          <template-type-parameter name="int_type"/>
          <template-type-parameter name="charT"/>
        </template><parameter name="itr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="mr"><paramtype><classname>parse_match_result</classname>&lt; charT &gt; &amp;</paramtype></parameter><parameter name="length"><paramtype>unsigned int</paramtype></parameter><purpose>Helper function for parsing fixed length strings into integers. </purpose><description><para>Will consume 'length' number of characters from stream. Consumed character are transfered to <link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result">parse_match_result</link> struct. Returns '-1' if no number can be parsed or incorrect number of digits in stream. </para></description></function>
<function id="doxygen.date_time_reference.format__date__parser_8hpp_1a641916c40abda1eb6223ffb7835e4b5c" name="var_string_to_int"><type>int_type</type><template>
          <template-type-parameter name="int_type"/>
          <template-type-parameter name="charT"/>
        </template><parameter name="itr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>const std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="max_length"><paramtype>unsigned int</paramtype></parameter><purpose>Helper function for parsing varied length strings into integers. </purpose><description><para>Will consume 'max_length' characters from stream only if those characters are digits. Returns '-1' if no number can be parsed. Will not parse a number preceeded by a '+' or '-'. </para></description></function>
















</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.gregorian__calendar_8hpp" name="boost/date_time/gregorian_calendar.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base" name="gregorian_calendar_base"><template>
      <template-type-parameter name="ymd_type_"><purpose><para>Struct type representing the year, month, day. The ymd_type must define a of types for the year, month, and day. These types need to be arithmetic types. </para></purpose></template-type-parameter>
      <template-type-parameter name="date_int_type_"><purpose><para>Underlying type for the date count. Must be an arithmetic type. </para></purpose></template-type-parameter>
    </template><purpose>An implementation of the Gregorian calendar. </purpose><description><para>This is a parameterized implementation of a proleptic Gregorian Calendar that can be used in the creation of date systems or just to perform calculations. All the methods of this class are static functions, so the intent is to never create instances of this class. 
</para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1aa05d1a6523f7dd0c1d978cf9b6d33e69" name="ymd_type"><purpose>define a type a date split into components </purpose><type>ymd_type_</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1a8b269802b54adcee4c7d4fcd3d8a4a5f" name="month_type"><purpose>define a type for representing months </purpose><type>ymd_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1aab346c70936e77fd4f2154a3b3bc5417" name="day_type"><purpose>define a type for representing days </purpose><type>ymd_type::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1aebe4fb680b9e8bd790adfc5e9d521a0b" name="year_type"><purpose>Type to hold a stand alone year value (eg: 2002) </purpose><type>ymd_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1a8ab0bd9c9d3d3db8c5fff5ad6966cb4b" name="date_int_type"><purpose>Define the integer type to use for internal calculations. </purpose><type>date_int_type_</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1a1d968d5024d3da06a71774fab79da3e6" name="day_of_week" specifiers="static"><type>BOOST_CXX14_CONSTEXPR unsigned short</type><parameter name="ymd"><paramtype>const ymd_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1aeda7d965641ab35e77ae32b61bc3b8f1" name="week_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR int</type><parameter name="ymd"><paramtype>const ymd_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1ae694120b51367f059b8eee810a644e72" name="day_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR date_int_type</type><parameter name="ymd"><paramtype>const ymd_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1a9e4052ad0613c940eca8523973b2ff15" name="julian_day_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR date_int_type</type><parameter name="ymd"><paramtype>const ymd_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1ad9677d79fecfde697289f61252eb5f29" name="modjulian_day_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR date_int_type</type><parameter name="ymd"><paramtype>const ymd_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1adce1ecb140bbad3ab8e5a920e01fff53" name="from_day_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR ymd_type</type><parameter name=""><paramtype>date_int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1a6513ae12f72b7569dc814a31b0f93e45" name="from_julian_day_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR ymd_type</type><parameter name=""><paramtype>date_int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1ac9fb031e579bd7555d4ce3fbf30dfc52" name="from_modjulian_day_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR ymd_type</type><parameter name=""><paramtype>date_int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1a1d94c0546791ed9e19bccac26eaeb49b" name="is_leap_year" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1ad85b8dae58f0593629c77170e60e4b3a" name="end_of_month_day" specifiers="static"><type>BOOST_CXX14_CONSTEXPR unsigned short</type><parameter name="y"><paramtype>year_type</paramtype></parameter><parameter name="m"><paramtype>month_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1a818798787597d0a866b5f8b3d4494392" name="epoch" specifiers="static"><type>BOOST_CXX14_CONSTEXPR ymd_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1gregorian__calendar__base_1a5894e61ef31108572e9ec76e66d8d1cf" name="days_in_week" specifiers="static"><type>BOOST_CXX14_CONSTEXPR unsigned short</type></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.int__adapter_8hpp" name="boost/date_time/int_adapter.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter" name="int_adapter"><template>
      <template-type-parameter name="int_type_"/>
    </template><purpose>Adapter to create integer types with +-infinity, and not a value. </purpose><description><para>This class is used internally in counted date/time representations. It adds the floating point like features of infinities and not a number. It also provides mathmatical operations with consideration to special values following these rules: <programlisting language="c++">+infinity  -  infinity  == Not A Number (NAN)
 infinity  *  non-zero  == infinity
 infinity  *  zero      == NAN
+infinity  * -integer   == -infinity
 infinity  /  infinity  == NAN
 infinity  *  infinity  == infinity 
</programlisting> </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a92a47bc9a40037f04a8fa81c5d3d0b4d" name="int_type"><type>int_type_</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ad1716e59814aa43d8e2226e0e3058257"><parameter name="v"><paramtype>int_type</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1aba1c4c18560aed19c078ac96411c40fc" name="is_infinity" cv="const"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1aa1727f80a4a975afd4db3418dcb15431" name="is_pos_infinity" cv="const"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a3788d074fb5e58ed347cd60fd8adcaee" name="is_neg_infinity" cv="const"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a7ee5c14960ab3c8f76a00d1cd227b681" name="is_nan" cv="const"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1add5fb71f5d2bb4470d76114d3b40bb89" name="is_special" cv="const"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a43b93b098f7fb789e3776d9d50852c49" name="operator==" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a240646652d48939100908dd148bc770d" name="operator==" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const int &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a8c7a06f629dd5966d6686292d0e67d13" name="operator!=" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1af07785b144a64fab9f9e2196cb354fb0" name="operator!=" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const int &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a125aaec212df62e91fc8dcc5d072cba2" name="operator&lt;" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1abf48d016cf34629cf0d2bad521915622" name="operator&lt;" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const int &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ada9cd63cfdaafb6476c4defedf974e26" name="operator&gt;" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1aaf8515566868c2ced22eca36edc0dfca" name="as_number" cv="const"><type>BOOST_CONSTEXPR int_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a11213438fb3877cfc1dc5b78267a2b57" name="as_special" cv="const"><type>BOOST_CONSTEXPR special_values</type><purpose>Returns either special value type or is_not_special. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a52097992c9275c26659c2859ec5639f5" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><template>
          <template-type-parameter name="rhs_type"/>
        </template><parameter name="rhs"><paramtype>const <classname>int_adapter</classname>&lt; rhs_type &gt; &amp;</paramtype></parameter><description><para>Operator allows for adding dissimilar <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link> types. The return type will match that of the the calling object's type </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1aafed50cf0555e4e9d1efe746bd554e5b" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a29c06aaf37461007d37ac676e00028a9" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><template>
          <template-type-parameter name="rhs_type"/>
        </template><parameter name="rhs"><paramtype>const <classname>int_adapter</classname>&lt; rhs_type &gt; &amp;</paramtype></parameter><description><para>Operator allows for subtracting dissimilar <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link> types. The return type will match that of the the calling object's type </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a610c2a4ae96141a1b4532afd0c473315" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a17a91c5ea5ca62912d122aa0af6bb494" name="operator*" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a914178ad653b453943c07cdeb31f8d6f" name="operator*" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const int</paramtype></parameter><description><para>Provided for cases when automatic conversion from 'int' to '<link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link>' causes incorrect results. </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1aa04bd94371b73f77e03775e01d17a5fb" name="operator/" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a6896326f958b70d5513de3b3ccf212af" name="operator/" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const int</paramtype></parameter><description><para>Provided for cases when automatic conversion from 'int' to '<link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link>' causes incorrect results. </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a110d3518b55071b87c88b12afaa8480e" name="operator%" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1acfe5cec38b740b06d68cf2b69c6de016" name="operator%" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const int</paramtype></parameter><description><para>Provided for cases when automatic conversion from 'int' to '<link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link>' causes incorrect results. </para></description></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a7bdb748f745800a6e1c0184e760e6194" name="has_infinity" specifiers="static"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ae2cafe0dae40a4b6d9edcb3fe7073bee" name="pos_infinity" specifiers="static"><type>BOOST_CONSTEXPR <classname>int_adapter</classname></type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ae03a228ea716ed51bc355f528cc5fbbd" name="neg_infinity" specifiers="static"><type>BOOST_CONSTEXPR <classname>int_adapter</classname></type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a020068703fdbc679933b11dbc2e3fea9" name="not_a_number" specifiers="static"><type>BOOST_CONSTEXPR <classname>int_adapter</classname></type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ae0c5c020582a698c54e7bf72194cb159" name="BOOST_PREVENT_MACRO_SUBSTITUTION" specifiers="static"><type>BOOST_CONSTEXPR <classname>int_adapter</classname> max</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a4ff2e206c582a6763e9ff4b93eea4567" name="BOOST_PREVENT_MACRO_SUBSTITUTION" specifiers="static"><type>BOOST_CONSTEXPR <classname>int_adapter</classname> min</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1aa84bc6b93caaeb356bbd819689612cc2" name="from_special" specifiers="static"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="sv"><paramtype>special_values</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a34ce4302ce5132973b5c6bef7c33d0c6" name="is_inf" specifiers="static"><type>BOOST_CONSTEXPR bool</type><parameter name="v"><paramtype>int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a31ff4b9f1c791bd7b7678ed4e9e5f3f3" name="is_neg_inf" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="v"><paramtype>int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ac6c55df9facaff819872e8b587f909ef" name="is_pos_inf" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="v"><paramtype>int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ab6060e97a097aee9a0b357b3ef0141cc" name="is_not_a_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="v"><paramtype>int_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a4fcaf3aa85b8870aa082e86024a004b1" name="to_special" specifiers="static"><type>BOOST_CXX14_CONSTEXPR special_values</type><parameter name="v"><paramtype>int_type</paramtype></parameter><purpose>Returns either special value type or is_not_special. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1a3d83fd60243791908aa4283db8b1668f" name="maxcount" specifiers="static"><type>BOOST_CONSTEXPR int_type</type></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ab2c3a2cb195c5caf7cadcb54a7e15d2e" name="compare" cv="const"><type>BOOST_CXX14_CONSTEXPR int</type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter><purpose>returns -1, 0, 1, or 2 if 'this' is &lt;, ==, &gt;, or 'nan comparison' rhs </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1ad1fb15e424140a0dd07a147004a59578" name="mult_div_specials" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const <classname>int_adapter</classname> &amp;</paramtype></parameter><purpose>Assumes at least 'this' or 'rhs' is a special value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter_1af7d84b69af81e0c47ee426b5255c7722" name="mult_div_specials" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>int_adapter</classname></type><parameter name="rhs"><paramtype>const int &amp;</paramtype></parameter><purpose>Assumes 'this' is a special value. </purpose></method>
</method-group>
</class>












<function id="doxygen.date_time_reference.int__adapter_8hpp_1abd1167730f6ec19e2a96e554465fdb30" name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT, traits &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
          <template-type-parameter name="traits"/>
          <template-type-parameter name="int_type"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT, traits &gt; &amp;</paramtype></parameter><parameter name="ia"><paramtype>const <classname>int_adapter</classname>&lt; int_type &gt; &amp;</paramtype></parameter><description><para>Expected output is either a numeric representation or a special values representation.<sbr/>
 Ex. "12", "+infinity", "not-a-number", etc. </para></description></function>



















</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.iso__format_8hpp" name="boost/date_time/iso_format.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__extended__format" name="iso_extended_format"><template>
      <template-type-parameter name="charT"/>
    </template><inherit access="public">boost::date_time::iso_format_base&lt; charT &gt;</inherit><purpose>Extended format uses seperators YYYY-MM-DD. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__extended__format_1a260a6691f85ec9d2b5bc2946ae8557fe" name="has_date_sep_chars" specifiers="static"><type>bool</type><purpose>Extended format needs char separators. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format" name="iso_format"><template>
      <template-type-parameter name="charT"/>
    </template><inherit access="public">boost::date_time::iso_format_base&lt; charT &gt;</inherit><purpose>Format description for ISO 8601 normal YYYYMMDD. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format_1a41f23f52f638c560b7dd5bb0ca50e78f" name="has_date_sep_chars" specifiers="static"><type>bool</type><purpose>The ios standard format doesn't use char separators. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base" name="iso_format_base"><template>
      <template-type-parameter name="charT"/>
    </template><purpose>Class to provide common ISO 8601 formatting spec. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a4bc994a6df3d7bf0ead845d842e2e77f" name="month_format" specifiers="static"><type>month_format_spec</type><purpose>Describe month format – its an integer in ISO 8601 format. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1ab78731961063e2a283e700cb2be67932" name="not_a_date" specifiers="static"><type>const charT *</type><purpose>String used printed is date is invalid. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1ac00720d84e07eadbdcb57a4748943142" name="pos_infinity" specifiers="static"><type>const charT *</type><purpose>String used to for positive infinity value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1ae6baf23499be8faaecd0ee751dcd962b" name="neg_infinity" specifiers="static"><type>const charT *</type><purpose>String used to for positive infinity value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1aa18eaa365eb52f29e6cc79839e2cdacf" name="year_sep_char" specifiers="static"><type>charT</type><purpose>ISO 8601 char for a year – used in durations. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a6a1ac935d6876cfbf20019fd9a7e7abb" name="month_sep_char" specifiers="static"><type>charT</type><purpose>ISO 8601 char for a month. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1ad10d9d882d305461ce22e506be0a8194" name="day_sep_char" specifiers="static"><type>charT</type><purpose>ISO 8601 char for a day. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a3be0e184f89d91bea5bf6b37ff8e8529" name="hour_sep_char" specifiers="static"><type>charT</type><purpose>char for minute </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a01d71df3926ffea33b7ae9895f1e5451" name="minute_sep_char" specifiers="static"><type>charT</type><purpose>char for minute </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1ab6d2c06c0479abd270e973adfcf49419" name="second_sep_char" specifiers="static"><type>charT</type><purpose>char for second </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a79f45fbceb93b1f191d3d47573b0622a" name="period_start_char" specifiers="static"><type>charT</type><purpose>ISO 8601 char for a period. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a38290da70ad16dc3dac2f0beee0df783" name="time_start_char" specifiers="static"><type>charT</type><purpose>Used in time in mixed strings to set start of time. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a46a400ea7fbc8dbe5113072d97e1125d" name="week_start_char" specifiers="static"><type>charT</type><purpose>Used in mixed strings to identify start of a week number. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1ad1194577956d24aec9d5977d4b8ce331" name="period_sep_char" specifiers="static"><type>charT</type><purpose>Separators for periods. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a07ba3cd0db4e146f4cc92f8b9708d51d" name="time_sep_char" specifiers="static"><type>charT</type><purpose>Separator for hh:mm:ss. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a73a3def05450cd177b08b1cf5ea8e47d" name="fractional_time_sep_char" specifiers="static"><type>charT</type><purpose>Preferred Separator for hh:mm:ss,decimal_fraction. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1acef0e2ee0ffef270783ecca73efaef7e" name="is_component_sep" specifiers="static"><type>bool</type><parameter name="sep"><paramtype>charT</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a4d36d8ec958ae851c688693bb151ab93" name="is_fractional_time_sep" specifiers="static"><type>bool</type><parameter name="sep"><paramtype>charT</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a7cf557db88a0e4abfa98a30031e675cd" name="is_timezone_sep" specifiers="static"><type>bool</type><parameter name="sep"><paramtype>charT</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_1a34c89fd8d6d1755120824a6257c707e4" name="element_sep_char" specifiers="static"><type>charT</type></method>
</method-group>
</class><class-specialization id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4" name="iso_format_base"><template>
    </template><specialization><template-arg>wchar_t</template-arg></specialization><purpose>Class to provide common ISO 8601 formatting spec. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1af166b2473367e78f70b24a5699d0d737" name="month_format" specifiers="static"><type>month_format_spec</type><purpose>Describe month format – its an integer in ISO 8601 format. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1a15e4757a0e8fb12189a5c0d3522248b3" name="not_a_date" specifiers="static"><type>const wchar_t *</type><purpose>String used printed is date is invalid. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1ae2132acd7adc43a9225e3b7786eedab3" name="pos_infinity" specifiers="static"><type>const wchar_t *</type><purpose>String used to for positive infinity value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1afaf1adcdb809f3a101539dced22db6ed" name="neg_infinity" specifiers="static"><type>const wchar_t *</type><purpose>String used to for positive infinity value. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1aaea8671e4964d0452d547fb3cc1b28e7" name="year_sep_char" specifiers="static"><type>wchar_t</type><purpose>ISO 8601 char for a year – used in durations. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1aea827e9e52a321ba8a03f6b1da073596" name="month_sep_char" specifiers="static"><type>wchar_t</type><purpose>ISO 8601 char for a month. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1aa45a4afb19e92fb9de585c090c2bd3e7" name="day_sep_char" specifiers="static"><type>wchar_t</type><purpose>ISO 8601 char for a day. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1a15abac32446a5c1f9f4e925638bcfa98" name="hour_sep_char" specifiers="static"><type>wchar_t</type><purpose>char for minute </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1a1de44baa1ab3e8b4335ca6172c1525c1" name="minute_sep_char" specifiers="static"><type>wchar_t</type><purpose>char for minute </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1a7efc991f1766d4f017397b71a752fb6d" name="second_sep_char" specifiers="static"><type>wchar_t</type><purpose>char for second </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1aa7c4f910fb5abebcb079cee5d9f49477" name="period_start_char" specifiers="static"><type>wchar_t</type><purpose>ISO 8601 char for a period. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1ab507de1514539c06da512872d5ff09c2" name="time_start_char" specifiers="static"><type>wchar_t</type><purpose>Used in time in mixed strings to set start of time. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1a72bcc9fac6212c26054eda7c49cbeeca" name="week_start_char" specifiers="static"><type>wchar_t</type><purpose>Used in mixed strings to identify start of a week number. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1aad7ea0ac5b5b24cb4b89d8ea00425d06" name="period_sep_char" specifiers="static"><type>wchar_t</type><purpose>Separators for periods. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1a8de53e14a07a941465de3cbff76ce53b" name="time_sep_char" specifiers="static"><type>wchar_t</type><purpose>Separator for hh:mm:ss. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1a53387dc558c6994fcdf64cc94d54a794" name="fractional_time_sep_char" specifiers="static"><type>wchar_t</type><purpose>Preferred Separator for hh:mm:ss,decimal_fraction. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1aa656bc317c83a8b699f2bbf7a9df64de" name="is_component_sep" specifiers="static"><type>bool</type><parameter name="sep"><paramtype>wchar_t</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1ab61164e74204073c2845fbb23cef0e23" name="is_fractional_time_sep" specifiers="static"><type>bool</type><parameter name="sep"><paramtype>wchar_t</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1a33f04567484a4ba6b021404fbc9c76f4" name="is_timezone_sep" specifiers="static"><type>bool</type><parameter name="sep"><paramtype>wchar_t</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1iso__format__base_3_01wchar__t_01_4_1acf4c1759dcabbbf08552e932c9751d31" name="element_sep_char" specifiers="static"><type>wchar_t</type></method>
</method-group>
</class-specialization>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.local__time__adjustor_8hpp" name="boost/date_time/local_time_adjustor.hpp">
<para>Time adjustment calculations for local times </para><namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1dynamic__local__time__adjustor" name="dynamic_local_time_adjustor"><template>
      <template-type-parameter name="time_type"/>
      <template-type-parameter name="dst_rules"/>
    </template><inherit access="public">dst_rules</inherit><purpose>Allow sliding utc adjustment with fixed dst rules. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1dynamic__local__time__adjustor_1a5bad9263e5faaebd0336acdb48c75f7b" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1dynamic__local__time__adjustor_1a8b3d7f67ff17b0a79194089f0a6dbf5f" name="date_type"><type>time_type::date_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1dynamic__local__time__adjustor_1a4c36b2316fc2d79dccde62ce4500ccb9"><parameter name="utc_offset"><paramtype>time_duration_type</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1dynamic__local__time__adjustor_1af85f62faaca119aea744b4a587997f91" name="utc_offset"><type>time_duration_type</type><parameter name="is_dst"><paramtype>bool</paramtype></parameter><purpose>Presumes local time. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1local__adjustor" name="local_adjustor"><template>
      <template-type-parameter name="time_type"/>
      <template-nontype-parameter name="utc_offset"><type>short</type></template-nontype-parameter>
      <template-type-parameter name="dst_rule"/>
    </template><purpose>Template that simplifies the creation of local time calculator. </purpose><description><para>Use this template to create the timezone to utc convertors as required.</para><para>This class will also work for other regions that don't use dst and have a utc offset which is an integral number of hours.</para><para><emphasis role="bold">Template Parameters</emphasis> -time_type – Time class to use -utc_offset – Number hours local time is adjust from utc -use_dst – true (default) if region uses dst, false otherwise For example: <programlisting language="c++">   //eastern timezone is utc-5
typedef date_time::local_adjustor&lt;ptime, -5, us_dst&gt; us_eastern;
typedef date_time::local_adjustor&lt;ptime, -6, us_dst&gt; us_central;
typedef date_time::local_adjustor&lt;ptime, -7, us_dst&gt; us_mountain;
typedef date_time::local_adjustor&lt;ptime, -8, us_dst&gt; us_pacific;
typedef date_time::local_adjustor&lt;ptime, -7, no_dst&gt; us_arizona;
</programlisting> </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1local__adjustor_1adc75ae85a2c201523ab4d5fbf9800f48" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1local__adjustor_1a6f9fe43933795f0c5f831042ad7941de" name="date_type"><type>time_type::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1local__adjustor_1a76d71d01e1642faa3402d071ae5853b0" name="dst_adjustor"><type><classname>static_local_time_adjustor</classname>&lt; time_type, dst_rule, <classname>utc_adjustment</classname>&lt; time_duration_type, utc_offset &gt; &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1local__adjustor_1abf683373bf034f126e47193ea696ca00" name="utc_to_local" specifiers="static"><type>time_type</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter><purpose>Convert a utc time to local time. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1local__adjustor_1a05293047746f15ecd8c62333ad33fed1" name="local_to_utc" specifiers="static"><type>time_type</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter><parameter name="dst"><paramtype>date_time::dst_flags</paramtype><default>date_time::calculate</default></parameter><purpose>Convert a local time to utc. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1static__local__time__adjustor" name="static_local_time_adjustor"><template>
      <template-type-parameter name="time_type"/>
      <template-type-parameter name="dst_rules"/>
      <template-type-parameter name="utc_offset_rules"/>
    </template><inherit access="public">dst_rules</inherit><inherit access="public">utc_offset_rules</inherit><purpose>Embed the rules for local time adjustments at compile time. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1static__local__time__adjustor_1a2a0d6d43b6b4b559d7af15761e34773e" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1static__local__time__adjustor_1a9c006b876b9d55cd0f78277f389ab86c" name="date_type"><type>time_type::date_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1static__local__time__adjustor_1a26388b0f17f994a321a341698bbef067" name="utc_to_local_offset" specifiers="static"><type>time_duration_type</type><parameter name="t"><paramtype>const time_type &amp;</paramtype><description><para>UTC time to calculate offset to local time This adjustment depends on the following observations about the workings of the DST boundary offset. Since UTC time labels are monotonically increasing we can determine if a given local time is in DST or not and therefore adjust the offset appropriately.</para></description></parameter><purpose>Calculates the offset from a utc time to local based on dst and utc offset. </purpose><description><para>
The logic is as follows. Starting with UTC time use the offset to create a label for an non-dst adjusted local time. Then call dst_rules::local_is_dst with the non adjust local time. The results of this function will either unabiguously decide that the initial local time is in dst or return an illegal or ambiguous result. An illegal result only occurs at the end of dst (where labels are skipped) and indicates that dst has ended. An ambiguous result means that we need to recheck by making a dst adjustment and then rechecking. If the dst offset is added to the utc time and the recheck proves non-ambiguous then we are past the boundary. If it is still ambiguous then we are ahead of the boundary and dst is still in effect.</para><para>TODO – check if all dst offsets are positive. If not then the algorithm needs to check for this and reverse the illegal/ambiguous logic. </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1static__local__time__adjustor_1aa67b61a499de06da7bdc3baaa50958e9" name="local_to_utc_offset" specifiers="static"><type>time_duration_type</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter><parameter name="dst"><paramtype>date_time::dst_flags</paramtype><default>date_time::calculate</default></parameter><purpose>Get the offset to UTC given a local time. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1utc__adjustment" name="utc_adjustment"><template>
      <template-type-parameter name="time_duration_type"/>
      <template-nontype-parameter name="hours"><type>short</type></template-nontype-parameter>
      <template-nontype-parameter name="minutes"><type>unsigned short</type><default>0</default></template-nontype-parameter>
    </template><purpose>Provides a base offset adjustment from utc. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1utc__adjustment_1aedccae37f3df2f292ef11da6d50b45bb" name="local_to_utc_base_offset" specifiers="static"><type>time_duration_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1utc__adjustment_1a30c9b79fe77cae771b966448a3df5506" name="utc_to_local_base_offset" specifiers="static"><type>time_duration_type</type></method>
</method-group>
</class>











<function id="doxygen.date_time_reference.local__time__adjustor_8hpp_1a4e4c37a2a18a966e85c6061757691d51" name="dummy_to_prevent_msvc6_ice"><type>void</type></function>




















</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.local__timezone__defs_8hpp" name="boost/date_time/local_timezone_defs.hpp">
<namespace name="boost">
<namespace name="date_time">
<struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait" name="acst_dst_trait"><template>
      <template-type-parameter name="date_type"/>
    </template><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1ac127251684906051b7280a91b94c9359" name="day_of_week_type"><type>date_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1a125f7664c7df61bbba943831e5a5f85d" name="month_type"><type>date_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1af7ea398366b65a9390f8f508aa1a7397" name="year_type"><type>date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1a48b784af6a830b37ff64960574565fc7" name="start_rule_functor"><type><classname>date_time::last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1aa1766be336ea37852457f1c36977f051" name="end_rule_functor"><type><classname>date_time::last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1a4b606208058487cc183aa416b9afe35f" name="start_day" specifiers="static"><type>day_of_week_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1a77afed17f736de4010f59c223b7d8d0f" name="start_month" specifiers="static"><type>month_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1a154bdd272f0d414c0d27142b0275ebb3" name="end_day" specifiers="static"><type>day_of_week_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1a5834dba17cf9c5725763b7c024226c33" name="end_month" specifiers="static"><type>month_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1a8bbf73c70d82341184a319e1696d9f0d" name="dst_start_offset_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1a46bd55f69c52b5186376dd9e8f24f85d" name="dst_end_offset_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1aea0cb9be6079b560a72c072c3a5b6174" name="dst_shift_length_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1ada978ee9281dc3ae8da715f7765c59c3" name="local_dst_start_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1acst__dst__trait_1af5fa39eed82fe4e98e4dbc27d54635d1" name="local_dst_end_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
</method-group>
</struct><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait" name="eu_dst_trait"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Rules for daylight savings start in the EU (Last Sun in Mar) </purpose><description><para>These amount to the following:<itemizedlist>
<listitem><para>Start of dst day is last Sunday in March</para>
</listitem><listitem><para>End day of dst is last Sunday in Oct</para>
</listitem><listitem><para>Going forward switch time is 2:00 am (offset 120 minutes)</para>
</listitem><listitem><para>Going back switch time is 3:00 am (off set 180 minutes)</para>
</listitem><listitem><para>Shift duration is one hour (60 minutes) </para>
</listitem></itemizedlist>
</para></description><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1a96e411dbdb65fcb4a021114b42cb50d3" name="day_of_week_type"><type>date_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1af09c480f9b5496b9f57f07d47a816254" name="month_type"><type>date_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1a03ea80eeeedb162158677e8bd3ea50dd" name="year_type"><type>date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1af9e5fad48410e3830c0b8487eb5f7136" name="start_rule_functor"><type><classname>date_time::last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1ad72e23ca30448657e79ba2906bdfa0e9" name="end_rule_functor"><type><classname>date_time::last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1a009c3eb6201ec33af83700f0ddb932f0" name="start_day" specifiers="static"><type>day_of_week_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1aefabc37d78aa47316e4a18426cbd7322" name="start_month" specifiers="static"><type>month_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1ac07a51f1513945c9f8c560c9e36b8739" name="end_day" specifiers="static"><type>day_of_week_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1ab701c7be91d532093517eea719dec524" name="end_month" specifiers="static"><type>month_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1ab494bf5a9dc477f11e9b50bc8b0f85df" name="dst_start_offset_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1a876fe55abc17846c3f30937b137ce6ef" name="dst_end_offset_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1a7d76d2c51781e4438b0916e5c554abe5" name="dst_shift_length_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1a22e5dd294a2042c44eb1ee01045dcb58" name="local_dst_start_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1eu__dst__trait_1a99f688c854766b2b72d035e85054402c" name="local_dst_end_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
</method-group>
</struct><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1uk__dst__trait" name="uk_dst_trait"><template>
      <template-type-parameter name="date_type"/>
    </template><inherit access="public">boost::date_time::eu_dst_trait&lt; date_type &gt;</inherit><purpose>Alternative dst traits for some parts of the United Kingdom. </purpose><method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1uk__dst__trait_1a3cc4f1963af15520b7667de47e18cb54" name="dst_start_offset_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1uk__dst__trait_1a395f8fdf9367384d1e0f5fd352f31706" name="dst_end_offset_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1uk__dst__trait_1a0194400cf034008a7974ede9d74f9c0f" name="dst_shift_length_minutes" specifiers="static"><type>int</type></method>
</method-group>
</struct><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait" name="us_dst_trait"><template>
      <template-type-parameter name="date_type"/>
    </template><purpose>Specification for daylight savings start rules in US. </purpose><description><para>This class is used to configure <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine">dst_calc_engine</link> template typically as follows: <programlisting language="c++">using namespace boost::gregorian;
using namespace boost::posix_time;
typedef us_dst_trait&lt;date&gt; us_dst_traits;
typedef <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__calc__engine">boost::date_time::dst_calc_engine</link>&lt;date, time_duration, 
                                          us_dst_traits&gt;  
                                          us_dst_calc;
//calculate the 2002 transition day of USA April 7 2002
date dst_start = us_dst_calc::local_dst_start_day(2002); 

//calculate the 2002 transition day of USA Oct 27 2002
date dst_end = us_dst_calc::local_dst_end_day(2002); 
                                          
//check if a local time is in dst or not -- posible answers
//are yes, no, invalid time label, ambiguous
ptime t(...some time...);  
if (us_dst::local_is_dst(t.date(), t.time_of_day()) 
    == boost::date_time::is_not_in_dst) 
{

}
</programlisting> This generates a type suitable for the calculation of dst transitions for the United States. Of course other templates can be used for other locales. </para></description><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1af27f7596a2b6a17f6dbe232e84ece1b4" name="day_of_week_type"><type>date_type::day_of_week_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a48dcdf6deb4ab0cb4b48be4dbcbf6d54" name="month_type"><type>date_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a7dc2bb744816b71a7e95f56384de54c0" name="year_type"><type>date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a2e23d03eeda84aaa595c15feca7f0485" name="start_rule_functor"><type><classname>date_time::nth_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a182c8481ddf0e08f309467a8b0acf585" name="end_rule_functor"><type><classname>date_time::first_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a04083ccdec081224f6a1322703588841" name="start_rule_functor_pre2007"><type><classname>date_time::first_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1ae962606afffb884b050179d205ae9575" name="end_rule_functor_pre2007"><type><classname>date_time::last_kday_of_month</classname>&lt; date_type &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a77d6ed0750a3acfa702a00b73bc67b2b" name="start_day" specifiers="static"><type>day_of_week_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a5f8fa4cf82b19933bf99ec1ee093e4c1" name="start_month" specifiers="static"><type>month_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1ab3c2413aae2aa3c77e074344721f012c" name="end_day" specifiers="static"><type>day_of_week_type</type><parameter name=""><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1acfc84e2dca90c5d3d0341820214e50ad" name="end_month" specifiers="static"><type>month_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a6db5941e421137e02dd516ecca4b3834" name="local_dst_start_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1addeed7f1a5a64b50f60d901457064a17" name="local_dst_end_day" specifiers="static"><type>date_type</type><parameter name="year"><paramtype>year_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1ae449106ca8f694e24d6049403e571066" name="dst_start_offset_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a18d0af1255df822e668c90f9f91a17f0" name="dst_end_offset_minutes" specifiers="static"><type>int</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1us__dst__trait_1a45af43919a0834bb269ea88a3a30a101" name="dst_shift_length_minutes" specifiers="static"><type>int</type></method>
</method-group>
</struct>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.locale__config_8hpp" name="boost/date_time/locale_config.hpp">
</header>
<header id="doxygen.date_time_reference.microsec__time__clock_8hpp" name="boost/date_time/microsec_time_clock.hpp">
<para>This file contains a high resolution time clock implementation. </para><namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock" name="microsec_clock"><template>
      <template-type-parameter name="time_type"/>
    </template><purpose>A clock providing microsecond level resolution. </purpose><description><para>A high precision clock that measures the local time at a resolution up to microseconds and adjusts to the resolution of the time system. For example, for the a library configuration with nano second resolution, the last 3 places of the fractional seconds will always be 000 since there are 1000 nano-seconds in a micro second. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock_1aafc26991424bb31838c290323f692686" name="date_type"><type>time_type::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock_1aea95e1ca050ca765a92f6d24d58116b9" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock_1aa0184838ff8451af911c040f62efc117" name="resolution_traits_type"><type>time_duration_type::rep_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock_1a965708405e12127a3af955aff1adc63c" name="local_time" specifiers="static"><type>time_type</type><template>
          <template-type-parameter name="time_zone_type"/>
        </template><parameter name="tz_ptr"><paramtype>shared_ptr&lt; time_zone_type &gt;</paramtype></parameter><purpose>return a local time object for the given zone, based on computer clock </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock_1a3e415bcf875eb5fdd3b7b720de8c984d" name="local_time" specifiers="static"><type>time_type</type><purpose>Returns the local time based on computer clock settings. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock_1a756a16c8c61ca4c0511efd8189d32a09" name="universal_time" specifiers="static"><type>time_type</type><purpose>Returns the UTC time based on computer settings. </purpose></method>
</method-group>
<method-group name="private static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock_1aabb2eff5f17d2d42fd9fecbc8f9d5619" name="create_time" specifiers="static"><type>time_type</type><parameter name="converter"><paramtype>time_converter</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1microsec__clock_1a91facf8919493d2a2ebbe14218675802" name="file_time_to_microseconds" specifiers="static"><type>boost::uint64_t</type><parameter name="ft"><paramtype>boost::winapi::FILETIME_ const &amp;</paramtype></parameter><description><para>The function converts file_time into number of microseconds elapsed since 1970-Jan-01</para><para><note><para>Only dates after 1970-Jan-01 are supported. Dates before will be wrapped. </para>
</note>
</para></description></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.parse__format__base_8hpp" name="boost/date_time/parse_format_base.hpp">
<namespace name="boost">
<namespace name="date_time">
<enum id="doxygen.date_time_reference.parse__format__base_8hpp_1ab480af6dc3ac7d769e341a04d88f5916" name="month_format_spec"><enumvalue id="doxygen.date_time_reference.parse__format__base_8hpp_1ab480af6dc3ac7d769e341a04d88f5916acd0046bbb897d9043ed0ff56aca095db" name="month_as_integer"/><enumvalue id="doxygen.date_time_reference.parse__format__base_8hpp_1ab480af6dc3ac7d769e341a04d88f5916ab42b3a497aec62dfc7517c992f4ed405" name="month_as_short_string"/><enumvalue id="doxygen.date_time_reference.parse__format__base_8hpp_1ab480af6dc3ac7d769e341a04d88f5916a3a6037c2ef8b5db7a1b724a5dd5cd6ef" name="month_as_long_string"/><purpose>Enum for distinguishing parsing and formatting options. </purpose></enum>
<enum id="doxygen.date_time_reference.parse__format__base_8hpp_1a93aadd1d259654266f4132146f07b7a1" name="ymd_order_spec"><enumvalue id="doxygen.date_time_reference.parse__format__base_8hpp_1a93aadd1d259654266f4132146f07b7a1aca0a0bf341252a9415bb5fbe8697ba10" name="ymd_order_iso"/><enumvalue id="doxygen.date_time_reference.parse__format__base_8hpp_1a93aadd1d259654266f4132146f07b7a1a890bb2cc0dded48b23629c78afc731f6" name="ymd_order_dmy"/><enumvalue id="doxygen.date_time_reference.parse__format__base_8hpp_1a93aadd1d259654266f4132146f07b7a1aed031afa38c9f9f8fe1fb16ab843b111" name="ymd_order_us"/><purpose>Enum for distinguishing the order of Month, Day, &amp; Year. </purpose><description><para>Enum for distinguishing the order in which Month, Day, &amp; Year will appear in a date string </para></description></enum>

































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.period_8hpp" name="boost/date_time/period.hpp">
<para>This file contain the implementation of the period abstraction. This is basically the same idea as a range. Although this class is intended for use in the time library, it is pretty close to general enough for other numeric uses. </para><namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1period" name="period"><template>
      <template-type-parameter name="point_rep"/>
      <template-type-parameter name="duration_rep"/>
    </template><inherit access="private">boost::less_than_comparable&lt; period&lt; point_rep, duration_rep &gt;, boost::equality_comparable&lt; period&lt; point_rep, duration_rep &gt; &gt; &gt;</inherit><purpose>Provides generalized period type useful in date-time systems. </purpose><description><para>This template uses a class to represent a time point within the period and another class to represent a duration. As a result, this class is not appropriate for use when the number and duration representation are the same (eg: in the regular number domain).</para><para>A period can be specified by providing either the begining point and a duration or the begining point and the end point( end is NOT part of the period but 1 unit past it. A period will be "invalid" if either end_point &lt;= begin_point or the given duration is &lt;= 0. Any valid period will return false for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1ac47f3aacbe8b39beeb38a83068fd87fb">is_null()</link>.</para><para>Zero length periods are also considered invalid. Zero length periods are periods where the begining and end points are the same, or, the given duration is zero. For a zero length period, the last point will be one unit less than the begining point.</para><para>In the case that the begin and last are the same, the period has a length of one unit.</para><para>The best way to handle periods is usually to provide a begining point and a duration. So, day1 + 7 days is a week period which includes all of the first day and 6 more days (eg: Sun to Sat). </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1acb6168cd3aa3b2f9aac12e23db04735b" name="point_type"><type>point_rep</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1a2e64d54862ae44a44cb3b6de8394f7f0" name="duration_type"><type>duration_rep</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1ae3949aa194a9127cf0050ffac9c5dbe0"><parameter name="first_point"><paramtype>point_rep</paramtype></parameter><parameter name="end_point"><paramtype>point_rep</paramtype></parameter><purpose>create a period from begin to last eg: [begin,end) </purpose><description><para>If end &lt;= begin then the period will be invalid </para></description></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1aeb3cd4f401b617f93fcbb4c93a4a2229"><parameter name="first_point"><paramtype>point_rep</paramtype></parameter><parameter name="len"><paramtype>duration_rep</paramtype></parameter><purpose>create a period as [begin, begin+len) </purpose><description><para>If len is &lt;= 0 then the period will be invalid </para></description></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1afcdc4d400ea28f337a2f7aae5133c5c7" name="begin" cv="const"><type>BOOST_CXX14_CONSTEXPR point_rep</type><purpose>Return the first element in the period. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1a5048502845ea87493f4a4494e333c465" name="end" cv="const"><type>BOOST_CXX14_CONSTEXPR point_rep</type><purpose>Return one past the last element. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1aac13d016b356252c8e43fb539915e40e" name="last" cv="const"><type>BOOST_CXX14_CONSTEXPR point_rep</type><purpose>Return the last item in the period. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1af9220380de0656ada25c829d0aeaea06" name="length" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_rep</type><purpose>Return the length of the period. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1ac47f3aacbe8b39beeb38a83068fd87fb" name="is_null" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>True if period is ill formed (length is zero or less) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1abc8d188ce077a60cc9b050b3a125e3b5" name="operator==" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>period</classname> &amp;</paramtype></parameter><purpose>Equality operator. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1af67eed664dd1ce7fbe0d78aa4dd48c0c" name="operator&lt;" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>period</classname> &amp;</paramtype></parameter><purpose>Strict as defined by rhs.last &lt;= lhs.last. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1ad43cae63877f99920a6927f84dc31aba" name="shift"><type>BOOST_CXX14_CONSTEXPR void</type><parameter name="d"><paramtype>const duration_rep &amp;</paramtype></parameter><purpose>Shift the start and end by the specified amount. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1acb45f2f3fe8fb2f2cc4aaba93a991d8d" name="expand"><type>BOOST_CXX14_CONSTEXPR void</type><parameter name="d"><paramtype>const duration_rep &amp;</paramtype></parameter><description><para>Expands the size of the period by the duration on both ends.</para><para>So before expand <programlisting language="c++">        [-------]
^   ^   ^   ^   ^   ^  ^
1   2   3   4   5   6  7
</programlisting> After expand(2) <programlisting language="c++">[----------------------]
^   ^   ^   ^   ^   ^  ^
1   2   3   4   5   6  7
</programlisting> </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1a84ee29c946625e8b4eb3949245232b63" name="contains" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="point"><paramtype>const point_rep &amp;</paramtype></parameter><purpose>True if the point is inside the period, zero length periods contain no points. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1a6ea3a66cc046063c88133f07750aa02a" name="contains" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="other"><paramtype>const <classname>period</classname> &amp;</paramtype></parameter><purpose>True if this period fully contains (or equals) the other period. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1ad7e1fa4866c1f76dcf6529b277d0fcb3" name="intersects" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="other"><paramtype>const <classname>period</classname> &amp;</paramtype></parameter><purpose>True if the periods overlap in any way. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1a970252c815d4065ecc1e01a354844669" name="is_adjacent" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="other"><paramtype>const <classname>period</classname> &amp;</paramtype></parameter><purpose>True if periods are next to each other without a gap. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1a74908d271d447adfe7d5348bdd63d589" name="is_before" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="point"><paramtype>const point_rep &amp;</paramtype></parameter><purpose>True if all of the period is prior to the passed point or end &lt;= t. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1a905bdb5df9e6a5d78ead339c6c0e0997" name="is_after" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="point"><paramtype>const point_rep &amp;</paramtype></parameter><purpose>True if all of the period is prior or t &lt; start. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1adade9d1f4c83f9c2fefc3bbcef75239f" name="intersection" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>period</classname></type><parameter name="other"><paramtype>const <classname>period</classname> &amp;</paramtype></parameter><purpose>Returns the period of intersection or invalid range no intersection. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1aed42641d196a8101acea987eab97a463" name="merge" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>period</classname></type><parameter name="other"><paramtype>const <classname>period</classname> &amp;</paramtype></parameter><purpose>Returns the union of intersecting periods – or null period. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period_1a0b8cb01255317e8f4187284f209d2bbf" name="span" cv="const"><type>BOOST_CXX14_CONSTEXPR <classname>period</classname></type><parameter name="other"><paramtype>const <classname>period</classname> &amp;</paramtype></parameter><purpose>Combine two periods with earliest start and latest end. </purpose><description><para>Combines two periods and any gap between them such that start = min(p1.start, p2.start) end = max(p1.end , p2.end) <programlisting language="c++">       [---p1---)
                      [---p2---)
result:
       [-----------p3----------) 
</programlisting> </para></description></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.period__formatter_8hpp" name="boost/date_time/period_formatter.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter" name="period_formatter"><template>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="OutItrT"><default>std::ostreambuf_iterator&lt;CharT, std::char_traits&lt;CharT&gt; &gt;</default></template-type-parameter>
    </template><purpose>Not a facet, but a class used to specify and control period formats. </purpose><description><para>Provides settings for the following:<itemizedlist>
<listitem><para>period_separator – default '/'</para>
</listitem><listitem><para>period_open_start_delimeter – default '['</para>
</listitem><listitem><para>period_open_range_end_delimeter – default ')'</para>
</listitem><listitem><para>period_closed_range_end_delimeter – default ']'</para>
</listitem><listitem><para>display_as_open_range, display_as_closed_range – default closed_range</para>
</listitem></itemizedlist>
</para><para>Thus the default formatting for a period is as follows: <programlisting language="c++">[period.start()/period.last()]
</programlisting> So for a typical date_period this would be <programlisting language="c++">[2004-Jan-04/2004-Feb-01]
</programlisting> where the date formatting is controlled by the date facet </para></description><enum id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a8116c6001140d2ec1d07c9b69e4e61ec" name="range_display_options"><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a8116c6001140d2ec1d07c9b69e4e61ecaa7f16db46ec1413c5c4fe3c8ce73ad7e" name="AS_OPEN_RANGE"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a8116c6001140d2ec1d07c9b69e4e61eca074407195369b50bf0468f05c15063ae" name="AS_CLOSED_RANGE"/></enum>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1acd405769a339993e8f53c64e484e1055" name="string_type"><type>std::basic_string&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a1079e13902aaa3ed73c0be4f2ae85af9" name="char_type"><type>CharT</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1ab3c5e906b23ac02ebea1485dff8f67ec" name="const_itr_type"><type>std::basic_string&lt; char_type &gt;::const_iterator</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a41b4e9c85b27f2a851980a2b97c28efe" name="collection_type"><type>std::vector&lt; std::basic_string&lt; CharT &gt; &gt;</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a979a7a656c10388c67ac71b7f3ccb154" name="default_period_separator" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a7fa1cf691bc34ab2a992f26528381ddd" name="default_period_start_delimeter" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a3848afe2bead6345620f53a3e6552322" name="default_period_open_range_end_delimeter" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1ae6fb4a9dc8b9f4343dda24cb04ccdae2" name="default_period_closed_range_end_delimeter" specifiers="static"><type>const char_type</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a4833011b6386b37a000489ba3c600a63"><parameter name="range_option_in"><paramtype>range_display_options</paramtype><default>AS_CLOSED_RANGE</default></parameter><parameter name="period_separator"><paramtype>const char_type *const</paramtype><default>default_period_separator</default></parameter><parameter name="period_start_delimeter"><paramtype>const char_type *const</paramtype><default>default_period_start_delimeter</default></parameter><parameter name="period_open_range_end_delimeter"><paramtype>const char_type *const</paramtype><default>default_period_open_range_end_delimeter</default></parameter><parameter name="period_closed_range_end_delimeter"><paramtype>const char_type *const</paramtype><default>default_period_closed_range_end_delimeter</default></parameter><purpose>Constructor that sets up period formatter options – default should suffice most cases. </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a55c65199368782180594384c35dfdd0f" name="put_period_separator" cv="const"><type>OutItrT</type><parameter name="oitr"><paramtype>OutItrT &amp;</paramtype></parameter><purpose>Puts the characters between period elements into stream – default is /. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a7f963cf2d4b4b35296333f2283b3ca02" name="put_period_start_delimeter" cv="const"><type>OutItrT</type><parameter name="oitr"><paramtype>OutItrT &amp;</paramtype></parameter><purpose>Puts the period start characters into stream – default is [. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1abe27693675a329bb88ccbc9261c18240" name="put_period_end_delimeter" cv="const"><type>OutItrT</type><parameter name="oitr"><paramtype>OutItrT &amp;</paramtype></parameter><purpose>Puts the period end characters into stream as controled by open/closed range setting. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1abadac06e97f7c789a4898779f865dbab" name="range_option" cv="const"><type>range_display_options</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a07f62c279d64ba9618be40ac092d77ac" name="range_option" cv="const"><type>void</type><parameter name="option"><paramtype>range_display_options</paramtype></parameter><purpose>Reset the range_option control. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1a733678599f7fe2bd004a3f19674d4a2b" name="delimiter_strings"><type>void</type><parameter name="separator"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="start_delim"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="open_end_delim"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="closed_end_delim"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Change the delimiter strings. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__formatter_1acbe1528a016838d82a053230a994b24e" name="put_period" cv="const"><type>OutItrT</type><template>
          <template-type-parameter name="period_type"/>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="a_fill"><paramtype>char_type</paramtype></parameter><parameter name="p"><paramtype>const period_type &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Generic code to output a period – no matter the period type. </purpose><description><para>This generic code will output any period using a facet to to output the 'elements'. For example, in the case of a date_period the elements will be instances of a date which will be formatted according the to setup in the passed facet parameter.</para><para>The steps for formatting a period are always the same:<itemizedlist>
<listitem><para>put the start delimiter</para>
</listitem><listitem><para>put start element</para>
</listitem><listitem><para>put the separator</para>
</listitem><listitem><para>put either last or end element depending on range settings</para>
</listitem><listitem><para>put end delimeter depending on range settings</para>
</listitem></itemizedlist>
</para><para>Thus for a typical date period the result might look like this: <programlisting language="c++">[March 01, 2004/June 07, 2004]   &lt;-- closed range
[March 01, 2004/June 08, 2004)   &lt;-- open range
</programlisting> </para></description></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.period__parser_8hpp" name="boost/date_time/period_parser.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser" name="period_parser"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="CharT"/>
    </template><purpose>Not a facet, but a class used to specify and control period parsing. </purpose><description><para>Provides settings for the following:<itemizedlist>
<listitem><para>period_separator – default '/'</para>
</listitem><listitem><para>period_open_start_delimeter – default '['</para>
</listitem><listitem><para>period_open_range_end_delimeter – default ')'</para>
</listitem><listitem><para>period_closed_range_end_delimeter – default ']'</para>
</listitem><listitem><para>display_as_open_range, display_as_closed_range – default closed_range</para>
</listitem></itemizedlist>
</para><para>For a typical date_period, the contents of the input stream would be <programlisting language="c++">[2004-Jan-04/2004-Feb-01]
</programlisting> where the date format is controlled by the date facet </para></description><enum id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a930609b6368c1687ca48adb35ab33136" name="period_range_option"><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a930609b6368c1687ca48adb35ab33136aec1156e864c0940dab2da897349da281" name="AS_OPEN_RANGE"/><enumvalue id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a930609b6368c1687ca48adb35ab33136a078d6d7b21012b0f427d1192448f2269" name="AS_CLOSED_RANGE"/></enum>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a09eaa094f4dfbf52df89e9771bb3db44" name="string_type"><type>std::basic_string&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a97616a4ad2d308a61d95f4c35e7c6392" name="char_type"><type>CharT</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a4eb61966e8da5c202ac6d22969ab8bb3" name="stream_itr_type"><type>std::istreambuf_iterator&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a076e104f985a539bbad9c0df437281e5" name="parse_tree_type"><type><classname>string_parse_tree</classname>&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1ad1215991206bf75f04464987b3cc2cb6" name="match_results"><type><classname>parse_tree_type::parse_match_result_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1adc6ab28b20c9dfb04a89107650c4d32d" name="collection_type"><type>std::vector&lt; std::basic_string&lt; CharT &gt; &gt;</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a1cb6ead27ea9a4e67a0ae2edd0ae2449" name="default_period_separator" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a7fbe355e78c51b96573c122ecbb2b8d0" name="default_period_start_delimeter" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a052da528f3e924056d0a7fe0143834ea" name="default_period_open_range_end_delimeter" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1ab20584d16dd064c98ecd7ec893a9175d" name="default_period_closed_range_end_delimeter" specifiers="static"><type>const char_type</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a9c5648a95538836f8123f676344352ae"><parameter name="range_opt"><paramtype>period_range_option</paramtype><default>AS_CLOSED_RANGE</default></parameter><parameter name="period_separator"><paramtype>const char_type *const</paramtype><default>default_period_separator</default></parameter><parameter name="period_start_delimeter"><paramtype>const char_type *const</paramtype><default>default_period_start_delimeter</default></parameter><parameter name="period_open_range_end_delimeter"><paramtype>const char_type *const</paramtype><default>default_period_open_range_end_delimeter</default></parameter><parameter name="period_closed_range_end_delimeter"><paramtype>const char_type *const</paramtype><default>default_period_closed_range_end_delimeter</default></parameter><purpose>Constructor that sets up period parser options. </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a355ed4e8b5bddb83c106ac239413c0e8" name="range_option" cv="const"><type>period_range_option</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1ae82efc98897181c1c18d44a790e52d28" name="range_option"><type>void</type><parameter name="option"><paramtype>period_range_option</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1ac6c04b0a1e0ab7be2160c18ae8cf90a5" name="delimiter_strings" cv="const"><type>collection_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a17697b80a9a356c4bf45a9dccbbe34a5" name="delimiter_strings"><type>void</type><parameter name="separator"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="start_delim"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="open_end_delim"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="closed_end_delim"><paramtype>const string_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1ac1f822028bc3d6f625b0dc788e217a0d" name="get_period" cv="const"><type>period_type</type><template>
          <template-type-parameter name="period_type"/>
          <template-type-parameter name="duration_type"/>
          <template-type-parameter name="facet_type"/>
        </template><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="a_ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name=""><paramtype>const period_type &amp;</paramtype></parameter><parameter name="dur_unit"><paramtype>const duration_type &amp;</paramtype></parameter><parameter name="facet"><paramtype>const facet_type &amp;</paramtype></parameter><purpose>Generic code to parse a period – no matter the period type. </purpose><description><para>This generic code will parse any period using a facet to to get the 'elements'. For example, in the case of a date_period the elements will be instances of a date which will be parsed according the to setup in the passed facet parameter.</para><para>The steps for parsing a period are always the same:<itemizedlist>
<listitem><para>consume the start delimiter</para>
</listitem><listitem><para>get start element</para>
</listitem><listitem><para>consume the separator</para>
</listitem><listitem><para>get either last or end element depending on range settings</para>
</listitem><listitem><para>consume the end delimeter depending on range settings</para>
</listitem></itemizedlist>
</para><para>Thus for a typical date period the contents of the input stream might look like this: <programlisting language="c++">[March 01, 2004/June 07, 2004]   &lt;-- closed range
[March 01, 2004/June 08, 2004)   &lt;-- open range
</programlisting> </para></description></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1period__parser_1a787e3be068fb5b0c9d178abb8ee2951b" name="consume_delim" cv="const"><type>void</type><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>stream_itr_type &amp;</paramtype></parameter><parameter name="delim"><paramtype>const string_type &amp;</paramtype></parameter><purpose>throws ios_base::failure if delimiter and parsed data do not match </purpose></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.special__defs_8hpp" name="boost/date_time/special_defs.hpp">
<namespace name="boost">
<namespace name="date_time">
<enum id="doxygen.date_time_reference.special__defs_8hpp_1aa887d157afe6c59f67f1dc230be55d75" name="special_values"><enumvalue id="doxygen.date_time_reference.special__defs_8hpp_1aa887d157afe6c59f67f1dc230be55d75aacfd52bbaeceb700e62ed5ebc472440e" name="not_a_date_time"/><enumvalue id="doxygen.date_time_reference.special__defs_8hpp_1aa887d157afe6c59f67f1dc230be55d75a01fdfedc4f7ec5f705e4814f1ace79ed" name="neg_infin"/><enumvalue id="doxygen.date_time_reference.special__defs_8hpp_1aa887d157afe6c59f67f1dc230be55d75a60387ea0814fb2a42b9e8755103453dc" name="pos_infin"/><enumvalue id="doxygen.date_time_reference.special__defs_8hpp_1aa887d157afe6c59f67f1dc230be55d75a33026881b4ab2f53a7e8986c5e6b4d2b" name="min_date_time"/><enumvalue id="doxygen.date_time_reference.special__defs_8hpp_1aa887d157afe6c59f67f1dc230be55d75af85a3c95a8bdd3b52e76f1a3e188f79f" name="max_date_time"/><enumvalue id="doxygen.date_time_reference.special__defs_8hpp_1aa887d157afe6c59f67f1dc230be55d75af795c5a89a298fdeaa7895c9e53081fe" name="not_special"/><enumvalue id="doxygen.date_time_reference.special__defs_8hpp_1aa887d157afe6c59f67f1dc230be55d75a34bdf451fc9c05c145e2813cfb9638e4" name="NumSpecialValues"/></enum>

































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.special__values__formatter_8hpp" name="boost/date_time/special_values_formatter.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter" name="special_values_formatter"><template>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="OutItrT"><default>std::ostreambuf_iterator&lt;CharT, std::char_traits&lt;CharT&gt; &gt;</default></template-type-parameter>
    </template><purpose>Class that provides generic formmatting ostream formatting for special values. </purpose><description><para>This class provides for the formmating of special values to an output stream. In particular, it produces strings for the values of negative and positive infinity as well as not_a_date_time. <sbr/>
</para><para>While not a facet, this class is used by the date and time facets for formatting special value types. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter_1a0e9aa1b03adda44850319d8c9b0588f5" name="string_type"><type>std::basic_string&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter_1a4f0bfc2bff1e93f38f25fe4d205e588f" name="char_type"><type>CharT</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter_1a735bcfc14bb4dc7f1fdfd3646dda5124" name="collection_type"><type>std::vector&lt; string_type &gt;</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter_1aad7ee118238a57c2b2bc86bad7438163" name="default_special_value_names" specifiers="static"><type>const char_type</type><purpose>Storage for the strings used to indicate special values. </purpose></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter_1a4c81ee7f7260d9d80b65fd179eff0921"><purpose>Construct special values formatter using default strings. </purpose><description><para>Default strings are not-a-date-time -infinity +infinity </para></description></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter_1ac579280e9fcac2596540787ae739727b"><parameter name="begin"><paramtype>const char_type *const *</paramtype></parameter><parameter name="end"><paramtype>const char_type *const *</paramtype></parameter><purpose>Construct special values formatter from array of strings. </purpose><description><para>This constructor will take pair of iterators from an array of strings that represent the special values and copy them for use in formatting special values. <sbr/>
 <programlisting language="c++">const char* const special_value_names[]={"nadt","-inf","+inf" };

special_value_formatter svf(&amp;special_value_names[0], &amp;special_value_names[3]);
</programlisting> </para></description></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter_1afa55ee8bf63c6c2150029a2f416e8c0d"><parameter name="beg"><paramtype>typename collection_type::iterator</paramtype></parameter><parameter name="end"><paramtype>typename collection_type::iterator</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__formatter_1a27756d6dccffbac8fff26e356acd9736" name="put_special" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="value"><paramtype>const boost::date_time::special_values &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.special__values__parser_8hpp" name="boost/date_time/special_values_parser.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser" name="special_values_parser"><template>
      <template-type-parameter name="date_type"/>
      <template-type-parameter name="charT"/>
    </template><purpose>Class for special_value parsing. </purpose><description><para>TODO: add doc-comments for which elements can be changed Parses input stream for strings representing special_values. Special values parsed are:<itemizedlist>
<listitem><para>not_a_date_time</para>
</listitem><listitem><para>neg_infin</para>
</listitem><listitem><para>pod_infin</para>
</listitem><listitem><para>min_date_time</para>
</listitem><listitem><para>max_date_time </para>
</listitem></itemizedlist>
</para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1ac584f114dc405b69e35052a3ab09e66e" name="string_type"><type>std::basic_string&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a910f53f02ee1557b6a88b27d07fa56a9" name="stringstream_type"><type>std::basic_stringstream&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a9b9acc3e304a29fe9cd03db4e8f892f9" name="stream_itr_type"><type>std::istreambuf_iterator&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a646bb536cc65ca7b7ebbc0d7561b98f3" name="duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a0a4286ae22ab0df787eeee25926081d8" name="parse_tree_type"><type><classname>string_parse_tree</classname>&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1ad0b742d61cfdea99324eaf2843f762ba" name="match_results"><type><classname>parse_tree_type::parse_match_result_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1ad90a88824da5985350f0da30dbb02260" name="collection_type"><type>std::vector&lt; std::basic_string&lt; charT &gt; &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1ad79f9934a57ad48a85ab8513758acb1a" name="char_type"><type>charT</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a3b8bcecd7253acfe608f07c254e330ac" name="nadt_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1acfba171c25845c28c64b1a8b7099d52c" name="neg_inf_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a0c7b730b4ca62008dbd1853baadf3df8" name="pos_inf_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a9af1ca611b5a688127d7753af9f13db0" name="min_date_time_string" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1ad63f50d6bd0f13d0634f8f73aa33ab1e" name="max_date_time_string" specifiers="static"><type>const char_type</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a1f46e46246191f33955519db63b52eb3"><purpose>Creates a <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser">special_values_parser</link> with the default set of "sv_strings". </purpose></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a145b0bb60bbcc831b04cf471c151b9ce"><parameter name="nadt_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="neg_inf_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="pos_inf_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="min_dt_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="max_dt_str"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Creates a <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser">special_values_parser</link> using a user defined set of element strings. </purpose></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a8d41e3247537373a2ccf3589987b48ce"><parameter name="beg"><paramtype>typename collection_type::iterator</paramtype></parameter><parameter name="end"><paramtype>typename collection_type::iterator</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1ac74266fe3fd5f0579e523b743684e4ee" name="sv_strings"><type>void</type><parameter name="nadt_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="neg_inf_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="pos_inf_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="min_dt_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="max_dt_str"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Replace special value strings. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a6ff661c76b6018753bfc2b69f2fd4542" name="match" cv="const"><type>bool</type><parameter name="sitr"><paramtype>stream_itr_type &amp;</paramtype><description><para>the start iterator </para></description></parameter><parameter name="str_end"><paramtype>stream_itr_type &amp;</paramtype><description><para>the end iterator </para></description></parameter><parameter name="mr"><paramtype><classname>match_results</classname> &amp;</paramtype><description><para>the match result: mr.current_match is set to the corresponding special_value or -1 </para></description></parameter><description><para>Given an input iterator, attempt to match it to a known special value 

</para></description><returns><para>whether something matched </para>
</returns></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a13e84235abdc12a450ad436837820e91" name="should_call_match" specifiers="static"><type>bool</type><parameter name="str"><paramtype>const string_type &amp;</paramtype><description><para>the string to check </para></description></parameter><description><para>The parser is expensive to create, and not thread-safe so it cannot be static therefore given a string, determine if it is likely to be a special value. A negative response is a definite no, whereas a positive is only likely and <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1special__values__parser_1a6ff661c76b6018753bfc2b69f2fd4542">match()</link> should be called and return value checked. 

</para></description><returns><para>false if it is definitely not a special value </para>
</returns></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.string__convert_8hpp" name="boost/date_time/string_convert.hpp">
<namespace name="boost">
<namespace name="date_time">











<function id="doxygen.date_time_reference.string__convert_8hpp_1af9124db466d9cd3b2d1de5a7eaf9f365" name="convert_string_type"><type>std::basic_string&lt; OutputT &gt;</type><template>
          <template-type-parameter name="InputT"/>
          <template-type-parameter name="OutputT"/>
        </template><parameter name="inp_str"><paramtype>const std::basic_string&lt; InputT &gt; &amp;</paramtype></parameter><purpose>Converts a string from one value_type to another. </purpose><description><para>Converts a wstring to a string (or a string to wstring). If both template parameters are of same type, a copy of the input string is returned. </para></description></function>





















</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.string__parse__tree_8hpp" name="boost/date_time/string_parse_tree.hpp">
<namespace name="boost">
<namespace name="date_time">
<struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result" name="parse_match_result"><template>
      <template-type-parameter name="charT"/>
    </template><enum id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1a39511d0d06a6db023e82f3063feadd76" name="PARSE_STATE"><enumvalue id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1a39511d0d06a6db023e82f3063feadd76abb3ad6536ffce411494d3069b86e3a15" name="PARSE_ERROR"><default>-1</default></enumvalue></enum>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1ac7b33c4cc12923dc81bb2daea92fff4b" name="string_type"><type>std::basic_string&lt; charT &gt;</type></typedef>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1a6e79562e9edb38e16f03c1e99323f694" name="cache"><type>string_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1a125f5d95c353246ecedb34781a103454" name="match_depth"><type>unsigned short</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1a7db1557677361b7c2d1aea5cce32bf2b" name="current_match"><type>short</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1ac0d20a72808cdc07956e141fe0b2a872"/>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1aca6ddd952a1a0ae0216a5ebe6bb5697b" name="remaining" cv="const"><type>string_type</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1af85b8ade7cc61bda602511b3fe07c563" name="last_char" cv="const"><type>charT</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result_1a3d4b5b367b18dbf8a7946ca6ca3fe755" name="has_remaining" cv="const"><type>bool</type><purpose>Returns true if more characters were parsed than was necessary. </purpose><description><para>Should be used in conjunction with last_char() to get the remaining character. </para></description></method>
</method-group>
</struct><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree" name="string_parse_tree"><template>
      <template-type-parameter name="charT"/>
    </template><purpose>Recursive data structure to allow efficient parsing of various strings. </purpose><description><para>This class provides a quick lookup by building what amounts to a tree data structure. It also features a match function which can can handle nasty input interators by caching values as it recurses the tree so that it can backtrack as needed. </para></description><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a292b763d2554312604d3fc57df4ad111" name="ptree_coll"><type>std::multimap&lt; charT, <classname>string_parse_tree</classname>&lt; charT &gt; &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a3c98309f061ada23ed40ee0a84d17831" name="ptree_coll"><type>std::multimap&lt; charT, <classname>string_parse_tree</classname> &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a46b2d3529306bcb7c7ef6accdf461093" name="value_type"><type>ptree_coll::value_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a1864847e487344d75468c63b33d403e1" name="iterator"><type>ptree_coll::iterator</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a4b619e72bd9ad19e634239a62ac38fa3" name="const_iterator"><type>ptree_coll::const_iterator</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a90a73073eedbbc80aff749a0a3b83a1d" name="string_type"><type>std::basic_string&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1ad57df33de8513a9a1bedd973a88da4a1" name="collection_type"><type>std::vector&lt; std::basic_string&lt; charT &gt; &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a257e5d44ecc8b7d97191482d353eabc5" name="parse_match_result_type"><type><classname>parse_match_result</classname>&lt; charT &gt;</type></typedef>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a4690c37d16e02fbb2d21215b983ace7b" name="m_next_chars"><type>ptree_coll</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1afcda230a4ebdf730f45909b731c9dc29" name="m_value"><type>short</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1abb9d26956a778384eceb58ad18c67682"><parameter name="names"><paramtype>collection_type</paramtype></parameter><parameter name="starting_point"><paramtype>unsigned int</paramtype><default>0</default></parameter><description><para>Parameter "starting_point" designates where the numbering begins. A starting_point of zero will start the numbering at zero (Sun=0, Mon=1, ...) were a starting_point of one starts the numbering at one (Jan=1, Feb=2, ...). The default is zero, negative vaules are not allowed </para></description></constructor>
<constructor id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1ab3111330e689b1179e7bdffe911aaf9f"><parameter name="value"><paramtype>short</paramtype><default>parse_match_result_type::PARSE_ERROR</default></parameter></constructor>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1ac363fedd2cdefe0df2c5c98b46fa6fec" name="insert"><type>void</type><parameter name="s"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="value"><paramtype>unsigned short</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a2b5d0e0d61a4a6bd329dffcc03c38a84" name="match" cv="const"><type>short</type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="result"><paramtype><classname>parse_match_result_type</classname> &amp;</paramtype></parameter><parameter name="level"><paramtype>unsigned int &amp;</paramtype></parameter><purpose>Recursive function that finds a matching string in the tree. </purpose><description><para>Must check match_results::has_remaining() after <link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a2b5d0e0d61a4a6bd329dffcc03c38a84">match()</link> is called. This is required so the user can determine if stream iterator is already pointing to the expected character or not (<link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a2b5d0e0d61a4a6bd329dffcc03c38a84">match()</link> might advance sitr to next char in stream).</para><para>A <link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result">parse_match_result</link> that has been returned from a failed match attempt can be sent in to the match function of a different <link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree">string_parse_tree</link> to attempt a match there. Use the iterators for the partially consumed stream, the <link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1parse__match__result">parse_match_result</link> object, and '0' for the level parameter. </para></description></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a78ad450e1b555210dc66f6915ca5a3a9" name="match" cv="const"><type><classname>parse_match_result_type</classname></type><parameter name="sitr"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>std::istreambuf_iterator&lt; charT &gt; &amp;</paramtype></parameter><description><para>Must check match_results::has_remaining() after <link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a2b5d0e0d61a4a6bd329dffcc03c38a84">match()</link> is called. This is required so the user can determine if stream iterator is already pointing to the expected character or not (<link linkend="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a2b5d0e0d61a4a6bd329dffcc03c38a84">match()</link> might advance sitr to next char in stream). </para></description></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1abaa974084d417abd9127b56d408755a0" name="printme"><type>void</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="level"><paramtype>int &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a354976230a53756659f2e0c810aba55d" name="print"><type>void</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1string__parse__tree_1a31ee096e8a4637b47b4f1c49f511f0ee" name="printmatch"><type>void</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="c"><paramtype>charT</paramtype></parameter></method>
</method-group>
</struct>









<function id="doxygen.date_time_reference.string__parse__tree_8hpp_1aff6669d4f6727b3ba83c447f4e3bab2f" name="operator&lt;&lt;"><type>std::basic_ostream&lt; charT &gt; &amp;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; charT &gt; &amp;</paramtype></parameter><parameter name="mr"><paramtype><classname>parse_match_result</classname>&lt; charT &gt; &amp;</paramtype></parameter></function>






















</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.strings__from__facet_8hpp" name="boost/date_time/strings_from_facet.hpp">
<namespace name="boost">
<namespace name="date_time">








<function id="doxygen.date_time_reference.strings__from__facet_8hpp_1af11986f3b1929bb14e204da5bff4f4ce" name="gather_month_strings"><type>std::vector&lt; std::basic_string&lt; charT &gt; &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="locale"><paramtype>const std::locale &amp;</paramtype><description><para>The locale to use when gathering the strings </para></description></parameter><parameter name="short_strings"><paramtype>bool</paramtype><default>true</default><description><para>True(default) to gather short strings, false for long strings. </para></description></parameter><purpose>This function gathers up all the month strings from a std::locale. </purpose><description><para>Using the time_put facet, this function creates a collection of all the month strings from a locale. This is handy when building custom date parsers or formatters that need to be localized.</para><para>

</para></description><returns><para>A vector of strings containing the strings in order. eg: Jan, Feb, Mar, etc. </para>
</returns></function>
<function id="doxygen.date_time_reference.strings__from__facet_8hpp_1a10f323caf32552830c0a0edbe5ef2b5d" name="gather_weekday_strings"><type>std::vector&lt; std::basic_string&lt; charT &gt; &gt;</type><template>
          <template-type-parameter name="charT"/>
        </template><parameter name="locale"><paramtype>const std::locale &amp;</paramtype><description><para>The locale to use when gathering the strings </para></description></parameter><parameter name="short_strings"><paramtype>bool</paramtype><default>true</default><description><para>True(default) to gather short strings, false for long strings. </para></description></parameter><purpose>This function gathers up all the weekday strings from a std::locale. </purpose><description><para>Using the time_put facet, this function creates a collection of all the weekday strings from a locale starting with the string for 'Sunday'. This is handy when building custom date parsers or formatters that need to be localized.</para><para>

</para></description><returns><para>A vector of strings containing the weekdays in order. eg: Sun, Mon, Tue, Wed, Thu, Fri, Sat </para>
</returns></function>























</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time_8hpp" name="boost/date_time/time.hpp">
<para>This file contains the interface for the time associated classes. </para><namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time" name="base_time"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="time_system"/>
    </template><inherit access="private">boost::less_than_comparable&lt; T, boost::equality_comparable&lt; T &gt; &gt;</inherit><purpose>Representation of a precise moment in time, including the date. </purpose><description><para>This class is a skeleton for the interface of a temporal type with a resolution that is higher than a day. It is intended that this class be the base class and that the actual time class be derived using the BN pattern. In this way, the derived class can make decisions such as 'should there be a default constructor' and what should it set its value to, should there be optional constructors say allowing only an time_durations that generate a time from a clock,etc. So, in fact multiple time types can be created for a time_system with different construction policies, and all of them can perform basic operations by only writing a copy constructor. Finally, compiler errors are also shorter.</para><para>The real behavior of the time class is provided by the time_system template parameter. This class must provide all the logic for addition, subtraction, as well as define all the interface types. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1ab84d51f94fc2a73467ccf78942e81704" name="_is_boost_date_time_time_point"><type>void</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a6b8a3eaaa33be3135a04ebf09938c93a" name="time_type"><type>T</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a9e3cee33cb22040d195959ae9e635c17" name="time_rep_type"><type>time_system::time_rep_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a3fea2ba8d4da0b426efee80005db6694" name="date_type"><type>time_system::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1ab9bd46b5a9703d5a847fdb5b8e51c379" name="date_duration_type"><type>time_system::date_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1aa31133e951d66a6272410fbece85c6ef" name="time_duration_type"><type>time_system::time_duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a66cca784584aed268320e88a91b118e9"><parameter name="day"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="dst"><paramtype>dst_flags</paramtype><default>not_dst</default></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1adda889367ab204323bda727d6380d134"><parameter name="sv"><paramtype>special_values</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a07029a236d1f69363c7ca55e2c06e72d"><parameter name="rhs"><paramtype>const time_rep_type &amp;</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a879639d8a8ed2ef66f43b2971f0e8e3e" name="date" cv="const"><type>BOOST_CXX14_CONSTEXPR date_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a99a47587dbe20e001dc2fe9f27676c7d" name="time_of_day" cv="const"><type>BOOST_CXX14_CONSTEXPR time_duration_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a6b342b2f10b6526ab34631ca11a954cd" name="zone_name" cv="const"><type>std::string</type><parameter name=""><paramtype>bool</paramtype><default>false</default></parameter><description><para>Optional bool parameter will return time zone as an offset (ie "+07:00"). Empty string is returned for classes that do not use a time_zone </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1afc7f11c147e7792c4438094cc5b7baa2" name="zone_abbrev" cv="const"><type>std::string</type><parameter name=""><paramtype>bool</paramtype><default>false</default></parameter><description><para>Optional bool parameter will return time zone as an offset (ie "+07:00"). Empty string is returned for classes that do not use a time_zone </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a25565a53a9e05335754a8f34c2358786" name="zone_as_posix_string" cv="const"><type>std::string</type><purpose>An empty string is returned for classes that do not use a time_zone. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1ab795e43b5d7e7f17d659f4ee1e2bee98" name="is_not_a_date_time" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>check to see if date is not a value </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a841d36bacc05e5d4c2620da7b28cd80d" name="is_infinity" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>check to see if date is one of the infinity values </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1ab1849fec68cb5415fc0c1a1bd974f95b" name="is_pos_infinity" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>check to see if date is greater than all possible dates </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a22912994927a2c68d2f6afbee216b8a5" name="is_neg_infinity" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>check to see if date is greater than all possible dates </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a89f79d7b405a98f0be280c9e34e96e7e" name="is_special" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>check to see if time is a special value </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a98bf98d83a2373ef2a87992b97b471f9" name="operator==" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const time_type &amp;</paramtype></parameter><purpose>Equality operator – others generated by boost::equality_comparable. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a49b8ee732567a483615340bf5c6b3ec5" name="operator&lt;" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const time_type &amp;</paramtype></parameter><purpose>Equality operator – others generated by boost::less_than_comparable. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1ab34dd8dd4caf43f0e951e056cde26a97" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR time_duration_type</type><parameter name="rhs"><paramtype>const time_type &amp;</paramtype></parameter><purpose>difference between two times </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1ac8a11c6f5155913a2d38201a59d4d0ad" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR time_type</type><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter><purpose>add date durations </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a13857fa4ea18c16edba9eb69edfbd988" name="operator+="><type>BOOST_CXX14_CONSTEXPR time_type</type><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a5bb5c167b2074fada1daa43c8923e68f" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR time_type</type><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter><purpose>subtract date durations </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1acafff4accd70c1070111f98cc75db50a" name="operator-="><type>BOOST_CXX14_CONSTEXPR time_type</type><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1ab41a766707c4aa040302055f14b23d52" name="operator+" cv="const"><type>BOOST_CXX14_CONSTEXPR time_type</type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>add time durations </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1af1f1f00916352286ed8508324011076a" name="operator+="><type>BOOST_CXX14_CONSTEXPR time_type</type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1a8e9eedd3cd5c4b7cda6026a26234b22d" name="operator-" cv="const"><type>BOOST_CXX14_CONSTEXPR time_type</type><parameter name="rhs"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>subtract time durations </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1base__time_1ab558780e52811a292f669f007b42d30e" name="operator-="><type>BOOST_CXX14_CONSTEXPR time_type</type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__clock_8hpp" name="boost/date_time/time_clock.hpp">
<para>This file contains the interface for clock devices. </para><namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1second__clock" name="second_clock"><template>
      <template-type-parameter name="time_type"/>
    </template><purpose>A clock providing time level services based on C time_t capabilities. </purpose><description><para>This clock provides resolution to the 1 second level </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1second__clock_1adc190affbda8355e3071569f0aedba55" name="date_type"><type>time_type::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1second__clock_1aadf79da4e0a403303cd7da0b106acc75" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1second__clock_1a2825e218c16db065618f5efd3d9d7470" name="local_time" specifiers="static"><type>time_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1second__clock_1a4ee6f8cc8bbec2b51d93e0ca9ea13f64" name="universal_time" specifiers="static"><type>time_type</type><purpose>Get the current day in universal date as a ymd_type. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1second__clock_1a4c96190500646c3ef498aaa0bf55083a" name="local_time" specifiers="static"><type>time_type</type><template>
          <template-type-parameter name="time_zone_type"/>
        </template><parameter name="tz_ptr"><paramtype>boost::shared_ptr&lt; time_zone_type &gt;</paramtype></parameter></method>
</method-group>
<method-group name="private static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1second__clock_1a96e414cf0f9d186acbd8de543af7d81b" name="create_time" specifiers="static"><type>time_type</type><parameter name="current"><paramtype>::std::tm *</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__defs_8hpp" name="boost/date_time/time_defs.hpp">
<para>This file contains nice definitions for handling the resoluion of various time reprsentations. </para><namespace name="boost">
<namespace name="date_time">
<enum id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958" name="time_resolutions"><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958a1c63ab0bf4a07ecc07bba4d6c86a1cd7" name="sec"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958aa036d339df5ee894f46766e11669b68b" name="tenth"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958a41843bc8a7d54f09c52c2d4fb3d760fe" name="hundreth"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958a3480669b6546941998189398069e55bc" name="hundredth"><default>hundreth</default></enumvalue><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958a87edc71c9647f1f9cf62f7aa1de09143" name="milli"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958a263afa602f68cf7de2601ec95a999017" name="ten_thousandth"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958a65ca5ec60a9dbad923294000fc03e1f4" name="micro"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958a8a0461d49b7031d5925abc4b389940b4" name="nano"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1a8ae63c3cad504a33d3bab9bc1beaf958a234e00e2ebffbc66eb222d6360da00cb" name="NumResolutions"/><purpose>Defines some nice types for handling time level resolutions. </purpose></enum>
<enum id="doxygen.date_time_reference.time__defs_8hpp_1aa456fef3982cc008e14e9df32c2aebc2" name="dst_flags"><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1aa456fef3982cc008e14e9df32c2aebc2ac76189ad35e9eb6585efe5f4678ce625" name="not_dst"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1aa456fef3982cc008e14e9df32c2aebc2aaec54121a17889bead3c6adc9e8b11a2" name="is_dst"/><enumvalue id="doxygen.date_time_reference.time__defs_8hpp_1aa456fef3982cc008e14e9df32c2aebc2a5457154397e6b37d1b2df027f49cac29" name="calculate"/><purpose>Flags for daylight savings or summer time. </purpose></enum>

































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__duration_8hpp" name="boost/date_time/time_duration.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1subsecond__duration" name="subsecond_duration"><template>
      <template-type-parameter name="base_duration"/>
      <template-nontype-parameter name="frac_of_second"><type>boost::int64_t</type></template-nontype-parameter>
    </template><inherit access="public">base_duration</inherit><purpose>Template for instantiating derived adjusting durations. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1subsecond__duration_1a7fe43fe351530afdf02ffe4f604b3176" name="impl_type"><type>base_duration::impl_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1subsecond__duration_1abbc97375fa5942221dfde246445fe003" name="traits_type"><type>base_duration::traits_type</type></typedef>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1subsecond__duration_1a06cc4fe7b0ba18a3f64f74f503592506" name="BOOST_STATIC_ASSERT_MSG"><type/><parameter name=""><paramtype>(traits_type::ticks_per_second &gt;=frac_of_second ? traits_type::ticks_per_second % frac_of_second :frac_of_second % traits_type::ticks_per_second)</paramtype><default>=0</default></parameter><parameter name=""><paramtype>\ "The base duration resolution must be a multiple of the subsecond duration resolution"</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1subsecond__duration_1a5ecc63b0ac0b7b916eeb3a8b85ed5d5f" name="BOOST_STATIC_CONSTANT"><type/><parameter name=""><paramtype>boost::int64_t</paramtype></parameter><parameter name=""><paramtype>adjustment_ratio</paramtype><default>(traits_type::ticks_per_second &gt;=frac_of_second ? traits_type::ticks_per_second/frac_of_second :frac_of_second/traits_type::ticks_per_second)</default></parameter></method>
</method-group>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1subsecond__duration_1a0536627f8ffd32a78147e52e453dd19e" specifiers="explicit"><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ss"><paramtype>T const &amp;</paramtype></parameter><parameter name=""><paramtype>typename boost::enable_if&lt; boost::is_integral&lt; T &gt;, void &gt;::type *</paramtype><default>BOOST_DATE_TIME_NULLPTR</default></parameter></constructor>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration" name="time_duration"><template>
      <template-type-parameter name="T"><purpose><para>The subclass type </para></purpose></template-type-parameter>
      <template-type-parameter name="rep_type"><purpose><para>The time resolution traits for this duration type. </para></purpose></template-type-parameter>
    </template><inherit access="private">boost::less_than_comparable&lt; T, boost::equality_comparable&lt; T &gt; &gt;</inherit><purpose>Represents some amount of elapsed time measure to a given resolution. </purpose><description><para>This class represents a standard set of capabilities for all counted time durations. Time duration implementations should derive from this class passing their type as the first template parameter. This design allows the subclass duration types to provide custom construction policies or other custom features not provided here.</para><para>
</para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1aebc44b6cf9d1fb4860d97e2477c96d0e" name="_is_boost_date_time_duration"><type>void</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a85e6abda106a7b7d49d96735897863da" name="duration_type"><type>T</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a1889f178a522c718498f08b9cc9419f0" name="traits_type"><type>rep_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a5af6a31ff425189cb88ead2dc9c416c4" name="day_type"><type>rep_type::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1ae06006769bf817663bd280659099e47b" name="hour_type"><type>rep_type::hour_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1aed4c3a4340bfd87628c4c9751d131d14" name="min_type"><type>rep_type::min_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a1859b8ae2bc5c4c97ca2eb97fdec8c82" name="sec_type"><type>rep_type::sec_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a6611f74f1d6d10317eb41cd8699b6cd7" name="fractional_seconds_type"><type>rep_type::fractional_seconds_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a31884512faa7c429e176ebde9080756b" name="tick_type"><type>rep_type::tick_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1aff59c7e98625e485b4db6eeb3719c61b" name="impl_type"><type>rep_type::impl_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a68943c4e386bc04b94c74e52ba663f5c"/>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a6e2d1cd3e0361016ddfd78eef5de71f3"><parameter name="hours_in"><paramtype>hour_type</paramtype></parameter><parameter name="minutes_in"><paramtype>min_type</paramtype></parameter><parameter name="seconds_in"><paramtype>sec_type</paramtype><default>0</default></parameter><parameter name="frac_sec_in"><paramtype>fractional_seconds_type</paramtype><default>0</default></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1ac64d694dd7b455d5cb46210243570098"><parameter name="sv"><paramtype>special_values</paramtype></parameter><purpose>Construct from special_values. </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a3aaa064d1471d46bf631133983db0cb6" name="hours" cv="const"><type>BOOST_CXX14_CONSTEXPR hour_type</type><purpose>Returns number of hours in the duration. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1ae90eb5b5fc5b3a8b10c97e4be614d1a8" name="minutes" cv="const"><type>BOOST_CXX14_CONSTEXPR min_type</type><purpose>Returns normalized number of minutes. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a0252ca890b58d67f2610c05f85d6f88b" name="seconds" cv="const"><type>BOOST_CXX14_CONSTEXPR sec_type</type><purpose>Returns normalized number of seconds (0..60) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a8202ef0c10d464ead6abd9029e8c58ed" name="total_seconds" cv="const"><type>BOOST_CXX14_CONSTEXPR sec_type</type><purpose>Returns total number of seconds truncating any fractional seconds. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a4b4fa3114971f5a03b73df19202c8d8c" name="total_milliseconds" cv="const"><type>BOOST_CXX14_CONSTEXPR tick_type</type><purpose>Returns total number of milliseconds truncating any fractional seconds. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a44ce8fcee4c73b2f6914319347625240" name="total_nanoseconds" cv="const"><type>BOOST_CXX14_CONSTEXPR tick_type</type><purpose>Returns total number of nanoseconds truncating any sub millisecond values. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1ae0bd9c8fa059a73f7746dfd231fb7c1b" name="total_microseconds" cv="const"><type>BOOST_CXX14_CONSTEXPR tick_type</type><purpose>Returns total number of microseconds truncating any sub microsecond values. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a4ff1cb3f9cdd84763dab0726688ee788" name="fractional_seconds" cv="const"><type>BOOST_CXX14_CONSTEXPR fractional_seconds_type</type><purpose>Returns count of fractional seconds at given resolution. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a781b49f866abe2212f56307d15923763" name="invert_sign" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a4f27762a9eb3f5a77be7d94cee1f7be6" name="abs" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a2a961f1322d5073efc71c4b3355edf4d" name="is_negative" cv="const"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a493dd77f151319d6c0bec1a46c40c240" name="is_zero" cv="const"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1ae00c5671308382622037934982c1df72" name="is_positive" cv="const"><type>BOOST_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a1c94abc7a7711701f82f8d54f5db4cfd" name="operator&lt;" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>time_duration</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1aba6fd464e57ac791f045d3c3a8383b2a" name="operator==" cv="const"><type>BOOST_CONSTEXPR bool</type><parameter name="rhs"><paramtype>const <classname>time_duration</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a1312a0443f056e6ee610ba1b2de8c314" name="operator-" cv="const"><type>BOOST_CONSTEXPR duration_type</type><purpose>unary- Allows for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration">time_duration</link> td = -td1 </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1ad7f83ed5efa3165e72a5847319cc7ab2" name="operator-" cv="const"><type>BOOST_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1ad76c8157ab8a428a20489cea70cbbb31" name="operator+" cv="const"><type>BOOST_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a5dfd791c062d3daddefc09a767636910" name="operator/" cv="const"><type>BOOST_CONSTEXPR duration_type</type><parameter name="divisor"><paramtype>int</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a357961ab24a6d272be38c3338ffdbd81" name="operator-="><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a5add9b14d8b49f84c66aa72e3861617c" name="operator+="><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="d"><paramtype>const duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1afaa56a8b311449e8ddddcbf090b7c8eb" name="operator/="><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="divisor"><paramtype>int</paramtype></parameter><purpose>Division operations on a duration with an integer. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a1b1399165690551da052028f7aa329ae" name="operator*" cv="const"><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="rhs"><paramtype>int</paramtype></parameter><purpose>Multiplication operations an a duration with an integer. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a75ec4efa111777bbe6cf30f7ade40ae8" name="operator*="><type>BOOST_CXX14_CONSTEXPR duration_type</type><parameter name="divisor"><paramtype>int</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1ab03704acbc91d04ba0b8f8c0c6ba3a67" name="ticks" cv="const"><type>BOOST_CXX14_CONSTEXPR tick_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a6c185e05c6e629f0f53f3337af1affe3" name="is_special" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>Is ticks_ a special value? </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a1a04661acb278632799d5ba53f58e6a1" name="is_pos_infinity" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>Is duration pos-infinity. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1acc9b0656b4eebe714874e3cfd898e4e9" name="is_neg_infinity" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>Is duration neg-infinity. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a55c4affe257101ff4998d16ba60e03de" name="is_not_a_date_time" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>Is duration not-a-date-time. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a26d8fe0b23bf6648904c2ea5db01ef7e" name="get_rep" cv="const"><type>BOOST_CONSTEXPR impl_type</type><purpose>Used for special_values output. </purpose></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1af43c19d22eb2ebe5e12113ce8c5ffc56" name="unit" specifiers="static"><type>BOOST_CXX14_CONSTEXPR duration_type</type><purpose>Returns smallest representable duration. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a5ca02fec82b90f63cea6d8b616e6a26e" name="ticks_per_second" specifiers="static"><type>BOOST_CXX14_CONSTEXPR tick_type</type><purpose>Return the number of ticks in a second. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a3dd46543d168cd07a847446740dc8391" name="resolution" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_resolutions</type><purpose>Provide the resolution of this duration type. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1adac10a08e49f7dff3ea6e5fa237253c1" name="num_fractional_digits" specifiers="static"><type>BOOST_CXX14_CONSTEXPR unsigned short</type><purpose>Returns number of possible digits in fractional seconds. </purpose></method>
</method-group>
<method-group name="protected member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration_1a5bda74e95a6ee9d1936beaf04c324f62" specifiers="explicit"><parameter name="in"><paramtype>impl_type</paramtype></parameter></constructor>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__facet_8hpp" name="boost/date_time/time_facet.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet" name="time_facet"><template>
      <template-type-parameter name="time_type"/>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="OutItrT"><default>std::ostreambuf_iterator&lt;CharT, std::char_traits&lt;CharT&gt; &gt;</default></template-type-parameter>
    </template><inherit access="public">boost::date_time::date_facet&lt; time_type::date_type, CharT, std::ostreambuf_iterator&lt; CharT, std::char_traits&lt; CharT &gt; &gt; &gt;</inherit><description><para>Facet used for format-based output of time types This class provides for the use of format strings to output times. In addition to the flags for formatting date elements, the following are the allowed format flags:<itemizedlist>
<listitem><para>x X =&gt; default format - enables addition of more flags to default (ie. "%x %X %z")</para>
</listitem><listitem><para>f =&gt; fractional seconds ".123456"</para>
</listitem><listitem><para>F =&gt; fractional seconds or none: like frac sec but empty if frac sec == 0</para>
</listitem><listitem><para>s =&gt; seconds w/ fractional sec "02.123" (this is the same as "%S%f)
 - %S =&gt; seconds "02"
 - %z =&gt; abbreviated time zone "EDT"
 - %Z =&gt; full time zone name "Eastern Daylight Time" </para>
</listitem></itemizedlist>
</para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1aeedad9f8252e37d333d1361c507f0f13" name="date_type"><type>time_type::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1af2eb8bd26f46ab299171a93a4d7a34ad" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a965dcebb0161c9438fea240cf755434f" name="period_type"><type><classname>boost::date_time::period</classname>&lt; time_type, time_duration_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a8c6cf02b75a36172a0c8fb01969981f3" name="base_type"><type><classname>boost::date_time::date_facet</classname>&lt; typename time_type::date_type, CharT, OutItrT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ab2cab65b71dff054bf379d20a52b11d5" name="string_type"><type>base_type::string_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1abeadb7b2db5e3094d63f9e4f980b11e8" name="char_type"><type>base_type::char_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ab197d18d0ee124f3afc5ab18b14e593a" name="period_formatter_type"><type><classname>base_type::period_formatter_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a71b118f83c11a302b8b813e3fda1b145" name="special_values_formatter_type"><type><classname>base_type::special_values_formatter_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a7fbe0aee214fd3543718106cdb618220" name="date_gen_formatter_type"><type><classname>base_type::date_gen_formatter_type</classname></type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a0a26d9537727c000190d5cc57c359161" name="fractional_seconds_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ac4a5478feb8f822353cf3eb9f2a75f02" name="fractional_seconds_or_none_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ab6ee2d4983d1beef43f4cef90418e0bd" name="seconds_with_fractional_seconds_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a07e081143bc3bed70c7f96ff13da18ba" name="seconds_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a9c6afca5e86f99a127b6ede9036721e1" name="hours_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a088aa78b5c945cdb96f7fb6b3e3b9743" name="unrestricted_hours_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ab24a39fe7f26099416c2a913856cf58c" name="standard_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a84e0583c31a10cce2bec0b939fb17165" name="zone_abbrev_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a74890e1d1e1c5756059f23bb694f8e5c" name="zone_name_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a6129ca506c51e034a08d2125165b5342" name="zone_iso_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a488c6cf41d161ca4742dfd30035be695" name="zone_iso_extended_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a063b59304d6ee23dbcf9180ba229bf86" name="posix_zone_string_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ab68cb8b8940d767c720357dc0f5fc811" name="duration_seperator" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1aadf4cee67cda179a391145054227ba34" name="duration_sign_always" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1afbfa40cc4fdddd4b155873c505688fa4" name="duration_sign_negative_only" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a932c01ee3d30671af421e0e8f46bcaaf" name="negative_sign" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a96a993c5f1c09b6a6441028d509cc7f7" name="positive_sign" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a2f49fa022530398797a8cbfbef306d47" name="iso_time_format_specifier" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a13deff5a90248b0ec23ee903ca809a6b" name="iso_time_format_extended_specifier" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ab0d213a8f38c20405e88158a905a082e" name="default_time_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a032c0c3af0637b87ae374a2867589b76" name="default_time_duration_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a75240bf3095d4f08d834d99092ccab1b" name="id" specifiers="static"><type>std::locale::id</type></data-member>
<method-group name="public member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a235ca84655479bce926ea1809fc5ade6" name="__get_id" cv="const"><type>std::locale::id &amp;</type><parameter name=""><paramtype>void</paramtype></parameter></method>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a37d202809f8d0bbda1973a697fc8a434" specifiers="explicit"><parameter name="ref_arg"><paramtype>::size_t</paramtype><default>0</default></parameter><purpose>sets default formats for ptime, local_date_time, and <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration">time_duration</link> </purpose></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a2d2f290ce8f25378859b41ce27a4b161" specifiers="explicit"><parameter name="format_arg"><paramtype>const char_type *</paramtype></parameter><parameter name="period_formatter_arg"><paramtype><classname>period_formatter_type</classname></paramtype><default>period_formatter_type()</default></parameter><parameter name="special_value_formatter"><paramtype>const <classname>special_values_formatter_type</classname> &amp;</paramtype><default>special_values_formatter_type()</default></parameter><parameter name="dg_formatter"><paramtype><classname>date_gen_formatter_type</classname></paramtype><default>date_gen_formatter_type()</default></parameter><parameter name="ref_arg"><paramtype>::size_t</paramtype><default>0</default></parameter><purpose>Construct the facet with an explicitly specified format. </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a8066721e167001fc37de0d31766dcdb1" name="time_duration_format"><type>void</type><parameter name="format"><paramtype>const char_type *const</paramtype></parameter><purpose>Changes format for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration">time_duration</link>. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ab22389025792c71090a5a603f38c6caf" name="set_iso_format" specifiers="virtual"><type>void</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ab10810727587960cfd8fe438f5f50ca3" name="set_iso_extended_format" specifiers="virtual"><type>void</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a2ec688021a22a5391c9ead702a33d639" name="put" cv="const"><type>OutItrT</type><parameter name="next_arg"><paramtype>OutItrT</paramtype></parameter><parameter name="ios_arg"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_arg"><paramtype>char_type</paramtype></parameter><parameter name="time_arg"><paramtype>const time_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a68c00dae86d4984eb8a729773a647ba8" name="put" cv="const"><type>OutItrT</type><parameter name="next_arg"><paramtype>OutItrT</paramtype></parameter><parameter name="ios_arg"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill_arg"><paramtype>char_type</paramtype></parameter><parameter name="time_dur_arg"><paramtype>const time_duration_type &amp;</paramtype></parameter><purpose>put function for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration">time_duration</link> </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a6460a01b4f6a932bb93767deaa32730a" name="put" cv="const"><type>OutItrT</type><parameter name="next"><paramtype>OutItrT</paramtype></parameter><parameter name="ios_arg"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="fill"><paramtype>char_type</paramtype></parameter><parameter name="p"><paramtype>const <classname>period_type</classname> &amp;</paramtype></parameter></method>
</method-group>
<method-group name="protected static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1a5839ad72b828ed331742e422153cb64d" name="fractional_seconds_as_string" specifiers="static"><type>string_type</type><parameter name="time_arg"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="null_when_zero"><paramtype>bool</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1aab64e988a74b781e8b5ec72c70f233cd" name="hours_as_string" specifiers="static"><type>string_type</type><parameter name="time_arg"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="width"><paramtype>int</paramtype><default>2</default></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__facet_1ac5d8e906e668de57144cdc5811cae56c" name="integral_as_string" specifiers="static"><type>string_type</type><template>
          <template-type-parameter name="IntT"/>
        </template><parameter name="val"><paramtype>IntT</paramtype></parameter><parameter name="width"><paramtype>int</paramtype><default>2</default></parameter></method>
</method-group>
</class><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats" name="time_formats"><template>
      <template-type-parameter name="CharT"/>
    </template><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1af7589f47172bdfda0a28f93fa1317870" name="char_type"><type>CharT</type></typedef>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a2534c6c8ed5278f2763e6a05c432a681" name="fractional_seconds_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a1e9336b98aafead1440114219a344d61" name="fractional_seconds_or_none_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a1e9d760268b26f583c9d139d90ed48f7" name="seconds_with_fractional_seconds_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a2ac988a0a3048af90b707fd8cd87eb1e" name="seconds_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1aecead345c90644faede0c1107ccddf97" name="hours_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1adf0bf84ee6a65453186de77c55606329" name="unrestricted_hours_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a055b753665cc4d565a8c63aeec4598e7" name="full_24_hour_time_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1af96231a6f8eebac57719af4f88f6d1a7" name="full_24_hour_time_expanded_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a6ee9792c957d092590c436d545ee58d7" name="short_24_hour_time_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1ab5d3a310f0af5b7256c82e0f751670df" name="short_24_hour_time_expanded_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a1c80d6668ef004316bcb189c93ef243b" name="standard_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a9cb690fb3734d99fa1587a663aca3552" name="zone_abbrev_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a97b06597f13a4ea797a709a71be83bbc" name="zone_name_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1ac8809b9b3590124d1ee0db8e8a3d4601" name="zone_iso_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a6d4211a679f2316ff11e832e85bd4a0f" name="zone_iso_extended_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1ad52b7fb1c18bf59c2551c887b620fb92" name="posix_zone_string_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a17a579f65da457e06121827725d57158" name="duration_sign_negative_only" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a3192340be410bce967f38b4b0374d318" name="duration_sign_always" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1ad2850bb24f9dd3b78a452cdadd0f491e" name="duration_seperator" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1aa975c539c72695d48987614ecae7e6d1" name="negative_sign" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1ab3551c84388932321afd90f3be46d7ce" name="positive_sign" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1ab7ae55aab5c341d1d84588cd9b682940" name="iso_time_format_specifier" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a1dffef5813163bbde2f1cc700f2a8298" name="iso_time_format_extended_specifier" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a42d6e4c54af007ad5a84f6c0d86e28eb" name="default_time_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a3a4f3b5d5c43bcffe57d293718bbf8b8" name="default_time_input_format" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__formats_1a1aecac851272cceed3d9572b4bb633ac" name="default_time_duration_format" specifiers="static"><type>const char_type</type></data-member>
</struct><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet" name="time_input_facet"><template>
      <template-type-parameter name="time_type"/>
      <template-type-parameter name="CharT"/>
      <template-type-parameter name="InItrT"><default>std::istreambuf_iterator&lt;CharT, std::char_traits&lt;CharT&gt; &gt;</default></template-type-parameter>
    </template><inherit access="public">boost::date_time::date_input_facet&lt; time_type::date_type, CharT, std::istreambuf_iterator&lt; CharT, std::char_traits&lt; CharT &gt; &gt; &gt;</inherit><purpose>Facet for format-based input. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a6d1037976c3f17d3d1783e0309861947" name="date_type"><type>time_type::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1af47e9026e43a058d4a004e3b502873c3" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a233c3b4fbef636194ac50b87dc0e5956" name="fracional_seconds_type"><type>time_duration_type::fractional_seconds_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a72f9d094c7712e78f5fcc086fe33fad0" name="period_type"><type><classname>boost::date_time::period</classname>&lt; time_type, time_duration_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a33ba0789452c2a9825a304d582c88d4b" name="base_type"><type><classname>boost::date_time::date_input_facet</classname>&lt; typename time_type::date_type, CharT, InItrT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a8b3b479264344109e7e2b13e6a9c9f6f" name="date_duration_type"><type>base_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a3e272d6fe566de89bbe9563c24ddd546" name="year_type"><type>base_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a9af5dd750f2df352086c725b1310d37d" name="month_type"><type>base_type::month_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a26b0cd116190dd78d6d81af5c9f9db0b" name="day_type"><type>base_type::day_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1af86270c537f9643d04ecabe9fd69c03d" name="string_type"><type>base_type::string_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a1ae54812289c8af95480ecbfca217440" name="const_itr"><type>string_type::const_iterator</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a0695677aff740acc5061023448a8f935" name="char_type"><type>base_type::char_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a62427789e701ede0c68d9826e59aec8a" name="format_date_parser_type"><type><classname>base_type::format_date_parser_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a0449ca0b330f8aa34c4b388a824941e6" name="period_parser_type"><type><classname>base_type::period_parser_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a7f5b2a6bd7f3ff0243b5d6280ae040f5" name="special_values_parser_type"><type><classname>base_type::special_values_parser_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1ac4b10f3c43571f90747152b374b27382" name="date_gen_parser_type"><type><classname>base_type::date_gen_parser_type</classname></type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a6b2122d87935037a5edf018b9ba7e57e" name="match_results"><type>base_type::special_values_parser_type::match_results</type></typedef>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a1cf2aa821afa76ac9fc72cbd308e359f" name="fractional_seconds_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a1105b89c67d2f4d400a89fe264be087a" name="fractional_seconds_or_none_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a32fca339c8dddda87d6ade5c13d64833" name="seconds_with_fractional_seconds_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a75ed1a2efb5a2118cd7a9dadbea807a4" name="seconds_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a8409b5f9299aedd42cd54879cb50805a" name="standard_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a22471d07cfde5166423207185a6bff1f" name="zone_abbrev_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a54c7f6c83fa6c09d29b54ba22b84bde6" name="zone_name_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a2784613f8177a1dacecf77f74be143ef" name="zone_iso_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1ad5e69fd72ae7da8abbdff53774d087b6" name="zone_iso_extended_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a609b696965788ffe526f936e6b3fff61" name="duration_seperator" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a7591ea158054ea501e0d838f765bc4de" name="iso_time_format_specifier" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1ae15e37a6f91e4c2d3f8e9cfe9c2aab25" name="iso_time_format_extended_specifier" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a21275e500648aad870fbe6f47f526881" name="default_time_input_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a4e23db5e8a756bad4f8a4ffc58d5700e" name="default_time_duration_format" specifiers="static"><type>const char_type *</type></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a77b543194bf43bdd2728efddc85c3a40" name="id" specifiers="static"><type>std::locale::id</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a865b7f77c1de1d0649bc1bada1e27a26" specifiers="explicit"><parameter name="format"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="ref_arg"><paramtype>::size_t</paramtype><default>0</default></parameter><purpose>Constructor that takes a format string for a ptime. </purpose></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a71d55f632e80518ee198bcad9068843f" specifiers="explicit"><parameter name="format"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="date_parser"><paramtype>const <classname>format_date_parser_type</classname> &amp;</paramtype></parameter><parameter name="sv_parser"><paramtype>const <classname>special_values_parser_type</classname> &amp;</paramtype></parameter><parameter name="per_parser"><paramtype>const <classname>period_parser_type</classname> &amp;</paramtype></parameter><parameter name="date_gen_parser"><paramtype>const <classname>date_gen_parser_type</classname> &amp;</paramtype></parameter><parameter name="ref_arg"><paramtype>::size_t</paramtype><default>0</default></parameter></constructor>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1abff3866f118deb6829aaa1761135670d" specifiers="explicit"><parameter name="ref_arg"><paramtype>::size_t</paramtype><default>0</default></parameter><purpose>sets default formats for ptime, local_date_time, and <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration">time_duration</link> </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a1dddfde17f79ac233f91e9c27024c75a" name="time_duration_format"><type>void</type><parameter name="format"><paramtype>const char_type *const</paramtype></parameter><purpose>Set the format for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration">time_duration</link>. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1adc98f482e70c76d319dfbae3b14d9e2b" name="set_iso_format" specifiers="virtual"><type>void</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a4a9f67a42a29262e5a6283e2fd5c7136" name="set_iso_extended_format" specifiers="virtual"><type>void</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1af9dbe4ccfb351b962a0fbb7fe4799cd2" name="get" cv="const"><type>InItrT</type><parameter name="sitr"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="ios_arg"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="p"><paramtype><classname>period_type</classname> &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a1c81e103f25f8b6540e7beef181ee86c" name="get" cv="const"><type>InItrT</type><parameter name="sitr"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="ios_arg"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="td"><paramtype>time_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a2a197135e5b27672dc2ba2b127e65602" name="get" cv="const"><type>InItrT</type><parameter name="sitr"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="ios_arg"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><purpose>Parses a time object from the input stream. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a012baefcc729ac21ed9f6d4a516cedcd" name="get_local_time" cv="const"><type>InItrT</type><parameter name="sitr"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="ios_arg"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="tz_str"><paramtype>string_type &amp;</paramtype></parameter><purpose>Expects a time_zone in the input stream. </purpose></method>
</method-group>
<method-group name="protected member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1aa08c9700d59c2c4db57cc7d70e1ce9e7" name="get" cv="const"><type>InItrT</type><parameter name="sitr"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="ios_arg"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="t"><paramtype>time_type &amp;</paramtype></parameter><parameter name="tz_str"><paramtype>string_type &amp;</paramtype></parameter><parameter name="time_is_local"><paramtype>bool</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a10347d85eef46f7d3bfc1ccb21b7b649" name="check_special_value" cv="const"><type>InItrT</type><template>
          <template-type-parameter name="temporal_type"/>
        </template><parameter name="sitr"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="tt"><paramtype>temporal_type &amp;</paramtype></parameter><parameter name="c"><paramtype>char_type</paramtype><default>'\0'</default></parameter><purpose>Helper function to check for special_value. </purpose><description><para>First character may have been consumed during original parse attempt. Parameter 'c' should be a copy of that character. Throws ios_base::failure if parse fails. </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1a505fb32063782940f0739d1994f4dd80" name="parse_frac_type" cv="const"><type>void</type><parameter name="sitr"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="stream_end"><paramtype>InItrT &amp;</paramtype></parameter><parameter name="frac"><paramtype>fracional_seconds_type &amp;</paramtype></parameter><purpose>Helper function for parsing a fractional second type from the stream. </purpose></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__input__facet_1acad0918f374bc149e8568112cd3b406d" name="decimal_adjust" cv="const"><type>int_type</type><template>
          <template-type-parameter name="int_type"/>
        </template><parameter name="val"><paramtype>int_type</paramtype></parameter><parameter name="places"><paramtype>const unsigned short</paramtype></parameter><purpose>Helper function to adjust trailing zeros when parsing fractional digits. </purpose></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__formatting__streams_8hpp" name="boost/date_time/time_formatting_streams.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__duration__formatter" name="ostream_time_duration_formatter"><template>
      <template-type-parameter name="time_duration_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Put a time type into a stream using appropriate facets. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__duration__formatter_1a49571cf64a80d89e0fc44a3d872094a9" name="ostream_type"><type>std::basic_ostream&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__duration__formatter_1aecb30f6aab146caa85cd93eb19070939" name="fractional_seconds_type"><type>time_duration_type::fractional_seconds_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__duration__formatter_1a17815358c086a51b00c777e7aaf20f8e" name="duration_put" specifiers="static"><type>void</type><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><purpose>Put time into an ostream. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__formatter" name="ostream_time_formatter"><template>
      <template-type-parameter name="time_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Put a time type into a stream using appropriate facets. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__formatter_1a6865363c99d0ce69a55bbb9bedb09404" name="ostream_type"><type>std::basic_ostream&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__formatter_1a1d7b017f3726a47f2dddb4962f7d1e2b" name="date_type"><type>time_type::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__formatter_1a0c00180bb524040b862635e61169ee79" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__formatter_1a8304e1a6adb65f2e7eed6c9294b7e4f1" name="duration_formatter"><type><classname>ostream_time_duration_formatter</classname>&lt; time_duration_type, charT &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__formatter_1a8b90324595a6280b27f0f449dd7d2269" name="time_put" specifiers="static"><type>void</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><purpose>Put time into an ostream. </purpose></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__period__formatter" name="ostream_time_period_formatter"><template>
      <template-type-parameter name="time_period_type"/>
      <template-type-parameter name="charT"><default>char</default></template-type-parameter>
    </template><purpose>Put a time period into a stream using appropriate facets. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__period__formatter_1a470bb56d26598d13bed6f724cb81e162" name="ostream_type"><type>std::basic_ostream&lt; charT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__period__formatter_1a45b4ce4b5a1964d11bf41c18df7b672f" name="time_type"><type>time_period_type::point_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__period__formatter_1a500cc0308c6a363b0beeabbb54786039" name="time_formatter"><type><classname>ostream_time_formatter</classname>&lt; time_type, charT &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1ostream__time__period__formatter_1a5df1b179e8fca9fb8085470fbbe89624" name="period_put" specifiers="static"><type>void</type><parameter name="tp"><paramtype>const time_period_type &amp;</paramtype></parameter><parameter name="os"><paramtype>ostream_type &amp;</paramtype></parameter><purpose>Put time into an ostream. </purpose></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__iterator_8hpp" name="boost/date_time/time_iterator.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr" name="time_itr"><template>
      <template-type-parameter name="time_type"/>
    </template><purpose>Simple time iterator skeleton class. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a3b2631de47ef53232534edeca623c23d" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1ad6daf9118561fcc6a6153381c2668c82"><parameter name="t"><paramtype>time_type</paramtype></parameter><parameter name="d"><paramtype>time_duration_type</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a12af363446addedf2d7acd62a3c9b3a0" name="operator++"><type><classname>time_itr</classname> &amp;</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a09fb2f53a9e32b4085a35b018b0632af" name="operator--"><type><classname>time_itr</classname> &amp;</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a4f383a90d2ca26da3dfe91d5ef711660" name="operator*" cv="const"><type>const time_type &amp;</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a17302696012cdbd0e9e14474e53b4ea4" name="operator-&gt;" cv="const"><type>const time_type *</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a0acf64f238de6c17343410d802449c64" name="operator&lt;" cv="const"><type>bool</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a136102ad5fc79350b8cbdb824ec55334" name="operator&lt;=" cv="const"><type>bool</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a3007102519fb4676ce3f9e4fcacce396" name="operator!=" cv="const"><type>bool</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a9d2210d50c76211a0ba665fac65c9f20" name="operator==" cv="const"><type>bool</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a670338a0c2d0a2640305ca70a6e3660c" name="operator&gt;" cv="const"><type>bool</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__itr_1a34f5e2d64b272ba61b2472dfb1aa05ba" name="operator&gt;=" cv="const"><type>bool</type><parameter name="t"><paramtype>const time_type &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__parsing_8hpp" name="boost/date_time/time_parsing.hpp">
<namespace name="boost">
<namespace name="date_time">

<function id="doxygen.date_time_reference.time__parsing_8hpp_1af818e95494b736b75e6f543cd0f22e9c" name="power"><type>int_type</type><template>
          <template-type-parameter name="int_type"/>
        </template><parameter name="base"><paramtype>int_type</paramtype></parameter><parameter name="exponent"><paramtype>int_type</paramtype></parameter><purpose>computes exponential math like 2^8 =&gt; 256, only works with positive integers </purpose></function>
<function id="doxygen.date_time_reference.time__parsing_8hpp_1ac08963bf921f47766dbc0f37c7d4930e" name="str_from_delimited_time_duration"><type><classname>time_duration</classname></type><template>
          <template-type-parameter name="time_duration"/>
          <template-type-parameter name="char_type"/>
        </template><parameter name="s"><paramtype>const std::basic_string&lt; char_type &gt; &amp;</paramtype></parameter><purpose>Creates a <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration">time_duration</link> object from a delimited string. </purpose><description><para>Expected format for string is "[-]h[h][:mm][:ss][.fff]". If the number of fractional digits provided is greater than the precision of the time duration type then the extra digits are truncated.</para><para>A negative duration will be created if the first character in string is a '-', all other '-' will be treated as delimiters. Accepted delimiters are "-:,.". </para></description></function>
<function id="doxygen.date_time_reference.time__parsing_8hpp_1a4b80765c4cbaa0b87e136c9953354697" name="parse_delimited_time_duration"><type><classname>time_duration</classname></type><template>
          <template-type-parameter name="time_duration"/>
        </template><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Creates a <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__duration">time_duration</link> object from a delimited string. </purpose><description><para>Expected format for string is "[-]h[h][:mm][:ss][.fff]". If the number of fractional digits provided is greater than the precision of the time duration type then the extra digits are truncated.</para><para>A negative duration will be created if the first character in string is a '-', all other '-' will be treated as delimiters. Accepted delimiters are "-:,.". </para></description></function>
<function id="doxygen.date_time_reference.time__parsing_8hpp_1abb1c045f6c514d8fa2ef0047eff24825" name="split"><type>bool</type><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="sep"><paramtype>char</paramtype></parameter><parameter name="first"><paramtype>std::string &amp;</paramtype></parameter><parameter name="second"><paramtype>std::string &amp;</paramtype></parameter><purpose>Utility function to split appart string. </purpose></function>
<function id="doxygen.date_time_reference.time__parsing_8hpp_1abb5dcc500b13cae1d40b6476c09cdb37" name="parse_delimited_time"><type>time_type</type><template>
          <template-type-parameter name="time_type"/>
        </template><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="sep"><paramtype>char</paramtype></parameter></function>
<function id="doxygen.date_time_reference.time__parsing_8hpp_1a1d87b0145ca8d2205c4af27abc1b6c8b" name="parse_undelimited_time_duration"><type><classname>time_duration</classname></type><template>
          <template-type-parameter name="time_duration"/>
        </template><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Parse time duration part of an ISO 8601 time of form: [-]hhmmss[.fff...] (eg: 120259.123 is 12 hours, 2 min, 59 seconds, 123000 microseconds) </purpose></function>
<function id="doxygen.date_time_reference.time__parsing_8hpp_1a8ae4b74407942fa1195ee65935c29025" name="parse_iso_time"><type>time_type</type><template>
          <template-type-parameter name="time_type"/>
        </template><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter><parameter name="sep"><paramtype>char</paramtype></parameter><purpose>Parse time string of form YYYYMMDDThhmmss where T is delimeter between date and time. </purpose></function>

























</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__resolution__traits_8hpp" name="boost/date_time/time_resolution_traits.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits" name="time_resolution_traits"><template>
      <template-type-parameter name="frac_sec_type"/>
      <template-nontype-parameter name="res"><type>time_resolutions</type></template-nontype-parameter>
      <template-nontype-parameter name="resolution_adjust"><type>#if(defined(BOOST_MSVC) &amp;&amp;(_MSC_VER&lt; 1300)) boost::int64_t</type></template-nontype-parameter>
      <template-nontype-parameter name="resolution_adjust"><type>#else typename frac_sec_type::int_type</type></template-nontype-parameter>
      <template-nontype-parameter name="frac_digits"><type>#endif unsigned short</type></template-nontype-parameter>
      <template-type-parameter name="var_type"><default>boost::int64_t</default></template-type-parameter>
    </template><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1ad09581790830dd6e99cc6efc6223a9c6" name="fractional_seconds_type"><type>frac_sec_type::int_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a9303ab535f83de7489139ba029bb399e" name="tick_type"><type>frac_sec_type::int_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a4c83841189b25c7ad8b49603d3a7d4ac" name="impl_type"><type>frac_sec_type::impl_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1ac9a6b9f1693c8346b6f2f1bb1c9f644f" name="day_type"><type>var_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a88433965aa090f6cb525a671c2bbd466" name="hour_type"><type>var_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1ac04480feff153ae52839e72f11f8a03f" name="min_type"><type>var_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1ad9bd1974f0f87d48aae18e9c436d71b3" name="sec_type"><type>var_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a2c965a48ab92da0d3fc891be5e591e30" name="as_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR fractional_seconds_type</type><parameter name="i"><paramtype>impl_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a99a73fdecbbb67c60c8c977a720fd124" name="is_adapted" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a03da0e7dd4eec62ef48f843f5fa6feaf" name="resolution" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_resolutions</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a6ab717a7a8d50eeabea79cc68abd31ac" name="num_fractional_digits" specifiers="static"><type>BOOST_CXX14_CONSTEXPR unsigned short</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a5e68b36cfa4d677fc158fe92ec5b9b57" name="res_adjust" specifiers="static"><type>BOOST_CXX14_CONSTEXPR fractional_seconds_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1aa9be1ad4b77ada64629d0cb6a7654522" name="to_tick_count" specifiers="static"><type>BOOST_CXX14_CONSTEXPR tick_type</type><parameter name="hours"><paramtype>hour_type</paramtype></parameter><parameter name="minutes"><paramtype>min_type</paramtype></parameter><parameter name="seconds"><paramtype>sec_type</paramtype></parameter><parameter name="fs"><paramtype>fractional_seconds_type</paramtype></parameter><purpose>Any negative argument results in a negative tick_count. </purpose></method>
</method-group>
<method-group name="public member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a6191fad6e8058e354e343433ae539ec1" name="BOOST_STATIC_CONSTANT"><type/><parameter name=""><paramtype>boost::int64_t</paramtype></parameter><parameter name=""><paramtype>ticks_per_second</paramtype><default>resolution_adjust</default></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits_1a50144846e801ff94bda4c5d7b6421bc2" name="BOOST_STATIC_CONSTANT"><type/><parameter name=""><paramtype>fractional_seconds_type</paramtype></parameter><parameter name=""><paramtype>ticks_per_second</paramtype><default>resolution_adjust</default></parameter></method>
</method-group>
</class><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted32__impl" name="time_resolution_traits_adapted32_impl"><purpose>traits struct for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits">time_resolution_traits</link> implementation type </purpose><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted32__impl_1aa6eb0c0826653437d54bb0a83832a386" name="int_type"><type>boost::int32_t</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted32__impl_1a94fd77a31df3b1480c5c46923f0bba44" name="impl_type"><type><classname>boost::date_time::int_adapter</classname>&lt; boost::int32_t &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted32__impl_1af2b8dfa5822bfe6cca6e09423b5e784c" name="as_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR int_type</type><parameter name="i"><paramtype><classname>impl_type</classname></paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted32__impl_1a431c142f73baa608e4614bf059e7db22" name="is_adapted" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>Used to determine if implemented type is <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link> or int. </purpose></method>
</method-group>
</struct><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted64__impl" name="time_resolution_traits_adapted64_impl"><purpose>traits struct for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits">time_resolution_traits</link> implementation type </purpose><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted64__impl_1a650b65301020db4804da9244b48497df" name="int_type"><type>boost::int64_t</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted64__impl_1a332dc9fc10f5364cc08062f578b2d88d" name="impl_type"><type><classname>boost::date_time::int_adapter</classname>&lt; boost::int64_t &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted64__impl_1a6248193be2224fc8b76768c10abbb3a3" name="as_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR int_type</type><parameter name="i"><paramtype><classname>impl_type</classname></paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__adapted64__impl_1ae048e384550efa35a7f562e5ecdc3fd4" name="is_adapted" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>Used to determine if implemented type is <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link> or int. </purpose></method>
</method-group>
</struct><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi32__impl" name="time_resolution_traits_bi32_impl"><purpose>traits struct for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits">time_resolution_traits</link> implementation type </purpose><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi32__impl_1afd5e27d5dc24b30bdf50f1582c6fb738" name="int_type"><type>boost::int32_t</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi32__impl_1a0e9801e3aff11306361a2d0f73946d79" name="impl_type"><type>boost::int32_t</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi32__impl_1ac6cc9cbb98704f512cf96f4fec2bd7e0" name="as_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR int_type</type><parameter name="i"><paramtype>impl_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi32__impl_1a1999d25fad4ab229aa1c3d5e19f3840b" name="is_adapted" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>Used to determine if implemented type is <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link> or int. </purpose></method>
</method-group>
</struct><struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi64__impl" name="time_resolution_traits_bi64_impl"><purpose>traits struct for <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1time__resolution__traits">time_resolution_traits</link> implementation type </purpose><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi64__impl_1aaf1cc26b8ba4998beb05ce092c21e1ee" name="int_type"><type>boost::int64_t</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi64__impl_1a2b377e1e748465936c49be612bd9b6bb" name="impl_type"><type>boost::int64_t</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi64__impl_1abffe07039c7ed76263a18bd4a8392f06" name="as_number" specifiers="static"><type>BOOST_CXX14_CONSTEXPR int_type</type><parameter name="i"><paramtype>impl_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1time__resolution__traits__bi64__impl_1a0aa6070bdb21e743efe825970db95cda" name="is_adapted" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><purpose>Used to determine if implemented type is <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1int__adapter">int_adapter</link> or int. </purpose></method>
</method-group>
</struct><typedef id="doxygen.date_time_reference.time__resolution__traits_8hpp_1ae6ef5c6cbaeed5fa7225466c88fe1181" name="milli_res"><type><classname>time_resolution_traits</classname>&lt; <classname>time_resolution_traits_adapted32_impl</classname>, milli, 1000, 3 &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.time__resolution__traits_8hpp_1a37081aff3ae1b77add7ea5dd039d0156" name="micro_res"><type><classname>time_resolution_traits</classname>&lt; <classname>time_resolution_traits_adapted64_impl</classname>, micro, 1000000, 6 &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.time__resolution__traits_8hpp_1a7bded8ed91591446905ac2b407aedc6a" name="nano_res"><type><classname>time_resolution_traits</classname>&lt; <classname>time_resolution_traits_adapted64_impl</classname>, nano, 1000000000, 9 &gt;</type></typedef>
<function id="doxygen.date_time_reference.time__resolution__traits_8hpp_1adb910e3374a5f5675933c7623f5c7339" name="absolute_value"><type>BOOST_CXX14_CONSTEXPR T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="x"><paramtype>T</paramtype></parameter><purpose>Simple function to calculate absolute value of a numeric type. </purpose></function>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__system__counted_8hpp" name="boost/date_time/time_system_counted.hpp">
<namespace name="boost">
<namespace name="date_time">
<struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep" name="counted_time_rep"><template>
      <template-type-parameter name="config"/>
    </template><purpose>Time representation that uses a single integer count. </purpose><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1aab3441c2da74a13d6e8503fd3ea7da5e" name="int_type"><type>config::int_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1af747fb929c25d14382566e4ddfaee56e" name="date_type"><type>config::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1ac517b855b6c9f3a27be962c5c39d1899" name="impl_type"><type>config::impl_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1acfb0a8dd946bd313cb3b1b5f48f3053d" name="date_duration_type"><type>date_type::duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a5c288deeddce2b1b3017f3a59185caee" name="calendar_type"><type>date_type::calendar_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a6d8e8252c532c1418231ade3fa4158f2" name="ymd_type"><type>date_type::ymd_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a2ea3eb25dd1e6ce5fe21505b92751542" name="time_duration_type"><type>config::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1afa6289b2af9c8848fae21b1ff2843f01" name="resolution_traits"><type>config::resolution_traits</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a1d29f25a2905922531ef12bb9345b565"><parameter name="d"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="time_of_day"><paramtype>const time_duration_type &amp;</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a0e033218071e28313132287a1050b5fd" specifiers="explicit"><parameter name="count"><paramtype>int_type</paramtype></parameter></constructor>
<constructor id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a12b6ef2c6847399f56abacc27ecfdf30" specifiers="explicit"><parameter name="count"><paramtype>impl_type</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1aea4ed3b0f0b23690a4c0441686ec292a" name="date" cv="const"><type>BOOST_CXX14_CONSTEXPR date_type</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a7951ee4bfd1d1fc50d082eebfdd395ef" name="day_count" cv="const"><type>BOOST_CXX14_CONSTEXPR unsigned long</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1ae5717d575f9c9cf0f762dbda40f564ff" name="time_count" cv="const"><type>BOOST_CXX14_CONSTEXPR int_type</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a5f1b303b330dd1e6835faf0b9015797e" name="tod" cv="const"><type>BOOST_CXX14_CONSTEXPR int_type</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1ac3d6b6c28ac99f2b94acfdf2dc30ac2c" name="is_pos_infinity" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1af8fda3860006626e408c8cd00cf93dc5" name="is_neg_infinity" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a7bf579a308568764f5ea42e05f07e7da" name="is_not_a_date_time" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a4c62bcfce5a91f86aee55ec6ada0e624" name="is_special" cv="const"><type>BOOST_CXX14_CONSTEXPR bool</type></method>
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1a6bf2e96fc0b6c306c43040aac05f9d0f" name="get_rep" cv="const"><type>BOOST_CXX14_CONSTEXPR impl_type</type></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.structboost_1_1date__time_1_1counted__time__rep_1afd5f847150615b1e50a5bc6ba33c3ffe" name="frac_sec_per_day" specifiers="static"><type>BOOST_CXX14_CONSTEXPR int_type</type></method>
</method-group>
</struct><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system" name="counted_time_system"><template>
      <template-type-parameter name="time_rep"/>
    </template><purpose>An unadjusted time system implementation. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a6b57e5135906bbe329ce59d872833fb4" name="time_rep_type"><type>time_rep</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1ab3ca297ff273d32d33763ea88d98a174" name="impl_type"><type>time_rep_type::impl_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a7a858cb91d870abb4e14cad01c0a1b81" name="time_duration_type"><type>time_rep_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a4fc6d15e6a7a6aaad5f3b8f7c9dd3c0c" name="fractional_seconds_type"><type>time_duration_type::fractional_seconds_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1aaeaf0dd1319846bb9f6195e92d9daf4f" name="date_type"><type>time_rep_type::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a0a43ba8dcc2d12c62f9a5b0aaf7bef49" name="date_duration_type"><type>time_rep_type::date_duration_type</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1ac657c20927bc103bb31a4306cfab56a0" name="unused_var" specifiers="static"><type>BOOST_CXX14_CONSTEXPR void</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>const T &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a0801aa2648832a15056f09232b5a22dd" name="get_time_rep" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="day"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="tod"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="dst"><paramtype>date_time::dst_flags</paramtype><default>not_dst</default></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1ab69c17f97aa8e041d088bb33f86fbeab" name="get_time_rep" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="sv"><paramtype>special_values</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1acad7559cd2c83e0312f64fbf0408653e" name="get_date" specifiers="static"><type>BOOST_CXX14_CONSTEXPR date_type</type><parameter name="val"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a839589d88449c5532372f975a681d78b" name="get_time_of_day" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_duration_type</type><parameter name="val"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1ab34e1f8f0aeaec0ce6f9d96b9f2c4c7f" name="zone_name" specifiers="static"><type>std::string</type><parameter name=""><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a3a6fc96918c6542a376d4340834ab046" name="is_equal" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="lhs"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1ad001bc242bb4a8df0fb57e29011195fb" name="is_less" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="lhs"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a654a87ae159cbd0ff2a73488f2ebccea" name="add_days" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="base"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1aa1bcff55e7099a50d76950f406c52299" name="subtract_days" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="base"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a2e4bdcee2e62d302510d254cbcaaee03" name="subtract_time_duration" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="base"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1ad5f1db5be8e705c9404ed4e0c457839b" name="add_time_duration" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="base"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="td"><paramtype>time_duration_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1counted__time__system_1a5054d9272c6bbe1bbb1e4946c159a598" name="subtract_times" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_duration_type</type><parameter name="lhs"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__system__split_8hpp" name="boost/date_time/time_system_split.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system" name="split_timedate_system"><template>
      <template-type-parameter name="config"/>
      <template-nontype-parameter name="ticks_per_second"><type>boost::int32_t</type></template-nontype-parameter>
    </template><purpose>An unadjusted time system implementation. </purpose><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1ae72e1e53ff692d0b1ecd0e70d72b93be" name="time_rep_type"><type>config::time_rep_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a101285729337a6667b1e9617790eaca3" name="date_type"><type>config::date_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a29d0fb9f85f4a43cc98cc867b6f092c9" name="time_duration_type"><type>config::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1add06f63255e4d498795d94c003d6b694" name="date_duration_type"><type>config::date_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a3afc1c15b95911c2d1fe1c10b50d2acd" name="int_type"><type>config::int_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1aad2554ebfb1104b107ef7779b6f34167" name="resolution_traits"><type>config::resolution_traits</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1ae9598b9df08d63c917f8391f20508a08" name="wrap_int_type"><type><classname>date_time::wrapping_int</classname>&lt; int_type, INT64_C(86400) *ticks_per_second &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a638f9792cee4b63e7c737855a5af1dde" name="wrap_int_type"><type><classname>date_time::wrapping_int</classname>&lt; split_timedate_system::int_type, split_timedate_system::ticks_per_day &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1ae70a02693e261c7076ba32b396c3e39e" name="wrap_int_type"><type><classname>date_time::wrapping_int</classname>&lt; int_type, ticks_per_day &gt;</type></typedef>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a0089ac739d2acb002c313c1976190b05" name="BOOST_STATIC_CONSTANT"><type/><parameter name=""><paramtype>int_type</paramtype></parameter><parameter name=""><paramtype>ticks_per_day</paramtype><default>INT64_C(86400) *config::tick_per_second</default></parameter></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a8ff284ebbc15a09ec6937547b266b8de" name="get_time_rep" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="sv"><paramtype>special_values</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a1b6a329bdbfd115d819ffc878476613e" name="get_time_rep" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="day"><paramtype>const date_type &amp;</paramtype></parameter><parameter name="tod"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name=""><paramtype>date_time::dst_flags</paramtype><default>not_dst</default></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a4082f5fbddddf1005092bf73c060d0d0" name="get_date" specifiers="static"><type>BOOST_CONSTEXPR date_type</type><parameter name="val"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a5aefdbb9c22643361605fce753171c7e" name="get_time_of_day" specifiers="static"><type>BOOST_CONSTEXPR time_duration_type</type><parameter name="val"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a9984c02727cfdc6417a726550069f266" name="zone_name" specifiers="static"><type>std::string</type><parameter name=""><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a95168a038570f2573c4da5d2e86c544d" name="is_equal" specifiers="static"><type>BOOST_CONSTEXPR bool</type><parameter name="lhs"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1abb2791ba2152df7371947a543e47bc21" name="is_less" specifiers="static"><type>BOOST_CXX14_CONSTEXPR bool</type><parameter name="lhs"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a1fdb99d33b04e93a770e53802a044140" name="add_days" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="base"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a5cdea46557ca8bdd8120f539e9063184" name="subtract_days" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="base"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="dd"><paramtype>const date_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a3933769be6290fd46d1049a9466a2327" name="subtract_time_duration" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="base"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="td"><paramtype>const time_duration_type &amp;</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1a0838386a71e974883a1eed1a4327d845" name="add_time_duration" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_rep_type</type><parameter name="base"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="td"><paramtype>time_duration_type</paramtype></parameter></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1split__timedate__system_1ad65f2d6b215f479494694bdcc1df6cb2" name="subtract_times" specifiers="static"><type>BOOST_CXX14_CONSTEXPR time_duration_type</type><parameter name="lhs"><paramtype>const time_rep_type &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const time_rep_type &amp;</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__zone__base_8hpp" name="boost/date_time/time_zone_base.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__adjustment__offsets" name="dst_adjustment_offsets"><template>
      <template-type-parameter name="time_duration_type"><purpose><para>A type used to represent the offset </para></purpose></template-type-parameter>
    </template><purpose>Structure which holds the time offsets associated with daylight savings time. </purpose><description><para>
</para></description><data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__adjustment__offsets_1ae0c466aa4d3e678b121491e063070d64" name="dst_adjust_"><type>time_duration_type</type><purpose>Amount DST adjusts the clock eg: plus one hour. </purpose></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__adjustment__offsets_1a317ec7d6af70072e75b444306495b671" name="dst_start_offset_"><type>time_duration_type</type><purpose>Time past midnight on start transition day that dst starts. </purpose></data-member>
<data-member id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__adjustment__offsets_1aded16b8e350a315f86814c6727749efa" name="dst_end_offset_"><type>time_duration_type</type><purpose>Time past midnight on end transition day that dst ends. </purpose></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1dst__adjustment__offsets_1a2661421f3647c1f918d51e795c4b7d84"><parameter name="dst_adjust"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="dst_start_offset"><paramtype>const time_duration_type &amp;</paramtype></parameter><parameter name="dst_end_offset"><paramtype>const time_duration_type &amp;</paramtype></parameter></constructor>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base" name="time_zone_base"><template>
      <template-type-parameter name="time_type"/>
      <template-type-parameter name="CharT"/>
    </template><purpose>Interface class for dynamic time zones. </purpose><description><para>This class represents the base interface for all timezone representations. Subclasses may provide different systems for identifying a particular zone. For example some may provide a geographical based zone construction while others may specify the offset from GMT. Another possible implementation would be to convert from POSIX timezone strings. Regardless of the construction technique, this is the interface that these time zone types must provide.</para><para>Note that this class is intended to be used as a shared resource (hence the derivation from boost::counted_base. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1a848fb442a51f08d40b67f22225b0b36c" name="char_type"><type>CharT</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1ab319d20ad0413d03dfe89ec7058a4ab6" name="string_type"><type>std::basic_string&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1afe633403dcba985b20b458aa45c8d412" name="stringstream_type"><type>std::basic_ostringstream&lt; CharT &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1aecdbaaaad7b03280d695184a037d7ebf" name="year_type"><type>time_type::date_type::year_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1adf7e4169c98f94c26e85c445cb3b3e1f" name="time_duration_type"><type>time_type::time_duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1afc81ba881e79e7e804d5420bd980461d"/>
<destructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1a4e32da74fdd0df2fbe95a11ec473b708" specifiers="virtual"/>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1a0b5e11ba896b456fe510485773b4dcd6" name="dst_zone_abbrev" cv="const = 0" specifiers="virtual"><type>string_type</type><purpose>String for the timezone when in daylight savings (eg: EDT) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1a0dcbd5d88e54e5f537f2163cf2f1e9c3" name="std_zone_abbrev" cv="const = 0" specifiers="virtual"><type>string_type</type><purpose>String for the zone when not in daylight savings (eg: EST) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1a3a960635fe97a8d00dfc4e325c029db3" name="dst_zone_name" cv="const = 0" specifiers="virtual"><type>string_type</type><purpose>String for the timezone when in daylight savings (eg: Eastern Daylight Time) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1a593a6166d3a2f9d7a92c5e9f225ff484" name="std_zone_name" cv="const = 0" specifiers="virtual"><type>string_type</type><purpose>String for the zone when not in daylight savings (eg: Eastern Standard Time) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1a88061e4128ea66ab0eb14e7006771406" name="has_dst" cv="const = 0" specifiers="virtual"><type>bool</type><purpose>True if zone uses daylight savings adjustments otherwise false. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1ae424c6a54b575b8372af6f1bc78972f4" name="dst_local_start_time" cv="const = 0" specifiers="virtual"><type>time_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter><purpose>Local time that DST starts – undefined if has_dst is false. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1a26a2e8bdb16262ec441d3950925a9c4b" name="dst_local_end_time" cv="const = 0" specifiers="virtual"><type>time_type</type><parameter name="y"><paramtype>year_type</paramtype></parameter><purpose>Local time that DST ends – undefined if has_dst is false. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1aa54a616c318a81f2b1ddd9558d45689e" name="base_utc_offset" cv="const = 0" specifiers="virtual"><type>time_duration_type</type><purpose>Base offset from UTC for zone (eg: -07:30:00) </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1aa49ba67477ca47cb93f6810bf15d6794" name="dst_offset" cv="const = 0" specifiers="virtual"><type>time_duration_type</type><purpose>Adjustment forward or back made while DST is in effect. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__base_1aeed7dceb4911df988b7f4072a2b7134b" name="to_posix_string" cv="const = 0" specifiers="virtual"><type>string_type</type><purpose>Returns a POSIX time_zone string for this object. </purpose></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.time__zone__names_8hpp" name="boost/date_time/time_zone_names.hpp">
<namespace name="boost">
<namespace name="date_time">
<struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1default__zone__names" name="default_zone_names"><template>
      <template-type-parameter name="CharT"/>
    </template><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1default__zone__names_1ac6bb1b9d65b47f0ec32034a9fcd5c069" name="char_type"><type>CharT</type></typedef>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1default__zone__names_1a0f46f26e5947a3122aaed932b21828dd" name="standard_name" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1default__zone__names_1a63b62ee0f6f33c4a34f8cfbb586c0d98" name="standard_abbrev" specifiers="static"><type>const char_type</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1default__zone__names_1a973fa75bb918084df43cdecf8cf63d7f" name="non_dst_identifier" specifiers="static"><type>const char_type</type></data-member>
</struct><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__names__base" name="time_zone_names_base"><template>
      <template-type-parameter name="CharT"><purpose><para>Allows class to support different character types </para></purpose></template-type-parameter>
    </template><purpose>Base type that holds various string names for timezone output. </purpose><description><para>Class that holds various types of strings used for timezones. For example, for the western United States there is the full name: Pacific Standard Time and the abbreviated name: PST. During daylight savings there are additional names: Pacific Daylight Time and PDT. 
</para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__names__base_1af736aa29a1f9a10f3a22337a3ec0bdf0" name="string_type"><type>std::basic_string&lt; CharT &gt;</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__names__base_1a3853c7280f3eee333ea8fba8fb6a8fa4"/>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__names__base_1a2cf3127a849e97f9a5ee70adbcd3a84e"><parameter name="std_zone_name_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="std_zone_abbrev_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="dst_zone_name_str"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="dst_zone_abbrev_str"><paramtype>const string_type &amp;</paramtype></parameter></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__names__base_1aa97eebcf854607718becd3c398ab83f9" name="dst_zone_abbrev" cv="const"><type>string_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__names__base_1a367fdca494fc9ad397a0544daaf64b86" name="std_zone_abbrev" cv="const"><type>string_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__names__base_1ab7aa48c7fea658ad65a4c4b93a1c349b" name="dst_zone_name" cv="const"><type>string_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1time__zone__names__base_1a5f971c035925a05f89b4c6526d0dbd45" name="std_zone_name" cv="const"><type>string_type</type></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.tz__db__base_8hpp" name="boost/date_time/tz_db_base.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1bad__field__count" name="bad_field_count"><inherit access="public">std::out_of_range</inherit><purpose>Exception thrown when tz database locates incorrect field structure in data file. </purpose><method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1bad__field__count_1a057a7af4586dfd4d4c1a59909ec05e31"><parameter name="s"><paramtype>const std::string &amp;</paramtype></parameter></constructor>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1data__not__accessible" name="data_not_accessible"><inherit access="public">std::logic_error</inherit><purpose>Exception thrown when tz database cannot locate requested data file. </purpose><method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1data__not__accessible_1a4d4440996d1c4d40611ee6ecec50906c"/>
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1data__not__accessible_1abbf2844c603ce7f7d71220904c847dce"><parameter name="filespec"><paramtype>const std::string &amp;</paramtype></parameter></constructor>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base" name="tz_db_base"><template>
      <template-type-parameter name="time_zone_type"/>
      <template-type-parameter name="rule_type"/>
    </template><purpose>Creates a database of time_zones from csv datafile. </purpose><description><para>The csv file containing the zone_specs used by the <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base">tz_db_base</link> is intended to be customized by the library user. When customizing this file (or creating your own) the file must follow a specific format.</para><para>This first line is expected to contain column headings and is therefore not processed by the <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base">tz_db_base</link>.</para><para>Each record (line) must have eleven fields. Some of those fields can be empty. Every field (even empty ones) must be enclosed in double-quotes. Ex: <programlisting language="c++">"America/Phoenix" &lt;- string enclosed in quotes
""                &lt;- empty field
</programlisting></para><para>Some fields represent a length of time. The format of these fields must be: <programlisting language="c++">"{+|-}hh:mm[:ss]" &lt;- length-of-time format
</programlisting> Where the plus or minus is mandatory and the seconds are optional.</para><para>Since some time zones do not use daylight savings it is not always necessary for every field in a zone_spec to contain a value. All zone_specs must have at least ID and GMT offset. Zones that use daylight savings must have all fields filled except: STD ABBR, STD NAME, DST NAME. You should take note that DST ABBR is mandatory for zones that use daylight savings (see field descriptions for further details).</para><para>******* Fields and their description/details *********</para><para>ID: Contains the identifying string for the zone_spec. Any string will do as long as it's unique. No two ID's can be the same.</para><para>STD ABBR: STD NAME: DST ABBR: DST NAME: These four are all the names and abbreviations used by the time zone being described. While any string will do in these fields, care should be taken. These fields hold the strings that will be used in the output of many of the local_time classes. Ex: <programlisting language="c++">time_zone nyc = tz_db.time_zone_from_region("America/New_York");
local_time ny_time(date(2004, Aug, 30), IS_DST, nyc);
cout &lt;&lt; ny_time.to_long_string() &lt;&lt; endl;
// 2004-Aug-30 00:00:00 Eastern Daylight Time
cout &lt;&lt; ny_time.to_short_string() &lt;&lt; endl;
// 2004-Aug-30 00:00:00 EDT
</programlisting></para><para>NOTE: The exact format/function names may vary - see local_time documentation for further details.</para><para>GMT offset: This is the number of hours added to utc to get the local time before any daylight savings adjustments are made. Some examples are: America/New_York offset -5 hours, &amp; Africa/Cairo offset +2 hours. The format must follow the length-of-time format described above.</para><para>DST adjustment: The amount of time added to gmt_offset when daylight savings is in effect. The format must follow the length-of-time format described above.</para><para>DST Start Date rule: This is a specially formatted string that describes the day of year in which the transition take place. It holds three fields of it's own, separated by semicolons. The first field indicates the "nth" weekday of the month. The possible values are: 1 (first), 2 (second), 3 (third), 4 (fourth), 5 (fifth), and -1 (last). The second field indicates the day-of-week from 0-6 (Sun=0). The third field indicates the month from 1-12 (Jan=1).</para><para>Examples are: "-1;5;9"="Last Friday of September", "2;1;3"="Second Monday of March"</para><para>Start time: Start time is the number of hours past midnight, on the day of the start transition, the transition takes place. More simply put, the time of day the transition is made (in 24 hours format). The format must follow the length-of-time format described above with the exception that it must always be positive.</para><para>DST End date rule: See DST Start date rule. The difference here is this is the day daylight savings ends (transition to STD).</para><para>End time: Same as Start time. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a3889788969e8a0bf3f7da31a7388d4d9" name="char_type"><type>char</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a4e250f9fc213e786f23aacd4241346d3" name="time_zone_base_type"><type>time_zone_type::base_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a291e69b13dfab2b150125faeb7ff900b" name="time_duration_type"><type>time_zone_type::time_duration_type</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1aa3cdea86c05d20f2c5f2ec8b7739da86" name="time_zone_names"><type><classname>time_zone_names_base</classname>&lt; char_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1af289dd93e47f392b3403bcd6a7a27e00" name="dst_adjustment_offsets"><type><classname>boost::date_time::dst_adjustment_offsets</classname>&lt; time_duration_type &gt;</type></typedef>
<typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a25ba4f6915a42cb09e923d12362da7cd" name="string_type"><type>std::basic_string&lt; char_type &gt;</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a0b16316bc40d09d5d5467ca89b8390ec"><purpose>Constructs an empty database. </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a19b3b93cbe97f158b182412d4d92dbf8" name="load_from_stream"><type>void</type><parameter name="in"><paramtype>std::istream &amp;</paramtype></parameter><purpose>Process csv data file, may throw exceptions. </purpose><description><para>May throw <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1bad__field__count">bad_field_count</link> exceptions </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a65bfe722a613a38c2df31aee10474477" name="load_from_file"><type>void</type><parameter name="pathspec"><paramtype>const std::string &amp;</paramtype></parameter><purpose>Process csv data file, may throw exceptions. </purpose><description><para>May throw <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1data__not__accessible">data_not_accessible</link>, or <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1bad__field__count">bad_field_count</link> exceptions </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a5a2504655e08cf7552425225e680e0b8" name="add_record"><type>bool</type><parameter name="region"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="tz"><paramtype>boost::shared_ptr&lt; time_zone_base_type &gt;</paramtype></parameter><purpose>returns true if record successfully added to map </purpose><description><para>Takes a region name in the form of "America/Phoenix", and a time_zone object for that region. The id string must be a unique name that does not already exist in the database. </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a984487789317247abc99972b7e3f3b2a" name="time_zone_from_region" cv="const"><type>boost::shared_ptr&lt; time_zone_base_type &gt;</type><parameter name="region"><paramtype>const string_type &amp;</paramtype></parameter><purpose>Returns a time_zone object built from the specs for the given region. </purpose><description><para>Returns a time_zone object built from the specs for the given region. If region does not exist a local_time::record_not_found exception will be thrown </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a207059e0fdd49ff15598df8cd496ea67" name="region_list" cv="const"><type>std::vector&lt; std::string &gt;</type><purpose>Returns a vector of strings holding the time zone regions in the database. </purpose></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a20d22f0a705451098fdbc8d219a50064" name="parse_rules" cv="const"><type>rule_type *</type><parameter name="sr"><paramtype>const string_type &amp;</paramtype></parameter><parameter name="er"><paramtype>const string_type &amp;</paramtype></parameter><purpose>parses rule specs for transition day rules </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1a34967cc58234efb369bfdd6d8dfba033" name="get_week_num" cv="const"><type>week_num</type><parameter name="nth"><paramtype>int</paramtype></parameter><purpose>helper function for parse_rules() </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1adaea061949024c6b0e08b158ba19e831" name="split_rule_spec" cv="const"><type>void</type><parameter name="nth"><paramtype>int &amp;</paramtype></parameter><parameter name="d"><paramtype>int &amp;</paramtype></parameter><parameter name="m"><paramtype>int &amp;</paramtype></parameter><parameter name="rule"><paramtype>string_type</paramtype></parameter><purpose>splits the [start|end]_date_rule string into 3 ints </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1tz__db__base_1ac79491dc79d805440eadd05ec3bab21d" name="parse_string"><type>bool</type><parameter name="s"><paramtype>string_type &amp;</paramtype></parameter><purpose>Take a line from the csv, turn it into a time_zone_type. </purpose><description><para>Take a line from the csv, turn it into a time_zone_type, and add it to the map. Zone_specs in csv file are expected to have eleven fields that describe the time zone. Returns true if zone_spec successfully added to database </para></description></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.wrapping__int_8hpp" name="boost/date_time/wrapping_int.hpp">
<namespace name="boost">
<namespace name="date_time">
<class id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int" name="wrapping_int"><template>
      <template-type-parameter name="int_type_"/>
      <template-nontype-parameter name="wrap_val"><type>int_type_</type></template-nontype-parameter>
    </template><purpose>A wrapping integer used to support time durations (WARNING: only instantiate with a signed type) </purpose><description><para>In composite date and time types this type is used to wrap at the day boundary. Ex: A wrapping_int&lt;short, 10&gt; will roll over after nine, and roll under below zero. This gives a range of [0,9]</para><para>NOTE: it is strongly recommended that <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2">wrapping_int2</link> be used instead of <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int">wrapping_int</link> as <link linkend="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int">wrapping_int</link> is to be depricated at some point soon.</para><para>Also Note that warnings will occur if instantiated with an unsigned type. Only a signed type should be used! </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int_1aae93d0f708b4f242bcfd3a0dc8e548ed" name="int_type"><type>int_type_</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int_1ad8c21bed6dbf7b4594c8f861b54569cd" name="wrap_value" specifiers="static"><type>BOOST_CONSTEXPR int_type</type></method>
</method-group>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int_1a8f45cbc9a5fddc8a361b4baf8075ac79"><parameter name="v"><paramtype>int_type</paramtype></parameter><purpose>Add, return true if wrapped. </purpose></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int_1a2ba0a3d4b8e80a2c3b0a6a7a28c49759" name="as_int" cv="const"><type>BOOST_CONSTEXPR int_type</type><purpose>Explicit converion method. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int_1a0b7010f0a946b37af026a8d804e4f3f4" name="operator int_type" cv="const"><type>BOOST_CONSTEXPR</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int_1ae8e8f9924d20543c7b6f873d17bad5ec" name="add"><type>BOOST_CXX14_CONSTEXPR IntT</type><template>
          <template-type-parameter name="IntT"/>
        </template><parameter name="v"><paramtype>IntT</paramtype></parameter><purpose>Add, return number of wraps performed. </purpose><description><para>The sign of the returned value will indicate which direction the wraps went. Ex: add a negative number and wrapping under could occur, this would be indicated by a negative return value. If wrapping over took place, a positive value would be returned </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int_1a524fb748d0238aaec25d9730908fb642" name="subtract"><type>BOOST_CXX14_CONSTEXPR IntT</type><template>
          <template-type-parameter name="IntT"/>
        </template><parameter name="v"><paramtype>IntT</paramtype></parameter><purpose>Subtract will return '+d' if wrapping under took place ('d' is the number of wraps) </purpose><description><para>The sign of the returned value will indicate which direction the wraps went (positive indicates wrap under, negative indicates wrap over). Ex: subtract a negative number and wrapping over could occur, this would be indicated by a negative return value. If wrapping under took place, a positive value would be returned. </para></description></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int_1adb41f5487e01083f0e90468fbd93c2a8" name="calculate_wrap"><type>BOOST_CXX14_CONSTEXPR IntT</type><template>
          <template-type-parameter name="IntT"/>
        </template><parameter name="wrap"><paramtype>IntT</paramtype></parameter></method>
</method-group>
</class><class id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2" name="wrapping_int2"><template>
      <template-type-parameter name="int_type_"/>
      <template-nontype-parameter name="wrap_min"><type>int_type_</type></template-nontype-parameter>
      <template-nontype-parameter name="wrap_max"><type>int_type_</type></template-nontype-parameter>
    </template><purpose>A wrapping integer used to wrap around at the top (WARNING: only instantiate with a signed type) </purpose><description><para>Bad name, quick impl to fix a bug – fix later!! This allows the wrap to restart at a value other than 0. </para></description><typedef id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1ab43b3132288ec18f938f8d694d826129" name="int_type"><type>int_type_</type></typedef>
<method-group name="public static functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1a4a9501e1c6b0d175333923a7acb0e925" name="wrap_value" specifiers="static"><type>BOOST_CONSTEXPR int_type</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1a08e283770a3be201985b4f58d06e20d3" name="min_value" specifiers="static"><type>BOOST_CONSTEXPR int_type</type></method>
</method-group>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1aa6b3ebb0cc46421720a750a4b5b18263"><parameter name="v"><paramtype>int_type</paramtype></parameter><description><para>If initializing value is out of range of [wrap_min, wrap_max], value will be initialized to closest of min or max </para></description></constructor>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1accdab8d9d7ebd99af3077ae100be3490" name="as_int" cv="const"><type>BOOST_CONSTEXPR int_type</type><purpose>Explicit converion method. </purpose></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1a2eeb83d6ab40053bb3e67208fc8e581b" name="operator int_type" cv="const"><type>BOOST_CONSTEXPR</type></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1ab4ae2632adde0ebae7bf10062285210a" name="add"><type>BOOST_CXX14_CONSTEXPR IntT</type><template>
          <template-type-parameter name="IntT"/>
        </template><parameter name="v"><paramtype>IntT</paramtype></parameter><purpose>Add, return number of wraps performed. </purpose><description><para>The sign of the returned value will indicate which direction the wraps went. Ex: add a negative number and wrapping under could occur, this would be indicated by a negative return value. If wrapping over took place, a positive value would be returned </para></description></method>
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1a05a08c046504c307a70d0e3e9e89827f" name="subtract"><type>BOOST_CXX14_CONSTEXPR IntT</type><template>
          <template-type-parameter name="IntT"/>
        </template><parameter name="v"><paramtype>IntT</paramtype></parameter><purpose>Subtract will return '-d' if wrapping under took place ('d' is the number of wraps) </purpose><description><para>The sign of the returned value will indicate which direction the wraps went. Ex: subtract a negative number and wrapping over could occur, this would be indicated by a positive return value. If wrapping under took place, a negative value would be returned </para></description></method>
</method-group>
<method-group name="private member functions">
<method id="doxygen.date_time_reference.classboost_1_1date__time_1_1wrapping__int2_1aea1654142c50cffe8fb607325b5aabb6" name="calculate_wrap"><type>BOOST_CXX14_CONSTEXPR IntT</type><template>
          <template-type-parameter name="IntT"/>
        </template><parameter name="wrap"><paramtype>IntT</paramtype></parameter></method>
</method-group>
</class>
































</namespace>
</namespace>
</header>
<header id="doxygen.date_time_reference.year__month__day_8hpp" name="boost/date_time/year_month_day.hpp">
<namespace name="boost">
<namespace name="date_time">
<struct id="doxygen.date_time_reference.structboost_1_1date__time_1_1year__month__day__base" name="year_month_day_base"><template>
      <template-type-parameter name="YearType"/>
      <template-type-parameter name="MonthType"/>
      <template-type-parameter name="DayType"/>
    </template><purpose>Allow rapid creation of ymd triples of different types. </purpose><typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1year__month__day__base_1a4ab4038fb1fa02d74192d47ecd7d75d6" name="year_type"><type>YearType</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1year__month__day__base_1a6140f9870abd78a433fb2010bbe69bd7" name="month_type"><type>MonthType</type></typedef>
<typedef id="doxygen.date_time_reference.structboost_1_1date__time_1_1year__month__day__base_1af9994aee53110de6e247e2daaede4e74" name="day_type"><type>DayType</type></typedef>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1year__month__day__base_1aad370d4f4abb98ea11147081bc87aeab" name="year"><type>YearType</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1year__month__day__base_1a43e2741cb95f8d415b1d5bbeda3f7ad1" name="month"><type>MonthType</type></data-member>
<data-member id="doxygen.date_time_reference.structboost_1_1date__time_1_1year__month__day__base_1ab577196411595ec6214fba06e9678d3e" name="day"><type>DayType</type></data-member>
<method-group name="public member functions">
<constructor id="doxygen.date_time_reference.structboost_1_1date__time_1_1year__month__day__base_1a43e5716b9d700f1fb090fbab62210ccb"><parameter name="year"><paramtype>YearType</paramtype></parameter><parameter name="month"><paramtype>MonthType</paramtype></parameter><parameter name="day"><paramtype>DayType</paramtype></parameter><purpose>A basic constructor. </purpose></constructor>
</method-group>
</struct>
































</namespace>
</namespace>
</header>
</library-reference>