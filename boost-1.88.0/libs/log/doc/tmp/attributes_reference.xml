<?xml version="1.0" standalone="yes"?>
<library-reference id="attributes"><title>Attributes</title><header id="doxygen.attributes.attribute_8hpp" name="boost/log/attributes/attribute.hpp">
<para><para>Andrey Semashev </para>

<para>15.04.2007</para>

The header contains attribute interface definition. </para><namespace name="boost">
<namespace name="log">
<class id="doxygen.attributes.classboost_1_1log_1_1attribute" name="attribute"><purpose>A base class for an attribute value factory. </purpose><description><para>Every attribute is represented with a factory that is basically an attribute value generator. The sole purpose of an attribute is to return an actual value when requested. A simplest attribute can always return the same value that it stores internally, but more complex ones can perform a considerable amount of work to return a value, and the returned values may differ each time requested.</para><para>A word about thread safety. An attribute should be prepared to be requested a value from multiple threads concurrently. </para></description><struct id="doxygen.attributes.structboost_1_1log_1_1attribute_1_1impl" name="impl"><inherit access="public">boost::intrusive_ref_counter&lt; impl &gt;</inherit><purpose>A base class for an attribute value factory. </purpose><description><para>All attributes must derive their implementation from this class. </para></description><method-group name="public member functions">
<destructor id="doxygen.attributes.structboost_1_1log_1_1attribute_1_1impl_1a182b71e58d2a6763127ef76ab417a17a" specifiers="virtual"><purpose>Virtual destructor. </purpose></destructor>
<method id="doxygen.attributes.structboost_1_1log_1_1attribute_1_1impl_1ab7fa69d5d0b141bc3e707c2618e8abf5" name="get_value" cv="= 0" specifiers="virtual"><type><classname>attribute_value</classname></type><description><para>
</para></description><returns><para>The actual attribute value. It shall not return empty values (exceptions shall be used to indicate errors). </para>
</returns></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.attributes.structboost_1_1log_1_1attribute_1_1impl_1a35208af8e263399a1638365ed9eb4f30" name="operator new" specifiers="static"><type>void *</type><parameter name="size"><paramtype>std::size_t</paramtype></parameter></method>
<method id="doxygen.attributes.structboost_1_1log_1_1attribute_1_1impl_1a829ec8cf550e11b105f6aa28095035f7" name="operator delete" cv="noexcept" specifiers="static"><type>void</type><parameter name="p"><paramtype>void *</paramtype></parameter><parameter name="size"><paramtype>std::size_t</paramtype></parameter></method>
</method-group>
</struct><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute_1aaf8987fa1855a44f5947bab22d717b4c" cv="= default"><description><para>Default constructor. Creates an empty attribute value factory, which is not usable until <computeroutput>set_impl</computeroutput> is called. </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute_1a49a250807ec8a41c16d024d897bfcb34" cv="noexcept"><parameter name="that"><paramtype><classname>attribute</classname> const &amp;</paramtype></parameter><description><para>Copy constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute_1a6ef362c504979bc4f21aacbffb01f032" cv="noexcept"><parameter name="that"><paramtype><classname>attribute</classname> &amp;&amp;</paramtype></parameter><description><para>Move constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute_1a8087f0250626ea5d8eadeb260424239c" specifiers="explicit" cv="noexcept"><parameter name="p"><paramtype>intrusive_ptr&lt; <classname>impl</classname> &gt;</paramtype><description><para>Pointer to the implementation. Must not be <computeroutput>NULL</computeroutput>. </para></description></parameter><description><para>Initializing constructor</para><para>
</para></description></constructor>
<copy-assignment id="doxygen.attributes.classboost_1_1log_1_1attribute_1a17fc9a06c804339bd9bfcfc1b4b6f9da" cv="noexcept"><type><classname>attribute</classname> &amp;</type><parameter name="that"><paramtype><classname>attribute</classname> const &amp;</paramtype></parameter><description><para>Copy assignment </para></description></copy-assignment>
<copy-assignment id="doxygen.attributes.classboost_1_1log_1_1attribute_1a44d2127e4d77c51711422d79315094e9" cv="noexcept"><type><classname>attribute</classname> &amp;</type><parameter name="that"><paramtype><classname>attribute</classname> &amp;&amp;</paramtype></parameter><description><para>Move assignment </para></description></copy-assignment>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute_1a420e60e9788bfa3b52aa3aab72ea3a5e" name="conversion-operator" cv="const noexcept" specifiers="explicit"><type>bool</type><description><para>Verifies that the factory is not in empty state </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute_1aa781ac6ac5a122ef2e89325c84d51f5a" name="operator!" cv="const noexcept"><type>bool</type><description><para>Verifies that the factory is in empty state </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute_1a52c3f27728fd96b70c2c33d03bffdd1c" name="get_value" cv="const"><type><classname>attribute_value</classname></type><description><para>
</para></description><returns><para>The actual attribute value. It shall not return empty values (exceptions shall be used to indicate errors). </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute_1ae807dc90ef87d038f9800ed613066b65" name="swap" cv="noexcept"><type>void</type><parameter name="that"><paramtype><classname>attribute</classname> &amp;</paramtype></parameter><description><para>The method swaps two factories (i.e. their implementations). </para></description></method>
</method-group>
<method-group name="protected member functions">
<method id="doxygen.attributes.classboost_1_1log_1_1attribute_1a938b8fe86ebfaf5bdf47f56dddf41712" name="get_impl" cv="const noexcept"><type><classname>impl</classname> *</type><description><para>
</para></description><returns><para>The pointer to the implementation </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute_1ae6eca4625826df30a5d2562cd7ea15ff" name="set_impl" cv="noexcept"><type>void</type><parameter name="p"><paramtype>intrusive_ptr&lt; <classname>impl</classname> &gt;</paramtype><description><para>Pointer to the implementation. Must not be <computeroutput>NULL</computeroutput>. </para></description></parameter><description><para>Sets the pointer to the factory implementation.</para><para>
</para></description></method>
</method-group>
<method-group name="friend functions">
<method id="doxygen.attributes.classboost_1_1log_1_1attribute_1a5a80d3aced95644715e22060f0576e52" name="attribute_cast"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="attr"><paramtype><classname>attribute</classname> const &amp;</paramtype></parameter><description><para>The function casts one attribute factory to another </para></description></method>
</method-group>
</class>


































<function id="doxygen.attributes.attribute_8hpp_1a880347f1d54a8aea75a0e2bebe8a3cbc" name="swap"><type>void</type><parameter name="left"><paramtype><classname>attribute</classname> &amp;</paramtype></parameter><parameter name="right"><paramtype><classname>attribute</classname> &amp;</paramtype></parameter><description><para>The function swaps two attribute value factories </para></description></function>
</namespace>
</namespace>
</header>
<header id="doxygen.attributes.attribute__cast_8hpp" name="boost/log/attributes/attribute_cast.hpp">
<para><para>Andrey Semashev </para>

<para>06.08.2010</para>

The header contains utilities for casting between attribute factories. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1cast__source" name="cast_source"><description><para>The class holds a reference to the attribute factory implementation being casted </para></description><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1cast__source_1af740d3e11b351b4c3818a21ef3d75fb2" specifiers="explicit"><parameter name="p"><paramtype><classname>attribute::impl</classname> *</paramtype></parameter><description><para>Initializing constructor. Creates a source that refers to the specified factory implementation. </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1cast__source_1a7444aed7c812f3728c4dc32b7a00d8b3" name="as" cv="const"><type>T *</type><template>
          <template-type-parameter name="T"/>
        </template><description><para>The function attempts to cast the aggregated pointer to the implementation to the specified type.</para><para>
</para></description><returns><para>The converted pointer or <computeroutput>NULL</computeroutput>, if the conversion fails. </para>
</returns></method>
</method-group>
</class>



</namespace>


































<function id="doxygen.attributes.attribute__cast_8hpp_1a5a80d3aced95644715e22060f0576e52" name="attribute_cast"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="attr"><paramtype><classname>attribute</classname> const &amp;</paramtype></parameter><description><para>The function casts one attribute factory to another </para></description></function>

</namespace>
</namespace>
</header>
<header id="doxygen.attributes.attribute__name_8hpp" name="boost/log/attributes/attribute_name.hpp">
<para><para>Andrey Semashev </para>

<para>28.06.2010</para>

The header contains attribute name interface definition. </para><namespace name="boost">
<namespace name="log">
<class id="doxygen.attributes.classboost_1_1log_1_1attribute__name" name="attribute_name"><purpose>The class represents an attribute name in containers used by the library. </purpose><description><para>The class mostly serves for optimization purposes. Each attribute name that is used with the library is automatically associated with a unique identifier, which is much lighter in terms of memory footprint and operations complexity. This is done transparently by this class, on object construction. Passing objects of this class to other library methods, such as attribute lookup functions, will not require this translation and/or string copying and thus will result in a more efficient code. </para></description><typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a4ce3e25c5b09773292a8940a840353ab" name="string_type"><purpose>String type. </purpose><type>std::string</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a573a8b53f966be529f1f97134a2b5625" name="id_type"><purpose>Associated identifier. </purpose><type>unspecified</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a9af85d0e3c703b18cd95a1830ff14429" cv="noexcept"><description><para>Default constructor. Creates an object that does not refer to any attribute name. </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a4f417a24898f6190960445e39829bf4a"><parameter name="name"><paramtype>const char *</paramtype><description><para>An attribute name </para></description></parameter><description><para>Constructs an attribute name from the specified string</para><para>

</para></description><requires><para><emphasis>name</emphasis> is not NULL and points to a zero-terminated string </para>
</requires></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a644d82a4ff8a11b87d2f1ecdb65737d8"><parameter name="name"><paramtype>string_type const &amp;</paramtype><description><para>An attribute name </para></description></parameter><description><para>Constructs an attribute name from the specified string</para><para>
</para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a9b39196d880dd555f5de26a68a5f899a" name="operator==" cv="const noexcept"><type>bool</type><parameter name="that"><paramtype><classname>attribute_name</classname> const &amp;</paramtype></parameter><description><para>Compares the attribute names</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if <computeroutput>*this</computeroutput> and <computeroutput>that</computeroutput> refer to the same attribute name, and <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1aa1c26ad225c669fa20135f2d4bcd88c8" name="operator!=" cv="const noexcept"><type>bool</type><parameter name="that"><paramtype><classname>attribute_name</classname> const &amp;</paramtype></parameter><description><para>Compares the attribute names</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if <computeroutput>*this</computeroutput> and <computeroutput>that</computeroutput> refer to different attribute names, and <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1ae8ac532c29bb1f74e85cc3027718de56" name="operator==" cv="const"><type>bool</type><parameter name="that"><paramtype>const char *</paramtype></parameter><description><para>Compares the attribute names</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if <computeroutput>*this</computeroutput> and <computeroutput>that</computeroutput> refer to the same attribute name, and <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a1e198b17ab0d3e1de660376c7d38e08a" name="operator!=" cv="const"><type>bool</type><parameter name="that"><paramtype>const char *</paramtype></parameter><description><para>Compares the attribute names</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if <computeroutput>*this</computeroutput> and <computeroutput>that</computeroutput> refer to different attribute names, and <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a1d832d2b043b7cda23c953d4642f7dbe" name="operator==" cv="const"><type>bool</type><parameter name="that"><paramtype>string_type const &amp;</paramtype></parameter><description><para>Compares the attribute names</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if <computeroutput>*this</computeroutput> and <computeroutput>that</computeroutput> refer to the same attribute name, and <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a862c578685e514fa461a2900bc32b646" name="operator!=" cv="const"><type>bool</type><parameter name="that"><paramtype>string_type const &amp;</paramtype></parameter><description><para>Compares the attribute names</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if <computeroutput>*this</computeroutput> and <computeroutput>that</computeroutput> refer to different attribute names, and <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a420e60e9788bfa3b52aa3aab72ea3a5e" name="conversion-operator" cv="const noexcept" specifiers="explicit"><type>bool</type><description><para>Checks if the object was default-constructed</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if <computeroutput>*this</computeroutput> was constructed with an attribute name, <computeroutput>false</computeroutput> otherwise </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1aa781ac6ac5a122ef2e89325c84d51f5a" name="operator!" cv="const noexcept"><type>bool</type><description><para>Checks if the object was default-constructed</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if <computeroutput>*this</computeroutput> was default-constructed and does not refer to any attribute name, <computeroutput>false</computeroutput> otherwise </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1a7d5bbb3f19d0122538e10954d08f14d1" name="id" cv="const noexcept"><type>id_type</type><description><para>

</para></description><requires><para><computeroutput>(!*this) == false</computeroutput> </para>
</requires><returns><para>The associated id value </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__name_1af2be8b73196ecd6f4c79ee056c4db7a7" name="string" cv="const"><type>string_type const &amp;</type><description><para>

</para></description><requires><para><computeroutput>(!*this) == false</computeroutput> </para>
</requires><returns><para>The attribute name string that was used during the object construction </para>
</returns></method>
</method-group>
</class>
































<function id="doxygen.attributes.attribute__name_8hpp_1a0a61745b0a92fb8cf8ed7a4548787e65" name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="strm"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype></parameter></function>


</namespace>
</namespace>
</header>
<header id="doxygen.attributes.attribute__set_8hpp" name="boost/log/attributes/attribute_set.hpp">
<para><para>Andrey Semashev </para>

<para>08.03.2007</para>

This header contains definition of the attribute set container. </para><namespace name="boost">
<namespace name="log">
<class id="doxygen.attributes.classboost_1_1log_1_1attribute__set" name="attribute_set"><purpose>An attribute set class. </purpose><description><para>An attribute set is an associative container with attribute name as a key and pointer to the attribute as a mapped value. The container allows storing only one element for each distinct key value. In most regards attribute set container provides interface similar to <computeroutput>std::unordered_map</computeroutput>. However, there are differences in <computeroutput>operator</computeroutput>[] semantics and a number of optimizations with regard to iteration. Besides, attribute names are stored as a read-only <computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__name">attribute_name</link></computeroutput>'s instead of <computeroutput>std::string</computeroutput>, which saves memory and CPU time. </para></description><typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ae83ed7780aee0da251184571648dafc4" name="key_type"><purpose>Key type. </purpose><type><classname>attribute_name</classname></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ab61c4c8e43d058e351c69b5f43a0834c" name="mapped_type"><purpose>Mapped attribute type. </purpose><type><classname>attribute</classname></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ae2120f6b234ed0ab2a1fa585f072af5f" name="value_type"><purpose>Value type. </purpose><type>std::pair&lt; const key_type, mapped_type &gt;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a1824ec83e5a41c4a5a3030992c180990" name="reference"><purpose>Reference type. </purpose><type>value_type &amp;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1aead17d93276c26b711136dadfb2b33bb" name="const_reference"><purpose>Const reference type. </purpose><type>value_type const &amp;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1aaa1e72ad8a618a230c65fcd8103195a4" name="pointer"><purpose>Pointer type. </purpose><type>value_type *</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1aa81ebde206c42bb02f48b75b591197ae" name="const_pointer"><purpose>Const pointer type. </purpose><type>value_type const *</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a9fb3bf5eb6532a60d9735401037fa365" name="size_type"><purpose>Size type. </purpose><type>std::size_t</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a541d05599a44c77a2728e5b2686e5881" name="difference_type"><purpose>Difference type. </purpose><type>std::ptrdiff_t</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1afad66e3d9397095b51a512606ed4e45b" name="iterator"><description><para>Iterator type. The iterator complies to the bidirectional iterator requirements. </para></description><type>implementation_defined</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a20cfb0458c5f7684b1f0a48dc497f2e1" name="const_iterator"><description><para>Constant iterator type. The iterator complies to the bidirectional iterator requirements with read-only capabilities. </para></description><type>implementation_defined</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a38150e9fdfefe4c8a4aeb2f836813163"><description><para>Default constructor.</para><para>
</para></description><postconditions><para><computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a3f6fc5de06a318920d84f3c3742db07f">empty()</link> == true</computeroutput> </para>
</postconditions></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ad615dc2bcdd697ea7ae69c7f8a8f0fa7"><parameter name="that"><paramtype><classname>attribute_set</classname> const &amp;</paramtype></parameter><description><para>Copy constructor.</para><para>
</para></description><postconditions><para><computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a0801762a3fe36fe32dca5f16e515478d">size()</link> == that.size() &amp;&amp; std::equal(<link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a979556eb331ec35eb33472a90a160f99">begin()</link>, <link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1afc5380afa64b233d0df01a147616974b">end()</link>, that.begin()) == true</computeroutput> </para>
</postconditions></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a1c7a3df16f8e31e216ee114e9870aea2" cv="noexcept"><parameter name="that"><paramtype><classname>attribute_set</classname> &amp;&amp;</paramtype></parameter><description><para>Move constructor </para></description></constructor>
<destructor id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a65cbf8cb2c6652a5f38e93f7b3cfb6b0" cv="noexcept"><description><para>Destructor. All stored references to attributes are released. </para></description></destructor>
<copy-assignment id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ab9f7b9039842b4e48b30983f0bd877ec" cv="noexcept"><type><classname>attribute_set</classname> &amp;</type><parameter name="that"><paramtype><classname>attribute_set</classname></paramtype></parameter><description><para>Copy assignment operator.</para><para>
</para></description><postconditions><para><computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a0801762a3fe36fe32dca5f16e515478d">size()</link> == that.size() &amp;&amp; std::equal(<link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a979556eb331ec35eb33472a90a160f99">begin()</link>, <link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1afc5380afa64b233d0df01a147616974b">end()</link>, that.begin()) == true</computeroutput> </para>
</postconditions></copy-assignment>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ad8098261c54742dc28bb3ca9cc1e4d19" name="swap" cv="noexcept"><type>void</type><parameter name="that"><paramtype><classname>attribute_set</classname> &amp;</paramtype></parameter><description><para>Swaps two instances of the container.</para><para><emphasis role="bold">Throws:</emphasis> Nothing. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a979556eb331ec35eb33472a90a160f99" name="begin" cv="noexcept"><type>iterator</type><description><para>
</para></description><returns><para>Iterator to the first element of the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1afc5380afa64b233d0df01a147616974b" name="end" cv="noexcept"><type>iterator</type><description><para>
</para></description><returns><para>Iterator to the after-the-last element of the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a1ca1fc2c9fc3e169d5d0decfd1e54221" name="begin" cv="const noexcept"><type>const_iterator</type><description><para>
</para></description><returns><para>Constant iterator to the first element of the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a5b9b57293fae9b18b26349ac0b3fdcd3" name="end" cv="const noexcept"><type>const_iterator</type><description><para>
</para></description><returns><para>Constant iterator to the after-the-last element of the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a0801762a3fe36fe32dca5f16e515478d" name="size" cv="const noexcept"><type>size_type</type><description><para>
</para></description><returns><para>Number of elements in the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a3f6fc5de06a318920d84f3c3742db07f" name="empty" cv="const noexcept"><type>bool</type><description><para>
</para></description><returns><para>true if there are no elements in the container, false otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ac41f9cce8d0828bf0d165cc0d748f6e4" name="find" cv="noexcept"><type>iterator</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>The method finds the attribute by name.</para><para>

</para></description><returns><para>Iterator to the found element or <link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1afc5380afa64b233d0df01a147616974b">end()</link> if the attribute with such name is not found. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a7267a99bad3cc7ab5d86a368179e87db" name="find" cv="const noexcept"><type>const_iterator</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>The method finds the attribute by name.</para><para>

</para></description><returns><para>Iterator to the found element or <computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1afc5380afa64b233d0df01a147616974b">end()</link></computeroutput> if the attribute with such name is not found. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a3e35015fea7824f5384d92e14efdcd95" name="count" cv="const noexcept"><type>size_type</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>The method counts the number of the attribute occurrences in the container. Since there can be only one attribute with a particular key, the method always return 0 or 1.</para><para>

</para></description><returns><para>The number of times the attribute is found in the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a5d78631ee531cb9756cc5c24ca57cf40" name="operator[]" cv="noexcept"><type><emphasis>unspecified</emphasis></type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>Combined lookup/insertion operator. The operator semantics depends on the further usage of the returned reference. <itemizedlist>
<listitem><para>If the reference is used as an assignment target, the assignment expression is equivalent to element insertion, where the element is composed of the second argument of the <computeroutput>operator</computeroutput>[] as a key and the second argument of assignment as a mapped value. </para>
</listitem>
<listitem><para>If the returned reference is used in context where a conversion to the mapped type is required, the result of the conversion is equivalent to the mapped value found with the second argument of the <computeroutput>operator</computeroutput>[] as a key, if such an element exists in the container, or a default-constructed mapped value, if an element does not exist in the container.</para>
</listitem>
</itemizedlist>


</para></description><returns><para>A smart reference object of unspecified type. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1aefd738ce956124c7d5616e9465f15cc9" name="operator[]" cv="const noexcept"><type>mapped_type</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>Lookup operator</para><para>

</para></description><returns><para>If an element with the corresponding attribute name is found in the container, its mapped value is returned. Otherwise a default-constructed mapped value is returned. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ac40b2e844af89723fd8d8d61f8635eaa" name="insert"><type>std::pair&lt; iterator, bool &gt;</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><parameter name="data"><paramtype>mapped_type const &amp;</paramtype><description><para>Pointer to the attribute. Must not be NULL. </para></description></parameter><description><para>Insertion method</para><para>

</para></description><returns><para>A pair of values. If second is true, the insertion succeeded and the first component points to the inserted element. Otherwise the first component points to the element that prevents insertion. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a6818357d6559b3f6c2341c138cd2e0ce" name="insert"><type>std::pair&lt; iterator, bool &gt;</type><parameter name="value"><paramtype>const_reference</paramtype><description><para>An element to be inserted. </para></description></parameter><description><para>Insertion method</para><para>

</para></description><returns><para>A pair of values. If second is true, the insertion succeeded and the first component points to the inserted element. Otherwise the first component points to the element that prevents insertion. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ae134e123cdc3e11873fd1c18bbc4dd30" name="insert"><type>void</type><template>
          <template-type-parameter name="FwdIteratorT"/>
        </template><parameter name="begin"><paramtype>FwdIteratorT</paramtype><description><para>A forward iterator that points to the first element to be inserted. </para></description></parameter><parameter name="end"><paramtype>FwdIteratorT</paramtype><description><para>A forward iterator that points to the after-the-last element to be inserted. </para></description></parameter><description><para>Mass insertion method.</para><para>
</para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1afa0fb921dbc8c82481e7bed38dd77133" name="insert"><type>void</type><template>
          <template-type-parameter name="FwdIteratorT"/>
          <template-type-parameter name="OutputIteratorT"/>
        </template><parameter name="begin"><paramtype>FwdIteratorT</paramtype><description><para>A forward iterator that points to the first element to be inserted. </para></description></parameter><parameter name="end"><paramtype>FwdIteratorT</paramtype><description><para>A forward iterator that points to the after-the-last element to be inserted. </para></description></parameter><parameter name="out"><paramtype>OutputIteratorT</paramtype><description><para>An output iterator that receives results of insertion of the elements </para></description></parameter><description><para>Mass insertion method with ability to acquire iterators to the inserted elements.</para><para>
</para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a13ade6e5c96822a75085a42f2e1388c3" name="erase" cv="noexcept"><type>size_type</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>The method erases all attributes with the specified name</para><para>


</para></description><postconditions><para>All iterators to the erased elements become invalid. </para>
</postconditions><returns><para>Tne number of erased elements </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a9e0e4ddafcd3e5691f83655bef36d2b4" name="erase" cv="noexcept"><type>void</type><parameter name="it"><paramtype>iterator</paramtype><description><para>A valid iterator to the element to be erased. </para></description></parameter><description><para>The method erases the specified attribute</para><para>


</para></description><postconditions><para>All iterators to the erased element become invalid. </para>
</postconditions><returns><para>Tne number of erased elements </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1ae35b2c2df7ade62de7f58d64f6442807" name="erase" cv="noexcept"><type>void</type><parameter name="begin"><paramtype>iterator</paramtype><description><para>An iterator that points to the first element to be erased. </para></description></parameter><parameter name="end"><paramtype>iterator</paramtype><description><para>An iterator that points to the after-the-last element to be erased. </para></description></parameter><description><para>The method erases all attributes within the specified range</para><para>


</para></description><requires><para><emphasis>end</emphasis> is reachable from <emphasis>begin</emphasis> with a finite number of increments. </para>
</requires><postconditions><para>All iterators to the erased elements become invalid. </para>
</postconditions></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a03bfacfaaba9195e4498375659f43531" name="clear" cv="noexcept"><type>void</type><description><para>The method removes all elements from the container</para><para>
</para></description><postconditions><para><computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__set_1a3f6fc5de06a318920d84f3c3742db07f">empty()</link> == true</computeroutput> </para>
</postconditions></method>
</method-group>
</class>































<function id="doxygen.attributes.attribute__set_8hpp_1abaf76d38e79800220a1c3bbe9beb8daf" name="swap"><type>void</type><parameter name="left"><paramtype><classname>attribute_set</classname> &amp;</paramtype></parameter><parameter name="right"><paramtype><classname>attribute_set</classname> &amp;</paramtype></parameter><description><para>Free swap overload </para></description></function>



</namespace>
</namespace>
</header>
<header id="doxygen.attributes.attribute__value_8hpp" name="boost/log/attributes/attribute_value.hpp">
<para><para>Andrey Semashev </para>

<para>21.05.2010</para>

The header contains <computeroutput>attribute_value</computeroutput> class definition. </para><namespace name="boost">
<namespace name="log">
<class id="doxygen.attributes.classboost_1_1log_1_1attribute__value" name="attribute_value"><purpose>An attribute value class. </purpose><description><para>An attribute value is an object that contains a piece of data that represents an attribute state at the point of the value acquisition. All major operations with log records, such as filtering and formatting, involve attribute values contained in a single view. Most likely an attribute value is implemented as a simple holder of some typed value. This holder implements the <computeroutput>attribute_value::implementation</computeroutput> interface and acts as a pimpl for the <computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__value">attribute_value</link></computeroutput> object. The <computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__value">attribute_value</link></computeroutput> class provides type dispatching support in order to allow to extract the value from the holder.</para><para>Normally, attributes and their values shall be designed in order to exclude as much interference as reasonable. Such approach allows to have more than one attribute value simultaneously, which improves scalability and allows to implement generating attributes.</para><para>However, there are cases when this approach does not help to achieve the required level of independency of attribute values and attribute itself from each other at a reasonable performance tradeoff. For example, an attribute or its values may use thread-specific data, which is global and shared between all the instances of the attribute/value. Passing such an attribute value to another thread would be a disaster. To solve this the library defines an additional method for attribute values, namely <computeroutput>detach_from_thread</computeroutput>. The <computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__value">attribute_value</link></computeroutput> class forwards the call to its pimpl, which is supposed to ensure that it no longer refers to any thread-specific data after the call. The pimpl can create a new holder as a result of this method and return it to the <computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__value">attribute_value</link></computeroutput> wrapper, which will keep the returned reference for any further calls. This method is called for all attribute values that are passed to another thread. </para></description><struct id="doxygen.attributes.structboost_1_1log_1_1attribute__value_1_1impl" name="impl"><inherit access="public">attribute::impl</inherit><purpose>A base class for an attribute value implementation. </purpose><description><para>All attribute value holders should derive from this interface. </para></description><method-group name="public member functions">
<method id="doxygen.attributes.structboost_1_1log_1_1attribute__value_1_1impl_1a85d15d3947a6ac546a040b3a66bebdca" name="dispatch" cv="= 0" specifiers="virtual"><type>bool</type><parameter name="dispatcher"><paramtype>type_dispatcher &amp;</paramtype><description><para>The object that attempts to dispatch the stored value. </para></description></parameter><description><para>The method dispatches the value to the given object.</para><para>

</para></description><returns><para>true if <emphasis>dispatcher</emphasis> was capable to consume the real attribute value type and false otherwise. </para>
</returns></method>
<method id="doxygen.attributes.structboost_1_1log_1_1attribute__value_1_1impl_1ad8c01d519b0c4cd13b8312c8a171112f" name="detach_from_thread" specifiers="virtual"><type>intrusive_ptr&lt; <classname>impl</classname> &gt;</type><description><para>The method is called when the attribute value is passed to another thread (e.g. in case of asynchronous logging). The value should ensure it properly owns all thread-specific data.</para><para>
</para></description><returns><para>An actual pointer to the attribute value. It may either point to this object or another. In the latter case the returned pointer replaces the pointer used by caller to invoke this method and is considered to be a functional equivalent to the previous pointer. </para>
</returns></method>
<method id="doxygen.attributes.structboost_1_1log_1_1attribute__value_1_1impl_1aced82625dda2a6dbe15b17a7af1ade7e" name="get_value" specifiers="virtual"><type><classname>attribute_value</classname></type><description><para>
</para></description><returns><para>The attribute value that refers to self implementation. </para>
</returns></method>
<method id="doxygen.attributes.structboost_1_1log_1_1attribute__value_1_1impl_1ade64b885732eecd13116b6742c6e1262" name="get_type" cv="const" specifiers="virtual"><type>typeindex::type_index</type><description><para>
</para></description><returns><para>The attribute value type </para>
</returns></method>
</method-group>
</struct><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a50e8285a90d6da22438f84c93fde184e" cv="= default"><description><para>Default constructor. Creates an empty (absent) attribute value. </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1ad1a26e7392fd4b62b63c1b7030e284dc" cv="noexcept"><parameter name="that"><paramtype><classname>attribute_value</classname> const &amp;</paramtype></parameter><description><para>Copy constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a1a6ede2dbffa2fef73539d4d0a4ed2f2" cv="noexcept"><parameter name="that"><paramtype><classname>attribute_value</classname> &amp;&amp;</paramtype></parameter><description><para>Move constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1abb6b38c0c729f05ceb89d72ac8588873" specifiers="explicit" cv="noexcept"><parameter name="p"><paramtype>intrusive_ptr&lt; <classname>impl</classname> &gt;</paramtype><description><para>A pointer to the attribute value holder. </para></description></parameter><description><para>Initializing constructor. Creates an attribute value that refers to the specified holder.</para><para>
</para></description></constructor>
<copy-assignment id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1aa32f9254f7df584772908e696726114f" cv="noexcept"><type><classname>attribute_value</classname> &amp;</type><parameter name="that"><paramtype><classname>attribute_value</classname> const &amp;</paramtype></parameter><description><para>Copy assignment </para></description></copy-assignment>
<copy-assignment id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1ab728bb074f4d1c4c001d6da05aaaec22" cv="noexcept"><type><classname>attribute_value</classname> &amp;</type><parameter name="that"><paramtype><classname>attribute_value</classname> &amp;&amp;</paramtype></parameter><description><para>Move assignment </para></description></copy-assignment>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a420e60e9788bfa3b52aa3aab72ea3a5e" name="conversion-operator" cv="const noexcept" specifiers="explicit"><type>bool</type><description><para>The operator checks if the attribute value is empty </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1aa781ac6ac5a122ef2e89325c84d51f5a" name="operator!" cv="const noexcept"><type>bool</type><description><para>The operator checks if the attribute value is empty </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a8b0801c65e60042955f438af29486f96" name="get_type" cv="const"><type>typeindex::type_index</type><description><para>The method returns the type information of the stored value of the attribute. The returned type info wrapper may be empty if the attribute value is empty or the information cannot be provided. If the returned value is not empty, the type can be used for value extraction. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a27e3fe5eb1159cc0afd1952c8b553cd1" name="detach_from_thread"><type>void</type><description><para>The method is called when the attribute value is passed to another thread (e.g. in case of asynchronous logging). The value should ensure it properly owns all thread-specific data.</para><para>
</para></description><postconditions><para>The attribute value no longer refers to any thread-specific resources. </para>
</postconditions></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a9de51bd06d2c119ac64182b4207af539" name="dispatch" cv="const"><type>bool</type><parameter name="dispatcher"><paramtype>type_dispatcher &amp;</paramtype><description><para>The object that attempts to dispatch the stored value. </para></description></parameter><description><para>The method dispatches the value to the given object. This method is a low level interface for attribute value visitation and extraction. For typical usage these interfaces may be more convenient.</para><para>

</para></description><returns><para><computeroutput>true</computeroutput> if the value is not empty and the <emphasis>dispatcher</emphasis> was capable to consume the real attribute value type and <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a18bddfc99456384eaf254f1709ca0bd7" name="extract" cv="const"><type><classname>result_of::extract</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><description><para>The method attempts to extract the stored value, assuming the value has the specified type. One can specify either a single type or an MPL type sequence, in which case the stored value is checked against every type in the sequence.</para><para><note><para>Include <computeroutput><link linkend="doxygen.attributes.value__extraction_8hpp">value_extraction.hpp</link></computeroutput> prior to using this method.</para>
</note>

</para></description><returns><para>The extracted value, if the attribute value is not empty and the value is the same as specified. Otherwise returns an empty value. See description of the <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1result__of_1_1extract">result_of::extract</link></computeroutput> metafunction for information on the nature of the result value. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1afc89489fe08cc8433f3523cfc8d1532a" name="extract_or_throw" cv="const"><type><classname>result_of::extract_or_throw</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><description><para>The method attempts to extract the stored value, assuming the value has the specified type. One can specify either a single type or an MPL type sequence, in which case the stored value is checked against every type in the sequence.</para><para><note><para>Include <computeroutput><link linkend="doxygen.attributes.value__extraction_8hpp">value_extraction.hpp</link></computeroutput> prior to using this method.</para>
</note>

</para></description><returns><para>The extracted value, if the attribute value is not empty and the value is the same as specified. Otherwise an exception is thrown. See description of the <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1result__of_1_1extract__or__throw">result_of::extract_or_throw</link></computeroutput> metafunction for information on the nature of the result value. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a402ff83c7896d934c25424cc1677f968" name="extract_or_default" cv="const"><type><classname>result_of::extract_or_default</classname>&lt; T, T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="def_value"><paramtype>T const &amp;</paramtype><description><para>Default value.</para></description></parameter><description><para>The method attempts to extract the stored value, assuming the value has the specified type. One can specify either a single type or an MPL type sequence, in which case the stored value is checked against every type in the sequence. If extraction fails, the default value is returned.</para><para><note><para>Include <computeroutput><link linkend="doxygen.attributes.value__extraction_8hpp">value_extraction.hpp</link></computeroutput> prior to using this method.</para>
</note>


</para></description><returns><para>The extracted value, if the attribute value is not empty and the value is the same as specified. Otherwise returns the default value. See description of the <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1result__of_1_1extract__or__default">result_of::extract_or_default</link></computeroutput> metafunction for information on the nature of the result value. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1a3d50525f95c61df5357a50fa6771709a" name="extract_or_default" cv="const"><type><classname>result_of::extract_or_default</classname>&lt; T, DefaultT, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
          <template-type-parameter name="DefaultT"/>
        </template><parameter name="def_value"><paramtype>DefaultT const &amp;</paramtype><description><para>Default value.</para></description></parameter><description><para>The method attempts to extract the stored value, assuming the value has the specified type. One can specify either a single type or an MPL type sequence, in which case the stored value is checked against every type in the sequence. If extraction fails, the default value is returned.</para><para><note><para>Include <computeroutput><link linkend="doxygen.attributes.value__extraction_8hpp">value_extraction.hpp</link></computeroutput> prior to using this method.</para>
</note>


</para></description><returns><para>The extracted value, if the attribute value is not empty and the value is the same as specified. Otherwise returns the default value. See description of the <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1result__of_1_1extract__or__default">result_of::extract_or_default</link></computeroutput> metafunction for information on the nature of the result value. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1ad1b284d020019eef5b0f1db930536c1f" name="visit" cv="const"><type><classname>visitation_result</classname></type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A function object that will be invoked on the extracted attribute value. The visitor should be capable to be called with a single argument of any type of the specified types in <computeroutput>T</computeroutput>.</para></description></parameter><description><para>The method attempts to extract the stored value, assuming the value has the specified type, and pass it to the <emphasis>visitor</emphasis> function object. One can specify either a single type or an MPL type sequence, in which case the stored value is checked against every type in the sequence.</para><para><note><para>Include <computeroutput><link linkend="doxygen.attributes.value__visitation_8hpp">value_visitation.hpp</link></computeroutput> prior to using this method.</para>
</note>


</para></description><returns><para>The result of visitation. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value_1ad340b1cd96de992bc8febe9141f81da9" name="swap" cv="noexcept"><type>void</type><parameter name="that"><paramtype><classname>attribute_value</classname> &amp;</paramtype></parameter><description><para>The method swaps two attribute values </para></description></method>
</method-group>
</class>






























<function id="doxygen.attributes.attribute__value_8hpp_1a1ed608fee1b0e3da94e240abfa11a3a1" name="swap"><type>void</type><parameter name="left"><paramtype><classname>attribute_value</classname> &amp;</paramtype></parameter><parameter name="right"><paramtype><classname>attribute_value</classname> &amp;</paramtype></parameter><description><para>The function swaps two attribute values </para></description></function>




</namespace>
</namespace>
</header>
<header id="doxygen.attributes.attribute__value__impl_8hpp" name="boost/log/attributes/attribute_value_impl.hpp">
<para><para>Andrey Semashev </para>

<para>24.06.2007</para>

The header contains an implementation of a basic attribute value implementation class. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1attribute__value__impl" name="attribute_value_impl"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">attribute_value::impl</inherit><purpose>Basic attribute value implementation class. </purpose><description><para>This class can be used as a boilerplate for simple attribute values. The class implements all needed interfaces of attribute values and allows to store a single value of the type specified as a template parameter. The stored value can be dispatched with type dispatching mechanism. </para></description><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1attribute__value__impl_1a1bb7b4a35643ef79447e08e975edc592" name="value_type"><purpose>Value type. </purpose><type>T</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1attribute__value__impl_1a4adcdfe3a8ac2af3635f4d211020a169" specifiers="explicit"><parameter name="v"><paramtype>value_type const &amp;</paramtype></parameter><description><para>Constructor with initialization of the stored value </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1attribute__value__impl_1a08f0ddaeebade15d3d6bc542972d8552" specifiers="explicit"><parameter name="v"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>Constructor with initialization of the stored value </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1attribute__value__impl_1aeb79211612ef284f637e96643abd5519" name="dispatch" specifiers="virtual"><type>bool</type><parameter name="dispatcher"><paramtype>type_dispatcher &amp;</paramtype><description><para>The dispatcher that receives the stored value</para></description></parameter><description><para>Attribute value dispatching method.</para><para>

</para></description><returns><para><computeroutput>true</computeroutput> if the value has been dispatched, <computeroutput>false</computeroutput> otherwise </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1attribute__value__impl_1a5f6a8053a145d828bd276096c2959f9c" name="get_type" cv="const" specifiers="virtual"><type>typeindex::type_index</type><description><para>
</para></description><returns><para>The attribute value type </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1attribute__value__impl_1a65883ce8663b595b03ae77495d0cef8f" name="get" cv="const"><type>value_type const &amp;</type><description><para>
</para></description><returns><para>Reference to the contained value. </para>
</returns></method>
</method-group>
</class>


<function id="doxygen.attributes.attribute__value__impl_8hpp_1a4d58e54ae1e872e745d79d4da79b0e82" name="make_attribute_value"><type><classname>attribute_value</classname></type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="v"><paramtype>T &amp;&amp;</paramtype></parameter><description><para>The function creates an attribute value from the specified object. </para></description></function>
</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.attribute__value__set_8hpp" name="boost/log/attributes/attribute_value_set.hpp">
<para><para>Andrey Semashev </para>

<para>21.04.2007</para>

This header file contains definition of attribute value set. The set is constructed from three attribute sets (global, thread-specific and source-specific) and contains attribute values. </para><namespace name="boost">
<namespace name="log">
<class id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set" name="attribute_value_set"><purpose>A set of attribute values. </purpose><description><para>The set of attribute values is an associative container with attribute name as a key and a pointer to attribute value object as a mapped type. This is a collection of elements with unique keys, that is, there can be only one attribute value with a given name in the set. With respect to read-only capabilities, the set interface is close to <computeroutput>std::unordered_map</computeroutput>.</para><para>The set is designed to be only capable of adding elements to it. Once added, the attribute value cannot be removed from the set.</para><para>An instance of attribute value set can be constructed from three attribute sets. The constructor attempts to accommodate values of all attributes from the sets. The situation when a same-named attribute is found in more than one attribute set is possible. This problem is solved on construction of the value set: the three attribute sets have different priorities when it comes to solving conflicts.</para><para>From the library perspective the three source attribute sets are global, thread-specific and source-specific attributes, with the latter having the highest priority. This feature allows to override attributes of wider scopes with the more specific ones.</para><para>For sake of performance, the attribute values are not immediately acquired from attribute sets at construction. Instead, on-demand acquisition is performed either on iterator dereferencing or on call to the <computeroutput>freeze</computeroutput> method. Once acquired, the attribute value stays within the set until its destruction. This nuance does not affect other set properties, such as size or lookup ability. The logging core automatically freezes the set at the right point, so users should not be bothered unless they manually create attribute value sets.</para><para><note><para>The attribute sets that were used for the value set construction must not be modified or destroyed until the value set is frozen. Otherwise the behavior is undefined. </para>
</note>
</para></description><typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1ae83ed7780aee0da251184571648dafc4" name="key_type"><purpose>Key type. </purpose><type><classname>attribute_name</classname></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a5d1a82b20adf6e9842711ae1c02a69eb" name="mapped_type"><purpose>Mapped attribute type. </purpose><type><classname>attribute_value</classname></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1ae2120f6b234ed0ab2a1fa585f072af5f" name="value_type"><purpose>Value type. </purpose><type>std::pair&lt; const key_type, mapped_type &gt;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a1824ec83e5a41c4a5a3030992c180990" name="reference"><purpose>Reference type. </purpose><type>value_type &amp;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1aead17d93276c26b711136dadfb2b33bb" name="const_reference"><purpose>Const reference type. </purpose><type>value_type const &amp;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1aaa1e72ad8a618a230c65fcd8103195a4" name="pointer"><purpose>Pointer type. </purpose><type>value_type *</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1aa81ebde206c42bb02f48b75b591197ae" name="const_pointer"><purpose>Const pointer type. </purpose><type>value_type const *</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a9fb3bf5eb6532a60d9735401037fa365" name="size_type"><purpose>Size type. </purpose><type>std::size_t</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a541d05599a44c77a2728e5b2686e5881" name="difference_type"><purpose>Pointer difference type. </purpose><type>std::ptrdiff_t</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a20cfb0458c5f7684b1f0a48dc497f2e1" name="const_iterator"><description><para>Constant iterator type with bidirectional capabilities. </para></description><type>implementation_defined</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a5c8a11a869485c79331a0da15f1d2f96" specifiers="explicit"><parameter name="reserve_count"><paramtype>size_type</paramtype><default>8</default><description><para>Number of elements to reserve space for. </para></description></parameter><description><para>Default constructor</para><para>The constructor creates an empty set which can be filled later by subsequent calls of <computeroutput>insert</computeroutput> method. Optionally, the amount of storage reserved for elements to be inserted may be passed to the constructor. The constructed set is frozen.</para><para>
</para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a09b0efa8da21ecef2852543eb5da585a" cv="noexcept"><parameter name="that"><paramtype><classname>attribute_value_set</classname> &amp;&amp;</paramtype></parameter><description><para>Move constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a812ebf1d11f83fb97aa9e13c5d39d2a0"><parameter name="source_attrs"><paramtype><classname>attribute_set</classname> const &amp;</paramtype><description><para>A set of source-specific attributes. </para></description></parameter><parameter name="thread_attrs"><paramtype><classname>attribute_set</classname> const &amp;</paramtype><description><para>A set of thread-specific attributes. </para></description></parameter><parameter name="global_attrs"><paramtype><classname>attribute_set</classname> const &amp;</paramtype><description><para>A set of global attributes. </para></description></parameter><parameter name="reserve_count"><paramtype>size_type</paramtype><default>8</default><description><para>Amount of elements to reserve space for, in addition to the elements in the three attribute sets provided. </para></description></parameter><description><para>The constructor adopts three attribute sets into the value set. The <emphasis>source_attrs</emphasis> attributes have the greatest preference when a same-named attribute is found in several sets, <emphasis>global_attrs</emphasis> has the least. The constructed set is not frozen.</para><para>
</para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1aa6507e0eb427472900aafec79cb6a7eb"><parameter name="source_attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of source-specific attributes. </para></description></parameter><parameter name="thread_attrs"><paramtype><classname>attribute_set</classname> const &amp;</paramtype><description><para>A set of thread-specific attributes. </para></description></parameter><parameter name="global_attrs"><paramtype><classname>attribute_set</classname> const &amp;</paramtype><description><para>A set of global attributes. </para></description></parameter><parameter name="reserve_count"><paramtype>size_type</paramtype><default>8</default><description><para>Amount of elements to reserve space for, in addition to the elements in the three attribute sets provided. </para></description></parameter><description><para>The constructor adopts three attribute sets into the value set. The <emphasis>source_attrs</emphasis> attributes have the greatest preference when a same-named attribute is found in several sets, <emphasis>global_attrs</emphasis> has the least. The constructed set is not frozen.</para><para>

</para></description><requires><para>The <emphasis>source_attrs</emphasis> set is frozen.</para>
</requires></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a20740fbc09558d217d8f705ed48e7848"><parameter name="source_attrs"><paramtype><classname>attribute_value_set</classname> &amp;&amp;</paramtype><description><para>A set of source-specific attributes. </para></description></parameter><parameter name="thread_attrs"><paramtype><classname>attribute_set</classname> const &amp;</paramtype><description><para>A set of thread-specific attributes. </para></description></parameter><parameter name="global_attrs"><paramtype><classname>attribute_set</classname> const &amp;</paramtype><description><para>A set of global attributes. </para></description></parameter><parameter name="reserve_count"><paramtype>size_type</paramtype><default>8</default><description><para>Amount of elements to reserve space for, in addition to the elements in the three attribute sets provided. </para></description></parameter><description><para>The constructor adopts three attribute sets into the value set. The <emphasis>source_attrs</emphasis> attributes have the greatest preference when a same-named attribute is found in several sets, <emphasis>global_attrs</emphasis> has the least. The constructed set is not frozen.</para><para>

</para></description><requires><para>The <emphasis>source_attrs</emphasis> set is frozen.</para>
</requires></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1af753d62a6f5381d52274678cc55bc6aa"><parameter name="that"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype></parameter><description><para>Copy constructor.</para><para>

</para></description><requires><para>The original set is frozen. </para>
</requires><postconditions><para>The constructed set is frozen, <computeroutput>std::equal(<link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a29305669b60ca1680752e2fc3592ba99">begin()</link>, <link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1accf9a4bd0c34d4a5f6a7dab66ea10cdc">end()</link>, that.begin()) == true</computeroutput> </para>
</postconditions></constructor>
<destructor id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a1223800e013fdae048d636e74f515d15" cv="noexcept"><description><para>Destructor. Releases all referenced attribute values. </para></description></destructor>
<copy-assignment id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1ac51c9444d1ce1fadc75f981076e26d7a" cv="noexcept"><type><classname>attribute_value_set</classname> &amp;</type><parameter name="that"><paramtype><classname>attribute_value_set</classname></paramtype></parameter><description><para>Assignment operator </para></description></copy-assignment>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a061ae08fe95889fc4b94a21b42501fe2" name="swap" cv="noexcept"><type>void</type><parameter name="that"><paramtype><classname>attribute_value_set</classname> &amp;</paramtype></parameter><description><para>Swaps two sets</para><para><emphasis role="bold">Throws:</emphasis> Nothing. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a29305669b60ca1680752e2fc3592ba99" name="begin" cv="const"><type>const_iterator</type><description><para>
</para></description><returns><para>Iterator to the first element of the set. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1accf9a4bd0c34d4a5f6a7dab66ea10cdc" name="end" cv="const"><type>const_iterator</type><description><para>
</para></description><returns><para>Iterator to the after-the-last element of the set. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a60304b65bf89363bcc3165d3cde67f86" name="size" cv="const"><type>size_type</type><description><para>
</para></description><returns><para>Number of elements in the set. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a644718bb2fb240de962dc3c9a1fdf0dc" name="empty" cv="const"><type>bool</type><description><para>
</para></description><returns><para><computeroutput>true</computeroutput> if there are no elements in the container, <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a4049314fda82383fd668b947b9f76aa4" name="find" cv="const"><type>const_iterator</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>The method finds the attribute value by name.</para><para>

</para></description><returns><para>Iterator to the found element or <computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1accf9a4bd0c34d4a5f6a7dab66ea10cdc">end()</link></computeroutput> if the attribute with such name is not found. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a2af37c2660afe66127266e93e2da5730" name="operator[]" cv="const"><type>mapped_type</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>Alternative lookup syntax.</para><para>

</para></description><returns><para>A pointer to the attribute value if it is found with <emphasis>key</emphasis>, default-constructed mapped value otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a014af019abe0981714090208d3faf787" name="operator[]" cv="const"><type><classname>result_of::extract</classname>&lt; typenameexpressions::attribute_keyword&lt; DescriptorT, ActorT &gt;::value_type, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>Attribute keyword. </para></description></parameter><description><para>Alternative lookup syntax.</para><para>

</para></description><returns><para>A <computeroutput>value_ref</computeroutput> with extracted attribute value if it is found, empty <computeroutput>value_ref</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1a3804d73aaf7718f7e1af986a1e65e0e3" name="count" cv="const"><type>size_type</type><parameter name="key"><paramtype>key_type</paramtype><description><para>Attribute name. </para></description></parameter><description><para>The method counts the number of the attribute value occurrences in the set. Since there can be only one attribute value with a particular key, the method always return 0 or 1.</para><para>

</para></description><returns><para>The number of times the attribute value is found in the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1abd8698b462ce90fe56b15ce7a0192d3e" name="freeze"><type>void</type><description><para>The method acquires values of all adopted attributes.</para><para>
</para></description><postconditions><para>The set is frozen. </para>
</postconditions></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1aec0ff1a730430b1091b14420bdbd10c2" name="insert"><type>std::pair&lt; const_iterator, bool &gt;</type><parameter name="key"><paramtype>key_type</paramtype><description><para>The attribute name. </para></description></parameter><parameter name="mapped"><paramtype>mapped_type const &amp;</paramtype><description><para>The attribute value.</para></description></parameter><description><para>Inserts an element into the set. The complexity of the operation is amortized constant.</para><para>


</para></description><requires><para>The set is frozen.</para>
</requires><returns><para>An iterator to the inserted element and <computeroutput>true</computeroutput> if insertion succeeded. Otherwise, if the set already contains a same-named attribute value, iterator to the existing element and <computeroutput>false</computeroutput>. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1ad701bb6c56eb70a8eb1603c3689941ac" name="insert"><type>std::pair&lt; const_iterator, bool &gt;</type><parameter name="value"><paramtype>const_reference</paramtype><description><para>The attribute name and value.</para></description></parameter><description><para>Inserts an element into the set. The complexity of the operation is amortized constant.</para><para>


</para></description><requires><para>The set is frozen.</para>
</requires><returns><para>An iterator to the inserted element and <computeroutput>true</computeroutput> if insertion succeeded. Otherwise, if the set already contains a same-named attribute value, iterator to the existing element and <computeroutput>false</computeroutput>. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1ae134e123cdc3e11873fd1c18bbc4dd30" name="insert"><type>void</type><template>
          <template-type-parameter name="FwdIteratorT"/>
        </template><parameter name="begin"><paramtype>FwdIteratorT</paramtype><description><para>A forward iterator that points to the first element to be inserted. </para></description></parameter><parameter name="end"><paramtype>FwdIteratorT</paramtype><description><para>A forward iterator that points to the after-the-last element to be inserted. </para></description></parameter><description><para>Mass insertion method. The complexity of the operation is linear to the number of elements inserted.</para><para>

</para></description><requires><para>The set is frozen.</para>
</requires></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attribute__value__set_1afa0fb921dbc8c82481e7bed38dd77133" name="insert"><type>void</type><template>
          <template-type-parameter name="FwdIteratorT"/>
          <template-type-parameter name="OutputIteratorT"/>
        </template><parameter name="begin"><paramtype>FwdIteratorT</paramtype><description><para>A forward iterator that points to the first element to be inserted. </para></description></parameter><parameter name="end"><paramtype>FwdIteratorT</paramtype><description><para>A forward iterator that points to the after-the-last element to be inserted. </para></description></parameter><parameter name="out"><paramtype>OutputIteratorT</paramtype><description><para>An output iterator that receives results of insertion of the elements. </para></description></parameter><description><para>Mass insertion method with ability to acquire iterators to the inserted elements. The complexity of the operation is linear to the number of elements inserted times the complexity of filling the <emphasis>out</emphasis> iterator.</para><para>

</para></description><requires><para>The set is frozen.</para>
</requires></method>
</method-group>
</class>





























<function id="doxygen.attributes.attribute__value__set_8hpp_1ab0b63cc84226502459044f57505574d7" name="swap"><type>void</type><parameter name="left"><paramtype><classname>attribute_value_set</classname> &amp;</paramtype></parameter><parameter name="right"><paramtype><classname>attribute_value_set</classname> &amp;</paramtype></parameter><description><para>Free swap overload </para></description></function>





</namespace>
</namespace>
</header>
<header id="doxygen.attributes.clock_8hpp" name="boost/log/attributes/clock.hpp">
<para><para>Andrey Semashev </para>

<para>01.12.2007</para>

The header contains wall clock attribute implementation and typedefs. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1basic__clock" name="basic_clock"><template>
      <template-type-parameter name="TimeTraitsT"/>
    </template><inherit access="public">attribute</inherit><purpose>A class of an attribute that makes an attribute value of the current date and time. </purpose><description><para>The attribute generates current time stamp as a value. The type of the attribute value is determined with time traits passed to the class template as a template parameter. The time traits provided by the library use <computeroutput>boost::posix_time::ptime</computeroutput> as the time type.</para><para>Time traits also determine the way time is acquired. There are two types of time traits provided by the library: <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1attributes_1_1utc__time__traits">utc_time_traits</link></computeroutput> and <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1attributes_1_1local__time__traits">local_time_traits</link></computeroutput>. The first returns UTC time, the second returns local time. </para></description><struct id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1basic__clock_1_1impl" name="impl"><inherit access="public">attribute::impl</inherit><purpose>Attribute factory implementation. </purpose><method-group name="public member functions">
<method id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1basic__clock_1_1impl_1a5eb9da3b0518847f0b7ad02731ff47f0" name="get_value" specifiers="virtual"><type><classname>attribute_value</classname></type><description><para>
</para></description><returns><para>The actual attribute value. It shall not return empty values (exceptions shall be used to indicate errors). </para>
</returns></method>
</method-group>
</struct><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1basic__clock_1ae956e3000ac8cae7cb479b58f1333b58" name="value_type"><purpose>Generated value type. </purpose><type>TimeTraitsT::time_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1basic__clock_1a4181f1d2dd01effc78ced5a59ab06ef9"><description><para>Default constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1basic__clock_1a10a27ac72df5e10b14e40d6ffee32020" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
</method-group>
</class><typedef id="doxygen.attributes.clock_8hpp_1adba81e923229e4d37025a934748fc4c5" name="utc_clock"><purpose>Attribute that returns current UTC time. </purpose><type><classname>basic_clock</classname>&lt; <classname>utc_time_traits</classname> &gt;</type></typedef>
<typedef id="doxygen.attributes.clock_8hpp_1a72cdaee24619664981f96f5f24d31311" name="local_clock"><purpose>Attribute that returns current local time. </purpose><type><classname>basic_clock</classname>&lt; <classname>local_time_traits</classname> &gt;</type></typedef>




</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.constant_8hpp" name="boost/log/attributes/constant.hpp">
<para><para>Andrey Semashev </para>

<para>15.04.2007</para>

The header contains implementation of a constant attribute. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant" name="constant"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">attribute</inherit><purpose>A class of an attribute that holds a single constant value. </purpose><description><para>The constant is a simplest and one of the most frequently used types of attributes. It stores a constant value, which it eventually returns as its value each time requested. </para></description><class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant_1_1impl" name="impl"><inherit access="public">attribute_value_impl&lt; value_type &gt;</inherit><purpose>Factory implementation. </purpose><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant_1_1impl_1ace1c4aeb69ccc7c68a76e3b45c8c28a3" specifiers="explicit"><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter><description><para>Constructor with the stored value initialization </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant_1_1impl_1a6da0f64288dc91e27818407d12580728" specifiers="explicit"><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>Constructor with the stored value initialization </para></description></constructor>
</method-group>
</class><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant_1a1bb7b4a35643ef79447e08e975edc592" name="value_type"><purpose>Attribute value type. </purpose><type>T</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant_1aa1abcac7d1a6129aeb3702a89c7ae809" specifiers="explicit"><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter><description><para>Constructor with the stored value initialization </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant_1a8e2c7123379490d14d9786a50e3980ed" specifiers="explicit"><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>Constructor with the stored value initialization </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant_1a06420ed2b740af0db6d3294d8e81adc4" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1constant_1a65883ce8663b595b03ae77495d0cef8f" name="get" cv="const"><type>value_type const &amp;</type><description><para>
</para></description><returns><para>Reference to the contained value. </para>
</returns></method>
</method-group>
</class>

<function id="doxygen.attributes.constant_8hpp_1ad543f2143ade8eba73f797367a5ed40d" name="make_constant"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="val"><paramtype>BOOST_FWD_REF(T)</paramtype></parameter><description><para>The function constructs a <computeroutput>constant</computeroutput> attribute containing the provided value. The function automatically converts C string arguments to <computeroutput>std::basic_string</computeroutput> objects. </para></description></function>

</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.counter_8hpp" name="boost/log/attributes/counter.hpp">
<para><para>Andrey Semashev </para>

<para>01.05.2007</para>

The header contains implementation of the counter attribute. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1counter" name="counter"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">attribute</inherit><purpose>A class of an attribute that counts an integral value. </purpose><description><para>This attribute acts as a counter - it returns a monotonously changing value each time requested. The attribute value type can be specified as a template parameter. The type must be an integral type. </para></description><class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1counter_1_1impl" name="impl"><inherit access="public">attribute::impl</inherit><purpose>Factory implementation. </purpose><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1counter_1_1impl_1a673799f76d1f74e960478376e1d1c979" cv="noexcept"><parameter name="initial"><paramtype>value_type</paramtype></parameter><parameter name="step"><paramtype>value_type</paramtype></parameter></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1counter_1_1impl_1a5eb9da3b0518847f0b7ad02731ff47f0" name="get_value" specifiers="virtual"><type><classname>attribute_value</classname></type><description><para>
</para></description><returns><para>The actual attribute value. It shall not return empty values (exceptions shall be used to indicate errors). </para>
</returns></method>
</method-group>
</class><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1counter_1a1bb7b4a35643ef79447e08e975edc592" name="value_type"><purpose>A counter value type. </purpose><type>T</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1counter_1aeb008859a56f33a02e0ca2e639b59b0a" specifiers="explicit"><parameter name="initial"><paramtype>value_type</paramtype><default>(value_type) 0</default><description><para>Initial value of the counter </para></description></parameter><parameter name="step"><paramtype>value_type</paramtype><default>(value_type) 1</default><description><para>Changing step of the counter. Each value acquired from the attribute will be greater than the previous one by this amount. </para></description></parameter><description><para>Constructor</para><para>
</para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1counter_1ac3f16bf25ac56bd06c15291f0cf64957" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
</method-group>
</class>



</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.current__process__id_8hpp" name="boost/log/attributes/current_process_id.hpp">
<para><para>Andrey Semashev </para>

<para>12.09.2009</para>

The header contains implementation of a current process id attribute </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__process__id" name="current_process_id"><inherit access="public">constant&lt; process_id &gt;</inherit><purpose>A class of an attribute that holds the current process identifier. </purpose><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__process__id_1aaf0c4f0ca511c069b1f768c4f8a018ac"><description><para>Constructor. Initializes the attribute with the current process identifier. </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__process__id_1a94ba30f9699611e496bcfb09ff1e2018" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
</method-group>
</class>



</namespace>
<typedef id="doxygen.attributes.current__process__id_8hpp_1a4dd9805e23a3d0880408cc00a542b582" name="process_id"><purpose>Process identifier type used by the library. </purpose><type><emphasis>unspecified</emphasis></type></typedef>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.current__process__name_8hpp" name="boost/log/attributes/current_process_name.hpp">
<para><para>Andrey Semashev </para>

<para>29.07.2012</para>

The header contains implementation of a current process name attribute </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__process__name" name="current_process_name"><inherit access="public">constant&lt; std::string &gt;</inherit><purpose>A class of an attribute that holds the current process name. </purpose><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__process__name_1aa096f82590db624cf4b84cc639f23a0a"><description><para>Constructor. Initializes the attribute with the current process name. </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__process__name_1ad6c24c5e480ed57b68993e7657e3c8c7" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
</method-group>
</class>



</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.current__thread__id_8hpp" name="boost/log/attributes/current_thread_id.hpp">
<para><para>Andrey Semashev </para>

<para>12.09.2009</para>

The header contains implementation of a current thread id attribute </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__thread__id" name="current_thread_id"><inherit access="public">attribute</inherit><purpose>A class of an attribute that always returns the current thread identifier. </purpose><description><para><note><para>This attribute can be registered globally, it will still return the correct thread identifier, no matter which thread emits the log record. </para>
</note>
</para></description><class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__thread__id_1_1impl" name="impl"><inherit access="public">attribute_value::impl</inherit><purpose>Factory implementation. </purpose><method-group name="public member functions">
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__thread__id_1_1impl_1af09728c56ea47778b9ba5ce27e142a39" name="dispatch" specifiers="virtual"><type>bool</type><parameter name="dispatcher"><paramtype>type_dispatcher &amp;</paramtype><description><para>The object that attempts to dispatch the stored value. </para></description></parameter><description><para>The method dispatches the value to the given object.</para><para>

</para></description><returns><para>true if <emphasis>dispatcher</emphasis> was capable to consume the real attribute value type and false otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__thread__id_1_1impl_1a237264f0f80aee998313df2df03e4955" name="detach_from_thread" specifiers="virtual"><type>intrusive_ptr&lt; <classname>attribute_value::impl</classname> &gt;</type><description><para>The method is called when the attribute value is passed to another thread (e.g. in case of asynchronous logging). The value should ensure it properly owns all thread-specific data.</para><para>
</para></description><returns><para>An actual pointer to the attribute value. It may either point to this object or another. In the latter case the returned pointer replaces the pointer used by caller to invoke this method and is considered to be a functional equivalent to the previous pointer. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__thread__id_1_1impl_1a8b0801c65e60042955f438af29486f96" name="get_type" cv="const" specifiers="virtual"><type>typeindex::type_index</type><description><para>
</para></description><returns><para>The attribute value type </para>
</returns></method>
</method-group>
</class><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__thread__id_1a8747365c5be56d627c0b6c42bde14c68" name="value_type"><purpose>A held attribute value type. </purpose><type>thread_id</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__thread__id_1ad10bc1ad4153875815c02ba09d4cffe8"><description><para>Default constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1current__thread__id_1a4ac427577611785fb5ee0221cf92b8ef" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
</method-group>
</class>



</namespace>
<typedef id="doxygen.attributes.current__thread__id_8hpp_1ab6129441ba23ad42d391bffe8c1aec88" name="thread_id"><purpose>Thread identifier type. </purpose><type><emphasis>unspecified</emphasis></type></typedef>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.fallback__policy_8hpp" name="boost/log/attributes/fallback_policy.hpp">
<para><para>Andrey Semashev </para>

<para>18.08.2012</para>

The header contains definition of fallback policies when attribute value visitation or extraction fails. </para><namespace name="boost">
<namespace name="log">
<struct id="doxygen.attributes.structboost_1_1log_1_1fallback__to__none" name="fallback_to_none"><description><para>The <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1fallback__to__none">fallback_to_none</link></computeroutput> policy results in returning an empty value reference if the attribute value cannot be extracted. </para></description><enum id="doxygen.attributes.structboost_1_1log_1_1fallback__to__none_1a06fc87d81c62e9abb8790b6e5713c55b" name=""><enumvalue id="doxygen.attributes.structboost_1_1log_1_1fallback__to__none_1a06fc87d81c62e9abb8790b6e5713c55baa7e5f395d495629a2290ee0628212452" name="guaranteed_result"><default>false</default></enumvalue></enum>
<method-group name="public static functions">
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__none_1a3996a76046ad683963ea945e40c2e6b4" name="apply_default" specifiers="static"><type>bool</type><template>
          <template-type-parameter name="FunT"/>
        </template><parameter name=""><paramtype>FunT &amp;</paramtype></parameter><description><para>The method is called in order to apply a function object to the default value. </para></description></method>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__none_1aa38f3ee066b7f3172d86430050c306b6" name="apply_default" specifiers="static"><type>bool</type><template>
          <template-type-parameter name="FunT"/>
        </template><parameter name=""><paramtype>FunT const &amp;</paramtype></parameter><description><para>The method is called in order to apply a function object to the default value. </para></description></method>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__none_1a6a8ce80e169976ea555ec74cd2f5348d" name="on_invalid_type" specifiers="static"><type>void</type><parameter name=""><paramtype>typeindex::type_index const &amp;</paramtype></parameter><description><para>The method is called when value extraction failed because the attribute value has different type than requested. </para></description></method>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__none_1aefc1e23a960bb78c923d2e65f475ff6d" name="on_missing_value" specifiers="static"><type>void</type><description><para>The method is called when value extraction failed because the attribute value was not found. </para></description></method>
</method-group>
</struct><struct id="doxygen.attributes.structboost_1_1log_1_1fallback__to__throw" name="fallback_to_throw"><description><para>The <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1fallback__to__throw">fallback_to_throw</link></computeroutput> policy results in throwing an exception if the attribute value cannot be extracted. </para></description><enum id="doxygen.attributes.structboost_1_1log_1_1fallback__to__throw_1adf764cbdea00d65edcd07bb9953ad2b7" name=""><enumvalue id="doxygen.attributes.structboost_1_1log_1_1fallback__to__throw_1adf764cbdea00d65edcd07bb9953ad2b7aa7e5f395d495629a2290ee0628212452" name="guaranteed_result"><default>true</default></enumvalue></enum>
<method-group name="public static functions">
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__throw_1a3996a76046ad683963ea945e40c2e6b4" name="apply_default" specifiers="static"><type>bool</type><template>
          <template-type-parameter name="FunT"/>
        </template><parameter name=""><paramtype>FunT &amp;</paramtype></parameter><description><para>The method is called in order to apply a function object to the default value. </para></description></method>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__throw_1aa38f3ee066b7f3172d86430050c306b6" name="apply_default" specifiers="static"><type>bool</type><template>
          <template-type-parameter name="FunT"/>
        </template><parameter name=""><paramtype>FunT const &amp;</paramtype></parameter><description><para>The method is called in order to apply a function object to the default value. </para></description></method>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__throw_1a509a33b3bd63d4267fb17bdb7d3cdd76" name="on_invalid_type" specifiers="static"><type>void</type><parameter name="t"><paramtype>typeindex::type_index const &amp;</paramtype></parameter><description><para>The method is called when value extraction failed because the attribute value has different type than requested. </para></description></method>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__throw_1aefc1e23a960bb78c923d2e65f475ff6d" name="on_missing_value" specifiers="static"><type>void</type><description><para>The method is called when value extraction failed because the attribute value was not found. </para></description></method>
</method-group>
</struct>



































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.fallback__policy__fwd_8hpp" name="boost/log/attributes/fallback_policy_fwd.hpp">
<para><para>Andrey Semashev </para>

<para>18.08.2012</para>

The header contains forward declaration of fallback policies when attribute value visitation or extraction fails. </para><namespace name="boost">
<namespace name="log">
<struct id="doxygen.attributes.structboost_1_1log_1_1fallback__to__default" name="fallback_to_default"><template>
      <template-type-parameter name="DefaultT"/>
    </template><description><para>The <computeroutput><link linkend="doxygen.attributes.structboost_1_1log_1_1fallback__to__default">fallback_to_default</link></computeroutput> policy results in a default value if the attribute value cannot be extracted. </para></description><method-group name="public member functions">
<constructor id="doxygen.attributes.structboost_1_1log_1_1fallback__to__default_1a41cf2b3adca89b75f1c16a95477ec7b1"><description><para>Default constructor. </para></description></constructor>
<constructor id="doxygen.attributes.structboost_1_1log_1_1fallback__to__default_1a2506c0b1ca658f6a70a5ea7801c77636" specifiers="explicit"><parameter name="def_val"><paramtype>default_type const &amp;</paramtype></parameter><description><para>Initializing constructor. </para></description></constructor>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__default_1a98d416ba77fca1039ab0d313adb54533" name="apply_default" cv="const"><type>bool</type><template>
          <template-type-parameter name="FunT"/>
        </template><parameter name="fun"><paramtype>FunT &amp;</paramtype></parameter><description><para>The method is called in order to apply a function object to the default value. </para></description></method>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__default_1a7540429f183ceba7623e51f0a855cc49" name="apply_default" cv="const"><type>bool</type><template>
          <template-type-parameter name="FunT"/>
        </template><parameter name="fun"><paramtype>FunT const &amp;</paramtype></parameter><description><para>The method is called in order to apply a function object to the default value. </para></description></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__default_1a6a8ce80e169976ea555ec74cd2f5348d" name="on_invalid_type" specifiers="static"><type>void</type><parameter name=""><paramtype>typeindex::type_index const &amp;</paramtype></parameter><description><para>The method is called when value extraction failed because the attribute value has different type than requested. </para></description></method>
<method id="doxygen.attributes.structboost_1_1log_1_1fallback__to__default_1aefc1e23a960bb78c923d2e65f475ff6d" name="on_missing_value" specifiers="static"><type>void</type><description><para>The method is called when value extraction failed because the attribute value was not found. </para></description></method>
</method-group>
</struct>



































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.function_8hpp" name="boost/log/attributes/function.hpp">
<para><para>Andrey Semashev </para>

<para>24.06.2007</para>

The header contains implementation of an attribute that calls a third-party function on value acquisition. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1function" name="function"><template>
      <template-type-parameter name="R"/>
    </template><inherit access="public">attribute</inherit><purpose>A class of an attribute that acquires its value from a third-party function object. </purpose><description><para>The attribute calls a stored nullary function object to acquire each value. The result type of the function object is the attribute value type.</para><para>It is not recommended to use this class directly. Use <computeroutput>make_function</computeroutput> convenience functions to construct the attribute instead. </para></description><class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1function_1_1impl" name="impl"><inherit access="public">attribute::impl</inherit><purpose>Base class for factory implementation. </purpose></class><class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1function_1_1impl__template" name="impl_template"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">function&lt; R &gt;::impl</inherit><purpose>Factory implementation. </purpose><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1function_1_1impl__template_1a4b304b6b13a47d37667bff0f5b4c79b1" specifiers="explicit"><parameter name="fun"><paramtype>T const &amp;</paramtype></parameter><description><para>Constructor with the stored delegate initialization </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1function_1_1impl__template_1a5eb9da3b0518847f0b7ad02731ff47f0" name="get_value" specifiers="virtual"><type><classname>attribute_value</classname></type><description><para>
</para></description><returns><para>The actual attribute value. It shall not return empty values (exceptions shall be used to indicate errors). </para>
</returns></method>
</method-group>
</class><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1function_1a1ba6a874fb2f295fce15d25bbe823765" name="value_type"><purpose>The attribute value type. </purpose><type>R</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1function_1a9a8fe424b71c4b985ba127bc0e815013" specifiers="explicit"><template>
          <template-type-parameter name="T"/>
        </template><parameter name="fun"><paramtype>T const &amp;</paramtype></parameter><description><para>Initializing constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1function_1a8a06a30ec76f7eea70d0dd8c667c07d8" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
</method-group>
</class>
<function id="doxygen.attributes.function_8hpp_1a7999722280fbd781e428b798b12fce30" name="make_function"><type><classname>function</classname>&lt; typename remove_cv&lt; typename remove_reference&lt; typename boost::result_of&lt; T() &gt;::type &gt;::type &gt;::type &gt;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="fun"><paramtype>T const &amp;</paramtype><description><para>Nullary functional object that returns an actual stored value for an attribute value. </para></description></parameter><description><para>The function constructs <computeroutput>function</computeroutput> attribute instance with the provided function object.</para><para>

</para></description><returns><para>Pointer to the attribute instance </para>
</returns></function>


</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.mutable__constant_8hpp" name="boost/log/attributes/mutable_constant.hpp">
<para><para>Andrey Semashev </para>

<para>06.11.2007</para>

The header contains implementation of a mutable constant attribute. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant" name="mutable_constant"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="MutexT"><default>void</default></template-type-parameter>
      <template-type-parameter name="ScopedWriteLockT"><default>auto</default></template-type-parameter>
      <template-type-parameter name="ScopedReadLockT"><default>auto</default></template-type-parameter>
    </template><inherit access="public">attribute</inherit><purpose>A class of an attribute that holds a single constant value with ability to change it. </purpose><description><para>The <link linkend="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant">mutable_constant</link> attribute stores a single value of type, specified as the first template argument. This value is returned on each attribute value acquisition.</para><para>The attribute also allows to modify the stored value, even if the attribute is registered in an attribute set. In order to ensure thread safety of such modifications the <computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant">mutable_constant</link></computeroutput> class is also parametrized with three additional template arguments: mutex type, scoped write and scoped read lock types. If not specified, the lock types are automatically deduced based on the mutex type.</para><para>The implementation may avoid using these types to actually create and use the mutex, if a more efficient synchronization method is available (such as atomic operations on the value type). By default no synchronization is done. </para></description><class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1_1impl" name="impl"><inherit access="public">attribute::impl</inherit><purpose>Factory implementation. </purpose><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1_1impl_1ace1c4aeb69ccc7c68a76e3b45c8c28a3" specifiers="explicit"><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter><description><para>Initializing constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1_1impl_1adbb56a86bb1b91f30944beb5ab6456f1" specifiers="explicit"><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>Initializing constructor </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1_1impl_1a5eb9da3b0518847f0b7ad02731ff47f0" name="get_value" specifiers="virtual"><type><classname>attribute_value</classname></type><description><para>
</para></description><returns><para>The actual attribute value. It shall not return empty values (exceptions shall be used to indicate errors). </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1_1impl_1a90b29cad6a1076fcdcb63e97d7202833" name="set"><type>void</type><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1_1impl_1aa68efeabc774732e9f27daef3a2f9d21" name="set"><type>void</type><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1_1impl_1aa3eb46212a836116c61eac0e78fb04a7" name="get" cv="const"><type>value_type</type></method>
</method-group>
</class><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1a1bb7b4a35643ef79447e08e975edc592" name="value_type"><purpose>The attribute value type. </purpose><type>T</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1a603ba0e4e9956456efdcc2f3b1ab37c8" specifiers="explicit"><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter><description><para>Constructor with the stored value initialization </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1af131ee0167796fae779e13ae5d6bb163" specifiers="explicit"><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>Constructor with the stored value initialization </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1ad2239a3d3dc315a37dbae2d91c49a485" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1a90b29cad6a1076fcdcb63e97d7202833" name="set"><type>void</type><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter><description><para>The method sets a new attribute value. The implementation exclusively locks the mutex in order to protect the value assignment. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1aa68efeabc774732e9f27daef3a2f9d21" name="set"><type>void</type><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>The method sets a new attribute value. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1aa3eb46212a836116c61eac0e78fb04a7" name="get" cv="const"><type>value_type</type><description><para>The method acquires the current attribute value. The implementation non-exclusively locks the mutex in order to protect the value acquisition. </para></description></method>
</method-group>
<method-group name="protected member functions">
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_1aa8567e4f995df38cb12593dffe2438cc" name="get_impl" cv="const"><type><classname>impl</classname> *</type><description><para>
</para></description><returns><para>Pointer to the factory implementation </para>
</returns></method>
</method-group>
</class><class-specialization id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4" name="mutable_constant"><template>
      <template-type-parameter name="T"/>
    </template><specialization><template-arg>T</template-arg><template-arg>void</template-arg><template-arg>void</template-arg><template-arg>void</template-arg></specialization><inherit access="public">attribute</inherit><purpose>Specialization for unlocked case. </purpose><description><para>This version of attribute does not perform thread synchronization to access the stored value. </para></description><class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1_1impl" name="impl"><inherit access="public">attribute::impl</inherit><purpose>Factory implementation. </purpose><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1_1impl_1ace1c4aeb69ccc7c68a76e3b45c8c28a3" specifiers="explicit"><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter><description><para>Initializing constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1_1impl_1adbb56a86bb1b91f30944beb5ab6456f1" specifiers="explicit"><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>Initializing constructor </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1_1impl_1a5eb9da3b0518847f0b7ad02731ff47f0" name="get_value" specifiers="virtual"><type><classname>attribute_value</classname></type><description><para>
</para></description><returns><para>The actual attribute value. It shall not return empty values (exceptions shall be used to indicate errors). </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1_1impl_1a90b29cad6a1076fcdcb63e97d7202833" name="set"><type>void</type><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1_1impl_1aa68efeabc774732e9f27daef3a2f9d21" name="set"><type>void</type><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1_1impl_1aa3eb46212a836116c61eac0e78fb04a7" name="get" cv="const"><type>value_type</type></method>
</method-group>
</class><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1a1bb7b4a35643ef79447e08e975edc592" name="value_type"><purpose>The attribute value type. </purpose><type>T</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1a603ba0e4e9956456efdcc2f3b1ab37c8" specifiers="explicit"><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter><description><para>Constructor with the stored value initialization </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1af131ee0167796fae779e13ae5d6bb163" specifiers="explicit"><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>Constructor with the stored value initialization </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1ad2239a3d3dc315a37dbae2d91c49a485" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1a90b29cad6a1076fcdcb63e97d7202833" name="set"><type>void</type><parameter name="value"><paramtype>value_type const &amp;</paramtype></parameter><description><para>The method sets a new attribute value. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1aa68efeabc774732e9f27daef3a2f9d21" name="set"><type>void</type><parameter name="value"><paramtype>value_type &amp;&amp;</paramtype></parameter><description><para>The method sets a new attribute value. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1aa3eb46212a836116c61eac0e78fb04a7" name="get" cv="const"><type>value_type</type><description><para>The method acquires the current attribute value. </para></description></method>
</method-group>
<method-group name="protected member functions">
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1mutable__constant_3_01T_00_01void_00_01void_00_01void_01_4_1aa8567e4f995df38cb12593dffe2438cc" name="get_impl" cv="const"><type><classname>impl</classname> *</type><description><para>
</para></description><returns><para>Pointer to the factory implementation </para>
</returns></method>
</method-group>
</class-specialization>



</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.named__scope_8hpp" name="boost/log/attributes/named_scope.hpp">
<para><para>Andrey Semashev </para>

<para>24.06.2007</para>

The header contains implementation of named scope container and an attribute that allows to put the named scope to log. A number of convenience macros are also provided. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope" name="named_scope"><inherit access="public">attribute</inherit><purpose>A class of an attribute that holds stack of named scopes of the current thread. </purpose><description><para>The basic_named_scope attribute is essentially a hook to the thread-specific instance of scope list. This means that the attribute will generate different values if get_value is called in different threads. The attribute generates value with stored type <computeroutput>basic_named_scope_list&lt; CharT &gt;</computeroutput>.</para><para>The attribute class can also be used to gain access to the scope stack instance, e.g. to get its copy or to push or pop a scope entry. However, it is highly not recommended to maintain scope list manually. Use <computeroutput>BOOST_LOG_NAMED_SCOPE</computeroutput> or <computeroutput>BOOST_LOG_FUNCTION</computeroutput> macros instead. </para></description><struct id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope_1_1sentry" name="sentry"><purpose>Sentry object class to automatically push and pop scopes. </purpose><method-group name="public member functions">
<constructor id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope_1_1sentry_1aefa49d573757decc4e23cab8371c040a" cv="noexcept"><parameter name="sn"><paramtype>string_literal const &amp;</paramtype><description><para>Scope name. </para></description></parameter><parameter name="fn"><paramtype>string_literal const &amp;</paramtype><description><para>File name, in which the scope is located. </para></description></parameter><parameter name="ln"><paramtype>unsigned int</paramtype><description><para>Line number in the file. </para></description></parameter><parameter name="t"><paramtype>scope_entry::scope_name_type</paramtype><default>scope_entry::general</default><description><para>Scope name type. </para></description></parameter><description><para>Constructor. Pushes the specified scope to the end of the thread-local list of scopes.</para><para>
</para></description></constructor>
<destructor id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope_1_1sentry_1a91bf451aba5be8a9a5ea898b742b6ebb" cv="noexcept"><description><para>Destructor. Removes the last pushed scope from the thread-local list of scopes. </para></description></destructor>
<constructor id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope_1_1sentry_1a31517e38489123852e9b5c20396a6d96" cv="= delete"><parameter name=""><paramtype><classname>sentry</classname> const &amp;</paramtype></parameter></constructor>
<copy-assignment id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope_1_1sentry_1ab1ecccfd0608fb8dfc4c14c7ee9cd796" cv="= delete"><type><classname>sentry</classname> &amp;</type><parameter name=""><paramtype><classname>sentry</classname> const &amp;</paramtype></parameter></copy-assignment>
</method-group>
</struct><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope_1af814e3fb9a95d101d2b54654c0163a08" name="value_type"><purpose>Scope names stack (the attribute value type) </purpose><type><classname>named_scope_list</classname></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope_1ae012f8709bab1e5e90451e506ace3351" name="scope_entry"><purpose>Scope entry. </purpose><type>value_type::value_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope_1aaf30eef66b2fc1f968932c6da68eb86f"><description><para>Constructor. Creates an attribute. </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope_1a6c93e3237f881a4fa158f2846dcee313" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
</method-group>
<method-group name="public static functions">
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope_1a41e1a71d8691b0b6c1704179306ffdc5" name="push_scope" cv="noexcept" specifiers="static"><type>void</type><parameter name="entry"><paramtype>scope_entry const &amp;</paramtype></parameter><description><para>The method pushes the scope to the back of the current thread's scope list</para><para><emphasis role="bold">Throws:</emphasis> Nothing. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope_1acce735395e680488b70ead1383f83e72" name="pop_scope" cv="noexcept" specifiers="static"><type>void</type><description><para>The method pops the last pushed scope from the current thread's scope list</para><para><emphasis role="bold">Throws:</emphasis> Nothing. </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope_1aabd3a700371eca08f769dfeee9fd374e" name="get_scopes" specifiers="static"><type>value_type const &amp;</type><description><para>
<note><para>The returned reference is only valid until the current thread ends. The scopes in the returned container may change if the execution scope is changed (i.e. either <computeroutput>push_scope</computeroutput> or <computeroutput>pop_scope</computeroutput> is called). User has to copy the stack if he wants to keep it intact regardless of the execution scope. </para>
</note>
</para></description><returns><para>The current thread's list of scopes</para>
</returns></method>
</method-group>
</class><struct id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry" name="named_scope_entry"><purpose>The structure contains all information about a named scope. </purpose><description><para>The named scope entries are stored as elements of <computeroutput>basic_named_scope_list</computeroutput> container, which in turn can be acquired either from the <computeroutput>basic_named_scope</computeroutput> attribute value or from a thread-local instance. </para></description><enum id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry_1a8b3e571acec11c700e7eafbd62097810" name="scope_name_type"><enumvalue id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry_1a8b3e571acec11c700e7eafbd62097810a132c313022974a87e1a962e64bade8d3" name="general"><purpose>The scope name contains some unstructured string that should not be interpreted by the library. </purpose></enumvalue><enumvalue id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry_1a8b3e571acec11c700e7eafbd62097810a82b8b8a80df394404b368bec3c5a0709" name="function"><purpose>The scope name contains a function signature. </purpose></enumvalue><purpose>Scope entry type. </purpose><description><para>Describes scope name specifics </para></description></enum>
<data-member id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry_1a7e7e20a1111e30d908646e2ec08d01e8" name="scope_name"><type>string_literal</type><description><para>The scope name (e.g. a function signature) </para></description></data-member>
<data-member id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry_1a301e6b4339c802d115da9c95b26f3054" name="file_name"><type>string_literal</type><description><para>The source file name </para></description></data-member>
<data-member id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry_1ae81f92b05f69edc98e6251688e3518da" name="line"><type>unsigned int</type><description><para>The line number in the source file </para></description></data-member>
<data-member id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry_1aa00d400ba0862eda84357d6534d4fe95" name="type"><type>scope_name_type</type><description><para>The scope name type </para></description></data-member>
<method-group name="public member functions">
<constructor id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1named__scope__entry_1a36830a1044d80207ca14d1202dd4182e" cv="noexcept"><parameter name="sn"><paramtype>string_literal const &amp;</paramtype></parameter><parameter name="fn"><paramtype>string_literal const &amp;</paramtype></parameter><parameter name="ln"><paramtype>unsigned int</paramtype></parameter><parameter name="t"><paramtype>scope_name_type</paramtype><default>general</default></parameter><description><para>Initializing constructor</para><para>
<emphasis role="bold">Throws:</emphasis> Nothing. </para></description><postconditions><para><computeroutput>scope_name == sn &amp;&amp; file_name == fn &amp;&amp; line == ln</computeroutput></para>
</postconditions></constructor>
</method-group>
</struct><class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list" name="named_scope_list"><purpose>The class implements the list of scopes. </purpose><description><para>The scope list provides a read-only access to a doubly-linked list of scopes. </para></description><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1aae3355697fee7fa6c15ae9c0e970441a" name="allocator_type"><purpose>Allocator type. </purpose><type>std::allocator&lt; <classname>named_scope_entry</classname> &gt;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1aca3cfd3e2047239d1b32b25faac9e434" name="value_type"><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1ab417808916b3e1f80547f3c855874ea3" name="size_type"><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1acabf7d76ffe162233c26a85f886172aa" name="difference_type"><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1aff8c65b0f7f1b82b1cc55b302cc87f94" name="pointer"><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1aa189fc3b64116e7b2996bc5d0534179d" name="const_pointer"><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a1824ec83e5a41c4a5a3030992c180990" name="reference"><type>value_type &amp;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1aead17d93276c26b711136dadfb2b33bb" name="const_reference"><type>value_type const &amp;</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a20cfb0458c5f7684b1f0a48dc497f2e1" name="const_iterator"><description><para>A constant iterator to the sequence of scopes. Complies to bidirectional iterator requirements. </para></description><type>implementation_defined</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1afad66e3d9397095b51a512606ed4e45b" name="iterator"><description><para>An iterator to the sequence of scopes. Complies to bidirectional iterator requirements. </para></description><type>implementation_defined</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a097776c876bf6673b6d422ff756a5cb8" name="const_reverse_iterator"><description><para>A constant reverse iterator to the sequence of scopes. Complies to bidirectional iterator requirements. </para></description><type>implementation_defined</type></typedef>
<typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a8168d2eb6cd340f0f44dd6b47f7895dd" name="reverse_iterator"><description><para>A reverse iterator to the sequence of scopes. Complies to bidirectional iterator requirements. </para></description><type>implementation_defined</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1aabb03e420d21ceb71ec03fbb74bba263"><description><para>Default constructor</para><para>
</para></description><postconditions><para><computeroutput><link linkend="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a644718bb2fb240de962dc3c9a1fdf0dc">empty()</link> == true</computeroutput> </para>
</postconditions></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a90c08203b5bded63dba1f219c3163ac4"><parameter name="that"><paramtype><classname>named_scope_list</classname> const &amp;</paramtype></parameter><description><para>Copy constructor</para><para>
</para></description><postconditions><para><computeroutput>std::equal(<link linkend="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a29305669b60ca1680752e2fc3592ba99">begin()</link>, <link linkend="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1accf9a4bd0c34d4a5f6a7dab66ea10cdc">end()</link>, that.begin()) == true</computeroutput> </para>
</postconditions></constructor>
<destructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a106ef2d9868ee992089fc63361fcaffb"><description><para>Destructor. Destroys the stored entries. </para></description></destructor>
<copy-assignment id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1aae4fe8a984384dc2d82de0fb078692ca"><type><classname>named_scope_list</classname> &amp;</type><parameter name="that"><paramtype><classname>named_scope_list</classname> const &amp;</paramtype></parameter><description><para>Assignment operator</para><para>
</para></description><postconditions><para><computeroutput>std::equal(<link linkend="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a29305669b60ca1680752e2fc3592ba99">begin()</link>, <link linkend="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1accf9a4bd0c34d4a5f6a7dab66ea10cdc">end()</link>, that.begin()) == true</computeroutput> </para>
</postconditions></copy-assignment>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a29305669b60ca1680752e2fc3592ba99" name="begin" cv="const"><type>const_iterator</type><description><para>
</para></description><returns><para>Constant iterator to the first element of the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1accf9a4bd0c34d4a5f6a7dab66ea10cdc" name="end" cv="const"><type>const_iterator</type><description><para>
</para></description><returns><para>Constant iterator to the after-the-last element of the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1af086cceac199bd735c7a97c2a8d7ed21" name="rbegin" cv="const"><type>const_reverse_iterator</type><description><para>
</para></description><returns><para>Constant iterator to the last element of the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a07da1fdc890b6949f1a20a1961c6fc44" name="rend" cv="const"><type>const_reverse_iterator</type><description><para>
</para></description><returns><para>Constant iterator to the before-the-first element of the container. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a60304b65bf89363bcc3165d3cde67f86" name="size" cv="const"><type>size_type</type><description><para>
</para></description><returns><para>The number of elements in the container </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a644718bb2fb240de962dc3c9a1fdf0dc" name="empty" cv="const"><type>bool</type><description><para>
</para></description><returns><para>true if the container is empty and false otherwise </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a499aa46dc676a096c561bca0abcfa358" name="swap"><type>void</type><parameter name="that"><paramtype><classname>named_scope_list</classname> &amp;</paramtype></parameter><description><para>Swaps two instances of the container </para></description></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a61772c77ad2abfbb296912e7281e154c" name="back" cv="const"><type>const_reference</type><description><para>
</para></description><returns><para>Last pushed scope entry </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1named__scope__list_1a0ae6b4f9719202f7ddb334c16fb03d80" name="front" cv="const"><type>const_reference</type><description><para>
</para></description><returns><para>First pushed scope entry </para>
</returns></method>
</method-group>
</class><function id="doxygen.attributes.named__scope_8hpp_1aec21a17c7cb10e7604fbff6c8497b520" name="operator&lt;&lt;"><type>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="TraitsT"/>
        </template><parameter name="strm"><paramtype>std::basic_ostream&lt; CharT, TraitsT &gt; &amp;</paramtype></parameter><parameter name="sl"><paramtype><classname>named_scope_list</classname> const &amp;</paramtype></parameter><purpose>Stream output operator. </purpose></function>



</namespace>




































</namespace>
</namespace>
<macro id="doxygen.attributes.named__scope_8hpp_1ab039c4e803221a973a9b216f8f6cda79" name="BOOST_LOG_NAMED_SCOPE" kind="functionlike"><macro-parameter name="name"/><description><para>Macro for scope markup. The specified scope name is pushed to the end of the current thread scope list. </para></description></macro>
<macro id="doxygen.attributes.named__scope_8hpp_1adecd3a19e0edbdac754c42de0a095064" name="BOOST_LOG_FUNCTION" kind="functionlike"><macro-parameter name=""/><description><para>Macro for function scope markup. The scope name is constructed with help of compiler and contains the current function signature. The scope name is pushed to the end of the current thread scope list.</para><para>Not all compilers have support for this macro. The exact form of the scope name may vary from one compiler to another. </para></description></macro>
<macro id="doxygen.attributes.named__scope_8hpp_1a945e524716da1bae7b920ec76a77cc00" name="BOOST_LOG_FUNC" kind="functionlike"><macro-parameter name=""/><description><para>Macro for function scope markup. The scope name is constructed with help of compiler and contains the current function name. It may be shorter than what <computeroutput>BOOST_LOG_FUNCTION</computeroutput> macro produces. The scope name is pushed to the end of the current thread scope list.</para><para>Not all compilers have support for this macro. The exact form of the scope name may vary from one compiler to another. </para></description></macro>
</header>
<header id="doxygen.attributes.scoped__attribute_8hpp" name="boost/log/attributes/scoped_attribute.hpp">
<para><para>Andrey Semashev </para>

<para>13.05.2007</para>

The header contains definition of facilities to define scoped attributes. </para><namespace name="boost">
<namespace name="log">
<typedef id="doxygen.attributes.scoped__attribute_8hpp_1a1c14867af18c28847f161456c694c24b" name="scoped_attribute"><purpose>Scoped attribute guard type. </purpose><type><emphasis>unspecified</emphasis></type></typedef>




























<function id="doxygen.attributes.scoped__attribute_8hpp_1a3b556d44e616706ee8da6acd211f90ee" name="add_scoped_logger_attribute"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="LoggerT"/>
        </template><parameter name="l"><paramtype>LoggerT &amp;</paramtype><description><para>Logger to register the attribute in </para></description></parameter><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>Attribute name </para></description></parameter><parameter name="attr"><paramtype><classname>attribute</classname> const &amp;</paramtype><description><para>The attribute. Must not be NULL. </para></description></parameter><description><para>Registers an attribute in the logger</para><para>

</para></description><returns><para>An unspecified guard object which may be used to initialize a <computeroutput>scoped_attribute</computeroutput> variable. </para>
</returns></function>
<function id="doxygen.attributes.scoped__attribute_8hpp_1ac221b5381f9d681d6f5a0b90090e0996" name="add_scoped_thread_attribute"><type><emphasis>unspecified</emphasis></type><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>Attribute name </para></description></parameter><parameter name="attr"><paramtype><classname>attribute</classname> const &amp;</paramtype><description><para>The attribute. Must not be NULL. </para></description></parameter><description><para>Registers a thread-specific attribute</para><para>

</para></description><returns><para>An unspecified guard object which may be used to initialize a <computeroutput>scoped_attribute</computeroutput> variable. </para>
</returns></function>






</namespace>
</namespace>
<macro id="doxygen.attributes.scoped__attribute_8hpp_1a7ba1cb12c619cb4c1953ee9a4db25fb3" name="BOOST_LOG_SCOPED_LOGGER_ATTR" kind="functionlike"><macro-parameter name="logger"/><macro-parameter name="attr_name"/><macro-parameter name="attr"/><purpose>The macro sets a scoped logger-wide attribute in a more compact way. </purpose></macro>
<macro id="doxygen.attributes.scoped__attribute_8hpp_1af24eb7d3a843b8a3641d0d1e33e46665" name="BOOST_LOG_SCOPED_LOGGER_TAG" kind="functionlike"><macro-parameter name="logger"/><macro-parameter name="attr_name"/><macro-parameter name="attr_value"/><purpose>The macro sets a scoped logger-wide tag in a more compact way. </purpose></macro>
<macro id="doxygen.attributes.scoped__attribute_8hpp_1aeb1515c5d3a0b4a25e249e187d52ade6" name="BOOST_LOG_SCOPED_THREAD_ATTR" kind="functionlike"><macro-parameter name="attr_name"/><macro-parameter name="attr"/><purpose>The macro sets a scoped thread-wide attribute in a more compact way. </purpose></macro>
<macro id="doxygen.attributes.scoped__attribute_8hpp_1a273dcdec1088b77401736a24eacda764" name="BOOST_LOG_SCOPED_THREAD_TAG" kind="functionlike"><macro-parameter name="attr_name"/><macro-parameter name="attr_value"/><purpose>The macro sets a scoped thread-wide tag in a more compact way. </purpose></macro>
</header>
<header id="doxygen.attributes.time__traits_8hpp" name="boost/log/attributes/time_traits.hpp">
<para><para>Andrey Semashev </para>

<para>01.12.2007</para>

The header contains implementation of time traits that are used in various parts of the library to acquire current time. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<struct id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1basic__time__traits" name="basic_time_traits"><purpose>Base class for time traits involving Boost.DateTime. </purpose><typedef id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1basic__time__traits_1a25197050a784ab5ed4d79942beb7e650" name="time_type"><purpose>Time type. </purpose><type>posix_time::ptime</type></typedef>
<typedef id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1basic__time__traits_1a9b649fd6683ecd1e938d59dc1b124481" name="clock_source"><purpose>Current time source. </purpose><type>posix_time::second_clock</type></typedef>
</struct><struct id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1local__time__traits" name="local_time_traits"><inherit access="public">basic_time_traits</inherit><purpose>Time traits that describes local time acquirement via Boost.DateTime facilities. </purpose><method-group name="public static functions">
<method id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1local__time__traits_1a43e8c78bc064eb43fabdb273689feb45" name="get_clock" specifiers="static"><type>time_type</type><description><para>
</para></description><returns><para>Current time stamp </para>
</returns></method>
</method-group>
</struct><struct id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1utc__time__traits" name="utc_time_traits"><inherit access="public">basic_time_traits</inherit><purpose>Time traits that describes UTC time acquirement via Boost.DateTime facilities. </purpose><method-group name="public static functions">
<method id="doxygen.attributes.structboost_1_1log_1_1attributes_1_1utc__time__traits_1a43e8c78bc064eb43fabdb273689feb45" name="get_clock" specifiers="static"><type>time_type</type><description><para>
</para></description><returns><para>Current time stamp </para>
</returns></method>
</method-group>
</struct>



</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.timer_8hpp" name="boost/log/attributes/timer.hpp">
<para><para>Andrey Semashev </para>

<para>02.12.2007</para>

The header contains implementation of a stop watch attribute. </para><namespace name="boost">
<namespace name="log">
<namespace name="attributes">
<class id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1timer" name="timer"><inherit access="public">attribute</inherit><purpose>A class of an attribute that makes an attribute value of the time interval since construction. </purpose><description><para>The timer attribute calculates the time passed since its construction and returns it on value acquisition. The attribute value type is <computeroutput>boost::posix_time::time_duration</computeroutput>.</para><para>On Windows platform there are two implementations of the attribute. The default one is more precise but a bit slower. This version uses <computeroutput>QueryPerformanceFrequence</computeroutput>/<computeroutput>QueryPerformanceCounter</computeroutput> API to calculate elapsed time.</para><para>There are known problems with these functions when used with some CPUs, notably AMD Athlon with Cool'n'Quiet technology enabled. See the following links for more information and possible resolutions:</para><para><ulink url="http://support.microsoft.com/?scid=kb;en-us;895980">http://support.microsoft.com/?scid=kb;en-us;895980</ulink> <ulink url="http://support.microsoft.com/?id=896256">http://support.microsoft.com/?id=896256</ulink></para><para>In case if none of these solutions apply, you are free to define <computeroutput>BOOST_LOG_NO_QUERY_PERFORMANCE_COUNTER</computeroutput> macro to fall back to another implementation based on Boost.DateTime. </para></description><typedef id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1timer_1aad0129b14a8f6224f8cec92016caee71" name="value_type"><purpose>Attribute value type. </purpose><type>utc_time_traits::time_type::time_duration_type</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1timer_1a8b8f32aa00c8e58e22bea5c0abf18076"><description><para>Constructor. Starts time counting. </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1attributes_1_1timer_1ad13bcc107783617f8f8501e8a443d5e6" specifiers="explicit"><parameter name="source"><paramtype><classname>cast_source</classname> const &amp;</paramtype></parameter><description><para>Constructor for casting support </para></description></constructor>
</method-group>
</class>



</namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.value__extraction_8hpp" name="boost/log/attributes/value_extraction.hpp">
<para><para>Andrey Semashev </para>

<para>01.03.2008</para>

The header contains implementation of tools for extracting an attribute value from the view. </para><namespace name="boost">
<namespace name="log">
<namespace name="result_of">
</namespace>







<function id="doxygen.attributes.value__extraction_8hpp_1a6c4825f16d1bb13ea6369f996fd77dc6" name="extract"><type><classname>result_of::extract</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>

</para></description><returns><para>A <computeroutput>value_ref</computeroutput> that refers to the extracted value, if found. An empty value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1af1dc5a28aa0f1e887ad7c20c3590d66d" name="extract"><type><classname>result_of::extract</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>

</para></description><returns><para>A <computeroutput>value_ref</computeroutput> that refers to the extracted value, if found. An empty value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1ae4817fd7a14d1295f139d9bc6f345f40" name="extract"><type><classname>result_of::extract</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>

</para></description><returns><para>A <computeroutput>value_ref</computeroutput> that refers to the extracted value, if found. An empty value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a371192f568d358273902ccc2d1647f17" name="extract"><type><classname>result_of::extract</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="value"><paramtype><classname>attribute_value</classname> const &amp;</paramtype><description><para>Attribute value. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>

</para></description><returns><para>A <computeroutput>value_ref</computeroutput> that refers to the extracted value, if found. An empty value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a81b929d63a6313f734e4d56e39e18943" name="extract_or_throw"><type><classname>result_of::extract_or_throw</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>


</para></description><returns><para>The extracted value or a non-empty <computeroutput>value_ref</computeroutput> that refers to the value. </para>
</returns><throws><simpara><classname>An</classname> exception is thrown if the requested value cannot be extracted. </simpara>
</throws></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a52c169a965b388d5e64f0120d451ded5" name="extract_or_throw"><type><classname>result_of::extract_or_throw</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>


</para></description><returns><para>The extracted value or a non-empty <computeroutput>value_ref</computeroutput> that refers to the value. </para>
</returns><throws><simpara><classname>An</classname> exception is thrown if the requested value cannot be extracted. </simpara>
</throws></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a9d762f91dfd9c5fe3c2b0820266f51b4" name="extract_or_throw"><type><classname>result_of::extract_or_throw</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>


</para></description><returns><para>The extracted value or a non-empty <computeroutput>value_ref</computeroutput> that refers to the value. </para>
</returns><throws><simpara><classname>An</classname> exception is thrown if the requested value cannot be extracted. </simpara>
</throws></function>
<function id="doxygen.attributes.value__extraction_8hpp_1ad96f0397b541184f541a5bb1767d83f7" name="extract_or_throw"><type><classname>result_of::extract_or_throw</classname>&lt; T, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
        </template><parameter name="value"><paramtype><classname>attribute_value</classname> const &amp;</paramtype><description><para>Attribute value. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>


</para></description><returns><para>The extracted value or a non-empty <computeroutput>value_ref</computeroutput> that refers to the value. </para>
</returns><throws><simpara><classname>An</classname> exception is thrown if the requested value cannot be extracted. </simpara>
</throws></function>
<function id="doxygen.attributes.value__extraction_8hpp_1acb9aad8dd6f3803bbcd2f115b41c245d" name="extract_or_default"><type><classname>result_of::extract_or_default</classname>&lt; T, DefaultT, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
          <template-type-parameter name="DefaultT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><parameter name="def_val"><paramtype>DefaultT const &amp;</paramtype><description><para>The default value </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para><note><para>Caution must be exercised if the default value is a temporary object. Because the function returns a reference, if the temporary object is destroyed, the reference may become dangling.</para>
</note>


</para></description><returns><para>The extracted value, if found. The default value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a715c6ca1c7eac36a186269e3785dd66c" name="extract_or_default"><type><classname>result_of::extract_or_default</classname>&lt; T, DefaultT, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
          <template-type-parameter name="DefaultT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="def_val"><paramtype>DefaultT const &amp;</paramtype><description><para>The default value </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para><note><para>Caution must be exercised if the default value is a temporary object. Because the function returns a reference, if the temporary object is destroyed, the reference may become dangling.</para>
</note>


</para></description><returns><para>The extracted value, if found. The default value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a26c610ff78fd2f7fd6ca181c4a0073d7" name="extract_or_default"><type><classname>result_of::extract_or_default</classname>&lt; T, DefaultT, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
          <template-type-parameter name="DefaultT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="def_val"><paramtype>DefaultT const &amp;</paramtype><description><para>The default value </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para><note><para>Caution must be exercised if the default value is a temporary object. Because the function returns a reference, if the temporary object is destroyed, the reference may become dangling.</para>
</note>


</para></description><returns><para>The extracted value, if found. The default value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a8799f9c5d73cee7b9b9d28d750d3c7ce" name="extract_or_default"><type><classname>result_of::extract_or_default</classname>&lt; T, DefaultT, TagT &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="TagT"><default>void</default></template-type-parameter>
          <template-type-parameter name="DefaultT"/>
        </template><parameter name="value"><paramtype><classname>attribute_value</classname> const &amp;</paramtype><description><para>Attribute value. </para></description></parameter><parameter name="def_val"><paramtype>DefaultT const &amp;</paramtype><description><para>The default value </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para><note><para>Caution must be exercised if the default value is a temporary object. Because the function returns a reference, if the temporary object is destroyed, the reference may become dangling.</para>
</note>


</para></description><returns><para>The extracted value, if found. The default value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a50c4bc27937d11913da756700c1c3761" name="extract"><type><classname>result_of::extract</classname>&lt; typenameDescriptorT::value_type, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>

</para></description><returns><para>A <computeroutput>value_ref</computeroutput> that refers to the extracted value, if found. An empty value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a2543c5cb9782d178a7d75d75937ef2a5" name="extract"><type><classname>result_of::extract</classname>&lt; typenameDescriptorT::value_type, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>

</para></description><returns><para>A <computeroutput>value_ref</computeroutput> that refers to the extracted value, if found. An empty value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a8011d6bbf3a004e62c2a426c7e3e9529" name="extract"><type><classname>result_of::extract</classname>&lt; typenameDescriptorT::value_type, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>

</para></description><returns><para>A <computeroutput>value_ref</computeroutput> that refers to the extracted value, if found. An empty value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1ac9b6cd8d73f0579fbba41e399c3c998b" name="extract_or_throw"><type><classname>result_of::extract_or_throw</classname>&lt; typenameDescriptorT::value_type, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>


</para></description><returns><para>The extracted value or a non-empty <computeroutput>value_ref</computeroutput> that refers to the value. </para>
</returns><throws><simpara><classname>An</classname> exception is thrown if the requested value cannot be extracted. </simpara>
</throws></function>
<function id="doxygen.attributes.value__extraction_8hpp_1acd2abb006056f4fee100b6b41e81a8da" name="extract_or_throw"><type><classname>result_of::extract_or_throw</classname>&lt; typenameDescriptorT::value_type, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>


</para></description><returns><para>The extracted value or a non-empty <computeroutput>value_ref</computeroutput> that refers to the value. </para>
</returns><throws><simpara><classname>An</classname> exception is thrown if the requested value cannot be extracted. </simpara>
</throws></function>
<function id="doxygen.attributes.value__extraction_8hpp_1ade6bb8c20149885ef075f78d8fbab6f0" name="extract_or_throw"><type><classname>result_of::extract_or_throw</classname>&lt; typenameDescriptorT::value_type, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para>


</para></description><returns><para>The extracted value or a non-empty <computeroutput>value_ref</computeroutput> that refers to the value. </para>
</returns><throws><simpara><classname>An</classname> exception is thrown if the requested value cannot be extracted. </simpara>
</throws></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a9f0770e19b7f9e406e8e24a80f8bf792" name="extract_or_default"><type><classname>result_of::extract_or_default</classname>&lt; typenameDescriptorT::value_type, DefaultT, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="DefaultT"/>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><parameter name="def_val"><paramtype>DefaultT const &amp;</paramtype><description><para>The default value </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be extracted.</para><para><note><para>Caution must be exercised if the default value is a temporary object. Because the function returns a reference, if the temporary object is destroyed, the reference may become dangling.</para>
</note>


</para></description><returns><para>The extracted value, if found. The default value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1af90c847cd0cfa44a584f6742e99154a7" name="extract_or_default"><type><classname>result_of::extract_or_default</classname>&lt; typenameDescriptorT::value_type, DefaultT, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="DefaultT"/>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="def_val"><paramtype>DefaultT const &amp;</paramtype><description><para>The default value </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para><note><para>Caution must be exercised if the default value is a temporary object. Because the function returns a reference, if the temporary object is destroyed, the reference may become dangling.</para>
</note>


</para></description><returns><para>The extracted value, if found. The default value otherwise. </para>
</returns></function>
<function id="doxygen.attributes.value__extraction_8hpp_1a346e6615f41a43bed9f921be4f1dc605" name="extract_or_default"><type><classname>result_of::extract_or_default</classname>&lt; typenameDescriptorT::value_type, DefaultT, DescriptorT &gt;::type</type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="DefaultT"/>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to extract. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="def_val"><paramtype>DefaultT const &amp;</paramtype><description><para>The default value </para></description></parameter><description><para>The function extracts an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para><note><para>Caution must be exercised if the default value is a temporary object. Because the function returns a reference, if the temporary object is destroyed, the reference may become dangling.</para>
</note>


</para></description><returns><para>The extracted value, if found. The default value otherwise. </para>
</returns></function>








</namespace>
</namespace>
</header>
<header id="doxygen.attributes.value__extraction__fwd_8hpp" name="boost/log/attributes/value_extraction_fwd.hpp">
<para><para>Andrey Semashev </para>

<para>01.03.2008</para>

The header contains forward declaration of tools for extracting attribute values from the view. </para><namespace name="boost">
<namespace name="log">
<class id="doxygen.attributes.classboost_1_1log_1_1value__extractor" name="value_extractor"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="FallbackPolicyT"/>
      <template-type-parameter name="TagT"/>
    </template><inherit access="private">FallbackPolicyT</inherit><purpose>Generic attribute value extractor. </purpose><description><para>Attribute value extractor is a functional object that attempts to find and extract the stored attribute value from the attribute values view or a log record. The extracted value is returned from the extractor. </para></description><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1value__extractor_1ab7a6681e433162b4b70f5367ac0b1249" cv="= default"><description><para>Default constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1value__extractor_1a8106931f3d04c7aad0545547213177cc"><parameter name="that"><paramtype><classname>value_extractor</classname> const &amp;</paramtype></parameter><description><para>Copy constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1value__extractor_1aa8d891747b19c676d06cf069e8e9ddbd" specifiers="explicit"><template>
          <template-type-parameter name="U"/>
        </template><parameter name="arg"><paramtype>U const &amp;</paramtype><description><para>Fallback policy constructor argument </para></description></parameter><description><para>Constructor</para><para>
</para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1value__extractor_1afdbd28303d2488e4ec02cdab6fc4232e" name="operator()" cv="const"><type>result_type</type><parameter name="attr"><paramtype><classname>attribute_value</classname> const &amp;</paramtype><description><para>The attribute value to extract from. </para></description></parameter><description><para>Extraction operator. Attempts to acquire the stored value of one of the supported types. If extraction succeeds, the extracted value is returned.</para><para>

</para></description><returns><para>The extracted value, if extraction succeeded, an empty value otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1value__extractor_1a0c2571ef1c408ec482727fb7d407bcb6" name="operator()" cv="const"><type>result_type</type><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>Attribute value name. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><description><para>Extraction operator. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types. If extraction succeeds, the extracted value is returned.</para><para>

</para></description><returns><para>The extracted value, if extraction succeeded, an empty value otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1value__extractor_1aab995cc02d2168e77a669a49c83d4128" name="operator()" cv="const"><type>result_type</type><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>Attribute value name. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>Extraction operator. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types. If extraction succeeds, the extracted value is returned.</para><para>

</para></description><returns><para>The extracted value, if extraction succeeded, an empty value otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1value__extractor_1adbbf3d5076c156b538061c3678ae35c4" name="operator()" cv="const"><type>result_type</type><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>Attribute value name. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><description><para>Extraction operator. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types. If extraction succeeds, the extracted value is returned.</para><para>

</para></description><returns><para>The extracted value, if extraction succeeded, an empty value otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1value__extractor_1a54e65b79177918fcf47f5a5a9ae2a7b1" name="get_fallback_policy" cv="const"><type>fallback_policy const &amp;</type><description><para>
</para></description><returns><para>Fallback policy </para>
</returns></method>
</method-group>
</class><namespace name="result_of">
<struct id="doxygen.attributes.structboost_1_1log_1_1result__of_1_1extract" name="extract"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="TagT"/>
    </template><purpose>A metafunction that allows to acquire the result of the value extraction. </purpose><description><para>The metafunction results in a type that is in form of <computeroutput>value_ref&lt; T, TagT &gt;</computeroutput>. </para></description></struct><struct id="doxygen.attributes.structboost_1_1log_1_1result__of_1_1extract__or__default" name="extract_or_default"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="DefaultT"/>
      <template-type-parameter name="TagT"/>
    </template><purpose>A metafunction that allows to acquire the result of the value extraction. </purpose><description><para>The metafunction results in a type that is in form of <computeroutput>T const&amp;</computeroutput>, if <computeroutput>T</computeroutput> is not an MPL type sequence and <computeroutput>DefaultT</computeroutput> is the same as <computeroutput>T</computeroutput>, or <computeroutput>value_ref&lt; TypesT, TagT &gt;</computeroutput> otherwise, with <computeroutput>TypesT</computeroutput> being a type sequence comprising the types from sequence <computeroutput>T</computeroutput> and <computeroutput>DefaultT</computeroutput>, if it is not present in <computeroutput>T</computeroutput> already. </para></description></struct><struct id="doxygen.attributes.structboost_1_1log_1_1result__of_1_1extract__or__throw" name="extract_or_throw"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="TagT"/>
    </template><purpose>A metafunction that allows to acquire the result of the value extraction. </purpose><description><para>The metafunction results in a type that is in form of <computeroutput>T const&amp;</computeroutput>, if <computeroutput>T</computeroutput> is not an MPL type sequence, or <computeroutput>value_ref&lt; T, TagT &gt;</computeroutput> otherwise. In the latter case the value reference shall never be empty. </para></description></struct></namespace>




































</namespace>
</namespace>
</header>
<header id="doxygen.attributes.value__visitation_8hpp" name="boost/log/attributes/value_visitation.hpp">
<para><para>Andrey Semashev </para>

<para>01.03.2008</para>

The header contains implementation of convenience tools to apply visitors to an attribute value in the view. </para><namespace name="boost">
<namespace name="log">
<class id="doxygen.attributes.classboost_1_1log_1_1visitation__result" name="visitation_result"><purpose>The class represents attribute value visitation result. </purpose><description><para>The main purpose of this class is to provide a convenient interface for checking whether the attribute value visitation succeeded or not. It also allows to discover the actual cause of failure, should the operation fail. </para></description><enum id="doxygen.attributes.classboost_1_1log_1_1visitation__result_1a88a76ee847c844cc47b94caac600689d" name="error_code"><enumvalue id="doxygen.attributes.classboost_1_1log_1_1visitation__result_1a88a76ee847c844cc47b94caac600689dad8b76af209cd7ba83b4ebf33ba1637b2" name="ok"><purpose>The attribute value has been visited successfully. </purpose></enumvalue><enumvalue id="doxygen.attributes.classboost_1_1log_1_1visitation__result_1a88a76ee847c844cc47b94caac600689dabceaee91f1aa2969139751c0458be2ff" name="value_not_found"><purpose>The attribute value is not present in the view. </purpose></enumvalue><enumvalue id="doxygen.attributes.classboost_1_1log_1_1visitation__result_1a88a76ee847c844cc47b94caac600689da17fc01b05e6dcaa26f48ef43173db8db" name="value_has_invalid_type"><purpose>The attribute value is present in the view, but has an unexpected type. </purpose></enumvalue><purpose>Error codes for attribute value visitation. </purpose></enum>
<method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1visitation__result_1a608f659c0b3f5ce2062c1e92f94b9539" cv="noexcept"><parameter name="code"><paramtype>error_code</paramtype><default>ok</default></parameter><description><para>Initializing constructor. Creates the result that is equivalent to the specified error code. </para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1visitation__result_1a420e60e9788bfa3b52aa3aab72ea3a5e" name="conversion-operator" cv="const noexcept" specifiers="explicit"><type>bool</type><description><para>Checks if the visitation was successful.</para><para>
</para></description><returns><para><computeroutput>true</computeroutput> if the value was visited successfully, <computeroutput>false</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1visitation__result_1aa781ac6ac5a122ef2e89325c84d51f5a" name="operator!" cv="const noexcept"><type>bool</type><description><para>Checks if the visitation was unsuccessful.</para><para>
</para></description><returns><para><computeroutput>false</computeroutput> if the value was visited successfully, <computeroutput>true</computeroutput> otherwise. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1visitation__result_1a0a3e52ec175378c040619cbcb18226d5" name="code" cv="const noexcept"><type>error_code</type><description><para>
</para></description><returns><para>The actual result code of value visitation </para>
</returns></method>
</method-group>
</class><function id="doxygen.attributes.value__visitation_8hpp_1ae00600203d3abcc6ddba8735e420c3f0" name="visit"><type><classname>visitation_result</classname></type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to visit. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>The function applies a visitor to an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></function>
<function id="doxygen.attributes.value__visitation_8hpp_1a3699a2baf25f85c716786281fb3bcc25" name="visit"><type><classname>visitation_result</classname></type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to visit. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>The function applies a visitor to an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></function>
<function id="doxygen.attributes.value__visitation_8hpp_1ae4cb7d152fb21cf479b510841ddf7067" name="visit"><type><classname>visitation_result</classname></type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>The name of the attribute value to visit. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>The function applies a visitor to an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></function>
<function id="doxygen.attributes.value__visitation_8hpp_1a7cdfb8b0f8ee2d334cef5a8cc63e8f68" name="visit"><type><classname>visitation_result</classname></type><template>
          <template-type-parameter name="T"/>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="value"><paramtype><classname>attribute_value</classname> const &amp;</paramtype><description><para>The attribute value to visit. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>The function applies a visitor to an attribute value. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></function>
<function id="doxygen.attributes.value__visitation_8hpp_1a3c345b1cc18f948b9caf706c57bf473c" name="visit"><type><classname>visitation_result</classname></type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to visit. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>The function applies a visitor to an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></function>
<function id="doxygen.attributes.value__visitation_8hpp_1a8b613739ba57311ee80e35dc077c9c82" name="visit"><type><classname>visitation_result</classname></type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to visit. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>The function applies a visitor to an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></function>
<function id="doxygen.attributes.value__visitation_8hpp_1a6f8fc93fc9f3ba35ab9db7af0338172e" name="visit"><type><classname>visitation_result</classname></type><template>
          <template-type-parameter name="DescriptorT"/>
          <template-nontype-parameter name="ActorT"><type>template&lt; typename &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="keyword"><paramtype>expressions::attribute_keyword&lt; DescriptorT, ActorT &gt; const &amp;</paramtype><description><para>The keyword of the attribute value to visit. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>The function applies a visitor to an attribute value from the view. The user has to explicitly specify the type or set of possible types of the attribute value to be visited.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></function>





























</namespace>
</namespace>
</header>
<header id="doxygen.attributes.value__visitation__fwd_8hpp" name="boost/log/attributes/value_visitation_fwd.hpp">
<para><para>Andrey Semashev </para>

<para>01.03.2008</para>

The header contains forward declaration of convenience tools to apply visitors to an attribute value in the view. </para><namespace name="boost">
<namespace name="log">
<class id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker" name="value_visitor_invoker"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="FallbackPolicyT"/>
    </template><inherit access="private">FallbackPolicyT</inherit><purpose>Generic attribute value visitor invoker. </purpose><description><para>Attribute value invoker is a functional object that attempts to find and extract the stored attribute value from the attribute value view or a log record. The extracted value is passed to a unary function object (the visitor) provided by user.</para><para>The invoker can be specialized on one or several attribute value types that should be specified in the second template argument. </para></description><method-group name="public member functions">
<constructor id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker_1a744e16495375f7f31b7619bdc08c6cd0" cv="= default"><description><para>Default constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker_1aeae3551bef65044a0847b10b9536b092"><parameter name="that"><paramtype><classname>value_visitor_invoker</classname> const &amp;</paramtype></parameter><description><para>Copy constructor </para></description></constructor>
<constructor id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker_1ae538a96a2bf6c16d05595c921bf96ff6" specifiers="explicit"><template>
          <template-type-parameter name="U"/>
        </template><parameter name="arg"><paramtype>U const &amp;</paramtype><description><para>Fallback policy argument </para></description></parameter><description><para>Initializing constructor</para><para>
</para></description></constructor>
<method id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker_1a19ce8578f06d3fc5ccae94e9c548c203" name="operator()" cv="const"><type>result_type</type><template>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="attr"><paramtype><classname>attribute_value</classname> const &amp;</paramtype><description><para>An attribute value to apply the visitor to. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>Visitation operator. Attempts to acquire the stored value of one of the supported types. If acquisition succeeds, the value is passed to <emphasis>visitor</emphasis>.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker_1a9aaf0d648a5da72fdfc5639fd832932a" name="operator()" cv="const"><type>result_type</type><template>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>Attribute value name. </para></description></parameter><parameter name="attrs"><paramtype><classname>attribute_value_set</classname> const &amp;</paramtype><description><para>A set of attribute values in which to look for the specified attribute value. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>Visitation operator. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types. If acquisition succeeds, the value is passed to <emphasis>visitor</emphasis>.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker_1a0b6964a1a91a2bc5ccd146f7f62697db" name="operator()" cv="const"><type>result_type</type><template>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>Attribute value name. </para></description></parameter><parameter name="rec"><paramtype>record const &amp;</paramtype><description><para>A log record. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>Visitation operator. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types. If acquisition succeeds, the value is passed to <emphasis>visitor</emphasis>.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker_1a826b9295fd6276ddb3a6bce30112cc3c" name="operator()" cv="const"><type>result_type</type><template>
          <template-type-parameter name="VisitorT"/>
        </template><parameter name="name"><paramtype><classname>attribute_name</classname> const &amp;</paramtype><description><para>Attribute value name. </para></description></parameter><parameter name="rec"><paramtype>record_view const &amp;</paramtype><description><para>A log record view. The attribute value will be sought among those associated with the record. </para></description></parameter><parameter name="visitor"><paramtype>VisitorT</paramtype><description><para>A receiving function object to pass the attribute value to. </para></description></parameter><description><para>Visitation operator. Looks for an attribute value with the specified name and tries to acquire the stored value of one of the supported types. If acquisition succeeds, the value is passed to <emphasis>visitor</emphasis>.</para><para>

</para></description><returns><para>The result of visitation. </para>
</returns></method>
<method id="doxygen.attributes.classboost_1_1log_1_1value__visitor__invoker_1a54e65b79177918fcf47f5a5a9ae2a7b1" name="get_fallback_policy" cv="const"><type>fallback_policy const &amp;</type><description><para>
</para></description><returns><para>Fallback policy </para>
</returns></method>
</method-group>
</class>



































</namespace>
</namespace>
</header>
</library-reference>