// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DateUnit } from './date-unit.js';


/**
 * Date is either a 32-bit or 64-bit signed integer type representing an
 * elapsed time since UNIX epoch (1970-01-01), stored in either of two units:
 *
 * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no
 *   leap seconds), where the values are evenly divisible by 86400000
 * * Days (32 bits) since the UNIX epoch
 */
export class Date {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Date {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDate(bb:flatbuffers.ByteBuffer, obj?:Date):Date {
  return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDate(bb:flatbuffers.ByteBuffer, obj?:Date):Date {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

unit():DateUnit {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : DateUnit.MILLISECOND;
}

static startDate(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addUnit(builder:flatbuffers.Builder, unit:DateUnit) {
  builder.addFieldInt16(0, unit, DateUnit.MILLISECOND);
}

static endDate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDate(builder:flatbuffers.Builder, unit:DateUnit):flatbuffers.Offset {
  Date.startDate(builder);
  Date.addUnit(builder, unit);
  return Date.endDate(builder);
}
}
