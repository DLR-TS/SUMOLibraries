/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPERL
#define SWIGPERL
#endif

#define SWIG_CASTRANK_MODE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Add in functionality missing in older versions of Perl. Much of this is based on Devel-PPPort on cpan. */

/* Add PERL_REVISION, PERL_VERSION, PERL_SUBVERSION if missing */
#ifndef PERL_REVISION
#  if !defined(__PATCHLEVEL_H_INCLUDED__) && !(defined(PATCHLEVEL) && defined(SUBVERSION))
#    define PERL_PATCHLEVEL_H_IMPLICIT
#    include <patchlevel.h>
#  endif
#  if !(defined(PERL_VERSION) || (defined(SUBVERSION) && defined(PATCHLEVEL)))
#    include <could_not_find_Perl_patchlevel.h>
#  endif
#  ifndef PERL_REVISION
#    define PERL_REVISION       (5)
#    define PERL_VERSION        PATCHLEVEL
#    define PERL_SUBVERSION     SUBVERSION
#  endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

#ifndef SvIOK_UV
# define SvIOK_UV(sv)       (SvIOK(sv) && (SvUVX(sv) == SvIVX(sv)))
#endif

#ifndef SvUOK
# define SvUOK(sv)           SvIOK_UV(sv)
#endif

#if ((PERL_VERSION < 4) || ((PERL_VERSION == 4) && (PERL_SUBVERSION <= 5)))
#  define PL_sv_undef               sv_undef
#  define PL_na	                    na
#  define PL_errgv                  errgv
#  define PL_sv_no                  sv_no
#  define PL_sv_yes                 sv_yes
#  define PL_markstack_ptr          markstack_ptr
#endif

#ifndef IVSIZE
#  ifdef LONGSIZE
#    define IVSIZE LONGSIZE
#  else
#    define IVSIZE 4 /* A bold guess, but the best we can make. */
#  endif
#endif

#ifndef INT2PTR
#  if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#    define PTRV                  UV
#    define INT2PTR(any,d)        (any)(d)
#  else
#    if PTRSIZE == LONGSIZE
#      define PTRV                unsigned long
#    else
#      define PTRV                unsigned
#    endif
#    define INT2PTR(any,d)        (any)(PTRV)(d)
#  endif

#  define NUM2PTR(any,d)  (any)(PTRV)(d)
#  define PTR2IV(p)       INT2PTR(IV,p)
#  define PTR2UV(p)       INT2PTR(UV,p)
#  define PTR2NV(p)       NUM2PTR(NV,p)

#  if PTRSIZE == LONGSIZE
#    define PTR2ul(p)     (unsigned long)(p)
#  else
#    define PTR2ul(p)     INT2PTR(unsigned long,p)
#  endif
#endif /* !INT2PTR */

#ifndef SvPV_nolen
# define SvPV_nolen(x) SvPV(x,PL_na)
#endif

#ifndef get_sv
#  define get_sv perl_get_sv
#endif

#ifndef ERRSV
#  define ERRSV get_sv("@",FALSE)
#endif

#ifndef pTHX_
#define pTHX_
#endif   

#include <string.h>
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Perl_ErrorType(int code) {
  switch(code) {
  case SWIG_MemoryError:
    return "MemoryError";
  case SWIG_IOError:
    return "IOError";
  case SWIG_RuntimeError:
    return "RuntimeError";
  case SWIG_IndexError:
    return "IndexError";
  case SWIG_TypeError:
    return "TypeError";
  case SWIG_DivisionByZero:
    return "ZeroDivisionError";
  case SWIG_OverflowError:
    return "OverflowError";
  case SWIG_SyntaxError:
    return "SyntaxError";
  case SWIG_ValueError:
    return "ValueError";
  case SWIG_SystemError:
    return "SystemError";
  case SWIG_AttributeError:
    return "AttributeError";
  default:
    return "RuntimeError";
  }
}


/* -----------------------------------------------------------------------------
 * perlrun.swg
 *
 * This file contains the runtime support for Perl modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef PERL_OBJECT
#define SWIG_PERL_OBJECT_DECL CPerlObj *SWIGUNUSEDPARM(pPerl),
#define SWIG_PERL_OBJECT_CALL pPerl,
#else
#define SWIG_PERL_OBJECT_DECL
#define SWIG_PERL_OBJECT_CALL
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pp, type, flags)           SWIG_Perl_ConvertPtr(SWIG_PERL_OBJECT_CALL obj, pp, type, flags)
#define SWIG_ConvertPtrAndOwn(obj, pp, type, flags,own) SWIG_Perl_ConvertPtrAndOwn(SWIG_PERL_OBJECT_CALL obj, pp, type, flags, own)
#define SWIG_NewPointerObj(p, type, flags)              SWIG_Perl_NewPointerObj(SWIG_PERL_OBJECT_CALL p, type, flags)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, p, s, type)             SWIG_Perl_ConvertPacked(SWIG_PERL_OBJECT_CALL obj, p, s, type)
#define SWIG_NewPackedObj(p, s, type)	                SWIG_Perl_NewPackedObj(SWIG_PERL_OBJECT_CALL p, s, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Perl_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Perl_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Perl_ErrorType(code)               
#define SWIG_Error(code, msg)            		sv_setpvf(get_sv("@", GV_ADD), "%s %s", SWIG_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    

/* Perl-specific SWIG API */

#define SWIG_MakePtr(sv, ptr, type, flags)              SWIG_Perl_MakePtr(SWIG_PERL_OBJECT_CALL sv, ptr, type, flags)
#define SWIG_MakePackedObj(sv, p, s, type)	        SWIG_Perl_MakePackedObj(SWIG_PERL_OBJECT_CALL sv, p, s, type)
#define SWIG_SetError(str)                              SWIG_Error(SWIG_RuntimeError, str)


#define SWIG_PERL_DECL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_DECL arg1)
#define SWIG_PERL_CALL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_CALL arg1)
#define SWIG_PERL_DECL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_DECL arg1, arg2)
#define SWIG_PERL_CALL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_CALL arg1, arg2)

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER   SWIG_POINTER_OWN
#define SWIG_SHADOW  SWIG_OWNER << 1

#define SWIG_MAYBE_PERL_OBJECT SWIG_PERL_OBJECT_DECL

/* SWIG Perl macros */

/* Macro to declare an XS function */
#ifndef XSPROTO
#   define XSPROTO(name) void name(pTHX_ CV* cv)
#endif

/* Macro to call an XS function */
#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC

#else /* PERL_OBJECT */

#define MAGIC_PPERL
#define SWIGCLASS_STATIC static SWIGUNUSED

#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#else /* MULTIPLICITY */

#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif /* MULTIPLICITY */
#endif /* PERL_OBJECT */

#  ifdef PERL_OBJECT
#    define SWIG_croak_null() SWIG_Perl_croak_null(pPerl)
static void SWIGUNUSED SWIG_Perl_croak_null(CPerlObj *pPerl)
#  else
static void SWIGUNUSED SWIG_croak_null()
#  endif
{
  SV *err = get_sv("@", GV_ADD);
#  if (PERL_VERSION < 6)
  croak("%_", err);
#  else
  if (sv_isobject(err))
    croak(0);
  else
    croak("%s", SvPV_nolen(err));
#  endif
}


/* 
   Define how strict is the cast between strings and integers/doubles
   when overloading between these types occurs.
   
   The default is making it as strict as possible by using SWIG_AddCast
   when needed.
   
   You can use -DSWIG_PERL_NO_STRICT_STR2NUM at compilation time to
   disable the SWIG_AddCast, making the casting between string and
   numbers less strict.

   In the end, we try to solve the overloading between strings and
   numerical types in the more natural way, but if you can avoid it,
   well, avoid it using %rename, for example.
*/
#ifndef SWIG_PERL_NO_STRICT_STR2NUM
# ifndef SWIG_PERL_STRICT_STR2NUM
#  define SWIG_PERL_STRICT_STR2NUM
# endif
#endif
#ifdef SWIG_PERL_STRICT_STR2NUM
/* string takes precedence */
#define SWIG_Str2NumCast(x) SWIG_AddCast(x)  
#else
/* number takes precedence */
#define SWIG_Str2NumCast(x) x
#endif



#include <stdlib.h>

SWIGRUNTIME const char *
SWIG_Perl_TypeProxyName(const swig_type_info *type) {
  if (!type) return NULL;
  if (type->clientdata != NULL) {
    return (const char*) type->clientdata;
  } 
  else {
    return type->name;
  }
}

/* Identical to SWIG_TypeCheck, except for strcmp comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeProxyCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(SWIG_Perl_TypeProxyName(iter->type), c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* Function for getting a pointer value */

SWIGRUNTIME int
SWIG_Perl_ConvertPtrAndOwn(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags, int *own) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;
  SV *tsv = 0;

  if (own)
    *own = 0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    IV tmp = 0;
    tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
	    tsv = (SV*)SvRV(sv);
            tmp = SvIV(tsv);
          }
        }
      } else {
        return SWIG_ERROR;
      }
    } else {
      tmp = SvIV(tsv);
    }
    voidptr = INT2PTR(void *,tmp);
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return SWIG_OK;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    if (!SvROK(sv)) {
      /* In Perl 5.12 and later, SVt_RV == SVt_IV, so sv could be a valid integer value.  */
      if (SvIOK(sv)) {
        return SWIG_ERROR;
      } else {
        /* NULL pointer (reference to undef). */
        *(ptr) = (void *) 0;
        return SWIG_OK;
      }
    } else {
      return SWIG_ERROR;
    }
  } else {                            /* Don't know what it is */
    return SWIG_ERROR;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeProxyCheck(_c,_t);
#ifdef SWIG_DIRECTORS
    if (!tc && !sv_derived_from(sv,SWIG_Perl_TypeProxyName(_t))) {
#else
    if (!tc) {
#endif
      return SWIG_ERROR;
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,voidptr,&newmemory);
      if (newmemory == SWIG_CAST_NEW_MEMORY) {
        assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
        if (own)
          *own = *own | SWIG_CAST_NEW_MEMORY;
      }
    }
  } else {
    *ptr = voidptr;
  }

  /* 
   *  DISOWN implementation: we need a perl guru to check this one.
   */
  if (tsv && (flags & SWIG_POINTER_DISOWN)) {
    /* 
     *  almost copy paste code from below SWIG_POINTER_OWN setting
     */
    SV *obj = sv;
    HV *stash = SvSTASH(SvRV(obj));
    GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
    if (isGV(gv)) {
      HV *hv = GvHVn(gv);
      /*
       * To set ownership (see below), a newSViv(1) entry is added. 
       * Hence, to remove ownership, we delete the entry.
       */
      if (hv_exists_ent(hv, obj, 0)) {
	hv_delete_ent(hv, obj, 0, 0);
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  return SWIG_Perl_ConvertPtrAndOwn(sv, ptr, _t, flags, 0);
}

SWIGRUNTIME void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & (SWIG_SHADOW | SWIG_POINTER_OWN))) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, SWIG_Perl_TypeProxyName(t), ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_POINTER_OWN) {
      HV *hv;
      GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, SWIG_Perl_TypeProxyName(t), ptr);
  }
}

SWIGRUNTIMEINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME void
SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(SWIG_Perl_TypeProxyName(type))) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,SWIG_Perl_TypeProxyName(type));
  sv_setpv(sv, result);
}

SWIGRUNTIME SV *
SWIG_Perl_NewPackedObj(SWIG_MAYBE_PERL_OBJECT void *ptr, int sz, swig_type_info *type) {
  SV *result = sv_newmortal();
  SWIG_Perl_MakePackedObj(result, ptr, sz, type);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return SWIG_ERROR;
  c = SvPV_nolen(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return SWIG_ERROR;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return SWIG_ERROR;
  }
  return SWIG_OK;
}


/* Macros for low-level exception handling */
#define SWIG_croak(x)    { SWIG_Error(SWIG_RuntimeError, x); SWIG_fail; }


typedef XSPROTO(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;


/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
# ifdef __cplusplus
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,const_cast<char*>(a),b,c)
# else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,(char*)(a),b,c)
# endif
# ifndef MULTIPLICITY
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) 
# else
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) 
# endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
SWIGRUNTIME void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) 
#endif
{
  MAGIC *mg;
  sv_magic(sv,sv,'U',name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFunc) get;
  mg->mg_virtual->svt_set = (SwigMagicFunc) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


SWIGRUNTIME swig_module_info *
SWIG_Perl_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE | GV_ADDMULTI);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE | GV_ADDMULTI);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef __cplusplus
}
#endif

/* Workaround perl5 global namespace pollution. Note that undefining library
 * functions like fopen will not solve the problem on all platforms as fopen
 * might be a macro on Windows but not necessarily on other operating systems. */
#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef do_exec
  #undef do_exec
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif
#ifdef free
  #undef free
#endif
#ifdef malloc
  #undef malloc
#endif
#ifdef calloc
  #undef calloc
#endif
#ifdef Stat
  #undef Stat
#endif
#ifdef check
  #undef check
#endif
#ifdef seekdir
  #undef seekdir
#endif
#ifdef open
  #undef open
#endif
#ifdef readdir
  #undef readdir
#endif
#ifdef bind
  #undef bind
#endif
#ifdef access
  #undef access
#endif
#ifdef stat
  #undef stat
#endif
#ifdef seed
  #undef seed
#endif

#ifdef bool
  /* Leave if macro is from C99 stdbool.h */
  #ifndef __bool_true_false_are_defined
    #undef bool
  #endif
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CPLErrorHandler swig_types[0]
#define SWIGTYPE_p_CPLXMLNode swig_types[1]
#define SWIGTYPE_p_FILE swig_types[2]
#define SWIGTYPE_p_GByte swig_types[3]
#define SWIGTYPE_p_GDALAsyncReaderShadow swig_types[4]
#define SWIGTYPE_p_GDALAttributeHS swig_types[5]
#define SWIGTYPE_p_GDALBuildVRTOptions swig_types[6]
#define SWIGTYPE_p_GDALColorEntry swig_types[7]
#define SWIGTYPE_p_GDALColorTableShadow swig_types[8]
#define SWIGTYPE_p_GDALDEMProcessingOptions swig_types[9]
#define SWIGTYPE_p_GDALDatasetShadow swig_types[10]
#define SWIGTYPE_p_GDALDimensionHS swig_types[11]
#define SWIGTYPE_p_GDALDriverShadow swig_types[12]
#define SWIGTYPE_p_GDALEDTComponentHS swig_types[13]
#define SWIGTYPE_p_GDALExtendedDataTypeClass swig_types[14]
#define SWIGTYPE_p_GDALExtendedDataTypeHS swig_types[15]
#define SWIGTYPE_p_GDALExtendedDataTypeSubType swig_types[16]
#define SWIGTYPE_p_GDALGridOptions swig_types[17]
#define SWIGTYPE_p_GDALGroupHS swig_types[18]
#define SWIGTYPE_p_GDALInfoOptions swig_types[19]
#define SWIGTYPE_p_GDALMDArrayHS swig_types[20]
#define SWIGTYPE_p_GDALMajorObjectShadow swig_types[21]
#define SWIGTYPE_p_GDALMultiDimInfoOptions swig_types[22]
#define SWIGTYPE_p_GDALMultiDimTranslateOptions swig_types[23]
#define SWIGTYPE_p_GDALNearblackOptions swig_types[24]
#define SWIGTYPE_p_GDALProgressFunc swig_types[25]
#define SWIGTYPE_p_GDALRasterAttributeTableShadow swig_types[26]
#define SWIGTYPE_p_GDALRasterBandShadow swig_types[27]
#define SWIGTYPE_p_GDALRasterizeOptions swig_types[28]
#define SWIGTYPE_p_GDALTransformerInfoShadow swig_types[29]
#define SWIGTYPE_p_GDALTranslateOptions swig_types[30]
#define SWIGTYPE_p_GDALVectorTranslateOptions swig_types[31]
#define SWIGTYPE_p_GDALViewshedMode swig_types[32]
#define SWIGTYPE_p_GDALViewshedOutputType swig_types[33]
#define SWIGTYPE_p_GDALWarpAppOptions swig_types[34]
#define SWIGTYPE_p_GDAL_GCP swig_types[35]
#define SWIGTYPE_p_GIntBig swig_types[36]
#define SWIGTYPE_p_GUIntBig swig_types[37]
#define SWIGTYPE_p_OGRFeatureShadow swig_types[38]
#define SWIGTYPE_p_OGRFieldDomainShadow swig_types[39]
#define SWIGTYPE_p_OGRGeometryShadow swig_types[40]
#define SWIGTYPE_p_OGRLayerShadow swig_types[41]
#define SWIGTYPE_p_OGRStyleTableShadow swig_types[42]
#define SWIGTYPE_p_OSRSpatialReferenceShadow swig_types[43]
#define SWIGTYPE_p_Statistics swig_types[44]
#define SWIGTYPE_p_VSILFILE swig_types[45]
#define SWIGTYPE_p_VSIStatBufL swig_types[46]
#define SWIGTYPE_p_VSIWriteFunction swig_types[47]
#define SWIGTYPE_p_char swig_types[48]
#define SWIGTYPE_p_double swig_types[49]
#define SWIGTYPE_p_f_double_p_q_const__char_p_void__int swig_types[50]
#define SWIGTYPE_p_int swig_types[51]
#define SWIGTYPE_p_p_GDALDatasetShadow swig_types[52]
#define SWIGTYPE_p_p_GDALRasterBandShadow swig_types[53]
#define SWIGTYPE_p_p_GDAL_GCP swig_types[54]
#define SWIGTYPE_p_p_GUIntBig swig_types[55]
#define SWIGTYPE_p_p_char swig_types[56]
static swig_type_info *swig_types[58];
static swig_module_info swig_module = {swig_types, 57, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_Geo__GDAL

#define SWIG_name   "Geo::GDALc::boot_Geo__GDAL"
#define SWIG_prefix "Geo::GDALc::"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#include <iostream>
#include <vector>
using namespace std;

#define CPL_SUPRESS_CPLUSPLUS

// Suppress deprecation warning for GDALApplyVerticalShiftGrid
#define CPL_WARN_DEPRECATED_GDALApplyVerticalShiftGrid(x)

#include "cpl_port.h"
#include "cpl_string.h"
#include "cpl_multiproc.h"
#include "cpl_http.h"
#include "cpl_vsi_error.h"

#include "gdal.h"
#include "gdal_alg.h"
#include "gdalwarper.h"
#include "ogr_srs_api.h"

typedef void GDALMajorObjectShadow;
typedef void GDALDriverShadow;
typedef void GDALDatasetShadow;
typedef void GDALRasterBandShadow;
typedef void GDALColorTableShadow;
typedef void GDALRasterAttributeTableShadow;
typedef void GDALTransformerInfoShadow;
typedef void GDALAsyncReaderShadow;

typedef GDALExtendedDataTypeHS GDALExtendedDataTypeHS;
typedef GDALEDTComponentHS GDALEDTComponentHS;
typedef GDALGroupHS GDALGroupHS;
typedef GDALMDArrayHS GDALMDArrayHS;
typedef GDALAttributeHS GDALAttributeHS;
typedef GDALDimensionHS GDALDimensionHS;



#ifdef DEBUG
typedef struct OGRSpatialReferenceHS OSRSpatialReferenceShadow;
typedef struct OGRLayerHS OGRLayerShadow;
typedef struct OGRFeatureHS OGRFeatureShadow;
typedef struct OGRGeometryHS OGRGeometryShadow;
#else
typedef void OSRSpatialReferenceShadow;
typedef void OGRLayerShadow;
typedef void OGRFeatureShadow;
typedef void OGRGeometryShadow;
#endif

typedef struct OGRStyleTableHS OGRStyleTableShadow;
typedef struct OGRFieldDomainHS OGRFieldDomainShadow;


/* use this to not return the int returned by GDAL */
typedef int RETURN_NONE;
/* return value that is used for VSI methods that return -1 on error (and set errno) */
typedef int VSI_RETVAL;


    #ifndef SWIG
    typedef struct
    {
        SV *fct;
        SV *data;
    } SavedEnv;
    #endif
    int callback_d_cp_vp(double d, const char *cp, void *vp)
    {
        int count, ret;
        SavedEnv *env_ptr = (SavedEnv *)vp;
        dSP;
        ENTER;
        SAVETMPS;
        PUSHMARK(SP);
        XPUSHs(sv_2mortal(newSVnv(d)));
        XPUSHs(sv_2mortal(newSVpv(cp, 0)));
        if (env_ptr->data)
            XPUSHs(env_ptr->data);
        PUTBACK;
        count = call_sv(env_ptr->fct, G_SCALAR);
        SPAGAIN;
        if (count != 1) {
            fprintf(stderr, "The callback must return only one value.\n");
            return 0; /* interrupt */
        }
        ret = POPi;
        PUTBACK;
        FREETMPS;
        LEAVE;
        return ret;
    }
    #ifndef SWIG
    static SV *VSIStdoutSetRedirectionFct = &PL_sv_undef;
    #endif
    size_t callback_fwrite(const void *ptr, size_t size, size_t nmemb,
                           FILE *stream)
    {
        dSP;
        ENTER;
        SAVETMPS;
        PUSHMARK(SP);
        XPUSHs(sv_2mortal(newSVpv((const char*)ptr, size*nmemb)));
        PUTBACK;
        call_sv(VSIStdoutSetRedirectionFct, G_DISCARD);
        FREETMPS;
        LEAVE;
        return size*nmemb;
    }


    void do_confess(const char *error, int push_to_error_stack) {
        SV *sv = newSVpv("", 0);
        sv_setpvf(sv, "%s\n", error);
        if (push_to_error_stack) {
            AV* error_stack = get_av("Geo::GDAL::error", 0);
            av_push(error_stack, sv);
        } else {
            sv = sv_2mortal(sv);
        }
        dSP;
        ENTER;
        SAVETMPS;
        PUSHMARK(SP);
        XPUSHs( sv );
        PUTBACK;
        call_pv("Carp::confess", G_DISCARD);
        /*
        confess never returns, so these will not get executed:
        FREETMPS;
        LEAVE;
        */
    }
    #define OUT_OF_MEMORY "Out of memory."
    #define CALL_FAILED "Call failed. Possible reason is an index out of range, mathematical problem, or something else."
    #define NEED_DEF "A parameter which must be defined or not empty, is not."
    #define WRONG_CLASS "Object has a wrong class."
    #define NEED_REF "A parameter which must be a reference, is not."
    #define NEED_HASH_REF "A parameter/item which must be a hash reference, is not."
    #define NEED_ARRAY_REF "A parameter/item which must be an array reference, is not."
    #define NEED_BINARY_DATA "A parameter which must be binary data, is not."
    #define NEED_CODE_REF "A parameter which must be an anonymous subroutine, is not."
    #define WRONG_ITEM_IN_ARRAY "An item in an array parameter has wrong type."
    #define ARRAY_TO_XML_FAILED "An array parameter cannot be converted to an XMLTree."
    #define NOT_ENOUGH_ELEMENTS "The supplied array does not have enough elements."


void VeryQuietErrorHandler(CPLErr eclass, int code, const char *msg ) {
  /* If the error class is CE_Fatal, we want to have a message issued
     because the CPL support code does an abort() before any exception
     can be generated */
#if defined(SWIGPERL)
    AV* error_stack = get_av("Geo::GDAL::error", 0);
    SV *error = newSVpv(msg, 0);
    av_push(error_stack, error);
#endif
  if (eclass == CE_Fatal ) {
    CPLDefaultErrorHandler(eclass, code, msg );
  }
}


void UseExceptions() {
  CPLSetErrorHandler( (CPLErrorHandler) VeryQuietErrorHandler );
}

void DontUseExceptions() {
  CPLSetErrorHandler( CPLDefaultErrorHandler );
}


  double NVClassify(int comparison, double nv, AV* classifier, const char **error) {
     /* recursive, return nv < classifier[0] ? classifier[1] : classifier[2]
        sets error if there are not three values in the classifier,
        first is not a number, or second or third are not a number of arrayref
     */
     SV** f = av_fetch(classifier, 0, 0);
     SV** s = av_fetch(classifier, 1, 0);
     SV** t = av_fetch(classifier, 2, 0);
     if (f && (SvNOK(*f) || SvIOK(*f))) {
         switch(comparison) {
         case 0: /* lt */
         if (nv < SvNV(*f))
             t = s;
         break;
         case 1: /* lte */
         if (nv <= SvNV(*f))
             t = s;
         break;
         case 2: /* gt */
         if (nv > SvNV(*f))
             t = s;
         break;
         case 3: /* gte */
         if (nv >= SvNV(*f))
             t = s;
         break;
         }
         if (t && (SvNOK(*t) || SvIOK(*t)))
             return SvNV(*t);
         else if (t && SvROK(*t) && (SvTYPE(SvRV(*t)) == SVt_PVAV))
             return NVClassify(comparison, nv, (AV*)(SvRV(*t)), error);
         else
             *error = "The decision in a classifier must be a number or a reference to a classifier.";
     } else
         *error = "The first value in a classifier must be a number.";
     return 0;
  }
  int64_t IVClassify(int comparison, int64_t k, AV* classifier, const char **error) {
     /* recursive, return k < classifier[0] ? classifier[1] : classifier[2]
        sets error if there are not three values in the classifier,
        first is not a number, or second or third are not a number of arrayref
     */
     SV** f = av_fetch(classifier, 0, 0);
     SV** s = av_fetch(classifier, 1, 0);
     SV** t = av_fetch(classifier, 2, 0);
     if (f && (SvNOK(*f) || SvIOK(*f))) {
         switch(comparison) {
         case 0: /* lt */
         if (k < SvNV(*f))
             t = s;
         break;
         case 1: /* lte */
         if (k <= SvNV(*f))
             t = s;
         break;
         case 2: /* gt */
         if (k > SvNV(*f))
             t = s;
         break;
         case 3: /* gte */
         if (k >= SvNV(*f))
             t = s;
         break;
         }
         if (t && (SvNOK(*t) || SvIOK(*t)))
             return SvNV(*t);
         else if (t && SvROK(*t) && (SvTYPE(SvRV(*t)) == SVt_PVAV))
             return IVClassify(comparison, k, (AV*)(SvRV(*t)), error);
         else
             *error = "The decision in a classifier must be a number or a reference to a classifier.";
     } else
         *error = "The first value in a classifier must be a number.";
     return 0;
  }
  void NVClass(int comparison, double nv, AV* classifier, int *klass, const char **error) {
     /* recursive, return in klass nv < classifier[0] ? classifier[1] : classifier[2]
        sets error if there are not three values in the classifier,
        first is not a number, or second or third are not a number of arrayref
     */
     SV** f = av_fetch(classifier, 0, 0);
     SV** s = av_fetch(classifier, 1, 0);
     SV** t = av_fetch(classifier, 2, 0);
     if (f && (SvNOK(*f) || SvIOK(*f))) {
         ++*klass;
         switch(comparison) {
         case 0: /* lt */
         if (nv < SvNV(*f))
             --*klass;
             t = s;
         break;
         case 1: /* lte */
         if (nv <= SvNV(*f))
             --*klass;
             t = s;
         break;
         case 2: /* gt */
         if (nv > SvNV(*f))
             --*klass;
             t = s;
         break;
         case 3: /* gte */
         if (nv >= SvNV(*f))
             --*klass;
             t = s;
         break;
         }
         if (t && (SvNOK(*t) || SvIOK(*t)))
             return;
         else if (t && SvROK(*t) && (SvTYPE(SvRV(*t)) == SVt_PVAV))
             NVClass(comparison, nv, (AV*)(SvRV(*t)), klass, error);
         else
             *error = "The decision in a classifier must be a number or a reference to a classifier.";
     } else
         *error = "The first value in a classifier must be a number.";
  }
  AV* to_array_classifier(SV* classifier, int* comparison, const char **error) {
      if (SvROK(classifier) && (SvTYPE(SvRV(classifier)) == SVt_PVAV)) {
          SV** f = av_fetch((AV*)SvRV(classifier), 0, 0);
          SV** s = av_fetch((AV*)SvRV(classifier), 1, 0);
          if (f && SvPOK(*f)) {
              char *c = SvPV_nolen(*f);
              if (strcmp(c, "<") == 0)
                  *comparison = 0;
              else if (strcmp(c, "<=") == 0)
                  *comparison = 1;
              else if (strcmp(c, ">") == 0)
                  *comparison = 2;
              else if (strcmp(c, ">=") == 0)
                  *comparison = 3;
              else {
                  *error = "The first element in classifier object must be a comparison.";
                  return NULL;
              }
          }
          if (s && SvROK(*s) && (SvTYPE(SvRV(*s)) == SVt_PVAV))
              return (AV*)SvRV(*s);
          else
              *error = "The second element in classifier object must be an array reference.";
      } else
          *error = NEED_ARRAY_REF;
      return NULL;
  }


typedef char retStringAndCPLFree;


  void Debug( const char *msg_class, const char *message ) {
    CPLDebug( msg_class, "%s", message );
  }


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SV *obj, char** cptr, size_t* psize, int *alloc)
{
  if (SvMAGICAL(obj)) {
     SV *tmp = sv_newmortal();
     SvSetSV(tmp, obj);
     obj = tmp;
  }
  if (SvPOK(obj)) {
    STRLEN len = 0;
    char *cstr = SvPV(obj, len); 
    size_t size = len + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[size], cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      char* vptr = 0; 
      if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = vptr;
	if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





  CPLErr SetErrorHandler( CPLErrorHandler pfnErrorHandler = NULL, void* user_data = NULL )
  {
    if( pfnErrorHandler == NULL )
    {
        pfnErrorHandler = CPLDefaultErrorHandler;
    }

    CPLSetErrorHandlerEx( pfnErrorHandler, user_data );

    return CE_None;
  }


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double SWIG_PERL_DECL_ARGS_2(SV *obj, double *val)
{
  if (SvNIOK(obj)) {
    if (val) *val = SvNV(obj);
    return SWIG_OK;
  } else if (SvIOK(obj)) {
    if (val) *val = (double) SvIV(obj);
    return SWIG_AddCast(SWIG_OK);
  } else {
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      double v;
      errno = 0;
      v = strtod(nptr, &endptr);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_PERL_DECL_ARGS_2(SV *obj, long* val)
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (UVSIZE < sizeof(*val) || v <= LONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (IVSIZE <= sizeof(*val) || (v >= LONG_MIN && v <= LONG_MAX)) {
      if(val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long v;
      errno = 0;
      v = strtol(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_PERL_DECL_ARGS_2(SV * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  CPLErr PushErrorHandler( char const * pszCallbackName = NULL ) {
    CPLErrorHandler pfnHandler = NULL;
    if( pszCallbackName == NULL || EQUAL(pszCallbackName,"CPLQuietErrorHandler") )
      pfnHandler = CPLQuietErrorHandler;
    else if( EQUAL(pszCallbackName,"CPLDefaultErrorHandler") )
      pfnHandler = CPLDefaultErrorHandler;
    else if( EQUAL(pszCallbackName,"CPLLoggingErrorHandler") )
      pfnHandler = CPLLoggingErrorHandler;

    if ( pfnHandler == NULL )
      return CE_Fatal;

    CPLPushErrorHandler( pfnHandler );

    return CE_None;
  }


  void Error( CPLErr msg_class = CE_Failure, int err_code = 0, const char* msg = "error" ) {
    CPLError( msg_class, err_code, "%s", msg );
  }


retStringAndCPLFree* EscapeString(int len, char *bin_string , int scheme=CPLES_SQL) {
    return CPLEscapeString(bin_string, len, scheme);
}


SWIGINTERNINLINE SV *
SWIG_From_long  SWIG_PERL_DECL_ARGS_1(long value)
{
  SV *sv;
  if (IVSIZE >= sizeof(value) || (value >= IV_MIN && value <= IV_MAX))
    sv = newSViv(value);
  else
    sv = newSVpvf("%ld", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_int  SWIG_PERL_DECL_ARGS_1(int value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long value)
{
  SV *sv;
  if (UVSIZE >= sizeof(value) || value <= UV_MAX)
    sv = newSVuv(value);
  else
    sv = newSVpvf("%lu", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_int  SWIG_PERL_DECL_ARGS_1(unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


    char *sv_to_utf8_string(SV *sv, U8 **tmpbuf, bool *safefree = NULL) {
        /* if tmpbuf is given, only tmpbuf needs to be freed, use Safefree!
           if not, ret needs to be freed, if safefree use Safefree else use free! */
        char *ret;
        if (safefree) *safefree = false;
        if (SvOK(sv)) {
            STRLEN len;
            ret = SvPV(sv, len);
            if (!SvUTF8(sv)) {
                if (tmpbuf) {
                    *tmpbuf = bytes_to_utf8((const U8*)ret, &len);
                    ret = (char *)(*tmpbuf);
                } else {
                    ret = (char *)bytes_to_utf8((const U8*)ret, &len);
                }
                if (safefree) *safefree = true;
            } else {
                if (!tmpbuf)
                    ret = strdup(ret);
            }
        } else {
            ret = (char*)""; /* avoid "Use of uninitialized value in subroutine entry" errors */
            if (!tmpbuf)
                ret = strdup(ret);
        }
        return ret;
    }
    

char **wrapper_VSIReadDirEx( const char * utf8_path, int nMaxFiles = 0 )
{
    return VSIReadDirEx(utf8_path, nMaxFiles);
}


const char *wrapper_CPLGetConfigOption( const char * pszKey, const char * pszDefault = NULL )
{
    return CPLGetConfigOption( pszKey, pszDefault );
}
const char *wrapper_CPLGetThreadLocalConfigOption( const char * pszKey, const char * pszDefault = NULL )
{
    return CPLGetThreadLocalConfigOption( pszKey, pszDefault );
}


void wrapper_VSIFileFromMemBuffer( const char* utf8_path, int nBytes, const GByte *pabyData)
{
    GByte* pabyDataDup = (GByte*)VSIMalloc(nBytes);
    if (pabyDataDup == NULL)
            return;
    memcpy(pabyDataDup, pabyData, nBytes);
    VSIFCloseL(VSIFileFromMemBuffer(utf8_path, (GByte*) pabyDataDup, nBytes, TRUE));
}



bool wrapper_VSIUnlinkBatch(char** files)
{
    int* success = VSIUnlinkBatch(files);
    if( !success )
        return false;
    int bRet = true;
    for( int i = 0; files && files[i]; i++ )
    {
        if( !success[i] ) {
            bRet = false;
            break;
        }
    }
    VSIFree(success);
    return bRet;
}


SWIGINTERNINLINE SV *
SWIG_From_bool  SWIG_PERL_DECL_ARGS_1(bool value)
{
  return boolSV(value);
}


int wrapper_HasThreadSupport()
{
    return strcmp(CPLGetThreadingModel(), "stub") != 0;
}


retStringAndCPLFree* wrapper_VSIGetSignedURL(const char * utf8_path, char** options = NULL )
{
    return VSIGetSignedURL( utf8_path, options );
}


VSILFILE   *wrapper_VSIFOpenL( const char *utf8_path, const char *pszMode )
{
    if (!pszMode) /* would lead to segfault */
        pszMode = "r";
    return VSIFOpenL( utf8_path, pszMode );
}


VSILFILE   *wrapper_VSIFOpenExL( const char *utf8_path, const char *pszMode, int bSetError = FALSE, char** options = NULL )
{
    if (!pszMode) /* would lead to segfault */
        pszMode = "r";
    return VSIFOpenEx2L( utf8_path, pszMode, bSetError, options );
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long *val) 
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (UVSIZE <= sizeof(*val) || v <= ULONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= 0 && (IVSIZE <= sizeof(*val) || v <= ULONG_MAX)) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long v;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long long *val)
{
  if (SvUOK(obj)) {
    /* pretty sure this should be conditional on
     * (UVSIZE <= sizeof(*val) || v <= ULLONG_MAX) */
    if (val) *val = SvUV(obj);
    return SWIG_OK;
  } else  if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= 0 && (IVSIZE <= sizeof(*val) || v <= ULLONG_MAX)) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long long v;
      errno = 0;
      v = strtoull(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      const double mant_max = 1LL << DBL_MANT_DIG;
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
	if (val) *val = (unsigned long long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_PERL_DECL_ARGS_2(SV * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long long value)
{
  SV *sv;
  if (UVSIZE >= sizeof(value) || value <= UV_MAX)
    sv = newSVuv((UV)(value));
  else {
    //sv = newSVpvf("%llu", value); doesn't work in non 64bit Perl
    char temp[256];
    sprintf(temp, "%llu", value);
    sv = newSVpv(temp, 0);
  }
  return sv_2mortal(sv);
}
#endif


SWIGINTERNINLINE SV *
SWIG_From_size_t  SWIG_PERL_DECL_ARGS_1(size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(value));
  }
#endif
}


void VSIStdoutUnsetRedirection()
{
    VSIStdoutSetRedirection( fwrite, stdout );
}

SWIGINTERN char const *GDALMajorObjectShadow_GetDescription(GDALMajorObjectShadow *self){
    return GDALGetDescription( self );
  }
SWIGINTERN void GDALMajorObjectShadow_SetDescription(GDALMajorObjectShadow *self,char const *pszNewDesc){
    GDALSetDescription( self, pszNewDesc );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadataDomainList(GDALMajorObjectShadow *self){
    return GDALGetMetadataDomainList( self );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_Dict(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_0(GDALMajorObjectShadow *self,char **papszMetadata,char const *pszDomain=""){
    return GDALSetMetadata( self, papszMetadata, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_1(GDALMajorObjectShadow *self,char *pszMetadataString,char const *pszDomain=""){
    char *tmpList[2];
    tmpList[0] = pszMetadataString;
    tmpList[1] = 0;
    return GDALSetMetadata( self, tmpList, pszDomain );
  }
SWIGINTERN char const *GDALMajorObjectShadow_GetMetadataItem(GDALMajorObjectShadow *self,char const *pszName,char const *pszDomain=""){
    return GDALGetMetadataItem( self, pszName, pszDomain);
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadataItem(GDALMajorObjectShadow *self,char const *pszName,char const *pszValue,char const *pszDomain=""){
    return GDALSetMetadataItem( self, pszName, pszValue, pszDomain);
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_Create(GDALDriverShadow *self,char const *utf8_path,int xsize,int ysize,int bands=1,GDALDataType eType=GDT_Byte,char **options=0){

    GDALDatasetShadow* ds = (GDALDatasetShadow*) GDALCreate(    self,
                                                                utf8_path,
                                                                xsize,
                                                                ysize,
                                                                bands,
                                                                eType,
                                                                options );
    return ds;
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_CreateMultiDimensional(GDALDriverShadow *self,char const *utf8_path,char **root_group_options=0,char **options=0){

    GDALDatasetShadow* ds = (GDALDatasetShadow*) GDALCreateMultiDimensional(    self,
                                                                utf8_path,
                                                                root_group_options,
                                                                options );
    return ds;
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_CreateCopy(GDALDriverShadow *self,char const *utf8_path,GDALDatasetShadow *src,int strict=1,char **options=0,GDALProgressFunc callback=NULL,void *callback_data=NULL){

    GDALDatasetShadow *ds = (GDALDatasetShadow*) GDALCreateCopy(    self,
                                                                    utf8_path,
                                                                    src,
                                                                    strict,
                                                                    options,
                                                                    callback,
                                                                    callback_data );
    return ds;
  }
SWIGINTERN CPLErr GDALDriverShadow_Delete(GDALDriverShadow *self,char const *utf8_path){
    return GDALDeleteDataset( self, utf8_path );
  }
SWIGINTERN CPLErr GDALDriverShadow_Rename(GDALDriverShadow *self,char const *newName,char const *oldName){
    return GDALRenameDataset( self, newName, oldName );
  }
SWIGINTERN CPLErr GDALDriverShadow_CopyFiles(GDALDriverShadow *self,char const *newName,char const *oldName){
    return GDALCopyDatasetFiles( self, newName, oldName );
  }
SWIGINTERN int GDALDriverShadow_Register(GDALDriverShadow *self){
    return GDALRegisterDriver( self );
  }
SWIGINTERN void GDALDriverShadow_Deregister(GDALDriverShadow *self){
    GDALDeregisterDriver( self );
  }

char const *GDALDriverShadow_ShortName_get( GDALDriverShadow *h ) {
  return GDALGetDriverShortName( h );
}
char const *GDALDriverShadow_LongName_get( GDALDriverShadow *h ) {
  return GDALGetDriverLongName( h );
}
char const *GDALDriverShadow_HelpTopic_get( GDALDriverShadow *h ) {
  return GDALGetDriverHelpTopic( h );
}


SWIGINTERNINLINE SV *
SWIG_From_double  SWIG_PERL_DECL_ARGS_1(double value)
{
  return sv_2mortal(newSVnv(value));
}


SWIGINTERNINLINE SV *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  SV *obj = sv_newmortal();
  if (carray) {
    sv_setpvn(obj, carray, size);
  } else {
    sv_setsv(obj, &PL_sv_undef);
  }
  return obj;
}


SWIGINTERNINLINE SV * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN GDAL_GCP *new_GDAL_GCP(double x=0.0,double y=0.0,double z=0.0,double pixel=0.0,double line=0.0,char const *info="",char const *id=""){

    GDAL_GCP *self = (GDAL_GCP*) CPLMalloc( sizeof( GDAL_GCP ) );
    self->dfGCPX = x;
    self->dfGCPY = y;
    self->dfGCPZ = z;
    self->dfGCPPixel = pixel;
    self->dfGCPLine = line;
    self->pszInfo =  CPLStrdup( (info == 0) ? "" : info );
    self->pszId = CPLStrdup( (id==0)? "" : id );
    return self;
  }
SWIGINTERN void delete_GDAL_GCP(GDAL_GCP *self){
    if ( self->pszInfo )
      CPLFree( self->pszInfo );
    if ( self->pszId )
      CPLFree( self->pszId );
    CPLFree( self );
  }


double GDAL_GCP_GCPX_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPX;
}
void GDAL_GCP_GCPX_set( GDAL_GCP *gcp, double dfGCPX ) {
  gcp->dfGCPX = dfGCPX;
}
double GDAL_GCP_GCPY_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPY;
}
void GDAL_GCP_GCPY_set( GDAL_GCP *gcp, double dfGCPY ) {
  gcp->dfGCPY = dfGCPY;
}
double GDAL_GCP_GCPZ_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPZ;
}
void GDAL_GCP_GCPZ_set( GDAL_GCP *gcp, double dfGCPZ ) {
  gcp->dfGCPZ = dfGCPZ;
}
double GDAL_GCP_GCPPixel_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPPixel;
}
void GDAL_GCP_GCPPixel_set( GDAL_GCP *gcp, double dfGCPPixel ) {
  gcp->dfGCPPixel = dfGCPPixel;
}
double GDAL_GCP_GCPLine_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPLine;
}
void GDAL_GCP_GCPLine_set( GDAL_GCP *gcp, double dfGCPLine ) {
  gcp->dfGCPLine = dfGCPLine;
}
const char * GDAL_GCP_Info_get( GDAL_GCP *gcp ) {
  return gcp->pszInfo;
}
void GDAL_GCP_Info_set( GDAL_GCP *gcp, const char * pszInfo ) {
  if ( gcp->pszInfo )
    CPLFree( gcp->pszInfo );
  gcp->pszInfo = CPLStrdup(pszInfo);
}
const char * GDAL_GCP_Id_get( GDAL_GCP *gcp ) {
  return gcp->pszId;
}
void GDAL_GCP_Id_set( GDAL_GCP *gcp, const char * pszId ) {
  if ( gcp->pszId )
    CPLFree( gcp->pszId );
  gcp->pszId = CPLStrdup(pszId);
}


    static SV *
        CreateArrayFromDoubleArray( double *first, unsigned int size ) {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        for( unsigned int i=0; i<size; i++ ) {
            av_store(av,i,newSVnv(*first));
            ++first;
        }
        return sv_2mortal(newRV((SV*)av));
    }
    

/* Returned size is in bytes or 0 if an error occurred. */
static
GIntBig ComputeDatasetRasterIOSize (int buf_xsize, int buf_ysize, int nPixelSize,
                                int nBands, int* bandMap, int nBandMapArrayLength,
                                GIntBig nPixelSpace, GIntBig nLineSpace, GIntBig nBandSpace,
                                int bSpacingShouldBeMultipleOfPixelSize )
{
    if (buf_xsize <= 0 || buf_ysize <= 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for buffer size");
        return 0;
    }

    if (nPixelSpace < 0 || nLineSpace < 0 || nBandSpace < 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for space arguments");
        return 0;
    }

    if (nPixelSize == 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal value for data type");
        return 0;
    }

    if( nPixelSpace == 0 )
        nPixelSpace = nPixelSize;
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nPixelSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nPixelSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nLineSpace == 0 )
    {
        nLineSpace = nPixelSpace * buf_xsize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nLineSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nBandSpace == 0 )
    {
        nBandSpace = nLineSpace * buf_ysize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nBandSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    if (nBands <= 0 || (bandMap != NULL && nBands > nBandMapArrayLength))
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Invalid band count");
        return 0;
    }

    GIntBig nRet = (GIntBig)(buf_ysize - 1) * nLineSpace + (GIntBig)(buf_xsize - 1) * nPixelSpace + (GIntBig)(nBands - 1) * nBandSpace + nPixelSize;
#if SIZEOF_VOIDP == 4
    if (nRet > INT_MAX)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
        return 0;
    }
#endif

    return nRet;
}


static
CPLErr DSReadRaster_internal( GDALDatasetShadow *obj,
                            int xoff, int yoff, int xsize, int ysize,
                            int buf_xsize, int buf_ysize,
                            GDALDataType buf_type,
                            GIntBig *buf_size, char **buf,
                            int band_list, int *pband_list,
                            GIntBig pixel_space, GIntBig line_space, GIntBig band_space,
                            GDALRasterIOExtraArg* psExtraArg)
{
  CPLErr result;

  *buf_size = ComputeDatasetRasterIOSize (buf_xsize, buf_ysize, GDALGetDataTypeSize( buf_type ) / 8,
                                          band_list ? band_list : GDALGetRasterCount(obj), pband_list, band_list,
                                          pixel_space, line_space, band_space, FALSE);
  if (*buf_size == 0)
  {
      *buf = 0;
      return CE_Failure;
  }

  *buf = (char*) malloc( *buf_size );
  if (*buf)
  {
    result = GDALDatasetRasterIOEx(obj, GF_Read, xoff, yoff, xsize, ysize,
                                    (void*) *buf, buf_xsize, buf_ysize, buf_type,
                                    band_list, pband_list, pixel_space, line_space, band_space,
                                    psExtraArg );
    if ( result != CE_None ) {
        free( *buf );
        *buf = 0;
        *buf_size = 0;
    }
  }
  else
  {
    CPLError(CE_Failure, CPLE_OutOfMemory, "Not enough memory to allocate " CPL_FRMT_GIB " bytes", *buf_size);
    result = CE_Failure;
    *buf = 0;
    *buf_size = 0;
  }
  return result;
}


typedef struct
{
    GDALAsyncReaderH  hAsyncReader;
    void             *pyObject;
} GDALAsyncReaderWrapper;

typedef void* GDALAsyncReaderWrapperH;

static GDALAsyncReaderH AsyncReaderWrapperGetReader(GDALAsyncReaderWrapperH hWrapper)
{
    GDALAsyncReaderWrapper* psWrapper = (GDALAsyncReaderWrapper*)hWrapper;
    if (psWrapper->hAsyncReader == NULL)
    {
        CPLError(CE_Failure, CPLE_AppDefined, "AsyncReader object is defunct");
    }
    return psWrapper->hAsyncReader;
}

#if defined(SWIGPYTHON)
static void* AsyncReaderWrapperGetPyObject(GDALAsyncReaderWrapperH hWrapper)
{
    GDALAsyncReaderWrapper* psWrapper = (GDALAsyncReaderWrapper*)hWrapper;
    return psWrapper->pyObject;
}
#endif

static void DeleteAsyncReaderWrapper(GDALAsyncReaderWrapperH hWrapper)
{
    GDALAsyncReaderWrapper* psWrapper = (GDALAsyncReaderWrapper*)hWrapper;
    if (psWrapper->hAsyncReader != NULL)
    {
        CPLError(CE_Failure, CPLE_AppDefined,
                 "Native AsyncReader object will leak. EndAsyncReader() should have been called before");
    }
    CPLFree(psWrapper);
}


SWIGINTERN void delete_GDALAsyncReaderShadow(GDALAsyncReaderShadow *self){
        DeleteAsyncReaderWrapper(self);
    }
SWIGINTERN GDALAsyncStatusType GDALAsyncReaderShadow_GetNextUpdatedRegion(GDALAsyncReaderShadow *self,double timeout,int *xoff,int *yoff,int *buf_xsize,int *buf_ysize){
        GDALAsyncReaderH hReader = AsyncReaderWrapperGetReader(self);
        if (hReader == NULL)
        {
            *xoff = 0;
            *yoff = 0;
            *buf_xsize = 0;
            *buf_ysize = 0;
            return GARIO_ERROR;
        }
        return GDALARGetNextUpdatedRegion(hReader, timeout, xoff, yoff, buf_xsize, buf_ysize );
    }
SWIGINTERN int GDALAsyncReaderShadow_LockBuffer(GDALAsyncReaderShadow *self,double timeout){
        GDALAsyncReaderH hReader = AsyncReaderWrapperGetReader(self);
        if (hReader == NULL)
        {
            return 0;
        }
        return GDALARLockBuffer(hReader,timeout);
    }
SWIGINTERN void GDALAsyncReaderShadow_UnlockBuffer(GDALAsyncReaderShadow *self){
        GDALAsyncReaderH hReader = AsyncReaderWrapperGetReader(self);
        if (hReader == NULL)
        {
            return;
        }
        GDALARUnlockBuffer(hReader);
    }
SWIGINTERN void delete_GDALDatasetShadow(GDALDatasetShadow *self){
    if ( GDALDereferenceDataset( self ) <= 0 ) {
      GDALClose(self);
    }
  }
SWIGINTERN GDALDriverShadow *GDALDatasetShadow_GetDriver(GDALDatasetShadow *self){
    return (GDALDriverShadow*) GDALGetDatasetDriver( self );
  }
SWIGINTERN GDALRasterBandShadow *GDALDatasetShadow_GetRasterBand(GDALDatasetShadow *self,int nBand){
    return (GDALRasterBandShadow*) GDALGetRasterBand( self, nBand );
  }
SWIGINTERN GDALGroupHS *GDALDatasetShadow_GetRootGroup(GDALDatasetShadow *self){
    return GDALDatasetGetRootGroup(self);
  }
SWIGINTERN char const *GDALDatasetShadow_GetProjection(GDALDatasetShadow *self){
    return GDALGetProjectionRef( self );
  }
SWIGINTERN char const *GDALDatasetShadow_GetProjectionRef(GDALDatasetShadow *self){
    return GDALGetProjectionRef( self );
  }
SWIGINTERN OSRSpatialReferenceShadow *GDALDatasetShadow_GetSpatialRef(GDALDatasetShadow *self){
    OGRSpatialReferenceH ref = GDALGetSpatialRef(self);
    if( ref )
       ref = OSRClone( ref );
    return (OSRSpatialReferenceShadow*) ref;
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetProjection(GDALDatasetShadow *self,char const *prj){
    return GDALSetProjection( self, prj );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetSpatialRef(GDALDatasetShadow *self,OSRSpatialReferenceShadow *srs){
     return GDALSetSpatialRef( self, (OGRSpatialReferenceH)srs );
  }
SWIGINTERN void GDALDatasetShadow_GetGeoTransform(GDALDatasetShadow *self,double argout[6]){
    if ( GDALGetGeoTransform( self, argout ) != CE_None ) {
      argout[0] = 0.0;
      argout[1] = 1.0;
      argout[2] = 0.0;
      argout[3] = 0.0;
      argout[4] = 0.0;
      argout[5] = 1.0;
    }
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGeoTransform(GDALDatasetShadow *self,double argin[6]){
    return GDALSetGeoTransform( self, argin );
  }
SWIGINTERN int GDALDatasetShadow_BuildOverviews(GDALDatasetShadow *self,char const *resampling="NEAREST",int overviewlist=0,int *pOverviews=0,GDALProgressFunc callback=NULL,void *callback_data=NULL){

    return GDALBuildOverviews(  self,
                                resampling ? resampling : "NEAREST",
                                overviewlist,
                                pOverviews,
                                0,
                                0,
                                callback,
                                callback_data);
  }
SWIGINTERN int GDALDatasetShadow_GetGCPCount(GDALDatasetShadow *self){
    return GDALGetGCPCount( self );
  }
SWIGINTERN char const *GDALDatasetShadow_GetGCPProjection(GDALDatasetShadow *self){
    return GDALGetGCPProjection( self );
  }
SWIGINTERN OSRSpatialReferenceShadow *GDALDatasetShadow_GetGCPSpatialRef(GDALDatasetShadow *self){
    OGRSpatialReferenceH ref = GDALGetGCPSpatialRef(self);
    if( ref )
       ref = OSRClone( ref );
    return (OSRSpatialReferenceShadow*) ref;
  }
SWIGINTERN void GDALDatasetShadow_GetGCPs(GDALDatasetShadow *self,int *nGCPs,GDAL_GCP const **pGCPs){
    *nGCPs = GDALGetGCPCount( self );
    *pGCPs = GDALGetGCPs( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGCPs(GDALDatasetShadow *self,int nGCPs,GDAL_GCP const *pGCPs,char const *pszGCPProjection){
    return GDALSetGCPs( self, nGCPs, pGCPs, pszGCPProjection );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGCPs2(GDALDatasetShadow *self,int nGCPs,GDAL_GCP const *pGCPs,OSRSpatialReferenceShadow *hSRS){
    return GDALSetGCPs2( self, nGCPs, pGCPs, (OGRSpatialReferenceH)hSRS );
  }
SWIGINTERN void GDALDatasetShadow_FlushCache(GDALDatasetShadow *self){
    GDALFlushCache( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_AddBand(GDALDatasetShadow *self,GDALDataType datatype=GDT_Byte,char **options=0){
    return GDALAddBand( self, datatype, options );
  }
SWIGINTERN CPLErr GDALDatasetShadow_CreateMaskBand(GDALDatasetShadow *self,int nFlags){
      return GDALCreateDatasetMaskBand( self, nFlags );
  }
SWIGINTERN char **GDALDatasetShadow_GetFileList(GDALDatasetShadow *self){
    return GDALGetFileList( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_WriteRaster(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,GIntBig buf_len,char *buf_string,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,int band_list=0,int *pband_list=0,GIntBig *buf_pixel_space=0,GIntBig *buf_line_space=0,GIntBig *buf_band_space=0){
    CPLErr eErr;
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype;
    if ( buf_type != 0 ) {
      ntype = (GDALDataType) *buf_type;
    } else {
      int lastband = GDALGetRasterCount( self );
      if (lastband <= 0)
        return CE_Failure;
      ntype = GDALGetRasterDataType( GDALGetRasterBand( self, lastband ) );
    }

    GIntBig pixel_space = (buf_pixel_space == 0) ? 0 : *buf_pixel_space;
    GIntBig line_space = (buf_line_space == 0) ? 0 : *buf_line_space;
    GIntBig band_space = (buf_band_space == 0) ? 0 : *buf_band_space;

    GIntBig min_buffer_size =
      ComputeDatasetRasterIOSize (nxsize, nysize, GDALGetDataTypeSize( ntype ) / 8,
                                  band_list ? band_list : GDALGetRasterCount(self), pband_list, band_list,
                                  pixel_space, line_space, band_space, FALSE);
    if (min_buffer_size == 0)
        return CE_Failure;

    if ( buf_len < min_buffer_size )
    {
        CPLError(CE_Failure, CPLE_AppDefined, "Buffer too small");
        return CE_Failure;
    }

    GDALRasterIOExtraArg* psExtraArg = NULL;

    eErr = GDALDatasetRasterIOEx( self, GF_Write, xoff, yoff, xsize, ysize,
                                  (void*) buf_string, nxsize, nysize, ntype,
                                  band_list, pband_list, pixel_space, line_space, band_space, psExtraArg );

    return eErr;
  }
SWIGINTERN CPLErr GDALDatasetShadow_ReadRaster(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,GIntBig *buf_len,char **buf,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,int band_list=0,int *pband_list=0,GIntBig *buf_pixel_space=0,GIntBig *buf_line_space=0,GIntBig *buf_band_space=0,GDALRIOResampleAlg resample_alg=GRIORA_NearestNeighbour,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    CPLErr eErr;
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype;
    if ( buf_type != 0 ) {
      ntype = (GDALDataType) *buf_type;
    } else {
      int lastband = GDALGetRasterCount( self );
      if (lastband <= 0)
        return CE_Failure;
      ntype = GDALGetRasterDataType( GDALGetRasterBand( self, lastband ) );
    }

    GDALRasterIOExtraArg sExtraArg;
    INIT_RASTERIO_EXTRA_ARG(sExtraArg);
    sExtraArg.eResampleAlg = resample_alg;
    sExtraArg.pfnProgress = callback;
    sExtraArg.pProgressData = callback_data;

    GIntBig pixel_space = (buf_pixel_space == 0) ? 0 : *buf_pixel_space;
    GIntBig line_space = (buf_line_space == 0) ? 0 : *buf_line_space;
    GIntBig band_space = (buf_band_space == 0) ? 0 : *buf_band_space;

    eErr = DSReadRaster_internal( self, xoff, yoff, xsize, ysize,
                                nxsize, nysize, ntype,
                                buf_len, buf,
                                band_list, pband_list,
                                pixel_space, line_space, band_space, &sExtraArg);

    return eErr;
}
SWIGINTERN CPLErr GDALDatasetShadow_AdviseRead(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,int band_list=0,int *pband_list=0,char **options=NULL){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype;
    if ( buf_type != 0 ) {
      ntype = (GDALDataType) *buf_type;
    } else {
      int lastband = GDALGetRasterCount( self );
      if (lastband <= 0)
        return CE_Failure;
      ntype = GDALGetRasterDataType( GDALGetRasterBand( self, lastband ) );
    }
    return GDALDatasetAdviseRead(self, xoff, yoff, xsize, ysize,
                                 nxsize, nysize, ntype,
                                 band_list, pband_list, options);
}
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_CreateLayer(GDALDatasetShadow *self,char const *name,OSRSpatialReferenceShadow *srs=NULL,OGRwkbGeometryType geom_type=wkbUnknown,char **options=0){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetCreateLayer( self,
                                  name,
                                  srs,
                                  geom_type,
                                  options);
    return layer;
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_CopyLayer(GDALDatasetShadow *self,OGRLayerShadow *src_layer,char const *new_name,char **options=0){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetCopyLayer( self,
                                                      src_layer,
                                                      new_name,
                                                      options);
    return layer;
  }
SWIGINTERN OGRErr GDALDatasetShadow_DeleteLayer(GDALDatasetShadow *self,int index){
    return GDALDatasetDeleteLayer(self, index);
  }


#include "ogr_core.h"
static char const *
OGRErrMessages( int rc ) {
  switch( rc ) {
  case OGRERR_NONE:
    return "OGR Error: None";
  case OGRERR_NOT_ENOUGH_DATA:
    return "OGR Error: Not enough data to deserialize";
  case OGRERR_NOT_ENOUGH_MEMORY:
    return "OGR Error: Not enough memory";
  case OGRERR_UNSUPPORTED_GEOMETRY_TYPE:
    return "OGR Error: Unsupported geometry type";
  case OGRERR_UNSUPPORTED_OPERATION:
    return "OGR Error: Unsupported operation";
  case OGRERR_CORRUPT_DATA:
    return "OGR Error: Corrupt data";
  case OGRERR_FAILURE:
    return "OGR Error: General Error";
  case OGRERR_UNSUPPORTED_SRS:
    return "OGR Error: Unsupported SRS";
  case OGRERR_INVALID_HANDLE:
    return "OGR Error: Invalid handle";
  case OGRERR_NON_EXISTING_FEATURE:
    return "OGR Error: Non existing feature";
  default:
    return "OGR Error: Unknown";
  }
}

SWIGINTERN int GDALDatasetShadow_GetLayerCount(GDALDatasetShadow *self){
    return GDALDatasetGetLayerCount(self);
  }
SWIGINTERN bool GDALDatasetShadow_IsLayerPrivate(GDALDatasetShadow *self,int index){
    return GDALDatasetIsLayerPrivate(self, index);
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_GetLayerByIndex(GDALDatasetShadow *self,int index=0){

    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetGetLayer(self, index);
    return layer;
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_GetLayerByName(GDALDatasetShadow *self,char const *layer_name){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetGetLayerByName(self, layer_name);
    return layer;
  }
SWIGINTERN void GDALDatasetShadow_ResetReading(GDALDatasetShadow *self){
    GDALDatasetResetReading( self );
  }
SWIGINTERN OGRFeatureShadow *GDALDatasetShadow_GetNextFeature(GDALDatasetShadow *self){
    return GDALDatasetGetNextFeature( self, NULL, NULL, NULL, NULL );
  }
SWIGINTERN bool GDALDatasetShadow_TestCapability(GDALDatasetShadow *self,char const *cap){
    return (GDALDatasetTestCapability(self, cap) > 0);
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_ExecuteSQL(GDALDatasetShadow *self,char const *statement,OGRGeometryShadow *spatialFilter=NULL,char const *dialect=""){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetExecuteSQL(self,
                                                      statement,
                                                      spatialFilter,
                                                      dialect);
    return layer;
  }
SWIGINTERN void GDALDatasetShadow_ReleaseResultSet(GDALDatasetShadow *self,OGRLayerShadow *layer){
    GDALDatasetReleaseResultSet(self, layer);
  }
SWIGINTERN OGRStyleTableShadow *GDALDatasetShadow_GetStyleTable(GDALDatasetShadow *self){
    return (OGRStyleTableShadow*) GDALDatasetGetStyleTable(self);
  }
SWIGINTERN void GDALDatasetShadow_SetStyleTable(GDALDatasetShadow *self,OGRStyleTableShadow *table){
    if( table != NULL )
        GDALDatasetSetStyleTable(self, (OGRStyleTableH) table);
  }
SWIGINTERN OGRErr GDALDatasetShadow_AbortSQL(GDALDatasetShadow *self){
    return GDALDatasetAbortSQL(self);
}
SWIGINTERN OGRErr GDALDatasetShadow_StartTransaction(GDALDatasetShadow *self,int force=FALSE){
    return GDALDatasetStartTransaction(self, force);
  }
SWIGINTERN OGRErr GDALDatasetShadow_CommitTransaction(GDALDatasetShadow *self){
    return GDALDatasetCommitTransaction(self);
  }
SWIGINTERN OGRErr GDALDatasetShadow_RollbackTransaction(GDALDatasetShadow *self){
    return GDALDatasetRollbackTransaction(self);
  }
SWIGINTERN void GDALDatasetShadow_ClearStatistics(GDALDatasetShadow *self){
      GDALDatasetClearStatistics(self);
  }
SWIGINTERN OGRFieldDomainShadow *GDALDatasetShadow_GetFieldDomain(GDALDatasetShadow *self,char const *name){
    return (OGRFieldDomainShadow*) GDALDatasetGetFieldDomain(self, name);
  }
SWIGINTERN bool GDALDatasetShadow_AddFieldDomain(GDALDatasetShadow *self,OGRFieldDomainShadow *fieldDomain){
      return GDALDatasetAddFieldDomain(self, (OGRFieldDomainH)fieldDomain, NULL);
  }

int GDALDatasetShadow_RasterXSize_get( GDALDatasetShadow *h ) {
  return GDALGetRasterXSize( h );
}
int GDALDatasetShadow_RasterYSize_get( GDALDatasetShadow *h ) {
  return GDALGetRasterYSize( h );
}
int GDALDatasetShadow_RasterCount_get( GDALDatasetShadow *h ) {
  return GDALGetRasterCount( h );
}

SWIGINTERN void delete_GDALGroupHS(GDALGroupHS *self){
    GDALGroupRelease(self);
  }
SWIGINTERN char const *GDALGroupHS_GetName(GDALGroupHS *self){
    return GDALGroupGetName(self);
  }
SWIGINTERN char const *GDALGroupHS_GetFullName(GDALGroupHS *self){
    return GDALGroupGetFullName(self);
  }
SWIGINTERN char **GDALGroupHS_GetMDArrayNames(GDALGroupHS *self,char **options=0){
    return GDALGroupGetMDArrayNames( self, options );
  }
SWIGINTERN GDALMDArrayHS *GDALGroupHS_OpenMDArray(GDALGroupHS *self,char const *name,char **options=0){
    return GDALGroupOpenMDArray(self, name, options);
  }
SWIGINTERN GDALMDArrayHS *GDALGroupHS_OpenMDArrayFromFullname(GDALGroupHS *self,char const *name,char **options=0){
    return GDALGroupOpenMDArrayFromFullname(self, name, options);
  }
SWIGINTERN GDALMDArrayHS *GDALGroupHS_ResolveMDArray(GDALGroupHS *self,char const *name,char const *starting_point,char **options=0){
    return GDALGroupResolveMDArray(self, name, starting_point, options);
  }
SWIGINTERN char **GDALGroupHS_GetGroupNames(GDALGroupHS *self,char **options=0){
    return GDALGroupGetGroupNames( self, options );
  }
SWIGINTERN GDALGroupHS *GDALGroupHS_OpenGroup(GDALGroupHS *self,char const *name,char **options=0){
    return GDALGroupOpenGroup(self, name, options);
  }
SWIGINTERN GDALGroupHS *GDALGroupHS_OpenGroupFromFullname(GDALGroupHS *self,char const *name,char **options=0){
    return GDALGroupOpenGroupFromFullname(self, name, options);
  }
SWIGINTERN char **GDALGroupHS_GetVectorLayerNames(GDALGroupHS *self,char **options=0){
    return GDALGroupGetVectorLayerNames( self, options );
  }
SWIGINTERN OGRLayerShadow *GDALGroupHS_OpenVectorLayer(GDALGroupHS *self,char const *name,char **options=0){
    return (OGRLayerShadow*) GDALGroupOpenVectorLayer(self, name, options);
  }
SWIGINTERN GDALAttributeHS *GDALGroupHS_GetAttribute(GDALGroupHS *self,char const *name){
    return GDALGroupGetAttribute(self, name);
  }
SWIGINTERN char **GDALGroupHS_GetStructuralInfo(GDALGroupHS *self){
    return GDALGroupGetStructuralInfo( self );
  }
SWIGINTERN GDALGroupHS *GDALGroupHS_CreateGroup(GDALGroupHS *self,char const *name,char **options=0){
    return GDALGroupCreateGroup(self, name, options);
  }
SWIGINTERN GDALDimensionHS *GDALGroupHS_CreateDimension(GDALGroupHS *self,char const *name,char const *type,char const *direction,unsigned long long size,char **options=0){
    return GDALGroupCreateDimension(self, name, type, direction, size, options);
  }
SWIGINTERN GDALAttributeHS *GDALGroupHS_CreateAttribute(GDALGroupHS *self,char const *name,int nDimensions,GUIntBig *dimensions,GDALExtendedDataTypeHS *data_type,char **options=0){
    return GDALGroupCreateAttribute(self, name, nDimensions,
                                    (const GUInt64*)dimensions,
                                    data_type, options);
  }

typedef struct
{
  double min;
  double max;
  double mean;
  double std_dev;
  GIntBig valid_count;
} Statistics;

SWIGINTERN void delete_Statistics(Statistics *self){
    CPLFree(self);
  }

#include <limits>

static bool CheckNumericDataType(GDALExtendedDataTypeHS* dt)
{
    GDALExtendedDataTypeClass klass = GDALExtendedDataTypeGetClass(dt);
    if( klass == GEDTC_NUMERIC )
        return true;
    if( klass == GEDTC_STRING )
        return false;
    CPLAssert( klass == GEDTC_COMPOUND );
    size_t nCount = 0;
    GDALEDTComponentH* comps = GDALExtendedDataTypeGetComponents(dt, &nCount);
    bool ret = true;
    for( size_t i = 0; i < nCount; i++ )
    {
        GDALExtendedDataTypeH tmpType = GDALEDTComponentGetType(comps[i]);
        ret = CheckNumericDataType(tmpType);
        GDALExtendedDataTypeRelease(tmpType);
        if( !ret )
            break;
    }
    GDALExtendedDataTypeFreeComponents(comps, nCount);
    return ret;
}

static CPLErr MDArrayReadWriteCheckArguments(GDALMDArrayHS* array,
                                             bool bCheckOnlyDims,
                                             int nDims1, GUIntBig* array_start_idx,
                                             int nDims2, GUIntBig* count,
                                             int nDims3, GIntBig* array_step,
                                             int nDims4, GIntBig* buffer_stride,
                                             GDALExtendedDataTypeHS* buffer_datatype,
                                             size_t* pnBufferSize)
{
    const int nExpectedDims = (int)GDALMDArrayGetDimensionCount(array);
    if( nDims1 != nExpectedDims )
    {
        CPLError(CE_Failure, CPLE_AppDefined,
            "Wrong number of values in array_start_idx");
        return CE_Failure;
    }
    if( nDims2 != nExpectedDims )
    {
        CPLError(CE_Failure, CPLE_AppDefined,
            "Wrong number of values in count");
        return CE_Failure;
    }
    if( nDims3 != nExpectedDims )
    {
        CPLError(CE_Failure, CPLE_AppDefined,
            "Wrong number of values in array_step");
        return CE_Failure;
    }
    if( nDims4!= nExpectedDims )
    {
        CPLError(CE_Failure, CPLE_AppDefined,
            "Wrong number of values in buffer_stride");
        return CE_Failure;
    }
    if( bCheckOnlyDims )
        return CE_None;
    if( !CheckNumericDataType(buffer_datatype) )
    {
        CPLError(CE_Failure, CPLE_NotSupported,
            "non-numeric buffer data type not supported in SWIG bindings");
        return CE_Failure;
    }
    GIntBig nBufferSize = 0;
    for( int i = 0; i < nExpectedDims; i++ )
    {
        if( count[i] == 0 )
        {
            CPLError(CE_Failure, CPLE_AppDefined,
                     "count[%d] = 0 is invalid", i);
            return CE_Failure;
        }
        if( buffer_stride[i] < 0 )
        {
            CPLError(CE_Failure, CPLE_NotSupported,
                "Negative value in buffer_stride not supported in SWIG bindings");
            return CE_Failure;
        }
        if( count[i] > 1 && buffer_stride[i] != 0 )
        {
            if( (GUIntBig)buffer_stride[i] > std::numeric_limits<GIntBig>::max() / (count[i] - 1) )
            {
                CPLError(CE_Failure, CPLE_AppDefined, "Integer overflow");
                return CE_Failure;
            }
            GIntBig nDelta = buffer_stride[i] * (count[i] - 1);
            if( nBufferSize > std::numeric_limits<GIntBig>::max() - nDelta )
            {
                CPLError(CE_Failure, CPLE_AppDefined, "Integer overflow");
                return CE_Failure;
            }
            nBufferSize += nDelta;
        }
    }
    const size_t nDTSize = GDALExtendedDataTypeGetSize(buffer_datatype);
    if( nDTSize == 0 )
    {
        CPLError(CE_Failure, CPLE_AppDefined, "nDTSize == 0");
        return CE_Failure;
    }
    if( (GUIntBig)nBufferSize > (GUIntBig)std::numeric_limits<GIntBig>::max() / nDTSize )
    {
        CPLError(CE_Failure, CPLE_AppDefined, "Integer overflow");
        return CE_Failure;
    }
    nBufferSize *= nDTSize;
    if( (GUIntBig)nBufferSize > (GUIntBig)std::numeric_limits<GIntBig>::max() - nDTSize )
    {
        CPLError(CE_Failure, CPLE_AppDefined, "Integer overflow");
        return CE_Failure;
    }
    nBufferSize += nDTSize;

#if SIZEOF_VOIDP == 4
    if( nBufferSize > INT_MAX )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
        return CE_Failure;
    }
#endif
    *pnBufferSize = (size_t)nBufferSize;
    return CE_None;
}

SWIGINTERN void delete_GDALMDArrayHS(GDALMDArrayHS *self){
    GDALMDArrayRelease(self);
  }
SWIGINTERN char const *GDALMDArrayHS_GetName(GDALMDArrayHS *self){
    return GDALMDArrayGetName(self);
  }
SWIGINTERN char const *GDALMDArrayHS_GetFullName(GDALMDArrayHS *self){
    return GDALMDArrayGetFullName(self);
  }
SWIGINTERN unsigned long long GDALMDArrayHS_GetTotalElementsCount(GDALMDArrayHS *self){
    return GDALMDArrayGetTotalElementsCount(self);
  }
SWIGINTERN size_t GDALMDArrayHS_GetDimensionCount(GDALMDArrayHS *self){
    return GDALMDArrayGetDimensionCount(self);
  }
SWIGINTERN GDALExtendedDataTypeHS *GDALMDArrayHS_GetDataType(GDALMDArrayHS *self){
    return GDALMDArrayGetDataType(self);
  }
SWIGINTERN char **GDALMDArrayHS_GetStructuralInfo(GDALMDArrayHS *self){
    return GDALMDArrayGetStructuralInfo( self );
  }
SWIGINTERN GDALAttributeHS *GDALMDArrayHS_GetAttribute(GDALMDArrayHS *self,char const *name){
    return GDALMDArrayGetAttribute(self, name);
  }
SWIGINTERN GDALAttributeHS *GDALMDArrayHS_CreateAttribute(GDALMDArrayHS *self,char const *name,int nDimensions,GUIntBig *dimensions,GDALExtendedDataTypeHS *data_type,char **options=0){
    return GDALMDArrayCreateAttribute(self, name, nDimensions,
                                    (const GUInt64*)dimensions,
                                    data_type, options);
  }
SWIGINTERN void GDALMDArrayHS_GetNoDataValueAsDouble(GDALMDArrayHS *self,double *val,int *hasval){
    *val = GDALMDArrayGetNoDataValueAsDouble( self, hasval );
  }
SWIGINTERN retStringAndCPLFree *GDALMDArrayHS_GetNoDataValueAsString(GDALMDArrayHS *self){
    GDALExtendedDataTypeHS* selfType = GDALMDArrayGetDataType(self);
    const size_t typeClass = GDALExtendedDataTypeGetClass(selfType);
    GDALExtendedDataTypeRelease(selfType);

    if( typeClass != GEDTC_STRING )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Data type is not string");
        return NULL;
    }
    const void* pabyBuf = GDALMDArrayGetRawNoDataValue(self);
    if( pabyBuf == NULL )
    {
      return NULL;
    }
    const char* ret = *reinterpret_cast<const char* const*>(pabyBuf);
    if( ret )
        return CPLStrdup(ret);
    return NULL;
  }
SWIGINTERN CPLErr GDALMDArrayHS_SetNoDataValueDouble(GDALMDArrayHS *self,double d){
    return GDALMDArraySetNoDataValueAsDouble( self, d ) ? CE_None : CE_Failure;
  }
SWIGINTERN CPLErr GDALMDArrayHS_SetNoDataValueString(GDALMDArrayHS *self,char const *nodata){
    GDALExtendedDataTypeHS* selfType = GDALMDArrayGetDataType(self);
    const size_t typeClass = GDALExtendedDataTypeGetClass(selfType);
    GDALExtendedDataTypeRelease(selfType);

    if( typeClass != GEDTC_STRING )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Data type is not string");
        return CE_Failure;
    }
    return GDALMDArraySetRawNoDataValue(self, &nodata) ? CE_None : CE_Failure;
  }
SWIGINTERN CPLErr GDALMDArrayHS_DeleteNoDataValue(GDALMDArrayHS *self){
    return GDALMDArraySetRawNoDataValue( self, NULL ) ? CE_None : CE_Failure;
  }
SWIGINTERN void GDALMDArrayHS_GetOffset(GDALMDArrayHS *self,double *val,int *hasval){
    *val = GDALMDArrayGetOffset( self, hasval );
  }
SWIGINTERN GDALDataType GDALMDArrayHS_GetOffsetStorageType(GDALMDArrayHS *self){
    GDALDataType eDT = GDT_Unknown;
    int hasval = FALSE;
    GDALMDArrayGetOffsetEx( self, &hasval, &eDT );
    return hasval ? eDT : GDT_Unknown;
  }
SWIGINTERN void GDALMDArrayHS_GetScale(GDALMDArrayHS *self,double *val,int *hasval){
    *val = GDALMDArrayGetScale( self, hasval );
  }
SWIGINTERN GDALDataType GDALMDArrayHS_GetScaleStorageType(GDALMDArrayHS *self){
    GDALDataType eDT = GDT_Unknown;
    int hasval = FALSE;
    GDALMDArrayGetScaleEx( self, &hasval, &eDT );
    return hasval ? eDT : GDT_Unknown;
  }
SWIGINTERN CPLErr GDALMDArrayHS_SetOffset(GDALMDArrayHS *self,double val,GDALDataType storageType=GDT_Unknown){
    return GDALMDArraySetOffsetEx( self, val, storageType ) ? CE_None : CE_Failure;
  }
SWIGINTERN CPLErr GDALMDArrayHS_SetScale(GDALMDArrayHS *self,double val,GDALDataType storageType=GDT_Unknown){
    return GDALMDArraySetScaleEx( self, val, storageType ) ? CE_None : CE_Failure;
  }
SWIGINTERN CPLErr GDALMDArrayHS_SetUnit(GDALMDArrayHS *self,char const *unit){
    return GDALMDArraySetUnit(self, unit) ? CE_None : CE_Failure;
  }
SWIGINTERN char const *GDALMDArrayHS_GetUnit(GDALMDArrayHS *self){
    return GDALMDArrayGetUnit(self);
  }
SWIGINTERN OGRErr GDALMDArrayHS_SetSpatialRef(GDALMDArrayHS *self,OSRSpatialReferenceShadow *srs){
     return GDALMDArraySetSpatialRef( self, (OGRSpatialReferenceH)srs ) ? CE_None : CE_Failure;
  }
SWIGINTERN OSRSpatialReferenceShadow *GDALMDArrayHS_GetSpatialRef(GDALMDArrayHS *self){
    return GDALMDArrayGetSpatialRef(self);
  }
SWIGINTERN GDALMDArrayHS *GDALMDArrayHS_GetView(GDALMDArrayHS *self,char const *viewExpr){
    return GDALMDArrayGetView(self, viewExpr);
  }
SWIGINTERN GDALMDArrayHS *GDALMDArrayHS_Transpose(GDALMDArrayHS *self,int nList,int *pList){
    return GDALMDArrayTranspose(self, nList, pList);
  }
SWIGINTERN GDALMDArrayHS *GDALMDArrayHS_GetUnscaled(GDALMDArrayHS *self){
    return GDALMDArrayGetUnscaled(self);
  }
SWIGINTERN GDALMDArrayHS *GDALMDArrayHS_GetMask(GDALMDArrayHS *self,char **options=0){
    return GDALMDArrayGetMask(self, options);
  }
SWIGINTERN GDALDatasetShadow *GDALMDArrayHS_AsClassicDataset(GDALMDArrayHS *self,size_t iXDim,size_t iYDim){
    return (GDALDatasetShadow*)GDALMDArrayAsClassicDataset(self, iXDim, iYDim);
  }

SWIGINTERN int
SWIG_AsVal_bool SWIG_PERL_DECL_ARGS_2(SV *obj, bool* val)
{
  if (obj == &PL_sv_yes) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == &PL_sv_no) { 
    if (val) *val = false;
    return SWIG_OK;
  } else {
    if (val) *val = SvTRUE(obj) ? true : false;
    return SWIG_AddCast(SWIG_OK);    
  }
}

SWIGINTERN Statistics *GDALMDArrayHS_GetStatistics(GDALMDArrayHS *self,bool approx_ok=FALSE,bool force=TRUE,GDALProgressFunc callback=NULL,void *callback_data=NULL){
        GUInt64 nValidCount = 0;
        Statistics* psStatisticsOut = (Statistics*)CPLMalloc(sizeof(Statistics));
        CPLErr eErr = GDALMDArrayGetStatistics(self, NULL, approx_ok, force,
                                 &(psStatisticsOut->min),
                                 &(psStatisticsOut->max),
                                 &(psStatisticsOut->mean),
                                 &(psStatisticsOut->std_dev),
                                 &nValidCount,
                                 callback, callback_data);
        psStatisticsOut->valid_count = static_cast<GIntBig>(nValidCount);
        if( eErr == CE_None )
            return psStatisticsOut;
        CPLFree(psStatisticsOut);
        return NULL;
  }
SWIGINTERN Statistics *GDALMDArrayHS_ComputeStatistics(GDALMDArrayHS *self,bool approx_ok=FALSE,GDALProgressFunc callback=NULL,void *callback_data=NULL){
        GUInt64 nValidCount = 0;
        Statistics* psStatisticsOut = (Statistics*)CPLMalloc(sizeof(Statistics));
        int nSuccess = GDALMDArrayComputeStatistics(self, NULL, approx_ok,
                                 &(psStatisticsOut->min),
                                 &(psStatisticsOut->max),
                                 &(psStatisticsOut->mean),
                                 &(psStatisticsOut->std_dev),
                                 &nValidCount,
                                 callback, callback_data);
        psStatisticsOut->valid_count = static_cast<GIntBig>(nValidCount);
        if( nSuccess )
            return psStatisticsOut;
        CPLFree(psStatisticsOut);
        return NULL;
  }
SWIGINTERN bool GDALMDArrayHS_Cache(GDALMDArrayHS *self,char **options=NULL){
      return GDALMDArrayCache(self, options);
  }
SWIGINTERN void delete_GDALAttributeHS(GDALAttributeHS *self){
    GDALAttributeRelease(self);
  }
SWIGINTERN char const *GDALAttributeHS_GetName(GDALAttributeHS *self){
    return GDALAttributeGetName(self);
  }
SWIGINTERN char const *GDALAttributeHS_GetFullName(GDALAttributeHS *self){
    return GDALAttributeGetFullName(self);
  }
SWIGINTERN unsigned long long GDALAttributeHS_GetTotalElementsCount(GDALAttributeHS *self){
    return GDALAttributeGetTotalElementsCount(self);
  }
SWIGINTERN size_t GDALAttributeHS_GetDimensionCount(GDALAttributeHS *self){
    return GDALAttributeGetDimensionCount(self);
  }
SWIGINTERN GDALExtendedDataTypeHS *GDALAttributeHS_GetDataType(GDALAttributeHS *self){
    return GDALAttributeGetDataType(self);
  }
SWIGINTERN char const *GDALAttributeHS_ReadAsString(GDALAttributeHS *self){
    return GDALAttributeReadAsString(self);
  }
SWIGINTERN int GDALAttributeHS_ReadAsInt(GDALAttributeHS *self){
    return GDALAttributeReadAsInt(self);
  }
SWIGINTERN double GDALAttributeHS_ReadAsDouble(GDALAttributeHS *self){
    return GDALAttributeReadAsDouble(self);
  }
SWIGINTERN char **GDALAttributeHS_ReadAsStringArray(GDALAttributeHS *self){
    return GDALAttributeReadAsStringArray(self);
  }
SWIGINTERN CPLErr GDALAttributeHS_WriteString(GDALAttributeHS *self,char const *val){
    return GDALAttributeWriteString(self, val) ? CE_None : CE_Failure;
  }
SWIGINTERN CPLErr GDALAttributeHS_WriteStringArray(GDALAttributeHS *self,char **vals){
    return GDALAttributeWriteStringArray(self, vals) ? CE_None : CE_Failure;
  }
SWIGINTERN CPLErr GDALAttributeHS_WriteInt(GDALAttributeHS *self,int val){
    return GDALAttributeWriteInt(self, val) ? CE_None : CE_Failure;
  }
SWIGINTERN CPLErr GDALAttributeHS_WriteDouble(GDALAttributeHS *self,double val){
    return GDALAttributeWriteDouble(self, val) ? CE_None : CE_Failure;
  }
SWIGINTERN void delete_GDALDimensionHS(GDALDimensionHS *self){
    GDALDimensionRelease(self);
  }
SWIGINTERN char const *GDALDimensionHS_GetName(GDALDimensionHS *self){
    return GDALDimensionGetName(self);
  }
SWIGINTERN char const *GDALDimensionHS_GetFullName(GDALDimensionHS *self){
    return GDALDimensionGetFullName(self);
  }
SWIGINTERN char const *GDALDimensionHS_GetType(GDALDimensionHS *self){
    return GDALDimensionGetType(self);
  }
SWIGINTERN char const *GDALDimensionHS_GetDirection(GDALDimensionHS *self){
    return GDALDimensionGetDirection(self);
  }
SWIGINTERN unsigned long long GDALDimensionHS_GetSize(GDALDimensionHS *self){
    return GDALDimensionGetSize(self);
  }
SWIGINTERN GDALMDArrayHS *GDALDimensionHS_GetIndexingVariable(GDALDimensionHS *self){
    return GDALDimensionGetIndexingVariable(self);
  }
SWIGINTERN bool GDALDimensionHS_SetIndexingVariable(GDALDimensionHS *self,GDALMDArrayHS *array){
    return GDALDimensionSetIndexingVariable(self, array);
  }
SWIGINTERN void delete_GDALExtendedDataTypeHS(GDALExtendedDataTypeHS *self){
    GDALExtendedDataTypeRelease(self);
  }
SWIGINTERN GDALExtendedDataTypeHS *GDALExtendedDataTypeHS_Create(GDALDataType dt){
    return GDALExtendedDataTypeCreate(dt);
  }
SWIGINTERN GDALExtendedDataTypeHS *GDALExtendedDataTypeHS_CreateString(size_t nMaxStringLength=0,GDALExtendedDataTypeSubType eSubType=GEDTST_NONE){
    return GDALExtendedDataTypeCreateStringEx(nMaxStringLength, eSubType);
  }
SWIGINTERN char const *GDALExtendedDataTypeHS_GetName(GDALExtendedDataTypeHS *self){
    return GDALExtendedDataTypeGetName(self);
  }
SWIGINTERN GDALExtendedDataTypeClass GDALExtendedDataTypeHS_GetClass(GDALExtendedDataTypeHS *self){
    return GDALExtendedDataTypeGetClass(self);
  }
SWIGINTERN GDALDataType GDALExtendedDataTypeHS_GetNumericDataType(GDALExtendedDataTypeHS *self){
    return GDALExtendedDataTypeGetNumericDataType(self);
  }
SWIGINTERN size_t GDALExtendedDataTypeHS_GetSize(GDALExtendedDataTypeHS *self){
    return GDALExtendedDataTypeGetSize(self);
  }
SWIGINTERN size_t GDALExtendedDataTypeHS_GetMaxStringLength(GDALExtendedDataTypeHS *self){
    return GDALExtendedDataTypeGetMaxStringLength(self);
  }
SWIGINTERN GDALExtendedDataTypeSubType GDALExtendedDataTypeHS_GetSubType(GDALExtendedDataTypeHS *self){
    return GDALExtendedDataTypeGetSubType(self);
  }
SWIGINTERN bool GDALExtendedDataTypeHS_CanConvertTo(GDALExtendedDataTypeHS *self,GDALExtendedDataTypeHS *other){
    return GDALExtendedDataTypeCanConvertTo(self, other);
  }
SWIGINTERN bool GDALExtendedDataTypeHS_Equals(GDALExtendedDataTypeHS *self,GDALExtendedDataTypeHS *other){
    return GDALExtendedDataTypeEquals(self, other);
  }
SWIGINTERN void delete_GDALEDTComponentHS(GDALEDTComponentHS *self){
    GDALEDTComponentRelease(self);
  }
SWIGINTERN GDALEDTComponentHS *GDALEDTComponentHS_Create(char const *name,size_t offset,GDALExtendedDataTypeHS *type){
    return GDALEDTComponentCreate(name, offset, type);
  }
SWIGINTERN char const *GDALEDTComponentHS_GetName(GDALEDTComponentHS *self){
    return GDALEDTComponentGetName(self);
  }
SWIGINTERN size_t GDALEDTComponentHS_GetOffset(GDALEDTComponentHS *self){
    return GDALEDTComponentGetOffset(self);
  }
SWIGINTERN GDALExtendedDataTypeHS *GDALEDTComponentHS_GetType(GDALEDTComponentHS *self){
    return GDALEDTComponentGetType(self);
  }

/* Returned size is in bytes or 0 if an error occurred. */
static
GIntBig ComputeBandRasterIOSize (int buf_xsize, int buf_ysize, int nPixelSize,
                                 GIntBig nPixelSpace, GIntBig nLineSpace,
                                 int bSpacingShouldBeMultipleOfPixelSize )
{
    if (buf_xsize <= 0 || buf_ysize <= 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for buffer size");
        return 0;
    }

    if (nPixelSpace < 0 || nLineSpace < 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for space arguments");
        return 0;
    }

    if (nPixelSize == 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal value for data type");
        return 0;
    }

    if( nPixelSpace == 0 )
        nPixelSpace = nPixelSize;
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nPixelSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nPixelSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nLineSpace == 0 )
    {
        nLineSpace = nPixelSpace * buf_xsize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nLineSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    GIntBig nRet = (GIntBig)(buf_ysize - 1) * nLineSpace + (GIntBig)(buf_xsize - 1) * nPixelSpace + nPixelSize;
#if SIZEOF_VOIDP == 4
    if (nRet > INT_MAX)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
        return 0;
    }
#endif

    return nRet;
}


static
CPLErr ReadRaster_internal( GDALRasterBandShadow *obj,
                            int xoff, int yoff, int xsize, int ysize,
                            int buf_xsize, int buf_ysize,
                            GDALDataType buf_type,
                            GIntBig *buf_size, char **buf,
                            GIntBig pixel_space, GIntBig line_space,
                            GDALRasterIOExtraArg* psExtraArg )
{
  CPLErr result;

  *buf_size = ComputeBandRasterIOSize( buf_xsize, buf_ysize, GDALGetDataTypeSize( buf_type ) / 8,
                                       pixel_space, line_space, FALSE );

  if ( *buf_size == 0 )
  {
      *buf = 0;
      return CE_Failure;
  }

  *buf = (char*) malloc( *buf_size );
  if ( *buf )
  {
    result =  GDALRasterIOEx( obj, GF_Read, xoff, yoff, xsize, ysize,
                                    (void *) *buf, buf_xsize, buf_ysize,
                                    buf_type, pixel_space, line_space, psExtraArg );
    if ( result != CE_None )
    {
        free( *buf );
        *buf = 0;
        *buf_size = 0;
    }
  }
  else
  {
    CPLError(CE_Failure, CPLE_OutOfMemory, "Not enough memory to allocate " CPL_FRMT_GIB " bytes", *buf_size);
    result = CE_Failure;
    *buf = 0;
    *buf_size = 0;
  }

  return result;
}


static
CPLErr WriteRaster_internal( GDALRasterBandShadow *obj,
                             int xoff, int yoff, int xsize, int ysize,
                             int buf_xsize, int buf_ysize,
                             GDALDataType buf_type,
                             GIntBig buf_size, char *buffer,
                             GIntBig pixel_space, GIntBig line_space,
                             GDALRasterIOExtraArg* psExtraArg )
{
    GIntBig min_buffer_size = ComputeBandRasterIOSize (buf_xsize, buf_ysize, GDALGetDataTypeSize( buf_type ) / 8,
                                                   pixel_space, line_space, FALSE );
    if ( min_buffer_size == 0 )
      return CE_Failure;

    if ( buf_size < min_buffer_size ) {
      CPLError(CE_Failure, CPLE_AppDefined, "Buffer too small");
      return CE_Failure;
    }

    return GDALRasterIOEx( obj, GF_Write, xoff, yoff, xsize, ysize,
                           (void *) buffer, buf_xsize, buf_ysize, buf_type, pixel_space, line_space, psExtraArg );
}

SWIGINTERN GDALDatasetShadow *GDALRasterBandShadow_GetDataset(GDALRasterBandShadow *self){
    return (GDALDatasetShadow*) GDALGetBandDataset(self);
  }
SWIGINTERN int GDALRasterBandShadow_GetBand(GDALRasterBandShadow *self){
    return GDALGetBandNumber(self);
  }
SWIGINTERN void GDALRasterBandShadow_GetBlockSize(GDALRasterBandShadow *self,int *pnBlockXSize,int *pnBlockYSize){
      GDALGetBlockSize(self, pnBlockXSize, pnBlockYSize);
  }
SWIGINTERN GDALColorInterp GDALRasterBandShadow_GetColorInterpretation(GDALRasterBandShadow *self){
    return GDALGetRasterColorInterpretation(self);
  }
SWIGINTERN GDALColorInterp GDALRasterBandShadow_GetRasterColorInterpretation(GDALRasterBandShadow *self){
    return GDALGetRasterColorInterpretation(self);
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetColorInterpretation(GDALRasterBandShadow *self,GDALColorInterp val){
    return GDALSetRasterColorInterpretation( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetRasterColorInterpretation(GDALRasterBandShadow *self,GDALColorInterp val){
    return GDALSetRasterColorInterpretation( self, val );
  }
SWIGINTERN void GDALRasterBandShadow_GetNoDataValue(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterNoDataValue( self, hasval );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetNoDataValue(GDALRasterBandShadow *self,double d){
    return GDALSetRasterNoDataValue( self, d );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_DeleteNoDataValue(GDALRasterBandShadow *self){
    return GDALDeleteRasterNoDataValue(self);
  }
SWIGINTERN char const *GDALRasterBandShadow_GetUnitType(GDALRasterBandShadow *self){
      return GDALGetRasterUnitType(self);
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetUnitType(GDALRasterBandShadow *self,char const *val){
    return GDALSetRasterUnitType( self, val );
  }
SWIGINTERN char **GDALRasterBandShadow_GetRasterCategoryNames(GDALRasterBandShadow *self){
    return GDALGetRasterCategoryNames(self);
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetRasterCategoryNames(GDALRasterBandShadow *self,char **names){
    return GDALSetRasterCategoryNames( self, names );
  }
SWIGINTERN void GDALRasterBandShadow_GetMinimum(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterMinimum( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetMaximum(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterMaximum( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetOffset(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterOffset( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetScale(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterScale( self, hasval );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetOffset(GDALRasterBandShadow *self,double val){
    return GDALSetRasterOffset( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetScale(GDALRasterBandShadow *self,double val){
    return GDALSetRasterScale( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetStatistics(GDALRasterBandShadow *self,int approx_ok,int force,double *min,double *max,double *mean,double *stddev){
    if (min) *min = 0;
    if (max) *max = 0;
    if (mean) *mean = 0;
    if (stddev) *stddev = -1; /* This is the only way to recognize from Python if GetRasterStatistics() has updated the values */
    return GDALGetRasterStatistics( self, approx_ok, force,
				    min, max, mean, stddev );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ComputeStatistics(GDALRasterBandShadow *self,bool approx_ok,double *min=NULL,double *max=NULL,double *mean=NULL,double *stddev=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return GDALComputeRasterStatistics( self, approx_ok, min, max, mean, stddev, callback, callback_data );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetStatistics(GDALRasterBandShadow *self,double min,double max,double mean,double stddev){
    return GDALSetRasterStatistics( self, min, max, mean, stddev );
  }
SWIGINTERN int GDALRasterBandShadow_GetOverviewCount(GDALRasterBandShadow *self){
    return GDALGetOverviewCount(self);
  }
SWIGINTERN GDALRasterBandShadow *GDALRasterBandShadow_GetOverview(GDALRasterBandShadow *self,int i){
    return (GDALRasterBandShadow*) GDALGetOverview( self, i );
  }
SWIGINTERN int GDALRasterBandShadow_Checksum(GDALRasterBandShadow *self,int xoff=0,int yoff=0,int *xsize=0,int *ysize=0){
    int nxsize = (xsize!=0) ? *xsize : GDALGetRasterBandXSize( self );
    int nysize = (ysize!=0) ? *ysize : GDALGetRasterBandYSize( self );
    return GDALChecksumImage( self, xoff, yoff, nxsize, nysize );
  }
SWIGINTERN void GDALRasterBandShadow_ComputeRasterMinMax(GDALRasterBandShadow *self,double argout[2],int approx_ok=0){
    GDALComputeRasterMinMax( self, approx_ok, argout );
  }
SWIGINTERN void GDALRasterBandShadow_ComputeBandStats(GDALRasterBandShadow *self,double argout[2],int samplestep=1){
    GDALComputeBandStats( self, samplestep, argout+0, argout+1,
                          NULL, NULL );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_Fill(GDALRasterBandShadow *self,double real_fill,double imag_fill=0.0){
    return GDALFillRaster( self, real_fill, imag_fill );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ReadRaster(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,GIntBig *buf_len,char **buf,int *buf_xsize=0,int *buf_ysize=0,int *buf_type=0,GIntBig *buf_pixel_space=0,GIntBig *buf_line_space=0,GDALRIOResampleAlg resample_alg=GRIORA_NearestNeighbour,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype  = (buf_type==0) ? GDALGetRasterDataType(self)
                                        : (GDALDataType)*buf_type;
    GIntBig pixel_space = (buf_pixel_space == 0) ? 0 : *buf_pixel_space;
    GIntBig line_space = (buf_line_space == 0) ? 0 : *buf_line_space;

    GDALRasterIOExtraArg sExtraArg;
    INIT_RASTERIO_EXTRA_ARG(sExtraArg);
    sExtraArg.eResampleAlg = resample_alg;
    sExtraArg.pfnProgress = callback;
    sExtraArg.pProgressData = callback_data;

    return ReadRaster_internal( self, xoff, yoff, xsize, ysize,
                                nxsize, nysize, ntype, buf_len, buf, pixel_space, line_space,
                                &sExtraArg );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteRaster(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,GIntBig buf_len,char *buf_string,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,GIntBig *buf_pixel_space=0,GIntBig *buf_line_space=0){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype  = (buf_type==0) ? GDALGetRasterDataType(self)
                                        : *buf_type;
    GIntBig pixel_space = (buf_pixel_space == 0) ? 0 : *buf_pixel_space;
    GIntBig line_space = (buf_line_space == 0) ? 0 : *buf_line_space;
    GDALRasterIOExtraArg* psExtraArg = NULL;
    return WriteRaster_internal( self, xoff, yoff, xsize, ysize,
                                 nxsize, nysize, ntype, buf_len, buf_string, pixel_space, line_space, psExtraArg );
  }
SWIGINTERN void GDALRasterBandShadow_FlushCache(GDALRasterBandShadow *self){
    GDALFlushRasterCache( self );
  }
SWIGINTERN GDALColorTableShadow *GDALRasterBandShadow_GetRasterColorTable(GDALRasterBandShadow *self){
    return (GDALColorTableShadow*) GDALGetRasterColorTable( self );
  }
SWIGINTERN GDALColorTableShadow *GDALRasterBandShadow_GetColorTable(GDALRasterBandShadow *self){
    return (GDALColorTableShadow*) GDALGetRasterColorTable( self );
  }
SWIGINTERN int GDALRasterBandShadow_SetRasterColorTable(GDALRasterBandShadow *self,GDALColorTableShadow *arg){
    return GDALSetRasterColorTable( self, arg );
  }
SWIGINTERN int GDALRasterBandShadow_SetColorTable(GDALRasterBandShadow *self,GDALColorTableShadow *arg){
    return GDALSetRasterColorTable( self, arg );
  }
SWIGINTERN GDALRasterAttributeTableShadow *GDALRasterBandShadow_GetDefaultRAT(GDALRasterBandShadow *self){
      return (GDALRasterAttributeTableShadow*) GDALGetDefaultRAT(self);
  }
SWIGINTERN int GDALRasterBandShadow_SetDefaultRAT(GDALRasterBandShadow *self,GDALRasterAttributeTableShadow *table){
      return GDALSetDefaultRAT(self, table);
  }
SWIGINTERN GDALRasterBandShadow *GDALRasterBandShadow_GetMaskBand(GDALRasterBandShadow *self){
      return (GDALRasterBandShadow *) GDALGetMaskBand( self );
  }
SWIGINTERN int GDALRasterBandShadow_GetMaskFlags(GDALRasterBandShadow *self){
      return GDALGetMaskFlags( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_CreateMaskBand(GDALRasterBandShadow *self,int nFlags){
      return GDALCreateMaskBand( self, nFlags );
  }

#define LENGTH_OF_GUIntBig_AS_STRING 30
    static SV *
        CreateArrayFromGUIntBigArray( GUIntBig *first, unsigned int size ) {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        for( unsigned int i=0; i<size; i++ ) {
            char s[LENGTH_OF_GUIntBig_AS_STRING];
            snprintf(s, LENGTH_OF_GUIntBig_AS_STRING-1, CPL_FRMT_GUIB, *first);
            av_store(av,i,newSVpv(s, 0));
            ++first;
        }
        return sv_2mortal(newRV((SV*)av));
    }
    
SWIGINTERN CPLErr GDALRasterBandShadow_GetHistogram(GDALRasterBandShadow *self,double min=-0.5,double max=255.5,int buckets=256,GUIntBig *panHistogram=NULL,int include_out_of_range=0,int approx_ok=1,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    CPLErrorReset();
    CPLErr err = GDALGetRasterHistogramEx( self, min, max, buckets, panHistogram,
                                         include_out_of_range, approx_ok,
                                         callback, callback_data );
    return err;
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetDefaultHistogram(GDALRasterBandShadow *self,double *min_ret=NULL,double *max_ret=NULL,int *buckets_ret=NULL,GUIntBig **ppanHistogram=NULL,int force=1,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return GDALGetDefaultHistogramEx( self, min_ret, max_ret, buckets_ret,
                                    ppanHistogram, force,
                                    callback, callback_data );
}
SWIGINTERN CPLErr GDALRasterBandShadow_SetDefaultHistogram(GDALRasterBandShadow *self,double min,double max,int buckets_in,GUIntBig *panHistogram_in){
    return GDALSetDefaultHistogramEx( self, min, max,
                                    buckets_in, panHistogram_in );
}
SWIGINTERN bool GDALRasterBandShadow_HasArbitraryOverviews(GDALRasterBandShadow *self){
      return (GDALHasArbitraryOverviews( self ) != 0) ? true : false;
  }
SWIGINTERN char **GDALRasterBandShadow_GetCategoryNames(GDALRasterBandShadow *self){
    return GDALGetRasterCategoryNames( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetCategoryNames(GDALRasterBandShadow *self,char **papszCategoryNames){
    return GDALSetRasterCategoryNames( self, papszCategoryNames );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_AdviseRead(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,char **options=NULL){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype;
    if ( buf_type != 0 ) {
      ntype = (GDALDataType) *buf_type;
    } else {
      ntype = GDALGetRasterDataType( self );
    }
    return GDALRasterAdviseRead(self, xoff, yoff, xsize, ysize,
                                nxsize, nysize, ntype, options);
}
SWIGINTERN GDALMDArrayHS *GDALRasterBandShadow_AsMDArray(GDALRasterBandShadow *self){
    return GDALRasterBandAsMDArray(self);
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ContourGenerate(GDALRasterBandShadow *self,double dfContourInterval,double dfContourBase,int nFixedLevelCount,double *padfFixedLevels,int bUseNoData,double dfNoDataValue,OGRLayerShadow *hLayer,int iIDField,int iElevField,GDALProgressFunc progress=NULL,void *progress_data=NULL){
        return GDALContourGenerate( self, dfContourInterval, dfContourBase,
                                    nFixedLevelCount, padfFixedLevels,
                                    bUseNoData, dfNoDataValue,
                                    hLayer, iIDField, iElevField,
                                    progress,
                                    progress_data );
    }
SWIGINTERN SV *GDALRasterBandShadow_ClassCounts__SWIG_0(GDALRasterBandShadow *self,GDALProgressFunc callback=NULL,void *callback_data=NULL){
        GDALDataType dt = GDALGetRasterDataType(self);
        if (!(dt == GDT_Byte || dt == GDT_UInt16 || dt == GDT_Int16 || dt == GDT_UInt32 || dt == GDT_Int32)) {
            do_confess("ClassCounts without classifier requires an integer band.", 1);
        }
        HV* hash = newHV();
        int XBlockSize, YBlockSize;
        GDALGetBlockSize( self, &XBlockSize, &YBlockSize );
        int XBlocks = (GDALGetRasterBandXSize(self) + XBlockSize - 1) / XBlockSize;
        int YBlocks = (GDALGetRasterBandYSize(self) + YBlockSize - 1) / YBlockSize;
        void *data = CPLMalloc(XBlockSize * YBlockSize * GDALGetDataTypeSizeBytes(dt));
        for (int yb = 0; yb < YBlocks; ++yb) {
            if (callback) {
                double p = (double)yb/(double)YBlocks;
                if (!callback(p, "", callback_data)) {
                    CPLError(CE_Failure, CPLE_UserInterrupt, "User terminated");
                    hv_undef(hash);
                    hash = NULL;
                    break;
                }
            }
            for (int xb = 0; xb < XBlocks; ++xb) {
                int XValid, YValid;
                CPLErr e = GDALReadBlock(self, xb, yb, data);
                GDALGetActualBlockSize(self, xb, yb, &XValid, &YValid);
                for (int iY = 0; iY < YValid; ++iY) {
                    for (int iX = 0; iX < XValid; ++iX) {
                        int32_t k;
                        switch(dt) {
                        case GDT_Byte:
                          k = ((GByte*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_UInt16:
                          k = ((GUInt16*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_Int16:
                          k = ((GInt16*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_UInt32:
                          k = ((GUInt32*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_Int32:
                          k = ((GInt32*)(data))[iX + iY * XBlockSize];
                          break;
                        }
                        char key[12];
                        int klen = sprintf(key, "%i", k);
                        SV* sv;
                        SV** sv2 = hv_fetch(hash, key, klen, 0);
                        if (sv2 && SvOK(*sv2)) {
                            sv = *sv2;
                            sv_setiv(sv, SvIV(sv)+1);
                            SvREFCNT_inc(sv);
                        } else {
                            sv = newSViv(1);
                        }
                        if (!hv_store(hash, key, klen, sv, 0))
                            SvREFCNT_dec(sv);
                    }
                }
            }
        }
        CPLFree(data);
        if (hash)
            return newRV_noinc((SV*)hash);
        else
            return &PL_sv_undef;
    }
SWIGINTERN SV *GDALRasterBandShadow_ClassCounts__SWIG_1(GDALRasterBandShadow *self,SV *classifier,GDALProgressFunc callback=NULL,void *callback_data=NULL){

        const char *error = NULL;
        GDALDataType dt = GDALGetRasterDataType(self);
        if (!(dt == GDT_Byte || dt == GDT_UInt16 || dt == GDT_Int16 || dt == GDT_UInt32 || dt == GDT_Int32 || dt == GDT_Float32 || dt == GDT_Float64)) {
            do_confess("ClassCounts with classifier requires an integer or real band.", 1);
        }

        AV* array_classifier = NULL;
        int comparison = 0;

        array_classifier = to_array_classifier(classifier, &comparison, &error);
        if (error) do_confess(error, 1);

        HV* hash = newHV();
        int has_no_data;
        double no_data = GDALGetRasterNoDataValue(self, &has_no_data);
        int XBlockSize, YBlockSize;
        GDALGetBlockSize( self, &XBlockSize, &YBlockSize );
        int XBlocks = (GDALGetRasterBandXSize(self) + XBlockSize - 1) / XBlockSize;
        int YBlocks = (GDALGetRasterBandYSize(self) + YBlockSize - 1) / YBlockSize;
        void *data = CPLMalloc(XBlockSize * YBlockSize * GDALGetDataTypeSizeBytes(dt));

        for (int yb = 0; yb < YBlocks; ++yb) {
            if (callback) {
                double p = (double)yb/(double)YBlocks;
                if (!callback(p, "", callback_data)) {
                    CPLError(CE_Failure, CPLE_UserInterrupt, "User terminated");
                    hv_undef(hash);
                    hash = NULL;
                    break;
                }
            }
            for (int xb = 0; xb < XBlocks; ++xb) {
                int XValid, YValid;
                CPLErr e = GDALReadBlock(self, xb, yb, data);
                GDALGetActualBlockSize(self, xb, yb, &XValid, &YValid);
                for (int iY = 0; iY < YValid; ++iY) {
                    for (int iX = 0; iX < XValid; ++iX) {
                        double nv = 0;
                        switch(dt) {
                        case GDT_Byte:
                            nv = ((GByte*)(data))[iX + iY * XBlockSize];
                            break;
                        case GDT_UInt16:
                            nv = ((GUInt16*)(data))[iX + iY * XBlockSize];
                            break;
                        case GDT_Int16:
                            nv = ((GInt16*)(data))[iX + iY * XBlockSize];
                            break;
                        case GDT_UInt32:
                            nv = ((GUInt32*)(data))[iX + iY * XBlockSize];
                            break;
                        case GDT_Int32:
                            nv = ((GInt32*)(data))[iX + iY * XBlockSize];
                            break;
                        case GDT_Float32:
                            nv = ((float*)(data))[iX + iY * XBlockSize];
                            break;
                        case GDT_Float64:
                            nv = ((double*)(data))[iX + iY * XBlockSize];
                            break;
                        }
                        if (has_no_data && nv == no_data) {
                            continue;
                        }
                        int k = 0;
                        NVClass(comparison, nv, array_classifier, &k, &error);
                        if (error) goto fail;
                        char key[12];
                        int klen = sprintf(key, "%i", k);
                        SV* sv;
                        SV** sv2 = hv_fetch(hash, key, klen, 0);
                        if (sv2 && SvOK(*sv2)) {
                            sv = *sv2;
                            sv_setiv(sv, SvIV(sv)+1);
                            SvREFCNT_inc(sv);
                        } else {
                            sv = newSViv(1);
                        }
                        if (!hv_store(hash, key, klen, sv, 0))
                            SvREFCNT_dec(sv);
                    }
                }
            }
        }

        CPLFree(data);
        if (hash)
            return newRV_noinc((SV*)hash);
        else
            return &PL_sv_undef;
        fail:
        CPLFree(data);
        do_confess(error, 1);
        return &PL_sv_undef;
    }
SWIGINTERN void GDALRasterBandShadow_Reclassify(GDALRasterBandShadow *self,SV *classifier,GDALProgressFunc callback=NULL,void *callback_data=NULL){

        const char *error = NULL;

        GDALDataType dt = GDALGetRasterDataType(self);

        bool is_integer_raster = true;
        HV* hash_classifier = NULL;
        bool has_default = false;
        int32_t deflt = 0;

        AV* array_classifier = NULL;
        int comparison = 0;

        if (dt == GDT_Byte || dt == GDT_UInt16 || dt == GDT_Int16 || dt == GDT_UInt32 || dt == GDT_Int32) {
            if (SvROK(classifier) && (SvTYPE(SvRV(classifier)) == SVt_PVHV)) {
                hash_classifier = (HV*)SvRV(classifier);
                SV** sv = hv_fetch(hash_classifier, "*", 1, 0);
                if (sv && SvOK(*sv)) {
                    has_default = true;
                    deflt = SvIV(*sv);
                }
            } else {
                /*do_confess(NEED_HASH_REF, 1);*/
                array_classifier = to_array_classifier(classifier, &comparison, &error);
                if (error) do_confess(error, 1);
            }
        } else if (dt == GDT_Float32 || dt == GDT_Float64) {
            is_integer_raster = false;
            array_classifier = to_array_classifier(classifier, &comparison, &error);
            if (error) do_confess(error, 1);
        } else {
            do_confess("Only integer and float rasters can be reclassified.", 1);
        }

        int has_no_data;
        double no_data = GDALGetRasterNoDataValue(self, &has_no_data);
        int XBlockSize, YBlockSize;
        GDALGetBlockSize( self, &XBlockSize, &YBlockSize );
        int XBlocks = (GDALGetRasterBandXSize(self) + XBlockSize - 1) / XBlockSize;
        int YBlocks = (GDALGetRasterBandYSize(self) + YBlockSize - 1) / YBlockSize;
        void *data = CPLMalloc(XBlockSize * YBlockSize * GDALGetDataTypeSizeBytes(dt));

        for (int yb = 0; yb < YBlocks; ++yb) {
            if (callback) {
                double p = (double)yb/(double)YBlocks;
                if (!callback(p, "", callback_data)) {
                    CPLError(CE_Failure, CPLE_UserInterrupt, "User terminated");
                    break;
                }
            }
            for (int xb = 0; xb < XBlocks; ++xb) {
                int XValid, YValid;
                CPLErr e = GDALReadBlock(self, xb, yb, data);
                GDALGetActualBlockSize(self, xb, yb, &XValid, &YValid);
                for (int iY = 0; iY < YValid; ++iY) {
                    for (int iX = 0; iX < XValid; ++iX) {
                        int32_t k = 0;
                        double nv = 0;
                        switch(dt) {
                        case GDT_Byte:
                          k = ((GByte*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_UInt16:
                          k = ((GUInt16*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_Int16:
                          k = ((GInt16*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_UInt32:
                          k = ((GUInt32*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_Int32:
                          k = ((GInt32*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_Float32:
                          nv = ((float*)(data))[iX + iY * XBlockSize];
                          break;
                        case GDT_Float64:
                          nv = ((double*)(data))[iX + iY * XBlockSize];
                          break;
                        }

                        if (is_integer_raster) {
                            if (array_classifier) {
                                if (!(has_no_data && k == no_data)) {
                                    k = IVClassify(comparison, k, array_classifier, &error);
                                    if (error) goto fail;
                                }
                            } else {
                                char key[12];
                                int klen = sprintf(key, "%i", k);
                                SV** sv = hv_fetch(hash_classifier, key, klen, 0);
                                if (sv && SvOK(*sv)) {
                                    k = SvIV(*sv);
                                } else if (has_default) {
                                    if (!(has_no_data && k == no_data))
                                        k = deflt;
                                    else
                                        continue;
                                }
                            }
                        } else {
                            if (!(has_no_data && nv == no_data)) {
                                nv = NVClassify(comparison, nv, array_classifier, &error);
                                if (error) goto fail;
                            }
                        }

                        switch(dt) {
                        case GDT_Byte:
                          ((GByte*)(data))[iX + iY * XBlockSize] = k;
                          break;
                        case GDT_UInt16:
                          ((GUInt16*)(data))[iX + iY * XBlockSize] = k;
                          break;
                        case GDT_Int16:
                          ((GInt16*)(data))[iX + iY * XBlockSize] = k;
                          break;
                        case GDT_UInt32:
                          ((GUInt32*)(data))[iX + iY * XBlockSize] = k;
                          break;
                        case GDT_Int32:
                          ((GInt32*)(data))[iX + iY * XBlockSize] = k;
                          break;
                        case GDT_Float32:
                          ((float*)(data))[iX + iY * XBlockSize] = nv;
                          break;
                        case GDT_Float64:
                          ((double*)(data))[iX + iY * XBlockSize] = nv;
                          break;
                        }
                    }
                }
                e = GDALWriteBlock(self, xb, yb, data);
            }
        }
        CPLFree(data);
        return;
        fail:
        CPLFree(data);
        do_confess(error, 1);
        return;
    }

GDALDataType GDALRasterBandShadow_DataType_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterDataType( h );
}
int GDALRasterBandShadow_XSize_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterBandXSize( h );
}
int GDALRasterBandShadow_YSize_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterBandYSize( h );
}

SWIGINTERN GDALColorTableShadow *new_GDALColorTableShadow(GDALPaletteInterp palette=GPI_RGB){
        return (GDALColorTableShadow*) GDALCreateColorTable(palette);
    }
SWIGINTERN void delete_GDALColorTableShadow(GDALColorTableShadow *self){
        GDALDestroyColorTable(self);
    }
SWIGINTERN GDALColorTableShadow *GDALColorTableShadow_Clone(GDALColorTableShadow *self){
        return (GDALColorTableShadow*) GDALCloneColorTable (self);
    }
SWIGINTERN GDALPaletteInterp GDALColorTableShadow_GetPaletteInterpretation(GDALColorTableShadow *self){
        return GDALGetPaletteInterpretation(self);
    }
SWIGINTERN int GDALColorTableShadow_GetColorEntryCount(GDALColorTableShadow *self){
        return GDALGetColorEntryCount(self);
    }
SWIGINTERN GDALColorEntry *GDALColorTableShadow_GetColorEntry(GDALColorTableShadow *self,int entry){
        return (GDALColorEntry*) GDALGetColorEntry(self, entry);
    }
SWIGINTERN int GDALColorTableShadow_GetColorEntryAsRGB(GDALColorTableShadow *self,int entry,GDALColorEntry *centry){
        return GDALGetColorEntryAsRGB(self, entry, centry);
    }
SWIGINTERN void GDALColorTableShadow_SetColorEntry(GDALColorTableShadow *self,int entry,GDALColorEntry const *centry){
        GDALSetColorEntry(self, entry, centry);
    }
SWIGINTERN void GDALColorTableShadow_CreateColorRamp(GDALColorTableShadow *self,int nStartIndex,GDALColorEntry const *startcolor,int nEndIndex,GDALColorEntry const *endcolor){
        GDALCreateColorRamp(self, nStartIndex, startcolor, nEndIndex, endcolor);
    }
SWIGINTERN GDALRasterAttributeTableShadow *new_GDALRasterAttributeTableShadow(){
        return (GDALRasterAttributeTableShadow*)
		GDALCreateRasterAttributeTable();
    }
SWIGINTERN void delete_GDALRasterAttributeTableShadow(GDALRasterAttributeTableShadow *self){
        GDALDestroyRasterAttributeTable(self);
    }
SWIGINTERN GDALRasterAttributeTableShadow *GDALRasterAttributeTableShadow_Clone(GDALRasterAttributeTableShadow *self){
        return (GDALRasterAttributeTableShadow*) GDALRATClone(self);
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetColumnCount(GDALRasterAttributeTableShadow *self){
        return GDALRATGetColumnCount( self );
    }
SWIGINTERN char const *GDALRasterAttributeTableShadow_GetNameOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetNameOfCol( self, iCol );
    }
SWIGINTERN GDALRATFieldUsage GDALRasterAttributeTableShadow_GetUsageOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetUsageOfCol( self, iCol );
    }
SWIGINTERN GDALRATFieldType GDALRasterAttributeTableShadow_GetTypeOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetTypeOfCol( self, iCol );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetColOfUsage(GDALRasterAttributeTableShadow *self,GDALRATFieldUsage eUsage){
        return GDALRATGetColOfUsage( self, eUsage );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetRowCount(GDALRasterAttributeTableShadow *self){
        return GDALRATGetRowCount( self );
    }
SWIGINTERN char const *GDALRasterAttributeTableShadow_GetValueAsString(GDALRasterAttributeTableShadow *self,int iRow,int iCol){
        return GDALRATGetValueAsString( self, iRow, iCol );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetValueAsInt(GDALRasterAttributeTableShadow *self,int iRow,int iCol){
        return GDALRATGetValueAsInt( self, iRow, iCol );
    }
SWIGINTERN double GDALRasterAttributeTableShadow_GetValueAsDouble(GDALRasterAttributeTableShadow *self,int iRow,int iCol){
        return GDALRATGetValueAsDouble( self, iRow, iCol );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsString(GDALRasterAttributeTableShadow *self,int iRow,int iCol,char const *pszValue){
        GDALRATSetValueAsString( self, iRow, iCol, pszValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsInt(GDALRasterAttributeTableShadow *self,int iRow,int iCol,int nValue){
        GDALRATSetValueAsInt( self, iRow, iCol, nValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsDouble(GDALRasterAttributeTableShadow *self,int iRow,int iCol,double dfValue){
        GDALRATSetValueAsDouble( self, iRow, iCol, dfValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetRowCount(GDALRasterAttributeTableShadow *self,int nCount){
        GDALRATSetRowCount( self, nCount );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_CreateColumn(GDALRasterAttributeTableShadow *self,char const *pszName,GDALRATFieldType eType,GDALRATFieldUsage eUsage){
        return GDALRATCreateColumn( self, pszName, eType, eUsage );
    }
SWIGINTERN bool GDALRasterAttributeTableShadow_GetLinearBinning(GDALRasterAttributeTableShadow *self,double *pdfRow0Min,double *pdfBinSize){
        return (GDALRATGetLinearBinning(self, pdfRow0Min, pdfBinSize) != 0) ? true : false;
    }
SWIGINTERN int GDALRasterAttributeTableShadow_SetLinearBinning(GDALRasterAttributeTableShadow *self,double dfRow0Min,double dfBinSize){
        return GDALRATSetLinearBinning(self, dfRow0Min, dfBinSize);
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetRowOfValue(GDALRasterAttributeTableShadow *self,double dfValue){
        return GDALRATGetRowOfValue( self, dfValue );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_ChangesAreWrittenToFile(GDALRasterAttributeTableShadow *self){
        return GDALRATChangesAreWrittenToFile( self );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_DumpReadable(GDALRasterAttributeTableShadow *self){
        GDALRATDumpReadable( self, NULL );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetTableType(GDALRasterAttributeTableShadow *self,GDALRATTableType eTableType){
        GDALRATSetTableType( self, eTableType );
    }
SWIGINTERN GDALRATTableType GDALRasterAttributeTableShadow_GetTableType(GDALRasterAttributeTableShadow *self){
        return GDALRATGetTableType( self );
    }

#include "gdalgrid.h"

#ifdef DEBUG
typedef struct OGRLayerHS OGRLayerShadow;
typedef struct OGRGeometryHS OGRGeometryShadow;
#else
typedef void OGRLayerShadow;
typedef void OGRGeometryShadow;
#endif


static int
GDALTermProgress_nocb( double dfProgress, const char * pszMessage=NULL, void *pData=NULL ) {
  return GDALTermProgress( dfProgress, pszMessage, pData);
}


int  ComputeMedianCutPCT ( GDALRasterBandShadow *red,
                              GDALRasterBandShadow *green,
                              GDALRasterBandShadow *blue,
                              int num_colors,
                              GDALColorTableShadow* colors,
                              GDALProgressFunc callback = NULL,
                              void* callback_data=NULL) {

    CPLErrorReset();

    int err = GDALComputeMedianCutPCT( red,
                                          green,
                                          blue,
                                          NULL,
                                          num_colors,
                                          colors,
                                          callback,
                                          callback_data);

    return err;
}


int  DitherRGB2PCT ( GDALRasterBandShadow *red,
                     GDALRasterBandShadow *green,
                     GDALRasterBandShadow *blue,
                     GDALRasterBandShadow *target,
                     GDALColorTableShadow *colors,
                     GDALProgressFunc callback = NULL,
                     void* callback_data=NULL) {

    CPLErrorReset();
    int err;
    err = GDALDitherRGB2PCT(  red,
                                  green,
                                  blue,
                                  target,
                                  colors,
                                  callback,
                                  callback_data);

    return err;
}


CPLErr  ReprojectImage ( GDALDatasetShadow *src_ds,
                         GDALDatasetShadow *dst_ds,
                         const char *src_wkt=NULL,
                         const char *dst_wkt=NULL,
                         GDALResampleAlg eResampleAlg=GRA_NearestNeighbour,
                         double WarpMemoryLimit=0.0,
                         double maxerror = 0.0,
			 GDALProgressFunc callback = NULL,
                     	 void* callback_data=NULL,
                         char** options = NULL ) {

    CPLErrorReset();

    GDALWarpOptions* psOptions = NULL;
    if( options != NULL )
    {
        psOptions = GDALCreateWarpOptions();
        psOptions->papszWarpOptions = CSLDuplicate(options);
    }

    CPLErr err = GDALReprojectImage( src_ds,
                                     src_wkt,
                                     dst_ds,
                                     dst_wkt,
                                     eResampleAlg,
                                     WarpMemoryLimit,
                                     maxerror,
                                     callback,
                                     callback_data,
                                     psOptions);

    if( psOptions != NULL )
        GDALDestroyWarpOptions(psOptions);

    return err;
}


int  ComputeProximity( GDALRasterBandShadow *srcBand,
                       GDALRasterBandShadow *proximityBand,
                       char **options = NULL,
                       GDALProgressFunc callback=NULL,
                       void* callback_data=NULL) {

    CPLErrorReset();

    return GDALComputeProximity( srcBand, proximityBand, options,
                                 callback, callback_data );
}


int  RasterizeLayer( GDALDatasetShadow *dataset,
                 int bands, int *band_list,
                 OGRLayerShadow *layer,
                 void *pfnTransformer = NULL,
                 void *pTransformArg = NULL,
		 int burn_values = 0, double *burn_values_list = NULL,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErr eErr;

    CPLErrorReset();

    if( burn_values == 0 )
    {
        burn_values_list = (double *) CPLMalloc(sizeof(double)*bands);
        for( int i = 0; i < bands; i++ )
            burn_values_list[i] = 255.0;
    }
    else if( burn_values != bands )
    {
        CPLError( CE_Failure, CPLE_AppDefined,
                  "Did not get the expected number of burn values in RasterizeLayer()" );
        return CE_Failure;
    }

    eErr = GDALRasterizeLayers( dataset, bands, band_list,
                                1, &layer,
                                (GDALTransformerFunc) pfnTransformer,
                                pTransformArg,
                                burn_values_list, options,
                                callback, callback_data );

    if( burn_values == 0 )
        CPLFree( burn_values_list );

    return eErr;
}


int  Polygonize( GDALRasterBandShadow *srcBand,
     		 GDALRasterBandShadow *maskBand,
  	         OGRLayerShadow *outLayer,
                 int iPixValField,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALPolygonize( srcBand, maskBand, outLayer, iPixValField,
                           options, callback, callback_data );
}


int  FPolygonize( GDALRasterBandShadow *srcBand,
                 GDALRasterBandShadow *maskBand,
                 OGRLayerShadow *outLayer,
                 int iPixValField,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALFPolygonize( srcBand, maskBand, outLayer, iPixValField,
                           options, callback, callback_data );
}


int  FillNodata( GDALRasterBandShadow *targetBand,
     		 GDALRasterBandShadow *maskBand,
                 double maxSearchDist,
                 int smoothingIterations,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALFillNodata( targetBand, maskBand, maxSearchDist,
    	   		   0, smoothingIterations, options,
			   callback, callback_data );
}


int  SieveFilter( GDALRasterBandShadow *srcBand,
     		  GDALRasterBandShadow *maskBand,
  	          GDALRasterBandShadow *dstBand,
                  int threshold, int connectedness=4,
                  char **options = NULL,
                  GDALProgressFunc callback=NULL,
                  void* callback_data=NULL) {

    CPLErrorReset();

    return GDALSieveFilter( srcBand, maskBand, dstBand,
                            threshold, connectedness,
                            options, callback, callback_data );
}


int  RegenerateOverviews( GDALRasterBandShadow *srcBand,
     			  int overviewBandCount,
                          GDALRasterBandShadow **overviewBands,
                          const char *resampling = "average",
                          GDALProgressFunc callback=NULL,
                          void* callback_data=NULL) {

    CPLErrorReset();

    return GDALRegenerateOverviews( srcBand, overviewBandCount, overviewBands,
    	   			    resampling ? resampling : "average", callback, callback_data );
}


int  RegenerateOverview( GDALRasterBandShadow *srcBand,
                          GDALRasterBandShadow *overviewBand,
                          const char *resampling = "average",
                          GDALProgressFunc callback=NULL,
                          void* callback_data=NULL) {

    CPLErrorReset();

    return GDALRegenerateOverviews( srcBand, 1, &overviewBand,
    	   			    resampling ? resampling : "average", callback, callback_data );
}


int ContourGenerate( GDALRasterBandShadow *srcBand,
                     double contourInterval,
                     double contourBase,
                     int fixedLevelCount,
                     double *fixedLevels,
                     int useNoData,
                     double noDataValue,
                     OGRLayerShadow* dstLayer,
                     int idField,
                     int elevField,
                     GDALProgressFunc callback = NULL,
                     void* callback_data = NULL)
{
    CPLErr eErr;

    CPLErrorReset();

    eErr =  GDALContourGenerate( srcBand,
                                 contourInterval,
                                 contourBase,
                                 fixedLevelCount,
                                 fixedLevels,
                                 useNoData,
                                 noDataValue,
                                 dstLayer,
                                 idField,
                                 elevField,
                                 callback,
                                 callback_data);

    return eErr;
}


int ContourGenerateEx( GDALRasterBandShadow *srcBand,
                       OGRLayerShadow* dstLayer,
                       char** options = NULL,
                       GDALProgressFunc callback = NULL,
                       void* callback_data = NULL )
{
    CPLErr eErr;

    CPLErrorReset();

    eErr =  GDALContourGenerateEx( srcBand,
                                   dstLayer,
                                   options,
                                   callback,
                                   callback_data);

    return eErr;
}


GDALDatasetShadow *ViewshedGenerate( GDALRasterBandShadow *srcBand,
                        const char* driverName,
                        const char* targetRasterName,
                        char** creationOptions,
                        double observerX, double observerY, double observerHeight,
                        double targetHeight, double visibleVal, double invisibleVal,
                        double outOfRangeVal,  double noDataVal, double dfCurvCoeff,
                        GDALViewshedMode mode, double maxDistance,
                        GDALProgressFunc callback = NULL, void* callback_data = NULL,
                        GDALViewshedOutputType heightMode = GVOT_NORMAL,
                        char** papszOptions = NULL)
{
    GDALDatasetShadow* ds = GDALViewshedGenerate( srcBand,
                                 driverName,
                                 targetRasterName,
                                 creationOptions,
                                 observerX,
                                 observerY,
                                 observerHeight,
                                 targetHeight,
                                 visibleVal,
                                 invisibleVal,
                                 outOfRangeVal,
                                 noDataVal,
                                 dfCurvCoeff,
                                 mode,
                                 maxDistance,
                                 callback,
                                 callback_data,
                                 heightMode,
                                 papszOptions);
  if (ds == 0) {
    /*throw CPLGetLastErrorMsg(); causes a SWIG_exception later*/
  }
  return ds;
}


GDALDatasetShadow *AutoCreateWarpedVRT( GDALDatasetShadow *src_ds,
                                        const char *src_wkt = 0,
                                        const char *dst_wkt = 0,
                                        GDALResampleAlg eResampleAlg = GRA_NearestNeighbour,
                                        double maxerror = 0.0 ) {
  GDALDatasetShadow *ds = GDALAutoCreateWarpedVRT( src_ds, src_wkt,
                                                   dst_wkt,
                                                   eResampleAlg,
                                                   maxerror,
                                                   0 );
  if (ds == 0) {
    /*throw CPLGetLastErrorMsg(); causes a SWIG_exception later*/
  }
  return ds;

}


GDALDatasetShadow*  CreatePansharpenedVRT( const char* pszXML,
                            GDALRasterBandShadow* panchroBand,
                            int nInputSpectralBands,
                            GDALRasterBandShadow** ahInputSpectralBands )
{
    CPLErrorReset();

    return (GDALDatasetShadow*)GDALCreatePansharpenedVRT( pszXML, panchroBand,
                                      nInputSpectralBands, ahInputSpectralBands );
}

SWIGINTERN GDALTransformerInfoShadow *new_GDALTransformerInfoShadow(GDALDatasetShadow *src,GDALDatasetShadow *dst,char **options){
    GDALTransformerInfoShadow *obj = (GDALTransformerInfoShadow*)
       GDALCreateGenImgProjTransformer2( (GDALDatasetH)src, (GDALDatasetH)dst,
                                         options );
    return obj;
  }
SWIGINTERN void delete_GDALTransformerInfoShadow(GDALTransformerInfoShadow *self){
    GDALDestroyTransformer( self );
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoint__SWIG_0(GDALTransformerInfoShadow *self,int bDstToSrc,double inout[3]){
    int nRet, nSuccess = TRUE;

    nRet = GDALUseTransformer( self, bDstToSrc,
                               1, &inout[0], &inout[1], &inout[2],
                               &nSuccess );

    return nRet && nSuccess;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoint__SWIG_1(GDALTransformerInfoShadow *self,double argout[3],int bDstToSrc,double x,double y,double z=0.0){
    int nRet, nSuccess = TRUE;

    argout[0] = x;
    argout[1] = y;
    argout[2] = z;
    nRet = GDALUseTransformer( self, bDstToSrc,
                               1, &argout[0], &argout[1], &argout[2],
                               &nSuccess );

    return nRet && nSuccess;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoints(GDALTransformerInfoShadow *self,int bDstToSrc,int nCount,double *x,double *y,double *z,int *panSuccess){
    int nRet;

    nRet = GDALUseTransformer( self, bDstToSrc, nCount, x, y, z, panSuccess );

    return nRet;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformGeolocations(GDALTransformerInfoShadow *self,GDALRasterBandShadow *xBand,GDALRasterBandShadow *yBand,GDALRasterBandShadow *zBand,GDALProgressFunc callback=NULL,void *callback_data=NULL,char **options=NULL){

    CPLErrorReset();

    return GDALTransformGeolocations( xBand, yBand, zBand,
                                      GDALUseTransformer, self,
                            	      callback, callback_data, options );
  }

GDALDatasetShadow* ApplyVerticalShiftGrid( GDALDatasetShadow *src_ds,
                                           GDALDatasetShadow *grid_ds,
                                           bool inverse = false,
                                           double srcUnitToMeter = 1.0,
                                           double dstUnitToMeter = 1.0,
                                           char** options = NULL ) {
  GDALDatasetShadow *ds = GDALApplyVerticalShiftGrid( src_ds, grid_ds,
                                                      inverse,
                                                      srcUnitToMeter,
                                                      dstUnitToMeter,
                                                      options );
  return ds;

}


GIntBig wrapper_GDALGetCacheMax()
{
    return GDALGetCacheMax64();
}


GIntBig wrapper_GDALGetCacheUsed()
{
    return GDALGetCacheUsed64();
}


void wrapper_GDALSetCacheMax(GIntBig nBytes)
{
    return GDALSetCacheMax64(nBytes);
}


/************************************************************************/
/*                          XMLTreeToAV()                               */
/************************************************************************/
    static AV *XMLTreeToAV( CPLXMLNode *psTree )
    {
        AV *av;
        int      nChildCount = 0, iChild;
        CPLXMLNode *psChild;

        for( psChild = psTree->psChild;
             psChild != NULL;
             psChild = psChild->psNext )
            nChildCount++;

        av = (AV*)sv_2mortal((SV*)newAV());

        av_store(av,0,newSViv((int) psTree->eType));
        SV *sv = newSVpv(psTree->pszValue, strlen(psTree->pszValue));
        SvUTF8_on(sv); /* expecting UTF-8 from GDAL */
        av_store(av,1,sv);

        for( psChild = psTree->psChild, iChild = 2;
             psChild != NULL;
             psChild = psChild->psNext, iChild++ )
        {
            SV *s = newRV((SV*)XMLTreeToAV(psChild));
            if (!av_store(av, iChild, s))
                SvREFCNT_dec(s);
        }

        return av;
    }
    

/************************************************************************/
/*                          AVToXMLTree()                               */
/************************************************************************/
    static CPLXMLNode *AVToXMLTree( AV *av, int *err )
    {
        int      nChildCount = 0, iChild, nType;
        CPLXMLNode *psThisNode;
        char       *pszText = NULL;

        nChildCount = av_len(av) - 1; /* There are two non-children in the array */
        if (nChildCount < 0) {
            /* the input XML is empty */
            *err = 1;
            return NULL;
        }

        nType = SvIV(*(av_fetch(av,0,0)));
        SV *sv = *(av_fetch(av,1,0));
        bool sf;
        char *tmp = sv_to_utf8_string(sv, NULL, &sf);
        psThisNode = CPLCreateXMLNode(NULL, (CPLXMLNodeType)nType, tmp);
        if (sf) Safefree(tmp); else free(tmp);

        for( iChild = 0; iChild < nChildCount; iChild++ )
        {
            SV **s = av_fetch(av, iChild+2, 0);
            CPLXMLNode *psChild;
            if (!(SvROK(*s) && (SvTYPE(SvRV(*s))==SVt_PVAV))) {
                /* expected a reference to an array */
                *err = 2;
                psChild = NULL;
            } else
                psChild = AVToXMLTree((AV*)SvRV(*s), err);
            if (psChild)
                CPLAddXMLChild( psThisNode, psChild );
            else {
                CPLDestroyXMLNode(psThisNode);
                return NULL;
            }
        }

        return psThisNode;
    }
    

retStringAndCPLFree *GetJPEG2000StructureAsString( const char* pszFilename, char** options = NULL )
{
    CPLXMLNode* psNode = GDALGetJPEG2000Structure(pszFilename, options);
    if( psNode == NULL )
        return NULL;
    char* pszXML = CPLSerializeXMLTree(psNode);
    CPLDestroyXMLNode(psNode);
    return pszXML;
}


int GetDriverCount() {
  return GDALGetDriverCount();
}


static
GDALDriverShadow* GetDriverByName( char const *name ) {
  return (GDALDriverShadow*) GDALGetDriverByName( name );
}


GDALDriverShadow* GetDriver( char const *name ) {
  return (GDALDriverShadow*) GDALGetDriverByName( name );
}


GDALDriverShadow* GetDriver( int i ) {
  return (GDALDriverShadow*) GDALGetDriver( i );
}


GDALDatasetShadow* Open( char const* utf8_path, GDALAccess eAccess = GA_ReadOnly ) {
  CPLErrorReset();
  GDALDatasetShadow *ds = GDALOpen( utf8_path, eAccess );
#ifndef SWIGPYTHON
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
#endif
  return (GDALDatasetShadow*) ds;
}


GDALDatasetShadow* OpenEx( char const* utf8_path, unsigned int nOpenFlags = 0,
                           char** allowed_drivers = NULL, char** open_options = NULL,
                           char** sibling_files = NULL ) {
  CPLErrorReset();
#ifdef SWIGPYTHON
  if( GetUseExceptions() )
      nOpenFlags |= GDAL_OF_VERBOSE_ERROR;
#endif
  GDALDatasetShadow *ds = GDALOpenEx( utf8_path, nOpenFlags, allowed_drivers,
                                      open_options, sibling_files );
#ifndef SWIGPYTHON
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
#endif
  return (GDALDatasetShadow*) ds;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


GDALDatasetShadow* OpenShared( char const* utf8_path, GDALAccess eAccess = GA_ReadOnly ) {
  CPLErrorReset();
  GDALDatasetShadow *ds = GDALOpenShared( utf8_path, eAccess );
#ifndef SWIGPYTHON
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
#endif
  return (GDALDatasetShadow*) ds;
}


GDALDriverShadow *IdentifyDriver( const char *utf8_path,
                                  char **papszSiblings = NULL ) {
    return (GDALDriverShadow *) GDALIdentifyDriver( utf8_path,
	                                            papszSiblings );
}


GDALDriverShadow *IdentifyDriverEx( const char* utf8_path,
                                    unsigned int nIdentifyFlags = 0,
                                    char** allowed_drivers = NULL,
                                    char** sibling_files = NULL )
{
    return  (GDALDriverShadow *) GDALIdentifyDriverEx( utf8_path,
                                                nIdentifyFlags,
                                                allowed_drivers,
                                                sibling_files );
}


  char **GeneralCmdLineProcessor( char **papszArgv, int nOptions = 0 ) {
    int nResArgCount;

    if( papszArgv == NULL )
        return NULL;

    bool bReloadDrivers = ( CSLFindString(papszArgv, "GDAL_SKIP") >= 0 ||
                            CSLFindString(papszArgv, "OGR_SKIP") >= 0 );

    nResArgCount =
      GDALGeneralCmdLineProcessor( CSLCount(papszArgv), &papszArgv, nOptions );

    if( bReloadDrivers )
    {
        GDALAllRegister();
    }

    if( nResArgCount <= 0 )
        return NULL;
    else
        return papszArgv;
  }


#include "gdal_utils.h"

SWIGINTERN GDALInfoOptions *new_GDALInfoOptions(char **options){
        return GDALInfoOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALInfoOptions(GDALInfoOptions *self){
        GDALInfoOptionsFree( self );
    }
SWIGINTERN GDALMultiDimInfoOptions *new_GDALMultiDimInfoOptions(char **options){
        return GDALMultiDimInfoOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALMultiDimInfoOptions(GDALMultiDimInfoOptions *self){
        GDALMultiDimInfoOptionsFree( self );
    }
SWIGINTERN GDALTranslateOptions *new_GDALTranslateOptions(char **options){
        return GDALTranslateOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALTranslateOptions(GDALTranslateOptions *self){
        GDALTranslateOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALTranslate( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      GDALTranslateOptions* translateOptions,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( translateOptions == NULL )
        {
            bFreeOptions = true;
            translateOptions = GDALTranslateOptionsNew(NULL, NULL);
        }
        GDALTranslateOptionsSetProgress(translateOptions, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALTranslate(dest, dataset, translateOptions, &usageError);
    if( bFreeOptions )
        GDALTranslateOptionsFree(translateOptions);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

SWIGINTERN GDALWarpAppOptions *new_GDALWarpAppOptions(char **options){
        return GDALWarpAppOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALWarpAppOptions(GDALWarpAppOptions *self){
        GDALWarpAppOptionsFree( self );
    }


int wrapper_GDALWarpDestDS( GDALDatasetShadow* dstDS,
                            int object_list_count, GDALDatasetShadow** poObjects,
                            GDALWarpAppOptions* warpAppOptions,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( warpAppOptions == NULL )
        {
            bFreeOptions = true;
            warpAppOptions = GDALWarpAppOptionsNew(NULL, NULL);
        }
        GDALWarpAppOptionsSetProgress(warpAppOptions, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    bool bRet = (GDALWarp(NULL, dstDS, object_list_count, poObjects, warpAppOptions, &usageError) != NULL);
    if( bFreeOptions )
        GDALWarpAppOptionsFree(warpAppOptions);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, bRet);
    }
#endif
    return bRet;
}


GDALDatasetShadow* wrapper_GDALWarpDestName( const char* dest,
                                             int object_list_count, GDALDatasetShadow** poObjects,
                                             GDALWarpAppOptions* warpAppOptions,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( warpAppOptions == NULL )
        {
            bFreeOptions = true;
            warpAppOptions = GDALWarpAppOptionsNew(NULL, NULL);
        }
        GDALWarpAppOptionsSetProgress(warpAppOptions, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALWarp(dest, NULL, object_list_count, poObjects, warpAppOptions, &usageError);
    if( bFreeOptions )
        GDALWarpAppOptionsFree(warpAppOptions);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

SWIGINTERN GDALVectorTranslateOptions *new_GDALVectorTranslateOptions(char **options){
        return GDALVectorTranslateOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALVectorTranslateOptions(GDALVectorTranslateOptions *self){
        GDALVectorTranslateOptionsFree( self );
    }

int wrapper_GDALVectorTranslateDestDS( GDALDatasetShadow* dstDS,
                                       GDALDatasetShadow* srcDS,
                            GDALVectorTranslateOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALVectorTranslateOptionsNew(NULL, NULL);
        }
        GDALVectorTranslateOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    bool bRet = (GDALVectorTranslate(NULL, dstDS, 1, &srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALVectorTranslateOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, bRet);
    }
#endif
    return bRet;
}


GDALDatasetShadow* wrapper_GDALVectorTranslateDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALVectorTranslateOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALVectorTranslateOptionsNew(NULL, NULL);
        }
        GDALVectorTranslateOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALVectorTranslate(dest, NULL, 1, &srcDS, options, &usageError);
    if( bFreeOptions )
        GDALVectorTranslateOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

SWIGINTERN GDALDEMProcessingOptions *new_GDALDEMProcessingOptions(char **options){
        return GDALDEMProcessingOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALDEMProcessingOptions(GDALDEMProcessingOptions *self){
        GDALDEMProcessingOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALDEMProcessing( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      const char* pszProcessing,
                                      const char* pszColorFilename,
                                      GDALDEMProcessingOptions* options,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALDEMProcessingOptionsNew(NULL, NULL);
        }
        GDALDEMProcessingOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALDEMProcessing(dest, dataset, pszProcessing, pszColorFilename, options, &usageError);
    if( bFreeOptions )
        GDALDEMProcessingOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

SWIGINTERN GDALNearblackOptions *new_GDALNearblackOptions(char **options){
        return GDALNearblackOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALNearblackOptions(GDALNearblackOptions *self){
        GDALNearblackOptionsFree( self );
    }

int wrapper_GDALNearblackDestDS( GDALDatasetShadow* dstDS,
                            GDALDatasetShadow* srcDS,
                            GDALNearblackOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALNearblackOptionsNew(NULL, NULL);
        }
        GDALNearblackOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    bool bRet = (GDALNearblack(NULL, dstDS, srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALNearblackOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, bRet);
    }
#endif
    return bRet;
}


GDALDatasetShadow* wrapper_GDALNearblackDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALNearblackOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALNearblackOptionsNew(NULL, NULL);
        }
        GDALNearblackOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALNearblack(dest, NULL, srcDS, options, &usageError);
    if( bFreeOptions )
        GDALNearblackOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

SWIGINTERN GDALGridOptions *new_GDALGridOptions(char **options){
        return GDALGridOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALGridOptions(GDALGridOptions *self){
        GDALGridOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALGrid( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      GDALGridOptions* options,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALGridOptionsNew(NULL, NULL);
        }
        GDALGridOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALGrid(dest, dataset, options, &usageError);
    if( bFreeOptions )
        GDALGridOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

SWIGINTERN GDALRasterizeOptions *new_GDALRasterizeOptions(char **options){
        return GDALRasterizeOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALRasterizeOptions(GDALRasterizeOptions *self){
        GDALRasterizeOptionsFree( self );
    }

int wrapper_GDALRasterizeDestDS( GDALDatasetShadow* dstDS,
                            GDALDatasetShadow* srcDS,
                            GDALRasterizeOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALRasterizeOptionsNew(NULL, NULL);
        }
        GDALRasterizeOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    bool bRet = (GDALRasterize(NULL, dstDS, srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALRasterizeOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, bRet);
    }
#endif
    return bRet;
}


GDALDatasetShadow* wrapper_GDALRasterizeDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALRasterizeOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALRasterizeOptionsNew(NULL, NULL);
        }
        GDALRasterizeOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALRasterize(dest, NULL, srcDS, options, &usageError);
    if( bFreeOptions )
        GDALRasterizeOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

SWIGINTERN GDALBuildVRTOptions *new_GDALBuildVRTOptions(char **options){
        return GDALBuildVRTOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALBuildVRTOptions(GDALBuildVRTOptions *self){
        GDALBuildVRTOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALBuildVRT_objects( const char* dest,
                                             int object_list_count, GDALDatasetShadow** poObjects,
                                             GDALBuildVRTOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALBuildVRTOptionsNew(NULL, NULL);
        }
        GDALBuildVRTOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALBuildVRT(dest, object_list_count, poObjects, NULL, options, &usageError);
    if( bFreeOptions )
        GDALBuildVRTOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}


GDALDatasetShadow* wrapper_GDALBuildVRT_names( const char* dest,
                                         char ** source_filenames,
                                         GDALBuildVRTOptions* options,
                                         GDALProgressFunc callback=NULL,
                                         void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALBuildVRTOptionsNew(NULL, NULL);
        }
        GDALBuildVRTOptionsSetProgress(options, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALBuildVRT(dest, CSLCount(source_filenames), NULL, source_filenames, options, &usageError);
    if( bFreeOptions )
        GDALBuildVRTOptionsFree(options);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

SWIGINTERN GDALMultiDimTranslateOptions *new_GDALMultiDimTranslateOptions(char **options){
        return GDALMultiDimTranslateOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALMultiDimTranslateOptions(GDALMultiDimTranslateOptions *self){
        GDALMultiDimTranslateOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALMultiDimTranslateDestName( const char* dest,
                                             int object_list_count, GDALDatasetShadow** poObjects,
                                             GDALMultiDimTranslateOptions* multiDimTranslateOptions,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( multiDimTranslateOptions == NULL )
        {
            bFreeOptions = true;
            multiDimTranslateOptions = GDALMultiDimTranslateOptionsNew(NULL, NULL);
        }
        GDALMultiDimTranslateOptionsSetProgress(multiDimTranslateOptions, callback, callback_data);
    }
#ifdef SWIGPYTHON
    std::vector<ErrorStruct> aoErrors;
    if( bUseExceptions )
    {
        PushStackingErrorHandler(&aoErrors);
    }
#endif
    GDALDatasetH hDSRet = GDALMultiDimTranslate(dest, NULL, object_list_count, poObjects, multiDimTranslateOptions, &usageError);
    if( bFreeOptions )
        GDALMultiDimTranslateOptionsFree(multiDimTranslateOptions);
#ifdef SWIGPYTHON
    if( bUseExceptions )
    {
        PopStackingErrorHandler(&aoErrors, hDSRet != NULL);
    }
#endif
    return hDSRet;
}

#ifdef __cplusplus
extern "C" {
#endif

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_Geo__GDAL_var::
class _wrap_Geo__GDAL_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *SWIGUNUSEDPARM(sv), MAGIC *SWIGUNUSEDPARM(mg)) {
    MAGIC_PPERL
    croak("Value is read-only.");
    return 0;
}


#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_UseExceptions) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: UseExceptions();");
    }
    UseExceptions();
    ST(argvi) = sv_newmortal();
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_DontUseExceptions) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: DontUseExceptions();");
    }
    DontUseExceptions();
    ST(argvi) = sv_newmortal();
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_Debug) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Debug(msg_class,message);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Debug" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Debug" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      Debug((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_SetErrorHandler) {
  {
    CPLErrorHandler arg1 = (CPLErrorHandler) NULL ;
    void *arg2 = (void *) NULL ;
    void *argp1 ;
    int res1 = 0 ;
    int res2 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: SetErrorHandler(pfnErrorHandler,user_data);");
    }
    if (items > 0) {
      {
        res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_CPLErrorHandler,  0 );
        if (!SWIG_IsOK(res1)) {
          SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetErrorHandler" "', argument " "1"" of type '" "CPLErrorHandler""'"); 
        }  
        if (!argp1) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetErrorHandler" "', argument " "1"" of type '" "CPLErrorHandler""'");
        } else {
          arg1 = *(reinterpret_cast< CPLErrorHandler * >(argp1));
        }
      }
    }
    if (items > 1) {
      res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2), 0, 0);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetErrorHandler" "', argument " "2"" of type '" "void *""'"); 
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)SetErrorHandler(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SetCurrentErrorHandlerCatchDebug) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SetCurrentErrorHandlerCatchDebug(bCatchDebug);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCurrentErrorHandlerCatchDebug" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      CPLErrorReset();
      CPLSetCurrentErrorHandlerCatchDebug(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PushErrorHandler__SWIG_0) {
  {
    char *arg1 = (char *) NULL ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: PushErrorHandler(pszCallbackName);");
    }
    if (items > 0) {
      res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PushErrorHandler" "', argument " "1"" of type '" "char const *""'");
      }
      arg1 = reinterpret_cast< char * >(buf1);
    }
    {
      CPLErrorReset();
      result = (CPLErr)PushErrorHandler((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_Error) {
  {
    CPLErr arg1 = (CPLErr) CE_Failure ;
    int arg2 = (int) 0 ;
    char *arg3 = (char *) "error" ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 3)) {
      SWIG_croak("Usage: Error(msg_class,err_code,msg);");
    }
    if (items > 0) {
      ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
      if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Error" "', argument " "1"" of type '" "CPLErr""'");
      } 
      arg1 = static_cast< CPLErr >(val1);
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Error" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Error" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    {
      CPLErrorReset();
      Error(arg1,arg2,(char const *)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_GOA2GetAuthorizationURL) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GOA2GetAuthorizationURL(pszScope);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GOA2GetAuthorizationURL" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)GOA2GetAuthorizationURL((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_GOA2GetRefreshToken) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GOA2GetRefreshToken(pszAuthToken,pszScope);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GOA2GetRefreshToken" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GOA2GetRefreshToken" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)GOA2GetRefreshToken((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_GOA2GetAccessToken) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GOA2GetAccessToken(pszRefreshToken,pszScope);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GOA2GetAccessToken" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GOA2GetAccessToken" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)GOA2GetAccessToken((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_PushErrorHandler__SWIG_1) {
  {
    CPLErrorHandler arg1 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PushErrorHandler(CPLErrorHandler);");
    }
    {
      res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_CPLErrorHandler,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PushErrorHandler" "', argument " "1"" of type '" "CPLErrorHandler""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PushErrorHandler" "', argument " "1"" of type '" "CPLErrorHandler""'");
      } else {
        arg1 = *(reinterpret_cast< CPLErrorHandler * >(argp1));
      }
    }
    {
      CPLErrorReset();
      CPLPushErrorHandler(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_PushErrorHandler) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 0) && (items <= 1)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (items > 0) {
        {
          int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_CPLErrorHandler, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PushErrorHandler__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_PushErrorHandler__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'PushErrorHandler'");
  XSRETURN(0);
}


XS(_wrap_PopErrorHandler) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: PopErrorHandler();");
    }
    {
      CPLErrorReset();
      CPLPopErrorHandler();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_ErrorReset) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: ErrorReset();");
    }
    {
      CPLErrorReset();
      CPLErrorReset();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_EscapeString) {
  {
    int arg1 ;
    char *arg2 = (char *) 0 ;
    int arg3 = (int) CPLES_SQL ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: EscapeString(len,bin_string,scheme);");
    }
    {
      /* %typemap(in,numinputs=1) (int nLen, char *pBuf ) */
      if (SvOK(ST(0))) {
        SV *sv = ST(0);
        if (SvROK(sv) && SvTYPE(SvRV(sv)) < SVt_PVAV)
        sv = SvRV(sv);
        if (!SvPOK(sv))
        do_confess(NEED_BINARY_DATA, 1);
        STRLEN len = SvCUR(sv);
        arg2 = SvPV_nolen(sv);
        arg1 = len;
      } else {
        arg2 = NULL;
        arg1 = 0;
      }
    }
    if (items > 1) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EscapeString" "', argument " "3"" of type '" "int""'");
      } 
      arg3 = static_cast< int >(val3);
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)EscapeString(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GetLastErrorNo) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GetLastErrorNo();");
    }
    {
      CPLErrorReset();
      result = (int)CPLGetLastErrorNo();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_GetLastErrorType) {
  {
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GetLastErrorType();");
    }
    {
      CPLErrorReset();
      result = (CPLErr)CPLGetLastErrorType();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_GetLastErrorMsg) {
  {
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GetLastErrorMsg();");
    }
    {
      CPLErrorReset();
      result = (char *)CPLGetLastErrorMsg();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_GetErrorCounter) {
  {
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GetErrorCounter();");
    }
    {
      CPLErrorReset();
      result = (unsigned int)CPLGetErrorCounter();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_VSIGetLastErrorNo) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: VSIGetLastErrorNo();");
    }
    {
      CPLErrorReset();
      result = (int)VSIGetLastErrorNo();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_VSIGetLastErrorMsg) {
  {
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: VSIGetLastErrorMsg();");
    }
    {
      CPLErrorReset();
      result = (char *)VSIGetLastErrorMsg();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_VSIErrorReset) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: VSIErrorReset();");
    }
    {
      CPLErrorReset();
      VSIErrorReset();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_PushFinderLocation) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: PushFinderLocation(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      CPLPushFinderLocation((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_PopFinderLocation) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: PopFinderLocation();");
    }
    {
      CPLErrorReset();
      CPLPopFinderLocation();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_FinderClean) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: FinderClean();");
    }
    {
      CPLErrorReset();
      CPLFinderClean();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_FindFile) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    U8 *tmpbuf2 = NULL ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg2 = (char *)"";
    }
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: FindFile(pszClass,utf8_path);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindFile" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    if (items > 1) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf2) */
        arg2 = sv_to_utf8_string(ST(1), &tmpbuf2);
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char *)CPLFindFile((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_ReadDir) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 = (int) 0 ;
    U8 *tmpbuf1 = NULL ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: ReadDir(utf8_path,nMaxFiles);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReadDir" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char **)wrapper_VSIReadDirEx((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_ReadDirRecursive) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: ReadDirRecursive(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char **)VSIReadDirRecursive((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_SetConfigOption) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SetConfigOption(pszKey,pszValue);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetConfigOption" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetConfigOption" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      CPLSetConfigOption((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_SetThreadLocalConfigOption) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SetThreadLocalConfigOption(pszKey,pszValue);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetThreadLocalConfigOption" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetThreadLocalConfigOption" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      CPLSetThreadLocalConfigOption((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_GetConfigOption) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) NULL ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: GetConfigOption(pszKey,pszDefault);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetConfigOption" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetConfigOption" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char *)wrapper_CPLGetConfigOption((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_GetThreadLocalConfigOption) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) NULL ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: GetThreadLocalConfigOption(pszKey,pszDefault);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetThreadLocalConfigOption" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetThreadLocalConfigOption" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char *)wrapper_CPLGetThreadLocalConfigOption((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_CPLBinaryToHex) {
  {
    int arg1 ;
    GByte *arg2 = (GByte *) 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: CPLBinaryToHex(nBytes,pabyData);");
    }
    {
      /* %typemap(in,numinputs=1) (int nLen, unsigned char *pBuf ) */
      if (SvOK(ST(0))) {
        SV *sv = ST(0);
        if (SvROK(sv) && SvTYPE(SvRV(sv)) < SVt_PVAV)
        sv = SvRV(sv);
        if (!SvPOK(sv))
        do_confess(NEED_BINARY_DATA, 1);
        STRLEN len = SvCUR(sv);
        arg2 = (unsigned char *)SvPV_nolen(sv);
        arg1 = len;
      } else {
        arg2 = NULL;
        arg1 = 0;
      }
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)CPLBinaryToHex(arg1,(GByte const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_CPLHexToBinary) {
  {
    char *arg1 = (char *) 0 ;
    int *arg2 = (int *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int bytes2 ;
    int argvi = 0;
    GByte *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (int *pnBytes) (int bytes2) */
      arg2 = &bytes2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: CPLHexToBinary(pszHex);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CPLHexToBinary" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      CPLErrorReset();
      result = (GByte *)CPLHexToBinary((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) GByte * */
      ST(argvi) = sv_newmortal();
      sv_setpvn(ST(argvi), (const char*)result, *arg2);
      CPLFree(result);
      argvi++;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_FileFromMemBuffer) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    GByte *arg3 = (GByte *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 3)) {
      SWIG_croak("Usage: FileFromMemBuffer(utf8_path,nBytes,pabyData);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileFromMemBuffer" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GByte, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FileFromMemBuffer" "', argument " "3"" of type '" "GByte const *""'"); 
      }
      arg3 = reinterpret_cast< GByte * >(argp3);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      wrapper_VSIFileFromMemBuffer((char const *)arg1,arg2,(GByte const *)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Unlink) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: Unlink(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIUnlink((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_UnlinkBatch) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: UnlinkBatch(files);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (bool)wrapper_VSIUnlinkBatch(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_HasThreadSupport) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: HasThreadSupport();");
    }
    {
      CPLErrorReset();
      result = (int)wrapper_HasThreadSupport();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_Mkdir) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    U8 *tmpbuf1 = NULL ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: Mkdir(utf8_path,mode);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mkdir" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIMkdir((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_Rmdir) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: Rmdir(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIRmdir((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_MkdirRecursive) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    U8 *tmpbuf1 = NULL ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: MkdirRecursive(utf8_path,mode);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MkdirRecursive" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIMkdirRecursive((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_RmdirRecursive) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: RmdirRecursive(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIRmdirRecursive((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Rename) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    U8 *tmpbuf2 = NULL ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    {
      /* %typemap(default) const char * utf8_path */
      arg2 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: Rename(pszOld,pszNew);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf2) */
        arg2 = sv_to_utf8_string(ST(1), &tmpbuf2);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIRename((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_GetActualURL) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: GetActualURL(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char *)VSIGetActualURL((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_GetSignedURL) {
  {
    char *arg1 = (char *) 0 ;
    char **arg2 = (char **) NULL ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: GetSignedURL(utf8_path,options);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)wrapper_VSIGetSignedURL((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_GetFileSystemsPrefixes) {
  {
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GetFileSystemsPrefixes();");
    }
    {
      CPLErrorReset();
      result = (char **)VSIGetFileSystemsPrefixes();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_GetFileSystemOptions) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: GetFileSystemOptions(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char *)VSIGetFileSystemOptions((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Stat) {
  {
    char *arg1 = (char *) 0 ;
    VSIStatBufL *arg2 = (VSIStatBufL *) 0 ;
    U8 *tmpbuf1 = NULL ;
    VSIStatBufL sStatBuf2 ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    {
      /* %typemap(in,numinputs=0) (VSIStatBufL *) (VSIStatBufL sStatBuf2) */
      arg2 = &sStatBuf2;
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: Stat(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIStatL((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    {
      /* %typemap(argout) (VSIStatBufL *) */
      char mode[2];
      mode[0] = ' ';
      mode[1] = '\0';
      if (S_ISREG(sStatBuf2.st_mode)) mode[0] = 'f';
      else if (S_ISDIR(sStatBuf2.st_mode)) mode[0] = 'd';
      else if (S_ISLNK(sStatBuf2.st_mode)) mode[0] = 'l';
      else if (S_ISFIFO(sStatBuf2.st_mode)) mode[0] = 'p';
      else if (S_ISSOCK(sStatBuf2.st_mode)) mode[0] = 'S';
      else if (S_ISBLK(sStatBuf2.st_mode)) mode[0] = 'b';
      else if (S_ISCHR(sStatBuf2.st_mode)) mode[0] = 'c';
      EXTEND(SP, argvi+2-items+1);
      ST(argvi++) = sv_2mortal(newSVpv(mode, 0));
      ST(argvi++) = sv_2mortal(newSVuv(sStatBuf2.st_size));
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_GetFileMetadata) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) NULL ;
    U8 *tmpbuf1 = NULL ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 3)) {
      SWIG_croak("Usage: GetFileMetadata(utf8_path,domain,options);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetFileMetadata" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char **)VSIGetFileMetadata((char const *)arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **dict */
      char **stringarray = result;
      HV *hv = (HV*)sv_2mortal((SV*)newHV());
      if ( stringarray != NULL ) {
        while (*stringarray != NULL ) {
          char const *valptr;
          char *keyptr;
          valptr = CPLParseNameValue( *stringarray, &keyptr );
          if ( valptr != 0 ) {
            hv_store(hv, keyptr, strlen(keyptr), newSVpv(valptr, strlen(valptr)), 0);
            CPLFree( keyptr );
          }
          stringarray++;
        }
      }
      ST(argvi) = newRV((SV*)hv);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_SetFileMetadata) {
  {
    char *arg1 = (char *) 0 ;
    char **arg2 = (char **) 0 ;
    char *arg3 = (char *) 0 ;
    char **arg4 = (char **) NULL ;
    U8 *tmpbuf1 = NULL ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 4)) {
      SWIG_croak("Usage: SetFileMetadata(utf8_path,metadata,domain,options);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) char **dict */
        HV *hv = (HV*)SvRV(ST(1));
        SV *sv;
        char *key;
        I32 klen;
        arg2 = NULL;
        hv_iterinit(hv);
        while(sv = hv_iternextsv(hv,&key,&klen)) {
          arg2 = CSLAddNameValue( arg2, key, SvPV_nolen(sv) );
        }
      }
    }
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SetFileMetadata" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    if (items > 3) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(3)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddString(arg4, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(3)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(3));
              SV *sv;
              char *key;
              I32 klen;
              arg4 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddNameValue(arg4, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (bool)VSISetFileMetadata((char const *)arg1,arg2,(char const *)arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) char **dict */
      CSLDestroy( arg2 );
    }
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) char **dict */
      CSLDestroy( arg2 );
    }
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFOpenL) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    VSILFILE *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: VSIFOpenL(utf8_path,pszMode);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VSIFOpenL" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (VSILFILE *)wrapper_VSIFOpenL((char const *)arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VSILFILE, 0 | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFOpenExL) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 = (int) FALSE ;
    char **arg4 = (char **) NULL ;
    U8 *tmpbuf1 = NULL ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    VSILFILE *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 4)) {
      SWIG_croak("Usage: VSIFOpenExL(utf8_path,pszMode,bSetError,options);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VSIFOpenExL" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    if (items > 2) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VSIFOpenExL" "', argument " "3"" of type '" "int""'");
      } 
      arg3 = static_cast< int >(val3);
    }
    if (items > 3) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(3)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddString(arg4, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(3)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(3));
              SV *sv;
              char *key;
              I32 klen;
              arg4 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddNameValue(arg4, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (VSILFILE *)wrapper_VSIFOpenExL((char const *)arg1,(char const *)arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VSILFILE, 0 | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFEofL) {
  {
    VSILFILE *arg1 = (VSILFILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VSIFEofL(fp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_VSILFILE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VSIFEofL" "', argument " "1"" of type '" "VSILFILE *""'"); 
    }
    arg1 = reinterpret_cast< VSILFILE * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)VSIFEofL(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFFlushL) {
  {
    VSILFILE *arg1 = (VSILFILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VSIFFlushL(fp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_VSILFILE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VSIFFlushL" "', argument " "1"" of type '" "VSILFILE *""'"); 
    }
    arg1 = reinterpret_cast< VSILFILE * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)VSIFFlushL(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFCloseL) {
  {
    VSILFILE *arg1 = (VSILFILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VSIFCloseL(fp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_VSILFILE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VSIFCloseL" "', argument " "1"" of type '" "VSILFILE *""'"); 
    }
    arg1 = reinterpret_cast< VSILFILE * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIFCloseL(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFSeekL) {
  {
    VSILFILE *arg1 = (VSILFILE *) 0 ;
    long arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: VSIFSeekL(fp,offset,whence);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_VSILFILE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VSIFSeekL" "', argument " "1"" of type '" "VSILFILE *""'"); 
    }
    arg1 = reinterpret_cast< VSILFILE * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VSIFSeekL" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VSIFSeekL" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIFSeekL(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    
    
    
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFTellL) {
  {
    VSILFILE *arg1 = (VSILFILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VSIFTellL(fp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_VSILFILE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VSIFTellL" "', argument " "1"" of type '" "VSILFILE *""'"); 
    }
    arg1 = reinterpret_cast< VSILFILE * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (long)VSIFTellL(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFTruncateL) {
  {
    VSILFILE *arg1 = (VSILFILE *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    VSI_RETVAL result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VSIFTruncateL(fp,length);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_VSILFILE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VSIFTruncateL" "', argument " "1"" of type '" "VSILFILE *""'"); 
    }
    arg1 = reinterpret_cast< VSILFILE * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VSIFTruncateL" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIFTruncateL(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) VSI_RETVAL */
    }
    
    
    {
      /* %typemap(ret) VSI_RETVAL */
      if (result == -1 ) {
        do_confess(strerror(errno), 1);
      }
    }
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFWriteL) {
  {
    void *arg1 = (void *) 0 ;
    size_t arg2 ;
    size_t arg3 ;
    VSILFILE *arg4 = (VSILFILE *) 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VSIFWriteL(pBuffer,nSize,nCount,fp);");
    }
    {
      /* %typemap(in,numinputs=1) (const void *pBuffer, size_t nSize, size_t nCount) */
      size_t len;
      arg1 = SvPV(ST(0), len);
      arg2 = 1;
      arg3 = len;
    }
    res4 = SWIG_ConvertPtr(ST(1), &argp4,SWIGTYPE_p_VSILFILE, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VSIFWriteL" "', argument " "4"" of type '" "VSILFILE *""'"); 
    }
    arg4 = reinterpret_cast< VSILFILE * >(argp4);
    {
      if (!arg4) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = VSIFWriteL((void const *)arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIFReadL) {
  {
    void *arg1 = (void *) 0 ;
    size_t arg2 ;
    size_t arg3 ;
    VSILFILE *arg4 = (VSILFILE *) 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    size_t result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: VSIFReadL(pBuffer,nSize,nCount,fp);");
    }
    {
      /* %typemap(in,numinputs=1) (void *pBuffer, size_t nSize, size_t nCount) */
      size_t len = SvIV(ST(0));
      arg1 = CPLMalloc(len);
      if (!arg1)
      SWIG_fail;
      arg2 = 1;
      arg3 = len;
    }
    res4 = SWIG_ConvertPtr(ST(1), &argp4,SWIGTYPE_p_VSILFILE, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VSIFReadL" "', argument " "4"" of type '" "VSILFILE *""'"); 
    }
    arg4 = reinterpret_cast< VSILFILE * >(argp4);
    {
      if (!arg4) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    _saved[0] = ST(0);
    {
      CPLErrorReset();
      result = VSIFReadL(arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) (size_t VSIFReadL) */
    }
    {
      /* %typemap(argout) (void *pBuffer, size_t nSize, size_t nCount) */
      if (result) {
        ST(argvi) = sv_2mortal(newSVpvn((char*)arg1, result));
      } else {
        ST(argvi) = &PL_sv_undef;
      }
      CPLFree(arg1);
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIStdoutSetRedirection) {
  {
    VSIWriteFunction arg1 ;
    FILE *arg2 = (FILE *) 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: VSIStdoutSetRedirection(pFct,stream);");
    }
    {
      /* %typemap(in) (VSIWriteFunction pFct) */
      if (VSIStdoutSetRedirectionFct != &PL_sv_undef) {
        SvREFCNT_dec(VSIStdoutSetRedirectionFct);
      }
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0))) != SVt_PVCV) {
            do_confess(NEED_CODE_REF, 1);
          } else {
            VSIStdoutSetRedirectionFct = newRV_inc(SvRV((SV *)ST(0)));
            arg1 = &callback_fwrite;
          }
        } else {
          do_confess(NEED_CODE_REF, 1);
        }
      } else
      VSIStdoutSetRedirectionFct = &PL_sv_undef;
    }
    {
      CPLErrorReset();
      VSIStdoutSetRedirection(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_VSIStdoutUnsetRedirection) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: VSIStdoutUnsetRedirection();");
    }
    {
      CPLErrorReset();
      VSIStdoutUnsetRedirection();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_VSICurlClearCache) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: VSICurlClearCache();");
    }
    {
      CPLErrorReset();
      VSICurlClearCache();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_VSICurlPartialClearCache) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: VSICurlPartialClearCache(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      VSICurlPartialClearCache((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_NetworkStatsReset) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: NetworkStatsReset();");
    }
    {
      CPLErrorReset();
      VSINetworkStatsReset();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_NetworkStatsGetAsSerializedJSON) {
  {
    char **arg1 = (char **) NULL ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: NetworkStatsGetAsSerializedJSON(options);");
    }
    if (items > 0) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(0))) {
          if (SvROK(ST(0))) {
            if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(0)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg1 = CSLAddString(arg1, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(0));
              SV *sv;
              char *key;
              I32 klen;
              arg1 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg1 = CSLAddNameValue(arg1, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)VSINetworkStatsGetAsSerializedJSON(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_ParseCommandLine) {
  {
    char *arg1 = (char *) 0 ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: ParseCommandLine(utf8_path);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char **)CSLParseCommandLine((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_MajorObject_GetDescription) {
  {
    GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MajorObject_GetDescription(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_GetDescription" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALMajorObjectShadow_GetDescription(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MajorObject_SetDescription) {
  {
    GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MajorObject_SetDescription(self,pszNewDesc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_SetDescription" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_SetDescription" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      GDALMajorObjectShadow_SetDescription(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_MajorObject_GetMetadataDomainList) {
  {
    GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MajorObject_GetMetadataDomainList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_GetMetadataDomainList" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
    {
      CPLErrorReset();
      result = (char **)GDALMajorObjectShadow_GetMetadataDomainList(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MajorObject_GetMetadata) {
  {
    GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
    char *arg2 = (char *) "" ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: MajorObject_GetMetadata(self,pszDomain);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_GetMetadata" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_GetMetadata" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    {
      CPLErrorReset();
      result = (char **)GDALMajorObjectShadow_GetMetadata_Dict(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **dict */
      char **stringarray = result;
      HV *hv = (HV*)sv_2mortal((SV*)newHV());
      if ( stringarray != NULL ) {
        while (*stringarray != NULL ) {
          char const *valptr;
          char *keyptr;
          valptr = CPLParseNameValue( *stringarray, &keyptr );
          if ( valptr != 0 ) {
            hv_store(hv, keyptr, strlen(keyptr), newSVpv(valptr, strlen(valptr)), 0);
            CPLFree( keyptr );
          }
          stringarray++;
        }
      }
      ST(argvi) = newRV((SV*)hv);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_MajorObject_SetMetadata__SWIG_0) {
  {
    GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
    char **arg2 = (char **) 0 ;
    char *arg3 = (char *) "" ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: MajorObject_SetMetadata(self,papszMetadata,pszDomain);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_SetMetadata" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
    {
      /* %typemap(in) char **dict */
      HV *hv = (HV*)SvRV(ST(1));
      SV *sv;
      char *key;
      I32 klen;
      arg2 = NULL;
      hv_iterinit(hv);
      while(sv = hv_iternextsv(hv,&key,&klen)) {
        arg2 = CSLAddNameValue( arg2, key, SvPV_nolen(sv) );
      }
    }
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MajorObject_SetMetadata" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_0(arg1,arg2,(char const *)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    {
      /* %typemap(freearg) char **dict */
      CSLDestroy( arg2 );
    }
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **dict */
      CSLDestroy( arg2 );
    }
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_MajorObject_SetMetadata__SWIG_1) {
  {
    GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) "" ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: MajorObject_SetMetadata(self,pszMetadataString,pszDomain);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_SetMetadata" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_SetMetadata" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MajorObject_SetMetadata" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_1(arg1,arg2,(char const *)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_MajorObject_SetMetadata) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 2) && (items <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_GDALMajorObjectShadow, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          /* %typecheck(SWIG_TYPECHECK_POINTER) (char **dict) */
          _v = (SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVHV)) ? 1 : 0;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 2) {
        {
          int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((items >= 2) && (items <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_GDALMajorObjectShadow, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 2) {
        {
          int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_MajorObject_SetMetadata__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_MajorObject_SetMetadata__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'MajorObject_SetMetadata'");
  XSRETURN(0);
}


XS(_wrap_MajorObject_GetMetadataItem) {
  {
    GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) "" ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: MajorObject_GetMetadataItem(self,pszName,pszDomain);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_GetMetadataItem" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_GetMetadataItem" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MajorObject_GetMetadataItem" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char *)GDALMajorObjectShadow_GetMetadataItem(arg1,(char const *)arg2,(char const *)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_MajorObject_SetMetadataItem) {
  {
    GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) "" ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 3) || (items > 4)) {
      SWIG_croak("Usage: MajorObject_SetMetadataItem(self,pszName,pszValue,pszDomain);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMajorObjectShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MajorObject_SetMetadataItem" "', argument " "1"" of type '" "GDALMajorObjectShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALMajorObjectShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MajorObject_SetMetadataItem" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MajorObject_SetMetadataItem" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    if (items > 3) {
      res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, NULL, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MajorObject_SetMetadataItem" "', argument " "4"" of type '" "char const *""'");
      }
      arg4 = reinterpret_cast< char * >(buf4);
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALMajorObjectShadow_SetMetadataItem(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_ShortName_get) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Driver_ShortName_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_ShortName_get" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALDriverShadow_ShortName_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_LongName_get) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Driver_LongName_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_LongName_get" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALDriverShadow_LongName_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_HelpTopic_get) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Driver_HelpTopic_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_HelpTopic_get" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALDriverShadow_HelpTopic_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Driver__Create) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int arg4 ;
    int arg5 = (int) 1 ;
    GDALDataType arg6 = (GDALDataType) GDT_Byte ;
    char **arg7 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    U8 *tmpbuf2 = NULL ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg2 = (char *)"";
    }
    if ((items < 1) || (items > 7)) {
      SWIG_croak("Usage: Driver__Create(self,utf8_path,xsize,ysize,bands,eType,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver__Create" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf2) */
        arg2 = sv_to_utf8_string(ST(1), &tmpbuf2);
      }
    }
    if (items > 2) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Driver__Create" "', argument " "3"" of type '" "int""'");
      } 
      arg3 = static_cast< int >(val3);
    }
    if (items > 3) {
      ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Driver__Create" "', argument " "4"" of type '" "int""'");
      } 
      arg4 = static_cast< int >(val4);
    }
    if (items > 4) {
      ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Driver__Create" "', argument " "5"" of type '" "int""'");
      } 
      arg5 = static_cast< int >(val5);
    }
    if (items > 5) {
      ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Driver__Create" "', argument " "6"" of type '" "GDALDataType""'");
      } 
      arg6 = static_cast< GDALDataType >(val6);
    }
    if (items > 6) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(6))) {
          if (SvROK(ST(6))) {
            if (SvTYPE(SvRV(ST(6)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(6)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg7 = CSLAddString(arg7, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(6)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(6));
              SV *sv;
              char *key;
              I32 klen;
              arg7 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg7 = CSLAddNameValue(arg7, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)GDALDriverShadow_Create(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg7) CSLDestroy( arg7 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg7) CSLDestroy( arg7 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_CreateMultiDimensional) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    char **arg4 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    U8 *tmpbuf2 = NULL ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg2 = (char *)"";
    }
    if ((items < 1) || (items > 4)) {
      SWIG_croak("Usage: Driver_CreateMultiDimensional(self,utf8_path,root_group_options,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_CreateMultiDimensional" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf2) */
        arg2 = sv_to_utf8_string(ST(1), &tmpbuf2);
      }
    }
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(3)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddString(arg4, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(3)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(3));
              SV *sv;
              char *key;
              I32 klen;
              arg4 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddNameValue(arg4, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)GDALDriverShadow_CreateMultiDimensional(arg1,(char const *)arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Driver__CreateCopy) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    GDALDatasetShadow *arg3 = (GDALDatasetShadow *) 0 ;
    int arg4 = (int) 1 ;
    char **arg5 = (char **) 0 ;
    GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
    void *arg7 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    U8 *tmpbuf2 = NULL ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg7 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg2 = (char *)"";
    }
    if ((items < 1) || (items > 7)) {
      SWIG_croak("Usage: Driver__CreateCopy(self,utf8_path,src,strict,options,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver__CreateCopy" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf2) */
        arg2 = sv_to_utf8_string(ST(1), &tmpbuf2);
      }
    }
    if (items > 2) {
      {
        /* %typemap(in) (GDALDatasetShadow *) */
        void *argp = 0;
        int res = SWIG_ConvertPtr(ST(2), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
        if (!SWIG_IsOK(res)) {
          do_confess(WRONG_CLASS, 1);
        }
        arg3 = reinterpret_cast< GDALDatasetShadow * >(argp);
        if (arg3 == NULL)
        do_confess(NEED_DEF, 1);
      }
    }
    if (items > 3) {
      ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Driver__CreateCopy" "', argument " "4"" of type '" "int""'");
      } 
      arg4 = static_cast< int >(val4);
    }
    if (items > 4) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(4)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddString(arg5, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(4)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(4));
              SV *sv;
              char *key;
              I32 klen;
              arg5 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddNameValue(arg5, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 5) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(5);
              arg6 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(6)))
        saved_env.data = (SV *)ST(6);
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)GDALDriverShadow_CreateCopy(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_Delete) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    U8 *tmpbuf2 = NULL ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg2 = (char *)"";
    }
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: Driver_Delete(self,utf8_path);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Delete" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf2) */
        arg2 = sv_to_utf8_string(ST(1), &tmpbuf2);
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDriverShadow_Delete(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_Rename) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Driver_Rename(self,newName,oldName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Rename" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Driver_Rename" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Driver_Rename" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDriverShadow_Rename(arg1,(char const *)arg2,(char const *)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_CopyFiles) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Driver_CopyFiles(self,newName,oldName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_CopyFiles" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Driver_CopyFiles" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Driver_CopyFiles" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDriverShadow_CopyFiles(arg1,(char const *)arg2,(char const *)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_Register) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Driver_Register(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Register" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALDriverShadow_Register(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Driver_Deregister) {
  {
    GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Driver_Deregister(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDriverShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Driver_Deregister" "', argument " "1"" of type '" "GDALDriverShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALDriverShadow * >(argp1);
    {
      CPLErrorReset();
      GDALDriverShadow_Deregister(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_X_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GCP_X_set(self,GCPX);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_X_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_X_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      GDAL_GCP_GCPX_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_X_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GCP_X_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_X_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPX_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Y_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GCP_Y_set(self,GCPY);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Y_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_Y_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      GDAL_GCP_GCPY_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Y_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GCP_Y_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Y_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPY_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Z_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GCP_Z_set(self,GCPZ);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Z_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_Z_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      GDAL_GCP_GCPZ_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Z_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GCP_Z_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Z_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPZ_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Column_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GCP_Column_set(self,GCPPixel);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Column_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_Column_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      GDAL_GCP_GCPPixel_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Column_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GCP_Column_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Column_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPPixel_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Row_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GCP_Row_set(self,GCPLine);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Row_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GCP_Row_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      GDAL_GCP_GCPLine_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Row_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GCP_Row_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Row_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPLine_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Info_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GCP_Info_set(self,Info);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Info_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GCP_Info_set" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      CPLErrorReset();
      GDAL_GCP_Info_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Info_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GCP_Info_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Info_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDAL_GCP_Info_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Id_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GCP_Id_set(self,Id);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Id_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GCP_Id_set" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      CPLErrorReset();
      GDAL_GCP_Id_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_GCP_Id_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GCP_Id_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GCP_Id_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDAL_GCP_Id_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GCP) {
  {
    double arg1 = (double) 0.0 ;
    double arg2 = (double) 0.0 ;
    double arg3 = (double) 0.0 ;
    double arg4 = (double) 0.0 ;
    double arg5 = (double) 0.0 ;
    char *arg6 = (char *) "" ;
    char *arg7 = (char *) "" ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    int res6 ;
    char *buf6 = 0 ;
    int alloc6 = 0 ;
    int res7 ;
    char *buf7 = 0 ;
    int alloc7 = 0 ;
    int argvi = 0;
    GDAL_GCP *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 7)) {
      SWIG_croak("Usage: new_GCP(x,y,z,pixel,line,info,id);");
    }
    if (items > 0) {
      ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
      if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GCP" "', argument " "1"" of type '" "double""'");
      } 
      arg1 = static_cast< double >(val1);
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GCP" "', argument " "2"" of type '" "double""'");
      } 
      arg2 = static_cast< double >(val2);
    }
    if (items > 2) {
      ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GCP" "', argument " "3"" of type '" "double""'");
      } 
      arg3 = static_cast< double >(val3);
    }
    if (items > 3) {
      ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GCP" "', argument " "4"" of type '" "double""'");
      } 
      arg4 = static_cast< double >(val4);
    }
    if (items > 4) {
      ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GCP" "', argument " "5"" of type '" "double""'");
      } 
      arg5 = static_cast< double >(val5);
    }
    if (items > 5) {
      res6 = SWIG_AsCharPtrAndSize(ST(5), &buf6, NULL, &alloc6);
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_GCP" "', argument " "6"" of type '" "char const *""'");
      }
      arg6 = reinterpret_cast< char * >(buf6);
    }
    if (items > 6) {
      res7 = SWIG_AsCharPtrAndSize(ST(6), &buf7, NULL, &alloc7);
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_GCP" "', argument " "7"" of type '" "char const *""'");
      }
      arg7 = reinterpret_cast< char * >(buf7);
    }
    {
      CPLErrorReset();
      result = (GDAL_GCP *)new_GDAL_GCP(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDAL_GCP, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
    if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
    if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GCP) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GCP(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GCP" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      CPLErrorReset();
      delete_GDAL_GCP(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPX_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GDAL_GCP_GCPX_get(gcp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPX_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPX_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPX_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDAL_GCP_GCPX_set(gcp,dfGCPX);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPX_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPX_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      GDAL_GCP_GCPX_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPY_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GDAL_GCP_GCPY_get(gcp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPY_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPY_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPY_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDAL_GCP_GCPY_set(gcp,dfGCPY);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPY_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPY_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      GDAL_GCP_GCPY_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPZ_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GDAL_GCP_GCPZ_get(gcp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPZ_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPZ_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPZ_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDAL_GCP_GCPZ_set(gcp,dfGCPZ);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPZ_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPZ_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      GDAL_GCP_GCPZ_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPPixel_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GDAL_GCP_GCPPixel_get(gcp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPPixel_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPPixel_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPPixel_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDAL_GCP_GCPPixel_set(gcp,dfGCPPixel);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPPixel_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPPixel_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      GDAL_GCP_GCPPixel_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPLine_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GDAL_GCP_GCPLine_get(gcp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPLine_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (double)GDAL_GCP_GCPLine_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_GCPLine_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDAL_GCP_GCPLine_set(gcp,dfGCPLine);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_GCPLine_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GDAL_GCP_GCPLine_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      GDAL_GCP_GCPLine_set(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_Info_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GDAL_GCP_Info_get(gcp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_Info_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char *)GDAL_GCP_Info_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_Info_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDAL_GCP_Info_set(gcp,pszInfo);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_Info_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GDAL_GCP_Info_set" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      GDAL_GCP_Info_set(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_Id_get) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GDAL_GCP_Id_get(gcp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_Id_get" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (char *)GDAL_GCP_Id_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDAL_GCP_Id_set) {
  {
    GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDAL_GCP_Id_set(gcp,pszId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDAL_GCP, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GDAL_GCP_Id_set" "', argument " "1"" of type '" "GDAL_GCP *""'"); 
    }
    arg1 = reinterpret_cast< GDAL_GCP * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GDAL_GCP_Id_set" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      GDAL_GCP_Id_set(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_GCPsToGeoTransform) {
  {
    int arg1 ;
    GDAL_GCP *arg2 = (GDAL_GCP *) 0 ;
    double *arg3 ;
    int arg4 = (int) 1 ;
    double argout3[6] ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    RETURN_NONE result;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double argout3[ANY]) */
      arg3 = argout3;
    }
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: GCPsToGeoTransform(nGCPs,pGCPs,bApproxOK);");
    }
    {
      /* %typemap(in,numinputs=1) (int nGCPs, GDAL_GCP const *pGCPs ) */
      if (!(SvROK(ST(0)) && (SvTYPE(SvRV(ST(0)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(0)));
      arg1 = av_len(av)+1;
      arg2 = (GDAL_GCP *)CPLMalloc(arg1*sizeof(GDAL_GCP));
      if (arg2) {
        for (int i = 0; i < arg1; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          GDAL_GCP *gcp;
          int ret = SWIG_ConvertPtr(*sv, (void**)&gcp, SWIGTYPE_p_GDAL_GCP, 0);
          if (!SWIG_IsOK(ret))
          do_confess(WRONG_ITEM_IN_ARRAY, 1);
          arg2[i] = *gcp;
        }
      } else
      do_confess(OUT_OF_MEMORY, 1);
    }
    if (items > 1) {
      ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GCPsToGeoTransform" "', argument " "4"" of type '" "int""'");
      } 
      arg4 = static_cast< int >(val4);
    }
    {
      CPLErrorReset();
      result = (RETURN_NONE)GDALGCPsToGeoTransform(arg1,(GDAL_GCP const *)arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) IF_FALSE_RETURN_NONE */
    }
    {
      /* %typemap(argout) (double argout[ANY]) */
      if (GIMME_V == G_ARRAY) {
        /* return a list */
        int i;
        EXTEND(SP, argvi+6-items+1);
        for (i = 0; i < 6; i++)
        ST(argvi++) = sv_2mortal(newSVnv(arg3[i]));
      } else {
        ST(argvi) = CreateArrayFromDoubleArray( arg3, 6 );
        argvi++;
      }
    }
    {
      /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
      CPLFree(arg2);
    }
    
    
    {
      /* %typemap(ret) IF_FALSE_RETURN_NONE */
      if (result == 0 ) {
        do_confess(CALL_FAILED, 1);
      }
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
      CPLFree(arg2);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_AsyncReader) {
  {
    GDALAsyncReaderShadow *arg1 = (GDALAsyncReaderShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_AsyncReader(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAsyncReaderShadow, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AsyncReader" "', argument " "1"" of type '" "GDALAsyncReaderShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALAsyncReaderShadow * >(argp1);
    {
      CPLErrorReset();
      delete_GDALAsyncReaderShadow(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_AsyncReader_GetNextUpdatedRegion) {
  {
    GDALAsyncReaderShadow *arg1 = (GDALAsyncReaderShadow *) 0 ;
    double arg2 ;
    int *arg3 = (int *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    int *arg6 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int temp6 ;
    int res6 = SWIG_TMPOBJ ;
    int argvi = 0;
    GDALAsyncStatusType result;
    dXSARGS;
    
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    arg6 = &temp6;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: AsyncReader_GetNextUpdatedRegion(self,timeout);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAsyncReaderShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsyncReader_GetNextUpdatedRegion" "', argument " "1"" of type '" "GDALAsyncReaderShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALAsyncReaderShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AsyncReader_GetNextUpdatedRegion" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      result = (GDALAsyncStatusType)GDALAsyncReaderShadow_GetNextUpdatedRegion(arg1,arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_AsyncReader_LockBuffer) {
  {
    GDALAsyncReaderShadow *arg1 = (GDALAsyncReaderShadow *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: AsyncReader_LockBuffer(self,timeout);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAsyncReaderShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsyncReader_LockBuffer" "', argument " "1"" of type '" "GDALAsyncReaderShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALAsyncReaderShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AsyncReader_LockBuffer" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      result = (int)GDALAsyncReaderShadow_LockBuffer(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_AsyncReader_UnlockBuffer) {
  {
    GDALAsyncReaderShadow *arg1 = (GDALAsyncReaderShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: AsyncReader_UnlockBuffer(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAsyncReaderShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsyncReader_UnlockBuffer" "', argument " "1"" of type '" "GDALAsyncReaderShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALAsyncReaderShadow * >(argp1);
    {
      CPLErrorReset();
      GDALAsyncReaderShadow_UnlockBuffer(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_RasterXSize_get) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_RasterXSize_get(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (int)GDALDatasetShadow_RasterXSize_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_RasterYSize_get) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_RasterYSize_get(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (int)GDALDatasetShadow_RasterYSize_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_RasterCount_get) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_RasterCount_get(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (int)GDALDatasetShadow_RasterCount_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Dataset) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Dataset(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      delete_GDALDatasetShadow(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetDriver) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    GDALDriverShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetDriver(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (GDALDriverShadow *)GDALDatasetShadow_GetDriver(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__GetRasterBand) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALRasterBandShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset__GetRasterBand(self,nBand);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset__GetRasterBand" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (GDALRasterBandShadow *)GDALDatasetShadow_GetRasterBand(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterBandShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetRootGroup) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    GDALGroupHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetRootGroup(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (GDALGroupHS *)GDALDatasetShadow_GetRootGroup(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALGroupHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetProjection) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetProjection(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (char *)GDALDatasetShadow_GetProjection(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetProjectionRef) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetProjectionRef(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (char *)GDALDatasetShadow_GetProjectionRef(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetSpatialRef) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    OSRSpatialReferenceShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetSpatialRef(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (OSRSpatialReferenceShadow *)GDALDatasetShadow_GetSpatialRef(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OSRSpatialReferenceShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_SetProjection) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset_SetProjection(self,prj);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_SetProjection" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_SetProjection(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_SetSpatialRef) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset_SetSpatialRef(self,srs);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_OSRSpatialReferenceShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_SetSpatialRef" "', argument " "2"" of type '" "OSRSpatialReferenceShadow *""'"); 
    }
    arg2 = reinterpret_cast< OSRSpatialReferenceShadow * >(argp2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_SetSpatialRef(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetGeoTransform) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    double *arg2 ;
    double argout2[6] ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double argout2[ANY]) */
      arg2 = argout2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetGeoTransform(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      GDALDatasetShadow_GetGeoTransform(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double argout[ANY]) */
      if (GIMME_V == G_ARRAY) {
        /* return a list */
        int i;
        EXTEND(SP, argvi+6-items+1);
        for (i = 0; i < 6; i++)
        ST(argvi++) = sv_2mortal(newSVnv(arg2[i]));
      } else {
        ST(argvi) = CreateArrayFromDoubleArray( arg2, 6 );
        argvi++;
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_SetGeoTransform) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    double *arg2 ;
    double argin2[6] ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset_SetGeoTransform(self,argin);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in) (double argin2[ANY]) */
      if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      arg2 = argin2;
      AV *av = (AV*)(SvRV(ST(1)));
      if (av_len(av)+1 < 6)
      do_confess(NOT_ENOUGH_ELEMENTS, 1);
      for (unsigned int i=0; i<6; i++) {
        SV *sv = *av_fetch(av, i, 0);
        if (!SvOK(sv))
        do_confess(NEED_DEF, 1);
        arg2[i] =  SvNV(sv);
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_SetGeoTransform(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__BuildOverviews) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    char *arg2 = (char *) "NEAREST" ;
    int arg3 = (int) 0 ;
    int *arg4 = (int *) 0 ;
    GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
    void *arg6 = (void *) NULL ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg6 = (void *)(&saved_env);
    if ((items < 1) || (items > 5)) {
      SWIG_croak("Usage: Dataset__BuildOverviews(self,resampling,overviewlist,pOverviews,callback,callback_data);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset__BuildOverviews" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    if (items > 2) {
      {
        /* %typemap(in,numinputs=1) (int nList, int* pList) */
        if (!(SvROK(ST(2)) && (SvTYPE(SvRV(ST(2)))==SVt_PVAV)))
        do_confess(NEED_ARRAY_REF, 1);
        AV *av = (AV*)(SvRV(ST(2)));
        arg3 = av_len(av)+1;
        arg4 = (int*)CPLMalloc(arg3*sizeof(int));
        if (arg4) {
          for( int i = 0; i<arg3; i++ ) {
            SV **sv = av_fetch(av, i, 0);
            arg4[i] =  SvIV(*sv);
          }
        } else
        SWIG_fail;
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg5 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      CPLErrorReset();
      result = (int)GDALDatasetShadow_BuildOverviews(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg4);
    }
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg4);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetGCPCount) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetGCPCount(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (int)GDALDatasetShadow_GetGCPCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetGCPProjection) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetGCPProjection(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (char *)GDALDatasetShadow_GetGCPProjection(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetGCPSpatialRef) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    OSRSpatialReferenceShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetGCPSpatialRef(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (OSRSpatialReferenceShadow *)GDALDatasetShadow_GetGCPSpatialRef(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OSRSpatialReferenceShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetGCPs) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int *arg2 = (int *) 0 ;
    GDAL_GCP **arg3 = (GDAL_GCP **) 0 ;
    int nGCPs2 = 0 ;
    GDAL_GCP *pGCPs2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (int *nGCPs2, GDAL_GCP const **pGCPs2 ) */
      arg2 = &nGCPs2;
      arg3 = &pGCPs2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetGCPs(self,pGCPs);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      GDALDatasetShadow_GetGCPs(arg1,arg2,(GDAL_GCP const **)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (int *nGCPs, GDAL_GCP const **pGCPs ) */
      AV *dict = (AV*)sv_2mortal((SV*)newAV());
      for( int i = 0; i < *arg2; i++ ) {
        GDAL_GCP *o = new_GDAL_GCP( (*arg3)[i].dfGCPX,
          (*arg3)[i].dfGCPY,
          (*arg3)[i].dfGCPZ,
          (*arg3)[i].dfGCPPixel,
          (*arg3)[i].dfGCPLine,
          (*arg3)[i].pszInfo,
          (*arg3)[i].pszId );
        SV *sv = newSV(0);
        SWIG_MakePtr( sv, (void*)o, SWIGTYPE_p_GDAL_GCP, SWIG_SHADOW|SWIG_OWNER);
        av_store(dict, i, sv);
      }
      ST(argvi) = sv_2mortal(newRV((SV*)dict));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_SetGCPs) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    GDAL_GCP *arg3 = (GDAL_GCP *) 0 ;
    char *arg4 = (char *) 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Dataset_SetGCPs(self,nGCPs,pGCPs,pszGCPProjection);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in,numinputs=1) (int nGCPs, GDAL_GCP const *pGCPs ) */
      if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(1)));
      arg2 = av_len(av)+1;
      arg3 = (GDAL_GCP *)CPLMalloc(arg2*sizeof(GDAL_GCP));
      if (arg3) {
        for (int i = 0; i < arg2; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          GDAL_GCP *gcp;
          int ret = SWIG_ConvertPtr(*sv, (void**)&gcp, SWIGTYPE_p_GDAL_GCP, 0);
          if (!SWIG_IsOK(ret))
          do_confess(WRONG_ITEM_IN_ARRAY, 1);
          arg3[i] = *gcp;
        }
      } else
      do_confess(OUT_OF_MEMORY, 1);
    }
    res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Dataset_SetGCPs" "', argument " "4"" of type '" "char const *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_SetGCPs(arg1,arg2,(GDAL_GCP const *)arg3,(char const *)arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    {
      /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
      CPLFree(arg3);
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
      CPLFree(arg3);
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_SetGCPs2) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    GDAL_GCP *arg3 = (GDAL_GCP *) 0 ;
    OSRSpatialReferenceShadow *arg4 = (OSRSpatialReferenceShadow *) 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Dataset_SetGCPs2(self,nGCPs,pGCPs,hSRS);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in,numinputs=1) (int nGCPs, GDAL_GCP const *pGCPs ) */
      if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(1)));
      arg2 = av_len(av)+1;
      arg3 = (GDAL_GCP *)CPLMalloc(arg2*sizeof(GDAL_GCP));
      if (arg3) {
        for (int i = 0; i < arg2; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          GDAL_GCP *gcp;
          int ret = SWIG_ConvertPtr(*sv, (void**)&gcp, SWIGTYPE_p_GDAL_GCP, 0);
          if (!SWIG_IsOK(ret))
          do_confess(WRONG_ITEM_IN_ARRAY, 1);
          arg3[i] = *gcp;
        }
      } else
      do_confess(OUT_OF_MEMORY, 1);
    }
    res4 = SWIG_ConvertPtr(ST(2), &argp4,SWIGTYPE_p_OSRSpatialReferenceShadow, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Dataset_SetGCPs2" "', argument " "4"" of type '" "OSRSpatialReferenceShadow *""'"); 
    }
    arg4 = reinterpret_cast< OSRSpatialReferenceShadow * >(argp4);
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_SetGCPs2(arg1,arg2,(GDAL_GCP const *)arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    {
      /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
      CPLFree(arg3);
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (int nGCPs, GDAL_GCP const *pGCPs ) */
      CPLFree(arg3);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_FlushCache) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_FlushCache(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      GDALDatasetShadow_FlushCache(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__AddBand) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALDataType arg2 = (GDALDataType) GDT_Byte ;
    char **arg3 = (char **) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 1) || (items > 3)) {
      SWIG_croak("Usage: Dataset__AddBand(self,datatype,options);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset__AddBand" "', argument " "2"" of type '" "GDALDataType""'");
      } 
      arg2 = static_cast< GDALDataType >(val2);
    }
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_AddBand(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__CreateMaskBand) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset__CreateMaskBand(self,nFlags);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset__CreateMaskBand" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_CreateMaskBand(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetFileList) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetFileList(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (char **)GDALDatasetShadow_GetFileList(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__WriteRaster) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    GIntBig arg6 ;
    char *arg7 = (char *) 0 ;
    int *arg8 = (int *) 0 ;
    int *arg9 = (int *) 0 ;
    GDALDataType *arg10 = (GDALDataType *) 0 ;
    int arg11 = (int) 0 ;
    int *arg12 = (int *) 0 ;
    GIntBig *arg13 = (GIntBig *) 0 ;
    GIntBig *arg14 = (GIntBig *) 0 ;
    GIntBig *arg15 = (GIntBig *) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val8 ;
    int val9 ;
    int val10 ;
    GIntBig val13 ;
    GIntBig val14 ;
    GIntBig val15 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 6) || (items > 13)) {
      SWIG_croak("Usage: Dataset__WriteRaster(self,xoff,yoff,xsize,ysize,buf_len,buf_string,buf_xsize,buf_ysize,buf_type,band_list,pband_list,buf_pixel_space,buf_line_space,buf_band_space);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset__WriteRaster" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset__WriteRaster" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dataset__WriteRaster" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Dataset__WriteRaster" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      /* %typemap(in,numinputs=1) (GIntBig nLen, char *pBuf ) */
      if (SvOK(ST(5))) {
        SV *sv = ST(5);
        if (SvROK(sv) && SvTYPE(SvRV(sv)) < SVt_PVAV)
        sv = SvRV(sv);
        if (!SvPOK(sv))
        do_confess(NEED_BINARY_DATA, 1);
        STRLEN len = SvCUR(sv);
        arg7 = SvPV_nolen(sv);
        arg6 = len;
      } else {
        arg7 = NULL;
        arg6 = 0;
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(6)) ) {
          arg8 = 0;
        }
        else {
          val8 = SvIV(ST(6));
          arg8 = (int *)&val8;
        }
      }
    }
    if (items > 7) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(7)) ) {
          arg9 = 0;
        }
        else {
          val9 = SvIV(ST(7));
          arg9 = (int *)&val9;
        }
      }
    }
    if (items > 8) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(8)) ) {
          arg10 = 0;
        }
        else {
          val10 = SvIV(ST(8));
          arg10 = (GDALDataType *)&val10;
        }
      }
    }
    if (items > 9) {
      {
        /* %typemap(in,numinputs=1) (int nList, int* pList) */
        if (!(SvROK(ST(9)) && (SvTYPE(SvRV(ST(9)))==SVt_PVAV)))
        do_confess(NEED_ARRAY_REF, 1);
        AV *av = (AV*)(SvRV(ST(9)));
        arg11 = av_len(av)+1;
        arg12 = (int*)CPLMalloc(arg11*sizeof(int));
        if (arg12) {
          for( int i = 0; i<arg11; i++ ) {
            SV **sv = av_fetch(av, i, 0);
            arg12[i] =  SvIV(*sv);
          }
        } else
        SWIG_fail;
      }
    }
    if (items > 10) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(10)) ) {
          arg13 = 0;
        }
        else {
          val13 = CPLAtoGIntBig(SvPV_nolen(ST(10)));
          arg13 = (GIntBig *)&val13;
        }
      }
    }
    if (items > 11) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(11)) ) {
          arg14 = 0;
        }
        else {
          val14 = CPLAtoGIntBig(SvPV_nolen(ST(11)));
          arg14 = (GIntBig *)&val14;
        }
      }
    }
    if (items > 12) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(12)) ) {
          arg15 = 0;
        }
        else {
          val15 = CPLAtoGIntBig(SvPV_nolen(ST(12)));
          arg15 = (GIntBig *)&val15;
        }
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_WriteRaster(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    
    
    
    
    
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg12);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg12);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__ReadRaster) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    GIntBig *arg6 = (GIntBig *) 0 ;
    char **arg7 = (char **) 0 ;
    int *arg8 = (int *) 0 ;
    int *arg9 = (int *) 0 ;
    GDALDataType *arg10 = (GDALDataType *) 0 ;
    int arg11 = (int) 0 ;
    int *arg12 = (int *) 0 ;
    GIntBig *arg13 = (GIntBig *) 0 ;
    GIntBig *arg14 = (GIntBig *) 0 ;
    GIntBig *arg15 = (GIntBig *) 0 ;
    GDALRIOResampleAlg arg16 = (GDALRIOResampleAlg) GRIORA_NearestNeighbour ;
    GDALProgressFunc arg17 = (GDALProgressFunc) NULL ;
    void *arg18 = (void *) NULL ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    GIntBig nLen6 = 0 ;
    char *pBuf6 = 0 ;
    int val8 ;
    int val9 ;
    int val10 ;
    GIntBig val13 ;
    GIntBig val14 ;
    GIntBig val15 ;
    int val16 ;
    int ecode16 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg18 = (void *)(&saved_env);
    {
      /* %typemap(in,numinputs=0) (GIntBig *nLen6, char **pBuf6 ) */
      arg6 = &nLen6;
      arg7 = &pBuf6;
    }
    if ((items < 5) || (items > 15)) {
      SWIG_croak("Usage: Dataset__ReadRaster(self,xoff,yoff,xsize,ysize,buf,buf_xsize,buf_ysize,buf_type,band_list,pband_list,buf_pixel_space,buf_line_space,buf_band_space,resample_alg,callback,callback_data);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset__ReadRaster" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset__ReadRaster" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dataset__ReadRaster" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Dataset__ReadRaster" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    if (items > 5) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(5)) ) {
          arg8 = 0;
        }
        else {
          val8 = SvIV(ST(5));
          arg8 = (int *)&val8;
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(6)) ) {
          arg9 = 0;
        }
        else {
          val9 = SvIV(ST(6));
          arg9 = (int *)&val9;
        }
      }
    }
    if (items > 7) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(7)) ) {
          arg10 = 0;
        }
        else {
          val10 = SvIV(ST(7));
          arg10 = (GDALDataType *)&val10;
        }
      }
    }
    if (items > 8) {
      {
        /* %typemap(in,numinputs=1) (int nList, int* pList) */
        if (!(SvROK(ST(8)) && (SvTYPE(SvRV(ST(8)))==SVt_PVAV)))
        do_confess(NEED_ARRAY_REF, 1);
        AV *av = (AV*)(SvRV(ST(8)));
        arg11 = av_len(av)+1;
        arg12 = (int*)CPLMalloc(arg11*sizeof(int));
        if (arg12) {
          for( int i = 0; i<arg11; i++ ) {
            SV **sv = av_fetch(av, i, 0);
            arg12[i] =  SvIV(*sv);
          }
        } else
        SWIG_fail;
      }
    }
    if (items > 9) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(9)) ) {
          arg13 = 0;
        }
        else {
          val13 = CPLAtoGIntBig(SvPV_nolen(ST(9)));
          arg13 = (GIntBig *)&val13;
        }
      }
    }
    if (items > 10) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(10)) ) {
          arg14 = 0;
        }
        else {
          val14 = CPLAtoGIntBig(SvPV_nolen(ST(10)));
          arg14 = (GIntBig *)&val14;
        }
      }
    }
    if (items > 11) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(11)) ) {
          arg15 = 0;
        }
        else {
          val15 = CPLAtoGIntBig(SvPV_nolen(ST(11)));
          arg15 = (GIntBig *)&val15;
        }
      }
    }
    if (items > 12) {
      ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val16);
      if (!SWIG_IsOK(ecode16)) {
        SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Dataset__ReadRaster" "', argument " "16"" of type '" "GDALRIOResampleAlg""'");
      } 
      arg16 = static_cast< GDALRIOResampleAlg >(val16);
    }
    if (items > 13) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(13))) {
          if (SvROK(ST(13))) {
            if (SvTYPE(SvRV(ST(13))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(13);
              arg17 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 14) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(14)))
        saved_env.data = (SV *)ST(14);
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_ReadRaster(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    {
      /* %typemap(argout) (GIntBig *nLen, char **pBuf ) */
      ST(argvi) = sv_2mortal(newSVpv( *arg7, *arg6 ));
      argvi++;
    }
    
    
    
    
    
    {
      /* %typemap(freearg) (GIntBig *nLen, char **pBuf ) */
      if( *arg6 ) {
        free( *arg7 );
      }
    }
    
    
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg12);
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    {
      /* %typemap(freearg) (GIntBig *nLen, char **pBuf ) */
      if( *arg6 ) {
        free( *arg7 );
      }
    }
    
    
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg12);
    }
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_AdviseRead) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int *arg6 = (int *) 0 ;
    int *arg7 = (int *) 0 ;
    GDALDataType *arg8 = (GDALDataType *) 0 ;
    int arg9 = (int) 0 ;
    int *arg10 = (int *) 0 ;
    char **arg11 = (char **) NULL ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    int val8 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 5) || (items > 10)) {
      SWIG_croak("Usage: Dataset_AdviseRead(self,xoff,yoff,xsize,ysize,buf_xsize,buf_ysize,buf_type,band_list,pband_list,options);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_AdviseRead" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_AdviseRead" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dataset_AdviseRead" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Dataset_AdviseRead" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    if (items > 5) {
      res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_int, 0 |  0 );
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Dataset_AdviseRead" "', argument " "6"" of type '" "int *""'"); 
      }
      arg6 = reinterpret_cast< int * >(argp6);
    }
    if (items > 6) {
      res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_int, 0 |  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Dataset_AdviseRead" "', argument " "7"" of type '" "int *""'"); 
      }
      arg7 = reinterpret_cast< int * >(argp7);
    }
    if (items > 7) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(7)) ) {
          arg8 = 0;
        }
        else {
          val8 = SvIV(ST(7));
          arg8 = (GDALDataType *)&val8;
        }
      }
    }
    if (items > 8) {
      {
        /* %typemap(in,numinputs=1) (int nList, int* pList) */
        if (!(SvROK(ST(8)) && (SvTYPE(SvRV(ST(8)))==SVt_PVAV)))
        do_confess(NEED_ARRAY_REF, 1);
        AV *av = (AV*)(SvRV(ST(8)));
        arg9 = av_len(av)+1;
        arg10 = (int*)CPLMalloc(arg9*sizeof(int));
        if (arg10) {
          for( int i = 0; i<arg9; i++ ) {
            SV **sv = av_fetch(av, i, 0);
            arg10[i] =  SvIV(*sv);
          }
        } else
        SWIG_fail;
      }
    }
    if (items > 9) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(9))) {
          if (SvROK(ST(9))) {
            if (SvTYPE(SvRV(ST(9)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(9)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg11 = CSLAddString(arg11, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(9)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(9));
              SV *sv;
              char *key;
              I32 klen;
              arg11 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg11 = CSLAddNameValue(arg11, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALDatasetShadow_AdviseRead(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    
    
    
    
    
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg10);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg11) CSLDestroy( arg11 );
    }
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg10);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg11) CSLDestroy( arg11 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__CreateLayer) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    OSRSpatialReferenceShadow *arg3 = (OSRSpatialReferenceShadow *) NULL ;
    OGRwkbGeometryType arg4 = (OGRwkbGeometryType) wkbUnknown ;
    char **arg5 = (char **) 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    OGRLayerShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 5)) {
      SWIG_croak("Usage: Dataset__CreateLayer(self,name,srs,geom_type,options);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset__CreateLayer" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_OSRSpatialReferenceShadow, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Dataset__CreateLayer" "', argument " "3"" of type '" "OSRSpatialReferenceShadow *""'"); 
      }
      arg3 = reinterpret_cast< OSRSpatialReferenceShadow * >(argp3);
    }
    if (items > 3) {
      ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dataset__CreateLayer" "', argument " "4"" of type '" "OGRwkbGeometryType""'");
      } 
      arg4 = static_cast< OGRwkbGeometryType >(val4);
    }
    if (items > 4) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(4)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddString(arg5, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(4)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(4));
              SV *sv;
              char *key;
              I32 klen;
              arg5 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddNameValue(arg5, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (OGRLayerShadow *)GDALDatasetShadow_CreateLayer(arg1,(char const *)arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRLayerShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_CopyLayer) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
    char *arg3 = (char *) 0 ;
    char **arg4 = (char **) 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    OGRLayerShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 4)) {
      SWIG_croak("Usage: Dataset_CopyLayer(self,src_layer,new_name,options);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_CopyLayer" "', argument " "2"" of type '" "OGRLayerShadow *""'"); 
    }
    arg2 = reinterpret_cast< OGRLayerShadow * >(argp2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Dataset_CopyLayer" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    if (items > 3) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(3)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddString(arg4, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(3)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(3));
              SV *sv;
              char *key;
              I32 klen;
              arg4 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddNameValue(arg4, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (OGRLayerShadow *)GDALDatasetShadow_CopyLayer(arg1,arg2,(char const *)arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRLayerShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__DeleteLayer) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OGRErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset__DeleteLayer(self,index);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset__DeleteLayer" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (OGRErr)GDALDatasetShadow_DeleteLayer(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) OGRErr */
      if ( result != 0 ) {
        const char *err = CPLGetLastErrorMsg();
        if (err and *err) do_confess(err, 0); /* this is usually better */
        do_confess( OGRErrMessages(result), 1 );
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetLayerCount) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetLayerCount(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (int)GDALDatasetShadow_GetLayerCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_IsLayerPrivate) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset_IsLayerPrivate(self,index);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_IsLayerPrivate" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (bool)GDALDatasetShadow_IsLayerPrivate(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetLayerByIndex) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 = (int) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OGRLayerShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: Dataset_GetLayerByIndex(self,index);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_GetLayerByIndex" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    {
      CPLErrorReset();
      result = (OGRLayerShadow *)GDALDatasetShadow_GetLayerByIndex(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRLayerShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetLayerByName) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    U8 *tmpbuf2 = NULL ;
    int argvi = 0;
    OGRLayerShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset_GetLayerByName(self,layer_name);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in,numinputs=1) (const char* layer_name) */
      arg2 = sv_to_utf8_string(ST(1), &tmpbuf2);
    }
    {
      CPLErrorReset();
      result = (OGRLayerShadow *)GDALDatasetShadow_GetLayerByName(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRLayerShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    {
      /* %typemap(freearg) (const char* layer_name) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (const char* layer_name) */
      if (tmpbuf2) Safefree(tmpbuf2);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_ResetReading) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_ResetReading(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      GDALDatasetShadow_ResetReading(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetNextFeature) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    OGRFeatureShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetNextFeature(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (OGRFeatureShadow *)GDALDatasetShadow_GetNextFeature(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRFeatureShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__TestCapability) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset__TestCapability(self,cap);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset__TestCapability" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      /* %typemap(check) (const char *cap) */
      if (!arg2)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (bool)GDALDatasetShadow_TestCapability(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_ExecuteSQL) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    OGRGeometryShadow *arg3 = (OGRGeometryShadow *) NULL ;
    char *arg4 = (char *) "" ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    int argvi = 0;
    OGRLayerShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 4)) {
      SWIG_croak("Usage: Dataset_ExecuteSQL(self,statement,spatialFilter,dialect);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_ExecuteSQL" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_OGRGeometryShadow, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Dataset_ExecuteSQL" "', argument " "3"" of type '" "OGRGeometryShadow *""'"); 
      }
      arg3 = reinterpret_cast< OGRGeometryShadow * >(argp3);
    }
    if (items > 3) {
      res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, NULL, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Dataset_ExecuteSQL" "', argument " "4"" of type '" "char const *""'");
      }
      arg4 = reinterpret_cast< char * >(buf4);
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (OGRLayerShadow *)GDALDatasetShadow_ExecuteSQL(arg1,(char const *)arg2,arg3,(char const *)arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRLayerShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset__ReleaseResultSet) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset__ReleaseResultSet(self,layer);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_ConvertPtr(ST(1), SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_OGRLayerShadow, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset__ReleaseResultSet" "', argument " "2"" of type '" "OGRLayerShadow *""'");
    }
    {
      CPLErrorReset();
      GDALDatasetShadow_ReleaseResultSet(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetStyleTable) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    OGRStyleTableShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_GetStyleTable(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (OGRStyleTableShadow *)GDALDatasetShadow_GetStyleTable(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRStyleTableShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_SetStyleTable) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    OGRStyleTableShadow *arg2 = (OGRStyleTableShadow *) 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset_SetStyleTable(self,table);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_OGRStyleTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_SetStyleTable" "', argument " "2"" of type '" "OGRStyleTableShadow *""'"); 
    }
    arg2 = reinterpret_cast< OGRStyleTableShadow * >(argp2);
    {
      CPLErrorReset();
      GDALDatasetShadow_SetStyleTable(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_AbortSQL) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    OGRErr result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_AbortSQL(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (OGRErr)GDALDatasetShadow_AbortSQL(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) OGRErr */
      if ( result != 0 ) {
        const char *err = CPLGetLastErrorMsg();
        if (err and *err) do_confess(err, 0); /* this is usually better */
        do_confess( OGRErrMessages(result), 1 );
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_StartTransaction) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 = (int) FALSE ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OGRErr result;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: Dataset_StartTransaction(self,force);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_StartTransaction" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    {
      CPLErrorReset();
      result = (OGRErr)GDALDatasetShadow_StartTransaction(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) OGRErr */
      if ( result != 0 ) {
        const char *err = CPLGetLastErrorMsg();
        if (err and *err) do_confess(err, 0); /* this is usually better */
        do_confess( OGRErrMessages(result), 1 );
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_CommitTransaction) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    OGRErr result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_CommitTransaction(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (OGRErr)GDALDatasetShadow_CommitTransaction(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) OGRErr */
      if ( result != 0 ) {
        const char *err = CPLGetLastErrorMsg();
        if (err and *err) do_confess(err, 0); /* this is usually better */
        do_confess( OGRErrMessages(result), 1 );
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_RollbackTransaction) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    OGRErr result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_RollbackTransaction(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (OGRErr)GDALDatasetShadow_RollbackTransaction(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) OGRErr */
      if ( result != 0 ) {
        const char *err = CPLGetLastErrorMsg();
        if (err and *err) do_confess(err, 0); /* this is usually better */
        do_confess( OGRErrMessages(result), 1 );
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_ClearStatistics) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dataset_ClearStatistics(self);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      GDALDatasetShadow_ClearStatistics(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_GetFieldDomain) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    OGRFieldDomainShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset_GetFieldDomain(self,name);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_GetFieldDomain" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (OGRFieldDomainShadow *)GDALDatasetShadow_GetFieldDomain(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRFieldDomainShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Dataset_AddFieldDomain) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    OGRFieldDomainShadow *arg2 = (OGRFieldDomainShadow *) 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dataset_AddFieldDomain(self,fieldDomain);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_OGRFieldDomainShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_AddFieldDomain" "', argument " "2"" of type '" "OGRFieldDomainShadow *""'"); 
    }
    arg2 = reinterpret_cast< OGRFieldDomainShadow * >(argp2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (bool)GDALDatasetShadow_AddFieldDomain(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Group) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Group(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Group" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    {
      CPLErrorReset();
      delete_GDALGroupHS(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Group_GetName) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Group_GetName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_GetName" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALGroupHS_GetName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Group_GetFullName) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Group_GetFullName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_GetFullName" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALGroupHS_GetFullName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Group_GetMDArrayNames) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char **arg2 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: Group_GetMDArrayNames(self,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_GetMDArrayNames" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (char **)GDALGroupHS_GetMDArrayNames(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_OpenMDArray) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: Group_OpenMDArray(self,name,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_OpenMDArray" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_OpenMDArray" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALGroupHS_OpenMDArray(arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_OpenMDArrayFromFullname) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: Group_OpenMDArrayFromFullname(self,name,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_OpenMDArrayFromFullname" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_OpenMDArrayFromFullname" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALGroupHS_OpenMDArrayFromFullname(arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_ResolveMDArray) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char **arg4 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 4)) {
      SWIG_croak("Usage: Group_ResolveMDArray(self,name,starting_point,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_ResolveMDArray" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_ResolveMDArray" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Group_ResolveMDArray" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    if (items > 3) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(3)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddString(arg4, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(3)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(3));
              SV *sv;
              char *key;
              I32 klen;
              arg4 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddNameValue(arg4, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALGroupHS_ResolveMDArray(arg1,(char const *)arg2,(char const *)arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_GetGroupNames) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char **arg2 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: Group_GetGroupNames(self,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_GetGroupNames" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (char **)GDALGroupHS_GetGroupNames(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_OpenGroup) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    GDALGroupHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: Group_OpenGroup(self,name,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_OpenGroup" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_OpenGroup" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALGroupHS *)GDALGroupHS_OpenGroup(arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALGroupHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_OpenGroupFromFullname) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    GDALGroupHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: Group_OpenGroupFromFullname(self,name,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_OpenGroupFromFullname" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_OpenGroupFromFullname" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALGroupHS *)GDALGroupHS_OpenGroupFromFullname(arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALGroupHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_GetVectorLayerNames) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char **arg2 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: Group_GetVectorLayerNames(self,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_GetVectorLayerNames" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (char **)GDALGroupHS_GetVectorLayerNames(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_OpenVectorLayer) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    OGRLayerShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: Group_OpenVectorLayer(self,name,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_OpenVectorLayer" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_OpenVectorLayer" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (OGRLayerShadow *)GDALGroupHS_OpenVectorLayer(arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OGRLayerShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_GetAttribute) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    GDALAttributeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Group_GetAttribute(self,name);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_GetAttribute" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_GetAttribute" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALAttributeHS *)GDALGroupHS_GetAttribute(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALAttributeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Group_GetStructuralInfo) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Group_GetStructuralInfo(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_GetStructuralInfo" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    {
      CPLErrorReset();
      result = (char **)GDALGroupHS_GetStructuralInfo(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **dict */
      char **stringarray = result;
      HV *hv = (HV*)sv_2mortal((SV*)newHV());
      if ( stringarray != NULL ) {
        while (*stringarray != NULL ) {
          char const *valptr;
          char *keyptr;
          valptr = CPLParseNameValue( *stringarray, &keyptr );
          if ( valptr != 0 ) {
            hv_store(hv, keyptr, strlen(keyptr), newSVpv(valptr, strlen(valptr)), 0);
            CPLFree( keyptr );
          }
          stringarray++;
        }
      }
      ST(argvi) = newRV((SV*)hv);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Group_CreateGroup) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    char **arg3 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    GDALGroupHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: Group_CreateGroup(self,name,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_CreateGroup" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_CreateGroup" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALGroupHS *)GDALGroupHS_CreateGroup(arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALGroupHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_CreateDimension) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    unsigned long long arg5 ;
    char **arg6 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    unsigned long long val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    GDALDimensionHS *result = 0 ;
    dXSARGS;
    
    if ((items < 5) || (items > 6)) {
      SWIG_croak("Usage: Group_CreateDimension(self,name,type,direction,size,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_CreateDimension" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_CreateDimension" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Group_CreateDimension" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Group_CreateDimension" "', argument " "4"" of type '" "char const *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
    ecode5 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Group_CreateDimension" "', argument " "5"" of type '" "unsigned long long""'");
    } 
    arg5 = static_cast< unsigned long long >(val5);
    if (items > 5) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(5)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddString(arg6, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(5)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(5));
              SV *sv;
              char *key;
              I32 klen;
              arg6 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddNameValue(arg6, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDimensionHS *)GDALGroupHS_CreateDimension(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDimensionHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Group_CreateAttribute) {
  {
    GDALGroupHS *arg1 = (GDALGroupHS *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    GUIntBig *arg4 = (GUIntBig *) 0 ;
    GDALExtendedDataTypeHS *arg5 = (GDALExtendedDataTypeHS *) 0 ;
    char **arg6 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    GDALAttributeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 5)) {
      SWIG_croak("Usage: Group_CreateAttribute(self,name,nDimensions,dimensions,data_type,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGroupHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_CreateAttribute" "', argument " "1"" of type '" "GDALGroupHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALGroupHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_CreateAttribute" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      /* %typemap(in,numinputs=1) (int nList, GUIntBig* pList) */
      if (!(SvROK(ST(2)) && (SvTYPE(SvRV(ST(2)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(2)));
      arg3 = av_len(av)+1;
      arg4 = (GUIntBig*)CPLMalloc(arg3*sizeof(GUIntBig));
      if (arg4) {
        for( int i = 0; i<arg3; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          arg4[i] =  CPLScanUIntBig(SvPV_nolen(*sv), 30);
        }
      } else
      SWIG_fail;
    }
    res5 = SWIG_ConvertPtr(ST(3), &argp5,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Group_CreateAttribute" "', argument " "5"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg5 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp5);
    if (items > 4) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(4)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddString(arg6, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(4)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(4));
              SV *sv;
              char *key;
              I32 klen;
              arg6 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddNameValue(arg6, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALAttributeHS *)GDALGroupHS_CreateAttribute(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALAttributeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) (int nList, GUIntBig* pList) */
      CPLFree((void*) arg4);
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) (int nList, GUIntBig* pList) */
      CPLFree((void*) arg4);
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Statistics_min_get) {
  {
    Statistics *arg1 = (Statistics *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Statistics_min_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Statistics, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Statistics_min_get" "', argument " "1"" of type '" "Statistics *""'"); 
    }
    arg1 = reinterpret_cast< Statistics * >(argp1);
    result = (double) ((arg1)->min);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Statistics_max_get) {
  {
    Statistics *arg1 = (Statistics *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Statistics_max_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Statistics, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Statistics_max_get" "', argument " "1"" of type '" "Statistics *""'"); 
    }
    arg1 = reinterpret_cast< Statistics * >(argp1);
    result = (double) ((arg1)->max);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Statistics_mean_get) {
  {
    Statistics *arg1 = (Statistics *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Statistics_mean_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Statistics, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Statistics_mean_get" "', argument " "1"" of type '" "Statistics *""'"); 
    }
    arg1 = reinterpret_cast< Statistics * >(argp1);
    result = (double) ((arg1)->mean);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Statistics_std_dev_get) {
  {
    Statistics *arg1 = (Statistics *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Statistics_std_dev_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Statistics, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Statistics_std_dev_get" "', argument " "1"" of type '" "Statistics *""'"); 
    }
    arg1 = reinterpret_cast< Statistics * >(argp1);
    result = (double) ((arg1)->std_dev);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Statistics_valid_count_get) {
  {
    Statistics *arg1 = (Statistics *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GIntBig result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Statistics_valid_count_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Statistics, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Statistics_valid_count_get" "', argument " "1"" of type '" "Statistics *""'"); 
    }
    arg1 = reinterpret_cast< Statistics * >(argp1);
    result =  ((arg1)->valid_count);
    {
      char temp[256];
      sprintf(temp, "" CPL_FRMT_GIB "", result);
      ST(argvi) = sv_2mortal(newSVpv(temp, 0));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Statistics) {
  {
    Statistics *arg1 = (Statistics *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Statistics(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Statistics, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Statistics" "', argument " "1"" of type '" "Statistics *""'"); 
    }
    arg1 = reinterpret_cast< Statistics * >(argp1);
    {
      CPLErrorReset();
      delete_Statistics(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Statistics) {
  {
    int argvi = 0;
    Statistics *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Statistics();");
    }
    {
      CPLErrorReset();
      result = (Statistics *)new Statistics();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Statistics, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_MDArray) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_MDArray(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MDArray" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      delete_GDALMDArrayHS(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetName) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetName" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALMDArrayHS_GetName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetFullName) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetFullName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetFullName" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALMDArrayHS_GetFullName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetTotalElementsCount) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetTotalElementsCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetTotalElementsCount" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (unsigned long long)GDALMDArrayHS_GetTotalElementsCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetDimensionCount) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetDimensionCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetDimensionCount" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = GDALMDArrayHS_GetDimensionCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetDataType) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALExtendedDataTypeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetDataType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetDataType" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALExtendedDataTypeHS *)GDALMDArrayHS_GetDataType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALExtendedDataTypeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetStructuralInfo) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetStructuralInfo(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetStructuralInfo" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (char **)GDALMDArrayHS_GetStructuralInfo(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **dict */
      char **stringarray = result;
      HV *hv = (HV*)sv_2mortal((SV*)newHV());
      if ( stringarray != NULL ) {
        while (*stringarray != NULL ) {
          char const *valptr;
          char *keyptr;
          valptr = CPLParseNameValue( *stringarray, &keyptr );
          if ( valptr != 0 ) {
            hv_store(hv, keyptr, strlen(keyptr), newSVpv(valptr, strlen(valptr)), 0);
            CPLFree( keyptr );
          }
          stringarray++;
        }
      }
      ST(argvi) = newRV((SV*)hv);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetAttribute) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    GDALAttributeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MDArray_GetAttribute(self,name);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetAttribute" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDArray_GetAttribute" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALAttributeHS *)GDALMDArrayHS_GetAttribute(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALAttributeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_CreateAttribute) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    GUIntBig *arg4 = (GUIntBig *) 0 ;
    GDALExtendedDataTypeHS *arg5 = (GDALExtendedDataTypeHS *) 0 ;
    char **arg6 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    GDALAttributeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 5)) {
      SWIG_croak("Usage: MDArray_CreateAttribute(self,name,nDimensions,dimensions,data_type,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_CreateAttribute" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDArray_CreateAttribute" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      /* %typemap(in,numinputs=1) (int nList, GUIntBig* pList) */
      if (!(SvROK(ST(2)) && (SvTYPE(SvRV(ST(2)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(2)));
      arg3 = av_len(av)+1;
      arg4 = (GUIntBig*)CPLMalloc(arg3*sizeof(GUIntBig));
      if (arg4) {
        for( int i = 0; i<arg3; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          arg4[i] =  CPLScanUIntBig(SvPV_nolen(*sv), 30);
        }
      } else
      SWIG_fail;
    }
    res5 = SWIG_ConvertPtr(ST(3), &argp5,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MDArray_CreateAttribute" "', argument " "5"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg5 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp5);
    if (items > 4) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(4)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddString(arg6, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(4)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(4));
              SV *sv;
              char *key;
              I32 klen;
              arg6 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddNameValue(arg6, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALAttributeHS *)GDALMDArrayHS_CreateAttribute(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALAttributeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) (int nList, GUIntBig* pList) */
      CPLFree((void*) arg4);
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    {
      /* %typemap(freearg) (int nList, GUIntBig* pList) */
      CPLFree((void*) arg4);
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetNoDataValueAsDouble) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    double *arg2 = (double *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double tmpval2 ;
    int tmphasval2 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double *val, int *hasval) */
      arg2 = &tmpval2;
      arg3 = &tmphasval2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetNoDataValueAsDouble(self,hasval);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetNoDataValueAsDouble" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      GDALMDArrayHS_GetNoDataValueAsDouble(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double *val, int *hasval) */
      if (GIMME_V == G_ARRAY) {
        EXTEND(SP, argvi+2-items+1);
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi), *arg2);
        argvi++;
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi), *arg3);
        argvi++;
      } else {
        if ( *arg3 ) {
          ST(argvi) = sv_newmortal();
          sv_setnv(ST(argvi), *arg2);
          argvi++;
        }
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetNoDataValueAsString) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetNoDataValueAsString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetNoDataValueAsString" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)GDALMDArrayHS_GetNoDataValueAsString(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_SetNoDataValueDouble) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MDArray_SetNoDataValueDouble(self,d);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_SetNoDataValueDouble" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDArray_SetNoDataValueDouble" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALMDArrayHS_SetNoDataValueDouble(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_SetNoDataValueString) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MDArray_SetNoDataValueString(self,nodata);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_SetNoDataValueString" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDArray_SetNoDataValueString" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALMDArrayHS_SetNoDataValueString(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_DeleteNoDataValue) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_DeleteNoDataValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_DeleteNoDataValue" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (CPLErr)GDALMDArrayHS_DeleteNoDataValue(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetOffset) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    double *arg2 = (double *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double tmpval2 ;
    int tmphasval2 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double *val, int *hasval) */
      arg2 = &tmpval2;
      arg3 = &tmphasval2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetOffset(self,hasval);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetOffset" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      GDALMDArrayHS_GetOffset(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double *val, int *hasval) */
      if (GIMME_V == G_ARRAY) {
        EXTEND(SP, argvi+2-items+1);
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi), *arg2);
        argvi++;
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi), *arg3);
        argvi++;
      } else {
        if ( *arg3 ) {
          ST(argvi) = sv_newmortal();
          sv_setnv(ST(argvi), *arg2);
          argvi++;
        }
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetOffsetStorageType) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALDataType result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetOffsetStorageType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetOffsetStorageType" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALDataType)GDALMDArrayHS_GetOffsetStorageType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetScale) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    double *arg2 = (double *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double tmpval2 ;
    int tmphasval2 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double *val, int *hasval) */
      arg2 = &tmpval2;
      arg3 = &tmphasval2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetScale(self,hasval);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetScale" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      GDALMDArrayHS_GetScale(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double *val, int *hasval) */
      if (GIMME_V == G_ARRAY) {
        EXTEND(SP, argvi+2-items+1);
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi), *arg2);
        argvi++;
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi), *arg3);
        argvi++;
      } else {
        if ( *arg3 ) {
          ST(argvi) = sv_newmortal();
          sv_setnv(ST(argvi), *arg2);
          argvi++;
        }
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetScaleStorageType) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALDataType result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetScaleStorageType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetScaleStorageType" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALDataType)GDALMDArrayHS_GetScaleStorageType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_SetOffset) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    double arg2 ;
    GDALDataType arg3 = (GDALDataType) GDT_Unknown ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: MDArray_SetOffset(self,val,storageType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_SetOffset" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDArray_SetOffset" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (items > 2) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MDArray_SetOffset" "', argument " "3"" of type '" "GDALDataType""'");
      } 
      arg3 = static_cast< GDALDataType >(val3);
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALMDArrayHS_SetOffset(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_SetScale) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    double arg2 ;
    GDALDataType arg3 = (GDALDataType) GDT_Unknown ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: MDArray_SetScale(self,val,storageType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_SetScale" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDArray_SetScale" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (items > 2) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MDArray_SetScale" "', argument " "3"" of type '" "GDALDataType""'");
      } 
      arg3 = static_cast< GDALDataType >(val3);
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALMDArrayHS_SetScale(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_SetUnit) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MDArray_SetUnit(self,unit);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_SetUnit" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDArray_SetUnit" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALMDArrayHS_SetUnit(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetUnit) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetUnit(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetUnit" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALMDArrayHS_GetUnit(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_SetSpatialRef) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    OGRErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MDArray_SetSpatialRef(self,srs);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_SetSpatialRef" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_OSRSpatialReferenceShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDArray_SetSpatialRef" "', argument " "2"" of type '" "OSRSpatialReferenceShadow *""'"); 
    }
    arg2 = reinterpret_cast< OSRSpatialReferenceShadow * >(argp2);
    {
      CPLErrorReset();
      result = (OGRErr)GDALMDArrayHS_SetSpatialRef(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) OGRErr */
      if ( result != 0 ) {
        const char *err = CPLGetLastErrorMsg();
        if (err and *err) do_confess(err, 0); /* this is usually better */
        do_confess( OGRErrMessages(result), 1 );
      }
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetSpatialRef) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    OSRSpatialReferenceShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetSpatialRef(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetSpatialRef" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (OSRSpatialReferenceShadow *)GDALMDArrayHS_GetSpatialRef(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OSRSpatialReferenceShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetView) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MDArray_GetView(self,viewExpr);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetView" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDArray_GetView" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALMDArrayHS_GetView(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_Transpose) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    int arg2 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MDArray_Transpose(self,nList,pList);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_Transpose" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      /* %typemap(in,numinputs=1) (int nList, int* pList) */
      if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(1)));
      arg2 = av_len(av)+1;
      arg3 = (int*)CPLMalloc(arg2*sizeof(int));
      if (arg3) {
        for( int i = 0; i<arg2; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          arg3[i] =  SvIV(*sv);
        }
      } else
      SWIG_fail;
    }
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALMDArrayHS_Transpose(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg3);
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg3);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetUnscaled) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MDArray_GetUnscaled(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetUnscaled" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALMDArrayHS_GetUnscaled(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetMask) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    char **arg2 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: MDArray_GetMask(self,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetMask" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALMDArrayHS_GetMask(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_AsClassicDataset) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    size_t arg2 ;
    size_t arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    size_t val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: MDArray_AsClassicDataset(self,iXDim,iYDim);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_AsClassicDataset" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDArray_AsClassicDataset" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MDArray_AsClassicDataset" "', argument " "3"" of type '" "size_t""'");
    } 
    arg3 = static_cast< size_t >(val3);
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)GDALMDArrayHS_AsClassicDataset(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_GetStatistics) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    bool arg2 = (bool) FALSE ;
    bool arg3 = (bool) TRUE ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    Statistics *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    if ((items < 1) || (items > 5)) {
      SWIG_croak("Usage: MDArray_GetStatistics(self,approx_ok,force,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_GetStatistics" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    if (items > 1) {
      ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDArray_GetStatistics" "', argument " "2"" of type '" "bool""'");
      } 
      arg2 = static_cast< bool >(val2);
    }
    if (items > 2) {
      ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MDArray_GetStatistics" "', argument " "3"" of type '" "bool""'");
      } 
      arg3 = static_cast< bool >(val3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      CPLErrorReset();
      result = (Statistics *)GDALMDArrayHS_GetStatistics(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Statistics, 0 | SWIG_SHADOW); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_ComputeStatistics) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    bool arg2 = (bool) FALSE ;
    GDALProgressFunc arg3 = (GDALProgressFunc) NULL ;
    void *arg4 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Statistics *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg4 = (void *)(&saved_env);
    if ((items < 1) || (items > 4)) {
      SWIG_croak("Usage: MDArray_ComputeStatistics(self,approx_ok,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_ComputeStatistics" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    if (items > 1) {
      ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDArray_ComputeStatistics" "', argument " "2"" of type '" "bool""'");
      } 
      arg2 = static_cast< bool >(val2);
    }
    if (items > 2) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(2);
              arg3 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(3)))
        saved_env.data = (SV *)ST(3);
      }
    }
    {
      CPLErrorReset();
      result = (Statistics *)GDALMDArrayHS_ComputeStatistics(arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Statistics, 0 | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MDArray_Cache) {
  {
    GDALMDArrayHS *arg1 = (GDALMDArrayHS *) 0 ;
    char **arg2 = (char **) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: MDArray_Cache(self,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDArray_Cache" "', argument " "1"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALMDArrayHS * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (bool)GDALMDArrayHS_Cache(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Attribute) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Attribute(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Attribute" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      delete_GDALAttributeHS(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_GetName) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_GetName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_GetName" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALAttributeHS_GetName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_GetFullName) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_GetFullName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_GetFullName" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALAttributeHS_GetFullName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_GetTotalElementsCount) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_GetTotalElementsCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_GetTotalElementsCount" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = (unsigned long long)GDALAttributeHS_GetTotalElementsCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_GetDimensionCount) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_GetDimensionCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_GetDimensionCount" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = GDALAttributeHS_GetDimensionCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_GetDataType) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALExtendedDataTypeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_GetDataType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_GetDataType" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALExtendedDataTypeHS *)GDALAttributeHS_GetDataType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALExtendedDataTypeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_ReadAsString) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_ReadAsString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_ReadAsString" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALAttributeHS_ReadAsString(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_ReadAsInt) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_ReadAsInt(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_ReadAsInt" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALAttributeHS_ReadAsInt(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_ReadAsDouble) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_ReadAsDouble(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_ReadAsDouble" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = (double)GDALAttributeHS_ReadAsDouble(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_ReadAsStringArray) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Attribute_ReadAsStringArray(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_ReadAsStringArray" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      CPLErrorReset();
      result = (char **)GDALAttributeHS_ReadAsStringArray(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **CSL */
      if (GIMME_V == G_ARRAY) {
        if (result) {
          int n = CSLCount(result);
          EXTEND(SP, argvi+n-items+1);
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            ST(argvi++) = sv_2mortal(sv);
          }
          CSLDestroy(result);
        }
      } else {
        AV *av = (AV*)sv_2mortal((SV*)newAV());
        if (result) {
          int i;
          for (i = 0; result[i]; i++) {
            SV *sv = newSVpv(result[i], 0);
            SvUTF8_on(sv); /* expecting GDAL to give us UTF-8 */
            av_push(av, sv);
          }
          CSLDestroy(result);
        }
        ST(argvi) = newRV((SV*)av);
        sv_2mortal(ST(argvi));
        argvi++;
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_WriteString) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Attribute_WriteString(self,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_WriteString" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Attribute_WriteString" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALAttributeHS_WriteString(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_WriteStringArray) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    char **arg2 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Attribute_WriteStringArray(self,vals);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_WriteStringArray" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(1))) {
        if (SvROK(ST(1))) {
          if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(1)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg2 = CSLAddString(arg2, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(1));
            SV *sv;
            char *key;
            I32 klen;
            arg2 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg2 = CSLAddNameValue(arg2, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALAttributeHS_WriteStringArray(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_WriteInt) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Attribute_WriteInt(self,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_WriteInt" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Attribute_WriteInt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALAttributeHS_WriteInt(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Attribute_WriteDouble) {
  {
    GDALAttributeHS *arg1 = (GDALAttributeHS *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Attribute_WriteDouble(self,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALAttributeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Attribute_WriteDouble" "', argument " "1"" of type '" "GDALAttributeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALAttributeHS * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Attribute_WriteDouble" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALAttributeHS_WriteDouble(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Dimension) {
  {
    GDALDimensionHS *arg1 = (GDALDimensionHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Dimension(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDimensionHS, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dimension" "', argument " "1"" of type '" "GDALDimensionHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALDimensionHS * >(argp1);
    {
      CPLErrorReset();
      delete_GDALDimensionHS(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dimension_GetName) {
  {
    GDALDimensionHS *arg1 = (GDALDimensionHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dimension_GetName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDimensionHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimension_GetName" "', argument " "1"" of type '" "GDALDimensionHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALDimensionHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALDimensionHS_GetName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dimension_GetFullName) {
  {
    GDALDimensionHS *arg1 = (GDALDimensionHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dimension_GetFullName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDimensionHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimension_GetFullName" "', argument " "1"" of type '" "GDALDimensionHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALDimensionHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALDimensionHS_GetFullName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dimension_GetType) {
  {
    GDALDimensionHS *arg1 = (GDALDimensionHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dimension_GetType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDimensionHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimension_GetType" "', argument " "1"" of type '" "GDALDimensionHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALDimensionHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALDimensionHS_GetType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dimension_GetDirection) {
  {
    GDALDimensionHS *arg1 = (GDALDimensionHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dimension_GetDirection(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDimensionHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimension_GetDirection" "', argument " "1"" of type '" "GDALDimensionHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALDimensionHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALDimensionHS_GetDirection(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dimension_GetSize) {
  {
    GDALDimensionHS *arg1 = (GDALDimensionHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dimension_GetSize(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDimensionHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimension_GetSize" "', argument " "1"" of type '" "GDALDimensionHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALDimensionHS * >(argp1);
    {
      CPLErrorReset();
      result = (unsigned long long)GDALDimensionHS_GetSize(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dimension_GetIndexingVariable) {
  {
    GDALDimensionHS *arg1 = (GDALDimensionHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Dimension_GetIndexingVariable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDimensionHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimension_GetIndexingVariable" "', argument " "1"" of type '" "GDALDimensionHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALDimensionHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALDimensionHS_GetIndexingVariable(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Dimension_SetIndexingVariable) {
  {
    GDALDimensionHS *arg1 = (GDALDimensionHS *) 0 ;
    GDALMDArrayHS *arg2 = (GDALMDArrayHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Dimension_SetIndexingVariable(self,array);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDimensionHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimension_SetIndexingVariable" "', argument " "1"" of type '" "GDALDimensionHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALDimensionHS * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALMDArrayHS, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dimension_SetIndexingVariable" "', argument " "2"" of type '" "GDALMDArrayHS *""'"); 
    }
    arg2 = reinterpret_cast< GDALMDArrayHS * >(argp2);
    {
      CPLErrorReset();
      result = (bool)GDALDimensionHS_SetIndexingVariable(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ExtendedDataType) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ExtendedDataType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExtendedDataType" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    {
      CPLErrorReset();
      delete_GDALExtendedDataTypeHS(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType__Create) {
  {
    GDALDataType arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    GDALExtendedDataTypeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ExtendedDataType__Create(dt);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ExtendedDataType__Create" "', argument " "1"" of type '" "GDALDataType""'");
    } 
    arg1 = static_cast< GDALDataType >(val1);
    {
      CPLErrorReset();
      result = (GDALExtendedDataTypeHS *)GDALExtendedDataTypeHS_Create(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALExtendedDataTypeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_CreateString) {
  {
    size_t arg1 = (size_t) 0 ;
    GDALExtendedDataTypeSubType arg2 = (GDALExtendedDataTypeSubType) GEDTST_NONE ;
    size_t val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALExtendedDataTypeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: ExtendedDataType_CreateString(nMaxStringLength,eSubType);");
    }
    if (items > 0) {
      ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
      if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ExtendedDataType_CreateString" "', argument " "1"" of type '" "size_t""'");
      } 
      arg1 = static_cast< size_t >(val1);
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtendedDataType_CreateString" "', argument " "2"" of type '" "GDALExtendedDataTypeSubType""'");
      } 
      arg2 = static_cast< GDALExtendedDataTypeSubType >(val2);
    }
    {
      CPLErrorReset();
      result = (GDALExtendedDataTypeHS *)GDALExtendedDataTypeHS_CreateString(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALExtendedDataTypeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_GetName) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ExtendedDataType_GetName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendedDataType_GetName" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALExtendedDataTypeHS_GetName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_GetClass) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALExtendedDataTypeClass result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ExtendedDataType_GetClass(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendedDataType_GetClass" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALExtendedDataTypeClass)GDALExtendedDataTypeHS_GetClass(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_GetNumericDataType) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALDataType result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ExtendedDataType_GetNumericDataType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendedDataType_GetNumericDataType" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALDataType)GDALExtendedDataTypeHS_GetNumericDataType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_GetSize) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ExtendedDataType_GetSize(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendedDataType_GetSize" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    {
      CPLErrorReset();
      result = GDALExtendedDataTypeHS_GetSize(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_GetMaxStringLength) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ExtendedDataType_GetMaxStringLength(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendedDataType_GetMaxStringLength" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    {
      CPLErrorReset();
      result = GDALExtendedDataTypeHS_GetMaxStringLength(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_GetSubType) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALExtendedDataTypeSubType result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ExtendedDataType_GetSubType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendedDataType_GetSubType" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALExtendedDataTypeSubType)GDALExtendedDataTypeHS_GetSubType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_CanConvertTo) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    GDALExtendedDataTypeHS *arg2 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ExtendedDataType_CanConvertTo(self,other);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendedDataType_CanConvertTo" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtendedDataType_CanConvertTo" "', argument " "2"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg2 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (bool)GDALExtendedDataTypeHS_CanConvertTo(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ExtendedDataType_Equals) {
  {
    GDALExtendedDataTypeHS *arg1 = (GDALExtendedDataTypeHS *) 0 ;
    GDALExtendedDataTypeHS *arg2 = (GDALExtendedDataTypeHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ExtendedDataType_Equals(self,other);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtendedDataType_Equals" "', argument " "1"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtendedDataType_Equals" "', argument " "2"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg2 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp2);
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (bool)GDALExtendedDataTypeHS_Equals(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_EDTComponent) {
  {
    GDALEDTComponentHS *arg1 = (GDALEDTComponentHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_EDTComponent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALEDTComponentHS, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EDTComponent" "', argument " "1"" of type '" "GDALEDTComponentHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALEDTComponentHS * >(argp1);
    {
      CPLErrorReset();
      delete_GDALEDTComponentHS(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_EDTComponent__Create) {
  {
    char *arg1 = (char *) 0 ;
    size_t arg2 ;
    GDALExtendedDataTypeHS *arg3 = (GDALExtendedDataTypeHS *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    GDALEDTComponentHS *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: EDTComponent__Create(name,offset,type);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDTComponent__Create" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EDTComponent__Create" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALExtendedDataTypeHS, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDTComponent__Create" "', argument " "3"" of type '" "GDALExtendedDataTypeHS *""'"); 
    }
    arg3 = reinterpret_cast< GDALExtendedDataTypeHS * >(argp3);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALEDTComponentHS *)GDALEDTComponentHS_Create((char const *)arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALEDTComponentHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_EDTComponent_GetName) {
  {
    GDALEDTComponentHS *arg1 = (GDALEDTComponentHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: EDTComponent_GetName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALEDTComponentHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDTComponent_GetName" "', argument " "1"" of type '" "GDALEDTComponentHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALEDTComponentHS * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALEDTComponentHS_GetName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_EDTComponent_GetOffset) {
  {
    GDALEDTComponentHS *arg1 = (GDALEDTComponentHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: EDTComponent_GetOffset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALEDTComponentHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDTComponent_GetOffset" "', argument " "1"" of type '" "GDALEDTComponentHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALEDTComponentHS * >(argp1);
    {
      CPLErrorReset();
      result = GDALEDTComponentHS_GetOffset(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_EDTComponent_GetType) {
  {
    GDALEDTComponentHS *arg1 = (GDALEDTComponentHS *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALExtendedDataTypeHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: EDTComponent_GetType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALEDTComponentHS, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDTComponent_GetType" "', argument " "1"" of type '" "GDALEDTComponentHS *""'"); 
    }
    arg1 = reinterpret_cast< GDALEDTComponentHS * >(argp1);
    {
      CPLErrorReset();
      result = (GDALExtendedDataTypeHS *)GDALEDTComponentHS_GetType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALExtendedDataTypeHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_XSize_get) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_XSize_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_XSize_get" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_XSize_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_YSize_get) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_YSize_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_YSize_get" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_YSize_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_DataType_get) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALDataType result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_DataType_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_DataType_get" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALDataType)GDALRasterBandShadow_DataType_get(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetDataset) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetDataset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetDataset" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)GDALRasterBandShadow_GetDataset(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetBand) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetBand(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetBand" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_GetBand(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetBlockSize) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    dXSARGS;
    
    arg2 = &temp2;
    arg3 = &temp3;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetBlockSize(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetBlockSize" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      GDALRasterBandShadow_GetBlockSize(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetColorInterpretation) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALColorInterp result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetColorInterpretation(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetColorInterpretation" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALColorInterp)GDALRasterBandShadow_GetColorInterpretation(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetRasterColorInterpretation) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALColorInterp result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetRasterColorInterpretation(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetRasterColorInterpretation" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALColorInterp)GDALRasterBandShadow_GetRasterColorInterpretation(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetColorInterpretation) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALColorInterp arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetColorInterpretation(self,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetColorInterpretation" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetColorInterpretation" "', argument " "2"" of type '" "GDALColorInterp""'");
    } 
    arg2 = static_cast< GDALColorInterp >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetColorInterpretation(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetRasterColorInterpretation) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALColorInterp arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetRasterColorInterpretation(self,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetRasterColorInterpretation" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetRasterColorInterpretation" "', argument " "2"" of type '" "GDALColorInterp""'");
    } 
    arg2 = static_cast< GDALColorInterp >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetRasterColorInterpretation(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetNoDataValue) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double *arg2 = (double *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double tmpval2 ;
    int tmphasval2 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double *val, int *hasval) */
      arg2 = &tmpval2;
      arg3 = &tmphasval2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetNoDataValue(self,hasval);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetNoDataValue" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      GDALRasterBandShadow_GetNoDataValue(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double *val, int *hasval) */
      if (GIMME_V == G_ARRAY) {
        EXTEND(SP, argvi+2-items+1);
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi), *arg2);
        argvi++;
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi), *arg3);
        argvi++;
      } else {
        if ( *arg3 ) {
          ST(argvi) = sv_newmortal();
          sv_setnv(ST(argvi), *arg2);
          argvi++;
        }
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetNoDataValue) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetNoDataValue(self,d);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetNoDataValue" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetNoDataValue" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetNoDataValue(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_DeleteNoDataValue) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_DeleteNoDataValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_DeleteNoDataValue" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_DeleteNoDataValue(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetUnitType) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetUnitType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetUnitType" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (char *)GDALRasterBandShadow_GetUnitType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetUnitType) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetUnitType(self,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetUnitType" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Band_SetUnitType" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetUnitType(arg1,(char const *)arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetRasterCategoryNames) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetRasterCategoryNames(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetRasterCategoryNames" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (char **)GDALRasterBandShadow_GetRasterCategoryNames(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **options -> ( string ) */
      AV* av = (AV*)sv_2mortal((SV*)newAV());
      char **stringarray = result;
      if ( stringarray != NULL ) {
        int n = CSLCount( stringarray );
        for ( int i = 0; i < n; i++ ) {
          SV *sv = newSVpv(stringarray[i], 0);
          SvUTF8_on(sv); /* expecting UTF-8 from GDAL */
          if (!av_store(av, i, sv))
          SvREFCNT_dec(sv);
        }
      }
      ST(argvi) = newRV((SV*)av);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetRasterCategoryNames) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    char **arg2 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetRasterCategoryNames(self,names);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetRasterCategoryNames" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(1))) {
        if (SvROK(ST(1))) {
          if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(1)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg2 = CSLAddString(arg2, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(1));
            SV *sv;
            char *key;
            I32 klen;
            arg2 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg2 = CSLAddNameValue(arg2, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetRasterCategoryNames(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetMinimum) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double *arg2 = (double *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double tmpval2 ;
    int tmphasval2 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double *val, int *hasval) */
      arg2 = &tmpval2;
      arg3 = &tmphasval2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetMinimum(self,hasval);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetMinimum" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      GDALRasterBandShadow_GetMinimum(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double *val, int *hasval) */
      if (GIMME_V == G_ARRAY) {
        EXTEND(SP, argvi+2-items+1);
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi), *arg2);
        argvi++;
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi), *arg3);
        argvi++;
      } else {
        if ( *arg3 ) {
          ST(argvi) = sv_newmortal();
          sv_setnv(ST(argvi), *arg2);
          argvi++;
        }
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetMaximum) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double *arg2 = (double *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double tmpval2 ;
    int tmphasval2 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double *val, int *hasval) */
      arg2 = &tmpval2;
      arg3 = &tmphasval2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetMaximum(self,hasval);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetMaximum" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      GDALRasterBandShadow_GetMaximum(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double *val, int *hasval) */
      if (GIMME_V == G_ARRAY) {
        EXTEND(SP, argvi+2-items+1);
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi), *arg2);
        argvi++;
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi), *arg3);
        argvi++;
      } else {
        if ( *arg3 ) {
          ST(argvi) = sv_newmortal();
          sv_setnv(ST(argvi), *arg2);
          argvi++;
        }
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetOffset) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double *arg2 = (double *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double tmpval2 ;
    int tmphasval2 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double *val, int *hasval) */
      arg2 = &tmpval2;
      arg3 = &tmphasval2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetOffset(self,hasval);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetOffset" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      GDALRasterBandShadow_GetOffset(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double *val, int *hasval) */
      if (GIMME_V == G_ARRAY) {
        EXTEND(SP, argvi+2-items+1);
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi), *arg2);
        argvi++;
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi), *arg3);
        argvi++;
      } else {
        if ( *arg3 ) {
          ST(argvi) = sv_newmortal();
          sv_setnv(ST(argvi), *arg2);
          argvi++;
        }
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetScale) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double *arg2 = (double *) 0 ;
    int *arg3 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double tmpval2 ;
    int tmphasval2 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double *val, int *hasval) */
      arg2 = &tmpval2;
      arg3 = &tmphasval2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetScale(self,hasval);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetScale" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      GDALRasterBandShadow_GetScale(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double *val, int *hasval) */
      if (GIMME_V == G_ARRAY) {
        EXTEND(SP, argvi+2-items+1);
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi), *arg2);
        argvi++;
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi), *arg3);
        argvi++;
      } else {
        if ( *arg3 ) {
          ST(argvi) = sv_newmortal();
          sv_setnv(ST(argvi), *arg2);
          argvi++;
        }
      }
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetOffset) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetOffset(self,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetOffset" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetOffset" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetOffset(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetScale) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetScale(self,val);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetScale" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetScale" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetScale(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) CPLErr */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetStatistics) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    double *arg7 = (double *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    double temp4 ;
    int res4 = SWIG_TMPOBJ ;
    double temp5 ;
    int res5 = SWIG_TMPOBJ ;
    double temp6 ;
    int res6 = SWIG_TMPOBJ ;
    double temp7 ;
    int res7 = SWIG_TMPOBJ ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    arg4 = &temp4;
    arg5 = &temp5;
    arg6 = &temp6;
    arg7 = &temp7;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Band_GetStatistics(self,approx_ok,force);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetStatistics" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_GetStatistics" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_GetStatistics" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_GetStatistics(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) IF_ERROR_RETURN_NONE */
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res7)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg7)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_ComputeStatistics) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    bool arg2 ;
    double *arg3 = (double *) NULL ;
    double *arg4 = (double *) NULL ;
    double *arg5 = (double *) NULL ;
    double *arg6 = (double *) NULL ;
    GDALProgressFunc arg7 = (GDALProgressFunc) NULL ;
    void *arg8 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    double temp3 ;
    int res3 = SWIG_TMPOBJ ;
    double temp4 ;
    int res4 = SWIG_TMPOBJ ;
    double temp5 ;
    int res5 = SWIG_TMPOBJ ;
    double temp6 ;
    int res6 = SWIG_TMPOBJ ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg8 = (void *)(&saved_env);
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    arg6 = &temp6;
    if ((items < 2) || (items > 4)) {
      SWIG_croak("Usage: Band_ComputeStatistics(self,approx_ok,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ComputeStatistics" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_ComputeStatistics" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (items > 2) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(2);
              arg7 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(3)))
        saved_env.data = (SV *)ST(3);
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_ComputeStatistics(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) IF_ERROR_RETURN_NONE */
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetStatistics) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: Band_SetStatistics(self,min,max,mean,stddev);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetStatistics" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetStatistics" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_SetStatistics" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Band_SetStatistics" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Band_SetStatistics" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetStatistics(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetOverviewCount) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetOverviewCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetOverviewCount" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_GetOverviewCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band__GetOverview) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALRasterBandShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band__GetOverview(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band__GetOverview" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band__GetOverview" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (GDALRasterBandShadow *)GDALRasterBandShadow_GetOverview(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterBandShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_Checksum) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int val5 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 5)) {
      SWIG_croak("Usage: Band_Checksum(self,xoff,yoff,xsize,ysize);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_Checksum" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_Checksum" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    if (items > 2) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_Checksum" "', argument " "3"" of type '" "int""'");
      } 
      arg3 = static_cast< int >(val3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(3)) ) {
          arg4 = 0;
        }
        else {
          val4 = SvIV(ST(3));
          arg4 = (int *)&val4;
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(4)) ) {
          arg5 = 0;
        }
        else {
          val5 = SvIV(ST(4));
          arg5 = (int *)&val5;
        }
      }
    }
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_Checksum(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_ComputeRasterMinMax) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double *arg2 ;
    int arg3 = (int) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double argout2[2] ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double argout2[ANY]) */
      arg2 = argout2;
    }
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: Band_ComputeRasterMinMax(self,approx_ok);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ComputeRasterMinMax" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    if (items > 1) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_ComputeRasterMinMax" "', argument " "3"" of type '" "int""'");
      } 
      arg3 = static_cast< int >(val3);
    }
    {
      CPLErrorReset();
      GDALRasterBandShadow_ComputeRasterMinMax(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double argout[ANY]) */
      if (GIMME_V == G_ARRAY) {
        /* return a list */
        int i;
        EXTEND(SP, argvi+2-items+1);
        for (i = 0; i < 2; i++)
        ST(argvi++) = sv_2mortal(newSVnv(arg2[i]));
      } else {
        ST(argvi) = CreateArrayFromDoubleArray( arg2, 2 );
        argvi++;
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_ComputeBandStats) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double *arg2 ;
    int arg3 = (int) 1 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double argout2[2] ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double argout2[ANY]) */
      arg2 = argout2;
    }
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: Band_ComputeBandStats(self,samplestep);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ComputeBandStats" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    if (items > 1) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_ComputeBandStats" "', argument " "3"" of type '" "int""'");
      } 
      arg3 = static_cast< int >(val3);
    }
    {
      CPLErrorReset();
      GDALRasterBandShadow_ComputeBandStats(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) (double argout[ANY]) */
      if (GIMME_V == G_ARRAY) {
        /* return a list */
        int i;
        EXTEND(SP, argvi+2-items+1);
        for (i = 0; i < 2; i++)
        ST(argvi++) = sv_2mortal(newSVnv(arg2[i]));
      } else {
        ST(argvi) = CreateArrayFromDoubleArray( arg2, 2 );
        argvi++;
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_Fill) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 ;
    double arg3 = (double) 0.0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: Band_Fill(self,real_fill,imag_fill);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_Fill" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_Fill" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (items > 2) {
      ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_Fill" "', argument " "3"" of type '" "double""'");
      } 
      arg3 = static_cast< double >(val3);
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_Fill(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band__ReadRaster) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    GIntBig *arg6 = (GIntBig *) 0 ;
    char **arg7 = (char **) 0 ;
    int *arg8 = (int *) 0 ;
    int *arg9 = (int *) 0 ;
    int *arg10 = (int *) 0 ;
    GIntBig *arg11 = (GIntBig *) 0 ;
    GIntBig *arg12 = (GIntBig *) 0 ;
    GDALRIOResampleAlg arg13 = (GDALRIOResampleAlg) GRIORA_NearestNeighbour ;
    GDALProgressFunc arg14 = (GDALProgressFunc) NULL ;
    void *arg15 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    GIntBig nLen6 = 0 ;
    char *pBuf6 = 0 ;
    int val8 ;
    int val9 ;
    int val10 ;
    GIntBig val11 ;
    GIntBig val12 ;
    int val13 ;
    int ecode13 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg15 = (void *)(&saved_env);
    {
      /* %typemap(in,numinputs=0) (GIntBig *nLen6, char **pBuf6 ) */
      arg6 = &nLen6;
      arg7 = &pBuf6;
    }
    if ((items < 5) || (items > 13)) {
      SWIG_croak("Usage: Band__ReadRaster(self,xoff,yoff,xsize,ysize,buf,buf_xsize,buf_ysize,buf_type,buf_pixel_space,buf_line_space,resample_alg,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band__ReadRaster" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band__ReadRaster" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band__ReadRaster" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Band__ReadRaster" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Band__ReadRaster" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    if (items > 5) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(5)) ) {
          arg8 = 0;
        }
        else {
          val8 = SvIV(ST(5));
          arg8 = (int *)&val8;
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(6)) ) {
          arg9 = 0;
        }
        else {
          val9 = SvIV(ST(6));
          arg9 = (int *)&val9;
        }
      }
    }
    if (items > 7) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(7)) ) {
          arg10 = 0;
        }
        else {
          val10 = SvIV(ST(7));
          arg10 = (int *)&val10;
        }
      }
    }
    if (items > 8) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(8)) ) {
          arg11 = 0;
        }
        else {
          val11 = CPLAtoGIntBig(SvPV_nolen(ST(8)));
          arg11 = (GIntBig *)&val11;
        }
      }
    }
    if (items > 9) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(9)) ) {
          arg12 = 0;
        }
        else {
          val12 = CPLAtoGIntBig(SvPV_nolen(ST(9)));
          arg12 = (GIntBig *)&val12;
        }
      }
    }
    if (items > 10) {
      ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val13);
      if (!SWIG_IsOK(ecode13)) {
        SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Band__ReadRaster" "', argument " "13"" of type '" "GDALRIOResampleAlg""'");
      } 
      arg13 = static_cast< GDALRIOResampleAlg >(val13);
    }
    if (items > 11) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(11))) {
          if (SvROK(ST(11))) {
            if (SvTYPE(SvRV(ST(11))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(11);
              arg14 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 12) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(12)))
        saved_env.data = (SV *)ST(12);
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_ReadRaster(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      /* %typemap(argout) (GIntBig *nLen, char **pBuf ) */
      ST(argvi) = sv_2mortal(newSVpv( *arg7, *arg6 ));
      argvi++;
    }
    
    
    
    
    
    {
      /* %typemap(freearg) (GIntBig *nLen, char **pBuf ) */
      if( *arg6 ) {
        free( *arg7 );
      }
    }
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    {
      /* %typemap(freearg) (GIntBig *nLen, char **pBuf ) */
      if( *arg6 ) {
        free( *arg7 );
      }
    }
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band__WriteRaster) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    GIntBig arg6 ;
    char *arg7 = (char *) 0 ;
    int *arg8 = (int *) 0 ;
    int *arg9 = (int *) 0 ;
    GDALDataType *arg10 = (GDALDataType *) 0 ;
    GIntBig *arg11 = (GIntBig *) 0 ;
    GIntBig *arg12 = (GIntBig *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val8 ;
    int val9 ;
    int val10 ;
    GIntBig val11 ;
    GIntBig val12 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 6) || (items > 11)) {
      SWIG_croak("Usage: Band__WriteRaster(self,xoff,yoff,xsize,ysize,buf_len,buf_string,buf_xsize,buf_ysize,buf_type,buf_pixel_space,buf_line_space);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band__WriteRaster" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band__WriteRaster" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band__WriteRaster" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Band__WriteRaster" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Band__WriteRaster" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      /* %typemap(in,numinputs=1) (GIntBig nLen, char *pBuf ) */
      if (SvOK(ST(5))) {
        SV *sv = ST(5);
        if (SvROK(sv) && SvTYPE(SvRV(sv)) < SVt_PVAV)
        sv = SvRV(sv);
        if (!SvPOK(sv))
        do_confess(NEED_BINARY_DATA, 1);
        STRLEN len = SvCUR(sv);
        arg7 = SvPV_nolen(sv);
        arg6 = len;
      } else {
        arg7 = NULL;
        arg6 = 0;
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(6)) ) {
          arg8 = 0;
        }
        else {
          val8 = SvIV(ST(6));
          arg8 = (int *)&val8;
        }
      }
    }
    if (items > 7) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(7)) ) {
          arg9 = 0;
        }
        else {
          val9 = SvIV(ST(7));
          arg9 = (int *)&val9;
        }
      }
    }
    if (items > 8) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(8)) ) {
          arg10 = 0;
        }
        else {
          val10 = SvIV(ST(8));
          arg10 = (GDALDataType *)&val10;
        }
      }
    }
    if (items > 9) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(9)) ) {
          arg11 = 0;
        }
        else {
          val11 = CPLAtoGIntBig(SvPV_nolen(ST(9)));
          arg11 = (GIntBig *)&val11;
        }
      }
    }
    if (items > 10) {
      {
        /* %typemap(in) (GIntBig *optional_GIntBig) */
        if ( !SvOK(ST(10)) ) {
          arg12 = 0;
        }
        else {
          val12 = CPLAtoGIntBig(SvPV_nolen(ST(10)));
          arg12 = (GIntBig *)&val12;
        }
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_WriteRaster(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_FlushCache) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_FlushCache(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_FlushCache" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      GDALRasterBandShadow_FlushCache(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetRasterColorTable) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALColorTableShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetRasterColorTable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetRasterColorTable" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALColorTableShadow *)GDALRasterBandShadow_GetRasterColorTable(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALColorTableShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetColorTable) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALColorTableShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetColorTable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetColorTable" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALColorTableShadow *)GDALRasterBandShadow_GetColorTable(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALColorTableShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetRasterColorTable) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALColorTableShadow *arg2 = (GDALColorTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetRasterColorTable(self,arg);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetRasterColorTable" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Band_SetRasterColorTable" "', argument " "2"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALColorTableShadow * >(argp2);
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_SetRasterColorTable(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetColorTable) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALColorTableShadow *arg2 = (GDALColorTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetColorTable(self,arg);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetColorTable" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Band_SetColorTable" "', argument " "2"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALColorTableShadow * >(argp2);
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_SetColorTable(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetDefaultRAT) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALRasterAttributeTableShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetDefaultRAT(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetDefaultRAT" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALRasterAttributeTableShadow *)GDALRasterBandShadow_GetDefaultRAT(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetDefaultRAT) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterAttributeTableShadow *arg2 = (GDALRasterAttributeTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetDefaultRAT(self,table);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetDefaultRAT" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Band_SetDefaultRAT" "', argument " "2"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp2);
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_SetDefaultRAT(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band__GetMaskBand) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALRasterBandShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band__GetMaskBand(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band__GetMaskBand" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALRasterBandShadow *)GDALRasterBandShadow_GetMaskBand(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterBandShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band__GetMaskFlags) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band__GetMaskFlags(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band__GetMaskFlags" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALRasterBandShadow_GetMaskFlags(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band__CreateMaskBand) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band__CreateMaskBand(self,nFlags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band__CreateMaskBand" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band__CreateMaskBand" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_CreateMaskBand(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band__GetHistogram) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 = (double) -0.5 ;
    double arg3 = (double) 255.5 ;
    int arg4 = (int) 256 ;
    GUIntBig *arg5 = (GUIntBig *) NULL ;
    int arg6 = (int) 0 ;
    int arg7 = (int) 1 ;
    GDALProgressFunc arg8 = (GDALProgressFunc) NULL ;
    void *arg9 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    CPLErr result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg9 = (void *)(&saved_env);
    if ((items < 1) || (items > 8)) {
      SWIG_croak("Usage: Band__GetHistogram(self,min,max,buckets,panHistogram,include_out_of_range,approx_ok,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band__GetHistogram" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    if (items > 1) {
      ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band__GetHistogram" "', argument " "2"" of type '" "double""'");
      } 
      arg2 = static_cast< double >(val2);
    }
    if (items > 2) {
      ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band__GetHistogram" "', argument " "3"" of type '" "double""'");
      } 
      arg3 = static_cast< double >(val3);
    }
    if (items > 3) {
      {
        /* %typemap(in,numinputs=1) (int len, GUIntBig *output) */
        arg4 = SvIV(ST(3));
      }
    }
    if (items > 4) {
      ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Band__GetHistogram" "', argument " "6"" of type '" "int""'");
      } 
      arg6 = static_cast< int >(val6);
    }
    if (items > 5) {
      ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val7);
      if (!SWIG_IsOK(ecode7)) {
        SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Band__GetHistogram" "', argument " "7"" of type '" "int""'");
      } 
      arg7 = static_cast< int >(val7);
    }
    if (items > 6) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(6))) {
          if (SvROK(ST(6))) {
            if (SvTYPE(SvRV(ST(6))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(6);
              arg8 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 7) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(7)))
        saved_env.data = (SV *)ST(7);
      }
    }
    {
      /* %typemap(check) (int len, GUIntBig *output) */
      if (arg4 < 1) arg4 = 1; /* stop idiocy */
      arg5 = (GUIntBig*)CPLMalloc( arg4 * sizeof(GUIntBig) );
      
    }
    _saved[0] = ST(3);
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_GetHistogram(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) IF_ERROR_RETURN_NONE */
    }
    {
      /* %typemap(argout) (int len, GUIntBig *output) */
      if (GIMME_V == G_ARRAY) {
        /* return a list */
        int i;
        EXTEND(SP, argvi+arg4-items+1);
        for (i = 0; i < arg4; i++) {
          char s[LENGTH_OF_GUIntBig_AS_STRING];
          snprintf(s, LENGTH_OF_GUIntBig_AS_STRING-1, CPL_FRMT_GUIB, arg5[i]);
          ST(argvi++) = sv_2mortal(newSVpv(s, 0));
        }
      } else {
        ST(argvi) = CreateArrayFromGUIntBigArray( arg5, arg4 );
        argvi++;
      }
    }
    
    
    
    {
      /* %typemap(freearg) (int len, GUIntBig *output) */
      CPLFree(arg5);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    {
      /* %typemap(freearg) (int len, GUIntBig *output) */
      CPLFree(arg5);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetDefaultHistogram) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double *arg2 = (double *) NULL ;
    double *arg3 = (double *) NULL ;
    int *arg4 = (int *) NULL ;
    GUIntBig **arg5 = (GUIntBig **) NULL ;
    int arg6 = (int) 1 ;
    GDALProgressFunc arg7 = (GDALProgressFunc) NULL ;
    void *arg8 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double temp2 ;
    int res2 = SWIG_TMPOBJ ;
    double temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int nLen4 ;
    GUIntBig *pList4 ;
    int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg8 = (void *)(&saved_env);
    arg2 = &temp2;
    arg3 = &temp3;
    {
      /* %typemap(in,numinputs=0) (int *nLen4, const GUIntBig **pList4) */
      arg4 = &nLen4;
      arg5 = &pList4;
    }
    if ((items < 1) || (items > 4)) {
      SWIG_croak("Usage: Band_GetDefaultHistogram(self,ppanHistogram,force,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetDefaultHistogram" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    if (items > 1) {
      ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Band_GetDefaultHistogram" "', argument " "6"" of type '" "int""'");
      } 
      arg6 = static_cast< int >(val6);
    }
    if (items > 2) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(2);
              arg7 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(3)))
        saved_env.data = (SV *)ST(3);
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_GetDefaultHistogram(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) IF_ERROR_RETURN_NONE */
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    {
      /* %typemap(argout) (int *nLen, const GUIntBig **pList) */
      ST(argvi) = CreateArrayFromGUIntBigArray( *(arg5), *(arg4) );
      argvi++;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetDefaultHistogram) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 ;
    double arg3 ;
    int arg4 ;
    GUIntBig *arg5 = (GUIntBig *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Band_SetDefaultHistogram(self,min,max,buckets_in,panHistogram_in);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetDefaultHistogram" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_SetDefaultHistogram" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_SetDefaultHistogram" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      /* %typemap(in,numinputs=1) (int nList, GUIntBig* pList) */
      if (!(SvROK(ST(3)) && (SvTYPE(SvRV(ST(3)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(3)));
      arg4 = av_len(av)+1;
      arg5 = (GUIntBig*)CPLMalloc(arg4*sizeof(GUIntBig));
      if (arg5) {
        for( int i = 0; i<arg4; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          arg5[i] =  CPLScanUIntBig(SvPV_nolen(*sv), 30);
        }
      } else
      SWIG_fail;
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetDefaultHistogram(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    {
      /* %typemap(freearg) (int nList, GUIntBig* pList) */
      CPLFree((void*) arg5);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      /* %typemap(freearg) (int nList, GUIntBig* pList) */
      CPLFree((void*) arg5);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Band_HasArbitraryOverviews) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_HasArbitraryOverviews(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_HasArbitraryOverviews" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (bool)GDALRasterBandShadow_HasArbitraryOverviews(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_GetCategoryNames) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_GetCategoryNames(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_GetCategoryNames" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (char **)GDALRasterBandShadow_GetCategoryNames(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **options -> ( string ) */
      AV* av = (AV*)sv_2mortal((SV*)newAV());
      char **stringarray = result;
      if ( stringarray != NULL ) {
        int n = CSLCount( stringarray );
        for ( int i = 0; i < n; i++ ) {
          SV *sv = newSVpv(stringarray[i], 0);
          SvUTF8_on(sv); /* expecting UTF-8 from GDAL */
          if (!av_store(av, i, sv))
          SvREFCNT_dec(sv);
        }
      }
      ST(argvi) = newRV((SV*)av);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_SetCategoryNames) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    char **arg2 = (char **) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Band_SetCategoryNames(self,papszCategoryNames);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_SetCategoryNames" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(1))) {
        if (SvROK(ST(1))) {
          if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(1)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg2 = CSLAddString(arg2, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(1));
            SV *sv;
            char *key;
            I32 klen;
            arg2 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg2 = CSLAddNameValue(arg2, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_SetCategoryNames(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Band_AdviseRead) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int *arg6 = (int *) 0 ;
    int *arg7 = (int *) 0 ;
    GDALDataType *arg8 = (GDALDataType *) 0 ;
    char **arg9 = (char **) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    int val8 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 5) || (items > 9)) {
      SWIG_croak("Usage: Band_AdviseRead(self,xoff,yoff,xsize,ysize,buf_xsize,buf_ysize,buf_type,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_AdviseRead" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_AdviseRead" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_AdviseRead" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Band_AdviseRead" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Band_AdviseRead" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    if (items > 5) {
      res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_int, 0 |  0 );
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Band_AdviseRead" "', argument " "6"" of type '" "int *""'"); 
      }
      arg6 = reinterpret_cast< int * >(argp6);
    }
    if (items > 6) {
      res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_int, 0 |  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Band_AdviseRead" "', argument " "7"" of type '" "int *""'"); 
      }
      arg7 = reinterpret_cast< int * >(argp7);
    }
    if (items > 7) {
      {
        /* %typemap(in) (int *optional_int) */
        if ( !SvOK(ST(7)) ) {
          arg8 = 0;
        }
        else {
          val8 = SvIV(ST(7));
          arg8 = (GDALDataType *)&val8;
        }
      }
    }
    if (items > 8) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(8))) {
          if (SvROK(ST(8))) {
            if (SvTYPE(SvRV(ST(8)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(8)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg9 = CSLAddString(arg9, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(8)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(8));
              SV *sv;
              char *key;
              I32 klen;
              arg9 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg9 = CSLAddNameValue(arg9, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_AdviseRead(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg9) CSLDestroy( arg9 );
    }
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg9) CSLDestroy( arg9 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_Band_AsMDArray) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALMDArrayHS *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Band_AsMDArray(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_AsMDArray" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALMDArrayHS *)GDALRasterBandShadow_AsMDArray(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMDArrayHS, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_ContourGenerate) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 ;
    double arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int arg6 ;
    double arg7 ;
    OGRLayerShadow *arg8 = (OGRLayerShadow *) 0 ;
    int arg9 ;
    int arg10 ;
    GDALProgressFunc arg11 = (GDALProgressFunc) NULL ;
    void *arg12 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    void *argp11 ;
    int res11 = 0 ;
    int res12 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    if ((items < 8) || (items > 10)) {
      SWIG_croak("Usage: Band_ContourGenerate(self,dfContourInterval,dfContourBase,nFixedLevelCount,padfFixedLevels,bUseNoData,dfNoDataValue,hLayer,iIDField,iElevField,progress,progress_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ContourGenerate" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Band_ContourGenerate" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Band_ContourGenerate" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      /* %typemap(in,numinputs=1) (int nList, double* pList) */
      if (!(SvROK(ST(3)) && (SvTYPE(SvRV(ST(3)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(3)));
      arg4 = av_len(av)+1;
      arg5 = (double*)CPLMalloc(arg4*sizeof(double));
      if (arg5) {
        for( int i = 0; i<arg4; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          arg5[i] =  SvNV(*sv);
        }
      } else
      SWIG_fail;
    }
    {
      /* %typemap(in,numinputs=1) (int defined, double value) */
      arg6 = SvOK(ST(4));
      arg7 = SvNV(ST(4));
    }
    res8 = SWIG_ConvertPtr(ST(5), &argp8,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Band_ContourGenerate" "', argument " "8"" of type '" "OGRLayerShadow *""'"); 
    }
    arg8 = reinterpret_cast< OGRLayerShadow * >(argp8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Band_ContourGenerate" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "Band_ContourGenerate" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    if (items > 8) {
      {
        res11 = SWIG_ConvertPtr(ST(8), &argp11, SWIGTYPE_p_GDALProgressFunc,  0 );
        if (!SWIG_IsOK(res11)) {
          SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "Band_ContourGenerate" "', argument " "11"" of type '" "GDALProgressFunc""'"); 
        }  
        if (!argp11) {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Band_ContourGenerate" "', argument " "11"" of type '" "GDALProgressFunc""'");
        } else {
          arg11 = *(reinterpret_cast< GDALProgressFunc * >(argp11));
        }
      }
    }
    if (items > 9) {
      res12 = SWIG_ConvertPtr(ST(9),SWIG_as_voidptrptr(&arg12), 0, 0);
      if (!SWIG_IsOK(res12)) {
        SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "Band_ContourGenerate" "', argument " "12"" of type '" "void *""'"); 
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)GDALRasterBandShadow_ContourGenerate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    {
      /* %typemap(freearg) (int nList, double* pList) */
      CPLFree((void*) arg5);
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    {
      /* %typemap(freearg) (int nList, double* pList) */
      CPLFree((void*) arg5);
    }
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_ClassCounts__SWIG_0) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALProgressFunc arg2 = (GDALProgressFunc) NULL ;
    void *arg3 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SV *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg3 = (void *)(&saved_env);
    if ((items < 1) || (items > 3)) {
      SWIG_croak("Usage: Band_ClassCounts(self,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ClassCounts" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    if (items > 1) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(1);
              arg2 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 2) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(2)))
        saved_env.data = (SV *)ST(2);
      }
    }
    {
      CPLErrorReset();
      result = (SV *)GDALRasterBandShadow_ClassCounts__SWIG_0(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = result; argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_ClassCounts__SWIG_1) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    SV *arg2 = (SV *) 0 ;
    GDALProgressFunc arg3 = (GDALProgressFunc) NULL ;
    void *arg4 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SV *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg4 = (void *)(&saved_env);
    if ((items < 2) || (items > 4)) {
      SWIG_croak("Usage: Band_ClassCounts(self,classifier,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_ClassCounts" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    arg2 = ST(1);
    if (items > 2) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(2);
              arg3 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(3)))
        saved_env.data = (SV *)ST(3);
      }
    }
    {
      CPLErrorReset();
      result = (SV *)GDALRasterBandShadow_ClassCounts__SWIG_1(arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = result; argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Band_ClassCounts) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 1) && (items <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_GDALRasterBandShadow, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 1) {
        {
          {
            /* %typemap(typecheck, precedence=SWIG_TYPECHECK_INTEGER) GDALProgressFunc callback */
            _v = SvOK(ST(1)) && SvROK(ST(1)) && SvTYPE(SvRV(ST(1))) == SVt_PVCV;
          }
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (items > 2) {
          {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(ST(2), &ptr, 0, 0);
            _v = SWIG_CheckState(res);
          }
          if (!_v) goto check_1;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((items >= 2) && (items <= 4)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_GDALRasterBandShadow, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(1) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 2) {
        {
          {
            /* %typemap(typecheck, precedence=SWIG_TYPECHECK_INTEGER) GDALProgressFunc callback */
            _v = SvOK(ST(2)) && SvROK(ST(2)) && SvTYPE(SvRV(ST(2))) == SVt_PVCV;
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (items > 3) {
          {
            void *ptr = 0;
            int res = SWIG_ConvertPtr(ST(3), &ptr, 0, 0);
            _v = SWIG_CheckState(res);
          }
          if (!_v) goto check_2;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Band_ClassCounts__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Band_ClassCounts__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'Band_ClassCounts'");
  XSRETURN(0);
}


XS(_wrap_Band_Reclassify) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    SV *arg2 = (SV *) 0 ;
    GDALProgressFunc arg3 = (GDALProgressFunc) NULL ;
    void *arg4 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg4 = (void *)(&saved_env);
    if ((items < 2) || (items > 4)) {
      SWIG_croak("Usage: Band_Reclassify(self,classifier,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Band_Reclassify" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    arg2 = ST(1);
    if (items > 2) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(2);
              arg3 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(3)))
        saved_env.data = (SV *)ST(3);
      }
    }
    {
      CPLErrorReset();
      GDALRasterBandShadow_Reclassify(arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ColorTable) {
  {
    GDALPaletteInterp arg1 = (GDALPaletteInterp) GPI_RGB ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    GDALColorTableShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: new_ColorTable(palette);");
    }
    if (items > 0) {
      ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
      if (!SWIG_IsOK(ecode1)) {
        SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ColorTable" "', argument " "1"" of type '" "GDALPaletteInterp""'");
      } 
      arg1 = static_cast< GDALPaletteInterp >(val1);
    }
    {
      CPLErrorReset();
      result = (GDALColorTableShadow *)new_GDALColorTableShadow(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALColorTableShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ColorTable) {
  {
    GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ColorTable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALColorTableShadow, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorTable" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
    {
      CPLErrorReset();
      delete_GDALColorTableShadow(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ColorTable_Clone) {
  {
    GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALColorTableShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ColorTable_Clone(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_Clone" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALColorTableShadow *)GDALColorTableShadow_Clone(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALColorTableShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ColorTable__GetPaletteInterpretation) {
  {
    GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALPaletteInterp result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ColorTable__GetPaletteInterpretation(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable__GetPaletteInterpretation" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALPaletteInterp)GDALColorTableShadow_GetPaletteInterpretation(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ColorTable_GetCount) {
  {
    GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ColorTable_GetCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_GetCount" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALColorTableShadow_GetColorEntryCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ColorTable_GetColorEntry) {
  {
    GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALColorEntry *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ColorTable_GetColorEntry(self,entry);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_GetColorEntry" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTable_GetColorEntry" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (GDALColorEntry *)GDALColorTableShadow_GetColorEntry(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) GDALColorEntry* */
      if (!result)
      do_confess(CALL_FAILED, 1);
      ST(argvi) = sv_newmortal();
      sv_setiv(ST(argvi++), (IV) result->c1);
      ST(argvi) = sv_newmortal();
      sv_setiv(ST(argvi++), (IV) result->c2);
      ST(argvi) = sv_newmortal();
      sv_setiv(ST(argvi++), (IV) result->c3);
      ST(argvi) = sv_newmortal();
      sv_setiv(ST(argvi++), (IV) result->c4);
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ColorTable_GetColorEntryAsRGB) {
  {
    GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
    int arg2 ;
    GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    GDALColorEntry e3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) GDALColorEntry*(GDALColorEntry e3) */
      arg3 = &e3;
    }
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ColorTable_GetColorEntryAsRGB(self,entry);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_GetColorEntryAsRGB" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTable_GetColorEntryAsRGB" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (int)GDALColorTableShadow_GetColorEntryAsRGB(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      /* %typemap(argout) GDALColorEntry* */
      if (!result)
      do_confess(CALL_FAILED, 1);
      argvi--;
      ST(argvi) = sv_newmortal();
      sv_setiv(ST(argvi++), (IV) e3.c1);
      ST(argvi) = sv_newmortal();
      sv_setiv(ST(argvi++), (IV) e3.c2);
      ST(argvi) = sv_newmortal();
      sv_setiv(ST(argvi++), (IV) e3.c3);
      ST(argvi) = sv_newmortal();
      sv_setiv(ST(argvi++), (IV) e3.c4);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ColorTable__SetColorEntry) {
  {
    GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
    int arg2 ;
    GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    GDALColorEntry e3 ;
    int argvi = 0;
    SV * _saved[1] ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ColorTable__SetColorEntry(self,entry,centry);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable__SetColorEntry" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTable__SetColorEntry" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      /* %typemap(in,numinputs=1) const GDALColorEntry*(GDALColorEntry e3) */
      arg3 = &e3;
      int ok = SvROK(ST(2)) && SvTYPE(SvRV(ST(2)))==SVt_PVAV;
      AV *av;
      if (ok)
      av = (AV*)(SvRV(ST(2)));
      else
      do_confess(NEED_ARRAY_REF, 1);
      SV **sv = av_fetch(av, 0, 0);
      if (sv)
      arg3->c1 = SvIV(*sv);
      else
      arg3->c1 = 0;
      sv = av_fetch(av, 1, 0);
      if (sv)
      arg3->c2 = SvIV(*sv);
      else
      arg3->c2 = 0;
      sv = av_fetch(av, 2, 0);
      if (sv)
      arg3->c3 = SvIV(*sv);
      else
      arg3->c3 = 0;
      sv = av_fetch(av, 3, 0);
      if (sv)
      arg3->c4 = SvIV(*sv);
      else
      arg3->c4 = 255;
    }
    _saved[0] = ST(2);
    {
      CPLErrorReset();
      GDALColorTableShadow_SetColorEntry(arg1,arg2,(GDALColorEntry const *)arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) const GDALColorEntry* */
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ColorTable_CreateColorRamp) {
  {
    GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
    int arg2 ;
    GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
    int arg4 ;
    GDALColorEntry *arg5 = (GDALColorEntry *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    GDALColorEntry e3 ;
    int val4 ;
    int ecode4 = 0 ;
    GDALColorEntry e5 ;
    int argvi = 0;
    SV * _saved[2] ;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: ColorTable_CreateColorRamp(self,nStartIndex,startcolor,nEndIndex,endcolor);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorTable_CreateColorRamp" "', argument " "1"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALColorTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorTable_CreateColorRamp" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      /* %typemap(in,numinputs=1) const GDALColorEntry*(GDALColorEntry e3) */
      arg3 = &e3;
      int ok = SvROK(ST(2)) && SvTYPE(SvRV(ST(2)))==SVt_PVAV;
      AV *av;
      if (ok)
      av = (AV*)(SvRV(ST(2)));
      else
      do_confess(NEED_ARRAY_REF, 1);
      SV **sv = av_fetch(av, 0, 0);
      if (sv)
      arg3->c1 = SvIV(*sv);
      else
      arg3->c1 = 0;
      sv = av_fetch(av, 1, 0);
      if (sv)
      arg3->c2 = SvIV(*sv);
      else
      arg3->c2 = 0;
      sv = av_fetch(av, 2, 0);
      if (sv)
      arg3->c3 = SvIV(*sv);
      else
      arg3->c3 = 0;
      sv = av_fetch(av, 3, 0);
      if (sv)
      arg3->c4 = SvIV(*sv);
      else
      arg3->c4 = 255;
    }
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ColorTable_CreateColorRamp" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      /* %typemap(in,numinputs=1) const GDALColorEntry*(GDALColorEntry e5) */
      arg5 = &e3;
      int ok = SvROK(ST(4)) && SvTYPE(SvRV(ST(4)))==SVt_PVAV;
      AV *av;
      if (ok)
      av = (AV*)(SvRV(ST(4)));
      else
      do_confess(NEED_ARRAY_REF, 1);
      SV **sv = av_fetch(av, 0, 0);
      if (sv)
      arg5->c1 = SvIV(*sv);
      else
      arg5->c1 = 0;
      sv = av_fetch(av, 1, 0);
      if (sv)
      arg5->c2 = SvIV(*sv);
      else
      arg5->c2 = 0;
      sv = av_fetch(av, 2, 0);
      if (sv)
      arg5->c3 = SvIV(*sv);
      else
      arg5->c3 = 0;
      sv = av_fetch(av, 3, 0);
      if (sv)
      arg5->c4 = SvIV(*sv);
      else
      arg5->c4 = 255;
    }
    _saved[0] = ST(2);
    _saved[1] = ST(4);
    {
      CPLErrorReset();
      GDALColorTableShadow_CreateColorRamp(arg1,arg2,(GDALColorEntry const *)arg3,arg4,(GDALColorEntry const *)arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    {
      /* %typemap(argout) const GDALColorEntry* */
    }
    {
      /* %typemap(argout) const GDALColorEntry* */
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_RasterAttributeTable) {
  {
    int argvi = 0;
    GDALRasterAttributeTableShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_RasterAttributeTable();");
    }
    {
      CPLErrorReset();
      result = (GDALRasterAttributeTableShadow *)new_GDALRasterAttributeTableShadow();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterAttributeTableShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_RasterAttributeTable) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_RasterAttributeTable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RasterAttributeTable" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    {
      CPLErrorReset();
      delete_GDALRasterAttributeTableShadow(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_Clone) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALRasterAttributeTableShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: RasterAttributeTable_Clone(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_Clone" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALRasterAttributeTableShadow *)GDALRasterAttributeTableShadow_Clone(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterAttributeTableShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetColumnCount) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: RasterAttributeTable_GetColumnCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetColumnCount" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALRasterAttributeTableShadow_GetColumnCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetNameOfCol) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RasterAttributeTable_GetNameOfCol(self,iCol);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetNameOfCol" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetNameOfCol" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (char *)GDALRasterAttributeTableShadow_GetNameOfCol(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable__GetUsageOfCol) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALRATFieldUsage result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RasterAttributeTable__GetUsageOfCol(self,iCol);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable__GetUsageOfCol" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable__GetUsageOfCol" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (GDALRATFieldUsage)GDALRasterAttributeTableShadow_GetUsageOfCol(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable__GetTypeOfCol) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALRATFieldType result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RasterAttributeTable__GetTypeOfCol(self,iCol);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable__GetTypeOfCol" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable__GetTypeOfCol" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      result = (GDALRATFieldType)GDALRasterAttributeTableShadow_GetTypeOfCol(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable__GetColOfUsage) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    GDALRATFieldUsage arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RasterAttributeTable__GetColOfUsage(self,eUsage);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable__GetColOfUsage" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable__GetColOfUsage" "', argument " "2"" of type '" "GDALRATFieldUsage""'");
    } 
    arg2 = static_cast< GDALRATFieldUsage >(val2);
    {
      CPLErrorReset();
      result = (int)GDALRasterAttributeTableShadow_GetColOfUsage(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetRowCount) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: RasterAttributeTable_GetRowCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetRowCount" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALRasterAttributeTableShadow_GetRowCount(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetValueAsString) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: RasterAttributeTable_GetValueAsString(self,iRow,iCol);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetValueAsString" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetValueAsString" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_GetValueAsString" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      CPLErrorReset();
      result = (char *)GDALRasterAttributeTableShadow_GetValueAsString(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetValueAsInt) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: RasterAttributeTable_GetValueAsInt(self,iRow,iCol);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetValueAsInt" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetValueAsInt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_GetValueAsInt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      CPLErrorReset();
      result = (int)GDALRasterAttributeTableShadow_GetValueAsInt(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetValueAsDouble) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: RasterAttributeTable_GetValueAsDouble(self,iRow,iCol);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetValueAsDouble" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetValueAsDouble" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_GetValueAsDouble" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      CPLErrorReset();
      result = (double)GDALRasterAttributeTableShadow_GetValueAsDouble(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_SetValueAsString) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    char *arg4 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    U8 *tmpbuf4 = NULL ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: RasterAttributeTable_SetValueAsString(self,iRow,iCol,pszValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetValueAsString" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetValueAsString" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_SetValueAsString" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      /* %typemap(in) (tostring argin) */
      arg4 = sv_to_utf8_string(ST(3), &tmpbuf4);
    }
    {
      CPLErrorReset();
      GDALRasterAttributeTableShadow_SetValueAsString(arg1,arg2,arg3,(char const *)arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    
    {
      /* %typemap(freearg) (tostring argin) */
      if (tmpbuf4) Safefree(tmpbuf4);
    }
    XSRETURN(argvi);
  fail:
    
    
    
    {
      /* %typemap(freearg) (tostring argin) */
      if (tmpbuf4) Safefree(tmpbuf4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_SetValueAsInt) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: RasterAttributeTable_SetValueAsInt(self,iRow,iCol,nValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetValueAsInt" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetValueAsInt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_SetValueAsInt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RasterAttributeTable_SetValueAsInt" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      CPLErrorReset();
      GDALRasterAttributeTableShadow_SetValueAsInt(arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_SetValueAsDouble) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: RasterAttributeTable_SetValueAsDouble(self,iRow,iCol,dfValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetValueAsDouble" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetValueAsDouble" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_SetValueAsDouble" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RasterAttributeTable_SetValueAsDouble" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    {
      CPLErrorReset();
      GDALRasterAttributeTableShadow_SetValueAsDouble(arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_SetRowCount) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RasterAttributeTable_SetRowCount(self,nCount);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetRowCount" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetRowCount" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      CPLErrorReset();
      GDALRasterAttributeTableShadow_SetRowCount(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable__CreateColumn) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    GDALRATFieldType arg3 ;
    GDALRATFieldUsage arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: RasterAttributeTable__CreateColumn(self,pszName,eType,eUsage);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable__CreateColumn" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RasterAttributeTable__CreateColumn" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable__CreateColumn" "', argument " "3"" of type '" "GDALRATFieldType""'");
    } 
    arg3 = static_cast< GDALRATFieldType >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RasterAttributeTable__CreateColumn" "', argument " "4"" of type '" "GDALRATFieldUsage""'");
    } 
    arg4 = static_cast< GDALRATFieldUsage >(val4);
    {
      CPLErrorReset();
      result = (int)GDALRasterAttributeTableShadow_CreateColumn(arg1,(char const *)arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetLinearBinning) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double temp2 ;
    int res2 = SWIG_TMPOBJ ;
    double temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    arg2 = &temp2;
    arg3 = &temp3;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: RasterAttributeTable_GetLinearBinning(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetLinearBinning" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (bool)GDALRasterAttributeTableShadow_GetLinearBinning(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_SetLinearBinning) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    double arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: RasterAttributeTable_SetLinearBinning(self,dfRow0Min,dfBinSize);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetLinearBinning" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetLinearBinning" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RasterAttributeTable_SetLinearBinning" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      CPLErrorReset();
      result = (int)GDALRasterAttributeTableShadow_SetLinearBinning(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetRowOfValue) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RasterAttributeTable_GetRowOfValue(self,dfValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetRowOfValue" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_GetRowOfValue" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      CPLErrorReset();
      result = (int)GDALRasterAttributeTableShadow_GetRowOfValue(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_ChangesAreWrittenToFile) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: RasterAttributeTable_ChangesAreWrittenToFile(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_ChangesAreWrittenToFile" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (int)GDALRasterAttributeTableShadow_ChangesAreWrittenToFile(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_DumpReadable) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: RasterAttributeTable_DumpReadable(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_DumpReadable" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    {
      CPLErrorReset();
      GDALRasterAttributeTableShadow_DumpReadable(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_SetTableType) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    GDALRATTableType arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: RasterAttributeTable_SetTableType(self,eTableType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_SetTableType" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RasterAttributeTable_SetTableType" "', argument " "2"" of type '" "GDALRATTableType""'");
    } 
    arg2 = static_cast< GDALRATTableType >(val2);
    {
      CPLErrorReset();
      GDALRasterAttributeTableShadow_SetTableType(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterAttributeTable_GetTableType) {
  {
    GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    GDALRATTableType result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: RasterAttributeTable_GetTableType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterAttributeTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RasterAttributeTable_GetTableType" "', argument " "1"" of type '" "GDALRasterAttributeTableShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterAttributeTableShadow * >(argp1);
    {
      CPLErrorReset();
      result = (GDALRATTableType)GDALRasterAttributeTableShadow_GetTableType(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TermProgress_nocb) {
  {
    double arg1 ;
    char *arg2 = (char *) NULL ;
    void *arg3 = (void *) NULL ;
    double val1 ;
    int ecode1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 3)) {
      SWIG_croak("Usage: TermProgress_nocb(dfProgress,pszMessage,pData);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TermProgress_nocb" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TermProgress_nocb" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2),SWIG_as_voidptrptr(&arg3), 0, 0);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TermProgress_nocb" "', argument " "3"" of type '" "void *""'"); 
      }
    }
    {
      CPLErrorReset();
      result = (int)GDALTermProgress_nocb(arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_ComputeMedianCutPCT) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
    int arg4 ;
    GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
    GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
    void *arg7 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg7 = (void *)(&saved_env);
    if ((items < 5) || (items > 7)) {
      SWIG_croak("Usage: ComputeMedianCutPCT(red,green,blue,num_colors,colors,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeMedianCutPCT" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeMedianCutPCT" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeMedianCutPCT" "', argument " "3"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg3 = reinterpret_cast< GDALRasterBandShadow * >(argp3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ComputeMedianCutPCT" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    res5 = SWIG_ConvertPtr(ST(4), &argp5,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComputeMedianCutPCT" "', argument " "5"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg5 = reinterpret_cast< GDALColorTableShadow * >(argp5);
    if (items > 5) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(5);
              arg6 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(6)))
        saved_env.data = (SV *)ST(6);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg5) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)ComputeMedianCutPCT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DitherRGB2PCT) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
    GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
    GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
    void *arg7 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg7 = (void *)(&saved_env);
    if ((items < 5) || (items > 7)) {
      SWIG_croak("Usage: DitherRGB2PCT(red,green,blue,target,colors,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DitherRGB2PCT" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DitherRGB2PCT" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DitherRGB2PCT" "', argument " "3"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg3 = reinterpret_cast< GDALRasterBandShadow * >(argp3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DitherRGB2PCT" "', argument " "4"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg4 = reinterpret_cast< GDALRasterBandShadow * >(argp4);
    res5 = SWIG_ConvertPtr(ST(4), &argp5,SWIGTYPE_p_GDALColorTableShadow, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DitherRGB2PCT" "', argument " "5"" of type '" "GDALColorTableShadow *""'"); 
    }
    arg5 = reinterpret_cast< GDALColorTableShadow * >(argp5);
    if (items > 5) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(5);
              arg6 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(6)))
        saved_env.data = (SV *)ST(6);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg4) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg5) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)DitherRGB2PCT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap__ReprojectImage) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    char *arg3 = (char *) NULL ;
    char *arg4 = (char *) NULL ;
    GDALResampleAlg arg5 = (GDALResampleAlg) GRA_NearestNeighbour ;
    double arg6 = (double) 0.0 ;
    double arg7 = (double) 0.0 ;
    GDALProgressFunc arg8 = (GDALProgressFunc) NULL ;
    void *arg9 = (void *) NULL ;
    char **arg10 = (char **) NULL ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    double val6 ;
    int ecode6 = 0 ;
    double val7 ;
    int ecode7 = 0 ;
    int argvi = 0;
    CPLErr result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg9 = (void *)(&saved_env);
    if ((items < 2) || (items > 10)) {
      SWIG_croak("Usage: _ReprojectImage(src_ds,dst_ds,src_wkt,dst_wkt,eResampleAlg,WarpMemoryLimit,maxerror,callback,callback_data,options);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg2 == NULL)
      do_confess(NEED_DEF, 1);
    }
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_ReprojectImage" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    if (items > 3) {
      res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, NULL, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_ReprojectImage" "', argument " "4"" of type '" "char const *""'");
      }
      arg4 = reinterpret_cast< char * >(buf4);
    }
    if (items > 4) {
      ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "_ReprojectImage" "', argument " "5"" of type '" "GDALResampleAlg""'");
      } 
      arg5 = static_cast< GDALResampleAlg >(val5);
    }
    if (items > 5) {
      ecode6 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "_ReprojectImage" "', argument " "6"" of type '" "double""'");
      } 
      arg6 = static_cast< double >(val6);
    }
    if (items > 6) {
      ecode7 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
      if (!SWIG_IsOK(ecode7)) {
        SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "_ReprojectImage" "', argument " "7"" of type '" "double""'");
      } 
      arg7 = static_cast< double >(val7);
    }
    if (items > 7) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(7))) {
          if (SvROK(ST(7))) {
            if (SvTYPE(SvRV(ST(7))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(7);
              arg8 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 8) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(8)))
        saved_env.data = (SV *)ST(8);
      }
    }
    if (items > 9) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(9))) {
          if (SvROK(ST(9))) {
            if (SvTYPE(SvRV(ST(9)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(9)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg10 = CSLAddString(arg10, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(9)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(9));
              SV *sv;
              char *key;
              I32 klen;
              arg10 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg10 = CSLAddNameValue(arg10, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg10) CSLDestroy( arg10 );
    }
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg10) CSLDestroy( arg10 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_ComputeProximity) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    char **arg3 = (char **) NULL ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    if ((items < 2) || (items > 5)) {
      SWIG_croak("Usage: ComputeProximity(srcBand,proximityBand,options,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeProximity" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeProximity" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)ComputeProximity(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    
    XSRETURN(argvi);
  fail:
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_RasterizeLayer) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    int *arg3 = (int *) 0 ;
    OGRLayerShadow *arg4 = (OGRLayerShadow *) 0 ;
    void *arg5 = (void *) NULL ;
    void *arg6 = (void *) NULL ;
    int arg7 = (int) 0 ;
    double *arg8 = (double *) NULL ;
    char **arg9 = (char **) NULL ;
    GDALProgressFunc arg10 = (GDALProgressFunc) NULL ;
    void *arg11 = (void *) NULL ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int res5 ;
    int res6 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg11 = (void *)(&saved_env);
    if ((items < 3) || (items > 9)) {
      SWIG_croak("Usage: RasterizeLayer(dataset,bands,band_list,layer,pfnTransformer,pTransformArg,burn_values,burn_values_list,options,callback,callback_data);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in,numinputs=1) (int nList, int* pList) */
      if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(1)));
      arg2 = av_len(av)+1;
      arg3 = (int*)CPLMalloc(arg2*sizeof(int));
      if (arg3) {
        for( int i = 0; i<arg2; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          arg3[i] =  SvIV(*sv);
        }
      } else
      SWIG_fail;
    }
    res4 = SWIG_ConvertPtr(ST(2), &argp4,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RasterizeLayer" "', argument " "4"" of type '" "OGRLayerShadow *""'"); 
    }
    arg4 = reinterpret_cast< OGRLayerShadow * >(argp4);
    if (items > 3) {
      res5 = SWIG_ConvertPtr(ST(3),SWIG_as_voidptrptr(&arg5), 0, 0);
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RasterizeLayer" "', argument " "5"" of type '" "void *""'"); 
      }
    }
    if (items > 4) {
      res6 = SWIG_ConvertPtr(ST(4),SWIG_as_voidptrptr(&arg6), 0, 0);
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RasterizeLayer" "', argument " "6"" of type '" "void *""'"); 
      }
    }
    if (items > 5) {
      {
        /* %typemap(in,numinputs=1) (int nList, double* pList) */
        if (!(SvROK(ST(5)) && (SvTYPE(SvRV(ST(5)))==SVt_PVAV)))
        do_confess(NEED_ARRAY_REF, 1);
        AV *av = (AV*)(SvRV(ST(5)));
        arg7 = av_len(av)+1;
        arg8 = (double*)CPLMalloc(arg7*sizeof(double));
        if (arg8) {
          for( int i = 0; i<arg7; i++ ) {
            SV **sv = av_fetch(av, i, 0);
            arg8[i] =  SvNV(*sv);
          }
        } else
        SWIG_fail;
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(6))) {
          if (SvROK(ST(6))) {
            if (SvTYPE(SvRV(ST(6)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(6)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg9 = CSLAddString(arg9, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(6)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(6));
              SV *sv;
              char *key;
              I32 klen;
              arg9 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg9 = CSLAddNameValue(arg9, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 7) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(7))) {
          if (SvROK(ST(7))) {
            if (SvTYPE(SvRV(ST(7))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(7);
              arg10 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 8) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(8)))
        saved_env.data = (SV *)ST(8);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg4) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)RasterizeLayer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg3);
    }
    
    
    
    {
      /* %typemap(freearg) (int nList, double* pList) */
      CPLFree((void*) arg8);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg9) CSLDestroy( arg9 );
    }
    
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (int nList, int* pList) */
      CPLFree((void*) arg3);
    }
    
    
    
    {
      /* %typemap(freearg) (int nList, double* pList) */
      CPLFree((void*) arg8);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg9) CSLDestroy( arg9 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap__Polygonize) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
    int arg4 ;
    char **arg5 = (char **) NULL ;
    GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
    void *arg7 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg7 = (void *)(&saved_env);
    if ((items < 4) || (items > 7)) {
      SWIG_croak("Usage: _Polygonize(srcBand,maskBand,outLayer,iPixValField,options,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Polygonize" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Polygonize" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_Polygonize" "', argument " "3"" of type '" "OGRLayerShadow *""'"); 
    }
    arg3 = reinterpret_cast< OGRLayerShadow * >(argp3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Polygonize" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    if (items > 4) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(4)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddString(arg5, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(4)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(4));
              SV *sv;
              char *key;
              I32 klen;
              arg5 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddNameValue(arg5, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 5) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(5);
              arg6 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(6)))
        saved_env.data = (SV *)ST(6);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)Polygonize(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_FPolygonize) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
    int arg4 ;
    char **arg5 = (char **) NULL ;
    GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
    void *arg7 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg7 = (void *)(&saved_env);
    if ((items < 4) || (items > 7)) {
      SWIG_croak("Usage: FPolygonize(srcBand,maskBand,outLayer,iPixValField,options,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FPolygonize" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FPolygonize" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FPolygonize" "', argument " "3"" of type '" "OGRLayerShadow *""'"); 
    }
    arg3 = reinterpret_cast< OGRLayerShadow * >(argp3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FPolygonize" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    if (items > 4) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(4)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddString(arg5, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(4)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(4));
              SV *sv;
              char *key;
              I32 klen;
              arg5 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddNameValue(arg5, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 5) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(5);
              arg6 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(6)))
        saved_env.data = (SV *)ST(6);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)FPolygonize(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_FillNodata) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    double arg3 ;
    int arg4 ;
    char **arg5 = (char **) NULL ;
    GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
    void *arg7 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg7 = (void *)(&saved_env);
    if ((items < 4) || (items > 7)) {
      SWIG_croak("Usage: FillNodata(targetBand,maskBand,maxSearchDist,smoothingIterations,options,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FillNodata" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FillNodata" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FillNodata" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FillNodata" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    if (items > 4) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(4)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddString(arg5, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(4)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(4));
              SV *sv;
              char *key;
              I32 klen;
              arg5 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddNameValue(arg5, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 5) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(5);
              arg6 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(6)))
        saved_env.data = (SV *)ST(6);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)FillNodata(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_SieveFilter) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
    int arg4 ;
    int arg5 = (int) 4 ;
    char **arg6 = (char **) NULL ;
    GDALProgressFunc arg7 = (GDALProgressFunc) NULL ;
    void *arg8 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg8 = (void *)(&saved_env);
    if ((items < 4) || (items > 8)) {
      SWIG_croak("Usage: SieveFilter(srcBand,maskBand,dstBand,threshold,connectedness,options,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SieveFilter" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SieveFilter" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SieveFilter" "', argument " "3"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg3 = reinterpret_cast< GDALRasterBandShadow * >(argp3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SieveFilter" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    if (items > 4) {
      ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SieveFilter" "', argument " "5"" of type '" "int""'");
      } 
      arg5 = static_cast< int >(val5);
    }
    if (items > 5) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(5)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddString(arg6, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(5)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(5));
              SV *sv;
              char *key;
              I32 klen;
              arg6 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddNameValue(arg6, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(6))) {
          if (SvROK(ST(6))) {
            if (SvTYPE(SvRV(ST(6))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(6);
              arg7 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 7) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(7)))
        saved_env.data = (SV *)ST(7);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)SieveFilter(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap__RegenerateOverviews) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    int arg2 ;
    GDALRasterBandShadow **arg3 = (GDALRasterBandShadow **) 0 ;
    char *arg4 = (char *) "average" ;
    GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
    void *arg6 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg6 = (void *)(&saved_env);
    if ((items < 2) || (items > 5)) {
      SWIG_croak("Usage: _RegenerateOverviews(srcBand,overviewBandCount,overviewBands,resampling,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_RegenerateOverviews" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    {
      /* %typemap(in,numinputs=1) (int object_list_count, GDALRasterBandShadow **poObjects) */
      if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(1)));
      arg2 = av_len(av)+1;
      /* get the pointers from the array into bands */
      arg3 = (GDALRasterBandShadow **)CPLMalloc(arg2*sizeof(GDALRasterBandShadow *));
      if (arg3) {
        for (int i = 0; i < arg2; i++) {
          SV **sv = av_fetch(av, i, 0);
          int ret = SWIG_ConvertPtr(*sv, &(arg3[i]), SWIGTYPE_p_GDALRasterBandShadow, 0);
          if (!SWIG_IsOK(ret))
          do_confess(WRONG_ITEM_IN_ARRAY, 1);
        }
      } else
      do_confess(OUT_OF_MEMORY, 1);
      
    }
    if (items > 2) {
      res4 = SWIG_AsCharPtrAndSize(ST(2), &buf4, NULL, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_RegenerateOverviews" "', argument " "4"" of type '" "char const *""'");
      }
      arg4 = reinterpret_cast< char * >(buf4);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg5 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)RegenerateOverviews(arg1,arg2,arg3,(char const *)arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    {
      /* %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects) */
      CPLFree(arg3);
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    XSRETURN(argvi);
  fail:
    
    {
      /* %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects) */
      CPLFree(arg3);
    }
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    SWIG_croak_null();
  }
}


XS(_wrap__RegenerateOverview) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    char *arg3 = (char *) "average" ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    if ((items < 2) || (items > 5)) {
      SWIG_croak("Usage: _RegenerateOverview(srcBand,overviewBand,resampling,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_RegenerateOverview" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_RegenerateOverview" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_RegenerateOverview" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)RegenerateOverview(arg1,arg2,(char const *)arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_ContourGenerate) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    double arg2 ;
    double arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int arg6 ;
    double arg7 ;
    OGRLayerShadow *arg8 = (OGRLayerShadow *) 0 ;
    int arg9 ;
    int arg10 ;
    GDALProgressFunc arg11 = (GDALProgressFunc) NULL ;
    void *arg12 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    double val7 ;
    int ecode7 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg12 = (void *)(&saved_env);
    if ((items < 9) || (items > 11)) {
      SWIG_croak("Usage: ContourGenerate(srcBand,contourInterval,contourBase,fixedLevelCount,fixedLevels,useNoData,noDataValue,dstLayer,idField,elevField,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContourGenerate" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ContourGenerate" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ContourGenerate" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      /* %typemap(in,numinputs=1) (int nList, double* pList) */
      if (!(SvROK(ST(3)) && (SvTYPE(SvRV(ST(3)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(3)));
      arg4 = av_len(av)+1;
      arg5 = (double*)CPLMalloc(arg4*sizeof(double));
      if (arg5) {
        for( int i = 0; i<arg4; i++ ) {
          SV **sv = av_fetch(av, i, 0);
          arg5[i] =  SvNV(*sv);
        }
      } else
      SWIG_fail;
    }
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ContourGenerate" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(5), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ContourGenerate" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
    res8 = SWIG_ConvertPtr(ST(6), &argp8,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ContourGenerate" "', argument " "8"" of type '" "OGRLayerShadow *""'"); 
    }
    arg8 = reinterpret_cast< OGRLayerShadow * >(argp8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ContourGenerate" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ContourGenerate" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    if (items > 9) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(9))) {
          if (SvROK(ST(9))) {
            if (SvTYPE(SvRV(ST(9))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(9);
              arg11 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 10) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(10)))
        saved_env.data = (SV *)ST(10);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg8) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)ContourGenerate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    {
      /* %typemap(freearg) (int nList, double* pList) */
      CPLFree((void*) arg5);
    }
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    {
      /* %typemap(freearg) (int nList, double* pList) */
      CPLFree((void*) arg5);
    }
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ContourGenerateEx) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
    char **arg3 = (char **) NULL ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    if ((items < 2) || (items > 5)) {
      SWIG_croak("Usage: ContourGenerateEx(srcBand,dstLayer,options,callback,callback_data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContourGenerateEx" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_OGRLayerShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContourGenerateEx" "', argument " "2"" of type '" "OGRLayerShadow *""'"); 
    }
    arg2 = reinterpret_cast< OGRLayerShadow * >(argp2);
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)ContourGenerateEx(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    
    XSRETURN(argvi);
  fail:
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_ViewshedGenerate) {
  {
    GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char **arg4 = (char **) 0 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    double arg8 ;
    double arg9 ;
    double arg10 ;
    double arg11 ;
    double arg12 ;
    double arg13 ;
    GDALViewshedMode arg14 ;
    double arg15 ;
    GDALProgressFunc arg16 = (GDALProgressFunc) NULL ;
    void *arg17 = (void *) NULL ;
    GDALViewshedOutputType arg18 = (GDALViewshedOutputType) GVOT_NORMAL ;
    char **arg19 = (char **) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    double val6 ;
    int ecode6 = 0 ;
    double val7 ;
    int ecode7 = 0 ;
    double val8 ;
    int ecode8 = 0 ;
    double val9 ;
    int ecode9 = 0 ;
    double val10 ;
    int ecode10 = 0 ;
    double val11 ;
    int ecode11 = 0 ;
    double val12 ;
    int ecode12 = 0 ;
    double val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    double val15 ;
    int ecode15 = 0 ;
    int val18 ;
    int ecode18 = 0 ;
    void *argp19 = 0 ;
    int res19 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg17 = (void *)(&saved_env);
    if ((items < 15) || (items > 19)) {
      SWIG_croak("Usage: ViewshedGenerate(srcBand,driverName,targetRasterName,creationOptions,observerX,observerY,observerHeight,targetHeight,visibleVal,invisibleVal,outOfRangeVal,noDataVal,dfCurvCoeff,mode,maxDistance,callback,callback_data,heightMode,papszOptions);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ViewshedGenerate" "', argument " "1"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterBandShadow * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ViewshedGenerate" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ViewshedGenerate" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_p_char, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ViewshedGenerate" "', argument " "4"" of type '" "char **""'"); 
    }
    arg4 = reinterpret_cast< char ** >(argp4);
    ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ViewshedGenerate" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
    ecode6 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ViewshedGenerate" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
    ecode7 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ViewshedGenerate" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
    ecode8 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ViewshedGenerate" "', argument " "8"" of type '" "double""'");
    } 
    arg8 = static_cast< double >(val8);
    ecode9 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ViewshedGenerate" "', argument " "9"" of type '" "double""'");
    } 
    arg9 = static_cast< double >(val9);
    ecode10 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ViewshedGenerate" "', argument " "10"" of type '" "double""'");
    } 
    arg10 = static_cast< double >(val10);
    ecode11 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ViewshedGenerate" "', argument " "11"" of type '" "double""'");
    } 
    arg11 = static_cast< double >(val11);
    ecode12 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ViewshedGenerate" "', argument " "12"" of type '" "double""'");
    } 
    arg12 = static_cast< double >(val12);
    ecode13 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "ViewshedGenerate" "', argument " "13"" of type '" "double""'");
    } 
    arg13 = static_cast< double >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "ViewshedGenerate" "', argument " "14"" of type '" "GDALViewshedMode""'");
    } 
    arg14 = static_cast< GDALViewshedMode >(val14);
    ecode15 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "ViewshedGenerate" "', argument " "15"" of type '" "double""'");
    } 
    arg15 = static_cast< double >(val15);
    if (items > 15) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(15))) {
          if (SvROK(ST(15))) {
            if (SvTYPE(SvRV(ST(15))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(15);
              arg16 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 16) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(16)))
        saved_env.data = (SV *)ST(16);
      }
    }
    if (items > 17) {
      ecode18 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), &val18);
      if (!SWIG_IsOK(ecode18)) {
        SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "ViewshedGenerate" "', argument " "18"" of type '" "GDALViewshedOutputType""'");
      } 
      arg18 = static_cast< GDALViewshedOutputType >(val18);
    }
    if (items > 18) {
      res19 = SWIG_ConvertPtr(ST(18), &argp19,SWIGTYPE_p_p_char, 0 |  0 );
      if (!SWIG_IsOK(res19)) {
        SWIG_exception_fail(SWIG_ArgError(res19), "in method '" "ViewshedGenerate" "', argument " "19"" of type '" "char **""'"); 
      }
      arg19 = reinterpret_cast< char ** >(argp19);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)ViewshedGenerate(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap__AutoCreateWarpedVRT) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    GDALResampleAlg arg4 = (GDALResampleAlg) GRA_NearestNeighbour ;
    double arg5 = (double) 0.0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 5)) {
      SWIG_croak("Usage: _AutoCreateWarpedVRT(src_ds,src_wkt,dst_wkt,eResampleAlg,maxerror);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    if (items > 1) {
      res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_AutoCreateWarpedVRT" "', argument " "2"" of type '" "char const *""'");
      }
      arg2 = reinterpret_cast< char * >(buf2);
    }
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_AutoCreateWarpedVRT" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    if (items > 3) {
      ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_AutoCreateWarpedVRT" "', argument " "4"" of type '" "GDALResampleAlg""'");
      } 
      arg4 = static_cast< GDALResampleAlg >(val4);
    }
    if (items > 4) {
      ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "_AutoCreateWarpedVRT" "', argument " "5"" of type '" "double""'");
      } 
      arg5 = static_cast< double >(val5);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)AutoCreateWarpedVRT(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_CreatePansharpenedVRT) {
  {
    char *arg1 = (char *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    int arg3 ;
    GDALRasterBandShadow **arg4 = (GDALRasterBandShadow **) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: CreatePansharpenedVRT(pszXML,panchroBand,nInputSpectralBands,ahInputSpectralBands);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CreatePansharpenedVRT" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CreatePansharpenedVRT" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    {
      /* %typemap(in,numinputs=1) (int object_list_count, GDALRasterBandShadow **poObjects) */
      if (!(SvROK(ST(2)) && (SvTYPE(SvRV(ST(2)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(2)));
      arg3 = av_len(av)+1;
      /* get the pointers from the array into bands */
      arg4 = (GDALRasterBandShadow **)CPLMalloc(arg3*sizeof(GDALRasterBandShadow *));
      if (arg4) {
        for (int i = 0; i < arg3; i++) {
          SV **sv = av_fetch(av, i, 0);
          int ret = SWIG_ConvertPtr(*sv, &(arg4[i]), SWIGTYPE_p_GDALRasterBandShadow, 0);
          if (!SWIG_IsOK(ret))
          do_confess(WRONG_ITEM_IN_ARRAY, 1);
        }
      } else
      do_confess(OUT_OF_MEMORY, 1);
      
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)CreatePansharpenedVRT((char const *)arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    {
      /* %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects) */
      CPLFree(arg4);
    }
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    {
      /* %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects) */
      CPLFree(arg4);
    }
    SWIG_croak_null();
  }
}


XS(_wrap_new_Transformer) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    char **arg3 = (char **) 0 ;
    int argvi = 0;
    GDALTransformerInfoShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_Transformer(src,dst,options);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg2 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(2))) {
        if (SvROK(ST(2))) {
          if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(2)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg3 = CSLAddString(arg3, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(2));
            SV *sv;
            char *key;
            I32 klen;
            arg3 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg3 = CSLAddNameValue(arg3, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALTransformerInfoShadow *)new_GDALTransformerInfoShadow(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALTransformerInfoShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    XSRETURN(argvi);
  fail:
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Transformer) {
  {
    GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Transformer(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transformer" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
    {
      CPLErrorReset();
      delete_GDALTransformerInfoShadow(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Transformer_TransformPoint__SWIG_0) {
  {
    GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
    int arg2 ;
    double *arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double argin3[3] ;
    int argvi = 0;
    SV * _saved[1] ;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Transformer_TransformPoint(self,bDstToSrc,inout);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer_TransformPoint" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transformer_TransformPoint" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      /* %typemap(in) (double argin3[ANY]) */
      if (!(SvROK(ST(2)) && (SvTYPE(SvRV(ST(2)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      arg3 = argin3;
      AV *av = (AV*)(SvRV(ST(2)));
      if (av_len(av)+1 < 3)
      do_confess(NOT_ENOUGH_ELEMENTS, 1);
      for (unsigned int i=0; i<3; i++) {
        SV *sv = *av_fetch(av, i, 0);
        if (!SvOK(sv))
        do_confess(NEED_DEF, 1);
        arg3[i] =  SvNV(sv);
      }
    }
    _saved[0] = ST(2);
    {
      CPLErrorReset();
      result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_0(arg1,arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      /* %typemap(argout) (double argout[ANY]) */
      if (GIMME_V == G_ARRAY) {
        /* return a list */
        int i;
        EXTEND(SP, argvi+3-items+1);
        for (i = 0; i < 3; i++)
        ST(argvi++) = sv_2mortal(newSVnv(arg3[i]));
      } else {
        ST(argvi) = CreateArrayFromDoubleArray( arg3, 3 );
        argvi++;
      }
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Transformer_TransformPoint__SWIG_1) {
  {
    GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
    double *arg2 ;
    int arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 = (double) 0.0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double argout2[3] ;
    int val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    double val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double argout2[ANY]) */
      arg2 = argout2;
    }
    if ((items < 4) || (items > 5)) {
      SWIG_croak("Usage: Transformer_TransformPoint(self,bDstToSrc,x,y,z);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer_TransformPoint" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transformer_TransformPoint" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transformer_TransformPoint" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Transformer_TransformPoint" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
    if (items > 4) {
      ecode6 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val6);
      if (!SWIG_IsOK(ecode6)) {
        SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Transformer_TransformPoint" "', argument " "6"" of type '" "double""'");
      } 
      arg6 = static_cast< double >(val6);
    }
    {
      CPLErrorReset();
      result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      /* %typemap(argout) (double argout[ANY]) */
      if (GIMME_V == G_ARRAY) {
        /* return a list */
        int i;
        EXTEND(SP, argvi+3-items+1);
        for (i = 0; i < 3; i++)
        ST(argvi++) = sv_2mortal(newSVnv(arg2[i]));
      } else {
        ST(argvi) = CreateArrayFromDoubleArray( arg2, 3 );
        argvi++;
      }
    }
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Transformer_TransformPoint) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_GDALTransformerInfoShadow, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if ((items >= 4) && (items <= 5)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_GDALTransformerInfoShadow, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 4) {
        {
          {
            int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
            _v = SWIG_CheckState(res);
          }
        }
        if (!_v) goto check_2;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Transformer_TransformPoint__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Transformer_TransformPoint__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'Transformer_TransformPoint'");
  XSRETURN(0);
}


XS(_wrap_Transformer__TransformPoints) {
  {
    GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
    int arg2 ;
    int arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    int *arg7 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Transformer__TransformPoints(self,bDstToSrc,nCount,x,y,z,panSuccess);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer__TransformPoints" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transformer__TransformPoints" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      /* %typemap(in) (int nCount, double *x, double *y, double *z) */
      /* ST(2) is a ref to a list of refs to point lists */
      if (! (SvROK(ST(2)) && (SvTYPE(SvRV(ST(2)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(2)));
      arg3 = av_len(av)+1;
      arg4 = (double*)CPLMalloc(arg3*sizeof(double));
      if (arg4)
      arg5 = (double*)CPLMalloc(arg3*sizeof(double));
      if (arg4 && arg5)
      arg6 = (double*)CPLMalloc(arg3*sizeof(double));
      if (!arg4 or !arg5 or !arg6)
      SWIG_fail;
      for (int i = 0; i < arg3; i++) {
        SV **sv = av_fetch(av, i, 0); /* ref to one point list */
        if (!(SvROK(*sv) && (SvTYPE(SvRV(*sv))==SVt_PVAV)))
        do_confess(WRONG_ITEM_IN_ARRAY, 1);
        AV *ac = (AV*)(SvRV(*sv));
        int n = av_len(ac)+1;
        SV **c = av_fetch(ac, 0, 0);
        arg4[i] = SvNV(*c);
        c = av_fetch(ac, 1, 0);
        arg5[i] = SvNV(*c);
        if (n < 3) {
          arg6[i] = 0;
        } else {
          c = av_fetch(ac, 2, 0);
          arg6[i] = SvNV(*c);
        }
      }
    }
    res7 = SWIG_ConvertPtr(ST(3), &argp7,SWIGTYPE_p_int, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Transformer__TransformPoints" "', argument " "7"" of type '" "int *""'"); 
    }
    arg7 = reinterpret_cast< int * >(argp7);
    _saved[0] = ST(2);
    {
      CPLErrorReset();
      result = (int)GDALTransformerInfoShadow_TransformPoints(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      /* %typemap(argout) (int nCount, double *x, double *y, double *z) */
      AV *av = (AV*)(SvRV(_saved[0]));
      for (int i = 0; i < arg3; i++) {
        SV **sv = av_fetch(av, i, 0);
        AV *ac = (AV*)(SvRV(*sv));
        int n = av_len(ac)+1;
        SV *c = newSVnv(arg4[i]);
        if (!av_store(ac, 0, c))
        SvREFCNT_dec(c);
        c = newSVnv(arg5[i]);
        if (!av_store(ac, 1, c))
        SvREFCNT_dec(c);
        c = newSVnv(arg6[i]);
        if (!av_store(ac, 2, c))
        SvREFCNT_dec(c);
      }
    }
    
    
    {
      /* %typemap(freearg) (int nCount, double *x, double *y, double *z) */
      CPLFree(arg4);
      CPLFree(arg5);
      CPLFree(arg6);
    }
    
    XSRETURN(argvi);
  fail:
    
    
    {
      /* %typemap(freearg) (int nCount, double *x, double *y, double *z) */
      CPLFree(arg4);
      CPLFree(arg5);
      CPLFree(arg6);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_Transformer_TransformGeolocations) {
  {
    GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
    GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
    GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
    GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
    void *arg6 = (void *) NULL ;
    char **arg7 = (char **) NULL ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg6 = (void *)(&saved_env);
    if ((items < 4) || (items > 7)) {
      SWIG_croak("Usage: Transformer_TransformGeolocations(self,xBand,yBand,zBand,callback,callback_data,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALTransformerInfoShadow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer_TransformGeolocations" "', argument " "1"" of type '" "GDALTransformerInfoShadow *""'"); 
    }
    arg1 = reinterpret_cast< GDALTransformerInfoShadow * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transformer_TransformGeolocations" "', argument " "2"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg2 = reinterpret_cast< GDALRasterBandShadow * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Transformer_TransformGeolocations" "', argument " "3"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg3 = reinterpret_cast< GDALRasterBandShadow * >(argp3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_GDALRasterBandShadow, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Transformer_TransformGeolocations" "', argument " "4"" of type '" "GDALRasterBandShadow *""'"); 
    }
    arg4 = reinterpret_cast< GDALRasterBandShadow * >(argp4);
    if (items > 4) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(4);
              arg5 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 5) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(5)))
        saved_env.data = (SV *)ST(5);
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(6))) {
          if (SvROK(ST(6))) {
            if (SvTYPE(SvRV(ST(6)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(6)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg7 = CSLAddString(arg7, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(6)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(6));
              SV *sv;
              char *key;
              I32 klen;
              arg7 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg7 = CSLAddNameValue(arg7, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg4) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (int)GDALTransformerInfoShadow_TransformGeolocations(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg7) CSLDestroy( arg7 );
    }
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg7) CSLDestroy( arg7 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_ApplyVerticalShiftGrid) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    bool arg3 = (bool) false ;
    double arg4 = (double) 1.0 ;
    double arg5 = (double) 1.0 ;
    char **arg6 = (char **) NULL ;
    bool val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 6)) {
      SWIG_croak("Usage: ApplyVerticalShiftGrid(src_ds,grid_ds,inverse,srcUnitToMeter,dstUnitToMeter,options);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg2 == NULL)
      do_confess(NEED_DEF, 1);
    }
    if (items > 2) {
      ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ApplyVerticalShiftGrid" "', argument " "3"" of type '" "bool""'");
      } 
      arg3 = static_cast< bool >(val3);
    }
    if (items > 3) {
      ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
      if (!SWIG_IsOK(ecode4)) {
        SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ApplyVerticalShiftGrid" "', argument " "4"" of type '" "double""'");
      } 
      arg4 = static_cast< double >(val4);
    }
    if (items > 4) {
      ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
      if (!SWIG_IsOK(ecode5)) {
        SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ApplyVerticalShiftGrid" "', argument " "5"" of type '" "double""'");
      } 
      arg5 = static_cast< double >(val5);
    }
    if (items > 5) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(5)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddString(arg6, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(5)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(5));
              SV *sv;
              char *key;
              I32 klen;
              arg6 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg6 = CSLAddNameValue(arg6, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)ApplyVerticalShiftGrid(arg1,arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    {
      /* %typemap(freearg) char **options */
      if (arg6) CSLDestroy( arg6 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_ApplyGeoTransform) {
  {
    double *arg1 ;
    double arg2 ;
    double arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double argin1[6] ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    double temp4 ;
    int res4 = SWIG_TMPOBJ ;
    double temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    dXSARGS;
    
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ApplyGeoTransform(padfGeoTransform,dfPixel,dfLine);");
    }
    {
      /* %typemap(in) (double argin1[ANY]) */
      if (!(SvROK(ST(0)) && (SvTYPE(SvRV(ST(0)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      arg1 = argin1;
      AV *av = (AV*)(SvRV(ST(0)));
      if (av_len(av)+1 < 6)
      do_confess(NOT_ENOUGH_ELEMENTS, 1);
      for (unsigned int i=0; i<6; i++) {
        SV *sv = *av_fetch(av, i, 0);
        if (!SvOK(sv))
        do_confess(NEED_DEF, 1);
        arg1[i] =  SvNV(sv);
      }
    }
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApplyGeoTransform" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ApplyGeoTransform" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      CPLErrorReset();
      GDALApplyGeoTransform(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp,1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_InvGeoTransform) {
  {
    double *arg1 ;
    double *arg2 ;
    double argin1[6] ;
    double argout2[6] ;
    int argvi = 0;
    RETURN_NONE result;
    dXSARGS;
    
    {
      /* %typemap(in,numinputs=0) (double argout2[ANY]) */
      arg2 = argout2;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: InvGeoTransform(gt_in);");
    }
    {
      /* %typemap(in) (double argin1[ANY]) */
      if (!(SvROK(ST(0)) && (SvTYPE(SvRV(ST(0)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      arg1 = argin1;
      AV *av = (AV*)(SvRV(ST(0)));
      if (av_len(av)+1 < 6)
      do_confess(NOT_ENOUGH_ELEMENTS, 1);
      for (unsigned int i=0; i<6; i++) {
        SV *sv = *av_fetch(av, i, 0);
        if (!SvOK(sv))
        do_confess(NEED_DEF, 1);
        arg1[i] =  SvNV(sv);
      }
    }
    {
      CPLErrorReset();
      result = (RETURN_NONE)GDALInvGeoTransform(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) IF_FALSE_RETURN_NONE */
    }
    {
      /* %typemap(argout) (double argout[ANY]) */
      if (GIMME_V == G_ARRAY) {
        /* return a list */
        int i;
        EXTEND(SP, argvi+6-items+1);
        for (i = 0; i < 6; i++)
        ST(argvi++) = sv_2mortal(newSVnv(arg2[i]));
      } else {
        ST(argvi) = CreateArrayFromDoubleArray( arg2, 6 );
        argvi++;
      }
    }
    
    
    {
      /* %typemap(ret) IF_FALSE_RETURN_NONE */
      if (result == 0 ) {
        do_confess(CALL_FAILED, 1);
      }
    }
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_VersionInfo) {
  {
    char *arg1 = (char *) "VERSION_NUM" ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: VersionInfo(request);");
    }
    if (items > 0) {
      res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VersionInfo" "', argument " "1"" of type '" "char const *""'");
      }
      arg1 = reinterpret_cast< char * >(buf1);
    }
    {
      /* %typemap(check) (const char *request) */
      if (!arg1)
      do_confess(NEED_DEF, 1);
    }
    {
      CPLErrorReset();
      result = (char *)GDALVersionInfo((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_AllRegister) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: AllRegister();");
    }
    {
      CPLErrorReset();
      GDALAllRegister();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_GDALDestroyDriverManager) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GDALDestroyDriverManager();");
    }
    {
      CPLErrorReset();
      GDALDestroyDriverManager();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_GetCacheMax) {
  {
    int argvi = 0;
    GIntBig result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GetCacheMax();");
    }
    {
      CPLErrorReset();
      result = wrapper_GDALGetCacheMax();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      char temp[256];
      sprintf(temp, "" CPL_FRMT_GIB "", result);
      ST(argvi) = sv_2mortal(newSVpv(temp, 0));
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_GetCacheUsed) {
  {
    int argvi = 0;
    GIntBig result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GetCacheUsed();");
    }
    {
      CPLErrorReset();
      result = wrapper_GDALGetCacheUsed();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      char temp[256];
      sprintf(temp, "" CPL_FRMT_GIB "", result);
      ST(argvi) = sv_2mortal(newSVpv(temp, 0));
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_SetCacheMax) {
  {
    GIntBig arg1 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SetCacheMax(nBytes);");
    }
    {
      arg1 = CPLAtoGIntBig(SvPV_nolen(ST(0)));
    }
    {
      CPLErrorReset();
      wrapper_GDALSetCacheMax(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap__GetDataTypeSize) {
  {
    GDALDataType arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: _GetDataTypeSize(eDataType);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "_GetDataTypeSize" "', argument " "1"" of type '" "GDALDataType""'");
    } 
    arg1 = static_cast< GDALDataType >(val1);
    {
      CPLErrorReset();
      result = (int)GDALGetDataTypeSize(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap__DataTypeIsComplex) {
  {
    GDALDataType arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: _DataTypeIsComplex(eDataType);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "_DataTypeIsComplex" "', argument " "1"" of type '" "GDALDataType""'");
    } 
    arg1 = static_cast< GDALDataType >(val1);
    {
      CPLErrorReset();
      result = (int)GDALDataTypeIsComplex(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GetDataTypeName) {
  {
    GDALDataType arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GetDataTypeName(eDataType);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetDataTypeName" "', argument " "1"" of type '" "GDALDataType""'");
    } 
    arg1 = static_cast< GDALDataType >(val1);
    {
      CPLErrorReset();
      result = (char *)GDALGetDataTypeName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GetDataTypeByName) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    GDALDataType result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GetDataTypeByName(pszDataTypeName);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDataTypeByName" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      CPLErrorReset();
      result = (GDALDataType)GDALGetDataTypeByName((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_GetColorInterpretationName) {
  {
    GDALColorInterp arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GetColorInterpretationName(eColorInterp);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetColorInterpretationName" "', argument " "1"" of type '" "GDALColorInterp""'");
    } 
    arg1 = static_cast< GDALColorInterp >(val1);
    {
      CPLErrorReset();
      result = (char *)GDALGetColorInterpretationName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GetPaletteInterpretationName) {
  {
    GDALPaletteInterp arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GetPaletteInterpretationName(ePaletteInterp);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPaletteInterpretationName" "', argument " "1"" of type '" "GDALPaletteInterp""'");
    } 
    arg1 = static_cast< GDALPaletteInterp >(val1);
    {
      CPLErrorReset();
      result = (char *)GDALGetPaletteInterpretationName(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DecToDMS) {
  {
    double arg1 ;
    char *arg2 = (char *) 0 ;
    int arg3 = (int) 2 ;
    double val1 ;
    int ecode1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: DecToDMS(double,char const *,int);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DecToDMS" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecToDMS" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (items > 2) {
      ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
      if (!SWIG_IsOK(ecode3)) {
        SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DecToDMS" "', argument " "3"" of type '" "int""'");
      } 
      arg3 = static_cast< int >(val3);
    }
    {
      CPLErrorReset();
      result = (char *)GDALDecToDMS(arg1,(char const *)arg2,arg3);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) const char * */
      ST(argvi) = newSVpv(result, 0);
      SvUTF8_on(ST(argvi)); /* expecting GDAL to give us UTF-8 */
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PackedDMSToDec) {
  {
    double arg1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PackedDMSToDec(dfPacked);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PackedDMSToDec" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    {
      CPLErrorReset();
      result = (double)GDALPackedDMSToDec(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DecToPackedDMS) {
  {
    double arg1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DecToPackedDMS(dfDec);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DecToPackedDMS" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    {
      CPLErrorReset();
      result = (double)GDALDecToPackedDMS(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ParseXMLString) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    CPLXMLNode *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ParseXMLString(pszXMLString);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParseXMLString" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      CPLErrorReset();
      result = (CPLXMLNode *)CPLParseXMLString(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) (CPLXMLNode*) */
      ST(argvi) = newRV((SV*)XMLTreeToAV( result ));
      sv_2mortal(ST(argvi));
      argvi++;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    {
      /* %typemap(ret) (CPLXMLNode*) */
      if ( result ) CPLDestroyXMLNode( result );
    }
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_SerializeXMLTree) {
  {
    CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SerializeXMLTree(xmlnode);");
    }
    {
      /* %typemap(in) (CPLXMLNode* xmlnode ) */
      if (!(SvROK(ST(0)) && (SvTYPE(SvRV(ST(0)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(0)));
      int err;
      arg1 = AVToXMLTree( av, &err );
      if ( !arg1 ) {
        switch (err) {
        case 1:
          do_confess(ARRAY_TO_XML_FAILED " " NEED_DEF, 1);
        case 2:
          do_confess(ARRAY_TO_XML_FAILED " " NEED_ARRAY_REF, 1);
        }
      }
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)CPLSerializeXMLTree(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    {
      /* %typemap(freearg) (CPLXMLNode *xmlnode) */
      if ( arg1 ) CPLDestroyXMLNode( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (CPLXMLNode *xmlnode) */
      if ( arg1 ) CPLDestroyXMLNode( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_GetJPEG2000StructureAsString) {
  {
    char *arg1 = (char *) 0 ;
    char **arg2 = (char **) NULL ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: GetJPEG2000StructureAsString(pszFilename,options);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetJPEG2000StructureAsString" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)GetJPEG2000StructureAsString((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_GetDriverCount) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: GetDriverCount();");
    }
    {
      CPLErrorReset();
      result = (int)GetDriverCount();
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_GetDriverByName) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    GDALDriverShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GetDriverByName(name);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDriverByName" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDriverShadow *)GetDriverByName((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow, 0 | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_GetDriver__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    GDALDriverShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GetDriver(name);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDriver" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDriverShadow *)GetDriver((char const *)arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow, 0 | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_GetDriver__SWIG_1) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    GDALDriverShadow *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: GetDriver(i);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetDriver" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      CPLErrorReset();
      result = (GDALDriverShadow *)GetDriver(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GetDriver) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GetDriver__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_GetDriver__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'GetDriver'");
  XSRETURN(0);
}


XS(_wrap__Open) {
  {
    char *arg1 = (char *) 0 ;
    GDALAccess arg2 = (GDALAccess) GA_ReadOnly ;
    U8 *tmpbuf1 = NULL ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: _Open(utf8_path,eAccess);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Open" "', argument " "2"" of type '" "GDALAccess""'");
      } 
      arg2 = static_cast< GDALAccess >(val2);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)Open((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap__OpenEx) {
  {
    char *arg1 = (char *) 0 ;
    unsigned int arg2 = (unsigned int) 0 ;
    char **arg3 = (char **) NULL ;
    char **arg4 = (char **) NULL ;
    char **arg5 = (char **) NULL ;
    U8 *tmpbuf1 = NULL ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: _OpenEx(utf8_path,nOpenFlags,allowed_drivers,open_options,sibling_files);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_OpenEx" "', argument " "2"" of type '" "unsigned int""'");
      } 
      arg2 = static_cast< unsigned int >(val2);
    }
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(3)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddString(arg4, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(3)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(3));
              SV *sv;
              char *key;
              I32 klen;
              arg4 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddNameValue(arg4, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(4))) {
          if (SvROK(ST(4))) {
            if (SvTYPE(SvRV(ST(4)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(4)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddString(arg5, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(4)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(4));
              SV *sv;
              char *key;
              I32 klen;
              arg5 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg5 = CSLAddNameValue(arg5, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)OpenEx((char const *)arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    {
      /* %typemap(freearg) char **options */
      if (arg5) CSLDestroy( arg5 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap__OpenShared) {
  {
    char *arg1 = (char *) 0 ;
    GDALAccess arg2 = (GDALAccess) GA_ReadOnly ;
    U8 *tmpbuf1 = NULL ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: _OpenShared(utf8_path,eAccess);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_OpenShared" "', argument " "2"" of type '" "GDALAccess""'");
      } 
      arg2 = static_cast< GDALAccess >(val2);
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)OpenShared((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_IdentifyDriver) {
  {
    char *arg1 = (char *) 0 ;
    char **arg2 = (char **) NULL ;
    U8 *tmpbuf1 = NULL ;
    int argvi = 0;
    GDALDriverShadow *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 2)) {
      SWIG_croak("Usage: IdentifyDriver(utf8_path,papszSiblings);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDriverShadow *)IdentifyDriver((char const *)arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow, 0 | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_IdentifyDriverEx) {
  {
    char *arg1 = (char *) 0 ;
    unsigned int arg2 = (unsigned int) 0 ;
    char **arg3 = (char **) NULL ;
    char **arg4 = (char **) NULL ;
    U8 *tmpbuf1 = NULL ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    GDALDriverShadow *result = 0 ;
    dXSARGS;
    
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 4)) {
      SWIG_croak("Usage: IdentifyDriverEx(utf8_path,nIdentifyFlags,allowed_drivers,sibling_files);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdentifyDriverEx" "', argument " "2"" of type '" "unsigned int""'");
      } 
      arg2 = static_cast< unsigned int >(val2);
    }
    if (items > 2) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(2))) {
          if (SvROK(ST(2))) {
            if (SvTYPE(SvRV(ST(2)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(2)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddString(arg3, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(2)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(2));
              SV *sv;
              char *key;
              I32 klen;
              arg3 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg3 = CSLAddNameValue(arg3, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 3) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(3)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddString(arg4, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(3)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(3));
              SV *sv;
              char *key;
              I32 klen;
              arg4 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg4 = CSLAddNameValue(arg4, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDriverShadow *)IdentifyDriverEx((char const *)arg1,arg2,arg3,arg4);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDriverShadow, 0 | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    {
      /* %typemap(freearg) char **options */
      if (arg3) CSLDestroy( arg3 );
    }
    {
      /* %typemap(freearg) char **options */
      if (arg4) CSLDestroy( arg4 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_GeneralCmdLineProcessor) {
  {
    char **arg1 = (char **) 0 ;
    int arg2 = (int) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char **result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: GeneralCmdLineProcessor(papszArgv,nOptions);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralCmdLineProcessor" "', argument " "2"" of type '" "int""'");
      } 
      arg2 = static_cast< int >(val2);
    }
    {
      CPLErrorReset();
      result = (char **)GeneralCmdLineProcessor(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) char **options -> ( string ) */
      AV* av = (AV*)sv_2mortal((SV*)newAV());
      char **stringarray = result;
      if ( stringarray != NULL ) {
        int n = CSLCount( stringarray );
        for ( int i = 0; i < n; i++ ) {
          SV *sv = newSVpv(stringarray[i], 0);
          SvUTF8_on(sv); /* expecting UTF-8 from GDAL */
          if (!av_store(av, i, sv))
          SvREFCNT_dec(sv);
        }
      }
      ST(argvi) = newRV((SV*)av);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALInfoOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALInfoOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALInfoOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALInfoOptions *)new_GDALInfoOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALInfoOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALInfoOptions) {
  {
    GDALInfoOptions *arg1 = (GDALInfoOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALInfoOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALInfoOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALInfoOptions" "', argument " "1"" of type '" "GDALInfoOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALInfoOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALInfoOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDALInfo) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALInfoOptions *arg2 = (GDALInfoOptions *) 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDALInfo(hDataset,infoOptions);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALInfoOptions, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GDALInfo" "', argument " "2"" of type '" "GDALInfoOptions *""'"); 
    }
    arg2 = reinterpret_cast< GDALInfoOptions * >(argp2);
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)GDALInfo(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALMultiDimInfoOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALMultiDimInfoOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALMultiDimInfoOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALMultiDimInfoOptions *)new_GDALMultiDimInfoOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMultiDimInfoOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALMultiDimInfoOptions) {
  {
    GDALMultiDimInfoOptions *arg1 = (GDALMultiDimInfoOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALMultiDimInfoOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMultiDimInfoOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALMultiDimInfoOptions" "', argument " "1"" of type '" "GDALMultiDimInfoOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALMultiDimInfoOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALMultiDimInfoOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_GDALMultiDimInfo) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALMultiDimInfoOptions *arg2 = (GDALMultiDimInfoOptions *) 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    retStringAndCPLFree *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: GDALMultiDimInfo(hDataset,infoOptions);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_GDALMultiDimInfoOptions, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GDALMultiDimInfo" "', argument " "2"" of type '" "GDALMultiDimInfoOptions *""'"); 
    }
    arg2 = reinterpret_cast< GDALMultiDimInfoOptions * >(argp2);
    {
      CPLErrorReset();
      result = (retStringAndCPLFree *)GDALMultiDimInfo(arg1,arg2);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      ST(argvi) = SWIG_FromCharPtr((const char *)result);
      CPLFree(result);
    }
    else
    {
      ST(argvi) = &PL_sv_undef;
    }
    argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALTranslateOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALTranslateOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALTranslateOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALTranslateOptions *)new_GDALTranslateOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALTranslateOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALTranslateOptions) {
  {
    GDALTranslateOptions *arg1 = (GDALTranslateOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALTranslateOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALTranslateOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALTranslateOptions" "', argument " "1"" of type '" "GDALTranslateOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALTranslateOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALTranslateOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALTranslate) {
  {
    char *arg1 = (char *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    GDALTranslateOptions *arg3 = (GDALTranslateOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALTranslate(dest,dataset,translateOptions,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) (GDALDatasetShadow *) */
        void *argp = 0;
        int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
        if (!SWIG_IsOK(res)) {
          do_confess(WRONG_CLASS, 1);
        }
        arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
        if (arg2 == NULL)
        do_confess(NEED_DEF, 1);
      }
    }
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALTranslateOptions, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALTranslate" "', argument " "3"" of type '" "GDALTranslateOptions *""'"); 
      }
      arg3 = reinterpret_cast< GDALTranslateOptions * >(argp3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALTranslate((char const *)arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALWarpAppOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALWarpAppOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALWarpAppOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALWarpAppOptions *)new_GDALWarpAppOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALWarpAppOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALWarpAppOptions) {
  {
    GDALWarpAppOptions *arg1 = (GDALWarpAppOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALWarpAppOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALWarpAppOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALWarpAppOptions" "', argument " "1"" of type '" "GDALWarpAppOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALWarpAppOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALWarpAppOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALWarpDestDS) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    int arg2 ;
    GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
    GDALWarpAppOptions *arg4 = (GDALWarpAppOptions *) 0 ;
    GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
    void *arg6 = (void *) NULL ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg6 = (void *)(&saved_env);
    if ((items < 3) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALWarpDestDS(dstDS,object_list_count,poObjects,warpAppOptions,callback,callback_data);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in, numinputs=1) (int object_list_count, GDALDatasetShadow** poObjects) */
      if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
      do_confess(NEED_ARRAY_REF, 1);
      AV *av = (AV*)(SvRV(ST(1)));
      arg2 = av_len(av)+1;
      /* get the pointers from the array */
      arg3 = (GDALDatasetShadow **)CPLMalloc(arg2*sizeof(GDALDatasetShadow *));
      if (arg3) {
        for (int i = 0; i < arg2; i++) {
          SV **sv = av_fetch(av, i, 0);
          int ret = SWIG_ConvertPtr(*sv, &(arg3[i]), SWIGTYPE_p_GDALDatasetShadow, 0);
          if (!SWIG_IsOK(ret))
          do_confess(WRONG_ITEM_IN_ARRAY, 1);
        }
      } else
      do_confess(OUT_OF_MEMORY, 1);
    }
    res4 = SWIG_ConvertPtr(ST(2), &argp4,SWIGTYPE_p_GDALWarpAppOptions, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "wrapper_GDALWarpDestDS" "', argument " "4"" of type '" "GDALWarpAppOptions *""'"); 
    }
    arg4 = reinterpret_cast< GDALWarpAppOptions * >(argp4);
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg5 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      CPLErrorReset();
      result = (int)wrapper_GDALWarpDestDS(arg1,arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALWarpDestName) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
    GDALWarpAppOptions *arg4 = (GDALWarpAppOptions *) 0 ;
    GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
    void *arg6 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg6 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALWarpDestName(dest,object_list_count,poObjects,warpAppOptions,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in, numinputs=1) (int object_list_count, GDALDatasetShadow** poObjects) */
        if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
        do_confess(NEED_ARRAY_REF, 1);
        AV *av = (AV*)(SvRV(ST(1)));
        arg2 = av_len(av)+1;
        /* get the pointers from the array */
        arg3 = (GDALDatasetShadow **)CPLMalloc(arg2*sizeof(GDALDatasetShadow *));
        if (arg3) {
          for (int i = 0; i < arg2; i++) {
            SV **sv = av_fetch(av, i, 0);
            int ret = SWIG_ConvertPtr(*sv, &(arg3[i]), SWIGTYPE_p_GDALDatasetShadow, 0);
            if (!SWIG_IsOK(ret))
            do_confess(WRONG_ITEM_IN_ARRAY, 1);
          }
        } else
        do_confess(OUT_OF_MEMORY, 1);
      }
    }
    if (items > 2) {
      res4 = SWIG_ConvertPtr(ST(2), &argp4,SWIGTYPE_p_GDALWarpAppOptions, 0 |  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "wrapper_GDALWarpDestName" "', argument " "4"" of type '" "GDALWarpAppOptions *""'"); 
      }
      arg4 = reinterpret_cast< GDALWarpAppOptions * >(argp4);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg5 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALWarpDestName((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALVectorTranslateOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALVectorTranslateOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALVectorTranslateOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALVectorTranslateOptions *)new_GDALVectorTranslateOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALVectorTranslateOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALVectorTranslateOptions) {
  {
    GDALVectorTranslateOptions *arg1 = (GDALVectorTranslateOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALVectorTranslateOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALVectorTranslateOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALVectorTranslateOptions" "', argument " "1"" of type '" "GDALVectorTranslateOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALVectorTranslateOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALVectorTranslateOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALVectorTranslateDestDS) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    GDALVectorTranslateOptions *arg3 = (GDALVectorTranslateOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    if ((items < 3) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALVectorTranslateDestDS(dstDS,srcDS,options,callback,callback_data);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg2 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALVectorTranslateOptions, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALVectorTranslateDestDS" "', argument " "3"" of type '" "GDALVectorTranslateOptions *""'"); 
    }
    arg3 = reinterpret_cast< GDALVectorTranslateOptions * >(argp3);
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      CPLErrorReset();
      result = (int)wrapper_GDALVectorTranslateDestDS(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALVectorTranslateDestName) {
  {
    char *arg1 = (char *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    GDALVectorTranslateOptions *arg3 = (GDALVectorTranslateOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALVectorTranslateDestName(dest,srcDS,options,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) (GDALDatasetShadow *) */
        void *argp = 0;
        int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
        if (!SWIG_IsOK(res)) {
          do_confess(WRONG_CLASS, 1);
        }
        arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
        if (arg2 == NULL)
        do_confess(NEED_DEF, 1);
      }
    }
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALVectorTranslateOptions, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALVectorTranslateDestName" "', argument " "3"" of type '" "GDALVectorTranslateOptions *""'"); 
      }
      arg3 = reinterpret_cast< GDALVectorTranslateOptions * >(argp3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALVectorTranslateDestName((char const *)arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALDEMProcessingOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALDEMProcessingOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALDEMProcessingOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALDEMProcessingOptions *)new_GDALDEMProcessingOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDEMProcessingOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALDEMProcessingOptions) {
  {
    GDALDEMProcessingOptions *arg1 = (GDALDEMProcessingOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALDEMProcessingOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALDEMProcessingOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALDEMProcessingOptions" "', argument " "1"" of type '" "GDALDEMProcessingOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALDEMProcessingOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALDEMProcessingOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALDEMProcessing) {
  {
    char *arg1 = (char *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    GDALDEMProcessingOptions *arg5 = (GDALDEMProcessingOptions *) 0 ;
    GDALProgressFunc arg6 = (GDALProgressFunc) NULL ;
    void *arg7 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg7 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 7)) {
      SWIG_croak("Usage: wrapper_GDALDEMProcessing(dest,dataset,pszProcessing,pszColorFilename,options,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) (GDALDatasetShadow *) */
        void *argp = 0;
        int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
        if (!SWIG_IsOK(res)) {
          do_confess(WRONG_CLASS, 1);
        }
        arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
        if (arg2 == NULL)
        do_confess(NEED_DEF, 1);
      }
    }
    if (items > 2) {
      res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALDEMProcessing" "', argument " "3"" of type '" "char const *""'");
      }
      arg3 = reinterpret_cast< char * >(buf3);
    }
    if (items > 3) {
      res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, NULL, &alloc4);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "wrapper_GDALDEMProcessing" "', argument " "4"" of type '" "char const *""'");
      }
      arg4 = reinterpret_cast< char * >(buf4);
    }
    if (items > 4) {
      res5 = SWIG_ConvertPtr(ST(4), &argp5,SWIGTYPE_p_GDALDEMProcessingOptions, 0 |  0 );
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "wrapper_GDALDEMProcessing" "', argument " "5"" of type '" "GDALDEMProcessingOptions *""'"); 
      }
      arg5 = reinterpret_cast< GDALDEMProcessingOptions * >(argp5);
    }
    if (items > 5) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(5))) {
          if (SvROK(ST(5))) {
            if (SvTYPE(SvRV(ST(5))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(5);
              arg6 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 6) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(6)))
        saved_env.data = (SV *)ST(6);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg3) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALDEMProcessing((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALNearblackOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALNearblackOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALNearblackOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALNearblackOptions *)new_GDALNearblackOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALNearblackOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALNearblackOptions) {
  {
    GDALNearblackOptions *arg1 = (GDALNearblackOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALNearblackOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALNearblackOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALNearblackOptions" "', argument " "1"" of type '" "GDALNearblackOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALNearblackOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALNearblackOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALNearblackDestDS) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    GDALNearblackOptions *arg3 = (GDALNearblackOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    if ((items < 3) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALNearblackDestDS(dstDS,srcDS,options,callback,callback_data);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg2 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALNearblackOptions, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALNearblackDestDS" "', argument " "3"" of type '" "GDALNearblackOptions *""'"); 
    }
    arg3 = reinterpret_cast< GDALNearblackOptions * >(argp3);
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      CPLErrorReset();
      result = (int)wrapper_GDALNearblackDestDS(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALNearblackDestName) {
  {
    char *arg1 = (char *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    GDALNearblackOptions *arg3 = (GDALNearblackOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALNearblackDestName(dest,srcDS,options,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) (GDALDatasetShadow *) */
        void *argp = 0;
        int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
        if (!SWIG_IsOK(res)) {
          do_confess(WRONG_CLASS, 1);
        }
        arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
        if (arg2 == NULL)
        do_confess(NEED_DEF, 1);
      }
    }
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALNearblackOptions, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALNearblackDestName" "', argument " "3"" of type '" "GDALNearblackOptions *""'"); 
      }
      arg3 = reinterpret_cast< GDALNearblackOptions * >(argp3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALNearblackDestName((char const *)arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALGridOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALGridOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALGridOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALGridOptions *)new_GDALGridOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALGridOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALGridOptions) {
  {
    GDALGridOptions *arg1 = (GDALGridOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALGridOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALGridOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALGridOptions" "', argument " "1"" of type '" "GDALGridOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALGridOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALGridOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALGrid) {
  {
    char *arg1 = (char *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    GDALGridOptions *arg3 = (GDALGridOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALGrid(dest,dataset,options,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) (GDALDatasetShadow *) */
        void *argp = 0;
        int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
        if (!SWIG_IsOK(res)) {
          do_confess(WRONG_CLASS, 1);
        }
        arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
        if (arg2 == NULL)
        do_confess(NEED_DEF, 1);
      }
    }
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALGridOptions, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALGrid" "', argument " "3"" of type '" "GDALGridOptions *""'"); 
      }
      arg3 = reinterpret_cast< GDALGridOptions * >(argp3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      if (!arg2) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALGrid((char const *)arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALRasterizeOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALRasterizeOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALRasterizeOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALRasterizeOptions *)new_GDALRasterizeOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALRasterizeOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALRasterizeOptions) {
  {
    GDALRasterizeOptions *arg1 = (GDALRasterizeOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALRasterizeOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALRasterizeOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALRasterizeOptions" "', argument " "1"" of type '" "GDALRasterizeOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALRasterizeOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALRasterizeOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALRasterizeDestDS) {
  {
    GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    GDALRasterizeOptions *arg3 = (GDALRasterizeOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    if ((items < 3) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALRasterizeDestDS(dstDS,srcDS,options,callback,callback_data);");
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(0), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg1 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg1 == NULL)
      do_confess(NEED_DEF, 1);
    }
    {
      /* %typemap(in) (GDALDatasetShadow *) */
      void *argp = 0;
      int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
      if (!SWIG_IsOK(res)) {
        do_confess(WRONG_CLASS, 1);
      }
      arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
      if (arg2 == NULL)
      do_confess(NEED_DEF, 1);
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALRasterizeOptions, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALRasterizeDestDS" "', argument " "3"" of type '" "GDALRasterizeOptions *""'"); 
    }
    arg3 = reinterpret_cast< GDALRasterizeOptions * >(argp3);
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      CPLErrorReset();
      result = (int)wrapper_GDALRasterizeDestDS(arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALRasterizeDestName) {
  {
    char *arg1 = (char *) 0 ;
    GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
    GDALRasterizeOptions *arg3 = (GDALRasterizeOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALRasterizeDestName(dest,srcDS,options,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) (GDALDatasetShadow *) */
        void *argp = 0;
        int res = SWIG_ConvertPtr(ST(1), &argp, SWIGTYPE_p_GDALDatasetShadow, 0 |  0 );
        if (!SWIG_IsOK(res)) {
          do_confess(WRONG_CLASS, 1);
        }
        arg2 = reinterpret_cast< GDALDatasetShadow * >(argp);
        if (arg2 == NULL)
        do_confess(NEED_DEF, 1);
      }
    }
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALRasterizeOptions, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALRasterizeDestName" "', argument " "3"" of type '" "GDALRasterizeOptions *""'"); 
      }
      arg3 = reinterpret_cast< GDALRasterizeOptions * >(argp3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALRasterizeDestName((char const *)arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALBuildVRTOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALBuildVRTOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALBuildVRTOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALBuildVRTOptions *)new_GDALBuildVRTOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALBuildVRTOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALBuildVRTOptions) {
  {
    GDALBuildVRTOptions *arg1 = (GDALBuildVRTOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALBuildVRTOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALBuildVRTOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALBuildVRTOptions" "', argument " "1"" of type '" "GDALBuildVRTOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALBuildVRTOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALBuildVRTOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALBuildVRT_objects) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
    GDALBuildVRTOptions *arg4 = (GDALBuildVRTOptions *) 0 ;
    GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
    void *arg6 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg6 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALBuildVRT_objects(dest,object_list_count,poObjects,options,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in, numinputs=1) (int object_list_count, GDALDatasetShadow** poObjects) */
        if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
        do_confess(NEED_ARRAY_REF, 1);
        AV *av = (AV*)(SvRV(ST(1)));
        arg2 = av_len(av)+1;
        /* get the pointers from the array */
        arg3 = (GDALDatasetShadow **)CPLMalloc(arg2*sizeof(GDALDatasetShadow *));
        if (arg3) {
          for (int i = 0; i < arg2; i++) {
            SV **sv = av_fetch(av, i, 0);
            int ret = SWIG_ConvertPtr(*sv, &(arg3[i]), SWIGTYPE_p_GDALDatasetShadow, 0);
            if (!SWIG_IsOK(ret))
            do_confess(WRONG_ITEM_IN_ARRAY, 1);
          }
        } else
        do_confess(OUT_OF_MEMORY, 1);
      }
    }
    if (items > 2) {
      res4 = SWIG_ConvertPtr(ST(2), &argp4,SWIGTYPE_p_GDALBuildVRTOptions, 0 |  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "wrapper_GDALBuildVRT_objects" "', argument " "4"" of type '" "GDALBuildVRTOptions *""'"); 
      }
      arg4 = reinterpret_cast< GDALBuildVRTOptions * >(argp4);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg5 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALBuildVRT_objects((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALBuildVRT_names) {
  {
    char *arg1 = (char *) 0 ;
    char **arg2 = (char **) 0 ;
    GDALBuildVRTOptions *arg3 = (GDALBuildVRTOptions *) 0 ;
    GDALProgressFunc arg4 = (GDALProgressFunc) NULL ;
    void *arg5 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg5 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALBuildVRT_names(dest,source_filenames,options,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in) char **options */
        if (SvOK(ST(1))) {
          if (SvROK(ST(1))) {
            if (SvTYPE(SvRV(ST(1)))==SVt_PVAV) {
              AV *av = (AV*)(SvRV(ST(1)));
              for (int i = 0; i < av_len(av)+1; i++) {
                SV *sv = *(av_fetch(av, i, 0));
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddString(arg2, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else if (SvTYPE(SvRV(ST(1)))==SVt_PVHV) {
              HV *hv = (HV*)SvRV(ST(1));
              SV *sv;
              char *key;
              I32 klen;
              arg2 = NULL;
              hv_iterinit(hv);
              while(sv = hv_iternextsv(hv, &key, &klen)) {
                bool sf;
                char *tmp = sv_to_utf8_string(sv, NULL, &sf);
                arg2 = CSLAddNameValue(arg2, key, tmp);
                if (sf) Safefree(tmp); else free(tmp);
              }
            } else
            do_confess(NEED_REF, 1);
          } else
          do_confess(NEED_REF, 1);
        }
      }
    }
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_GDALBuildVRTOptions, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "wrapper_GDALBuildVRT_names" "', argument " "3"" of type '" "GDALBuildVRTOptions *""'"); 
      }
      arg3 = reinterpret_cast< GDALBuildVRTOptions * >(argp3);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg4 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALBuildVRT_names((char const *)arg1,arg2,arg3,arg4,arg5);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    {
      /* %typemap(freearg) char **options */
      if (arg2) CSLDestroy( arg2 );
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_GDALMultiDimTranslateOptions) {
  {
    char **arg1 = (char **) 0 ;
    int argvi = 0;
    GDALMultiDimTranslateOptions *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_GDALMultiDimTranslateOptions(options);");
    }
    {
      /* %typemap(in) char **options */
      if (SvOK(ST(0))) {
        if (SvROK(ST(0))) {
          if (SvTYPE(SvRV(ST(0)))==SVt_PVAV) {
            AV *av = (AV*)(SvRV(ST(0)));
            for (int i = 0; i < av_len(av)+1; i++) {
              SV *sv = *(av_fetch(av, i, 0));
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddString(arg1, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else if (SvTYPE(SvRV(ST(0)))==SVt_PVHV) {
            HV *hv = (HV*)SvRV(ST(0));
            SV *sv;
            char *key;
            I32 klen;
            arg1 = NULL;
            hv_iterinit(hv);
            while(sv = hv_iternextsv(hv, &key, &klen)) {
              bool sf;
              char *tmp = sv_to_utf8_string(sv, NULL, &sf);
              arg1 = CSLAddNameValue(arg1, key, tmp);
              if (sf) Safefree(tmp); else free(tmp);
            }
          } else
          do_confess(NEED_REF, 1);
        } else
        do_confess(NEED_REF, 1);
      }
    }
    {
      CPLErrorReset();
      result = (GDALMultiDimTranslateOptions *)new_GDALMultiDimTranslateOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALMultiDimTranslateOptions, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) char **options */
      if (arg1) CSLDestroy( arg1 );
    }
    SWIG_croak_null();
  }
}


XS(_wrap_delete_GDALMultiDimTranslateOptions) {
  {
    GDALMultiDimTranslateOptions *arg1 = (GDALMultiDimTranslateOptions *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_GDALMultiDimTranslateOptions(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_GDALMultiDimTranslateOptions, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GDALMultiDimTranslateOptions" "', argument " "1"" of type '" "GDALMultiDimTranslateOptions *""'"); 
    }
    arg1 = reinterpret_cast< GDALMultiDimTranslateOptions * >(argp1);
    {
      CPLErrorReset();
      delete_GDALMultiDimTranslateOptions(arg1);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    {
      /* %typemap(out) void */
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_wrapper_GDALMultiDimTranslateDestName) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
    GDALMultiDimTranslateOptions *arg4 = (GDALMultiDimTranslateOptions *) 0 ;
    GDALProgressFunc arg5 = (GDALProgressFunc) NULL ;
    void *arg6 = (void *) NULL ;
    U8 *tmpbuf1 = NULL ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    GDALDatasetShadow *result = 0 ;
    dXSARGS;
    
    /* %typemap(arginit, noblock=1) ( void* callback_data = NULL) */
    SavedEnv saved_env;
    saved_env.fct = NULL;
    saved_env.data = &PL_sv_undef;
    arg6 = (void *)(&saved_env);
    {
      /* %typemap(default) const char * utf8_path */
      arg1 = (char *)"";
    }
    if ((items < 0) || (items > 5)) {
      SWIG_croak("Usage: wrapper_GDALMultiDimTranslateDestName(dest,object_list_count,poObjects,multiDimTranslateOptions,callback,callback_data);");
    }
    if (items > 0) {
      {
        /* %typemap(in,numinputs=1) (const char* utf8_path) (U8 *tmpbuf1) */
        arg1 = sv_to_utf8_string(ST(0), &tmpbuf1);
      }
    }
    if (items > 1) {
      {
        /* %typemap(in, numinputs=1) (int object_list_count, GDALDatasetShadow** poObjects) */
        if (!(SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV)))
        do_confess(NEED_ARRAY_REF, 1);
        AV *av = (AV*)(SvRV(ST(1)));
        arg2 = av_len(av)+1;
        /* get the pointers from the array */
        arg3 = (GDALDatasetShadow **)CPLMalloc(arg2*sizeof(GDALDatasetShadow *));
        if (arg3) {
          for (int i = 0; i < arg2; i++) {
            SV **sv = av_fetch(av, i, 0);
            int ret = SWIG_ConvertPtr(*sv, &(arg3[i]), SWIGTYPE_p_GDALDatasetShadow, 0);
            if (!SWIG_IsOK(ret))
            do_confess(WRONG_ITEM_IN_ARRAY, 1);
          }
        } else
        do_confess(OUT_OF_MEMORY, 1);
      }
    }
    if (items > 2) {
      res4 = SWIG_ConvertPtr(ST(2), &argp4,SWIGTYPE_p_GDALMultiDimTranslateOptions, 0 |  0 );
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "wrapper_GDALMultiDimTranslateDestName" "', argument " "4"" of type '" "GDALMultiDimTranslateOptions *""'"); 
      }
      arg4 = reinterpret_cast< GDALMultiDimTranslateOptions * >(argp4);
    }
    if (items > 3) {
      {
        /* %typemap(in) (GDALProgressFunc callback = NULL) */
        if (SvOK(ST(3))) {
          if (SvROK(ST(3))) {
            if (SvTYPE(SvRV(ST(3))) != SVt_PVCV) {
              do_confess(NEED_CODE_REF, 1);
            } else {
              saved_env.fct = (SV *)ST(3);
              arg5 = &callback_d_cp_vp;
            }
          } else {
            do_confess(NEED_CODE_REF, 1);
          }
        }
      }
    }
    if (items > 4) {
      {
        /* %typemap(in) (void* callback_data=NULL) */
        if (SvOK(ST(4)))
        saved_env.data = (SV *)ST(4);
      }
    }
    {
      if (!arg1) {
        SWIG_exception(SWIG_ValueError,"Received a NULL pointer.");
      }
    }
    {
      CPLErrorReset();
      result = (GDALDatasetShadow *)wrapper_GDALMultiDimTranslateDestName((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
      CPLErr eclass = CPLGetLastErrorType();
      if ( eclass == CE_Failure || eclass == CE_Fatal ) {
        do_confess( CPLGetLastErrorMsg(), 0 );
        
        
        
        
        
      }
      
      
      /*
          Make warnings regular Perl warnings. This duplicates the warning
          message if DontUseExceptions() is in effect (it is not by default).
          */
      if ( eclass == CE_Warning ) {
        warn( CPLGetLastErrorMsg(), "%s" );
      }
      
      
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GDALDatasetShadow, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    XSRETURN(argvi);
  fail:
    {
      /* %typemap(freearg) (const char* utf8_path) */
      if (tmpbuf1) Safefree(tmpbuf1);
    }
    
    
    SWIG_croak_null();
  }
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_GDALDriverShadowTo_p_GDALMajorObjectShadow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GDALMajorObjectShadow *)  ((GDALDriverShadow *) x));
}
static void *_p_OGRLayerShadowTo_p_GDALMajorObjectShadow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GDALMajorObjectShadow *)  ((OGRLayerShadow *) x));
}
static void *_p_GDALDatasetShadowTo_p_GDALMajorObjectShadow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GDALMajorObjectShadow *)  ((GDALDatasetShadow *) x));
}
static void *_p_GDALRasterBandShadowTo_p_GDALMajorObjectShadow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GDALMajorObjectShadow *)  ((GDALRasterBandShadow *) x));
}
static swig_type_info _swigt__p_CPLErrorHandler = {"_p_CPLErrorHandler", "CPLErrorHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CPLXMLNode = {"_p_CPLXMLNode", "CPLXMLNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GByte = {"_p_GByte", "GByte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALAsyncReaderShadow = {"_p_GDALAsyncReaderShadow", "GDALAsyncReaderShadow *", 0, 0, (void*)"Geo::GDAL::AsyncReader", 0};
static swig_type_info _swigt__p_GDALAttributeHS = {"_p_GDALAttributeHS", "GDALAttributeHS *", 0, 0, (void*)"Geo::GDAL::Attribute", 0};
static swig_type_info _swigt__p_GDALBuildVRTOptions = {"_p_GDALBuildVRTOptions", "GDALBuildVRTOptions *", 0, 0, (void*)"Geo::GDAL::GDALBuildVRTOptions", 0};
static swig_type_info _swigt__p_GDALColorEntry = {"_p_GDALColorEntry", "GDALColorEntry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALColorTableShadow = {"_p_GDALColorTableShadow", "GDALColorTableShadow *", 0, 0, (void*)"Geo::GDAL::ColorTable", 0};
static swig_type_info _swigt__p_GDALDEMProcessingOptions = {"_p_GDALDEMProcessingOptions", "GDALDEMProcessingOptions *", 0, 0, (void*)"Geo::GDAL::GDALDEMProcessingOptions", 0};
static swig_type_info _swigt__p_GDALDatasetShadow = {"_p_GDALDatasetShadow", "GDALDatasetShadow *", 0, 0, (void*)"Geo::GDAL::Dataset", 0};
static swig_type_info _swigt__p_GDALDimensionHS = {"_p_GDALDimensionHS", "GDALDimensionHS *", 0, 0, (void*)"Geo::GDAL::Dimension", 0};
static swig_type_info _swigt__p_GDALDriverShadow = {"_p_GDALDriverShadow", "GDALDriverShadow *", 0, 0, (void*)"Geo::GDAL::Driver", 0};
static swig_type_info _swigt__p_GDALEDTComponentHS = {"_p_GDALEDTComponentHS", "GDALEDTComponentHS *", 0, 0, (void*)"Geo::GDAL::EDTComponent", 0};
static swig_type_info _swigt__p_GDALExtendedDataTypeClass = {"_p_GDALExtendedDataTypeClass", "enum GDALExtendedDataTypeClass *|GDALExtendedDataTypeClass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALExtendedDataTypeHS = {"_p_GDALExtendedDataTypeHS", "GDALExtendedDataTypeHS *", 0, 0, (void*)"Geo::GDAL::ExtendedDataType", 0};
static swig_type_info _swigt__p_GDALExtendedDataTypeSubType = {"_p_GDALExtendedDataTypeSubType", "enum GDALExtendedDataTypeSubType *|GDALExtendedDataTypeSubType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALGridOptions = {"_p_GDALGridOptions", "GDALGridOptions *", 0, 0, (void*)"Geo::GDAL::GDALGridOptions", 0};
static swig_type_info _swigt__p_GDALGroupHS = {"_p_GDALGroupHS", "GDALGroupHS *", 0, 0, (void*)"Geo::GDAL::Group", 0};
static swig_type_info _swigt__p_GDALInfoOptions = {"_p_GDALInfoOptions", "GDALInfoOptions *", 0, 0, (void*)"Geo::GDAL::GDALInfoOptions", 0};
static swig_type_info _swigt__p_GDALMDArrayHS = {"_p_GDALMDArrayHS", "GDALMDArrayHS *", 0, 0, (void*)"Geo::GDAL::MDArray", 0};
static swig_type_info _swigt__p_GDALMajorObjectShadow = {"_p_GDALMajorObjectShadow", "GDALMajorObjectShadow *", 0, 0, (void*)"Geo::GDAL::MajorObject", 0};
static swig_type_info _swigt__p_GDALMultiDimInfoOptions = {"_p_GDALMultiDimInfoOptions", "GDALMultiDimInfoOptions *", 0, 0, (void*)"Geo::GDAL::GDALMultiDimInfoOptions", 0};
static swig_type_info _swigt__p_GDALMultiDimTranslateOptions = {"_p_GDALMultiDimTranslateOptions", "GDALMultiDimTranslateOptions *", 0, 0, (void*)"Geo::GDAL::GDALMultiDimTranslateOptions", 0};
static swig_type_info _swigt__p_GDALNearblackOptions = {"_p_GDALNearblackOptions", "GDALNearblackOptions *", 0, 0, (void*)"Geo::GDAL::GDALNearblackOptions", 0};
static swig_type_info _swigt__p_GDALProgressFunc = {"_p_GDALProgressFunc", "GDALProgressFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALRasterAttributeTableShadow = {"_p_GDALRasterAttributeTableShadow", "GDALRasterAttributeTableShadow *", 0, 0, (void*)"Geo::GDAL::RasterAttributeTable", 0};
static swig_type_info _swigt__p_GDALRasterBandShadow = {"_p_GDALRasterBandShadow", "GDALRasterBandShadow *", 0, 0, (void*)"Geo::GDAL::Band", 0};
static swig_type_info _swigt__p_GDALRasterizeOptions = {"_p_GDALRasterizeOptions", "GDALRasterizeOptions *", 0, 0, (void*)"Geo::GDAL::GDALRasterizeOptions", 0};
static swig_type_info _swigt__p_GDALTransformerInfoShadow = {"_p_GDALTransformerInfoShadow", "GDALTransformerInfoShadow *", 0, 0, (void*)"Geo::GDAL::Transformer", 0};
static swig_type_info _swigt__p_GDALTranslateOptions = {"_p_GDALTranslateOptions", "GDALTranslateOptions *", 0, 0, (void*)"Geo::GDAL::GDALTranslateOptions", 0};
static swig_type_info _swigt__p_GDALVectorTranslateOptions = {"_p_GDALVectorTranslateOptions", "GDALVectorTranslateOptions *", 0, 0, (void*)"Geo::GDAL::GDALVectorTranslateOptions", 0};
static swig_type_info _swigt__p_GDALViewshedMode = {"_p_GDALViewshedMode", "enum GDALViewshedMode *|GDALViewshedMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALViewshedOutputType = {"_p_GDALViewshedOutputType", "enum GDALViewshedOutputType *|GDALViewshedOutputType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDALWarpAppOptions = {"_p_GDALWarpAppOptions", "GDALWarpAppOptions *", 0, 0, (void*)"Geo::GDAL::GDALWarpAppOptions", 0};
static swig_type_info _swigt__p_GDAL_GCP = {"_p_GDAL_GCP", "GDAL_GCP *", 0, 0, (void*)"Geo::GDAL::GCP", 0};
static swig_type_info _swigt__p_GIntBig = {"_p_GIntBig", "GIntBig *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GUIntBig = {"_p_GUIntBig", "GUIntBig *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OGRFeatureShadow = {"_p_OGRFeatureShadow", "OGRFeatureShadow *", 0, 0, (void*)"Geo::OGR::Feature", 0};
static swig_type_info _swigt__p_OGRFieldDomainShadow = {"_p_OGRFieldDomainShadow", "OGRFieldDomainShadow *", 0, 0, (void*)"Geo::OGR::FieldDomain", 0};
static swig_type_info _swigt__p_OGRGeometryShadow = {"_p_OGRGeometryShadow", "OGRGeometryShadow *", 0, 0, (void*)"Geo::OGR::Geometry", 0};
static swig_type_info _swigt__p_OGRLayerShadow = {"_p_OGRLayerShadow", "OGRLayerShadow *", 0, 0, (void*)"Geo::OGR::Layer", 0};
static swig_type_info _swigt__p_OGRStyleTableShadow = {"_p_OGRStyleTableShadow", "OGRStyleTableShadow *", 0, 0, (void*)"Geo::OGR::StyleTable", 0};
static swig_type_info _swigt__p_OSRSpatialReferenceShadow = {"_p_OSRSpatialReferenceShadow", "OSRSpatialReferenceShadow *", 0, 0, (void*)"Geo::OSR::SpatialReference", 0};
static swig_type_info _swigt__p_Statistics = {"_p_Statistics", "Statistics *", 0, 0, (void*)"Geo::GDAL::Statistics", 0};
static swig_type_info _swigt__p_VSILFILE = {"_p_VSILFILE", "VSILFILE *", 0, 0, (void*)"Geo::GDAL::VSILFILE", 0};
static swig_type_info _swigt__p_VSIStatBufL = {"_p_VSIStatBufL", "VSIStatBufL *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VSIWriteFunction = {"_p_VSIWriteFunction", "VSIWriteFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|retStringAndCPLFree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double_p_q_const__char_p_void__int = {"_p_f_double_p_q_const__char_p_void__int", "int (*)(double,char const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "OGRFieldSubType *|OGRFieldDomainType *|GDALRATFieldType *|OGRFieldType *|RETURN_NONE *|int *|GDALAccess *|OSRAxisMappingStrategy *|OGRwkbByteOrder *|CPLErr *|GDALRWFlag *|OGRJustification *|GDALRATFieldUsage *|GDALTileOrganization *|OGRAxisOrientation *|GDALPaletteInterp *|GDALColorInterp *|GDALRIOResampleAlg *|GDALResampleAlg *|OGRErr *|OGRwkbGeometryType *|GDALDataType *|GDALAsyncStatusType *|GDALRATTableType *|OGRFieldDomainMergePolicy *|OGRFieldDomainSplitPolicy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GDALDatasetShadow = {"_p_p_GDALDatasetShadow", "GDALDatasetShadow **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GDALRasterBandShadow = {"_p_p_GDALRasterBandShadow", "GDALRasterBandShadow **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GDAL_GCP = {"_p_p_GDAL_GCP", "GDAL_GCP **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GUIntBig = {"_p_p_GUIntBig", "GUIntBig **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CPLErrorHandler,
  &_swigt__p_CPLXMLNode,
  &_swigt__p_FILE,
  &_swigt__p_GByte,
  &_swigt__p_GDALAsyncReaderShadow,
  &_swigt__p_GDALAttributeHS,
  &_swigt__p_GDALBuildVRTOptions,
  &_swigt__p_GDALColorEntry,
  &_swigt__p_GDALColorTableShadow,
  &_swigt__p_GDALDEMProcessingOptions,
  &_swigt__p_GDALDatasetShadow,
  &_swigt__p_GDALDimensionHS,
  &_swigt__p_GDALDriverShadow,
  &_swigt__p_GDALEDTComponentHS,
  &_swigt__p_GDALExtendedDataTypeClass,
  &_swigt__p_GDALExtendedDataTypeHS,
  &_swigt__p_GDALExtendedDataTypeSubType,
  &_swigt__p_GDALGridOptions,
  &_swigt__p_GDALGroupHS,
  &_swigt__p_GDALInfoOptions,
  &_swigt__p_GDALMDArrayHS,
  &_swigt__p_GDALMajorObjectShadow,
  &_swigt__p_GDALMultiDimInfoOptions,
  &_swigt__p_GDALMultiDimTranslateOptions,
  &_swigt__p_GDALNearblackOptions,
  &_swigt__p_GDALProgressFunc,
  &_swigt__p_GDALRasterAttributeTableShadow,
  &_swigt__p_GDALRasterBandShadow,
  &_swigt__p_GDALRasterizeOptions,
  &_swigt__p_GDALTransformerInfoShadow,
  &_swigt__p_GDALTranslateOptions,
  &_swigt__p_GDALVectorTranslateOptions,
  &_swigt__p_GDALViewshedMode,
  &_swigt__p_GDALViewshedOutputType,
  &_swigt__p_GDALWarpAppOptions,
  &_swigt__p_GDAL_GCP,
  &_swigt__p_GIntBig,
  &_swigt__p_GUIntBig,
  &_swigt__p_OGRFeatureShadow,
  &_swigt__p_OGRFieldDomainShadow,
  &_swigt__p_OGRGeometryShadow,
  &_swigt__p_OGRLayerShadow,
  &_swigt__p_OGRStyleTableShadow,
  &_swigt__p_OSRSpatialReferenceShadow,
  &_swigt__p_Statistics,
  &_swigt__p_VSILFILE,
  &_swigt__p_VSIStatBufL,
  &_swigt__p_VSIWriteFunction,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_f_double_p_q_const__char_p_void__int,
  &_swigt__p_int,
  &_swigt__p_p_GDALDatasetShadow,
  &_swigt__p_p_GDALRasterBandShadow,
  &_swigt__p_p_GDAL_GCP,
  &_swigt__p_p_GUIntBig,
  &_swigt__p_p_char,
};

static swig_cast_info _swigc__p_CPLErrorHandler[] = {  {&_swigt__p_CPLErrorHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CPLXMLNode[] = {  {&_swigt__p_CPLXMLNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GByte[] = {  {&_swigt__p_GByte, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALAsyncReaderShadow[] = {  {&_swigt__p_GDALAsyncReaderShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALAttributeHS[] = {  {&_swigt__p_GDALAttributeHS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALBuildVRTOptions[] = {  {&_swigt__p_GDALBuildVRTOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALColorEntry[] = {  {&_swigt__p_GDALColorEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALColorTableShadow[] = {  {&_swigt__p_GDALColorTableShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALDEMProcessingOptions[] = {  {&_swigt__p_GDALDEMProcessingOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALDatasetShadow[] = {  {&_swigt__p_GDALDatasetShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALDimensionHS[] = {  {&_swigt__p_GDALDimensionHS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALDriverShadow[] = {  {&_swigt__p_GDALDriverShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALEDTComponentHS[] = {  {&_swigt__p_GDALEDTComponentHS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALExtendedDataTypeClass[] = {  {&_swigt__p_GDALExtendedDataTypeClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALExtendedDataTypeHS[] = {  {&_swigt__p_GDALExtendedDataTypeHS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALExtendedDataTypeSubType[] = {  {&_swigt__p_GDALExtendedDataTypeSubType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALGridOptions[] = {  {&_swigt__p_GDALGridOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALGroupHS[] = {  {&_swigt__p_GDALGroupHS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALInfoOptions[] = {  {&_swigt__p_GDALInfoOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALMDArrayHS[] = {  {&_swigt__p_GDALMDArrayHS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALMajorObjectShadow[] = {  {&_swigt__p_GDALMajorObjectShadow, 0, 0, 0},  {&_swigt__p_GDALDriverShadow, _p_GDALDriverShadowTo_p_GDALMajorObjectShadow, 0, 0},  {&_swigt__p_OGRLayerShadow, _p_OGRLayerShadowTo_p_GDALMajorObjectShadow, 0, 0},  {&_swigt__p_GDALDatasetShadow, _p_GDALDatasetShadowTo_p_GDALMajorObjectShadow, 0, 0},  {&_swigt__p_GDALRasterBandShadow, _p_GDALRasterBandShadowTo_p_GDALMajorObjectShadow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALMultiDimInfoOptions[] = {  {&_swigt__p_GDALMultiDimInfoOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALMultiDimTranslateOptions[] = {  {&_swigt__p_GDALMultiDimTranslateOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALNearblackOptions[] = {  {&_swigt__p_GDALNearblackOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALProgressFunc[] = {  {&_swigt__p_GDALProgressFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALRasterAttributeTableShadow[] = {  {&_swigt__p_GDALRasterAttributeTableShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALRasterBandShadow[] = {  {&_swigt__p_GDALRasterBandShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALRasterizeOptions[] = {  {&_swigt__p_GDALRasterizeOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALTransformerInfoShadow[] = {  {&_swigt__p_GDALTransformerInfoShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALTranslateOptions[] = {  {&_swigt__p_GDALTranslateOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALVectorTranslateOptions[] = {  {&_swigt__p_GDALVectorTranslateOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALViewshedMode[] = {  {&_swigt__p_GDALViewshedMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALViewshedOutputType[] = {  {&_swigt__p_GDALViewshedOutputType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDALWarpAppOptions[] = {  {&_swigt__p_GDALWarpAppOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDAL_GCP[] = {  {&_swigt__p_GDAL_GCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GIntBig[] = {  {&_swigt__p_GIntBig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GUIntBig[] = {  {&_swigt__p_GUIntBig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OGRFeatureShadow[] = {  {&_swigt__p_OGRFeatureShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OGRFieldDomainShadow[] = {  {&_swigt__p_OGRFieldDomainShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OGRGeometryShadow[] = {  {&_swigt__p_OGRGeometryShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OGRLayerShadow[] = {  {&_swigt__p_OGRLayerShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OGRStyleTableShadow[] = {  {&_swigt__p_OGRStyleTableShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSRSpatialReferenceShadow[] = {  {&_swigt__p_OSRSpatialReferenceShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Statistics[] = {  {&_swigt__p_Statistics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VSILFILE[] = {  {&_swigt__p_VSILFILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VSIStatBufL[] = {  {&_swigt__p_VSIStatBufL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VSIWriteFunction[] = {  {&_swigt__p_VSIWriteFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double_p_q_const__char_p_void__int[] = {  {&_swigt__p_f_double_p_q_const__char_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GDALDatasetShadow[] = {  {&_swigt__p_p_GDALDatasetShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GDALRasterBandShadow[] = {  {&_swigt__p_p_GDALRasterBandShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GDAL_GCP[] = {  {&_swigt__p_p_GDAL_GCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GUIntBig[] = {  {&_swigt__p_p_GUIntBig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CPLErrorHandler,
  _swigc__p_CPLXMLNode,
  _swigc__p_FILE,
  _swigc__p_GByte,
  _swigc__p_GDALAsyncReaderShadow,
  _swigc__p_GDALAttributeHS,
  _swigc__p_GDALBuildVRTOptions,
  _swigc__p_GDALColorEntry,
  _swigc__p_GDALColorTableShadow,
  _swigc__p_GDALDEMProcessingOptions,
  _swigc__p_GDALDatasetShadow,
  _swigc__p_GDALDimensionHS,
  _swigc__p_GDALDriverShadow,
  _swigc__p_GDALEDTComponentHS,
  _swigc__p_GDALExtendedDataTypeClass,
  _swigc__p_GDALExtendedDataTypeHS,
  _swigc__p_GDALExtendedDataTypeSubType,
  _swigc__p_GDALGridOptions,
  _swigc__p_GDALGroupHS,
  _swigc__p_GDALInfoOptions,
  _swigc__p_GDALMDArrayHS,
  _swigc__p_GDALMajorObjectShadow,
  _swigc__p_GDALMultiDimInfoOptions,
  _swigc__p_GDALMultiDimTranslateOptions,
  _swigc__p_GDALNearblackOptions,
  _swigc__p_GDALProgressFunc,
  _swigc__p_GDALRasterAttributeTableShadow,
  _swigc__p_GDALRasterBandShadow,
  _swigc__p_GDALRasterizeOptions,
  _swigc__p_GDALTransformerInfoShadow,
  _swigc__p_GDALTranslateOptions,
  _swigc__p_GDALVectorTranslateOptions,
  _swigc__p_GDALViewshedMode,
  _swigc__p_GDALViewshedOutputType,
  _swigc__p_GDALWarpAppOptions,
  _swigc__p_GDAL_GCP,
  _swigc__p_GIntBig,
  _swigc__p_GUIntBig,
  _swigc__p_OGRFeatureShadow,
  _swigc__p_OGRFieldDomainShadow,
  _swigc__p_OGRGeometryShadow,
  _swigc__p_OGRLayerShadow,
  _swigc__p_OGRStyleTableShadow,
  _swigc__p_OSRSpatialReferenceShadow,
  _swigc__p_Statistics,
  _swigc__p_VSILFILE,
  _swigc__p_VSIStatBufL,
  _swigc__p_VSIWriteFunction,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_f_double_p_q_const__char_p_void__int,
  _swigc__p_int,
  _swigc__p_p_GDALDatasetShadow,
  _swigc__p_p_GDALRasterBandShadow,
  _swigc__p_p_GDAL_GCP,
  _swigc__p_p_GUIntBig,
  _swigc__p_p_char,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"Geo::GDALc::UseExceptions", _wrap_UseExceptions},
{"Geo::GDALc::DontUseExceptions", _wrap_DontUseExceptions},
{"Geo::GDALc::Debug", _wrap_Debug},
{"Geo::GDALc::SetErrorHandler", _wrap_SetErrorHandler},
{"Geo::GDALc::SetCurrentErrorHandlerCatchDebug", _wrap_SetCurrentErrorHandlerCatchDebug},
{"Geo::GDALc::Error", _wrap_Error},
{"Geo::GDALc::GOA2GetAuthorizationURL", _wrap_GOA2GetAuthorizationURL},
{"Geo::GDALc::GOA2GetRefreshToken", _wrap_GOA2GetRefreshToken},
{"Geo::GDALc::GOA2GetAccessToken", _wrap_GOA2GetAccessToken},
{"Geo::GDALc::PushErrorHandler", _wrap_PushErrorHandler},
{"Geo::GDALc::PopErrorHandler", _wrap_PopErrorHandler},
{"Geo::GDALc::ErrorReset", _wrap_ErrorReset},
{"Geo::GDALc::EscapeString", _wrap_EscapeString},
{"Geo::GDALc::GetLastErrorNo", _wrap_GetLastErrorNo},
{"Geo::GDALc::GetLastErrorType", _wrap_GetLastErrorType},
{"Geo::GDALc::GetLastErrorMsg", _wrap_GetLastErrorMsg},
{"Geo::GDALc::GetErrorCounter", _wrap_GetErrorCounter},
{"Geo::GDALc::VSIGetLastErrorNo", _wrap_VSIGetLastErrorNo},
{"Geo::GDALc::VSIGetLastErrorMsg", _wrap_VSIGetLastErrorMsg},
{"Geo::GDALc::VSIErrorReset", _wrap_VSIErrorReset},
{"Geo::GDALc::PushFinderLocation", _wrap_PushFinderLocation},
{"Geo::GDALc::PopFinderLocation", _wrap_PopFinderLocation},
{"Geo::GDALc::FinderClean", _wrap_FinderClean},
{"Geo::GDALc::FindFile", _wrap_FindFile},
{"Geo::GDALc::ReadDir", _wrap_ReadDir},
{"Geo::GDALc::ReadDirRecursive", _wrap_ReadDirRecursive},
{"Geo::GDALc::SetConfigOption", _wrap_SetConfigOption},
{"Geo::GDALc::SetThreadLocalConfigOption", _wrap_SetThreadLocalConfigOption},
{"Geo::GDALc::GetConfigOption", _wrap_GetConfigOption},
{"Geo::GDALc::GetThreadLocalConfigOption", _wrap_GetThreadLocalConfigOption},
{"Geo::GDALc::CPLBinaryToHex", _wrap_CPLBinaryToHex},
{"Geo::GDALc::CPLHexToBinary", _wrap_CPLHexToBinary},
{"Geo::GDALc::FileFromMemBuffer", _wrap_FileFromMemBuffer},
{"Geo::GDALc::Unlink", _wrap_Unlink},
{"Geo::GDALc::UnlinkBatch", _wrap_UnlinkBatch},
{"Geo::GDALc::HasThreadSupport", _wrap_HasThreadSupport},
{"Geo::GDALc::Mkdir", _wrap_Mkdir},
{"Geo::GDALc::Rmdir", _wrap_Rmdir},
{"Geo::GDALc::MkdirRecursive", _wrap_MkdirRecursive},
{"Geo::GDALc::RmdirRecursive", _wrap_RmdirRecursive},
{"Geo::GDALc::Rename", _wrap_Rename},
{"Geo::GDALc::GetActualURL", _wrap_GetActualURL},
{"Geo::GDALc::GetSignedURL", _wrap_GetSignedURL},
{"Geo::GDALc::GetFileSystemsPrefixes", _wrap_GetFileSystemsPrefixes},
{"Geo::GDALc::GetFileSystemOptions", _wrap_GetFileSystemOptions},
{"Geo::GDALc::Stat", _wrap_Stat},
{"Geo::GDALc::GetFileMetadata", _wrap_GetFileMetadata},
{"Geo::GDALc::SetFileMetadata", _wrap_SetFileMetadata},
{"Geo::GDALc::VSIFOpenL", _wrap_VSIFOpenL},
{"Geo::GDALc::VSIFOpenExL", _wrap_VSIFOpenExL},
{"Geo::GDALc::VSIFEofL", _wrap_VSIFEofL},
{"Geo::GDALc::VSIFFlushL", _wrap_VSIFFlushL},
{"Geo::GDALc::VSIFCloseL", _wrap_VSIFCloseL},
{"Geo::GDALc::VSIFSeekL", _wrap_VSIFSeekL},
{"Geo::GDALc::VSIFTellL", _wrap_VSIFTellL},
{"Geo::GDALc::VSIFTruncateL", _wrap_VSIFTruncateL},
{"Geo::GDALc::VSIFWriteL", _wrap_VSIFWriteL},
{"Geo::GDALc::VSIFReadL", _wrap_VSIFReadL},
{"Geo::GDALc::VSIStdoutSetRedirection", _wrap_VSIStdoutSetRedirection},
{"Geo::GDALc::VSIStdoutUnsetRedirection", _wrap_VSIStdoutUnsetRedirection},
{"Geo::GDALc::VSICurlClearCache", _wrap_VSICurlClearCache},
{"Geo::GDALc::VSICurlPartialClearCache", _wrap_VSICurlPartialClearCache},
{"Geo::GDALc::NetworkStatsReset", _wrap_NetworkStatsReset},
{"Geo::GDALc::NetworkStatsGetAsSerializedJSON", _wrap_NetworkStatsGetAsSerializedJSON},
{"Geo::GDALc::ParseCommandLine", _wrap_ParseCommandLine},
{"Geo::GDALc::MajorObject_GetDescription", _wrap_MajorObject_GetDescription},
{"Geo::GDALc::MajorObject_SetDescription", _wrap_MajorObject_SetDescription},
{"Geo::GDALc::MajorObject_GetMetadataDomainList", _wrap_MajorObject_GetMetadataDomainList},
{"Geo::GDALc::MajorObject_GetMetadata", _wrap_MajorObject_GetMetadata},
{"Geo::GDALc::MajorObject_SetMetadata", _wrap_MajorObject_SetMetadata},
{"Geo::GDALc::MajorObject_GetMetadataItem", _wrap_MajorObject_GetMetadataItem},
{"Geo::GDALc::MajorObject_SetMetadataItem", _wrap_MajorObject_SetMetadataItem},
{"Geo::GDALc::Driver_ShortName_get", _wrap_Driver_ShortName_get},
{"Geo::GDALc::Driver_LongName_get", _wrap_Driver_LongName_get},
{"Geo::GDALc::Driver_HelpTopic_get", _wrap_Driver_HelpTopic_get},
{"Geo::GDALc::Driver__Create", _wrap_Driver__Create},
{"Geo::GDALc::Driver_CreateMultiDimensional", _wrap_Driver_CreateMultiDimensional},
{"Geo::GDALc::Driver__CreateCopy", _wrap_Driver__CreateCopy},
{"Geo::GDALc::Driver_Delete", _wrap_Driver_Delete},
{"Geo::GDALc::Driver_Rename", _wrap_Driver_Rename},
{"Geo::GDALc::Driver_CopyFiles", _wrap_Driver_CopyFiles},
{"Geo::GDALc::Driver_Register", _wrap_Driver_Register},
{"Geo::GDALc::Driver_Deregister", _wrap_Driver_Deregister},
{"Geo::GDALc::GCP_X_set", _wrap_GCP_X_set},
{"Geo::GDALc::GCP_X_get", _wrap_GCP_X_get},
{"Geo::GDALc::GCP_Y_set", _wrap_GCP_Y_set},
{"Geo::GDALc::GCP_Y_get", _wrap_GCP_Y_get},
{"Geo::GDALc::GCP_Z_set", _wrap_GCP_Z_set},
{"Geo::GDALc::GCP_Z_get", _wrap_GCP_Z_get},
{"Geo::GDALc::GCP_Column_set", _wrap_GCP_Column_set},
{"Geo::GDALc::GCP_Column_get", _wrap_GCP_Column_get},
{"Geo::GDALc::GCP_Row_set", _wrap_GCP_Row_set},
{"Geo::GDALc::GCP_Row_get", _wrap_GCP_Row_get},
{"Geo::GDALc::GCP_Info_set", _wrap_GCP_Info_set},
{"Geo::GDALc::GCP_Info_get", _wrap_GCP_Info_get},
{"Geo::GDALc::GCP_Id_set", _wrap_GCP_Id_set},
{"Geo::GDALc::GCP_Id_get", _wrap_GCP_Id_get},
{"Geo::GDALc::new_GCP", _wrap_new_GCP},
{"Geo::GDALc::delete_GCP", _wrap_delete_GCP},
{"Geo::GDALc::GDAL_GCP_GCPX_get", _wrap_GDAL_GCP_GCPX_get},
{"Geo::GDALc::GDAL_GCP_GCPX_set", _wrap_GDAL_GCP_GCPX_set},
{"Geo::GDALc::GDAL_GCP_GCPY_get", _wrap_GDAL_GCP_GCPY_get},
{"Geo::GDALc::GDAL_GCP_GCPY_set", _wrap_GDAL_GCP_GCPY_set},
{"Geo::GDALc::GDAL_GCP_GCPZ_get", _wrap_GDAL_GCP_GCPZ_get},
{"Geo::GDALc::GDAL_GCP_GCPZ_set", _wrap_GDAL_GCP_GCPZ_set},
{"Geo::GDALc::GDAL_GCP_GCPPixel_get", _wrap_GDAL_GCP_GCPPixel_get},
{"Geo::GDALc::GDAL_GCP_GCPPixel_set", _wrap_GDAL_GCP_GCPPixel_set},
{"Geo::GDALc::GDAL_GCP_GCPLine_get", _wrap_GDAL_GCP_GCPLine_get},
{"Geo::GDALc::GDAL_GCP_GCPLine_set", _wrap_GDAL_GCP_GCPLine_set},
{"Geo::GDALc::GDAL_GCP_Info_get", _wrap_GDAL_GCP_Info_get},
{"Geo::GDALc::GDAL_GCP_Info_set", _wrap_GDAL_GCP_Info_set},
{"Geo::GDALc::GDAL_GCP_Id_get", _wrap_GDAL_GCP_Id_get},
{"Geo::GDALc::GDAL_GCP_Id_set", _wrap_GDAL_GCP_Id_set},
{"Geo::GDALc::GCPsToGeoTransform", _wrap_GCPsToGeoTransform},
{"Geo::GDALc::delete_AsyncReader", _wrap_delete_AsyncReader},
{"Geo::GDALc::AsyncReader_GetNextUpdatedRegion", _wrap_AsyncReader_GetNextUpdatedRegion},
{"Geo::GDALc::AsyncReader_LockBuffer", _wrap_AsyncReader_LockBuffer},
{"Geo::GDALc::AsyncReader_UnlockBuffer", _wrap_AsyncReader_UnlockBuffer},
{"Geo::GDALc::Dataset_RasterXSize_get", _wrap_Dataset_RasterXSize_get},
{"Geo::GDALc::Dataset_RasterYSize_get", _wrap_Dataset_RasterYSize_get},
{"Geo::GDALc::Dataset_RasterCount_get", _wrap_Dataset_RasterCount_get},
{"Geo::GDALc::delete_Dataset", _wrap_delete_Dataset},
{"Geo::GDALc::Dataset_GetDriver", _wrap_Dataset_GetDriver},
{"Geo::GDALc::Dataset__GetRasterBand", _wrap_Dataset__GetRasterBand},
{"Geo::GDALc::Dataset_GetRootGroup", _wrap_Dataset_GetRootGroup},
{"Geo::GDALc::Dataset_GetProjection", _wrap_Dataset_GetProjection},
{"Geo::GDALc::Dataset_GetProjectionRef", _wrap_Dataset_GetProjectionRef},
{"Geo::GDALc::Dataset_GetSpatialRef", _wrap_Dataset_GetSpatialRef},
{"Geo::GDALc::Dataset_SetProjection", _wrap_Dataset_SetProjection},
{"Geo::GDALc::Dataset_SetSpatialRef", _wrap_Dataset_SetSpatialRef},
{"Geo::GDALc::Dataset_GetGeoTransform", _wrap_Dataset_GetGeoTransform},
{"Geo::GDALc::Dataset_SetGeoTransform", _wrap_Dataset_SetGeoTransform},
{"Geo::GDALc::Dataset__BuildOverviews", _wrap_Dataset__BuildOverviews},
{"Geo::GDALc::Dataset_GetGCPCount", _wrap_Dataset_GetGCPCount},
{"Geo::GDALc::Dataset_GetGCPProjection", _wrap_Dataset_GetGCPProjection},
{"Geo::GDALc::Dataset_GetGCPSpatialRef", _wrap_Dataset_GetGCPSpatialRef},
{"Geo::GDALc::Dataset_GetGCPs", _wrap_Dataset_GetGCPs},
{"Geo::GDALc::Dataset_SetGCPs", _wrap_Dataset_SetGCPs},
{"Geo::GDALc::Dataset_SetGCPs2", _wrap_Dataset_SetGCPs2},
{"Geo::GDALc::Dataset_FlushCache", _wrap_Dataset_FlushCache},
{"Geo::GDALc::Dataset__AddBand", _wrap_Dataset__AddBand},
{"Geo::GDALc::Dataset__CreateMaskBand", _wrap_Dataset__CreateMaskBand},
{"Geo::GDALc::Dataset_GetFileList", _wrap_Dataset_GetFileList},
{"Geo::GDALc::Dataset__WriteRaster", _wrap_Dataset__WriteRaster},
{"Geo::GDALc::Dataset__ReadRaster", _wrap_Dataset__ReadRaster},
{"Geo::GDALc::Dataset_AdviseRead", _wrap_Dataset_AdviseRead},
{"Geo::GDALc::Dataset__CreateLayer", _wrap_Dataset__CreateLayer},
{"Geo::GDALc::Dataset_CopyLayer", _wrap_Dataset_CopyLayer},
{"Geo::GDALc::Dataset__DeleteLayer", _wrap_Dataset__DeleteLayer},
{"Geo::GDALc::Dataset_GetLayerCount", _wrap_Dataset_GetLayerCount},
{"Geo::GDALc::Dataset_IsLayerPrivate", _wrap_Dataset_IsLayerPrivate},
{"Geo::GDALc::Dataset_GetLayerByIndex", _wrap_Dataset_GetLayerByIndex},
{"Geo::GDALc::Dataset_GetLayerByName", _wrap_Dataset_GetLayerByName},
{"Geo::GDALc::Dataset_ResetReading", _wrap_Dataset_ResetReading},
{"Geo::GDALc::Dataset_GetNextFeature", _wrap_Dataset_GetNextFeature},
{"Geo::GDALc::Dataset__TestCapability", _wrap_Dataset__TestCapability},
{"Geo::GDALc::Dataset_ExecuteSQL", _wrap_Dataset_ExecuteSQL},
{"Geo::GDALc::Dataset__ReleaseResultSet", _wrap_Dataset__ReleaseResultSet},
{"Geo::GDALc::Dataset_GetStyleTable", _wrap_Dataset_GetStyleTable},
{"Geo::GDALc::Dataset_SetStyleTable", _wrap_Dataset_SetStyleTable},
{"Geo::GDALc::Dataset_AbortSQL", _wrap_Dataset_AbortSQL},
{"Geo::GDALc::Dataset_StartTransaction", _wrap_Dataset_StartTransaction},
{"Geo::GDALc::Dataset_CommitTransaction", _wrap_Dataset_CommitTransaction},
{"Geo::GDALc::Dataset_RollbackTransaction", _wrap_Dataset_RollbackTransaction},
{"Geo::GDALc::Dataset_ClearStatistics", _wrap_Dataset_ClearStatistics},
{"Geo::GDALc::Dataset_GetFieldDomain", _wrap_Dataset_GetFieldDomain},
{"Geo::GDALc::Dataset_AddFieldDomain", _wrap_Dataset_AddFieldDomain},
{"Geo::GDALc::delete_Group", _wrap_delete_Group},
{"Geo::GDALc::Group_GetName", _wrap_Group_GetName},
{"Geo::GDALc::Group_GetFullName", _wrap_Group_GetFullName},
{"Geo::GDALc::Group_GetMDArrayNames", _wrap_Group_GetMDArrayNames},
{"Geo::GDALc::Group_OpenMDArray", _wrap_Group_OpenMDArray},
{"Geo::GDALc::Group_OpenMDArrayFromFullname", _wrap_Group_OpenMDArrayFromFullname},
{"Geo::GDALc::Group_ResolveMDArray", _wrap_Group_ResolveMDArray},
{"Geo::GDALc::Group_GetGroupNames", _wrap_Group_GetGroupNames},
{"Geo::GDALc::Group_OpenGroup", _wrap_Group_OpenGroup},
{"Geo::GDALc::Group_OpenGroupFromFullname", _wrap_Group_OpenGroupFromFullname},
{"Geo::GDALc::Group_GetVectorLayerNames", _wrap_Group_GetVectorLayerNames},
{"Geo::GDALc::Group_OpenVectorLayer", _wrap_Group_OpenVectorLayer},
{"Geo::GDALc::Group_GetAttribute", _wrap_Group_GetAttribute},
{"Geo::GDALc::Group_GetStructuralInfo", _wrap_Group_GetStructuralInfo},
{"Geo::GDALc::Group_CreateGroup", _wrap_Group_CreateGroup},
{"Geo::GDALc::Group_CreateDimension", _wrap_Group_CreateDimension},
{"Geo::GDALc::Group_CreateAttribute", _wrap_Group_CreateAttribute},
{"Geo::GDALc::Statistics_min_get", _wrap_Statistics_min_get},
{"Geo::GDALc::Statistics_max_get", _wrap_Statistics_max_get},
{"Geo::GDALc::Statistics_mean_get", _wrap_Statistics_mean_get},
{"Geo::GDALc::Statistics_std_dev_get", _wrap_Statistics_std_dev_get},
{"Geo::GDALc::Statistics_valid_count_get", _wrap_Statistics_valid_count_get},
{"Geo::GDALc::delete_Statistics", _wrap_delete_Statistics},
{"Geo::GDALc::new_Statistics", _wrap_new_Statistics},
{"Geo::GDALc::delete_MDArray", _wrap_delete_MDArray},
{"Geo::GDALc::MDArray_GetName", _wrap_MDArray_GetName},
{"Geo::GDALc::MDArray_GetFullName", _wrap_MDArray_GetFullName},
{"Geo::GDALc::MDArray_GetTotalElementsCount", _wrap_MDArray_GetTotalElementsCount},
{"Geo::GDALc::MDArray_GetDimensionCount", _wrap_MDArray_GetDimensionCount},
{"Geo::GDALc::MDArray_GetDataType", _wrap_MDArray_GetDataType},
{"Geo::GDALc::MDArray_GetStructuralInfo", _wrap_MDArray_GetStructuralInfo},
{"Geo::GDALc::MDArray_GetAttribute", _wrap_MDArray_GetAttribute},
{"Geo::GDALc::MDArray_CreateAttribute", _wrap_MDArray_CreateAttribute},
{"Geo::GDALc::MDArray_GetNoDataValueAsDouble", _wrap_MDArray_GetNoDataValueAsDouble},
{"Geo::GDALc::MDArray_GetNoDataValueAsString", _wrap_MDArray_GetNoDataValueAsString},
{"Geo::GDALc::MDArray_SetNoDataValueDouble", _wrap_MDArray_SetNoDataValueDouble},
{"Geo::GDALc::MDArray_SetNoDataValueString", _wrap_MDArray_SetNoDataValueString},
{"Geo::GDALc::MDArray_DeleteNoDataValue", _wrap_MDArray_DeleteNoDataValue},
{"Geo::GDALc::MDArray_GetOffset", _wrap_MDArray_GetOffset},
{"Geo::GDALc::MDArray_GetOffsetStorageType", _wrap_MDArray_GetOffsetStorageType},
{"Geo::GDALc::MDArray_GetScale", _wrap_MDArray_GetScale},
{"Geo::GDALc::MDArray_GetScaleStorageType", _wrap_MDArray_GetScaleStorageType},
{"Geo::GDALc::MDArray_SetOffset", _wrap_MDArray_SetOffset},
{"Geo::GDALc::MDArray_SetScale", _wrap_MDArray_SetScale},
{"Geo::GDALc::MDArray_SetUnit", _wrap_MDArray_SetUnit},
{"Geo::GDALc::MDArray_GetUnit", _wrap_MDArray_GetUnit},
{"Geo::GDALc::MDArray_SetSpatialRef", _wrap_MDArray_SetSpatialRef},
{"Geo::GDALc::MDArray_GetSpatialRef", _wrap_MDArray_GetSpatialRef},
{"Geo::GDALc::MDArray_GetView", _wrap_MDArray_GetView},
{"Geo::GDALc::MDArray_Transpose", _wrap_MDArray_Transpose},
{"Geo::GDALc::MDArray_GetUnscaled", _wrap_MDArray_GetUnscaled},
{"Geo::GDALc::MDArray_GetMask", _wrap_MDArray_GetMask},
{"Geo::GDALc::MDArray_AsClassicDataset", _wrap_MDArray_AsClassicDataset},
{"Geo::GDALc::MDArray_GetStatistics", _wrap_MDArray_GetStatistics},
{"Geo::GDALc::MDArray_ComputeStatistics", _wrap_MDArray_ComputeStatistics},
{"Geo::GDALc::MDArray_Cache", _wrap_MDArray_Cache},
{"Geo::GDALc::delete_Attribute", _wrap_delete_Attribute},
{"Geo::GDALc::Attribute_GetName", _wrap_Attribute_GetName},
{"Geo::GDALc::Attribute_GetFullName", _wrap_Attribute_GetFullName},
{"Geo::GDALc::Attribute_GetTotalElementsCount", _wrap_Attribute_GetTotalElementsCount},
{"Geo::GDALc::Attribute_GetDimensionCount", _wrap_Attribute_GetDimensionCount},
{"Geo::GDALc::Attribute_GetDataType", _wrap_Attribute_GetDataType},
{"Geo::GDALc::Attribute_ReadAsString", _wrap_Attribute_ReadAsString},
{"Geo::GDALc::Attribute_ReadAsInt", _wrap_Attribute_ReadAsInt},
{"Geo::GDALc::Attribute_ReadAsDouble", _wrap_Attribute_ReadAsDouble},
{"Geo::GDALc::Attribute_ReadAsStringArray", _wrap_Attribute_ReadAsStringArray},
{"Geo::GDALc::Attribute_WriteString", _wrap_Attribute_WriteString},
{"Geo::GDALc::Attribute_WriteStringArray", _wrap_Attribute_WriteStringArray},
{"Geo::GDALc::Attribute_WriteInt", _wrap_Attribute_WriteInt},
{"Geo::GDALc::Attribute_WriteDouble", _wrap_Attribute_WriteDouble},
{"Geo::GDALc::delete_Dimension", _wrap_delete_Dimension},
{"Geo::GDALc::Dimension_GetName", _wrap_Dimension_GetName},
{"Geo::GDALc::Dimension_GetFullName", _wrap_Dimension_GetFullName},
{"Geo::GDALc::Dimension_GetType", _wrap_Dimension_GetType},
{"Geo::GDALc::Dimension_GetDirection", _wrap_Dimension_GetDirection},
{"Geo::GDALc::Dimension_GetSize", _wrap_Dimension_GetSize},
{"Geo::GDALc::Dimension_GetIndexingVariable", _wrap_Dimension_GetIndexingVariable},
{"Geo::GDALc::Dimension_SetIndexingVariable", _wrap_Dimension_SetIndexingVariable},
{"Geo::GDALc::delete_ExtendedDataType", _wrap_delete_ExtendedDataType},
{"Geo::GDALc::ExtendedDataType__Create", _wrap_ExtendedDataType__Create},
{"Geo::GDALc::ExtendedDataType_CreateString", _wrap_ExtendedDataType_CreateString},
{"Geo::GDALc::ExtendedDataType_GetName", _wrap_ExtendedDataType_GetName},
{"Geo::GDALc::ExtendedDataType_GetClass", _wrap_ExtendedDataType_GetClass},
{"Geo::GDALc::ExtendedDataType_GetNumericDataType", _wrap_ExtendedDataType_GetNumericDataType},
{"Geo::GDALc::ExtendedDataType_GetSize", _wrap_ExtendedDataType_GetSize},
{"Geo::GDALc::ExtendedDataType_GetMaxStringLength", _wrap_ExtendedDataType_GetMaxStringLength},
{"Geo::GDALc::ExtendedDataType_GetSubType", _wrap_ExtendedDataType_GetSubType},
{"Geo::GDALc::ExtendedDataType_CanConvertTo", _wrap_ExtendedDataType_CanConvertTo},
{"Geo::GDALc::ExtendedDataType_Equals", _wrap_ExtendedDataType_Equals},
{"Geo::GDALc::delete_EDTComponent", _wrap_delete_EDTComponent},
{"Geo::GDALc::EDTComponent__Create", _wrap_EDTComponent__Create},
{"Geo::GDALc::EDTComponent_GetName", _wrap_EDTComponent_GetName},
{"Geo::GDALc::EDTComponent_GetOffset", _wrap_EDTComponent_GetOffset},
{"Geo::GDALc::EDTComponent_GetType", _wrap_EDTComponent_GetType},
{"Geo::GDALc::Band_XSize_get", _wrap_Band_XSize_get},
{"Geo::GDALc::Band_YSize_get", _wrap_Band_YSize_get},
{"Geo::GDALc::Band_DataType_get", _wrap_Band_DataType_get},
{"Geo::GDALc::Band_GetDataset", _wrap_Band_GetDataset},
{"Geo::GDALc::Band_GetBand", _wrap_Band_GetBand},
{"Geo::GDALc::Band_GetBlockSize", _wrap_Band_GetBlockSize},
{"Geo::GDALc::Band_GetColorInterpretation", _wrap_Band_GetColorInterpretation},
{"Geo::GDALc::Band_GetRasterColorInterpretation", _wrap_Band_GetRasterColorInterpretation},
{"Geo::GDALc::Band_SetColorInterpretation", _wrap_Band_SetColorInterpretation},
{"Geo::GDALc::Band_SetRasterColorInterpretation", _wrap_Band_SetRasterColorInterpretation},
{"Geo::GDALc::Band_GetNoDataValue", _wrap_Band_GetNoDataValue},
{"Geo::GDALc::Band_SetNoDataValue", _wrap_Band_SetNoDataValue},
{"Geo::GDALc::Band_DeleteNoDataValue", _wrap_Band_DeleteNoDataValue},
{"Geo::GDALc::Band_GetUnitType", _wrap_Band_GetUnitType},
{"Geo::GDALc::Band_SetUnitType", _wrap_Band_SetUnitType},
{"Geo::GDALc::Band_GetRasterCategoryNames", _wrap_Band_GetRasterCategoryNames},
{"Geo::GDALc::Band_SetRasterCategoryNames", _wrap_Band_SetRasterCategoryNames},
{"Geo::GDALc::Band_GetMinimum", _wrap_Band_GetMinimum},
{"Geo::GDALc::Band_GetMaximum", _wrap_Band_GetMaximum},
{"Geo::GDALc::Band_GetOffset", _wrap_Band_GetOffset},
{"Geo::GDALc::Band_GetScale", _wrap_Band_GetScale},
{"Geo::GDALc::Band_SetOffset", _wrap_Band_SetOffset},
{"Geo::GDALc::Band_SetScale", _wrap_Band_SetScale},
{"Geo::GDALc::Band_GetStatistics", _wrap_Band_GetStatistics},
{"Geo::GDALc::Band_ComputeStatistics", _wrap_Band_ComputeStatistics},
{"Geo::GDALc::Band_SetStatistics", _wrap_Band_SetStatistics},
{"Geo::GDALc::Band_GetOverviewCount", _wrap_Band_GetOverviewCount},
{"Geo::GDALc::Band__GetOverview", _wrap_Band__GetOverview},
{"Geo::GDALc::Band_Checksum", _wrap_Band_Checksum},
{"Geo::GDALc::Band_ComputeRasterMinMax", _wrap_Band_ComputeRasterMinMax},
{"Geo::GDALc::Band_ComputeBandStats", _wrap_Band_ComputeBandStats},
{"Geo::GDALc::Band_Fill", _wrap_Band_Fill},
{"Geo::GDALc::Band__ReadRaster", _wrap_Band__ReadRaster},
{"Geo::GDALc::Band__WriteRaster", _wrap_Band__WriteRaster},
{"Geo::GDALc::Band_FlushCache", _wrap_Band_FlushCache},
{"Geo::GDALc::Band_GetRasterColorTable", _wrap_Band_GetRasterColorTable},
{"Geo::GDALc::Band_GetColorTable", _wrap_Band_GetColorTable},
{"Geo::GDALc::Band_SetRasterColorTable", _wrap_Band_SetRasterColorTable},
{"Geo::GDALc::Band_SetColorTable", _wrap_Band_SetColorTable},
{"Geo::GDALc::Band_GetDefaultRAT", _wrap_Band_GetDefaultRAT},
{"Geo::GDALc::Band_SetDefaultRAT", _wrap_Band_SetDefaultRAT},
{"Geo::GDALc::Band__GetMaskBand", _wrap_Band__GetMaskBand},
{"Geo::GDALc::Band__GetMaskFlags", _wrap_Band__GetMaskFlags},
{"Geo::GDALc::Band__CreateMaskBand", _wrap_Band__CreateMaskBand},
{"Geo::GDALc::Band__GetHistogram", _wrap_Band__GetHistogram},
{"Geo::GDALc::Band_GetDefaultHistogram", _wrap_Band_GetDefaultHistogram},
{"Geo::GDALc::Band_SetDefaultHistogram", _wrap_Band_SetDefaultHistogram},
{"Geo::GDALc::Band_HasArbitraryOverviews", _wrap_Band_HasArbitraryOverviews},
{"Geo::GDALc::Band_GetCategoryNames", _wrap_Band_GetCategoryNames},
{"Geo::GDALc::Band_SetCategoryNames", _wrap_Band_SetCategoryNames},
{"Geo::GDALc::Band_AdviseRead", _wrap_Band_AdviseRead},
{"Geo::GDALc::Band_AsMDArray", _wrap_Band_AsMDArray},
{"Geo::GDALc::Band_ContourGenerate", _wrap_Band_ContourGenerate},
{"Geo::GDALc::Band_ClassCounts", _wrap_Band_ClassCounts},
{"Geo::GDALc::Band_Reclassify", _wrap_Band_Reclassify},
{"Geo::GDALc::new_ColorTable", _wrap_new_ColorTable},
{"Geo::GDALc::delete_ColorTable", _wrap_delete_ColorTable},
{"Geo::GDALc::ColorTable_Clone", _wrap_ColorTable_Clone},
{"Geo::GDALc::ColorTable__GetPaletteInterpretation", _wrap_ColorTable__GetPaletteInterpretation},
{"Geo::GDALc::ColorTable_GetCount", _wrap_ColorTable_GetCount},
{"Geo::GDALc::ColorTable_GetColorEntry", _wrap_ColorTable_GetColorEntry},
{"Geo::GDALc::ColorTable_GetColorEntryAsRGB", _wrap_ColorTable_GetColorEntryAsRGB},
{"Geo::GDALc::ColorTable__SetColorEntry", _wrap_ColorTable__SetColorEntry},
{"Geo::GDALc::ColorTable_CreateColorRamp", _wrap_ColorTable_CreateColorRamp},
{"Geo::GDALc::new_RasterAttributeTable", _wrap_new_RasterAttributeTable},
{"Geo::GDALc::delete_RasterAttributeTable", _wrap_delete_RasterAttributeTable},
{"Geo::GDALc::RasterAttributeTable_Clone", _wrap_RasterAttributeTable_Clone},
{"Geo::GDALc::RasterAttributeTable_GetColumnCount", _wrap_RasterAttributeTable_GetColumnCount},
{"Geo::GDALc::RasterAttributeTable_GetNameOfCol", _wrap_RasterAttributeTable_GetNameOfCol},
{"Geo::GDALc::RasterAttributeTable__GetUsageOfCol", _wrap_RasterAttributeTable__GetUsageOfCol},
{"Geo::GDALc::RasterAttributeTable__GetTypeOfCol", _wrap_RasterAttributeTable__GetTypeOfCol},
{"Geo::GDALc::RasterAttributeTable__GetColOfUsage", _wrap_RasterAttributeTable__GetColOfUsage},
{"Geo::GDALc::RasterAttributeTable_GetRowCount", _wrap_RasterAttributeTable_GetRowCount},
{"Geo::GDALc::RasterAttributeTable_GetValueAsString", _wrap_RasterAttributeTable_GetValueAsString},
{"Geo::GDALc::RasterAttributeTable_GetValueAsInt", _wrap_RasterAttributeTable_GetValueAsInt},
{"Geo::GDALc::RasterAttributeTable_GetValueAsDouble", _wrap_RasterAttributeTable_GetValueAsDouble},
{"Geo::GDALc::RasterAttributeTable_SetValueAsString", _wrap_RasterAttributeTable_SetValueAsString},
{"Geo::GDALc::RasterAttributeTable_SetValueAsInt", _wrap_RasterAttributeTable_SetValueAsInt},
{"Geo::GDALc::RasterAttributeTable_SetValueAsDouble", _wrap_RasterAttributeTable_SetValueAsDouble},
{"Geo::GDALc::RasterAttributeTable_SetRowCount", _wrap_RasterAttributeTable_SetRowCount},
{"Geo::GDALc::RasterAttributeTable__CreateColumn", _wrap_RasterAttributeTable__CreateColumn},
{"Geo::GDALc::RasterAttributeTable_GetLinearBinning", _wrap_RasterAttributeTable_GetLinearBinning},
{"Geo::GDALc::RasterAttributeTable_SetLinearBinning", _wrap_RasterAttributeTable_SetLinearBinning},
{"Geo::GDALc::RasterAttributeTable_GetRowOfValue", _wrap_RasterAttributeTable_GetRowOfValue},
{"Geo::GDALc::RasterAttributeTable_ChangesAreWrittenToFile", _wrap_RasterAttributeTable_ChangesAreWrittenToFile},
{"Geo::GDALc::RasterAttributeTable_DumpReadable", _wrap_RasterAttributeTable_DumpReadable},
{"Geo::GDALc::RasterAttributeTable_SetTableType", _wrap_RasterAttributeTable_SetTableType},
{"Geo::GDALc::RasterAttributeTable_GetTableType", _wrap_RasterAttributeTable_GetTableType},
{"Geo::GDALc::TermProgress_nocb", _wrap_TermProgress_nocb},
{"Geo::GDALc::ComputeMedianCutPCT", _wrap_ComputeMedianCutPCT},
{"Geo::GDALc::DitherRGB2PCT", _wrap_DitherRGB2PCT},
{"Geo::GDALc::_ReprojectImage", _wrap__ReprojectImage},
{"Geo::GDALc::ComputeProximity", _wrap_ComputeProximity},
{"Geo::GDALc::RasterizeLayer", _wrap_RasterizeLayer},
{"Geo::GDALc::_Polygonize", _wrap__Polygonize},
{"Geo::GDALc::FPolygonize", _wrap_FPolygonize},
{"Geo::GDALc::FillNodata", _wrap_FillNodata},
{"Geo::GDALc::SieveFilter", _wrap_SieveFilter},
{"Geo::GDALc::_RegenerateOverviews", _wrap__RegenerateOverviews},
{"Geo::GDALc::_RegenerateOverview", _wrap__RegenerateOverview},
{"Geo::GDALc::ContourGenerate", _wrap_ContourGenerate},
{"Geo::GDALc::ContourGenerateEx", _wrap_ContourGenerateEx},
{"Geo::GDALc::ViewshedGenerate", _wrap_ViewshedGenerate},
{"Geo::GDALc::_AutoCreateWarpedVRT", _wrap__AutoCreateWarpedVRT},
{"Geo::GDALc::CreatePansharpenedVRT", _wrap_CreatePansharpenedVRT},
{"Geo::GDALc::new_Transformer", _wrap_new_Transformer},
{"Geo::GDALc::delete_Transformer", _wrap_delete_Transformer},
{"Geo::GDALc::Transformer_TransformPoint", _wrap_Transformer_TransformPoint},
{"Geo::GDALc::Transformer__TransformPoints", _wrap_Transformer__TransformPoints},
{"Geo::GDALc::Transformer_TransformGeolocations", _wrap_Transformer_TransformGeolocations},
{"Geo::GDALc::ApplyVerticalShiftGrid", _wrap_ApplyVerticalShiftGrid},
{"Geo::GDALc::ApplyGeoTransform", _wrap_ApplyGeoTransform},
{"Geo::GDALc::InvGeoTransform", _wrap_InvGeoTransform},
{"Geo::GDALc::VersionInfo", _wrap_VersionInfo},
{"Geo::GDALc::AllRegister", _wrap_AllRegister},
{"Geo::GDALc::GDALDestroyDriverManager", _wrap_GDALDestroyDriverManager},
{"Geo::GDALc::GetCacheMax", _wrap_GetCacheMax},
{"Geo::GDALc::GetCacheUsed", _wrap_GetCacheUsed},
{"Geo::GDALc::SetCacheMax", _wrap_SetCacheMax},
{"Geo::GDALc::_GetDataTypeSize", _wrap__GetDataTypeSize},
{"Geo::GDALc::_DataTypeIsComplex", _wrap__DataTypeIsComplex},
{"Geo::GDALc::GetDataTypeName", _wrap_GetDataTypeName},
{"Geo::GDALc::GetDataTypeByName", _wrap_GetDataTypeByName},
{"Geo::GDALc::GetColorInterpretationName", _wrap_GetColorInterpretationName},
{"Geo::GDALc::GetPaletteInterpretationName", _wrap_GetPaletteInterpretationName},
{"Geo::GDALc::DecToDMS", _wrap_DecToDMS},
{"Geo::GDALc::PackedDMSToDec", _wrap_PackedDMSToDec},
{"Geo::GDALc::DecToPackedDMS", _wrap_DecToPackedDMS},
{"Geo::GDALc::ParseXMLString", _wrap_ParseXMLString},
{"Geo::GDALc::SerializeXMLTree", _wrap_SerializeXMLTree},
{"Geo::GDALc::GetJPEG2000StructureAsString", _wrap_GetJPEG2000StructureAsString},
{"Geo::GDALc::GetDriverCount", _wrap_GetDriverCount},
{"Geo::GDALc::GetDriverByName", _wrap_GetDriverByName},
{"Geo::GDALc::GetDriver", _wrap_GetDriver},
{"Geo::GDALc::_Open", _wrap__Open},
{"Geo::GDALc::_OpenEx", _wrap__OpenEx},
{"Geo::GDALc::_OpenShared", _wrap__OpenShared},
{"Geo::GDALc::IdentifyDriver", _wrap_IdentifyDriver},
{"Geo::GDALc::IdentifyDriverEx", _wrap_IdentifyDriverEx},
{"Geo::GDALc::GeneralCmdLineProcessor", _wrap_GeneralCmdLineProcessor},
{"Geo::GDALc::new_GDALInfoOptions", _wrap_new_GDALInfoOptions},
{"Geo::GDALc::delete_GDALInfoOptions", _wrap_delete_GDALInfoOptions},
{"Geo::GDALc::GDALInfo", _wrap_GDALInfo},
{"Geo::GDALc::new_GDALMultiDimInfoOptions", _wrap_new_GDALMultiDimInfoOptions},
{"Geo::GDALc::delete_GDALMultiDimInfoOptions", _wrap_delete_GDALMultiDimInfoOptions},
{"Geo::GDALc::GDALMultiDimInfo", _wrap_GDALMultiDimInfo},
{"Geo::GDALc::new_GDALTranslateOptions", _wrap_new_GDALTranslateOptions},
{"Geo::GDALc::delete_GDALTranslateOptions", _wrap_delete_GDALTranslateOptions},
{"Geo::GDALc::wrapper_GDALTranslate", _wrap_wrapper_GDALTranslate},
{"Geo::GDALc::new_GDALWarpAppOptions", _wrap_new_GDALWarpAppOptions},
{"Geo::GDALc::delete_GDALWarpAppOptions", _wrap_delete_GDALWarpAppOptions},
{"Geo::GDALc::wrapper_GDALWarpDestDS", _wrap_wrapper_GDALWarpDestDS},
{"Geo::GDALc::wrapper_GDALWarpDestName", _wrap_wrapper_GDALWarpDestName},
{"Geo::GDALc::new_GDALVectorTranslateOptions", _wrap_new_GDALVectorTranslateOptions},
{"Geo::GDALc::delete_GDALVectorTranslateOptions", _wrap_delete_GDALVectorTranslateOptions},
{"Geo::GDALc::wrapper_GDALVectorTranslateDestDS", _wrap_wrapper_GDALVectorTranslateDestDS},
{"Geo::GDALc::wrapper_GDALVectorTranslateDestName", _wrap_wrapper_GDALVectorTranslateDestName},
{"Geo::GDALc::new_GDALDEMProcessingOptions", _wrap_new_GDALDEMProcessingOptions},
{"Geo::GDALc::delete_GDALDEMProcessingOptions", _wrap_delete_GDALDEMProcessingOptions},
{"Geo::GDALc::wrapper_GDALDEMProcessing", _wrap_wrapper_GDALDEMProcessing},
{"Geo::GDALc::new_GDALNearblackOptions", _wrap_new_GDALNearblackOptions},
{"Geo::GDALc::delete_GDALNearblackOptions", _wrap_delete_GDALNearblackOptions},
{"Geo::GDALc::wrapper_GDALNearblackDestDS", _wrap_wrapper_GDALNearblackDestDS},
{"Geo::GDALc::wrapper_GDALNearblackDestName", _wrap_wrapper_GDALNearblackDestName},
{"Geo::GDALc::new_GDALGridOptions", _wrap_new_GDALGridOptions},
{"Geo::GDALc::delete_GDALGridOptions", _wrap_delete_GDALGridOptions},
{"Geo::GDALc::wrapper_GDALGrid", _wrap_wrapper_GDALGrid},
{"Geo::GDALc::new_GDALRasterizeOptions", _wrap_new_GDALRasterizeOptions},
{"Geo::GDALc::delete_GDALRasterizeOptions", _wrap_delete_GDALRasterizeOptions},
{"Geo::GDALc::wrapper_GDALRasterizeDestDS", _wrap_wrapper_GDALRasterizeDestDS},
{"Geo::GDALc::wrapper_GDALRasterizeDestName", _wrap_wrapper_GDALRasterizeDestName},
{"Geo::GDALc::new_GDALBuildVRTOptions", _wrap_new_GDALBuildVRTOptions},
{"Geo::GDALc::delete_GDALBuildVRTOptions", _wrap_delete_GDALBuildVRTOptions},
{"Geo::GDALc::wrapper_GDALBuildVRT_objects", _wrap_wrapper_GDALBuildVRT_objects},
{"Geo::GDALc::wrapper_GDALBuildVRT_names", _wrap_wrapper_GDALBuildVRT_names},
{"Geo::GDALc::new_GDALMultiDimTranslateOptions", _wrap_new_GDALMultiDimTranslateOptions},
{"Geo::GDALc::delete_GDALMultiDimTranslateOptions", _wrap_delete_GDALMultiDimTranslateOptions},
{"Geo::GDALc::wrapper_GDALMultiDimTranslateDestName", _wrap_wrapper_GDALMultiDimTranslateDestName},
{0,0}
};
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#if defined(__cplusplus) && ! defined(XSPROTO)
extern "C"
#endif

XS(SWIG_init) {
  dXSARGS;
  int i;
  (void)items;
  
  SWIG_InitializeModule(0);
  
  /* Install commands */
  for (i = 0; swig_commands[i].name; i++) {
    /* Casts only needed for Perl < 5.10. */
#ifdef __cplusplus
    newXS(const_cast<char*>(swig_commands[i].name), swig_commands[i].wrapper, const_cast<char*>(__FILE__));
#else
    newXS((char*)swig_commands[i].name, swig_commands[i].wrapper, (char*)__FILE__);
#endif
  }
  
  /* Install variables */
  for (i = 0; swig_variables[i].name; i++) {
    SV *sv;
    sv = get_sv(swig_variables[i].name, TRUE | 0x2 | GV_ADDMULTI);
    if (swig_variables[i].type) {
      SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
    } else {
      sv_setiv(sv,(IV) 0);
    }
    swig_create_magic(sv, swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
  }
  
  /* Install constant */
  for (i = 0; swig_constants[i].type; i++) {
    SV *sv;
    sv = get_sv(swig_constants[i].name, TRUE | 0x2 | GV_ADDMULTI);
    switch(swig_constants[i].type) {
    case SWIG_INT:
      sv_setiv(sv, (IV) swig_constants[i].lvalue);
      break;
    case SWIG_FLOAT:
      sv_setnv(sv, (double) swig_constants[i].dvalue);
      break;
    case SWIG_STRING:
      sv_setpv(sv, (const char *) swig_constants[i].pvalue);
      break;
    case SWIG_POINTER:
      SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
      break;
    case SWIG_BINARY:
      SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
      break;
    default:
      break;
    }
    SvREADONLY_on(sv);
  }
  
  
  /* gdal_perl.i %init code */
  UseExceptions();
  if ( GDALGetDriverCount() == 0 ) {
    GDALAllRegister();
  }
  
  SWIG_TypeClientData(SWIGTYPE_p_VSILFILE, (void*) "Geo::GDAL::VSILFILE");
  SWIG_TypeClientData(SWIGTYPE_p_GDALMajorObjectShadow, (void*) "Geo::GDAL::MajorObject");
  SWIG_TypeClientData(SWIGTYPE_p_GDALDriverShadow, (void*) "Geo::GDAL::Driver");
  SWIG_TypeClientData(SWIGTYPE_p_GDAL_GCP, (void*) "Geo::GDAL::GCP");
  SWIG_TypeClientData(SWIGTYPE_p_GDALAsyncReaderShadow, (void*) "Geo::GDAL::AsyncReader");
  SWIG_TypeClientData(SWIGTYPE_p_GDALDatasetShadow, (void*) "Geo::GDAL::Dataset");
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GEDTST_NONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GEDTST_NONE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GEDTST_JSON", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GEDTST_JSON)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_GDALGroupHS, (void*) "Geo::GDAL::Group");
  SWIG_TypeClientData(SWIGTYPE_p_Statistics, (void*) "Geo::GDAL::Statistics");
  SWIG_TypeClientData(SWIGTYPE_p_GDALMDArrayHS, (void*) "Geo::GDAL::MDArray");
  SWIG_TypeClientData(SWIGTYPE_p_GDALAttributeHS, (void*) "Geo::GDAL::Attribute");
  SWIG_TypeClientData(SWIGTYPE_p_GDALDimensionHS, (void*) "Geo::GDAL::Dimension");
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GEDTC_NUMERIC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GEDTC_NUMERIC)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GEDTC_STRING", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GEDTC_STRING)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GEDTC_COMPOUND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GEDTC_COMPOUND)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_GDALExtendedDataTypeHS, (void*) "Geo::GDAL::ExtendedDataType");
  SWIG_TypeClientData(SWIGTYPE_p_GDALEDTComponentHS, (void*) "Geo::GDAL::EDTComponent");
  SWIG_TypeClientData(SWIGTYPE_p_GDALRasterBandShadow, (void*) "Geo::GDAL::Band");
  SWIG_TypeClientData(SWIGTYPE_p_GDALColorTableShadow, (void*) "Geo::GDAL::ColorTable");
  SWIG_TypeClientData(SWIGTYPE_p_GDALRasterAttributeTableShadow, (void*) "Geo::GDAL::RasterAttributeTable");
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TermProgress", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_NewFunctionPtrObj((void *)(int (*)(double,char const *,void *))(GDALTermProgress), SWIGTYPE_p_f_double_p_q_const__char_p_void__int));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GVM_Diagonal", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GVM_Diagonal)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GVM_Edge", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GVM_Edge)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GVM_Max", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GVM_Max)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GVM_Min", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GVM_Min)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GVOT_NORMAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GVOT_NORMAL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GVOT_MIN_TARGET_HEIGHT_FROM_DEM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GVOT_MIN_TARGET_HEIGHT_FROM_DEM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/even/install-swig-3.0.12/share/swig/3.0.12/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GVOT_MIN_TARGET_HEIGHT_FROM_GROUND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GVOT_MIN_TARGET_HEIGHT_FROM_GROUND)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_GDALTransformerInfoShadow, (void*) "Geo::GDAL::Transformer");
  SWIG_TypeClientData(SWIGTYPE_p_GDALInfoOptions, (void*) "Geo::GDAL::GDALInfoOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALMultiDimInfoOptions, (void*) "Geo::GDAL::GDALMultiDimInfoOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALTranslateOptions, (void*) "Geo::GDAL::GDALTranslateOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALWarpAppOptions, (void*) "Geo::GDAL::GDALWarpAppOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALVectorTranslateOptions, (void*) "Geo::GDAL::GDALVectorTranslateOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALDEMProcessingOptions, (void*) "Geo::GDAL::GDALDEMProcessingOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALNearblackOptions, (void*) "Geo::GDAL::GDALNearblackOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALGridOptions, (void*) "Geo::GDAL::GDALGridOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALRasterizeOptions, (void*) "Geo::GDAL::GDALRasterizeOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALBuildVRTOptions, (void*) "Geo::GDAL::GDALBuildVRTOptions");
  SWIG_TypeClientData(SWIGTYPE_p_GDALMultiDimTranslateOptions, (void*) "Geo::GDAL::GDALMultiDimTranslateOptions");
  ST(0) = &PL_sv_yes;
  XSRETURN(1);
}

