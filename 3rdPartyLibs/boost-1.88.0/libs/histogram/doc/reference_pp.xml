<library-reference><header id="doxygen.histogram_8hpp" name="boost/histogram.hpp">
<para>Includes all standard headers of the Boost.Histogram library. </para><para>Extra headers not automatically included are:<itemizedlist>
<listitem><para><ulink url="histogram/reference.html#header.boost.histogram.ostream_hpp">boost/histogram/ostream.hpp</ulink></para></listitem><listitem><para><ulink url="histogram/reference.html#header.boost.histogram.axis.ostream_hpp">boost/histogram/axis/ostream.hpp</ulink></para></listitem><listitem><para><ulink url="histogram/reference.html#header.boost.histogram.accumulators.ostream_hpp">boost/histogram/accumulators/ostream.hpp</ulink></para></listitem><listitem><para><ulink url="histogram/reference.html#header.boost.histogram.serialization_hpp">boost/histogram/serialization.hpp</ulink></para></listitem></itemizedlist></para></header><header id="doxygen.accumulators_8hpp" name="boost/histogram/accumulators.hpp">
<para>Includes all accumulator headers of the Boost.Histogram library. </para><para>Extra header not automatically included:<itemizedlist>
<listitem><para><ulink url="histogram/reference.html#header.boost.histogram.accumulators.ostream_hpp">boost/histogram/accumulators/ostream.hpp</ulink></para></listitem></itemizedlist></para></header><header id="doxygen.algorithm_8hpp" name="boost/histogram/algorithm.hpp">
<para>Includes all algorithm headers of the Boost.Histogram library. </para></header><header id="doxygen.axis_8hpp" name="boost/histogram/axis.hpp">
<para>Includes all axis headers of the Boost.Histogram library. </para><para>Extra header not automatically included:<itemizedlist>
<listitem><para><ulink url="histogram/reference.html#header.boost.histogram.axis.ostream_hpp">boost/histogram/axis/ostream.hpp</ulink></para></listitem></itemizedlist></para></header><header id="doxygen.fwd_8hpp" name="boost/histogram/fwd.hpp">
<para>Forward declarations, tag types and type aliases. </para><namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<typedef id="doxygen.fwd_8hpp_1a6ce2f3a29c482bc19ed2f1a21eded413" name="empty_type"><purpose>Another alias for an empty metadata type. </purpose><type><classname>null_type</classname></type></typedef><typedef id="doxygen.fwd_8hpp_1aab4842e3e52a24f2363784c59e47988f" name="index_type"><purpose>Integral type for axis indices. </purpose><type>int</type></typedef><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1null__type" name="null_type"><purpose>Empty metadata type. </purpose><method-group name="public member functions">
<method id="doxygen.structboost_1_1histogram_1_1axis_1_1null__type_1a633c2f2b3e8171ae81d41c15d081f48e" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></struct><typedef id="doxygen.fwd_8hpp_1a33c5f7b095fa0d7ed18bc7fed4bdb2f6" name="real_index_type"><purpose>Real type for axis indices. </purpose><type>double</type></typedef></namespace><typedef id="doxygen.fwd_8hpp_1a1602924a28c2b1bf5b47cb7ca528fa67" name="default_storage"><purpose>Default storage, optimized for unweighted histograms. </purpose><type><classname>unlimited_storage</classname>&lt;&gt;</type></typedef><typedef id="doxygen.fwd_8hpp_1a82fdb3718a59fbf92938381691e5b104" name="dense_storage"><purpose>Vector-like storage for fast zero-overhead access to cells. </purpose><type><classname>storage_adaptor</classname>&lt; std::vector&lt; T, A &gt; &gt;</type></typedef><typedef id="doxygen.fwd_8hpp_1ac98faa5dffbbf069ad025bf14d8fbaa6" name="profile_storage"><purpose>Dense storage which tracks means of samples in each cell. </purpose><type>dense_storage&lt; <classname>accumulators::mean</classname>&lt;&gt; &gt;</type></typedef><namespace name="utility">
<class id="doxygen.classboost_1_1histogram_1_1utility_1_1clopper__pearson__interval" name="clopper_pearson_interval"><template>
      <template-type-parameter name="ValueType" /></template><inherit access="public">boost::histogram::utility::binomial_proportion_interval&lt; ValueType &gt;</inherit><purpose>Clopper-Pearson interval. </purpose><description><para>This is the classic frequentist interval obtained with the Neyman construction. It is therefore often called the 'exact' interval. It is guaranteed to have at least the requested confidence level for all values of the fraction.</para><para>The interval is wider than others that produce coverage closer to the expected confidence level over a random ensemble of factions. The Clopper-Pearson interval essentially always overcovers for such a random ensemble, which is undesirable in practice. The Clopper-Pearson interval is recommended when it is important to be conservative, but the Wilson interval should be preferred in most applications.</para><para>C. Clopper, E.S. Pearson (1934), Biometrika 26 (4): 404-413. doi:10.1093/biomet/26.4.404. </para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1utility_1_1clopper__pearson__interval_1a075dc68f01c2ecb48e7d56610111e67b" specifiers="explicit" cv="noexcept"><parameter name="cl"><paramtype><classname>confidence_level</classname></paramtype><default>deviation{1}</default><description><para>Confidence level for the interval. The default value produces a confidence level of 68 % equivalent to one standard deviation. Both <computeroutput>deviation</computeroutput> and<computeroutput><link linkend="doxygen.classboost_1_1histogram_1_1utility_1_1confidence__level">confidence_level</link></computeroutput> objects can be used to initialize the interval.</para></description></parameter><purpose>Construct Clopper-Pearson interval computer. </purpose><description><para>
</para></description></constructor><method id="doxygen.classboost_1_1histogram_1_1utility_1_1clopper__pearson__interval_1abb03b5b488b993ea5841354088c9f91d" name="operator()" cv="const noexcept"><type>interval_type</type><parameter name="successes"><paramtype>value_type</paramtype><description><para>Number of successful trials. </para></description></parameter><parameter name="failures"><paramtype>value_type</paramtype><description><para>Number of failed trials. </para></description></parameter><purpose>Compute interval for given number of successes and failures. </purpose><description><para>
</para></description></method></method-group></class><class id="doxygen.classboost_1_1histogram_1_1utility_1_1jeffreys__interval" name="jeffreys_interval"><template>
      <template-type-parameter name="ValueType" /></template><inherit access="public">boost::histogram::utility::binomial_proportion_interval&lt; ValueType &gt;</inherit><purpose>Jeffreys interval. </purpose><description><para>This is the Bayesian credible interval with a Jeffreys prior. Although it has a Bayesian derivation, it has good coverage. The interval boundaries are close to the Wilson interval. A special property of this interval is that it is equal-tailed; the probability of the true value to be above or below the interval is approximately equal.</para><para>To avoid coverage probability tending to zero when the fraction approaches 0 or 1, this implementation uses a modification described in section 4.1.2 of the paper by L.D. Brown, T.T. Cai, A. DasGupta, Statistical Science 16 (2001) 101-133, doi:10.1214/ss/1009213286. </para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1utility_1_1jeffreys__interval_1ab797348bd255fcd856b2fc570c91f91d" specifiers="explicit" cv="noexcept"><parameter name="cl"><paramtype><classname>confidence_level</classname></paramtype><default>deviation{1}</default><description><para>Confidence level for the interval. The default value produces a confidence level of 68 % equivalent to one standard deviation. Both <computeroutput>deviation</computeroutput> and<computeroutput><link linkend="doxygen.classboost_1_1histogram_1_1utility_1_1confidence__level">confidence_level</link></computeroutput> objects can be used to initialize the interval.</para></description></parameter><purpose>Construct Jeffreys interval computer. </purpose><description><para>
</para></description></constructor><method id="doxygen.classboost_1_1histogram_1_1utility_1_1jeffreys__interval_1a2d0fddacf2580f4b7499b44912ddd98a" name="operator()" cv="const noexcept"><type>interval_type</type><parameter name="successes"><paramtype>value_type</paramtype><description><para>Number of successful trials. </para></description></parameter><parameter name="failures"><paramtype>value_type</paramtype><description><para>Number of failed trials. </para></description></parameter><purpose>Compute interval for given number of successes and failures. </purpose><description><para>
</para></description></method></method-group></class><class id="doxygen.classboost_1_1histogram_1_1utility_1_1wald__interval" name="wald_interval"><template>
      <template-type-parameter name="ValueType" /></template><inherit access="public">boost::histogram::utility::binomial_proportion_interval&lt; ValueType &gt;</inherit><purpose>Wald interval or normal approximation interval. </purpose><description><para>The Wald interval is a symmetric interval. It is simple to compute, but has poor statistical properties and is universally rejected by statisticians. It should always be replaced by another iternal, for example, the Wilson interval.</para><para>The Wald interval can be derived easily using the plug-in estimate of the variance for the binomial distribution, which is likely a reason for its omnipresence. Without further insight into statistical theory, it is not obvious that this derivation is flawed and that better alternatives exist.</para><para>The Wald interval undercovers on average. It is unsuitable when the sample size is small or when the fraction is close to 0 or 1. e. Its limits are not naturally bounded by 0 or 1. It produces empty intervals if the number of successes or failures is zero.</para><para>For a critique of the Wald interval, see (a selection):</para><para>L.D. Brown, T.T. Cai, A. DasGupta, Statistical Science 16 (2001) 101-133. R. D. Cousins, K. E. Hymes, J. Tucker, Nucl. Instrum. Meth. A 612 (2010) 388-398. </para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1utility_1_1wald__interval_1ac9f3062738f5850e8799dfd9297159e5" specifiers="explicit" cv="noexcept"><parameter name="d"><paramtype><classname>deviation</classname></paramtype><default>deviation{1.0}</default><description><para>Number of standard deviations for the interval. The default value 1 corresponds to a confidence level of 68 %. Both <computeroutput>deviation</computeroutput> and<computeroutput><link linkend="doxygen.classboost_1_1histogram_1_1utility_1_1confidence__level">confidence_level</link></computeroutput> objects can be used to initialize the interval.</para></description></parameter><purpose>Construct Wald interval computer. </purpose><description><para>
</para></description></constructor><method id="doxygen.classboost_1_1histogram_1_1utility_1_1wald__interval_1ad359db775c6b01d9bb60d346ccd58bec" name="operator()" cv="const noexcept"><type>interval_type</type><parameter name="successes"><paramtype>value_type</paramtype><description><para>Number of successful trials. </para></description></parameter><parameter name="failures"><paramtype>value_type</paramtype><description><para>Number of failed trials. </para></description></parameter><purpose>Compute interval for given number of successes and failures. </purpose><description><para>
</para></description></method></method-group></class><class id="doxygen.classboost_1_1histogram_1_1utility_1_1wilson__interval" name="wilson_interval"><template>
      <template-type-parameter name="ValueType" /></template><inherit access="public">boost::histogram::utility::binomial_proportion_interval&lt; ValueType &gt;</inherit><purpose>Wilson interval. </purpose><description><para>The Wilson score interval is simple to compute, has good coverage. Intervals are automatically bounded between 0 and 1 and never empty. The interval is asymmetric.</para><para>Wilson, E. B. (1927). "Probable inference, the law of succession, and statistical
inference". Journal of the American Statistical Association. 22 (158): 209-212. doi:10.1080/01621459.1927.10502953. JSTOR 2276774.</para><para>The coverage probability for a random ensemble of fractions is close to the nominal value. Unlike the Clopper-Pearson interval, the Wilson score interval is not conservative. For some values of the fractions, the interval undercovers and overcovers for neighboring values. This is a shared property of all alternatives to the Clopper-Pearson interval.</para><para>The Wilson score intervals is widely recommended for general use in the literature. For a review of the literature, see R. D. Cousins, K. E. Hymes, J. Tucker, Nucl. Instrum. Meth. A 612 (2010) 388-398. </para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1utility_1_1wilson__interval_1a289f8f69018e6613c95ff87864c11ff3" specifiers="explicit" cv="noexcept"><parameter name="d"><paramtype><classname>deviation</classname></paramtype><default>deviation{1.0}</default><description><para>Number of standard deviations for the interval. The default value 1 corresponds to a confidence level of 68 %. Both <computeroutput>deviation</computeroutput> and<computeroutput><link linkend="doxygen.classboost_1_1histogram_1_1utility_1_1confidence__level">confidence_level</link></computeroutput> objects can be used to initialize the interval.</para></description></parameter><purpose>Construct Wilson interval computer. </purpose><description><para>
</para></description></constructor><method id="doxygen.classboost_1_1histogram_1_1utility_1_1wilson__interval_1ac26663768de3b3914b0095ae673a9b38" name="operator()" cv="const noexcept"><type>interval_type</type><parameter name="successes"><paramtype>value_type</paramtype><description><para>Number of successful trials. </para></description></parameter><parameter name="failures"><paramtype>value_type</paramtype><description><para>Number of failed trials. </para></description></parameter><purpose>Compute interval for given number of successes and failures. </purpose><description><para>
</para></description></method></method-group></class></namespace><typedef id="doxygen.fwd_8hpp_1a34d6226b06764e0d2bfcc7922c91678d" name="weight_storage"><purpose>Dense storage which tracks sums of weights and a variance estimate. </purpose><type>dense_storage&lt; <classname>accumulators::weighted_sum</classname>&lt;&gt; &gt;</type></typedef><typedef id="doxygen.fwd_8hpp_1a3173f6213c275412e0a723a83a6bf965" name="weighted_profile_storage"><purpose>Dense storage which tracks means of weighted samples in each cell. </purpose><type>dense_storage&lt; <classname>accumulators::weighted_mean</classname>&lt;&gt; &gt;</type></typedef></namespace></namespace></header><header id="doxygen.histogram_2histogram_8hpp" name="boost/histogram/histogram.hpp">
<namespace name="boost">
<namespace name="histogram">
<class id="doxygen.classboost_1_1histogram_1_1histogram" name="histogram"><template>
      <template-type-parameter name="Axes"><purpose><para>std::tuple of axis types OR std::vector of an axis type or <link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1variant">axis::variant</link></para></purpose></template-type-parameter><template-type-parameter name="Storage"><purpose><para>class that implements the storage interface </para></purpose></template-type-parameter></template><purpose>Central class of the histogram library. </purpose><description><para>Histogram uses the call operator to insert data, like the <ulink url="https://www.boost.org/doc/libs/develop/doc/html/accumulators.html">Boost.Accumulators</ulink>.</para><para>Use factory functions (see <ulink url="histogram/reference.html#header.boost.histogram.make_histogram_hpp">make_histogram.hpp</ulink> and<ulink url="histogram/reference.html#header.boost.histogram.make_profile_hpp">make_profile.hpp</ulink>) to conveniently create histograms rather than calling the ctors directly.</para><para>Use the <ulink url="boost/histogram/indexed.html">indexed</ulink> range generator to iterate over filled histograms, which is convenient and faster than hand-written loops for multi-dimensional histograms.</para><para>
</para></description><typedef id="doxygen.classboost_1_1histogram_1_1histogram_1aedf118c4e3c3885e96ef4a2acf048bf6" name="axes_type"><type>Axes</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1histogram_1ac7d34c9526038f00d30ed94cd42450ff" name="storage_type"><type>Storage</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1histogram_1a703dcd38cd7d1e9939bb4c27b5fe95e9" name="value_type"><type>typename storage_type::value_type</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1histogram_1a49b61438b6d38c23576b2dcc7db65209" name="iterator"><type>typename storage_type::iterator</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1histogram_1adf1eb5aa384ed2ca5504b1fe56ed0ab8" name="const_iterator"><type>typename storage_type::const_iterator</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1histogram_1a0a6c44a9c3680f08babe42abec58fa65" name="multi_index_type"><type><emphasis>unspecified</emphasis></type></typedef><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1histogram_1a3588aaf3f9fc217e420c5201cd1f1e36" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1histogram_1a2be871ca2d89f72f7c6e1a0d4a547132" specifiers="explicit"><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype><classname>histogram</classname>&lt; A, S &gt; &amp;&amp;</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1histogram_1a05df2cf223577853807a8d6e8a7587b4" specifiers="explicit"><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1histogram_1a8d4788b6c98765d83c47cbf22eda6c97"><type><classname>histogram</classname> &amp;</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype><classname>histogram</classname>&lt; A, S &gt; &amp;&amp;</paramtype></parameter></copy-assignment><copy-assignment id="doxygen.classboost_1_1histogram_1_1histogram_1a6634f68ebf8e325651319a3a46050d4a"><type><classname>histogram</classname> &amp;</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter></copy-assignment><constructor id="doxygen.classboost_1_1histogram_1_1histogram_1a8cc622886b3b37f110941bc9f619dfbd"><template>
          <template-type-parameter name="A" /></template><parameter name="a"><paramtype>A &amp;&amp;</paramtype></parameter><parameter name="s"><paramtype>Storage</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1histogram_1aa5071a77df35b110de5dad7fed4713c9" specifiers="explicit"><parameter name="axes"><paramtype>Axes</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1histogram_1ae4417679cbd6c7054e098719829795ee" specifiers="explicit"><template>
          <template-nontype-parameter name="As"><type>class...</type></template-nontype-parameter></template><parameter name="as"><paramtype>As &amp;&amp;...</paramtype></parameter></constructor><method id="doxygen.classboost_1_1histogram_1_1histogram_1ac1c0e40216335192038d8392ad336e23" name="rank" cv="const noexcept"><type>unsigned</type><purpose>Number of axes (dimensions). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1aa4ef494e128534ef7053f97747fa4632" name="size" cv="const noexcept"><type>std::size_t</type><purpose>Total number of bins (including underflow/overflow). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1ab4b91b277b08ba4e1416c8d615d2a7c0" name="reset"><type>void</type><purpose>Reset all bins to default initialized values. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1aa9b1242c3eaa1014b81ba5918ce90294" name="axis" cv="const"><type>decltype(auto)</type><template>
          <template-nontype-parameter name="N"><type>unsigned</type><default>0</default></template-nontype-parameter></template><parameter name=""><paramtype>std::integral_constant&lt; unsigned, N &gt;</paramtype><default>{}</default></parameter><purpose>Get N-th axis using a compile-time number. </purpose><description><para>This version is more efficient than the one accepting a run-time number. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a631454030c3c8a53ac76d445f5aa733f" name="axis" cv="const"><type>decltype(auto)</type><parameter name="i"><paramtype>unsigned</paramtype></parameter><purpose>Get N-th axis with run-time number. </purpose><description><para>Prefer the version that accepts a compile-time number, if you can use it. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1ae7b17d2ca304534dba45050a566efb2c" name="for_each_axis" cv="const"><type>auto</type><template>
          <template-type-parameter name="Unary" /></template><parameter name="unary"><paramtype>Unary &amp;&amp;</paramtype></parameter><purpose>Apply unary functor/function to each axis. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a969047541d84b2530b8c403572826004" name="operator()"><type>iterator</type><template>
          <template-type-parameter name="T0" /><template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><parameter name="arg0"><paramtype>const T0 &amp;</paramtype></parameter><parameter name="args"><paramtype>const Ts &amp;...</paramtype></parameter><purpose>Fill histogram with values, an optional weight, and/or a sample. </purpose><description><para>Returns iterator to located cell.</para><para>Arguments are passed in order to the axis objects. Passing an argument type that is not convertible to the value type accepted by the axis or passing the wrong number of arguments causes a throw of <computeroutput>std::invalid_argument</computeroutput>.</para><para><emphasis role="bold">Optional weight</emphasis></para><para>An optional weight can be passed as the first or last argument with the <ulink url="boost/histogram/weight.html">weight</ulink> helper function. Compilation fails if the storage elements do not support weights.</para><para><emphasis role="bold">Samples</emphasis></para><para>If the storage elements accept samples, pass them with the sample helper function in addition to the axis arguments, which can be the first or last argument. The <ulink url="boost/histogram/sample.html">sample</ulink> helper function can pass one or more arguments to the storage element. If samples and weights are used together, they can be passed in any order at the beginning or end of the argument list.</para><para><emphasis role="bold">Axis with multiple arguments</emphasis></para><para>If the histogram contains an axis which accepts a <computeroutput>std::tuple</computeroutput> of arguments, the arguments for that axis need to be passed as a<computeroutput>std::tuple</computeroutput>, for example,<computeroutput>std::make_tuple(1.2, 2.3)</computeroutput>. If the histogram contains only this axis and no other, the arguments can be passed directly.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a1ac7559c6c80c9fb840ed3fb5287ba27" name="operator()"><type>iterator</type><template>
          <template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><parameter name="args"><paramtype>const std::tuple&lt; Ts... &gt; &amp;</paramtype></parameter><purpose>Fill histogram with values, an optional weight, and/or a sample from a <computeroutput>std::tuple</computeroutput>.</purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a7378820b8916e99560f19707d04ff7a5" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /></template><parameter name="args"><paramtype>const Iterable &amp;</paramtype><description><para>iterable as explained in the long description. </para></description></parameter><purpose>Fill histogram with several values at once. </purpose><description><para>The argument must be an iterable with a size that matches the rank of the histogram. The element of an iterable may be 1) a value or 2) an iterable over a contiguous sequence of values or 3) a variant of 1) and 2). Sub-iterables must have the same length.</para><para>Warning: <computeroutput>std::vector&lt;bool&gt;</computeroutput> is not a contiguous sequence over boolean values because of the infamous vector specialization for booleans. It cannot be used as an argument, but any truely contiguous sequence of boolean values can (<computeroutput>std::array&lt;bool, N&gt;</computeroutput> or<computeroutput>std::valarray&lt;bool&gt;</computeroutput>, for example).</para><para>Values are passed to the corresponding histogram axis in order. If a single value is passed together with an iterable of values, the single value is treated like an iterable with matching length of copies of this value.</para><para>If the histogram has only one axis, an iterable of values may be passed directly.</para><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1aea55c2ffcde2ceab20d4626e6b3d111d" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /><template-type-parameter name="T" /></template><parameter name="args"><paramtype>const Iterable &amp;</paramtype><description><para>iterable of values. </para></description></parameter><parameter name="weights"><paramtype>const <classname>weight_type</classname>&lt; T &gt; &amp;</paramtype><description><para>single weight or an iterable of weights. </para></description></parameter><purpose>Fill histogram with several values and weights at once. </purpose><description><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a80cd41c7ff4ca16832648dd89da1dee0" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /><template-type-parameter name="T" /></template><parameter name="weights"><paramtype>const <classname>weight_type</classname>&lt; T &gt; &amp;</paramtype><description><para>single weight or an iterable of weights. </para></description></parameter><parameter name="args"><paramtype>const Iterable &amp;</paramtype><description><para>iterable of values. </para></description></parameter><purpose>Fill histogram with several values and weights at once. </purpose><description><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a72eff8e23f82b9e97dbb907709d6e8cf" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /><template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><parameter name="args"><paramtype>const Iterable &amp;</paramtype><description><para>iterable of values. </para></description></parameter><parameter name="samples"><paramtype>const <classname>sample_type</classname>&lt; std::tuple&lt; Ts... &gt; &gt; &amp;</paramtype><description><para>single sample or an iterable of samples. </para></description></parameter><purpose>Fill histogram with several values and samples at once. </purpose><description><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1ac10d8864f94d7a2da5024893b17412d6" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /><template-type-parameter name="T" /></template><parameter name="samples"><paramtype>const <classname>sample_type</classname>&lt; T &gt; &amp;</paramtype><description><para>single sample or an iterable of samples. </para></description></parameter><parameter name="args"><paramtype>const Iterable &amp;</paramtype><description><para>iterable of values. </para></description></parameter><purpose>Fill histogram with several values and samples at once. </purpose><description><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1aab374c6e59ec219c3b299bafb0006bad" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /><template-type-parameter name="T" /><template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><parameter name="args"><paramtype>const Iterable &amp;</paramtype></parameter><parameter name="weights"><paramtype>const <classname>weight_type</classname>&lt; T &gt; &amp;</paramtype></parameter><parameter name="samples"><paramtype>const <classname>sample_type</classname>&lt; std::tuple&lt; Ts... &gt; &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1aac2ee4e15adcf253f985d388af1a2859" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /><template-type-parameter name="T" /><template-type-parameter name="U" /></template><parameter name="samples"><paramtype>const <classname>sample_type</classname>&lt; T &gt; &amp;</paramtype></parameter><parameter name="weights"><paramtype>const <classname>weight_type</classname>&lt; U &gt; &amp;</paramtype></parameter><parameter name="args"><paramtype>const Iterable &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a51f01b7e8ef29b1eb7080607326553f4" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /><template-type-parameter name="T" /><template-type-parameter name="U" /></template><parameter name="weights"><paramtype>const <classname>weight_type</classname>&lt; T &gt; &amp;</paramtype></parameter><parameter name="samples"><paramtype>const <classname>sample_type</classname>&lt; U &gt; &amp;</paramtype></parameter><parameter name="args"><paramtype>const Iterable &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a3613d42002090e27a0e555681ff64524" name="fill"><type>void</type><template>
          <template-type-parameter name="Iterable" /><template-type-parameter name="T" /><template-type-parameter name="U" /></template><parameter name="args"><paramtype>const Iterable &amp;</paramtype></parameter><parameter name="samples"><paramtype>const <classname>sample_type</classname>&lt; T &gt; &amp;</paramtype></parameter><parameter name="weights"><paramtype>const <classname>weight_type</classname>&lt; U &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a79e872caa5d335c32a758d2757de8b87" name="at"><type>decltype(auto)</type><template>
          <template-nontype-parameter name="Is"><type>class...</type></template-nontype-parameter></template><parameter name="i"><paramtype>axis::index_type</paramtype><description><para>index of first axis. </para></description></parameter><parameter name="is"><paramtype>Is...</paramtype><description><para>indices of second, third, ... axes. </para></description></parameter><purpose>Access cell value at integral indices. </purpose><description><para>You can pass indices as individual arguments, as a std::tuple of integers, or as an interable range of integers. Passing the wrong number of arguments causes a throw of std::invalid_argument. Passing an index which is out of bounds causes a throw of std::out_of_range.</para><para>

</para></description><returns><para>reference to cell value. </para></returns></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1af38ed999848c6cd82fa7520ffd8dea89" name="at" cv="const"><type>decltype(auto)</type><template>
          <template-nontype-parameter name="Is"><type>class...</type></template-nontype-parameter></template><parameter name="i"><paramtype>axis::index_type</paramtype></parameter><parameter name="is"><paramtype>Is...</paramtype></parameter><purpose>Access cell value at integral indices (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1ae76ce0421a255070ab7ca28dea2cc839" name="at"><type>decltype(auto)</type><parameter name="is"><paramtype>const <classname>multi_index_type</classname> &amp;</paramtype></parameter><purpose>Access cell value at integral indices stored in iterable. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a4bfc22951f5bed8783e9a72d360155cf" name="at" cv="const"><type>decltype(auto)</type><parameter name="is"><paramtype>const <classname>multi_index_type</classname> &amp;</paramtype></parameter><purpose>Access cell value at integral indices stored in iterable (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a4d308a9fb98089924c5844b5e1a7c404" name="operator[]"><type>decltype(auto)</type><parameter name="i"><paramtype>axis::index_type</paramtype></parameter><purpose>Access value at index (for rank = 1). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a37dfc6a646e34036a14e45ed1c5f54e4" name="operator[]" cv="const"><type>decltype(auto)</type><parameter name="i"><paramtype>axis::index_type</paramtype></parameter><purpose>Access value at index (for rank = 1, read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a860639c89c881e976c0c62c997699e08" name="operator[]"><type>decltype(auto)</type><parameter name="is"><paramtype>const <classname>multi_index_type</classname> &amp;</paramtype></parameter><purpose>Access value at index tuple. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a991ba5adc5107138ee5ffde4cee93d9c" name="operator[]" cv="const"><type>decltype(auto)</type><parameter name="is"><paramtype>const <classname>multi_index_type</classname> &amp;</paramtype></parameter><purpose>Access value at index tuple (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a2db82c1cdf3e102c4174d1e0703ca5ce" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><purpose>Equality operator, tests equality for all axes and the storage. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a734f8300bbf6a607132d022d6f0fe238" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><purpose>Negation of the equality operator. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a3619c1d2327288313f9c2c0eb87b6f9f" name="operator+="><type><classname>histogram</classname> &amp;</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><purpose>Add values of another histogram. </purpose><description><para>This operator is only available if the value_type supports operator+=.</para><para>Both histograms must be compatible to be addable. The histograms are compatible, if the axes are either all identical. If the axes only differ in the states of their discrete growing axis types, then they are also compatible. The discrete growing axes are merged in this case. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a17ee9be179564db5e47f21e98f587865" name="operator+="><type><classname>histogram</classname> &amp;</type><template>
          <template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; axes_type, S &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a0cc3a6258883feada28b95028be4a64b" name="operator-="><type><classname>histogram</classname> &amp;</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><purpose>Subtract values of another histogram. </purpose><description><para>This operator is only available if the value_type supports operator-=. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1aa8f00438f2bba8c9670457e095afa28b" name="operator*="><type><classname>histogram</classname> &amp;</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><purpose>Multiply by values of another histogram. </purpose><description><para>This operator is only available if the value_type supports operator*=. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a4ccccbe0a2b4e215c4b940fc8da72ce8" name="operator/="><type><classname>histogram</classname> &amp;</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="rhs"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><purpose>Divide by values of another histogram. </purpose><description><para>This operator is only available if the value_type supports operator/=. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a63390bed93759c23a01c607ef494980b" name="operator*="><type><classname>histogram</classname> &amp;</type><parameter name="x"><paramtype>const double</paramtype></parameter><purpose>Multiply all values with a scalar. </purpose><description><para>This operator is only available if the value_type supports operator*=. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a2a6b4a3c5f89352727df071be2cfc685" name="operator/="><type><classname>histogram</classname> &amp;</type><parameter name="x"><paramtype>const double</paramtype></parameter><purpose>Divide all values by a scalar. </purpose><description><para>This operator is only available if operator*= is available. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1ad183dfc229c418b771076a62c2740739" name="begin" cv="noexcept"><type>iterator</type><purpose>Return value iterator to the beginning of the histogram. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1aa2d440fd9ec9fd5c9e50688b7fe28790" name="end" cv="noexcept"><type>iterator</type><purpose>Return value iterator to the end in the histogram. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a935fb15169c9e58ed44977132e5dd8ab" name="begin" cv="const noexcept"><type>const_iterator</type><purpose>Return value iterator to the beginning of the histogram (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1adaf10f0c4bb969bec908b7983dcfaaba" name="end" cv="const noexcept"><type>const_iterator</type><purpose>Return value iterator to the end in the histogram (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a8ff4d8b55c8d1439d801a5f1388354c0" name="cbegin" cv="const noexcept"><type>const_iterator</type><purpose>Return value iterator to the beginning of the histogram (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1ac8aed64b21015a70bd819ac7cf3ef05d" name="cend" cv="const noexcept"><type>const_iterator</type><purpose>Return value iterator to the end in the histogram (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1histogram_1a23161580ce25fdcfcaae1279e370c069" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></class><function id="doxygen.histogram_2histogram_8hpp_1afe9348514de63e4d8c6bb19448412a82" name="operator*"><type>auto</type><template>
          <template-type-parameter name="A1" /><template-type-parameter name="S1" /><template-type-parameter name="A2" /><template-type-parameter name="S2" /></template><parameter name="a"><paramtype>const <classname>histogram</classname>&lt; A1, S1 &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>histogram</classname>&lt; A2, S2 &gt; &amp;</paramtype></parameter><purpose>Pairwise multiply cells of two histograms and return histogram with the product. </purpose><description><para>For notes on the returned histogram type, see operator+. </para></description></function><function id="doxygen.histogram_2histogram_8hpp_1ad77a17529e4583463afca758759b090f" name="operator*"><type>auto</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="h"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><purpose>Multiply all cells of the histogram by a number and return a new histogram. </purpose><description><para>If the original histogram has integer cells, the result has double cells. </para></description></function><function id="doxygen.histogram_2histogram_8hpp_1ac995b246cf6dcf31ebf28a1680e138d0" name="operator*"><type>auto</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="x"><paramtype>double</paramtype></parameter><parameter name="h"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><purpose>Multiply all cells of the histogram by a number and return a new histogram. </purpose><description><para>If the original histogram has integer cells, the result has double cells. </para></description></function><function id="doxygen.histogram_2histogram_8hpp_1ae84d9bec7a2feec4d9e9c9762428bc6b" name="operator+"><type>auto</type><template>
          <template-type-parameter name="A1" /><template-type-parameter name="S1" /><template-type-parameter name="A2" /><template-type-parameter name="S2" /></template><parameter name="a"><paramtype>const <classname>histogram</classname>&lt; A1, S1 &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>histogram</classname>&lt; A2, S2 &gt; &amp;</paramtype></parameter><purpose>Pairwise add cells of two histograms and return histogram with the sum. </purpose><description><para>The returned histogram type is the most efficient and safest one constructible from the inputs, if they are not the same type. If one histogram has a tuple axis, the result has a tuple axis. The chosen storage is the one with the larger dynamic range. </para></description></function><function id="doxygen.histogram_2histogram_8hpp_1a356e7aa4072b482b50ddc04beafceb43" name="operator-"><type>auto</type><template>
          <template-type-parameter name="A1" /><template-type-parameter name="S1" /><template-type-parameter name="A2" /><template-type-parameter name="S2" /></template><parameter name="a"><paramtype>const <classname>histogram</classname>&lt; A1, S1 &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>histogram</classname>&lt; A2, S2 &gt; &amp;</paramtype></parameter><purpose>Pairwise subtract cells of two histograms and return histogram with the difference. </purpose><description><para>For notes on the returned histogram type, see operator+. </para></description></function><function id="doxygen.histogram_2histogram_8hpp_1a6ebe3ee33d47ec61462e336641c037f2" name="operator/"><type>auto</type><template>
          <template-type-parameter name="A1" /><template-type-parameter name="S1" /><template-type-parameter name="A2" /><template-type-parameter name="S2" /></template><parameter name="a"><paramtype>const <classname>histogram</classname>&lt; A1, S1 &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>histogram</classname>&lt; A2, S2 &gt; &amp;</paramtype></parameter><purpose>Pairwise divide cells of two histograms and return histogram with the quotient. </purpose><description><para>For notes on the returned histogram type, see operator+. </para></description></function><function id="doxygen.histogram_2histogram_8hpp_1a5f9847ce35ac376c2e734b807784b72a" name="operator/"><type>auto</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="h"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><parameter name="x"><paramtype>double</paramtype></parameter><purpose>Divide all cells of the histogram by a number and return a new histogram. </purpose><description><para>If the original histogram has integer cells, the result has double cells. </para></description></function></namespace></namespace></header><header id="doxygen.indexed_8hpp" name="boost/histogram/indexed.hpp">
<namespace name="boost">
<namespace name="histogram">
<enum id="doxygen.indexed_8hpp_1a2337d903d48cbc27d3d961a1205428cc" name="coverage"><enumvalue id="doxygen.indexed_8hpp_1a2337d903d48cbc27d3d961a1205428ccaea97586b4aa0c141e4456912f3325f7f" name="inner"><description><para>iterate over inner bins, exclude underflow and overflow </para></description></enumvalue><enumvalue id="doxygen.indexed_8hpp_1a2337d903d48cbc27d3d961a1205428ccaa181a603769c1f98ad927e7367c7aa51" name="all"><description><para>iterate over all bins, including underflow and overflow </para></description></enumvalue><purpose>Coverage mode of the indexed range generator. </purpose><description><para>Defines options for the iteration strategy. </para></description></enum><function id="doxygen.indexed_8hpp_1afbad87a1aa10ed2372f5eb51f9e2b2a4" name="indexed"><type>auto</type><template>
          <template-type-parameter name="Histogram" /></template><parameter name="hist"><paramtype>Histogram &amp;&amp;</paramtype><description><para>Reference to the histogram. </para></description></parameter><parameter name="cov"><paramtype>coverage</paramtype><default>coverage::inner</default><description><para>Iterate over all or only inner bins (optional, default: inner). </para></description></parameter><purpose>Generates an indexed range of <ulink url="https://en.cppreference.com/w/cpp/named_req/ForwardIterator">forward iterators</ulink> over the histogram cells.</purpose><description><para>Use this in a range-based for loop:</para><para><programlisting language="c++">for (auto&amp;&amp; x : indexed(hist)) { ... }
</programlisting></para><para>This generates an optimized loop which is nearly always faster than a hand-written loop over the histogram cells. The iterators dereference to an <link linkend="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor">indexed_range::accessor</link>, which has methods to query the current indices and bins and acts like a pointer to the cell value. The returned iterators are forward iterators. They can be stored in a container, but may not be used after the life-time of the histogram ends.</para><para>

</para></description><returns><para><link linkend="doxygen.classboost_1_1histogram_1_1indexed__range">indexed_range</link></para></returns></function><function id="doxygen.indexed_8hpp_1a0852117a733be49d6ea0121001d45ebe" name="indexed"><type>auto</type><template>
          <template-type-parameter name="Histogram" /><template-type-parameter name="Iterable" /></template><parameter name="hist"><paramtype>Histogram &amp;&amp;</paramtype><description><para>Reference to the histogram. </para></description></parameter><parameter name="range"><paramtype>Iterable &amp;&amp;</paramtype><description><para>Iterable over items with two <link linkend="doxygen.fwd_8hpp_1aab4842e3e52a24f2363784c59e47988f">axis::index_type</link> values, which mark the begin and end index of each axis. The length of the iterable must be equal to the rank of the histogram. The begin index must be smaller than the end index. Index ranges wider than the actual range are reduced to the actual range including underflow and overflow indices.</para></description></parameter><purpose>Generates and indexed range <ulink url="https://en.cppreference.com/w/cpp/named_req/ForwardIterator">forward iterators</ulink> over a rectangular region of histogram cells.</purpose><description><para>Use this in a range-based for loop. Example: <programlisting language="c++">auto hist = <link linkend="doxygen.make__histogram_8hpp_1a45ad5d817a45ac701a9d52a91dbf811b">make_histogram</link>(<link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1integer">axis::integer&lt;&gt;</link>(0, 4),<link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1integer">axis::integer&lt;&gt;</link>(2, 6));<link linkend="doxygen.fwd_8hpp_1aab4842e3e52a24f2363784c59e47988f">axis::index_type</link> range[2] = {{1, 3}, {0, 2}};
for (auto&amp;&amp; x : indexed(hist, range)) { ... }</programlisting> This skips the first and last index of the first axis, and the last two indices of the second.</para><para>

</para></description><returns><para><link linkend="doxygen.classboost_1_1histogram_1_1indexed__range">indexed_range</link></para></returns></function><class id="doxygen.classboost_1_1histogram_1_1indexed__range" name="indexed_range"><template>
      <template-type-parameter name="Histogram" /></template><purpose>Input iterator range over histogram bins with multi-dimensional index. </purpose><description><para>The iterator returned by begin() can only be incremented. If several copies of the input iterators exist, the other copies become invalid if one of them is incremented. </para></description><class id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor" name="accessor"><purpose>Lightweight view to access value and index of current cell. </purpose><description><para>The methods provide access to the current cell indices and bins. It acts like a pointer to the cell value, and in a limited way also like a reference. To interoperate with the algorithms of the standard library, the accessor is implicitly convertible to a cell value. Assignments and comparisons are passed through to the cell. An accessor is coupled to its parent <link linkend="doxygen.classboost_1_1histogram_1_1indexed__range_1_1iterator">indexed_range::iterator</link>. Moving the parent iterator forward also updates the linked accessor. Accessors are not copyable. They cannot be stored in containers, but<link linkend="doxygen.classboost_1_1histogram_1_1indexed__range_1_1iterator">indexed_range::iterator</link> can be stored.</para></description><class id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1_1index__view" name="index_view"><purpose>Array-like view into the current multi-dimensional index. </purpose><typedef name="const_iterator"><type><emphasis>unspecified</emphasis></type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1_1index__view_1adc7c7e067f03fbb7292ef74b43613966" name="const_reference"><type>const axis::index_type &amp;</type></typedef><method-group name="public member functions">
<method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1_1index__view_1a0b5ea28816284d525199cd103b84dbc1" name="begin" cv="const noexcept"><type><classname>const_iterator</classname></type></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1_1index__view_1a60a23d4614ccfb1962a8a8ccb1247e1b" name="end" cv="const noexcept"><type><classname>const_iterator</classname></type></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1_1index__view_1a656f4843ca69533dc4fc485e70bf83fc" name="size" cv="const noexcept"><type>std::size_t</type></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1_1index__view_1ac543746372380e3e71c6eeb8cadb4853" name="operator[]" cv="const noexcept"><type>const_reference</type><parameter name="d"><paramtype>unsigned</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1_1index__view_1a4be5fe9f0f093e560b1f87896957ab15" name="at" cv="const"><type>const_reference</type><parameter name="d"><paramtype>unsigned</paramtype></parameter></method></method-group></class><method-group name="public member functions">
<copy-assignment id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1aceca45db331a7e664c1bcd9a4c7deac1"><type><classname>accessor</classname> &amp;</type><parameter name="o"><paramtype>const <classname>accessor</classname> &amp;</paramtype></parameter></copy-assignment><copy-assignment id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1ace039c1ba3d96d18e57c31ffa9cd656c"><type><classname>accessor</classname> &amp;</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>const T &amp;</paramtype></parameter></copy-assignment><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1aac4527b64b63f15ac7efeb9eeae5ba99" name="get" cv="const noexcept"><type>value_reference</type><purpose>Returns the cell reference. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1afb621d8c4a3f28eebf8aa2960e571292" name="operator*" cv="const noexcept"><type>value_reference</type><purpose>Returns the cell reference.    </purpose></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1aa99f183e10c5bd8576b7c7baecf25f88" name="operator-&gt;" cv="const noexcept"><type>value_iterator</type><purpose>Access fields and methods of the cell object. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a277934741c9b32f11c19b4e325123f87" name="index" cv="const noexcept"><type>axis::index_type</type><parameter name="d"><paramtype>unsigned</paramtype><default>0</default><description><para>axis dimension. </para></description></parameter><purpose>Access current index. </purpose><description><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a2d1afc3cd67451b03e6ddb87c993b4da" name="indices" cv="const noexcept"><type><classname>index_view</classname></type><purpose>Access indices as an iterable range. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a502bc01e91efd83c909e615d6f800e06" name="bin" cv="const"><type>decltype(auto)</type><template>
          <template-nontype-parameter name="N"><type>unsigned</type><default>0</default><purpose><para>axis dimension. </para></purpose></template-nontype-parameter></template><parameter name=""><paramtype>std::integral_constant&lt; unsigned, N &gt;</paramtype><default>{}</default></parameter><purpose>Access current bin. </purpose><description><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a9fae1244f5a8b182544af7ed4d92f86e" name="bin" cv="const"><type>decltype(auto)</type><parameter name="d"><paramtype>unsigned</paramtype><description><para>axis dimension. </para></description></parameter><purpose>Access current bin. </purpose><description><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a3b8f9d47c8372c6cb422cc26b8d62ec9" name="density" cv="const"><type>double</type><purpose>Computes density in current cell. </purpose><description><para>The density is computed as the cell value divided by the product of bin widths. Axes without bin widths, like <link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1category">axis::category</link>, are treated as having unit bin with.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1af5cfd5fad3e898684d1e87b01935db83" name="operator&lt;" cv="noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>accessor</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a04fa122f6c45498c7ab28bc2422542b0" name="operator&gt;" cv="noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>accessor</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1ab21264d84c452395ce2310847d98821d" name="operator==" cv="noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>accessor</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a52fa2b02e94675a4132749a6e11fceea" name="operator!=" cv="noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>accessor</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a1c47e2dcc8e102fafee34bae74a065f4" name="operator&lt;=" cv="noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>accessor</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1adb577dac2a932bfbe850bc71fea0acd0" name="operator&gt;=" cv="noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>accessor</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a847c4f9d91a1938177339ad0e2f660fc" name="operator&lt;" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="U" /></template><parameter name="o"><paramtype>const U &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a1bbadbdfa44e9affe49eef8a279f01fb" name="operator&gt;" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="U" /></template><parameter name="o"><paramtype>const U &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1adb33c56368301539ddaab575108afbc2" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="U" /></template><parameter name="o"><paramtype>const U &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a678cb6e4ea242cb4a41341cc080d5387" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="U" /></template><parameter name="o"><paramtype>const U &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1aa0348e274cca654ded7bc96337214a84" name="operator&lt;=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="U" /></template><parameter name="o"><paramtype>const U &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a33fa80b768ea483d805641d5ecb5f846" name="operator&gt;=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="U" /></template><parameter name="o"><paramtype>const U &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1_1accessor_1a59e86ae3b444b2ec608240f23552567a" name="conversion-operator" cv="const noexcept"><type>value_type</type></method></method-group></class><typedef name="iterator"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="value_iterator"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="value_reference"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="value_type"><type><emphasis>unspecified</emphasis></type></typedef><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1indexed__range_1adda4f7635c265b33d1dfa273b1720d61"><parameter name="hist"><paramtype>histogram_type &amp;</paramtype></parameter><parameter name="cov"><paramtype>coverage</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1indexed__range_1a22db5c51694f89cd52e1d91908484081"><template>
          <template-type-parameter name="Iterable" /></template><parameter name="hist"><paramtype>histogram_type &amp;</paramtype></parameter><parameter name="range"><paramtype>Iterable &amp;&amp;</paramtype></parameter></constructor><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1a4e6c3438097e2e8b1da94d71c33607cd" name="begin" cv="noexcept"><type><classname>iterator</classname></type></method><method id="doxygen.classboost_1_1histogram_1_1indexed__range_1a2fd514d632a04fbce49542b76d8e2bf6" name="end" cv="noexcept"><type><classname>iterator</classname></type></method></method-group></class></namespace></namespace></header><header id="doxygen.literals_8hpp" name="boost/histogram/literals.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="literals">
<function id="doxygen.literals_8hpp_1a7c7ba819bc9ee7b595fab4a50377c8c5" name="operator&quot;&quot;_c"><type>auto</type><template>
          <template-nontype-parameter name="digits"><type>char...</type></template-nontype-parameter></template><purpose>Suffix operator to generate literal compile-time numbers, 0_c, 12_c, etc. </purpose></function></namespace></namespace></namespace></header><header id="doxygen.make__histogram_8hpp" name="boost/histogram/make_histogram.hpp">
<para>Collection of factory functions to conveniently create histograms. </para><namespace name="boost">
<namespace name="histogram">








<function id="doxygen.make__histogram_8hpp_1a45ad5d817a45ac701a9d52a91dbf811b" name="make_histogram"><type>auto</type><template>
          <template-type-parameter name="Axis" /><template-nontype-parameter name="Axes"><type>class...</type></template-nontype-parameter></template><parameter name="axis"><paramtype>Axis &amp;&amp;</paramtype><description><para>First axis instance. </para></description></parameter><parameter name="axes"><paramtype>Axes &amp;&amp;...</paramtype><description><para>Other axis instances. </para></description></parameter><purpose>Make histogram from compile-time axis configuration and default storage. </purpose><description><para>
</para></description></function><function id="doxygen.make__histogram_8hpp_1ad4262da593a0e9768259764f55a76470" name="make_histogram"><type>auto</type><template>
          <template-type-parameter name="Iterable" /></template><parameter name="iterable"><paramtype>Iterable &amp;&amp;</paramtype><description><para>Iterable range of axis objects. </para></description></parameter><purpose>Make histogram from iterable range and default storage. </purpose><description><para>
</para></description></function><function id="doxygen.make__histogram_8hpp_1a6e0bcda02b185841dcf6ae6bec5c4eb2" name="make_histogram"><type>auto</type><template>
          <template-type-parameter name="Iterator" /></template><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><purpose>Make histogram from iterator interval and default storage. </purpose><description><para>
</para></description></function><function id="doxygen.make__histogram_8hpp_1ac7ccb1ecd7c001709c176276bd1c55c5" name="make_histogram_with"><type>auto</type><template>
          <template-type-parameter name="Storage" /><template-type-parameter name="Axis" /><template-nontype-parameter name="Axes"><type>class...</type></template-nontype-parameter></template><parameter name="storage"><paramtype>Storage &amp;&amp;</paramtype><description><para>Storage or container with standard interface (any vector, array, or map). </para></description></parameter><parameter name="axis"><paramtype>Axis &amp;&amp;</paramtype><description><para>First axis instance. </para></description></parameter><parameter name="axes"><paramtype>Axes &amp;&amp;...</paramtype><description><para>Other axis instances. </para></description></parameter><purpose>Make histogram from compile-time axis configuration and custom storage. </purpose><description><para>
</para></description></function><function id="doxygen.make__histogram_8hpp_1a3a0c841824702201b5ddfbbd4d3a0c0e" name="make_histogram_with"><type>auto</type><template>
          <template-type-parameter name="Storage" /><template-type-parameter name="Iterable" /></template><parameter name="storage"><paramtype>Storage &amp;&amp;</paramtype><description><para>Storage or container with standard interface (any vector, array, or map). </para></description></parameter><parameter name="iterable"><paramtype>Iterable &amp;&amp;</paramtype><description><para>Iterable range of axis objects. </para></description></parameter><purpose>Make histogram from iterable range and custom storage. </purpose><description><para>
</para></description></function><function id="doxygen.make__histogram_8hpp_1a9b1fe6509f3bb2ee447880092015b251" name="make_histogram_with"><type>auto</type><template>
          <template-type-parameter name="Storage" /><template-type-parameter name="Iterator" /></template><parameter name="storage"><paramtype>Storage &amp;&amp;</paramtype><description><para>Storage or container with standard interface (any vector, array, or map). </para></description></parameter><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><purpose>Make histogram from iterator interval and custom storage. </purpose><description><para>
</para></description></function><function id="doxygen.make__histogram_8hpp_1af924c6cc3d795525473f24d0d00bcd80" name="make_weighted_histogram"><type>auto</type><template>
          <template-type-parameter name="Axis" /><template-nontype-parameter name="Axes"><type>class...</type></template-nontype-parameter></template><parameter name="axis"><paramtype>Axis &amp;&amp;</paramtype><description><para>First axis instance. </para></description></parameter><parameter name="axes"><paramtype>Axes &amp;&amp;...</paramtype><description><para>Other axis instances. </para></description></parameter><purpose>Make histogram from compile-time axis configuration and weight-counting storage. </purpose><description><para>
</para></description></function><function id="doxygen.make__histogram_8hpp_1abc1216fa57d269c57eaf500574b0579d" name="make_weighted_histogram"><type>auto</type><template>
          <template-type-parameter name="Iterable" /></template><parameter name="iterable"><paramtype>Iterable &amp;&amp;</paramtype><description><para>Iterable range of axis objects. </para></description></parameter><purpose>Make histogram from iterable range and weight-counting storage. </purpose><description><para>
</para></description></function><function id="doxygen.make__histogram_8hpp_1a78185638288d7bc633c96a8fd864abcc" name="make_weighted_histogram"><type>auto</type><template>
          <template-type-parameter name="Iterator" /></template><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><purpose>Make histogram from iterator interval and weight-counting storage. </purpose><description><para>
</para></description></function></namespace></namespace></header><header id="doxygen.make__profile_8hpp" name="boost/histogram/make_profile.hpp">
<para>Collection of factory functions to conveniently create profiles. </para><para>Profiles are histograms which accept an additional sample and compute the mean of the sample in each cell. </para><namespace name="boost">
<namespace name="histogram">


<function id="doxygen.make__profile_8hpp_1aa4f8c6e58cf03e86a4aa691b1dbc99b9" name="make_profile"><type>auto</type><template>
          <template-type-parameter name="Axis" /><template-nontype-parameter name="Axes"><type>class...</type></template-nontype-parameter></template><parameter name="axis"><paramtype>Axis &amp;&amp;</paramtype><description><para>First axis instance. </para></description></parameter><parameter name="axes"><paramtype>Axes &amp;&amp;...</paramtype><description><para>Other axis instances. </para></description></parameter><purpose>Make profle from compile-time axis configuration. </purpose><description><para>
</para></description></function><function id="doxygen.make__profile_8hpp_1a9086ed548bf862841b73315f1ca58fde" name="make_profile"><type>auto</type><template>
          <template-type-parameter name="Iterable" /></template><parameter name="iterable"><paramtype>Iterable &amp;&amp;</paramtype><description><para>Iterable range of axis objects. </para></description></parameter><purpose>Make profile from iterable range. </purpose><description><para>
</para></description></function><function id="doxygen.make__profile_8hpp_1a5ecbe2853d8ae2e73bd4a1cfd0be5ae4" name="make_profile"><type>auto</type><template>
          <template-type-parameter name="Iterator" /></template><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><purpose>Make profile from iterator interval. </purpose><description><para>
</para></description></function><function id="doxygen.make__profile_8hpp_1a4e82caf34e5c07309b63a5866698408c" name="make_weighted_profile"><type>auto</type><template>
          <template-type-parameter name="Axis" /><template-nontype-parameter name="Axes"><type>class...</type></template-nontype-parameter></template><parameter name="axis"><paramtype>Axis &amp;&amp;</paramtype><description><para>First axis instance. </para></description></parameter><parameter name="axes"><paramtype>Axes &amp;&amp;...</paramtype><description><para>Other axis instances. </para></description></parameter><purpose>Make profle from compile-time axis configuration which accepts weights. </purpose><description><para>
</para></description></function><function id="doxygen.make__profile_8hpp_1ae3327c2fb77e447e8db1338e759878d8" name="make_weighted_profile"><type>auto</type><template>
          <template-type-parameter name="Iterable" /></template><parameter name="iterable"><paramtype>Iterable &amp;&amp;</paramtype><description><para>Iterable range of axis objects. </para></description></parameter><purpose>Make profile from iterable range which accepts weights. </purpose><description><para>
</para></description></function><function id="doxygen.make__profile_8hpp_1a82c333a42f7187e67bbdcfae2493fa99" name="make_weighted_profile"><type>auto</type><template>
          <template-type-parameter name="Iterator" /></template><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Iterator to range of axis objects. </para></description></parameter><purpose>Make profile from iterator interval which accepts weights. </purpose><description><para>
</para></description></function></namespace></namespace></header><header id="doxygen.multi__index_8hpp" name="boost/histogram/multi_index.hpp">
<namespace name="boost">
<namespace name="histogram">
<struct id="doxygen.structboost_1_1histogram_1_1multi__index" name="multi_index"><template>
      <template-nontype-parameter name="Size"><type>std::size_t</type></template-nontype-parameter></template><purpose>Holder for multiple axis indices. </purpose><description><para>Adapts external iterable, tuple, or explicit list of indices to the same representation. </para></description><typedef id="doxygen.structboost_1_1histogram_1_1multi__index_1ad83bdc19717548a6dadd8bb6727c2bf0" name="value_type"><type>axis::index_type</type></typedef><typedef id="doxygen.structboost_1_1histogram_1_1multi__index_1a6291c0542940e1f68180766e0c82bf08" name="iterator"><type>value_type *</type></typedef><typedef id="doxygen.structboost_1_1histogram_1_1multi__index_1a9309164974421c08d3f37e68446dffd3" name="const_iterator"><type>const value_type *</type></typedef><method-group name="public static functions">
<method id="doxygen.structboost_1_1histogram_1_1multi__index_1acafecba1778d97b6d3e8c3c218166faa" name="create" specifiers="static"><type><classname>multi_index</classname></type><parameter name="s"><paramtype>std::size_t</paramtype></parameter></method><method id="doxygen.structboost_1_1histogram_1_1multi__index_1a87d349c902cb4d568e6628121b65799d" name="size" cv="noexcept" specifiers="static"><type>std::size_t</type></method></method-group><method-group name="public member functions">
<constructor id="doxygen.structboost_1_1histogram_1_1multi__index_1a9c065fff48cf6c13d18424ecc4c00b93"><template>
          <template-nontype-parameter name="Is"><type>class...</type></template-nontype-parameter></template><parameter name="i"><paramtype>axis::index_type</paramtype></parameter><parameter name="is"><paramtype>Is...</paramtype></parameter></constructor><constructor id="doxygen.structboost_1_1histogram_1_1multi__index_1ac7201f3cad8cddaa0ea3c2868b79c303"><template>
          <template-nontype-parameter name="Is"><type>class...</type></template-nontype-parameter></template><parameter name="is"><paramtype>const std::tuple&lt; axis::index_type, Is... &gt; &amp;</paramtype></parameter></constructor><constructor id="doxygen.structboost_1_1histogram_1_1multi__index_1a38412fbeee26e9c14e6f8da3189d20c6"><template>
          <template-type-parameter name="Iterable" /></template><parameter name="is"><paramtype>const Iterable &amp;</paramtype></parameter></constructor><method id="doxygen.structboost_1_1histogram_1_1multi__index_1aa205fba73cfc0e88bc37d8a0bef6867c" name="begin" cv="noexcept"><type>iterator</type></method><method id="doxygen.structboost_1_1histogram_1_1multi__index_1a7aaac45f436934730e3874070f0be336" name="end" cv="noexcept"><type>iterator</type></method><method id="doxygen.structboost_1_1histogram_1_1multi__index_1a7fa23d8cc3b8d39aaedd1f8027243a43" name="begin" cv="const noexcept"><type>const_iterator</type></method><method id="doxygen.structboost_1_1histogram_1_1multi__index_1a2803c7270f35b8c1c483b05a813bc4a9" name="end" cv="const noexcept"><type>const_iterator</type></method></method-group></struct><struct-specialization id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4" name="multi_index"><template>
    </template><specialization><template-arg>static_cast&lt; std::size_t &gt;(-1)</template-arg></specialization><typedef id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1a24b8af178fe31fc74049592d3972e355" name="value_type"><type>axis::index_type</type></typedef><typedef id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1ab7754e48c02fcc1464e4b033c2d22bbb" name="iterator"><type>value_type *</type></typedef><typedef id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1a72841c9405a97637f9fdf6ee92ce3ed3" name="const_iterator"><type>const value_type *</type></typedef><method-group name="public static functions">
<method id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1a33ab5e35d44ba9ea6ded5afdbe672f80" name="create" specifiers="static"><type><classname>multi_index</classname></type><parameter name="s"><paramtype>std::size_t</paramtype></parameter></method></method-group><method-group name="public member functions">
<constructor id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1a076230d1b7e0bae2c992193a68852fe9"><template>
          <template-nontype-parameter name="Is"><type>class...</type></template-nontype-parameter></template><parameter name="i"><paramtype>axis::index_type</paramtype></parameter><parameter name="is"><paramtype>Is...</paramtype></parameter></constructor><constructor id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1a2bd214cda9cdfeb9e11e8f5d7426db7a"><template>
          <template-nontype-parameter name="Is"><type>class...</type></template-nontype-parameter></template><parameter name="is"><paramtype>const std::tuple&lt; axis::index_type, Is... &gt; &amp;</paramtype></parameter></constructor><constructor id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1acade40009446b6359ab0c1ce6381bd7d"><template>
          <template-type-parameter name="Iterable" /></template><parameter name="is"><paramtype>const Iterable &amp;</paramtype></parameter></constructor><method id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1a6c3224f06b3fea2512ec6918e3179d9f" name="begin" cv="noexcept"><type>iterator</type></method><method id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1ac7376403295dcc100da6f4f05da8fd3d" name="end" cv="noexcept"><type>iterator</type></method><method id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1a733d48fbfd8c94ce85a8deb10c90adfc" name="begin" cv="const noexcept"><type>const_iterator</type></method><method id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1af418f50b2f5bbe48be62a01bd5fb60f7" name="end" cv="const noexcept"><type>const_iterator</type></method><method id="doxygen.structboost_1_1histogram_1_1multi__index_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4_1ab77dfc73d7b5c02d04f3d6ffbfb5f02a" name="size" cv="const noexcept"><type>std::size_t</type></method></method-group></struct-specialization></namespace></namespace></header><header id="doxygen.ostream_8hpp" name="boost/histogram/ostream.hpp">
<para>A simple streaming operator for the histogram type. </para><para>The text representation is rudimentary and not guaranteed to be stable between versions of Boost.Histogram. This header is not included by any other header and must be explicitly included to use the streaming operator.</para><para>To use your own, simply include your own implementation instead of this header. </para><namespace name="boost">
<namespace name="histogram">


























</namespace></namespace></header><header id="doxygen.sample_8hpp" name="boost/histogram/sample.hpp">
<namespace name="boost">
<namespace name="histogram">
<function id="doxygen.sample_8hpp_1ad36d1d0ca87e34966c73b2b4eb469bf9" name="sample"><type>auto</type><template>
          <template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><parameter name="ts"><paramtype>Ts &amp;&amp;...</paramtype><description><para>arguments to be forwarded to the accumulator. </para></description></parameter><purpose>Helper function to mark arguments as sample. </purpose><description><para>
</para></description></function><struct id="doxygen.structboost_1_1histogram_1_1sample__type" name="sample_type"><template>
      <template-type-parameter name="T" /></template><purpose>Sample holder and type envelope. </purpose><description><para>You should not construct these directly, use the sample() helper function.</para><para>
</para></description><data-member id="doxygen.structboost_1_1histogram_1_1sample__type_1a1dc47693910ebb9866b7b75d1927f9cd" name="value"><type>T</type></data-member></struct></namespace></namespace></header><header id="doxygen.serialization_8hpp" name="boost/histogram/serialization.hpp">
<para>Headers from <ulink url="https://www.boost.org/doc/libs/develop/libs/serialization/doc/index.html">Boost.Serialization</ulink> needed to serialize STL types that are used internally by the Boost.Histogram classes.</para></header><header id="doxygen.storage__adaptor_8hpp" name="boost/histogram/storage_adaptor.hpp">
<namespace name="boost">
<namespace name="histogram">
<class id="doxygen.classboost_1_1histogram_1_1storage__adaptor" name="storage_adaptor"><template>
      <template-type-parameter name="T" /></template><purpose>Turns any vector-like, array-like, and map-like container into a storage type. </purpose><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1storage__adaptor_1a9eff53d18e084cf7908393aadd8c78a8" cv="= default"><parameter name=""><paramtype><classname>storage_adaptor</classname> &amp;&amp;</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1storage__adaptor_1aefc1621df5ff9b5a85cc6b9779512b4b" cv="= default"><parameter name=""><paramtype>const <classname>storage_adaptor</classname> &amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1storage__adaptor_1a5c63a428e85c7c082d2c94dd9e5f9ebb" cv="= default"><type><classname>storage_adaptor</classname> &amp;</type><parameter name=""><paramtype><classname>storage_adaptor</classname> &amp;&amp;</paramtype></parameter></copy-assignment><copy-assignment id="doxygen.classboost_1_1histogram_1_1storage__adaptor_1a78ab5409d9ea97b7a7eae9409086514e" cv="= default"><type><classname>storage_adaptor</classname> &amp;</type><parameter name=""><paramtype>const <classname>storage_adaptor</classname> &amp;</paramtype></parameter></copy-assignment><constructor id="doxygen.classboost_1_1histogram_1_1storage__adaptor_1aead0666aaaaaa0f28ce296705cfb6096"><template>
          <template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><parameter name="ts"><paramtype>Ts &amp;&amp;...</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1storage__adaptor_1aed230b7c482f1aaea6a1e47cdb2ab843"><type><classname>storage_adaptor</classname> &amp;</type><template>
          <template-type-parameter name="U" /></template><parameter name="u"><paramtype>U &amp;&amp;</paramtype></parameter></copy-assignment><method id="doxygen.classboost_1_1histogram_1_1storage__adaptor_1a071c81e8e09265f006522369a465c037" name="operator==" cv="const"><type>bool</type><template>
          <template-type-parameter name="U" /></template><parameter name="u"><paramtype>const U &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1storage__adaptor_1a6231f893c2534052d4afed8085642f05" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></class></namespace></namespace></header><header id="doxygen.unlimited__storage_8hpp" name="boost/histogram/unlimited_storage.hpp">
<namespace name="boost">
<namespace name="histogram">
<class id="doxygen.classboost_1_1histogram_1_1unlimited__storage" name="unlimited_storage"><template>
      <template-type-parameter name="Allocator" /></template><purpose>Memory-efficient storage for integral counters which cannot overflow. </purpose><description><para>This storage provides a no-overflow-guarantee if the counters are incremented with integer weights. It maintains a contiguous array of elemental counters, one for each cell. If an operation is requested which would overflow a counter, the array is replaced with another of a wider integral type, then the operation is executed. The storage uses integers of 8, 16, 32, 64 bits, and then switches to a multiprecision integral type, similar to those in <ulink url="https://www.boost.org/doc/libs/develop/libs/multiprecision/doc/html/index.html">Boost.Multiprecision</ulink>.</para><para>A scaling operation or adding a floating point number triggers a conversion of the elemental counters into doubles, which voids the no-overflow-guarantee. </para></description><typedef name="const_reference"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="reference"><type><emphasis>unspecified</emphasis></type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a2e6f319463c83bd9fca3b386e7abe048" name="allocator_type"><type>Allocator</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a3371b06b1ba50c17e23f6696ef0935e5" name="value_type"><type>double</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1acf402b0e36cd76d4aaa57789586aaff4" name="large_int"><type><emphasis>unspecified</emphasis></type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1af51021a2a1381669dfbce9fced71b482" name="const_iterator"><type><emphasis>unspecified</emphasis></type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1aa92b97efa56b350677f1667f0bc1ea1f" name="iterator"><type><emphasis>unspecified</emphasis></type></typedef><data-member id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1af3edbb735421ce15d27269511af9f93b" name="has_threading_support" specifiers="static"><type>bool</type></data-member><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a85416abfb32ff37aa94f599df5ec62b0" specifiers="explicit"><parameter name="a"><paramtype>const allocator_type &amp;</paramtype><default>{}</default></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1afba71afaad6cabfb772fdaa3fa7e8320" cv="= default"><parameter name=""><paramtype>const <classname>unlimited_storage</classname> &amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a04235467c41efbf454f49d4a0b89c125" cv="= default"><type><classname>unlimited_storage</classname> &amp;</type><parameter name=""><paramtype>const <classname>unlimited_storage</classname> &amp;</paramtype></parameter></copy-assignment><constructor id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a42ddc94f917d9f15cd77024cc94e2a54" cv="= default"><parameter name=""><paramtype><classname>unlimited_storage</classname> &amp;&amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1af7ffa835c0241cb62b567164173e74df" cv="= default"><type><classname>unlimited_storage</classname> &amp;</type><parameter name=""><paramtype><classname>unlimited_storage</classname> &amp;&amp;</paramtype></parameter></copy-assignment><constructor id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a30f05b6afba72ca419b9edff738d97bb" specifiers="explicit"><template>
          <template-type-parameter name="Iterable" /></template><parameter name="s"><paramtype>const Iterable &amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a7c2008fa1c1d06b3ceb893e592a28943"><type><classname>unlimited_storage</classname> &amp;</type><template>
          <template-type-parameter name="Iterable" /></template><parameter name="s"><paramtype>const Iterable &amp;</paramtype></parameter></copy-assignment><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a7cd13c5c76365d28fa2ae80d90403c52" name="get_allocator" cv="const"><type>allocator_type</type></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a00365ca3ddeddb79bbb438fd7ce08b7f" name="reset"><type>void</type><parameter name="n"><paramtype>std::size_t</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1ae4aec9affa33d8cb15c7deddc11d28f9" name="size" cv="const noexcept"><type>std::size_t</type></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1add377982e14965ecb0a8574cb6595427" name="operator[]" cv="noexcept"><type><classname>reference</classname></type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a495430d160f605ac716ef62e0d3bc5e5" name="operator[]" cv="const noexcept"><type><classname>const_reference</classname></type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a73c2d6aa6869f21c5263bf8874953eeb" name="operator==" cv="const noexcept"><type>bool</type><parameter name="x"><paramtype>const <classname>unlimited_storage</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a94e56d14d1fd8b97264d3ed780f78ee8" name="operator==" cv="const"><type>bool</type><template>
          <template-type-parameter name="Iterable" /></template><parameter name="iterable"><paramtype>const Iterable &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1af7975a28d54b04968fc473aa8359d8d4" name="operator*="><type><classname>unlimited_storage</classname> &amp;</type><parameter name="x"><paramtype>const double</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1afde3f0b4e380ff119f9df209d2804b7f" name="begin" cv="noexcept"><type>iterator</type></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a7712d25d16056f663877029d1be419da" name="end" cv="noexcept"><type>iterator</type></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1ab2eb01705cf8128268ad8b1464203665" name="begin" cv="const noexcept"><type>const_iterator</type></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1af4826e6157bf84271221c7d011a5453e" name="end" cv="const noexcept"><type>const_iterator</type></method><method id="doxygen.classboost_1_1histogram_1_1unlimited__storage_1a7d9b4387dbe27b94f76535b1f6ff3fa1" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></class></namespace></namespace></header><header id="doxygen.unsafe__access_8hpp" name="boost/histogram/unsafe_access.hpp">
<namespace name="boost">
<namespace name="histogram">
<struct id="doxygen.structboost_1_1histogram_1_1unsafe__access" name="unsafe_access"><purpose>Unsafe read/write access to private data that potentially breaks consistency. </purpose><description><para>This struct enables access to private data of some classes. It is intended for library developers who need this to implement algorithms efficiently, for example, serialization. Users should not use this. If you are a user who absolutely needs this to get a specific effect, please submit an issue on Github. Perhaps the public interface is insufficient and should be extended for your use case.</para><para>Unlike the normal interface, the <link linkend="doxygen.structboost_1_1histogram_1_1unsafe__access">unsafe_access</link> interface may change between versions. If your code relies on<link linkend="doxygen.structboost_1_1histogram_1_1unsafe__access">unsafe_access</link>, it may or may not break when you update Boost. This is another reason to not use it unless you are ok with these conditions.</para></description><method-group name="public static functions">
<method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1a2f4a89aa91b5c84c5c5c7be057006431" name="axes" specifiers="static"><type>auto &amp;</type><template>
          <template-type-parameter name="Histogram" /></template><parameter name="hist"><paramtype>Histogram &amp;</paramtype><description><para>histogram. </para></description></parameter><purpose>Get axes. </purpose><description><para>
</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1a1f2cc00a6c93c99988ac40ea05a75c27" name="axes" specifiers="static"><type>const auto &amp;</type><template>
          <template-type-parameter name="Histogram" /></template><parameter name="hist"><paramtype>const Histogram &amp;</paramtype><description><para>histogram.    </para></description></parameter><purpose>Get axes.    </purpose><description><para>
</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1ad0133b24ae3ae12e46ff93ec0adf8d82" name="axis" specifiers="static"><type>decltype(auto)</type><template>
          <template-type-parameter name="Histogram" /><template-nontype-parameter name="I"><type>unsigned</type><default>0</default><purpose><para>axis index (optional, default: 0). </para></purpose></template-nontype-parameter></template><parameter name="hist"><paramtype>Histogram &amp;</paramtype><description><para>histogram. </para></description></parameter><parameter name=""><paramtype>std::integral_constant&lt; unsigned, I &gt;</paramtype><default>{}</default></parameter><purpose>Get mutable axis reference with compile-time number. </purpose><description><para>

</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1a9b8ad8a2db2d1f940b295f056fe3c060" name="axis" specifiers="static"><type>decltype(auto)</type><template>
          <template-type-parameter name="Histogram" /></template><parameter name="hist"><paramtype>Histogram &amp;</paramtype><description><para>histogram. </para></description></parameter><parameter name="i"><paramtype>unsigned</paramtype><description><para>axis index. </para></description></parameter><purpose>Get mutable axis reference with run-time number. </purpose><description><para>
</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1a4159c5cff3ee9e94afc65bfbdbedefa9" name="storage" specifiers="static"><type>auto &amp;</type><template>
          <template-type-parameter name="Histogram" /></template><parameter name="hist"><paramtype>Histogram &amp;</paramtype><description><para>histogram. </para></description></parameter><purpose>Get storage. </purpose><description><para>
</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1afcfebaecdb3b3215dd2c0e0f015af136" name="storage" specifiers="static"><type>const auto &amp;</type><template>
          <template-type-parameter name="Histogram" /></template><parameter name="hist"><paramtype>const Histogram &amp;</paramtype><description><para>histogram.    </para></description></parameter><purpose>Get storage.    </purpose><description><para>
</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1ad5eb95573f55fdddd57bbd9da2c052b3" name="offset" specifiers="static"><type>auto &amp;</type><template>
          <template-type-parameter name="Histogram" /></template><parameter name="hist"><paramtype>Histogram &amp;</paramtype><description><para>histogram </para></description></parameter><purpose>Get index offset. </purpose><description><para>
</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1adc82274258e42abbdfbb737feb7fab71" name="offset" specifiers="static"><type>const auto &amp;</type><template>
          <template-type-parameter name="Histogram" /></template><parameter name="hist"><paramtype>const Histogram &amp;</paramtype><description><para>histogram    </para></description></parameter><purpose>Get index offset.    </purpose><description><para>
</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1a53b0e73944c1ab8b7d274c9a86706a28" name="unlimited_storage_buffer" specifiers="static"><type>auto &amp;</type><template>
          <template-type-parameter name="Allocator" /></template><parameter name="storage"><paramtype><classname>unlimited_storage</classname>&lt; Allocator &gt; &amp;</paramtype><description><para>instance of <link linkend="doxygen.classboost_1_1histogram_1_1unlimited__storage">unlimited_storage</link>.</para></description></parameter><purpose>Get buffer of <link linkend="doxygen.classboost_1_1histogram_1_1unlimited__storage">unlimited_storage</link>.</purpose><description><para>
</para></description></method><method id="doxygen.structboost_1_1histogram_1_1unsafe__access_1a0888666ef10049758d7778df98a68704" name="storage_adaptor_impl" specifiers="static"><type>auto &amp;</type><template>
          <template-type-parameter name="T" /></template><parameter name="storage"><paramtype><classname>storage_adaptor</classname>&lt; T &gt; &amp;</paramtype><description><para>instance of <link linkend="doxygen.classboost_1_1histogram_1_1storage__adaptor">storage_adaptor</link>.</para></description></parameter><purpose>Get implementation of <link linkend="doxygen.classboost_1_1histogram_1_1storage__adaptor">storage_adaptor</link>.</purpose><description><para>
</para></description></method></method-group></struct></namespace></namespace></header><header id="doxygen.weight_8hpp" name="boost/histogram/weight.hpp">
<namespace name="boost">
<namespace name="histogram">
<function id="doxygen.weight_8hpp_1af62f82b8d4842c196c563381ac21dcf4" name="weight"><type>auto</type><template>
          <template-type-parameter name="T" /></template><parameter name="t"><paramtype>T &amp;&amp;</paramtype><description><para>argument to be forward to the histogram. </para></description></parameter><purpose>Helper function to mark argument as weight. </purpose><description><para>
</para></description></function><struct id="doxygen.structboost_1_1histogram_1_1weight__type" name="weight_type"><template>
      <template-type-parameter name="T" /></template><purpose>Weight holder and type envelope. </purpose><description><para>You should not construct these directly, use the weight() helper function.</para><para>
</para></description><data-member id="doxygen.structboost_1_1histogram_1_1weight__type_1aa9e71742aa19a4fd87a6e7bd073b0491" name="value"><type>T</type><purpose>Access underlying value. </purpose></data-member><method-group name="public member functions">
<method id="doxygen.structboost_1_1histogram_1_1weight__type_1a605fe93f3ccbab710db740cb17775ccb" name="conversion-operator" cv="const"><type>weight_type&lt; U &gt;</type><template>
          <template-type-parameter name="U" /></template><purpose>Allow implicit conversions of types when the underlying value type allows them. </purpose></method></method-group></struct></namespace></namespace></header><header id="doxygen.count_8hpp" name="boost/histogram/accumulators/count.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="accumulators">
<class id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count" name="count"><template>
      <template-type-parameter name="ValueType" /><template-nontype-parameter name="ThreadSafe"><type>bool</type><purpose><para>Set to true to make increments and adds thread-safe. </para></purpose></template-nontype-parameter></template><purpose>Wraps a C++ arithmetic type with optionally thread-safe increments and adds. </purpose><description><para>This adaptor optionally uses atomic operations to make concurrent increments and additions thread-safe for the stored arithmetic value, which can be integral or floating point. For small histograms, the performance will still be poor because of False Sharing, see <ulink url="https://en.wikipedia.org/wiki/False_sharing">https://en.wikipedia.org/wiki/False_sharing</ulink> for details.</para><para>Warning: Assignment is not thread-safe in this implementation, so don't assign concurrently.</para><para>This wrapper class can be used as a base class by users to add arbitrary metadata to each bin of a histogram.</para><para>When weighted samples are accumulated and high precision is required, use <computeroutput><link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum">accumulators::sum</link></computeroutput> instead (at the cost of lower performance). If a local variance estimate for the weight distribution should be computed as well (generally needed for a detailed statistical analysis), use<computeroutput><link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum">accumulators::weighted_sum</link></computeroutput>.</para><para>
</para></description><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1ac8d0b319493ff7e3fc984ff3383fa25f" name="value_type"><type>ValueType</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a8f66a5e132770469c3c2e40834fdc308" name="const_reference"><type>const value_type &amp;</type></typedef><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1adb64b8fdc574a3b62f9610addbcf52b7" /><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a55f14dbd5163501bf9e189269f3d1221" cv="noexcept"><parameter name="value"><paramtype>const_reference</paramtype></parameter><purpose>Initialize count to value and allow implicit conversion. </purpose></constructor><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a998d0cc041a329a4e9da257a59b40690" cv="noexcept"><template>
          <template-type-parameter name="T" /><template-nontype-parameter name="B"><type>bool</type></template-nontype-parameter></template><parameter name="c"><paramtype>const <classname>count</classname>&lt; T, B &gt; &amp;</paramtype></parameter><purpose>Allow implicit conversion from other count. </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a5944b9e57d0decf096b4b8d99ceb1944" name="operator++" cv="noexcept"><type><classname>count</classname> &amp;</type><purpose>Increment count by one. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a76c6c9ae2f929bdee60f18c54ca00244" name="operator+=" cv="noexcept"><type><classname>count</classname> &amp;</type><parameter name="value"><paramtype>const_reference</paramtype></parameter><purpose>Increment count by value. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1ad4838436b1de2f0d301eab10b61f1875" name="operator+=" cv="noexcept"><type><classname>count</classname> &amp;</type><parameter name="s"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter><purpose>Add another count. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a960e43ca3bd633facd2c14dafd7cb214" name="operator*=" cv="noexcept"><type><classname>count</classname> &amp;</type><parameter name="value"><paramtype>const_reference</paramtype></parameter><purpose>Scale by value. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1acd1fd81d56cb9feb61bede595800d2dd" name="operator==" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a565a8f1fc67b63a3bae3f8ab75b66b3e" name="operator!=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a9cda12a773652c19c292cd5bc27dbd1c" name="value" cv="const noexcept"><type>value_type</type><purpose>Return count. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a848777363addf4c18f94cd269072b3a9" name="conversion-operator" cv="const noexcept" specifiers="explicit"><type>value_type</type></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a8407c1cebbe818250b78dc82c6ee85a3" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a10812204a1516f93e660dedf0bcda686" name="operator*=" cv="noexcept"><type><classname>count</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1adec9269082b3a9292cb7452555777eb8" name="operator*" cv="const noexcept"><type><classname>count</classname></type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a16592722865dcacf16a00f3caa01b82d" name="operator/=" cv="noexcept"><type><classname>count</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1aa7d125cc72c5198f4cb737cf43228cd8" name="operator/" cv="const noexcept"><type><classname>count</classname></type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a4029b3e953bc4ac02609d884a15636eb" name="operator&lt;" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a8398c18e771602e4ffa1cf3c08b52015" name="operator&gt;" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a09a6d0f6e53856ec0667087e3bb890f2" name="operator&lt;=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1aa68ec8871cb52b5c3c6f67c794a5d5a3" name="operator&gt;=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>count</classname> &amp;</paramtype></parameter></method></method-group><method-group name="public static functions">
<method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1count_1a00fdd84fbfaba5fad47ac3103e9d86bc" name="thread_safe" cv="noexcept" specifiers="static"><type>bool</type></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.fraction_8hpp" name="boost/histogram/accumulators/fraction.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="accumulators">
<class id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction" name="fraction"><template>
      <template-type-parameter name="ValueType" /></template><purpose>Accumulate boolean samples and compute the fraction of true samples. </purpose><description><para>This accumulator should be used to calculate the efficiency or success fraction of a random process as a function of process parameters. It returns the fraction of successes, the variance of this fraction, and a two-sided confidence interval with 68.3 % confidence level for this fraction.</para><para>There is no unique way to compute an interval for a success fraction. This class returns the Wilson score interval, because it is widely recommended in the literature for general use. More interval computers can be found in <computeroutput>boost/histogram/utility</computeroutput>, which can be used to compute intervals for other confidence levels.</para></description><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1ab3ff9a6d4baa500b520b00064f17658b" name="value_type"><type>ValueType</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a3813473fd99c09fdd8921e6c1a1e4b07" name="const_reference"><type>const value_type &amp;</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a6844a6316b61798d4b3eab4845d43326" name="real_type"><type>typename std::conditional&lt; std::is_floating_point&lt; value_type &gt;::value, value_type, double &gt;::type</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a6ce69bd77032fad8335751f0dad323c8" name="interval_type"><type>typename <classname>utility::wilson_interval</classname>&lt; real_type &gt;::interval_type</type></typedef><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a7a9a1b0a604c3db59768f26c30843320" /><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1aa4fdb05a1d85704e570380c9b0cf5f79" cv="noexcept"><parameter name="successes"><paramtype>const_reference</paramtype></parameter><parameter name="failures"><paramtype>const_reference</paramtype></parameter><purpose>Initialize to external successes and failures. </purpose></constructor><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a505fe9f5d7d304c055c9cba3b4fef2d1" cv="noexcept"><template>
          <template-type-parameter name="T" /></template><parameter name="e"><paramtype>const <classname>fraction</classname>&lt; T &gt; &amp;</paramtype></parameter><purpose>Allow implicit conversion from fraction with a different value type. </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1ab9742978f96463206611735d7acbc2cf" name="operator()" cv="noexcept"><type>void</type><parameter name="x"><paramtype>bool</paramtype></parameter><purpose>Insert boolean sample x. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a7d3e6e39758f9fa0b6dfc325505f1671" name="operator+=" cv="noexcept"><type><classname>fraction</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>fraction</classname> &amp;</paramtype></parameter><purpose>Add another accumulator. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a51be612b29afab53035395bb74dfdf72" name="successes" cv="const noexcept"><type>const_reference</type><purpose>Return number of boolean samples that were true. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a49bd1aee3413127f112acfe9b365f5b4" name="failures" cv="const noexcept"><type>const_reference</type><purpose>Return number of boolean samples that were false. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a5185cd29ff7491523cae3bccf8fd01b2" name="count" cv="const noexcept"><type>value_type</type><purpose>Return total number of boolean samples. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a4704daeb126ba93cdfd7104f5101b893" name="value" cv="const noexcept"><type>real_type</type><purpose>Return success fraction of boolean samples. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1ae6d8c077d6e489d6a68755003641e3ab" name="variance" cv="const noexcept"><type>real_type</type><purpose>Return variance of the success fraction. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1ad21feb806a486f13ad3a67f33741511e" name="confidence_interval" cv="const noexcept"><type>interval_type</type><purpose>Return standard interval with 68.3 % confidence level (Wilson score interval). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a35c68bf50c44ec485dc6de1ff5013f12" name="operator==" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>fraction</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a9823c9d97f76badac990e74d3733e087" name="operator!=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>fraction</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1fraction_1a7d4cd8db8c3e21f94c602ca1c680a887" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.is__thread__safe_8hpp" name="boost/histogram/accumulators/is_thread_safe.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="accumulators">
</namespace></namespace></namespace></header><header id="doxygen.mean_8hpp" name="boost/histogram/accumulators/mean.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="accumulators">
<class id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean" name="mean"><template>
      <template-type-parameter name="ValueType" /></template><purpose>Calculates mean and variance of sample. </purpose><description><para>Uses Welfords's incremental algorithm to improve the numerical stability of mean and variance computation. </para></description><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1aff5565197c67c4e2aa25fdbcedab4169" name="value_type"><type>ValueType</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a231f3c11fec918da7d1c21e3a87ed1fb" name="const_reference"><type>const value_type &amp;</type></typedef><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a7114f2f92138664fd7e4bed33ffb1462" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1aefb19335e41c4ccff4ea781ac1414b3b" cv="noexcept"><template>
          <template-type-parameter name="T" /></template><parameter name="o"><paramtype>const <classname>mean</classname>&lt; T &gt; &amp;</paramtype></parameter><purpose>Allow implicit conversion from mean&lt;T&gt;. </purpose></constructor><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1ac28879c3a44c47211d27203bc1f492b2" cv="noexcept"><parameter name="n"><paramtype>const_reference</paramtype></parameter><parameter name="mean"><paramtype>const_reference</paramtype></parameter><parameter name="variance"><paramtype>const_reference</paramtype></parameter><purpose>Initialize to external count, mean, and variance. </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a0a037447fb76ea492fd2993337cea234" name="operator()" cv="noexcept"><type>void</type><parameter name="x"><paramtype>const_reference</paramtype></parameter><purpose>Insert sample x. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1ada61cb3d6ccda29ef71a4a7127d33cbd" name="operator()" cv="noexcept"><type>void</type><parameter name="w"><paramtype>const <classname>weight_type</classname>&lt; value_type &gt; &amp;</paramtype></parameter><parameter name="x"><paramtype>const_reference</paramtype></parameter><purpose>Insert sample x with weight w. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1aa5f93ff78a5a489ec63c83e2af14c8ad" name="operator+=" cv="noexcept"><type><classname>mean</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>mean</classname> &amp;</paramtype></parameter><purpose>Add another mean accumulator. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a5a78508ec70d4bc555faab6ef0aabe08" name="operator*=" cv="noexcept"><type><classname>mean</classname> &amp;</type><parameter name="s"><paramtype>const_reference</paramtype></parameter><purpose>Scale by value. </purpose><description><para>This acts as if all samples were scaled by the value. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a84358dd01330400d9bca38eb26e7b1a2" name="operator==" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>mean</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1adfede2705c4d8778f7636d1d0b87bfe5" name="operator!=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>mean</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1ab5cd7c52777c9041b0ad9c0c33e22c65" name="count" cv="const noexcept"><type>const_reference</type><purpose>Return how many samples were accumulated. </purpose><description><para><link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1ab5cd7c52777c9041b0ad9c0c33e22c65">count()</link> should be used to check whether<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a555fd7491a041f40d4773b769d5a69b4">value()</link> and<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a14665b9189c136b3ac7fd4498254f9ac">variance()</link> are defined, see documentation of<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a555fd7491a041f40d4773b769d5a69b4">value()</link> and<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a14665b9189c136b3ac7fd4498254f9ac">variance()</link>.<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1ab5cd7c52777c9041b0ad9c0c33e22c65">count()</link> can be used to compute the variance of the mean by dividing<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a14665b9189c136b3ac7fd4498254f9ac">variance()</link> by<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1ab5cd7c52777c9041b0ad9c0c33e22c65">count()</link>.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a555fd7491a041f40d4773b769d5a69b4" name="value" cv="const noexcept"><type>const_reference</type><purpose>Return mean value of accumulated samples. </purpose><description><para>The result is undefined, if <computeroutput><link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1ab5cd7c52777c9041b0ad9c0c33e22c65">count()</link> &lt; 1</computeroutput>.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a14665b9189c136b3ac7fd4498254f9ac" name="variance" cv="const noexcept"><type>value_type</type><purpose>Return variance of accumulated samples. </purpose><description><para>The result is undefined, if <computeroutput><link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1ab5cd7c52777c9041b0ad9c0c33e22c65">count()</link> &lt; 2</computeroutput>.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1mean_1a50eb77d790c3d668c1e3a67b2e73e9b1" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="version"><paramtype>unsigned</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.accumulators_2ostream_8hpp" name="boost/histogram/accumulators/ostream.hpp">
<para>Simple streaming operators for the builtin accumulator types. </para><para>The text representation is not guaranteed to be stable between versions of Boost.Histogram. This header is only included by <ulink url="histogram/reference.html#header.boost.histogram.ostream_hpp">boost/histogram/ostream.hpp</ulink>. To use your own, include your own implementation instead of this header and do not include<ulink url="histogram/reference.html#header.boost.histogram.ostream_hpp">boost/histogram/ostream.hpp</ulink>.</para></header><header id="doxygen.accumulators_2sum_8hpp" name="boost/histogram/accumulators/sum.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="accumulators">
<class id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum" name="sum"><template>
      <template-type-parameter name="ValueType" /></template><purpose>Uses Neumaier algorithm to compute accurate sums of floats. </purpose><description><para>The algorithm is an improved Kahan algorithm (<ulink url="https://en.wikipedia.org/wiki/Kahan_summation_algorithm">https://en.wikipedia.org/wiki/Kahan_summation_algorithm</ulink>). The algorithm uses memory for two numbers and is three to five times slower compared to using a single number to accumulate a sum, but the relative error of the sum is at the level of the machine precision, independent of the number of samples.</para><para>A. Neumaier, Zeitschrift fuer Angewandte Mathematik und Mechanik 54 (1974) 39-51. </para></description><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a495310efd08b5c7cf2a745dc0ee3f26d" name="value_type"><type>ValueType</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a6cb923033e694f2c714c68e2c6d36e0f" name="const_reference"><type>const value_type &amp;</type></typedef><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a2658f15c0c82ee44eb35fb9fd7f159c1" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1aca3a88fb485b8a7cc3da62b5871168e7" cv="noexcept"><parameter name="value"><paramtype>const_reference</paramtype></parameter><purpose>Initialize sum to value and allow implicit conversion. </purpose></constructor><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a7a5136f30b3ad8c05bc487c2162fd727" cv="noexcept"><template>
          <template-type-parameter name="T" /></template><parameter name="s"><paramtype>const <classname>sum</classname>&lt; T &gt; &amp;</paramtype></parameter><purpose>Allow implicit conversion from sum&lt;T&gt; </purpose></constructor><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a3e6ea36e61b08e1bbeb6122b2c4d691b" cv="noexcept"><parameter name="large_part"><paramtype>const_reference</paramtype></parameter><parameter name="small_part"><paramtype>const_reference</paramtype></parameter><purpose>Initialize sum explicitly with large and small parts. </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a002b5cbb280a01264f87e72df23ef6f4" name="operator++" cv="noexcept"><type><classname>sum</classname> &amp;</type><purpose>Increment sum by one. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a5d2933a6aa41f6bbc572a3bae79c068c" name="operator+=" cv="noexcept"><type><classname>sum</classname> &amp;</type><parameter name="value"><paramtype>const_reference</paramtype></parameter><purpose>Increment sum by value. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a0c12c8b2fcbeea176deb60786599475f" name="operator+=" cv="noexcept"><type><classname>sum</classname> &amp;</type><parameter name="s"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter><purpose>Add another sum. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a462ae9204b6ee24fcb4d3f45925426be" name="operator*=" cv="noexcept"><type><classname>sum</classname> &amp;</type><parameter name="value"><paramtype>const_reference</paramtype></parameter><purpose>Scale by value. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a812800fa98194fb8f95c9cf5dcc44e1e" name="operator==" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a3f162f1248155904cef92a3870a027db" name="operator!=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a823f5bc4fd96a23a2357dd8bb1e85985" name="value" cv="const noexcept"><type>value_type</type><purpose>Return value of the sum. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a10b23f3ada71623f8fef6b4cba7137a6" name="large_part" cv="const noexcept"><type>const_reference</type><purpose>Return large part of the sum. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1aa8a99bcf4aef78f558045fec301c2538" name="small_part" cv="const noexcept"><type>const_reference</type><purpose>Return small part of the sum. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a40ee7dfe7a10e8c0d0c9f6ed2e2cb3c7" name="conversion-operator" cv="const noexcept" specifiers="explicit"><type>value_type</type></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a27dcf95bc2fe0e8cb69aff8a4c8642b8" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a73318550cd1ee3c5e193e2d907cede1e" name="operator*=" cv="noexcept"><type><classname>sum</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1aa1016367dba3b1c1185c4428405f5a1d" name="operator*" cv="const noexcept"><type><classname>sum</classname></type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a6345c327ecf8e56061921558be2506f7" name="operator/=" cv="noexcept"><type><classname>sum</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1af09ee8cf8df2e5debbbcebeee9f23288" name="operator/" cv="const noexcept"><type><classname>sum</classname></type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a7d47db578efb67c0dcc24312a4cd1d63" name="operator&lt;" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1ac293b0a8e18c3563bdd49644e65b2cf9" name="operator&gt;" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1ad7d6df71346bed221b086d6cfdf5f89a" name="operator&lt;=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1sum_1a1a586d919f6990508eb3a397ee2787a1" name="operator&gt;=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>sum</classname> &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.weighted__mean_8hpp" name="boost/histogram/accumulators/weighted_mean.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="accumulators">
<class id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean" name="weighted_mean"><template>
      <template-type-parameter name="ValueType" /></template><purpose>Calculates mean and variance of weighted sample. </purpose><description><para>Uses West's incremental algorithm to improve numerical stability of mean and variance computation. </para></description><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1ac20b3cf69fdebdc980dc04f1bed7e83f" name="value_type"><type>ValueType</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a96f6e12d1b50992d6d712c27dc8d1583" name="const_reference"><type>const value_type &amp;</type></typedef><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1aaecfae72eb6a1fc4aa28ec21755f1104" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1af8a3fe5c50ec7a853bc95b2ec6a7767f"><template>
          <template-type-parameter name="T" /></template><parameter name="o"><paramtype>const <classname>weighted_mean</classname>&lt; T &gt; &amp;</paramtype></parameter><purpose>Allow implicit conversion from other weighted_means. </purpose></constructor><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a3803e79da75026e5b715f044243db8eb"><parameter name="wsum"><paramtype>const_reference</paramtype></parameter><parameter name="wsum2"><paramtype>const_reference</paramtype></parameter><parameter name="mean"><paramtype>const_reference</paramtype></parameter><parameter name="variance"><paramtype>const_reference</paramtype></parameter><purpose>Initialize to external sum of weights, sum of weights squared, mean, and variance. </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a68e4ac2b60d66fa2c9d81c4cf1741aa9" name="operator()"><type>void</type><parameter name="x"><paramtype>const_reference</paramtype></parameter><purpose>Insert sample x. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1aca3447cfc867ce81a6bd5892cec0ce23" name="operator()"><type>void</type><parameter name="w"><paramtype>const <classname>weight_type</classname>&lt; value_type &gt; &amp;</paramtype></parameter><parameter name="x"><paramtype>const_reference</paramtype></parameter><purpose>Insert sample x with weight w. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1ab5f11ae1af52b0506cdf1abb7d1d9ebb" name="operator+="><type><classname>weighted_mean</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>weighted_mean</classname> &amp;</paramtype></parameter><purpose>Add another <link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean">weighted_mean</link>.</purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a59759a1327491f90e8f562614e4ee370" name="operator*=" cv="noexcept"><type><classname>weighted_mean</classname> &amp;</type><parameter name="s"><paramtype>const_reference</paramtype></parameter><purpose>Scale by value. </purpose><description><para>This acts as if all samples were scaled by the value. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a21016b3704488bed3a473435c7c9e0ce" name="operator==" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>weighted_mean</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1aeebdf63c05ee1b5d06b42a260efd9697" name="operator!=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>weighted_mean</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1aa6f4efef83646fdbd34ba00813027d90" name="sum_of_weights" cv="const noexcept"><type>const_reference</type><purpose>Return sum of weights. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1ae1b8d35829dd4d0dd1e06e70602fcaa3" name="sum_of_weights_squared" cv="const noexcept"><type>const_reference</type><purpose>Return sum of weights squared (variance of weight distribution). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a52422d337bf6228059d9cd8527ffbed6" name="count" cv="const noexcept"><type>value_type</type><purpose>Return effective counts. </purpose><description><para>This corresponds to the equivalent number of unweighted samples that would have the same variance as this sample. <link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a52422d337bf6228059d9cd8527ffbed6">count()</link> should be used to check whether<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1aca5921b1f4bc84e9172fe4386570dfee">value()</link> and<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a438cdc5cde9ffbd8eb950892a9b2d34f">variance()</link> are defined, see documentation of<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1aca5921b1f4bc84e9172fe4386570dfee">value()</link> and<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a438cdc5cde9ffbd8eb950892a9b2d34f">variance()</link>.<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a52422d337bf6228059d9cd8527ffbed6">count()</link> can be used to compute the variance of the mean by dividing<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a438cdc5cde9ffbd8eb950892a9b2d34f">variance()</link> by<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a52422d337bf6228059d9cd8527ffbed6">count()</link>.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1aca5921b1f4bc84e9172fe4386570dfee" name="value" cv="const noexcept"><type>const_reference</type><purpose>Return mean value of accumulated weighted samples. </purpose><description><para>The result is undefined, if <link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a52422d337bf6228059d9cd8527ffbed6">count()</link> == 0.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a438cdc5cde9ffbd8eb950892a9b2d34f" name="variance" cv="const"><type>value_type</type><purpose>Return variance of accumulated weighted samples. </purpose><description><para>The result is undefined, if <link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a52422d337bf6228059d9cd8527ffbed6">count()</link> == 0 or<link linkend="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a52422d337bf6228059d9cd8527ffbed6">count()</link> == 1.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__mean_1a1d52c07319d037b7bee70ea2e40040b3" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.weighted__sum_8hpp" name="boost/histogram/accumulators/weighted_sum.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="accumulators">
<class id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum" name="weighted_sum"><template>
      <template-type-parameter name="ValueType" /></template><purpose>Holds sum of weights and its variance estimate. </purpose><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1aa5925694da4bb71036261107e51ac8c5" name="value_type"><type>ValueType</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1afd19470e831e8800186564adc2391c3f" name="const_reference"><type>const value_type &amp;</type></typedef><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1a81f61df00231d444d700d0b1d5995de0" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1ac9a034fc8b3822eb88a92d57c808a3e8" cv="noexcept"><parameter name="value"><paramtype>const_reference</paramtype></parameter><purpose>Initialize sum to value and allow implicit conversion. </purpose></constructor><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1ae52042e8155fda8ead270fbfbd405f63" cv="noexcept"><template>
          <template-type-parameter name="T" /></template><parameter name="s"><paramtype>const <classname>weighted_sum</classname>&lt; T &gt; &amp;</paramtype></parameter><purpose>Allow implicit conversion from sum&lt;T&gt; </purpose></constructor><constructor id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1aa56ddedc28975ae503fb22ed54b26a2a" cv="noexcept"><parameter name="value"><paramtype>const_reference</paramtype></parameter><parameter name="variance"><paramtype>const_reference</paramtype></parameter><purpose>Initialize sum to value and variance. </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1ada4035c567381fab7e0980b38e4722c9" name="operator++"><type><classname>weighted_sum</classname> &amp;</type><purpose>Increment by one. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1a88ee3c8b6d4abd1d78553f36c2f552ad" name="operator+="><type><classname>weighted_sum</classname> &amp;</type><parameter name="w"><paramtype>const <classname>weight_type</classname>&lt; value_type &gt; &amp;</paramtype></parameter><purpose>Increment by weight. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1a6f45866613779313b3ce162893ba9b74" name="operator+="><type><classname>weighted_sum</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>weighted_sum</classname> &amp;</paramtype></parameter><purpose>Added another weighted sum. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1a9146469044b1921bdcbc4683bf2b7790" name="operator/="><type><classname>weighted_sum</classname> &amp;</type><parameter name="rhs"><paramtype>const <classname>weighted_sum</classname> &amp;</paramtype></parameter><purpose>Divide by another weighted sum. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1aa7822dd912f1610a46f07d831b5b9c51" name="operator*="><type><classname>weighted_sum</classname> &amp;</type><parameter name="x"><paramtype>const_reference</paramtype></parameter><purpose>Scale by value. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1ac980f2aaf9731ec001b6313bd29a977d" name="operator==" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>weighted_sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1a36944368b16ad77e5522bb63dbe381a4" name="operator!=" cv="const noexcept"><type>bool</type><parameter name="rhs"><paramtype>const <classname>weighted_sum</classname> &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1a7125d4478825ddd604539b82363c02a2" name="value" cv="const noexcept"><type>const_reference</type><purpose>Return value of the sum. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1a5b1def0fb661d791647ede911af33fdd" name="variance" cv="const noexcept"><type>const_reference</type><purpose>Return estimated variance of the sum. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1ada65a119f3ff2c0e01acc4971483f902" name="conversion-operator" cv="const" specifiers="explicit"><type>const_reference</type></method><method id="doxygen.classboost_1_1histogram_1_1accumulators_1_1weighted__sum_1ae296c6d6c84995ddcfa3590aa1c559ad" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.empty_8hpp" name="boost/histogram/algorithm/empty.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="algorithm">



















<function id="doxygen.empty_8hpp_1a976bdeb53b7c7f21ed96833e1987e4b3" name="empty"><type>auto</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="h"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><parameter name="cov"><paramtype>coverage</paramtype></parameter><purpose>Check to see if all histogram cells are empty. </purpose><description><para>Use coverage to include or exclude the underflow/overflow bins.</para><para>This algorithm has O(N) complexity, where N is the number of cells.</para><para>Returns true if all cells are empty, and false otherwise. </para></description></function></namespace></namespace></namespace></header><header id="doxygen.project_8hpp" name="boost/histogram/algorithm/project.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="algorithm">

















<function id="doxygen.project_8hpp_1aea8b77b648dc0aacc038374d6f1dd910" name="project"><type>auto</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /><template-nontype-parameter name="N"><type>unsigned</type></template-nontype-parameter><template-nontype-parameter name="Ns"><type>typename...</type></template-nontype-parameter></template><parameter name="h"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>std::integral_constant&lt; unsigned, N &gt;</paramtype></parameter><parameter name=""><paramtype>Ns...</paramtype></parameter><purpose>Returns a lower-dimensional histogram, summing over removed axes. </purpose><description><para>Arguments are the source histogram and compile-time numbers, the remaining indices of the axes. Returns a new histogram which only contains the subset of axes. The source histogram is summed over the removed axes. </para></description></function><function id="doxygen.project_8hpp_1a96b487faea4c6073997413aef8df4f01" name="project"><type>auto</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /><template-type-parameter name="Iterable" /></template><parameter name="h"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype></parameter><parameter name="c"><paramtype>const Iterable &amp;</paramtype></parameter><purpose>Returns a lower-dimensional histogram, summing over removed axes. </purpose><description><para>This version accepts a source histogram and an iterable range containing the remaining indices. </para></description></function></namespace></namespace></namespace></header><header id="doxygen.reduce_8hpp" name="boost/histogram/algorithm/reduce.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="algorithm">
<function id="doxygen.reduce_8hpp_1a586bfdace7c7648615a77a9d67ab3f78" name="crop"><type>reduce_command</type><parameter name="iaxis"><paramtype>unsigned</paramtype><description><para>which axis to operate on. </para></description></parameter><parameter name="lower"><paramtype>double</paramtype><description><para>bin which contains lower is first to be kept. </para></description></parameter><parameter name="upper"><paramtype>double</paramtype><description><para>bin which contains upper is last to be kept, except if upper is equal to the lower edge. </para></description></parameter><purpose>Crop command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to axis with given index.</para><para>Works like <computeroutput>shrink</computeroutput> (see shrink documentation for details), but counts in removed bins are always discarded, whether underflow and overflow bins are present or not.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a461c4933dc4aa4f163eda4f1abbe2896" name="crop"><type>reduce_command</type><parameter name="lower"><paramtype>double</paramtype><description><para>bin which contains lower is first to be kept. </para></description></parameter><parameter name="upper"><paramtype>double</paramtype><description><para>bin which contains upper is last to be kept, except if upper is equal to the lower edge. </para></description></parameter><purpose>Crop command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to corresponding axis in order of reduce arguments.</para><para>Works like <computeroutput>shrink</computeroutput> (see shrink documentation for details), but counts in removed bins are discarded, whether underflow and overflow bins are present or not. If the cropped range goes beyond the axis range, then the content of the underflow or overflow bin which overlaps with the range is kept.</para><para>If the counts in an existing underflow or overflow bin are discared by the crop, the corresponding memory cells are not physically removed. Only their contents are set to zero. This technical limitation may be lifted in the future, then crop may completely remove the cropped memory cells.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a2aa3ca6a8eb73c1590447c15f21ea0e0" name="crop_and_rebin"><type>reduce_command</type><parameter name="iaxis"><paramtype>unsigned</paramtype><description><para>which axis to operate on. </para></description></parameter><parameter name="lower"><paramtype>double</paramtype><description><para>lowest bound that should be kept. </para></description></parameter><parameter name="upper"><paramtype>double</paramtype><description><para>highest bound that should be kept. If upper is inside bin interval, the whole interval is removed. </para></description></parameter><parameter name="merge"><paramtype>unsigned</paramtype><description><para>how many adjacent bins to merge into one. </para></description></parameter><purpose>Crop and rebin command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to axis with given index.</para><para>To <computeroutput>crop</computeroutput> and<computeroutput>rebin</computeroutput> in one command (see the respective commands for more details). Equivalent to passing both commands for the same axis to<computeroutput>reduce</computeroutput>.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1ab9b342670e5cc4a547421fcb27010b1d" name="crop_and_rebin"><type>reduce_command</type><parameter name="lower"><paramtype>double</paramtype><description><para>lowest bound that should be kept. </para></description></parameter><parameter name="upper"><paramtype>double</paramtype><description><para>highest bound that should be kept. If upper is inside bin interval, the whole interval is removed. </para></description></parameter><parameter name="merge"><paramtype>unsigned</paramtype><description><para>how many adjacent bins to merge into one. </para></description></parameter><purpose>Crop and rebin command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to corresponding axis in order of reduce arguments.</para><para>To <computeroutput>crop</computeroutput> and<computeroutput>rebin</computeroutput> in one command (see the respective commands for more details). Equivalent to passing both commands for the same axis to<computeroutput>reduce</computeroutput>.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1adbf88d6656efbfa1ed90ac4942050984" name="rebin"><type>reduce_command</type><parameter name="iaxis"><paramtype>unsigned</paramtype><description><para>which axis to operate on. </para></description></parameter><parameter name="merge"><paramtype>unsigned</paramtype><description><para>how many adjacent bins to merge into one. </para></description></parameter><purpose>Rebin command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to axis with given index.</para><para>The command merges N adjacent bins into one. This makes the axis coarser and the bins wider. The original number of bins is divided by N. If there is a rest to this devision, the axis is implicitly shrunk at the upper end by that rest.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1aaca90aaaf0d7c1096a94a8276d7410a9" name="rebin"><type>reduce_command</type><parameter name="merge"><paramtype>unsigned</paramtype><description><para>how many adjacent bins to merge into one. </para></description></parameter><purpose>Rebin command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to corresponding axis in order of reduce arguments.</para><para>The command merges N adjacent bins into one. This makes the axis coarser and the bins wider. The original number of bins is divided by N. If there is a rest to this devision, the axis is implicitly shrunk at the upper end by that rest.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a161e9205c4197adfebb2965437ecb248" name="reduce"><type>Histogram</type><template>
          <template-type-parameter name="Histogram" /><template-type-parameter name="Iterable" /></template><parameter name="hist"><paramtype>const Histogram &amp;</paramtype><description><para>original histogram. </para></description></parameter><parameter name="options"><paramtype>const Iterable &amp;</paramtype><description><para>iterable sequence of reduce commands: <computeroutput>shrink</computeroutput>,<computeroutput>slice</computeroutput>,<computeroutput>rebin</computeroutput>,<computeroutput>shrink_and_rebin</computeroutput>, or<computeroutput>slice_and_rebin</computeroutput>. The element type of the iterable should be<computeroutput>reduce_command</computeroutput>.</para></description></parameter><purpose>Shrink, crop, slice, and/or rebin axes of a histogram. </purpose><description><para>Returns a new reduced histogram and leaves the original histogram untouched.</para><para>The commands <computeroutput>rebin</computeroutput> and<computeroutput>shrink</computeroutput> or<computeroutput>slice</computeroutput> for the same axis are automatically combined, this is not an error. Passing a<computeroutput>shrink</computeroutput> and a<computeroutput>slice</computeroutput> command for the same axis or two<computeroutput>rebin</computeroutput> commands triggers an<computeroutput>invalid_argument</computeroutput> exception. Trying to reducing a non-reducible axis triggers an<computeroutput>invalid_argument</computeroutput> exception. Histograms with non-reducible axes can still be reduced along the other axes that are reducible.</para><para>An overload allows one to pass reduce_command as positional arguments.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a4f27b22085d08ceb9c69c8337c4e0203" name="reduce"><type>Histogram</type><template>
          <template-type-parameter name="Histogram" /><template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><parameter name="hist"><paramtype>const Histogram &amp;</paramtype><description><para>original histogram. </para></description></parameter><parameter name="opt"><paramtype>const reduce_command &amp;</paramtype><description><para>first reduce command; one of <computeroutput>shrink</computeroutput>,<computeroutput>slice</computeroutput>,<computeroutput>rebin</computeroutput>,<computeroutput>shrink_and_rebin</computeroutput>, or<computeroutput>slice_or_rebin</computeroutput>.</para></description></parameter><parameter name="opts"><paramtype>const Ts &amp;...</paramtype><description><para>more reduce commands. </para></description></parameter><purpose>Shrink, slice, and/or rebin axes of a histogram. </purpose><description><para>Returns a new reduced histogram and leaves the original histogram untouched.</para><para>The commands <computeroutput>rebin</computeroutput> and<computeroutput>shrink</computeroutput> or<computeroutput>slice</computeroutput> for the same axis are automatically combined, this is not an error. Passing a<computeroutput>shrink</computeroutput> and a<computeroutput>slice</computeroutput> command for the same axis or two<computeroutput>rebin</computeroutput> commands triggers an invalid_argument exception. It is safe to reduce histograms with some axis that are not reducible along the other axes. Trying to reducing a non-reducible axis triggers an invalid_argument exception.</para><para>An overload allows one to pass an iterable of reduce_command.</para><para>
</para></description></function><typedef id="doxygen.reduce_8hpp_1a44cf4430a6d397b9db89fe2373e24d22" name="reduce_command"><purpose>Holder for a reduce command. </purpose><description><para>Use this type to store reduce commands in a container. The internals of this type are an implementation detail. </para></description><type><emphasis>unspecified</emphasis></type></typedef><function id="doxygen.reduce_8hpp_1a5d449c1f0dac72332f2189afbc9531ad" name="shrink"><type>reduce_command</type><parameter name="iaxis"><paramtype>unsigned</paramtype><description><para>which axis to operate on. </para></description></parameter><parameter name="lower"><paramtype>double</paramtype><description><para>bin which contains lower is first to be kept. </para></description></parameter><parameter name="upper"><paramtype>double</paramtype><description><para>bin which contains upper is last to be kept, except if upper is equal to the lower edge. </para></description></parameter><purpose>Shrink command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to axis with given index.</para><para>Shrinking is based on an inclusive value interval. The bin which contains the first value starts the range of bins to keep. The bin which contains the second value is the last included in that range. When the second value is exactly equal to a lower bin edge, then the previous bin is the last in the range.</para><para>The counts in removed bins are added to the corresponding underflow and overflow bins, if they are present. If they are not present, the counts are discarded. Also see <computeroutput>crop</computeroutput>, which always discards the counts.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a7e8cf0a12c0fd6b91f03031b8f6c4275" name="shrink"><type>reduce_command</type><parameter name="lower"><paramtype>double</paramtype><description><para>bin which contains lower is first to be kept. </para></description></parameter><parameter name="upper"><paramtype>double</paramtype><description><para>bin which contains upper is last to be kept, except if upper is equal to the lower edge. </para></description></parameter><purpose>Shrink command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to corresponding axis in order of reduce arguments.</para><para>Shrinking is based on an inclusive value interval. The bin which contains the first value starts the range of bins to keep. The bin which contains the second value is the last included in that range. When the second value is exactly equal to a lower bin edge, then the previous bin is the last in the range.</para><para>The counts in removed bins are added to the corresponding underflow and overflow bins, if they are present. If they are not present, the counts are discarded. Also see <computeroutput>crop</computeroutput>, which always discards the counts.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1aeb067e6d4d445e2bee8237136ae4b717" name="shrink_and_rebin"><type>reduce_command</type><parameter name="iaxis"><paramtype>unsigned</paramtype><description><para>which axis to operate on. </para></description></parameter><parameter name="lower"><paramtype>double</paramtype><description><para>lowest bound that should be kept. </para></description></parameter><parameter name="upper"><paramtype>double</paramtype><description><para>highest bound that should be kept. If upper is inside bin interval, the whole interval is removed. </para></description></parameter><parameter name="merge"><paramtype>unsigned</paramtype><description><para>how many adjacent bins to merge into one. </para></description></parameter><purpose>Shrink and rebin command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to corresponding axis in order of reduce arguments.</para><para>To shrink(unsigned, double, double) and rebin(unsigned, unsigned) in one command (see the respective commands for more details). Equivalent to passing both commands for the same axis to <computeroutput>reduce</computeroutput>.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a2213aa80f58d2f333aeaa9d7aba4d830" name="shrink_and_rebin"><type>reduce_command</type><parameter name="lower"><paramtype>double</paramtype><description><para>lowest bound that should be kept. </para></description></parameter><parameter name="upper"><paramtype>double</paramtype><description><para>highest bound that should be kept. If upper is inside bin interval, the whole interval is removed. </para></description></parameter><parameter name="merge"><paramtype>unsigned</paramtype><description><para>how many adjacent bins to merge into one. </para></description></parameter><purpose>Shrink and rebin command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to corresponding axis in order of reduce arguments.</para><para>To <computeroutput>shrink</computeroutput> and<computeroutput>rebin</computeroutput> in one command (see the respective commands for more details). Equivalent to passing both commands for the same axis to<computeroutput>reduce</computeroutput>.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1af10b86ed3e81d12a5ff1a0785f2a8072" name="slice"><type>reduce_command</type><parameter name="iaxis"><paramtype>unsigned</paramtype><description><para>which axis to operate on. </para></description></parameter><parameter name="begin"><paramtype>axis::index_type</paramtype><description><para>first index that should be kept. </para></description></parameter><parameter name="end"><paramtype>axis::index_type</paramtype><description><para>one past the last index that should be kept. </para></description></parameter><parameter name="mode"><paramtype>slice_mode</paramtype><default>slice_mode::shrink</default><description><para>whether to behave like <computeroutput>shrink</computeroutput> or<computeroutput>crop</computeroutput> regarding removed bins.</para></description></parameter><purpose>Slice command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to axis with given index.</para><para>Slicing works like <computeroutput>shrink</computeroutput> or<computeroutput>crop</computeroutput>, but uses bin indices instead of values.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a42a5e5a5f56613186e6f87319ef2e8c0" name="slice"><type>reduce_command</type><parameter name="begin"><paramtype>axis::index_type</paramtype><description><para>first index that should be kept. </para></description></parameter><parameter name="end"><paramtype>axis::index_type</paramtype><description><para>one past the last index that should be kept. </para></description></parameter><parameter name="mode"><paramtype>slice_mode</paramtype><default>slice_mode::shrink</default><description><para>whether to behave like <computeroutput>shrink</computeroutput> or<computeroutput>crop</computeroutput> regarding removed bins.</para></description></parameter><purpose>Slice command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to corresponding axis in order of reduce arguments.</para><para>Slicing works like <computeroutput>shrink</computeroutput> or<computeroutput>crop</computeroutput>, but uses bin indices instead of values.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a4df35a2a95c7210fe48e497dacefd2a2" name="slice_and_rebin"><type>reduce_command</type><parameter name="iaxis"><paramtype>unsigned</paramtype><description><para>which axis to operate on. </para></description></parameter><parameter name="begin"><paramtype>axis::index_type</paramtype><description><para>first index that should be kept. </para></description></parameter><parameter name="end"><paramtype>axis::index_type</paramtype><description><para>one past the last index that should be kept. </para></description></parameter><parameter name="merge"><paramtype>unsigned</paramtype><description><para>how many adjacent bins to merge into one. </para></description></parameter><parameter name="mode"><paramtype>slice_mode</paramtype><default>slice_mode::shrink</default><description><para>slice mode, see slice_mode. </para></description></parameter><purpose>Slice and rebin command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to axis with given index.</para><para>To <computeroutput>slice</computeroutput> and<computeroutput>rebin</computeroutput> in one command (see the respective commands for more details). Equivalent to passing both commands for the same axis to<computeroutput>reduce</computeroutput>.</para><para>
</para></description></function><function id="doxygen.reduce_8hpp_1a9216f0ba710d80f51d1a17b9d7dc4282" name="slice_and_rebin"><type>reduce_command</type><parameter name="begin"><paramtype>axis::index_type</paramtype><description><para>first index that should be kept. </para></description></parameter><parameter name="end"><paramtype>axis::index_type</paramtype><description><para>one past the last index that should be kept. </para></description></parameter><parameter name="merge"><paramtype>unsigned</paramtype><description><para>how many adjacent bins to merge into one. </para></description></parameter><parameter name="mode"><paramtype>slice_mode</paramtype><default>slice_mode::shrink</default><description><para>slice mode, see slice_mode. </para></description></parameter><purpose>Slice and rebin command to be used in <computeroutput>reduce</computeroutput>.</purpose><description><para>Command is applied to corresponding axis in order of reduce arguments.</para><para>To <computeroutput>slice</computeroutput> and<computeroutput>rebin</computeroutput> in one command (see the respective commands for more details). Equivalent to passing both commands for the same axis to<computeroutput>reduce</computeroutput>.</para><para>
</para></description></function><enum id="doxygen.reduce_8hpp_1a71c2df3fd5222ccc79d2fe6f5251bb6e" name="slice_mode"><enumvalue id="doxygen.reduce_8hpp_1a71c2df3fd5222ccc79d2fe6f5251bb6ea91808da94826016395b10b662ed4363b" name="shrink" /><enumvalue id="doxygen.reduce_8hpp_1a71c2df3fd5222ccc79d2fe6f5251bb6eaa634e7960e04b1633c103382004fe526" name="crop" /><purpose>Whether to behave like <computeroutput>shrink</computeroutput> or<computeroutput>crop</computeroutput> regarding removed bins.</purpose></enum></namespace></namespace></namespace></header><header id="doxygen.algorithm_2sum_8hpp" name="boost/histogram/algorithm/sum.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="algorithm">
<function id="doxygen.algorithm_2sum_8hpp_1afbd600acba73a057226b9bcc1ff5280b" name="sum"><type>auto</type><template>
          <template-type-parameter name="A" /><template-type-parameter name="S" /></template><parameter name="hist"><paramtype>const <classname>histogram</classname>&lt; A, S &gt; &amp;</paramtype><description><para>Const reference to the histogram. </para></description></parameter><parameter name="cov"><paramtype>const coverage</paramtype><default>coverage::all</default><description><para>Iterate over all or only inner bins (optional, default: all). </para></description></parameter><purpose>Compute the sum over all histogram cells (underflow/overflow included by default). </purpose><description><para>The implementation favors accuracy and protection against overflow over speed. If the value type of the histogram is an integral or floating point type, accumulators::sum&lt;double&gt; is used to compute the sum, else the original value type is used. Compilation fails, if the value type does not support operator+=. The return type is double if the value type of the histogram is integral or floating point, and the original value type otherwise.</para><para>If you need a different trade-off, you can write your own loop or use <computeroutput>std::accumulate</computeroutput>:<programlisting language="c++">// iterate over all bins
auto sum_all = std::accumulate(hist.begin(), hist.end(), 0.0);

// skip underflow/overflow bins
double sum = 0;
for (auto&amp;&amp; x : indexed(hist))
  sum += *x; // dereference accessor

// or:
// auto ind = boost::histogram::indexed(hist);
// auto sum = std::accumulate(ind.begin(), ind.end(), 0.0);
</programlisting></para><para>

</para></description><returns><para>accumulator type or double</para></returns></function></namespace></namespace></namespace></header><header id="doxygen.boolean_8hpp" name="boost/histogram/axis/boolean.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean" name="boolean"><template>
      <template-type-parameter name="MetaData"><purpose><para>type to store meta data. </para></purpose></template-type-parameter></template><inherit access="public">boost::histogram::axis::iterator_mixin&lt; boolean&lt; MetaData &gt; &gt;</inherit><inherit access="public">metadata_base_t&lt; MetaData &gt;</inherit><purpose>Discrete axis for boolean data. </purpose><description><para>Binning is a pass-though operation with zero cost, making this the fastest possible axis. The axis has no internal state apart from the optional metadata state. The axis has no under- and overflow bins. It cannot grow and cannot be reduced.</para><para>
</para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1a02a2a5b4c9bc317a0476343af4fb4cb1" specifiers="explicit"><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis.</para></description></parameter><purpose>Construct a boolean axis. </purpose><description><para>
The constructor is nothrow if meta is nothrow move constructible. </para></description></constructor><method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1ac3eb3966a721a406292028f9ef64dd36" name="index" cv="const noexcept"><type>index_type</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Return index for value argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1a0effed709188d3632f9d1b40833f302f" name="value" cv="const noexcept"><type>value_type</type><parameter name="i"><paramtype>index_type</paramtype></parameter><purpose>Return value for index argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1acd73ddf584d7a5805d1b6049628a668d" name="bin" cv="const noexcept"><type>value_type</type><parameter name="i"><paramtype>index_type</paramtype></parameter><purpose>Return bin for index argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1accae44ff4682339eab2dda5ffa9a66e6" name="size" cv="const noexcept"><type>index_type</type><purpose>Returns the number of bins, without over- or underflow. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1acbaed3f78e78f115256952a4941b23ca" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="M" /></template><parameter name="o"><paramtype>const <classname>boolean</classname>&lt; M &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1a2b5d6f702d2e79184a27fd489a40db38" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="M" /></template><parameter name="o"><paramtype>const <classname>boolean</classname>&lt; M &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1a376b3914c8251d8a58ae069456470e8b" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group><method-group name="public static functions">
<method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1aab5db55c402d7debdc5fd095cdd16a1b" name="inclusive" cv="noexcept" specifiers="static"><type>bool</type><purpose>Whether the axis is inclusive (see <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__inclusive">axis::traits::is_inclusive</link>).</purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1boolean_1adaf3214baf3c0352ec2e0161afbe3d4f" name="options" cv="noexcept" specifiers="static"><type>unsigned</type><purpose>Returns the options. </purpose></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.category_8hpp" name="boost/histogram/axis/category.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1category" name="category"><template>
      <template-type-parameter name="Value"><purpose><para>input value type, must be equal-comparable. </para></purpose></template-type-parameter><template-type-parameter name="MetaData"><purpose><para>type to store meta data. </para></purpose></template-type-parameter><template-type-parameter name="Options"><purpose><para>see boost::histogram::axis::option. </para></purpose></template-type-parameter><template-type-parameter name="Allocator"><purpose><para>allocator to use for dynamic memory management.</para></purpose></template-type-parameter></template><inherit access="public">boost::histogram::axis::iterator_mixin&lt; category&lt; Value, MetaData, Options, Allocator &gt; &gt;</inherit><inherit access="public">metadata_base_t&lt; MetaData &gt;</inherit><purpose>Maps at a set of unique values to bin indices. </purpose><description><para>The axis maps a set of values to bins, following the order of arguments in the constructor. The optional overflow bin for this axis counts input values that are not part of the set. Binning has O(N) complexity, but with a very small factor. For small N (the typical use case) it beats other kinds of lookup.</para><para>
The options <computeroutput>underflow</computeroutput> and<computeroutput>circular</computeroutput> are not allowed. The options<computeroutput>growth</computeroutput> and<computeroutput>overflow</computeroutput> are mutually exclusive.</para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a39c74b5a321287669a47224471aebd25" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a995f84d5748bf21d9c6c36dd4930d36b" specifiers="explicit"><parameter name="alloc"><paramtype>allocator_type</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a3284380ee8fbd79a01226988943e6fa0"><template>
          <template-type-parameter name="It" /></template><parameter name="begin"><paramtype>It</paramtype><description><para>begin of category range of unique values. </para></description></parameter><parameter name="end"><paramtype>It</paramtype><description><para>end of category range of unique values. </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional). </para></description></parameter><parameter name="alloc"><paramtype>allocator_type</paramtype><default>{}</default><description><para>allocator instance to use (optional).</para></description></parameter><purpose>Construct from forward iterator range of unique values. </purpose><description><para>
The constructor throws <computeroutput>std::invalid_argument</computeroutput> if iterator range is invalid. If the range contains duplicated values, the behavior of the axis is undefined.</para><para>The arguments meta and alloc are passed by value. If you move either of them into the axis and the constructor throws, their values are lost. Do not move if you cannot guarantee that the bin description is not valid. </para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1af7b969643704e949198438b90852c19b"><template>
          <template-type-parameter name="It" /><template-type-parameter name="A" /></template><parameter name="begin"><paramtype>It</paramtype></parameter><parameter name="end"><paramtype>It</paramtype></parameter><parameter name="meta"><paramtype>metadata_type</paramtype></parameter><parameter name="alloc"><paramtype>A</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a06d64102ab588d86a21184596ea0baf6"><template>
          <template-type-parameter name="C" /></template><parameter name="iterable"><paramtype>const C &amp;</paramtype><description><para>sequence of unique values. </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis. </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional). </para></description></parameter><parameter name="alloc"><paramtype>allocator_type</paramtype><default>{}</default><description><para>allocator instance to use. </para></description></parameter><purpose>Construct axis from iterable sequence of unique values. </purpose><description><para>
</para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a98e16f905a8c35bc1b542f7854324d00"><template>
          <template-type-parameter name="C" /><template-type-parameter name="A" /></template><parameter name="iterable"><paramtype>const C &amp;</paramtype></parameter><parameter name="meta"><paramtype>metadata_type</paramtype></parameter><parameter name="alloc"><paramtype>A</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a92c963fd8a69539cf65a9d343cd017c0"><template>
          <template-type-parameter name="U" /></template><parameter name="list"><paramtype>std::initializer_list&lt; U &gt;</paramtype><description><para><computeroutput>std::initializer_list</computeroutput> of unique values.</para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis. </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional). </para></description></parameter><parameter name="alloc"><paramtype>allocator_type</paramtype><default>{}</default><description><para>allocator instance to use. </para></description></parameter><purpose>Construct axis from an initializer list of unique values. </purpose><description><para>
</para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1ac16b83d62a2de0a6a0351ef75e68ad28"><template>
          <template-type-parameter name="U" /><template-type-parameter name="A" /></template><parameter name="list"><paramtype>std::initializer_list&lt; U &gt;</paramtype></parameter><parameter name="meta"><paramtype>metadata_type</paramtype></parameter><parameter name="alloc"><paramtype>A</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a2e6f003713af14f95cd8be619533230d"><parameter name="src"><paramtype>const <classname>category</classname> &amp;</paramtype></parameter><parameter name="begin"><paramtype>index_type</paramtype></parameter><parameter name="end"><paramtype>index_type</paramtype></parameter><parameter name="merge"><paramtype>unsigned</paramtype></parameter><purpose>Constructor used by algorithm::reduce to shrink and rebin (not for users). </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a30460b03a5f51b6741961e0029b43e1e" name="index" cv="const noexcept"><type>index_type</type><parameter name="x"><paramtype>const value_type &amp;</paramtype></parameter><purpose>Return index for value argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a29459e51914d148034522a8b4ee63b32" name="update"><type>std::pair&lt; index_type, index_type &gt;</type><parameter name="x"><paramtype>const value_type &amp;</paramtype></parameter><purpose>Returns index and shift (if axis has grown) for the passed argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a23472115723bd6dcdedf2af182f13d7c" name="value" cv="const"><type>std::conditional_t&lt; std::is_scalar&lt; value_type &gt;::value, value_type, const value_type &amp; &gt;</type><parameter name="idx"><paramtype>index_type</paramtype></parameter><purpose>Return value for index argument. </purpose><description><para>Throws <computeroutput>std::out_of_range</computeroutput> if the index is out of bounds.</para></description></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1ad97cdc32770a30b26bfd7c08db87db08" name="bin" cv="const"><type>decltype(auto)</type><parameter name="idx"><paramtype>index_type</paramtype></parameter><purpose>Return value for index argument; alias for value(...). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a6be3ebcf5c6be2de767effdb4f653b75" name="size" cv="const noexcept"><type>index_type</type><purpose>Returns the number of bins, without over- or underflow. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1ae1c9b2c199c126ce67a106a7777746d4" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="V" /><template-type-parameter name="M" /><template-type-parameter name="O" /><template-type-parameter name="A" /></template><parameter name="o"><paramtype>const <classname>category</classname>&lt; V, M, O, A &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a71e2144edac5507be3b2740a3c72ff77" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="V" /><template-type-parameter name="M" /><template-type-parameter name="O" /><template-type-parameter name="A" /></template><parameter name="o"><paramtype>const <classname>category</classname>&lt; V, M, O, A &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a066f786563d00d757e5bbc70e90241a2" name="get_allocator" cv="const"><type>allocator_type</type></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1aefe1fb9e496569437b1fd788b802ad47" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group><method-group name="public static functions">
<method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a0a315e1d985f1d016589140c0cee73ef" name="options" cv="noexcept" specifiers="static"><type>unsigned</type><purpose>Returns the options. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a951cf83c2510132f26c55478ed76083f" name="inclusive" cv="noexcept" specifiers="static"><type>bool</type><purpose>Whether the axis is inclusive (see <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__inclusive">axis::traits::is_inclusive</link>).</purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1category_1a5b72b4d5bccf2adeeedc2d6b561cdd80" name="ordered" cv="noexcept" specifiers="static"><type>bool</type><purpose>Indicate that the axis is not ordered. </purpose></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.integer_8hpp" name="boost/histogram/axis/integer.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1integer" name="integer"><template>
      <template-type-parameter name="Value"><purpose><para>input value type. Must be integer or floating point. </para></purpose></template-type-parameter><template-type-parameter name="MetaData"><purpose><para>type to store meta data. </para></purpose></template-type-parameter><template-type-parameter name="Options"><purpose><para>see boost::histogram::axis::option. </para></purpose></template-type-parameter></template><inherit access="public">boost::histogram::axis::iterator_mixin&lt; integer&lt; Value, MetaData, Options &gt; &gt;</inherit><inherit access="public">metadata_base_t&lt; MetaData &gt;</inherit><purpose>Axis for an interval of integer values with unit steps. </purpose><description><para>Binning is a O(1) operation. This axis bins even faster than a regular axis.</para><para>The options <computeroutput>growth</computeroutput> and<computeroutput>circular</computeroutput> are mutually exclusive. If the axis uses integers and either<computeroutput>growth</computeroutput> or<computeroutput>circular</computeroutput> are set, the axis cannot have the options<computeroutput>underflow</computeroutput> or<computeroutput>overflow</computeroutput> set.</para><para>
</para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a6444d72203629dc0d6b3ade58a4741f9" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a0a9fa6e4c0107a02709137d014268eb9"><parameter name="start"><paramtype>value_type</paramtype><description><para>first integer of covered range. </para></description></parameter><parameter name="stop"><paramtype>value_type</paramtype><description><para>one past last integer of covered range. </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional).</para></description></parameter><purpose>Construct over semi-open integer interval [start, stop). </purpose><description><para>
The constructor throws <computeroutput>std::invalid_argument</computeroutput> if start is not less than stop.</para><para>The arguments meta and alloc are passed by value. If you move either of them into the axis and the constructor throws, their values are lost. Do not move if you cannot guarantee that the bin description is not valid. </para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a8472a8f2f420ba5595d8b9fb7aa7e78a"><parameter name="src"><paramtype>const <classname>integer</classname> &amp;</paramtype></parameter><parameter name="begin"><paramtype>index_type</paramtype></parameter><parameter name="end"><paramtype>index_type</paramtype></parameter><parameter name="merge"><paramtype>unsigned</paramtype></parameter><purpose>Constructor used by algorithm::reduce to shrink and rebin. </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a90c490f836129e48a9772f2ed3351644" name="index" cv="const noexcept"><type>index_type</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Return index for value argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1ac288dac6d855a4253420e615b1ba4704" name="update" cv="noexcept"><type>auto</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Returns index and shift (if axis has grown) for the passed argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1adef943adee48642dba65444093375b0e" name="value" cv="const noexcept"><type>value_type</type><parameter name="i"><paramtype>local_index_type</paramtype></parameter><purpose>Return value for index argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1ab9786d5339dac907428c119fea787be5" name="bin" cv="const noexcept"><type>decltype(auto)</type><parameter name="idx"><paramtype>index_type</paramtype></parameter><purpose>Return bin for index argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a6b6384d80e908b51bdba711a83e0e086" name="size" cv="const noexcept"><type>index_type</type><purpose>Returns the number of bins, without over- or underflow. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a2df795802f42a83108d4b1829020f9cc" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="V" /><template-type-parameter name="M" /><template-type-parameter name="O" /></template><parameter name="o"><paramtype>const <classname>integer</classname>&lt; V, M, O &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a4966ab2ef886377799b203b1431a2e3d" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="V" /><template-type-parameter name="M" /><template-type-parameter name="O" /></template><parameter name="o"><paramtype>const <classname>integer</classname>&lt; V, M, O &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a30073bebec015660f4d90e43b4b4b60d" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group><method-group name="public static functions">
<method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a3548a2e7489ae5869dfc2b354a1c7831" name="options" cv="noexcept" specifiers="static"><type>unsigned</type><purpose>Returns the options. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1integer_1a46c0aca0f19e1532da73bafef4f09846" name="inclusive" cv="noexcept" specifiers="static"><type>bool</type><purpose>Whether the axis is inclusive (see <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__inclusive">axis::traits::is_inclusive</link>).</purpose></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.interval__view_8hpp" name="boost/histogram/axis/interval_view.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view" name="interval_view"><template>
      <template-type-parameter name="Axis" /></template><purpose>Lightweight bin view. </purpose><description><para>Represents the current bin interval. </para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view_1a30453b7034e0ba0643fe7acead135a9e"><parameter name="axis"><paramtype>const Axis &amp;</paramtype></parameter><parameter name="idx"><paramtype>index_type</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view_1a1f7f2ea0a96da96e9d3b8eb7489e95ee" cv="= delete"><parameter name="axis"><paramtype>Axis &amp;&amp;</paramtype></parameter><parameter name="idx"><paramtype>index_type</paramtype></parameter></constructor><method id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view_1a6356c7df3392727cba000ce1ee2eaf17" name="lower" cv="const noexcept"><type>decltype(auto)</type><purpose>Return lower edge of bin. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view_1ab367a020460a6d3503ca057e9d0621a4" name="upper" cv="const noexcept"><type>decltype(auto)</type><purpose>Return upper edge of bin. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view_1ad1284f35de6c58fbc00e30a6543c4489" name="center" cv="const noexcept"><type>decltype(auto)</type><purpose>Return center of bin. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view_1af6d53d6028f9236b61b89341c2788beb" name="width" cv="const noexcept"><type>decltype(auto)</type><purpose>Return width of bin. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view_1a428bc90000d65e20395bbe0a315d91d1" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="BinType" /></template><parameter name="rhs"><paramtype>const BinType &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view_1ace6526ce5da681f3dbeabf024cff613f" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="BinType" /></template><parameter name="rhs"><paramtype>const BinType &amp;</paramtype></parameter></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.iterator_8hpp" name="boost/histogram/axis/iterator.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1iterator__mixin" name="iterator_mixin"><template>
      <template-type-parameter name="Derived" /></template><purpose>Uses CRTP to inject iterator logic into Derived. </purpose><typedef id="doxygen.classboost_1_1histogram_1_1axis_1_1iterator__mixin_1aa0e1024e8cddf34edc49d0937e578b16" name="const_iterator"><type>iterator&lt; Derived &gt;</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1axis_1_1iterator__mixin_1a4dc359d6fec5b160422f47c979eee813" name="const_reverse_iterator"><type>std::reverse_iterator&lt; const_iterator &gt;</type></typedef><method-group name="public member functions">
<method id="doxygen.classboost_1_1histogram_1_1axis_1_1iterator__mixin_1a1d971919b05cab2d0bbf795ec91c87f3" name="begin" cv="const noexcept"><type>const_iterator</type><purpose>Bin iterator to beginning of the axis (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1iterator__mixin_1a4c6defb3db02edc73f27046722b013f2" name="end" cv="const noexcept"><type>const_iterator</type><purpose>Bin iterator to the end of the axis (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1iterator__mixin_1a5f68c5e028f78e3532a589f74b839d3e" name="rbegin" cv="const noexcept"><type>const_reverse_iterator</type><purpose>Reverse bin iterator to the last entry of the axis (read-only). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1iterator__mixin_1adcf7573ef0f0641e3e2780a1217425cf" name="rend" cv="const noexcept"><type>const_reverse_iterator</type><purpose>Reverse bin iterator to the end (read-only). </purpose></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.metadata__base_8hpp" name="boost/histogram/axis/metadata_base.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base" name="metadata_base"><template>
      <template-type-parameter name="Metadata"><purpose><para>Wrapped meta data type. </para></purpose></template-type-parameter></template><purpose>Meta data holder with space optimization for empty meta data types. </purpose><description><para>Allows write-access to metadata even if const.</para><para>
</para></description><method-group name="protected member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base_1aae6770084017be8d01ea795c7ca44fb0" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base_1a8b21b0095fc8a53a5461ae96630dbc22" cv="= default"><parameter name=""><paramtype>const <classname>metadata_base</classname> &amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base_1aaa651edc1bea514834fc4fb9880b9719" cv="= default"><type><classname>metadata_base</classname> &amp;</type><parameter name=""><paramtype>const <classname>metadata_base</classname> &amp;</paramtype></parameter></copy-assignment><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base_1a82d5d4909cec6265edc0e03b9a8176dc" cv="noexcept"><parameter name="o"><paramtype><classname>metadata_base</classname> &amp;&amp;</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base_1ab92482525610b37d6b84a8a458473b52" cv="noexcept"><parameter name="o"><paramtype>metadata_type &amp;&amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base_1aa5c4209f450b9b80eed5f6c81473e634" cv="noexcept"><type><classname>metadata_base</classname> &amp;</type><parameter name="o"><paramtype><classname>metadata_base</classname> &amp;&amp;</paramtype></parameter></copy-assignment></method-group><method-group name="public member functions">
<method id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base_1a2310ad805cf0e94934c55eb5c79e0db4" name="metadata" cv="noexcept"><type>metadata_type &amp;</type><purpose>Returns reference to metadata. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1metadata__base_1a3db83b23921df650774ca288f8c73f52" name="metadata" cv="const noexcept"><type>metadata_type &amp;</type><purpose>Returns reference to mutable metadata from const axis. </purpose></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.option_8hpp" name="boost/histogram/axis/option.hpp">
<para>Options for builtin axis types. </para><para>Options <computeroutput>circular</computeroutput> and<computeroutput>growth</computeroutput> are mutually exclusive. Options<computeroutput>circular</computeroutput> and<computeroutput>underflow</computeroutput> are mutually exclusive.</para><namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<namespace name="option">
<struct id="doxygen.structboost_1_1histogram_1_1axis_1_1option_1_1bit" name="bit"><template>
      <template-nontype-parameter name="Pos"><type>unsigned</type><purpose><para>position of the bit in the set. </para></purpose></template-nontype-parameter></template><purpose>Single option flag. </purpose><description><para>
</para></description></struct><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1option_1_1bitset" name="bitset"><template>
      <template-nontype-parameter name="Bits"><type>unsigned</type></template-nontype-parameter></template><inherit access="public">std::integral_constant&lt; unsigned, Bits &gt;</inherit><purpose>Holder of axis options. </purpose><method-group name="public static functions">
<method id="doxygen.structboost_1_1histogram_1_1axis_1_1option_1_1bitset_1a78b126bbf20747c7fbb3cd40df9e088e" name="test" specifiers="static"><type>auto</type><template>
          <template-nontype-parameter name="B"><type>unsigned</type></template-nontype-parameter></template><parameter name=""><paramtype><classname>bitset</classname>&lt; B &gt;</paramtype></parameter><purpose>Returns true if all option flags in the argument are set and false otherwise. </purpose></method></method-group></struct><data-member id="doxygen.option_8hpp_1ab165a9b43e66aa29ba86702a85c352e5" name="circular"><type>circular_t</type><purpose>Instance of <computeroutput>circular_t</computeroutput>.</purpose></data-member><typedef id="doxygen.option_8hpp_1a372e8b40fe1233eb04b05ec50049ea1a" name="circular_t"><purpose>Axis is circular. Mutually exclusive with <computeroutput>growth</computeroutput> and<computeroutput>underflow</computeroutput>.</purpose><type><classname>bit</classname>&lt; 2 &gt;</type></typedef><data-member id="doxygen.option_8hpp_1a1b96ce8408202839209b648cd55774bf" name="growth"><type>growth_t</type><purpose>Instance of <computeroutput>growth_t</computeroutput>.</purpose></data-member><typedef id="doxygen.option_8hpp_1ae3ebf8733ed9cc848803f6b4bf7b3c2f" name="growth_t"><purpose>Axis can grow. Mutually exclusive with <computeroutput>circular</computeroutput>.</purpose><type><classname>bit</classname>&lt; 3 &gt;</type></typedef><data-member id="doxygen.option_8hpp_1ac18858a972340f9f5a670b134cbe7587" name="none"><type>none_t</type><purpose>Instance of <computeroutput>none_t</computeroutput>.</purpose></data-member><typedef id="doxygen.option_8hpp_1ae95eb6d114028cd2da70cfdd2f0b4ced" name="none_t"><purpose>All options off. </purpose><type><classname>bitset</classname>&lt; 0 &gt;</type></typedef><function id="doxygen.option_8hpp_1af61479f4e5f061c243854b09a9f1920d" name="operator&amp;"><type>auto</type><template>
          <template-nontype-parameter name="B1"><type>unsigned</type></template-nontype-parameter><template-nontype-parameter name="B2"><type>unsigned</type></template-nontype-parameter></template><parameter name=""><paramtype><classname>bitset</classname>&lt; B1 &gt;</paramtype></parameter><parameter name=""><paramtype><classname>bitset</classname>&lt; B2 &gt;</paramtype></parameter><purpose>Set intersection of the option arguments. </purpose></function><function id="doxygen.option_8hpp_1a1f060d114fddefcf1265e2d2c0fff4dc" name="operator-"><type>auto</type><template>
          <template-nontype-parameter name="B1"><type>unsigned</type></template-nontype-parameter><template-nontype-parameter name="B2"><type>unsigned</type></template-nontype-parameter></template><parameter name=""><paramtype><classname>bitset</classname>&lt; B1 &gt;</paramtype></parameter><parameter name=""><paramtype><classname>bitset</classname>&lt; B2 &gt;</paramtype></parameter><purpose>Set difference of the option arguments. </purpose></function><function id="doxygen.option_8hpp_1a8b8fdea63f93e046071f37bcf0cf7a91" name="operator|"><type>auto</type><template>
          <template-nontype-parameter name="B1"><type>unsigned</type></template-nontype-parameter><template-nontype-parameter name="B2"><type>unsigned</type></template-nontype-parameter></template><parameter name=""><paramtype><classname>bitset</classname>&lt; B1 &gt;</paramtype></parameter><parameter name=""><paramtype><classname>bitset</classname>&lt; B2 &gt;</paramtype></parameter><purpose>Set union of the axis option arguments. </purpose></function><data-member id="doxygen.option_8hpp_1a8c45da01f1e41797d360a24f0f24e3ee" name="overflow"><type>overflow_t</type><purpose>Instance of <computeroutput>overflow_t</computeroutput>.</purpose></data-member><typedef id="doxygen.option_8hpp_1a86c3ec36c5729f11a16f194927fd1331" name="overflow_t"><purpose>Axis has overflow bin. </purpose><type><classname>bit</classname>&lt; 1 &gt;</type></typedef><data-member id="doxygen.option_8hpp_1aec72c6a97716379c1dd0cbf455cd8250" name="underflow"><type>underflow_t</type><purpose>Instance of <computeroutput>underflow_t</computeroutput>.</purpose></data-member><typedef id="doxygen.option_8hpp_1af9269f2e4a14e5751489e7ef6692737e" name="underflow_t"><purpose>Axis has an underflow bin. Mutually exclusive with <computeroutput>circular</computeroutput>.</purpose><type><classname>bit</classname>&lt; 0 &gt;</type></typedef></namespace></namespace></namespace></namespace></header><header id="doxygen.axis_2ostream_8hpp" name="boost/histogram/axis/ostream.hpp">
<para>Simple streaming operators for the builtin axis types. </para><para>The text representation is not guaranteed to be stable between versions of Boost.Histogram. This header is only included by <ulink url="histogram/reference.html#header.boost.histogram.ostream_hpp">boost/histogram/ostream.hpp</ulink>. To use your own, include your own implementation instead of this header and do not include<ulink url="histogram/reference.html#header.boost.histogram.ostream_hpp">boost/histogram/ostream.hpp</ulink>.</para></header><header id="doxygen.polymorphic__bin_8hpp" name="boost/histogram/axis/polymorphic_bin.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin" name="polymorphic_bin"><template>
      <template-type-parameter name="RealType" /></template><purpose>Holds the bin data of an <link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1variant">axis::variant</link>.</purpose><description><para>The interface is a superset of the <link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view">axis::interval_view</link> class. In addition, the object is implicitly convertible to the value type, returning the equivalent of a call to<link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1af6d601913a69f830ffadd20f9dd2b462">lower()</link>. For discrete axes,<link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1af6d601913a69f830ffadd20f9dd2b462">lower()</link> ==<link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a450223d1ab3d880bfd8d2e6cae0e8ad0">upper()</link>, and<link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a7860999094d3992d284e2b5c13163f31">width()</link> returns zero.</para><para>This is not a view like <link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1interval__view">axis::interval_view</link> for two reasons.<itemizedlist>
<listitem><para>Sequential calls to <link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1af6d601913a69f830ffadd20f9dd2b462">lower()</link> and<link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a450223d1ab3d880bfd8d2e6cae0e8ad0">upper()</link> would have to each loop through the variant types. This is likely to be slower than filling all the data in one loop.</para></listitem><listitem><para><link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin">polymorphic_bin</link> may be created from a temporary instance of<link linkend="doxygen.classboost_1_1histogram_1_1axis_1_1variant">axis::variant</link>, like in the call histogram::axis(0). Storing a reference to the axis would result in a dangling reference. Rather than specialing the code to handle this, it seems easier to just use a value instead of a view.</para></listitem></itemizedlist></para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a3a47cb6f60d2f21302cc80809d705dee"><parameter name="lower"><paramtype>value_type</paramtype></parameter><parameter name="upper"><paramtype>value_type</paramtype></parameter></constructor><method id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1ac7dcf61fec658bad869169d1a486bb6a" name="conversion-operator" cv="const noexcept"><type>const value_type &amp;</type><purpose>Implicitly convert to bin value (for axis with discrete values). </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1af6d601913a69f830ffadd20f9dd2b462" name="lower" cv="const noexcept"><type>value_type</type><purpose>Return lower edge of bin. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a450223d1ab3d880bfd8d2e6cae0e8ad0" name="upper" cv="const noexcept"><type>value_type</type><purpose>Return upper edge of bin. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a51d340349d054eb76de9ee1fc886d0ba" name="center" cv="const noexcept"><type>value_type</type><purpose>Return center of bin. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a7860999094d3992d284e2b5c13163f31" name="width" cv="const noexcept"><type>value_type</type><purpose>Return width of bin. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1af4e700aa7dcbbcc853c8f56bbac6effa" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="BinType" /></template><parameter name="rhs"><paramtype>const BinType &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a0dabc4cffac3206d70b10b7048968d1f" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="BinType" /></template><parameter name="rhs"><paramtype>const BinType &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1polymorphic__bin_1a1a01debea2fb57af6f16e2d0b6d6e32b" name="is_discrete" cv="const noexcept"><type>bool</type><purpose>Return true if bin is discrete. </purpose></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.regular_8hpp" name="boost/histogram/axis/regular.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1circular" name="circular"><template>
      <template-type-parameter name="Value"><default>double</default></template-type-parameter><template-type-parameter name="MetaData"><default>use_default</default></template-type-parameter><template-type-parameter name="Options"><default>use_default</default></template-type-parameter></template><purpose>Regular axis with circular option already set. </purpose></class><class id="doxygen.classboost_1_1histogram_1_1axis_1_1regular" name="regular"><template>
      <template-type-parameter name="Value"><purpose><para>input value type, must be floating point. </para></purpose></template-type-parameter><template-type-parameter name="Transform"><purpose><para>builtin or user-defined transform type. </para></purpose></template-type-parameter><template-type-parameter name="MetaData"><purpose><para>type to store meta data. </para></purpose></template-type-parameter><template-type-parameter name="Options"><purpose><para>see boost::histogram::axis::option. </para></purpose></template-type-parameter></template><inherit access="public">boost::histogram::axis::iterator_mixin&lt; regular&lt; Value, Transform, MetaData, Options &gt; &gt;</inherit><inherit access="public">metadata_base_t&lt; MetaData &gt;</inherit><purpose>Axis for equidistant intervals on the real line. </purpose><description><para>The most common binning strategy. Very fast. Binning is a O(1) operation.</para><para>If the axis has an overflow bin (the default), a value on the upper edge of the last bin is put in the overflow bin. The axis range represents a semi-open interval.</para><para>If the overflow bin is deactivated, then a value on the upper edge of the last bin is still counted towards the last bin. The axis range represents a closed interval.</para><para>The options <computeroutput>growth</computeroutput> and<computeroutput>circular</computeroutput> are mutually exclusive.</para><para>
</para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a6fd785af1948c9ae70edefe71d7295f1" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a244aa639436917c18593f5deb39bd409"><parameter name="trans"><paramtype>transform_type</paramtype><description><para>transform instance to use. </para></description></parameter><parameter name="n"><paramtype>unsigned</paramtype><description><para>number of bins. </para></description></parameter><parameter name="start"><paramtype>value_type</paramtype><description><para>low edge of first bin. </para></description></parameter><parameter name="stop"><paramtype>value_type</paramtype><description><para>high edge of last bin. </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional).</para></description></parameter><purpose>Construct n bins over real transformed range [start, stop). </purpose><description><para>
The constructor throws <computeroutput>std::invalid_argument</computeroutput> if n is zero, or if start and stop produce an invalid range after transformation.</para><para>The arguments meta and alloc are passed by value. If you move either of them into the axis and the constructor throws, their values are lost. Do not move if you cannot guarantee that the bin description is not valid. </para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1acd0fac1e9dc3c6c20487cf7690786a40" specifiers="explicit"><parameter name="n"><paramtype>unsigned</paramtype><description><para>number of bins. </para></description></parameter><parameter name="start"><paramtype>value_type</paramtype><description><para>low edge of first bin. </para></description></parameter><parameter name="stop"><paramtype>value_type</paramtype><description><para>high edge of last bin. </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional). </para></description></parameter><purpose>Construct n bins over real range [start, stop). </purpose><description><para>
</para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a46ce563c8e9e5fafe7a8fb16e91b05aa" specifiers="explicit"><template>
          <template-type-parameter name="T" /></template><parameter name="trans"><paramtype>transform_type</paramtype><description><para>transform instance to use. </para></description></parameter><parameter name="step"><paramtype>step_type&lt; T &gt;</paramtype><description><para>width of a single bin. </para></description></parameter><parameter name="start"><paramtype>value_type</paramtype><description><para>low edge of first bin. </para></description></parameter><parameter name="stop"><paramtype>value_type</paramtype><description><para>upper limit of high edge of last bin (see below). </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional).</para></description></parameter><purpose>Construct bins with the given step size over real transformed range [start, stop). </purpose><description><para>
The axis computes the number of bins as n = abs(stop - start) / step, rounded down. This means that stop is an upper limit to the actual value (start + n * step). </para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a37ae21107f78f28f0a68a99e484675b0" specifiers="explicit"><template>
          <template-type-parameter name="T" /></template><parameter name="step"><paramtype>step_type&lt; T &gt;</paramtype><description><para>width of a single bin. </para></description></parameter><parameter name="start"><paramtype>value_type</paramtype><description><para>low edge of first bin. </para></description></parameter><parameter name="stop"><paramtype>value_type</paramtype><description><para>upper limit of high edge of last bin (see below). </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional).</para></description></parameter><purpose>Construct bins with the given step size over real range [start, stop). </purpose><description><para>
The axis computes the number of bins as n = abs(stop - start) / step, rounded down. This means that stop is an upper limit to the actual value (start + n * step). </para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a661b53b8155c8c105510867bf5bc8aa9"><parameter name="src"><paramtype>const <classname>regular</classname> &amp;</paramtype></parameter><parameter name="begin"><paramtype>index_type</paramtype></parameter><parameter name="end"><paramtype>index_type</paramtype></parameter><parameter name="merge"><paramtype>unsigned</paramtype></parameter><purpose>Constructor used by algorithm::reduce to shrink and rebin (not for users). </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1aac3eaebb9d5fe4fcc836e77724cbdf3d" name="transform" cv="const noexcept"><type>const transform_type &amp;</type><purpose>Return instance of the transform type. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1ad34106a43b1d8d4ef0527d48abe31139" name="index" cv="const noexcept"><type>index_type</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Return index for value argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a547e6a97b1f1b87c5bd3bbd7dc289d42" name="update" cv="noexcept"><type>std::pair&lt; index_type, index_type &gt;</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Returns index and shift (if axis has grown) for the passed argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a8d7df7e9b5817736e72854cf9ce720e2" name="value" cv="const noexcept"><type>value_type</type><parameter name="i"><paramtype>real_index_type</paramtype></parameter><purpose>Return value for fractional index argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a808ab0392352c373c219c29b5d1a21ef" name="bin" cv="const noexcept"><type>decltype(auto)</type><parameter name="idx"><paramtype>index_type</paramtype></parameter><purpose>Return bin for index argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1afa826a3e5867636801eb3738ceac8881" name="size" cv="const noexcept"><type>index_type</type><purpose>Returns the number of bins, without over- or underflow. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1ac29fe081226c65d1edfbec6df263bba1" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="V" /><template-type-parameter name="T" /><template-type-parameter name="M" /><template-type-parameter name="O" /></template><parameter name="o"><paramtype>const <classname>regular</classname>&lt; V, T, M, O &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a28dd12c8e1986a842f34d7968f0f127c" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="V" /><template-type-parameter name="T" /><template-type-parameter name="M" /><template-type-parameter name="O" /></template><parameter name="o"><paramtype>const <classname>regular</classname>&lt; V, T, M, O &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a5a80f2fdc2e03d7ecee446960007caa8" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group><method-group name="public static functions">
<method id="doxygen.classboost_1_1histogram_1_1axis_1_1regular_1a4c02c6a3ee352218d5fb882c42768cb7" name="options" cv="noexcept" specifiers="static"><type>unsigned</type><purpose>Returns the options. </purpose></method></method-group></class><function id="doxygen.regular_8hpp_1a825722f832c67236829045ad61a1428a" name="step"><type>step_type&lt; T &gt;</type><template>
          <template-type-parameter name="T" /></template><parameter name="t"><paramtype>T</paramtype></parameter><purpose>Helper function to mark argument as step size. </purpose></function><namespace name="transform">
<struct id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1id" name="id"><purpose>Identity transform for equidistant bins. </purpose><method-group name="public static functions">
<method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1id_1a36bfb0d4e21b112f5ccd9565aeefe587" name="forward" cv="noexcept" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>T &amp;&amp;</paramtype></parameter><purpose>Pass-through. </purpose></method><method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1id_1a7a9feee95b7f2e9aceb36fc85a0ca9a7" name="inverse" cv="noexcept" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>T &amp;&amp;</paramtype></parameter><purpose>Pass-through. </purpose></method></method-group><method-group name="public member functions">
<method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1id_1adc4126cfc4196fa6e06c83379032474a" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></struct><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1log" name="log"><purpose>Log transform for equidistant bins in log-space. </purpose><method-group name="public static functions">
<method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1log_1a78677404584c2d94a0372533809b0862" name="forward" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>T</paramtype></parameter><purpose>Returns log(x) of external value x. </purpose></method><method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1log_1a582ddb582e8b2128b88aebbbc155850a" name="inverse" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>T</paramtype></parameter><purpose>Returns exp(x) for internal value x. </purpose></method></method-group><method-group name="public member functions">
<method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1log_1a2220f3c4e52d761a2c64840adf118c95" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></struct><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1pow" name="pow"><purpose>Pow transform for equidistant bins in pow-space. </purpose><data-member id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1pow_1ab815a20a5879e04388d0fe6750a9809b" name="power"><type>double</type><purpose>power index </purpose></data-member><method-group name="public member functions">
<constructor id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1pow_1a737a7726e6d9be23d0402b6afb6e89a5" specifiers="explicit"><parameter name="p"><paramtype>double</paramtype></parameter><purpose>Make transform with index p. </purpose></constructor><constructor id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1pow_1a3e45aaed2aa8a1696e6b69e9e3287226" cv="= default" /><method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1pow_1adc4da73abe2d99fa1702d2b997f86f41" name="forward" cv="const"><type>auto</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>T</paramtype></parameter><purpose>Returns pow(x, power) of external value x. </purpose></method><method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1pow_1aaf3776aa90903436c59e7b8fff845e4e" name="inverse" cv="const"><type>auto</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>T</paramtype></parameter><purpose>Returns pow(x, 1/power) of external value x. </purpose></method><method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1pow_1a49649eab869d28b63b0bf3bc8b97b501" name="operator==" cv="const noexcept"><type>bool</type><parameter name="o"><paramtype>const <classname>pow</classname> &amp;</paramtype></parameter></method><method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1pow_1a5657e6dddb14c238984e0839729fb7cb" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></struct><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1sqrt" name="sqrt"><purpose>Sqrt transform for equidistant bins in sqrt-space. </purpose><method-group name="public static functions">
<method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1sqrt_1a2761b1dc54183ff829a16be3ae7ad25b" name="forward" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>T</paramtype></parameter><purpose>Returns sqrt(x) of external value x. </purpose></method><method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1sqrt_1a39a2bd6d5b40df2945074b76e6b6b2b1" name="inverse" specifiers="static"><type>T</type><template>
          <template-type-parameter name="T" /></template><parameter name="x"><paramtype>T</paramtype></parameter><purpose>Returns x^2 of internal value x. </purpose></method></method-group><method-group name="public member functions">
<method id="doxygen.structboost_1_1histogram_1_1axis_1_1transform_1_1sqrt_1aff6106f58094c5f7b8f9acb00b50c4d8" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></struct></namespace></namespace></namespace></namespace></header><header id="doxygen.traits_8hpp" name="boost/histogram/axis/traits.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<namespace name="traits">
<function id="doxygen.traits_8hpp_1a6a8a7a45e15e09618c1863e3ad2e9126" name="continuous"><type>bool</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><purpose>Returns true if axis is continuous or false. </purpose><description><para>See <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__continuous">is_continuous</link> for details.</para><para>
</para></description></function><function id="doxygen.traits_8hpp_1aa94da97e7154f332e2374d6cfdac7187" name="extent"><type>index_type</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><purpose>Returns axis size plus any extra bins for under- and overflow. </purpose><description><para>
</para></description></function><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1get__options" name="get_options"><template>
      <template-type-parameter name="Axis"><purpose><para>axis type </para></purpose></template-type-parameter></template><purpose>Get axis options for axis type. </purpose><description><para>Doxygen does not render this well. This is a meta-function (template alias), it accepts an axis type and returns the <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1option_1_1bitset">boost::histogram::axis::option::bitset</link>.</para><para>If Axis::options() is valid and constexpr, <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1get__options">get_options</link> is the corresponding option type. Otherwise, it is<link linkend="doxygen.option_8hpp_1ae3ebf8733ed9cc848803f6b4bf7b3c2f">boost::histogram::axis::option::growth_t</link>, if the axis has a method<computeroutput>update</computeroutput>, else<link linkend="doxygen.option_8hpp_1ae95eb6d114028cd2da70cfdd2f0b4ced">boost::histogram::axis::option::none_t</link>.</para><para>
</para></description></struct><function id="doxygen.traits_8hpp_1a001e46d611a7a56374b162a7d30d1dc9" name="inclusive"><type>bool</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><purpose>Returns true if axis is inclusive or false. </purpose><description><para>See <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__inclusive">is_inclusive</link> for details.</para><para>
</para></description></function><function id="doxygen.traits_8hpp_1aeb19104bfc248d206fc2e59278b20ce4" name="index"><type>axis::index_type</type><template>
          <template-type-parameter name="Axis" /><template-type-parameter name="U" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><parameter name="value"><paramtype>const U &amp;</paramtype><description><para>argument to be passed to <computeroutput>index</computeroutput> method</para></description></parameter><purpose>Returns axis index for value. </purpose><description><para>Throws std::invalid_argument if the value argument is not implicitly convertible.</para><para>
</para></description></function><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__continuous" name="is_continuous"><template>
      <template-type-parameter name="Axis" /></template><purpose>Whether axis is continuous or discrete. </purpose><description><para>Doxygen does not render this well. This is a meta-function (template alias), it accepts an axis type and returns a compile-time boolean.</para><para>If the boolean is true, the axis is continuous (covers a continuous range of values). Otherwise it is discrete (covers discrete values). </para></description></struct><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__inclusive" name="is_inclusive"><template>
      <template-type-parameter name="Axis"><purpose><para>axis type </para></purpose></template-type-parameter></template><purpose>Meta-function to detect whether an axis is inclusive. </purpose><description><para>Doxygen does not render this well. This is a meta-function (template alias), it accepts an axis type and represents compile-time boolean which is true or false, depending on whether the axis is inclusive or not.</para><para>An inclusive axis has a bin for every possible input value. In other words, all possible input values always end up in a valid cell and there is no need to keep track of input tuples that need to be discarded. A histogram which consists entirely of inclusive axes can be filled more efficiently, which can be a factor 2 faster.</para><para>An axis with underflow and overflow bins is always inclusive, but an axis may be inclusive under other conditions. The meta-function checks for the method <computeroutput>constexpr static bool inclusive()</computeroutput>, and uses the result. If this method is not present, it uses get_options&lt;Axis&gt; and checks whether the underflow and overflow bits are present.</para><para>
</para></description></struct><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__ordered" name="is_ordered"><template>
      <template-type-parameter name="Axis"><purpose><para>axis type </para></purpose></template-type-parameter></template><purpose>Meta-function to detect whether an axis is ordered. </purpose><description><para>Doxygen does not render this well. This is a meta-function (template alias), it accepts an axis type and returns a compile-time boolean. If the boolean is true, the axis is ordered.</para><para>The meta-function checks for the method <computeroutput>constexpr static bool ordered()</computeroutput>, and uses the result. If this method is not present, it returns true if the value type of the Axis is arithmetic and false otherwise.</para><para>An ordered axis has a value type that is ordered, which means that indices i &lt; j &lt; k implies either value(i) &lt; value(j) &lt; value(k) or value(i) &gt; value(j) &gt; value(k) for all i,j,k. For example, the integer axis is ordered, but the category axis is not. Axis which are not ordered must not have underflow bins, because they only have an "other" category, which is identified with the overflow bin if it is available.</para><para>
</para></description></struct><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__reducible" name="is_reducible"><template>
      <template-type-parameter name="Axis"><purpose><para>axis type. </para></purpose></template-type-parameter></template><purpose>Meta-function to detect whether an axis is reducible. </purpose><description><para>Doxygen does not render this well. This is a meta-function (template alias), it accepts an axis type and represents compile-time boolean which is true or false, depending on whether the axis can be reduced with boost::histogram::algorithm::reduce().</para><para>An axis can be made reducible by adding a special constructor, see Axis concept for details.</para><para>
</para></description></struct><function id="doxygen.traits_8hpp_1a83be61d37e872e247628d9228901cde3" name="metadata"><type>decltype(auto)</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>Axis &amp;&amp;</paramtype><description><para>any axis instance </para></description></parameter><purpose>Returns reference to metadata of an axis. </purpose><description><para>If the expression x.metadata() for an axis instance <computeroutput>x</computeroutput> (maybe const) is valid, return the result. Otherwise, return a reference to a static instance of<link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1null__type">boost::histogram::axis::null_type</link>.</para><para>
</para></description></function><function id="doxygen.traits_8hpp_1a3efa2769458d2b867f3e9b960c392b26" name="options"><type>unsigned</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><purpose>Returns axis options as unsigned integer. </purpose><description><para>See <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1get__options">get_options</link> for details.</para><para>
</para></description></function><function id="doxygen.traits_8hpp_1a583de2246a3fb545bfebd6d478ec9869" name="ordered"><type>bool</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><purpose>Returns true if axis is ordered or false. </purpose><description><para>See <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1is__ordered">is_ordered</link> for details.</para><para>
</para></description></function><function id="doxygen.traits_8hpp_1a9b50b6a62cf2fd3c404d56f42e2a9b8f" name="rank"><type>unsigned int</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><purpose>Return axis rank (how many arguments it processes). </purpose><description><para>
</para></description></function><function id="doxygen.traits_8hpp_1a84c1a8f9496519798538523a7d62a82a" name="update"><type>std::pair&lt; index_type, index_type &gt;</type><template>
          <template-type-parameter name="Axis" /><template-type-parameter name="U" /></template><parameter name="axis"><paramtype>Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><parameter name="value"><paramtype>const U &amp;</paramtype><description><para>argument to be passed to <computeroutput>update</computeroutput> or<computeroutput>index</computeroutput> method</para></description></parameter><purpose>Returns pair of axis index and shift for the value argument. </purpose><description><para>Throws <computeroutput>std::invalid_argument</computeroutput> if the value argument is not implicitly convertible to the argument expected by the<computeroutput>index</computeroutput> method. If the result of boost::histogram::axis::traits::get_options&lt;decltype(axis)&gt; has the growth flag set, call<computeroutput>update</computeroutput> method with the argument and return the result. Otherwise, call<computeroutput>index</computeroutput> and return the pair of the result and a zero shift.</para><para>
</para></description></function><function id="doxygen.traits_8hpp_1a48415fa463cc2fd39080cfa2634c789d" name="value"><type>decltype(auto)</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><parameter name="index"><paramtype>real_index_type</paramtype><description><para>floating point axis index </para></description></parameter><purpose>Returns axis value for index. </purpose><description><para>If the axis has no <computeroutput>value</computeroutput> method, throw std::runtime_error. If the method exists and accepts a floating point index, pass the index and return the result. If the method exists but accepts only integer indices, cast the floating point index to int, pass this index and return the result.</para><para>
</para></description></function><function id="doxygen.traits_8hpp_1aa960a0cc16934332fb7e2c90f5ddaa19" name="value_as"><type>Result</type><template>
          <template-type-parameter name="Result"><purpose><para>requested return type </para></purpose></template-type-parameter><template-type-parameter name="Axis"><purpose><para>axis type </para></purpose></template-type-parameter></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><parameter name="index"><paramtype>real_index_type</paramtype><description><para>floating point axis index </para></description></parameter><purpose>Returns axis value for index if it is convertible to target type or throws. </purpose><description><para>Like boost::histogram::axis::traits::value, but converts the result into the requested return type. If the conversion is not possible, throws std::runtime_error.</para><para>

</para></description></function><struct id="doxygen.structboost_1_1histogram_1_1axis_1_1traits_1_1value__type" name="value_type"><template>
      <template-type-parameter name="Axis"><purpose><para>axis type. </para></purpose></template-type-parameter></template><purpose>Value type for axis type. </purpose><description><para>Doxygen does not render this well. This is a meta-function (template alias), it accepts an axis type and returns the value type.</para><para>The value type is deduced from the argument of the <computeroutput>Axis::index</computeroutput> method. Const references are decayed to the their value types, for example, the type deduced for<computeroutput>Axis::index(const int&amp;)</computeroutput> is<computeroutput>int</computeroutput>.</para><para>The deduction always succeeds if the axis type models the Axis concept correctly. Errors come from violations of the concept, in particular, an index method that is templated or overloaded is not allowed.</para><para>
</para></description></struct><function id="doxygen.traits_8hpp_1ad9d0bf5500cbdac3ee38e6630a9ab941" name="width"><type>decltype(auto)</type><template>
          <template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><parameter name="index"><paramtype>index_type</paramtype><description><para>bin index </para></description></parameter><purpose>Returns bin width at axis index. </purpose><description><para>If the axis has no <computeroutput>value</computeroutput> method, throw std::runtime_error. If the method exists and accepts a floating point index, return the result of<computeroutput>axis.value(index + 1) - axis.value(index)</computeroutput>. If the method exists but accepts only integer indices, return 0.</para><para>
</para></description></function><function id="doxygen.traits_8hpp_1a418abd9d2496b6f88f7869e0994da731" name="width_as"><type>Result</type><template>
          <template-type-parameter name="Result" /><template-type-parameter name="Axis" /></template><parameter name="axis"><paramtype>const Axis &amp;</paramtype><description><para>any axis instance </para></description></parameter><parameter name="index"><paramtype>index_type</paramtype><description><para>bin index </para></description></parameter><purpose>Returns bin width at axis index. </purpose><description><para>Like boost::histogram::axis::traits::width, but converts the result into the requested return type. If the conversion is not possible, throw std::runtime_error.</para><para>
</para></description></function></namespace></namespace></namespace></namespace></header><header id="doxygen.variable_8hpp" name="boost/histogram/axis/variable.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<class id="doxygen.classboost_1_1histogram_1_1axis_1_1variable" name="variable"><template>
      <template-type-parameter name="Value"><purpose><para>input value type, must be floating point. </para></purpose></template-type-parameter><template-type-parameter name="MetaData"><purpose><para>type to store meta data. </para></purpose></template-type-parameter><template-type-parameter name="Options"><purpose><para>see boost::histogram::axis::option. </para></purpose></template-type-parameter><template-type-parameter name="Allocator"><purpose><para>allocator to use for dynamic memory management. </para></purpose></template-type-parameter></template><inherit access="public">boost::histogram::axis::iterator_mixin&lt; variable&lt; Value, MetaData, Options, Allocator &gt; &gt;</inherit><inherit access="public">metadata_base_t&lt; MetaData &gt;</inherit><purpose>Axis for non-equidistant bins on the real line. </purpose><description><para>Binning is a O(log(N)) operation. If speed matters and the problem domain allows it, prefer a regular axis, possibly with a transform.</para><para>If the axis has an overflow bin (the default), a value on the upper edge of the last bin is put in the overflow bin. The axis range represents a semi-open interval.</para><para>If the overflow bin is deactivated, then a value on the upper edge of the last bin is still counted towards the last bin. The axis range represents a closed interval. This is the desired behavior for random numbers drawn from a bounded interval, which is usually closed.</para><para>
</para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1ab769ccd62b0daa769e4f555b5ffc2b97" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a0c4304aeb13a2471b61653db5c974c60" specifiers="explicit"><parameter name="alloc"><paramtype>allocator_type</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a9a7dc19e8a4bfa0b4a65acda511802dc"><template>
          <template-type-parameter name="It" /></template><parameter name="begin"><paramtype>It</paramtype><description><para>begin of edge sequence. </para></description></parameter><parameter name="end"><paramtype>It</paramtype><description><para>end of edge sequence. </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional). </para></description></parameter><parameter name="alloc"><paramtype>allocator_type</paramtype><default>{}</default><description><para>allocator instance to use (optional).</para></description></parameter><purpose>Construct from forward iterator range of bin edges. </purpose><description><para>
The constructor throws <computeroutput>std::invalid_argument</computeroutput> if iterator range is invalid, if less than two edges are provided or if bin edges are not in ascending order.</para><para>The arguments meta and alloc are passed by value. If you move either of them into the axis and the constructor throws, their values are lost. Do not move if you cannot guarantee that the bin description is not valid. </para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a0598fb4d45c48a34871521dda544362a"><template>
          <template-type-parameter name="It" /><template-type-parameter name="A" /></template><parameter name="begin"><paramtype>It</paramtype></parameter><parameter name="end"><paramtype>It</paramtype></parameter><parameter name="meta"><paramtype>metadata_type</paramtype></parameter><parameter name="alloc"><paramtype>A</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1ae627982e163580fce1835af2d7111784"><template>
          <template-type-parameter name="U" /></template><parameter name="iterable"><paramtype>const U &amp;</paramtype><description><para>iterable range of bin edges. </para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional). </para></description></parameter><parameter name="alloc"><paramtype>allocator_type</paramtype><default>{}</default><description><para>allocator instance to use (optional). </para></description></parameter><purpose>Construct variable axis from iterable range of bin edges. </purpose><description><para>
</para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a4799b0e1103299d6a5060d774876f5df"><template>
          <template-type-parameter name="U" /><template-type-parameter name="A" /></template><parameter name="iterable"><paramtype>const U &amp;</paramtype></parameter><parameter name="meta"><paramtype>metadata_type</paramtype></parameter><parameter name="alloc"><paramtype>A</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a52fcbbf3da4afcc4f2cc3ef4652fac2d"><template>
          <template-type-parameter name="U" /></template><parameter name="list"><paramtype>std::initializer_list&lt; U &gt;</paramtype><description><para><computeroutput>std::initializer_list</computeroutput> of bin edges.</para></description></parameter><parameter name="meta"><paramtype>metadata_type</paramtype><default>{}</default><description><para>description of the axis (optional). </para></description></parameter><parameter name="options"><paramtype>options_type</paramtype><default>{}</default><description><para>see boost::histogram::axis::option (optional). </para></description></parameter><parameter name="alloc"><paramtype>allocator_type</paramtype><default>{}</default><description><para>allocator instance to use (optional). </para></description></parameter><purpose>Construct variable axis from initializer list of bin edges. </purpose><description><para>
</para></description></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a63bfb01137b725ba6c7ee59181d73971"><template>
          <template-type-parameter name="U" /><template-type-parameter name="A" /></template><parameter name="list"><paramtype>std::initializer_list&lt; U &gt;</paramtype></parameter><parameter name="meta"><paramtype>metadata_type</paramtype></parameter><parameter name="alloc"><paramtype>A</paramtype></parameter></constructor><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a628888b063cd36282bb7c7606566e6fc"><parameter name="src"><paramtype>const <classname>variable</classname> &amp;</paramtype></parameter><parameter name="begin"><paramtype>index_type</paramtype></parameter><parameter name="end"><paramtype>index_type</paramtype></parameter><parameter name="merge"><paramtype>unsigned</paramtype></parameter><purpose>Constructor used by algorithm::reduce to shrink and rebin (not for users). </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1ac2508b57879c8887fd7eacfb49de07c4" name="index" cv="const noexcept"><type>index_type</type><parameter name="x"><paramtype>value_type</paramtype></parameter><purpose>Return index for value argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a74c785f98d0dc6eeea15ff51e331a8ee" name="update" cv="noexcept"><type>std::pair&lt; index_type, index_type &gt;</type><parameter name="x"><paramtype>value_type</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a5435b0fcc9f6fa95a33a0da788271933" name="value" cv="const noexcept"><type>value_type</type><parameter name="i"><paramtype>real_index_type</paramtype></parameter><purpose>Return value for fractional index argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a6dd426d3b8fd70046d1ec6dfdd43d2d8" name="bin" cv="const noexcept"><type>auto</type><parameter name="idx"><paramtype>index_type</paramtype></parameter><purpose>Return bin for index argument. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1ae7385cc5bd9bc52f11df1159cfac992f" name="size" cv="const noexcept"><type>index_type</type><purpose>Returns the number of bins, without over- or underflow. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1afeb3ffc8009fcfeb504e8053dba39fae" name="operator==" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="V" /><template-type-parameter name="M" /><template-type-parameter name="O" /><template-type-parameter name="A" /></template><parameter name="o"><paramtype>const <classname>variable</classname>&lt; V, M, O, A &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a113b0d392f1ea5692927614ae52c215d" name="operator!=" cv="const noexcept"><type>bool</type><template>
          <template-type-parameter name="V" /><template-type-parameter name="M" /><template-type-parameter name="O" /><template-type-parameter name="A" /></template><parameter name="o"><paramtype>const <classname>variable</classname>&lt; V, M, O, A &gt; &amp;</paramtype></parameter></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1aea7515f10f7cef9ab707359523650197" name="get_allocator" cv="const"><type>auto</type><purpose>Return allocator instance. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1a241484b3f5d6a844d5e789425c2739fd" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group><method-group name="public static functions">
<method id="doxygen.classboost_1_1histogram_1_1axis_1_1variable_1ab4cadb050437d806fe921a0aea8f225c" name="options" cv="noexcept" specifiers="static"><type>unsigned</type><purpose>Returns the options. </purpose></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.variant_8hpp" name="boost/histogram/axis/variant.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="axis">
<function id="doxygen.variant_8hpp_1ad6202c7204cbe15b8861895a79a55f41" name="get"><type>decltype(auto)</type><template>
          <template-type-parameter name="T" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="v"><paramtype><classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><purpose>Return reference to T, throws std::runtime_error if type does not match. </purpose></function><function id="doxygen.variant_8hpp_1a5702819bec2d86f9c4cee8f9d76aa0f1" name="get"><type>decltype(auto)</type><template>
          <template-type-parameter name="T" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="v"><paramtype><classname>variant</classname>&lt; Us... &gt; &amp;&amp;</paramtype></parameter><purpose>Return movable reference to T, throws unspecified exception if type does not match. </purpose></function><function id="doxygen.variant_8hpp_1a6e713b5a27bb4a8810c3686897cded3f" name="get"><type>decltype(auto)</type><template>
          <template-type-parameter name="T" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="v"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><purpose>Return const reference to T, throws unspecified exception if type does not match. </purpose></function><function id="doxygen.variant_8hpp_1a3cec762fdce9cb3669f413a1c3205c89" name="get_if"><type>auto</type><template>
          <template-type-parameter name="T" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="v"><paramtype><classname>variant</classname>&lt; Us... &gt; *</paramtype></parameter><purpose>Returns pointer to T in variant or null pointer if type does not match. </purpose></function><function id="doxygen.variant_8hpp_1abed36ef0c42029dbf47a2d76bd2ba970" name="get_if"><type>auto</type><template>
          <template-type-parameter name="T" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="v"><paramtype>const <classname>variant</classname>&lt; Us... &gt; *</paramtype></parameter><purpose>Returns pointer to const T in variant or null pointer if type does not match. </purpose></function><function id="doxygen.variant_8hpp_1a4e0f490b41a73431498b54d279e58c70" name="operator!="><type>bool</type><template>
          <template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter><template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><parameter name="u"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><parameter name="t"><paramtype>const <classname>variant</classname>&lt; Ts... &gt; &amp;</paramtype></parameter><purpose>The negation of operator==. </purpose></function><function id="doxygen.variant_8hpp_1aaaf581840eda04a56d4850eaf6e02a40" name="operator!="><type>bool</type><template>
          <template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter><template-type-parameter name="T" /></template><parameter name="u"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><parameter name="t"><paramtype>const T &amp;</paramtype></parameter><purpose>The negation of operator==. </purpose></function><function id="doxygen.variant_8hpp_1a82769440bf04096986736eca0f260659" name="operator!="><type>bool</type><template>
          <template-type-parameter name="T" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="t"><paramtype>const T &amp;</paramtype></parameter><parameter name="u"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><purpose>The negation of operator==. </purpose></function><function id="doxygen.variant_8hpp_1a6e213a5feb5508c75d2d5f218110230c" name="operator=="><type>bool</type><template>
          <template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter><template-nontype-parameter name="Vs"><type>class...</type></template-nontype-parameter></template><parameter name="u"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><parameter name="v"><paramtype>const <classname>variant</classname>&lt; Vs... &gt; &amp;</paramtype></parameter><purpose>Compare two variants. </purpose><description><para>Return true if the variants point to the same concrete axis type and the types compare equal. Otherwise return false. </para></description></function><function id="doxygen.variant_8hpp_1a0c1a727d77b3b92a00c6aa100dae0cc2" name="operator=="><type>bool</type><template>
          <template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter><template-type-parameter name="T" /></template><parameter name="u"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><parameter name="t"><paramtype>const T &amp;</paramtype></parameter><purpose>Compare variant with a concrete axis type. </purpose><description><para>Return true if the variant point to the same concrete axis type and the types compare equal. Otherwise return false. </para></description></function><class id="doxygen.classboost_1_1histogram_1_1axis_1_1variant" name="variant"><template>
      <template-nontype-parameter name="Ts"><type>class...</type></template-nontype-parameter></template><inherit access="public">boost::histogram::axis::iterator_mixin&lt; variant&lt; Ts... &gt; &gt;</inherit><purpose>Polymorphic axis type. </purpose><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a5bcc984de0bb1baf2b59b3227adc01fc" cv="= default" /><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1ae716db47815866d2995d93091afaa8e3" cv="= default"><parameter name=""><paramtype>const <classname>variant</classname> &amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a3279fbe6b9c12111ba0129f506a137e7" cv="= default"><type><classname>variant</classname> &amp;</type><parameter name=""><paramtype>const <classname>variant</classname> &amp;</paramtype></parameter></copy-assignment><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a81cee61a5de4cc50b6c18640896758e2" cv="= default"><parameter name=""><paramtype><classname>variant</classname> &amp;&amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a71c05603e7959242152960c68ed4109e" cv="= default"><type><classname>variant</classname> &amp;</type><parameter name=""><paramtype><classname>variant</classname> &amp;&amp;</paramtype></parameter></copy-assignment><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1ad38119437e9017468e9af0f1a6522899"><template>
          <template-type-parameter name="T" /></template><parameter name="t"><paramtype>T &amp;&amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a398539b6dc741f350f5876de68fb9288"><type><classname>variant</classname> &amp;</type><template>
          <template-type-parameter name="T" /></template><parameter name="t"><paramtype>T &amp;&amp;</paramtype></parameter></copy-assignment><constructor id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1aeef35af8b6f917fcfec79b69cde81358"><template>
          <template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="u"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter></constructor><copy-assignment id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a329eac8256162f5683ba8c04c6fc6dfb"><type><classname>variant</classname> &amp;</type><template>
          <template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="u"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter></copy-assignment><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a61bae04815e0cfc5ce8fbc47448b6e1a" name="size" cv="const"><type>index_type</type><purpose>Return size of axis. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a5454015222bbb13952d9d65dc393b5f8" name="options" cv="const"><type>unsigned</type><purpose>Return options of axis or <link linkend="doxygen.option_8hpp_1ae95eb6d114028cd2da70cfdd2f0b4ced">option::none_t</link> if axis has no options.</purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a96ebe8ba487fbfaedebd0e9ccd6e8c8f" name="inclusive" cv="const"><type>bool</type><purpose>Returns true if the axis is inclusive or false. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a65b52477bf5e9301e9b4db04779ed4c7" name="ordered" cv="const"><type>bool</type><purpose>Returns true if the axis is ordered or false. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1ae393f49e43884993f87438b07fcbf86a" name="continuous" cv="const"><type>bool</type><purpose>Returns true if the axis is continuous or false. </purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1af05390f362dd0f56b583849aedaa0d5e" name="metadata" cv="const"><type>metadata_type &amp;</type><purpose>Return reference to const metadata or instance of <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1null__type">null_type</link> if axis has no metadata.</purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a5b3e144af32d1aff8afe5a3da71eea67" name="metadata"><type>metadata_type &amp;</type><purpose>Return reference to metadata or instance of <link linkend="doxygen.structboost_1_1histogram_1_1axis_1_1null__type">null_type</link> if axis has no metadata.</purpose></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a376047e535b5a6a723f7e1e74a3b96f2" name="index" cv="const"><type>index_type</type><template>
          <template-type-parameter name="U" /></template><parameter name="u"><paramtype>const U &amp;</paramtype></parameter><purpose>Return index for value argument. </purpose><description><para>Throws std::invalid_argument if axis has incompatible call signature. </para></description></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1ac6cdcd488ad6885cc11b6dc8565a3e9b" name="value" cv="const"><type>double</type><parameter name="idx"><paramtype>real_index_type</paramtype></parameter><purpose>Return value for index argument. </purpose><description><para>Only works for axes with value method that returns something convertible to double and will throw a runtime_error otherwise, see axis::traits::value(). </para></description></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1a73f83c76e50338459a1571583ceb3edd" name="bin" cv="const"><type>auto</type><parameter name="idx"><paramtype>index_type</paramtype></parameter><purpose>Return bin for index argument. </purpose><description><para>Only works for axes with value method that returns something convertible to double and will throw a runtime_error otherwise, see axis::traits::value(). </para></description></method><method id="doxygen.classboost_1_1histogram_1_1axis_1_1variant_1aaefbfce4c63b5531a18729811c7a6a78" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive" /></template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method></method-group></class><function id="doxygen.variant_8hpp_1a1880fa8ea0dc34103630af65ce582d8f" name="visit"><type>decltype(auto)</type><template>
          <template-type-parameter name="Visitor" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="vis"><paramtype>Visitor &amp;&amp;</paramtype></parameter><parameter name="var"><paramtype><classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><purpose>Apply visitor to variant (reference). </purpose></function><function id="doxygen.variant_8hpp_1a063f82d64ab7ff9609da68cc6958dde7" name="visit"><type>decltype(auto)</type><template>
          <template-type-parameter name="Visitor" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="vis"><paramtype>Visitor &amp;&amp;</paramtype></parameter><parameter name="var"><paramtype><classname>variant</classname>&lt; Us... &gt; &amp;&amp;</paramtype></parameter><purpose>Apply visitor to variant (movable reference). </purpose></function><function id="doxygen.variant_8hpp_1a0ebbee19031bd04d2b2a0d8503b0dc25" name="visit"><type>decltype(auto)</type><template>
          <template-type-parameter name="Visitor" /><template-nontype-parameter name="Us"><type>class...</type></template-nontype-parameter></template><parameter name="vis"><paramtype>Visitor &amp;&amp;</paramtype></parameter><parameter name="var"><paramtype>const <classname>variant</classname>&lt; Us... &gt; &amp;</paramtype></parameter><purpose>Apply visitor to variant (const reference). </purpose></function></namespace></namespace></namespace></header><header id="doxygen.binomial__proportion__interval_8hpp" name="boost/histogram/utility/binomial_proportion_interval.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="utility">
<class id="doxygen.classboost_1_1histogram_1_1utility_1_1binomial__proportion__interval" name="binomial_proportion_interval"><template>
      <template-type-parameter name="ValueType" /></template><purpose>Common base class for interval calculators. </purpose><typedef id="doxygen.classboost_1_1histogram_1_1utility_1_1binomial__proportion__interval_1af44c8d8da8445eb32e8e2536b3b7c587" name="value_type"><type>ValueType</type></typedef><typedef id="doxygen.classboost_1_1histogram_1_1utility_1_1binomial__proportion__interval_1ad1eeb7cb99c0d93024dec83f4e5e2196" name="interval_type"><type>std::pair&lt; value_type, value_type &gt;</type></typedef><method-group name="public member functions">
<method id="doxygen.classboost_1_1histogram_1_1utility_1_1binomial__proportion__interval_1a338445e4cf84e5e9ae9383cf6da36ab4" name="operator()" cv="const = 0" specifiers="virtual"><type>interval_type</type><parameter name="successes"><paramtype>value_type</paramtype><description><para>Number of successful trials. </para></description></parameter><parameter name="failures"><paramtype>value_type</paramtype><description><para>Number of failed trials. </para></description></parameter><purpose>Compute interval for given number of successes and failures. </purpose><description><para>
</para></description></method><method id="doxygen.classboost_1_1histogram_1_1utility_1_1binomial__proportion__interval_1a073f3e8f8f32cfe280e70f3a5c260e34" name="operator()" cv="const noexcept"><type>interval_type</type><template>
          <template-type-parameter name="T" /></template><parameter name="fraction"><paramtype>const <classname>accumulators::fraction</classname>&lt; T &gt; &amp;</paramtype><description><para>Fraction accumulator. </para></description></parameter><purpose>Compute interval for a fraction accumulator. </purpose><description><para>
</para></description></method></method-group></class><class id="doxygen.classboost_1_1histogram_1_1utility_1_1confidence__level" name="confidence_level"><purpose>Confidence level for intervals. </purpose><description><para>Intervals become wider as the deviation value increases. </para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1utility_1_1confidence__level_1a5e7487cefd5262b1b20b9221f81e79e3" specifiers="explicit"><parameter name="cl"><paramtype>double</paramtype></parameter><purpose>constructor from confidence level (a probability) </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1utility_1_1confidence__level_1a9812d9a1ef5d29250269f0b9f434df5a" name="conversion-operator" cv="const noexcept" specifiers="explicit"><type>T</type><template>
          <template-type-parameter name="T" /></template><purpose>explicit conversion to numerical confidence level </purpose></method><method id="doxygen.classboost_1_1histogram_1_1utility_1_1confidence__level_1a2881e335d179dca45189ce3407c56384" name="conversion-operator" cv="const noexcept"><type>deviation</type><purpose>implicit conversion to units of standard deviation </purpose></method></method-group></class><class id="doxygen.classboost_1_1histogram_1_1utility_1_1deviation" name="deviation"><purpose>Confidence level in units of deviations for intervals. </purpose><description><para>Intervals become wider as the deviation value increases. The standard deviation corresponds to a value of 1 and corresponds to 68.3 % confidence level. The conversion between confidence level and deviations is based on a two-sided interval on the normal distribution. </para></description><method-group name="public member functions">
<constructor id="doxygen.classboost_1_1histogram_1_1utility_1_1deviation_1ae919d3b990523a0125823a7d299d30c9" specifiers="explicit"><parameter name="d"><paramtype>double</paramtype></parameter><purpose>constructor from units of standard deviations </purpose></constructor><method id="doxygen.classboost_1_1histogram_1_1utility_1_1deviation_1abf6dc7963e695365a6e60a8ceaa1df01" name="conversion-operator" cv="const noexcept" specifiers="explicit"><type>T</type><template>
          <template-type-parameter name="T" /></template><purpose>explicit conversion to units of standard deviations </purpose></method><method id="doxygen.classboost_1_1histogram_1_1utility_1_1deviation_1ad6f4452cd151102b30a7d7e4f27ce019" name="conversion-operator" cv="const noexcept"><type>confidence_level</type><purpose>implicit conversion to confidence level </purpose></method></method-group></class></namespace></namespace></namespace></header><header id="doxygen.clopper__pearson__interval_8hpp" name="boost/histogram/utility/clopper_pearson_interval.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="utility">
</namespace></namespace></namespace></header><header id="doxygen.jeffreys__interval_8hpp" name="boost/histogram/utility/jeffreys_interval.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="utility">
</namespace></namespace></namespace></header><header id="doxygen.wald__interval_8hpp" name="boost/histogram/utility/wald_interval.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="utility">
</namespace></namespace></namespace></header><header id="doxygen.wilson__interval_8hpp" name="boost/histogram/utility/wilson_interval.hpp">
<namespace name="boost">
<namespace name="histogram">
<namespace name="utility">
</namespace></namespace></namespace></header></library-reference>