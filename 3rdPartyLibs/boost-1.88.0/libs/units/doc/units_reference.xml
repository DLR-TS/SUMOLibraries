<?xml version="1.0" standalone="yes"?>
<library-reference id="units_reference"><title>Units Reference</title><header id="doxygen.units_reference.absolute_8hpp" name="boost/units/absolute.hpp">
<para>Absolute units (points rather than vectors). </para><para>Operations between absolute units, and relative units like temperature differences. </para><namespace name="boost">
<namespace name="units">
<class id="doxygen.units_reference.classboost_1_1units_1_1absolute" name="absolute"><template>
      <template-type-parameter name="Y"/>
    </template><description><para>A wrapper to represent absolute units (points rather than vectors). Intended originally for temperatures, this class implements operators for absolute units so that addition of a relative unit to an absolute unit results in another absolute unit : absolute&lt;T&gt; +/- T -&gt; absolute&lt;T&gt; and subtraction of one absolute unit from another results in a relative unit : absolute&lt;T&gt; - absolute&lt;T&gt; -&gt; T. </para></description><typedef id="doxygen.units_reference.classboost_1_1units_1_1absolute_1aaf2b2d711b3d8154549df59506aa66f9" name="this_type"><type><classname>absolute</classname>&lt; Y &gt;</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1absolute_1a2f4996af47e062d5f1d1c6ff65dde6f1" name="value_type"><type>Y</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.units_reference.classboost_1_1units_1_1absolute_1abf1bb23a8a80858d0539710a7ebd3e8d"/>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1absolute_1add0dae13c6b3696aae5308cde073bfb3"><parameter name="val"><paramtype>const value_type &amp;</paramtype></parameter></constructor>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1absolute_1ac5aa4dc1323665503d5666d8019801e4"><parameter name="source"><paramtype>const this_type &amp;</paramtype></parameter></constructor>
<copy-assignment id="doxygen.units_reference.classboost_1_1units_1_1absolute_1adc9dfb9ad59d2c006554c3fae43392f5"><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="source"><paramtype>const this_type &amp;</paramtype></parameter></copy-assignment>
<method id="doxygen.units_reference.classboost_1_1units_1_1absolute_1aa0b57d14862d2a28fca6f394581522d2" name="value" cv="const"><type>BOOST_CONSTEXPR const value_type &amp;</type></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1absolute_1a878c5a03aea575e93f5728f4ba49f2c7" name="operator+="><type>BOOST_CXX14_CONSTEXPR const this_type &amp;</type><parameter name="val"><paramtype>const value_type &amp;</paramtype></parameter></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1absolute_1ab6feac0cc933fc285862a5b60ed6bca0" name="operator-="><type>BOOST_CXX14_CONSTEXPR const this_type &amp;</type><parameter name="val"><paramtype>const value_type &amp;</paramtype></parameter></method>
</method-group>
</class>






















































































































<function id="doxygen.units_reference.namespaceboost_1_1units_1ab77dfb47a3b1f66b1b797c5a8a975578" name="operator+"><type>BOOST_CONSTEXPR <classname>absolute</classname>&lt; Y &gt;</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="aval"><paramtype>const <classname>absolute</classname>&lt; Y &gt; &amp;</paramtype></parameter><parameter name="rval"><paramtype>const Y &amp;</paramtype></parameter><purpose>add a relative value to an absolute one </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af1daef9189d698db828f227c1da91b52" name="operator+"><type>BOOST_CONSTEXPR <classname>absolute</classname>&lt; Y &gt;</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="rval"><paramtype>const Y &amp;</paramtype></parameter><parameter name="aval"><paramtype>const <classname>absolute</classname>&lt; Y &gt; &amp;</paramtype></parameter><purpose>add a relative value to an absolute one </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a794efaaedde95b2779713328dbf7ff30" name="operator-"><type>BOOST_CONSTEXPR <classname>absolute</classname>&lt; Y &gt;</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="aval"><paramtype>const <classname>absolute</classname>&lt; Y &gt; &amp;</paramtype></parameter><parameter name="rval"><paramtype>const Y &amp;</paramtype></parameter><purpose>subtract a relative value from an absolute one </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aae28789630bfac57d2db7585b168981a" name="operator-"><type>BOOST_CONSTEXPR Y</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="aval1"><paramtype>const <classname>absolute</classname>&lt; Y &gt; &amp;</paramtype></parameter><parameter name="aval2"><paramtype>const <classname>absolute</classname>&lt; Y &gt; &amp;</paramtype></parameter><purpose>subtracting two absolutes gives a difference </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a11d1c69bca3e806444c730b7885226f0" name="operator*"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; <classname>absolute</classname>&lt; <classname>unit</classname>&lt; D, S &gt; &gt;, T &gt;</type><template>
          <template-type-parameter name="D"/>
          <template-type-parameter name="S"/>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>const T &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>absolute</classname>&lt; <classname>unit</classname>&lt; D, S &gt; &gt; &amp;</paramtype></parameter><purpose>creates a quantity from an absolute unit and a raw value </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a5028af12075f32c02105c5a2a421eb8d" name="operator*"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; <classname>absolute</classname>&lt; <classname>unit</classname>&lt; D, S &gt; &gt;, T &gt;</type><template>
          <template-type-parameter name="D"/>
          <template-type-parameter name="S"/>
          <template-type-parameter name="T"/>
        </template><parameter name=""><paramtype>const <classname>absolute</classname>&lt; <classname>unit</classname>&lt; D, S &gt; &gt; &amp;</paramtype></parameter><parameter name="t"><paramtype>const T &amp;</paramtype></parameter><purpose>creates a quantity from an absolute unit and a raw value </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aa07855a73757a4b9acf11cca3aff4928" name="operator&lt;&lt;"><type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type><template>
          <template-type-parameter name="Char"/>
          <template-type-parameter name="Traits"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; Char, Traits &gt; &amp;</paramtype></parameter><parameter name="aval"><paramtype>const <classname>absolute</classname>&lt; Y &gt; &amp;</paramtype></parameter><purpose>Print an absolute unit. </purpose></function>
</namespace>
</namespace>
<macro id="doxygen.units_reference.absolute_8hpp_1acdd6926eb7c0ecc8e45b8d2a0fcb8905" name="BOOST_UNITS_DEFINE_CONVERSION_OFFSET" kind="functionlike"><macro-parameter name="From"/><macro-parameter name="To"/><macro-parameter name="type_"/><macro-parameter name="value_"/><description><para>Macro to define the offset between two absolute units. Requires the value to be in the destination units e.g <programlisting language="c++">BOOST_UNITS_DEFINE_CONVERSION_OFFSET(celsius_base_unit, fahrenheit_base_unit, double, 32.0);
</programlisting> <computeroutput>BOOST_UNITS_DEFINE_CONVERSION_FACTOR</computeroutput> is also necessary to specify the conversion factor. Like <computeroutput>BOOST_UNITS_DEFINE_CONVERSION_FACTOR</computeroutput> this macro defines both forward and reverse conversions so defining, e.g., the conversion from celsius to fahrenheit as above will also define the inverse conversion from fahrenheit to celsius. </para></description></macro>
</header>
<header id="doxygen.units_reference.base__dimension_8hpp" name="boost/units/base_dimension.hpp">
<para>base dimensions (mass, length, time...). </para><para>base dimension definition registration. </para><namespace name="boost">
<namespace name="units">
<class id="doxygen.units_reference.classboost_1_1units_1_1base__dimension" name="base_dimension"><template>
      <template-type-parameter name="Derived"/>
      <template-nontype-parameter name="N"><type>long</type></template-nontype-parameter>
    </template><inherit access="public">ordinal&lt; N &gt;</inherit><description><para>Defines a base dimension. To define a dimension you need to provide the derived class (CRTP) and a unique integer. <programlisting language="c++">struct my_dimension : <link linkend="doxygen.units_reference.classboost_1_1units_1_1base__dimension">boost::units::base_dimension</link>&lt;my_dimension, 1&gt; {};
</programlisting> It is designed so that you will get an error message if you try to use the same value in multiple definitions. </para></description><typedef id="doxygen.units_reference.classboost_1_1units_1_1base__dimension_1a358ec1d8f27bf739edb3a87a905db583" name="dimension_type"><purpose>A convenience typedef. Equivalent to <link linkend="doxygen.units_reference.structboost_1_1units_1_1derived__dimension_1a317ef626eef022657852e888d42c35e9">boost::units::derived_dimension&lt;Derived,1&gt;::type</link>. </purpose><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1base__dimension_1aca307bee95a8ff5e34afe6230d84888c" name="type"><purpose>Provided for mpl compatability. </purpose><type>Derived</type></typedef>
<method-group name="friend functions">
</method-group>
</class>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.base__unit_8hpp" name="boost/units/base_unit.hpp">
<para>base unit (meter, kg, sec...). </para><para>base unit definition registration. </para><namespace name="boost">
<namespace name="units">
<class id="doxygen.units_reference.classboost_1_1units_1_1base__unit" name="base_unit"><template>
      <template-type-parameter name="Derived"/>
      <template-type-parameter name="Dim"/>
      <template-nontype-parameter name="N"><type>long</type></template-nontype-parameter>
    </template><inherit access="public">ordinal&lt; N &gt;</inherit><description><para>Defines a base unit. To define a unit you need to provide the derived class (CRTP), a dimension list and a unique integer. <programlisting language="c++">struct my_unit : <link linkend="doxygen.units_reference.classboost_1_1units_1_1base__unit">boost::units::base_unit</link>&lt;my_unit, length_dimension, 1&gt; {};
</programlisting> It is designed so that you will get an error message if you try to use the same value in multiple definitions. </para></description><typedef id="doxygen.units_reference.classboost_1_1units_1_1base__unit_1a1553f8eba391e7516a5b2986d62e14e9" name="dimension_type"><purpose>The dimensions of this base unit. </purpose><type>Dim</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1base__unit_1a799fcd76c953807dffd7637172ddb1e6" name="type"><purpose>Provided for mpl compatability. </purpose><type>Derived</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1base__unit_1aac84e4e7d67a9e49184fb79b451cf98a" name="unit_type"><purpose>The unit corresponding to this base unit. </purpose><type><emphasis>unspecified</emphasis></type></typedef>
<method-group name="friend functions">
</method-group>
</class>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.cmath_8hpp" name="boost/units/cmath.hpp">
<para>Overloads of functions in &lt;cmath&gt; for quantities. </para><para>Only functions for which a dimensionally-correct result type can be determined are overloaded. All functions work with dimensionless quantities. </para><namespace name="boost">
<namespace name="units">







































































<function id="doxygen.units_reference.namespaceboost_1_1units_1adea147273f9ad110ca11e91be2f195ac" name="isfinite"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ae72e8a119978de8847ddecc0b9b0d2b3" name="isinf"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ada556aba66b47fd5fa31864b5cd662f9" name="isnan"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a5e58c1889fbecc84503be7d625f1d97c" name="isnormal"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a9566c73dc139895684976f2a3cbf8363" name="isgreater"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a062c113c1ec53660013dd4e476cc3a59" name="isgreaterequal"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aff925d20e01a9cd3faaa8a6b51775337" name="isless"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a932ed1e975508ea91fcae2fd833274eb" name="islessequal"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a6bad6c4acbbe247db2fadc94d81268ce" name="islessgreater"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aea7b0895322ed337e6ec5e993aeba9eb" name="isunordered"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aa67ae53699a5368612a56c2e94ea4bfe" name="abs"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a0e5afb5eaa26512ce57ebced62ec5901" name="ceil"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af0c760e09889f617cdcdcd585799a455" name="copysign"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a5f6479dadb7d1689fa5d92c30456ac41" name="fabs"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ab158d118a26a6dd62354ca9fba3f5c9b" name="floor"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a7c156d71b61af494e1f85a6a4638c846" name="fdim"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a12c672ccaddafabb8b13712567cb5a01" name="fmax"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ab20fd422966ea03de9dd231478549ac8" name="fmin"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a7354d8aa513ae8495305e8daf6197b2d" name="fpclassify"><type>BOOST_CONSTEXPR int</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1acd1c4d9b5eff3b52e362ce6cfe3bb00b" name="hypot"><type>BOOST_CONSTEXPR <classname>root_typeof_helper</classname>&lt; typenameadd_typeof_helper&lt; typenamepower_typeof_helper&lt; <classname>quantity</classname>&lt; Unit, Y &gt;, <classname>static_rational</classname>&lt; 2 &gt; &gt;::type, typenamepower_typeof_helper&lt; <classname>quantity</classname>&lt; Unit, Y &gt;, <classname>static_rational</classname>&lt; 2 &gt; &gt;::type &gt;::type, <classname>static_rational</classname>&lt; 2 &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a4eea5f3ba9bf7c9ce182bec49c61a44f" name="nextafter"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a9bcb8aa39885b7c90ffc5fa97b763ae0" name="nexttoward"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a608f02d1de353289a5e1468eae91d60d" name="round"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a35e0037bce663a77ae0fdfc6f3f18723" name="signbit"><type>BOOST_CONSTEXPR int</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1acf6c564b2d340b46ba2ce7076bbbe9c5" name="trunc"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a1639622c848d34b50a11916675130f0d" name="fmod"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ae45006f6dd0da83c8ec57ecfd4c4cdc4" name="modf"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype><classname>quantity</classname>&lt; Unit, Y &gt; *</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a88650cca86f4a7cf533b442c1b0f3023" name="frexp"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
          <template-type-parameter name="Int"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="ex"><paramtype>Int *</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a9255cbbb3821ddca8a7e4a72b05012f7" name="pow"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt;</type><template>
          <template-type-parameter name="S"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q1"><paramtype>const <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt; &amp;</paramtype></parameter><parameter name="q2"><paramtype>const <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt; &amp;</paramtype></parameter><description><para>For non-dimensionless quantities, integral and rational powers and roots can be computed by <computeroutput>pow&lt;Ex&gt;</computeroutput> and <computeroutput>root&lt;Rt&gt;</computeroutput> respectively. </para></description></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a2fc39aca3eada71de35c941e6e43fe1e" name="exp"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt;</type><template>
          <template-type-parameter name="S"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a3d7c645e149334cb8fe78365430c957b" name="ldexp"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; Unit, Y &gt;</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
          <template-type-parameter name="Int"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="ex"><paramtype>const Int &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af7677210b18c5afdca862001617f0827" name="log"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt;</type><template>
          <template-type-parameter name="S"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a2ad284a6033c5463bf48eee9eadbda1d" name="log10"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt;</type><template>
          <template-type-parameter name="S"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(S), Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ad74be5dba220dffc7e6ac30caca464d0" name="sqrt"><type>BOOST_CONSTEXPR <classname>root_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit, Y &gt;, <classname>static_rational</classname>&lt; 2 &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a3d63442c98221a1c620abd8d84b6b5c8" name="cos"><type>BOOST_CONSTEXPR <classname>dimensionless_quantity</classname>&lt; si::system, Y &gt;::type</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="theta"><paramtype>const <classname>quantity</classname>&lt; si::plane_angle, Y &gt; &amp;</paramtype></parameter><purpose>cos of theta in radians </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ab734b221989e06fdc61e341b43487a16" name="sin"><type>BOOST_CONSTEXPR <classname>dimensionless_quantity</classname>&lt; si::system, Y &gt;::type</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="theta"><paramtype>const <classname>quantity</classname>&lt; si::plane_angle, Y &gt; &amp;</paramtype></parameter><purpose>sin of theta in radians </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af1784ee5c815ed35fda5eb530641caf2" name="tan"><type>BOOST_CONSTEXPR <classname>dimensionless_quantity</classname>&lt; si::system, Y &gt;::type</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="theta"><paramtype>const <classname>quantity</classname>&lt; si::plane_angle, Y &gt; &amp;</paramtype></parameter><purpose>tan of theta in radians </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1acf63e101c9fe3535a662db0375073428" name="cos"><type>BOOST_CONSTEXPR <classname>dimensionless_quantity</classname>&lt; System, Y &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="theta"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; plane_angle_dimension, System &gt;, Y &gt; &amp;</paramtype></parameter><purpose>cos of theta in other angular units </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ac9abd03874e4936a7e64432092048b1a" name="sin"><type>BOOST_CONSTEXPR <classname>dimensionless_quantity</classname>&lt; System, Y &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="theta"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; plane_angle_dimension, System &gt;, Y &gt; &amp;</paramtype></parameter><purpose>sin of theta in other angular units </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a6760b673e62c7d6bf948a91960557269" name="tan"><type>BOOST_CONSTEXPR <classname>dimensionless_quantity</classname>&lt; System, Y &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="theta"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; plane_angle_dimension, System &gt;, Y &gt; &amp;</paramtype></parameter><purpose>tan of theta in other angular units </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aacdec72aaf3338bc00c659fc0ba6ba7d" name="acos"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; <classname>unit</classname>&lt; plane_angle_dimension, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt;</type><template>
          <template-type-parameter name="Y"/>
          <template-type-parameter name="System"/>
        </template><parameter name="val"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt; &amp;</paramtype></parameter><purpose>acos of dimensionless quantity returning angle in same system </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a2a53e23736557680ccdd7cee4dea92b1" name="acos"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; angle::radian_base_unit::unit_type, Y &gt;</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="val"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, heterogeneous_dimensionless_system &gt;, Y &gt; &amp;</paramtype></parameter><purpose>acos of dimensionless quantity returning angle in radians </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a3fba4c21b785980afd711e2065f75010" name="asin"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; <classname>unit</classname>&lt; plane_angle_dimension, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt;</type><template>
          <template-type-parameter name="Y"/>
          <template-type-parameter name="System"/>
        </template><parameter name="val"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt; &amp;</paramtype></parameter><purpose>asin of dimensionless quantity returning angle in same system </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aade22d0f731b142ff56cf60dcd74fbe5" name="asin"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; angle::radian_base_unit::unit_type, Y &gt;</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="val"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, heterogeneous_dimensionless_system &gt;, Y &gt; &amp;</paramtype></parameter><purpose>asin of dimensionless quantity returning angle in radians </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ac10b27a570ebd4667cfac7c65456882f" name="atan"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; <classname>unit</classname>&lt; plane_angle_dimension, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt;</type><template>
          <template-type-parameter name="Y"/>
          <template-type-parameter name="System"/>
        </template><parameter name="val"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt; &amp;</paramtype></parameter><purpose>atan of dimensionless quantity returning angle in same system </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ab556fce418fb5fb1785f2f791589d50b" name="atan"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; angle::radian_base_unit::unit_type, Y &gt;</type><template>
          <template-type-parameter name="Y"/>
        </template><parameter name="val"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, heterogeneous_dimensionless_system &gt;, Y &gt; &amp;</paramtype></parameter><purpose>atan of dimensionless quantity returning angle in radians </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a4bebf665762a48ee31a3f60b41790620" name="atan2"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; <classname>unit</classname>&lt; plane_angle_dimension, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt;</type><template>
          <template-type-parameter name="Y"/>
          <template-type-parameter name="Dimension"/>
          <template-type-parameter name="System"/>
        </template><parameter name="y"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; Dimension, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt; &amp;</paramtype></parameter><parameter name="x"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; Dimension, <classname>homogeneous_system</classname>&lt; System &gt; &gt;, Y &gt; &amp;</paramtype></parameter><purpose>atan2 of <computeroutput>value_type</computeroutput> returning angle in radians </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aa93537e7664e7a71e57cff7db303694a" name="atan2"><type>BOOST_CONSTEXPR <classname>quantity</classname>&lt; angle::radian_base_unit::unit_type, Y &gt;</type><template>
          <template-type-parameter name="Y"/>
          <template-type-parameter name="Dimension"/>
          <template-type-parameter name="System"/>
        </template><parameter name="y"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; Dimension, <classname>heterogeneous_system</classname>&lt; System &gt; &gt;, Y &gt; &amp;</paramtype></parameter><parameter name="x"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; Dimension, <classname>heterogeneous_system</classname>&lt; System &gt; &gt;, Y &gt; &amp;</paramtype></parameter><purpose>atan2 of <computeroutput>value_type</computeroutput> returning angle in radians </purpose></function>







</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.config_8hpp" name="boost/units/config.hpp">
<macro id="doxygen.units_reference.config_8hpp_1a64ade94aaf4b31a64cce093d9c81dd48" name="BOOST_UNITS_REQUIRE_LAYOUT_COMPATIBILITY"><description><para>If defined will trigger a static assertion if quantity&lt;Unit, T&gt; is not layout compatible with T </para></description></macro>
<macro id="doxygen.units_reference.config_8hpp_1addcc51763a2c59df42ffae0e0b89de51" name="BOOST_UNITS_NO_COMPILER_CHECK"><description><para>If defined will disable a preprocessor check that the compiler is able to handle the library. </para></description></macro>
<macro id="doxygen.units_reference.config_8hpp_1aa74bed8280cb6e2dfe9b47af262a8f90" name="BOOST_UNITS_CHECK_HOMOGENEOUS_UNITS"><description><para>Enable checking to verify that a homogeneous system is actually capable of representing all the dimensions that it is used with. Off by default. </para></description></macro>
</header>
<header id="doxygen.units_reference.conversion_8hpp" name="boost/units/conversion.hpp">
<para>Template for defining conversions between quantities. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1conversion__helper" name="conversion_helper"><template>
      <template-type-parameter name="From"/>
      <template-type-parameter name="To"/>
    </template><description><para>Template for defining conversions between quantities. This template should be specialized for every quantity that allows conversions. For example, if you have a two units called pair and dozen you would write <programlisting language="c++">namespace <link linkend="doxygen.units_reference.namespaceboost">boost</link> {
namespace units {
template&lt;class T0, class T1&gt;
struct conversion_helper&lt;quantity&lt;dozen, T0&gt;, quantity&lt;pair, T1&gt; &gt;
{
    static quantity&lt;pair, T1&gt; <link linkend="doxygen.units_reference.structboost_1_1units_1_1conversion__helper_1aa801555b97abccfdc586ec0a5621c24d">convert</link>(const quantity&lt;dozen, T0&gt;&amp; source)
    {
        return(<link linkend="doxygen.units_reference.classboost_1_1units_1_1quantity_1a640b4cf05fa9f056e03ad02286dd9af3">quantity&lt;pair, T1&gt;::from_value</link>(6 * source.value()));
    }
};
}
}
</programlisting></para><para>In most cases, the predefined specializations for <computeroutput>unit</computeroutput> and <computeroutput>absolute</computeroutput> should be sufficient, so users should rarely need to use this. </para></description><method-group name="public static functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1conversion__helper_1aa801555b97abccfdc586ec0a5621c24d" name="convert" specifiers="static"><type>BOOST_CONSTEXPR To</type><parameter name=""><paramtype>const From &amp;</paramtype></parameter></method>
</method-group>
</struct>





































































<function id="doxygen.units_reference.namespaceboost_1_1units_1a912df40eb09fe81533d55fe987bbac18" name="conversion_factor"><type><emphasis>unspecified</emphasis></type><template>
          <template-type-parameter name="FromUnit"/>
          <template-type-parameter name="ToUnit"/>
        </template><parameter name=""><paramtype>const FromUnit &amp;</paramtype></parameter><parameter name=""><paramtype>const ToUnit &amp;</paramtype></parameter><purpose>Find the conversion factor between two units. </purpose></function>























































</namespace>
</namespace>
<macro id="doxygen.units_reference.conversion_8hpp_1aa78ae60d9bfdda540d4b2f2f920d573f" name="BOOST_UNITS_DEFINE_CONVERSION_FACTOR" kind="functionlike"><macro-parameter name="Source"/><macro-parameter name="Destination"/><macro-parameter name="type_"/><macro-parameter name="value_"/><description><para>Defines the conversion factor from a base unit to any unit or to another base unit with the correct dimensions. Uses of this macro must appear at global scope. If the destination unit is a base unit or a unit that contains only one base unit which is raised to the first power (e.g. feet-&gt;meters) the reverse (meters-&gt;feet in this example) need not be defined explicitly. </para></description></macro>
<macro id="doxygen.units_reference.conversion_8hpp_1ae76d9aa3df535df255af7682a2a7a123" name="BOOST_UNITS_DEFINE_CONVERSION_FACTOR_TEMPLATE" kind="functionlike"><macro-parameter name="Params"/><macro-parameter name="Source"/><macro-parameter name="Destination"/><macro-parameter name="type_"/><macro-parameter name="value_"/><description><para>Defines the conversion factor from a base unit to any other base unit with the same dimensions. Params should be a Boost.Preprocessor Seq of template parameters, such as (class T1)(class T2) All uses of must appear at global scope. The reverse conversion will be defined automatically. This macro is a little dangerous, because, unlike the non-template form, it will silently fail if either base unit is scaled. This is probably not an issue if both the source and destination types depend on the template parameters, but be aware that a generic conversion to kilograms is not going to work. </para></description></macro>
<macro id="doxygen.units_reference.conversion_8hpp_1a8cc4eaf6e566cdd901a919687d5a42a9" name="BOOST_UNITS_DEFAULT_CONVERSION" kind="functionlike"><macro-parameter name="Source"/><macro-parameter name="Dest"/><description><para>Specifies the default conversion to be applied when no direct conversion is available. Source is a base unit. Dest is any unit with the same dimensions. </para></description></macro>
<macro id="doxygen.units_reference.conversion_8hpp_1a7a8081f46f069c9fcd5b5bda05902048" name="BOOST_UNITS_DEFAULT_CONVERSION_TEMPLATE" kind="functionlike"><macro-parameter name="Params"/><macro-parameter name="Source"/><macro-parameter name="Dest"/><description><para>Specifies the default conversion to be applied when no direct conversion is available. Params is a PP Sequence of template arguments. Source is a base unit. Dest is any unit with the same dimensions. The source must not be a scaled base unit. </para></description></macro>
</header>
<header id="doxygen.units_reference.derived__dimension_8hpp" name="boost/units/derived_dimension.hpp">
<namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1derived__dimension" name="derived_dimension"><template>
      <template-type-parameter name="DT1"><default>dimensionless_type</default></template-type-parameter>
      <template-nontype-parameter name="E1"><type>long</type><default>0</default></template-nontype-parameter>
      <template-type-parameter name="DT2"><default>dimensionless_type</default></template-type-parameter>
      <template-nontype-parameter name="E2"><type>long</type><default>0</default></template-nontype-parameter>
      <template-type-parameter name="DT3"><default>dimensionless_type</default></template-type-parameter>
      <template-nontype-parameter name="E3"><type>long</type><default>0</default></template-nontype-parameter>
      <template-type-parameter name="DT4"><default>dimensionless_type</default></template-type-parameter>
      <template-nontype-parameter name="E4"><type>long</type><default>0</default></template-nontype-parameter>
      <template-type-parameter name="DT5"><default>dimensionless_type</default></template-type-parameter>
      <template-nontype-parameter name="E5"><type>long</type><default>0</default></template-nontype-parameter>
      <template-type-parameter name="DT6"><default>dimensionless_type</default></template-type-parameter>
      <template-nontype-parameter name="E6"><type>long</type><default>0</default></template-nontype-parameter>
      <template-type-parameter name="DT7"><default>dimensionless_type</default></template-type-parameter>
      <template-nontype-parameter name="E7"><type>long</type><default>0</default></template-nontype-parameter>
      <template-type-parameter name="DT8"><default>dimensionless_type</default></template-type-parameter>
      <template-nontype-parameter name="E8"><type>long</type><default>0</default></template-nontype-parameter>
    </template><purpose>A utility class for defining composite dimensions with integer powers. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1derived__dimension_1a317ef626eef022657852e888d42c35e9" name="type"><type><emphasis>unspecified</emphasis></type></typedef>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.dim_8hpp" name="boost/units/dim.hpp">
<para>Handling of fundamental dimension/exponent pairs. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1dim" name="dim"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="V"/>
    </template><purpose>Dimension tag/exponent pair for a single fundamental dimension. </purpose><description><para>The dim class represents a single dimension tag/dimension exponent pair. That is, <computeroutput>dim&lt;tag_type,value_type&gt;</computeroutput> is a pair where <computeroutput>tag_type</computeroutput> represents the fundamental dimension being represented and <computeroutput>value_type</computeroutput> represents the exponent of that fundamental dimension as a <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput>. <computeroutput>tag_type</computeroutput> must be a derived from a specialization of <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1base__dimension">base_dimension</link></computeroutput>. Specialization of the following Boost.MPL metafunctions are provided - @c mpl::plus for two @c dims
- @c mpl::minus for two @c dims
- @c mpl::negate for a @c dim
</para><para>These metafunctions all operate on the exponent, and require that the <computeroutput>dim</computeroutput> operands have the same base dimension tag. In addition, multiplication and division by <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput> is supported. - @c mpl::times for a @c static_rational and a @c dim in either order
- @c mpl::divides for a @c static_rational and a @c dim in either order
</para><para>These metafunctions likewise operate on the exponent only. </para></description><typedef id="doxygen.units_reference.structboost_1_1units_1_1dim_1a472a9554df8b8d6bc33edfe2c9ee6727" name="type"><type><classname>dim</classname></type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1dim_1a5e9991021c6fba125ca468d4c77041a8" name="tag"><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1dim_1a35b82a36328d694c0acdbb1f1a8aa8c8" name="tag_type"><type>T</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1dim_1aa27d946457c40d3934e759a3ca79ab74" name="value_type"><type>V</type></typedef>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.dimension_8hpp" name="boost/units/dimension.hpp">
<para>Core metaprogramming utilities for compile-time dimensional analysis. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1make__dimension__list" name="make_dimension_list"><template>
      <template-type-parameter name="Seq"/>
    </template><description><para>Reduce dimension list to cardinal form. This algorithm collapses duplicate base dimension tags and sorts the resulting list by the tag ordinal value. Dimension lists that resolve to the same dimension are guaranteed to be <sbr/>
 represented by an identical type.</para><para>The argument should be an MPL forward sequence containing instances of the <computeroutput>dim</computeroutput> template.</para><para>The result is also an MPL forward sequence. It also supports the following metafunctions to allow use as a dimension.</para><para><itemizedlist>
<listitem><para><computeroutput>mpl::plus</computeroutput> is defined only on two equal dimensions and returns the argument unchanged.</para>
</listitem><listitem><para><computeroutput>mpl::minus</computeroutput> is defined only for two equal dimensions and returns the argument unchanged.</para>
</listitem><listitem><para><computeroutput>mpl::negate</computeroutput> will return its argument unchanged.</para>
</listitem><listitem><para><computeroutput>mpl::times</computeroutput> is defined for any dimensions and adds corresponding exponents.</para>
</listitem><listitem><para><computeroutput>mpl::divides</computeroutput> is defined for any dimensions and subtracts the exponents of the right had argument from the corresponding exponents of the left had argument. Missing base dimension tags are assumed to have an exponent of zero.</para>
</listitem><listitem><para><computeroutput><link linkend="doxygen.units_reference.structboost_1_1units_1_1static__power">static_power</link></computeroutput> takes a dimension and a <link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link> and multiplies all the exponents of the dimension by the <link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link>.</para>
</listitem><listitem><para><computeroutput><link linkend="doxygen.units_reference.structboost_1_1units_1_1static__root">static_root</link></computeroutput> takes a dimension and a <link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link> and divides all the exponents of the dimension by the <link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link>. </para>
</listitem></itemizedlist>
</para></description><typedef id="doxygen.units_reference.structboost_1_1units_1_1make__dimension__list_1a3d6b54ecfe0e28291e98297dafc73c77" name="type"><type><emphasis>unspecified</emphasis></type></typedef>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.dimensionless__quantity_8hpp" name="boost/units/dimensionless_quantity.hpp">
<para>Utility class to simplify construction of dimensionless quantities. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1dimensionless__quantity" name="dimensionless_quantity"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Y"/>
    </template><purpose>Utility class to simplify construction of dimensionless quantities. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1dimensionless__quantity_1a367be9943b4f8ae0a0abeadaf7a7ecb2" name="type"><type><classname>quantity</classname>&lt; typename <classname>dimensionless_unit</classname>&lt; System &gt;::type, Y &gt;</type></typedef>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.dimensionless__type_8hpp" name="boost/units/dimensionless_type.hpp">
<para>Dimension lists in which all exponents resolve to zero reduce to <computeroutput>dimensionless_type</computeroutput>. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1dimensionless__type" name="dimensionless_type"><purpose>Dimension lists in which all exponents resolve to zero reduce to <computeroutput><link linkend="doxygen.units_reference.structboost_1_1units_1_1dimensionless__type">dimensionless_type</link></computeroutput>. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1dimensionless__type_1ad9db7535a176f395fbfc2571e8655e91" name="type"><type><classname>dimensionless_type</classname></type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1dimensionless__type_1ab6fcce885e72292790f60bbc5b57cfa6" name="tag"><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1dimensionless__type_1aecb46a118bfc0844a662969b5a1eb695" name="size"><type>mpl::long_&lt; 0 &gt;</type></typedef>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.dimensionless__unit_8hpp" name="boost/units/dimensionless_unit.hpp">
<para>Utility class to simplify construction of dimensionless units in a system. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1dimensionless__unit" name="dimensionless_unit"><template>
      <template-type-parameter name="System"/>
    </template><purpose>Utility class to simplify construction of dimensionless units in a system. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1dimensionless__unit_1a98cdd80d9bf7988ba036cb5b3070e1d1" name="type"><type><classname>unit</classname>&lt; <classname>dimensionless_type</classname>, System &gt;</type></typedef>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.get__dimension_8hpp" name="boost/units/get_dimension.hpp">
<para>Get the dimension of a unit, absolute unit and quantity. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1get__dimension" name="get_dimension"><template>
      <template-type-parameter name="T"/>
    </template></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1get__dimension_3_01absolute_3_01Unit_01_4_01_4" name="get_dimension"><template>
      <template-type-parameter name="Unit"/>
    </template><specialization><template-arg>absolute&lt; Unit &gt;</template-arg></specialization><purpose>Get the dimension of an absolute unit. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1get__dimension_3_01absolute_3_01Unit_01_4_01_4_1ae2f3e2540fb4acce2256bf0dbdd77f22" name="type"><type><classname>get_dimension</classname>&lt; Unit &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1get__dimension_3_01quantity_3_01Unit_00_01Y_01_4_01_4" name="get_dimension"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg></specialization><purpose>Get the dimension of a quantity. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1get__dimension_3_01quantity_3_01Unit_00_01Y_01_4_01_4_1ac1f285c484c271d2a664314721c4121d" name="type"><type><classname>get_dimension</classname>&lt; Unit &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1get__dimension_3_01unit_3_01Dim_00_01System_01_4_01_4" name="get_dimension"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><purpose>Get the dimension of a unit. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1get__dimension_3_01unit_3_01Dim_00_01System_01_4_01_4_1ab9629585f75d84128b6b4f6e5b4427ae" name="type"><type>Dim</type></typedef>
</struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.get__system_8hpp" name="boost/units/get_system.hpp">
<para>Get the system of a unit, absolute unit or quantity. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1get__system" name="get_system"><template>
      <template-type-parameter name="T"/>
    </template></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1get__system_3_01absolute_3_01Unit_01_4_01_4" name="get_system"><template>
      <template-type-parameter name="Unit"/>
    </template><specialization><template-arg>absolute&lt; Unit &gt;</template-arg></specialization><purpose>Get the system of an absolute unit. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1get__system_3_01absolute_3_01Unit_01_4_01_4_1a62fec2bb6be5ffb5fc5d6d76278794c1" name="type"><type><classname>get_system</classname>&lt; Unit &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1get__system_3_01quantity_3_01Unit_00_01Y_01_4_01_4" name="get_system"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg></specialization><purpose>Get the system of a quantity. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1get__system_3_01quantity_3_01Unit_00_01Y_01_4_01_4_1acc552459014bc8d2a02575e727768556" name="type"><type><classname>get_system</classname>&lt; Unit &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1get__system_3_01unit_3_01Dim_00_01System_01_4_01_4" name="get_system"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><purpose>Get the system of a unit. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1get__system_3_01unit_3_01Dim_00_01System_01_4_01_4_1a79af39f52bbf5f7393de8203b0e83a51" name="type"><type>System</type></typedef>
</struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.heterogeneous__system_8hpp" name="boost/units/heterogeneous_system.hpp">
<para>A heterogeneous system is a sorted list of base unit/exponent pairs. </para><namespace name="boost">
<namespace name="mpl">
</namespace>
<namespace name="units">






























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.homogeneous__system_8hpp" name="boost/units/homogeneous_system.hpp">
<namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1homogeneous__system" name="homogeneous_system"><template>
      <template-type-parameter name="L"/>
    </template><description><para>A system that can uniquely represent any unit which can be composed from a linearly independent set of base units. It is safe to rebind a unit with such a system to different dimensions.</para><para>Do not construct this template directly. Use <link linkend="doxygen.units_reference.structboost_1_1units_1_1make__system">make_system</link> instead. </para></description></struct><struct id="doxygen.units_reference.structboost_1_1units_1_1static__power" name="static_power"><template>
      <template-type-parameter name="DL"/>
      <template-type-parameter name="Ex"/>
    </template><purpose>Raise a dimension list to a scalar power. </purpose></struct><struct id="doxygen.units_reference.structboost_1_1units_1_1static__root" name="static_root"><template>
      <template-type-parameter name="DL"/>
      <template-type-parameter name="Rt"/>
    </template><purpose>Take a scalar root of a dimension list. </purpose></struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.io_8hpp" name="boost/units/io.hpp">
<para>Stream input and output for rationals, units and quantities. </para><para>Functions and manipulators for output and input of units and quantities. symbol and name format, and engineering and binary autoprefix. Serialization output is also supported. </para><namespace name="boost">
<namespace name="serialization">
<function id="doxygen.units_reference.namespaceboost_1_1serialization_1a138f7fe675c0e6a3d4c4b7635e204875" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype><classname>boost::units::unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const unsigned int</paramtype></parameter><purpose>Boost Serialization library support for units. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1serialization_1ac9014927fcad3311de298edba75dbb51" name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="q"><paramtype><classname>boost::units::quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const unsigned int</paramtype></parameter><purpose>Boost Serialization library support for quantities. </purpose></function>
</namespace>
<namespace name="units">
<enum id="doxygen.units_reference.namespaceboost_1_1units_1a1196f544a4159087bb8c023307c862d5" name="format_mode"><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a1196f544a4159087bb8c023307c862d5ae1c527061ce9db52d5fdfb5e0ab4004e" name="symbol_fmt"><default>0</default></enumvalue><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a1196f544a4159087bb8c023307c862d5ab9b90ac3c07f0e6de95c5a9cb484ffee" name="name_fmt"><default>1</default><purpose>default - reduces unit names to known symbols for both base and derived units. </purpose></enumvalue><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a1196f544a4159087bb8c023307c862d5afd4cd8cea960a761b628b8f8ac68998e" name="raw_fmt"><default>2</default><purpose>output full unit names for base and derived units, for example "meter". </purpose></enumvalue><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a1196f544a4159087bb8c023307c862d5a124cc53c6d03e510cacb04ce6947dc3f" name="typename_fmt"><default>3</default><purpose>output only symbols for base units (but not derived units), for example "m". </purpose></enumvalue><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a1196f544a4159087bb8c023307c862d5a545829974d9f5749d3d351e5270ab8cf" name="fmt_mask"><default>3</default><purpose>output demangled typenames (useful only for diagnosis). </purpose></enumvalue><purpose>format of output of units, for example "m" or "meter". </purpose></enum>
<enum id="doxygen.units_reference.namespaceboost_1_1units_1a9b5e05aa266ce463788285cc3f93c77a" name="autoprefix_mode"><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a9b5e05aa266ce463788285cc3f93c77aa81057ced61b82b02ad65015b077e152a" name="autoprefix_none"><default>0</default></enumvalue><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a9b5e05aa266ce463788285cc3f93c77aa656cf25d07bd500aa065b128b2c2af89" name="autoprefix_engineering"><default>4</default><purpose>No automatic prefix. </purpose></enumvalue><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a9b5e05aa266ce463788285cc3f93c77aa19690a03ff3e28dc23006c7bb9ce9109" name="autoprefix_binary"><default>8</default><purpose>Scale and prefix with 10^3 multiples, 1234.5 m output as 1.2345 km. </purpose></enumvalue><enumvalue id="doxygen.units_reference.namespaceboost_1_1units_1a9b5e05aa266ce463788285cc3f93c77aa00e95dd50913a7a6f2cc445d1c3bb102" name="autoprefix_mask"><default>12</default><purpose>Scale and prefix with 2^10 (1024) multiples, 1024 as 1 kb. </purpose></enumvalue><purpose>automatic scaling and prefix (controlled by value of quantity) a, if any, </purpose></enum>















































<function id="doxygen.units_reference.namespaceboost_1_1units_1a1ce3c0d888e46785152dc168234751b5" name="to_string"><type>std::string</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>const T &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aeeaeb02c86ba3dd3e53bc11c94b6a096" name="to_string"><type>std::string</type><template>
          <template-nontype-parameter name="N"><type>integer_type</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>const <classname>static_rational</classname>&lt; N &gt; &amp;</paramtype></parameter><purpose>get string representation of integral-valued <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput>. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a2a151186b1ee9992146522d96656d8d7" name="to_string"><type>std::string</type><template>
          <template-nontype-parameter name="N"><type>integer_type</type></template-nontype-parameter>
          <template-nontype-parameter name="D"><type>integer_type</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>const <classname>static_rational</classname>&lt; N, D &gt; &amp;</paramtype></parameter><purpose>get string representation of <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput>. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a00ce4ca92e1d26ff3173ec4530787296" name="operator&lt;&lt;"><type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type><template>
          <template-type-parameter name="Char"/>
          <template-type-parameter name="Traits"/>
          <template-nontype-parameter name="N"><type>integer_type</type></template-nontype-parameter>
          <template-nontype-parameter name="D"><type>integer_type</type></template-nontype-parameter>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; Char, Traits &gt; &amp;</paramtype></parameter><parameter name="r"><paramtype>const <classname>static_rational</classname>&lt; N, D &gt; &amp;</paramtype></parameter><purpose>Write <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput> to <computeroutput>std::basic_ostream</computeroutput>. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a93e6d53521727c94098c9cc1904cd037" name="get_flags"><type>long</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="mask"><paramtype>long</paramtype></parameter><purpose>returns flags controlling output. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ae3f514d155dae78281433521c5f405aa" name="set_flags"><type>void</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="new_flags"><paramtype>long</paramtype></parameter><parameter name="mask"><paramtype>long</paramtype></parameter><purpose>Set new flags controlling output format. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a5b6d87f812eea8db23ba920be8b69fa6" name="get_format"><type>format_mode</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>returns flags controlling output format. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a42100a05fc01dd058c5224baad6db988" name="set_format"><type>void</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="new_mode"><paramtype>format_mode</paramtype></parameter><purpose>Set new flags controlling output format. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ad2c29bc0af41ed67badd420d2e7ab250" name="typename_format"><type>std::ios_base &amp;</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>Set new flags for type_name output format. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1adb73b972199ccf386daeb3a10f55a108" name="raw_format"><type>std::ios_base &amp;</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>set new flag for raw format output, for example "m". </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aea714529635e7985a7c83121f0a60a50" name="symbol_format"><type>std::ios_base &amp;</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>set new format flag for symbol output, for example "m". </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af2f0374eac16366271c523edab8acb54" name="name_format"><type>std::ios_base &amp;</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>set new format for name output, for example "meter". </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a7f679c69346b10e9aa208ddd52ce4ce1" name="get_autoprefix"><type>autoprefix_mode</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>get autoprefix flags for output. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a96c5a4456beca5c44f8735f8e090e10a" name="set_autoprefix"><type>void</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><parameter name="new_mode"><paramtype>autoprefix_mode</paramtype></parameter><purpose>Get format for output. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ab4e60d56600dc97dba2b1353cc307e41" name="no_prefix"><type>std::ios_base &amp;</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>Clear autoprefix flags. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a78fa2b4381d9773927168ea33400f02f" name="engineering_prefix"><type>std::ios_base &amp;</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>Set flag for engineering prefix, so 1234.5 m displays as "1.2345 km". </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1afa737b4f4b5277bd2c2e4be73e42cc8b" name="binary_prefix"><type>std::ios_base &amp;</type><parameter name="ios"><paramtype>std::ios_base &amp;</paramtype></parameter><purpose>Set flag for binary prefix, so 1024 byte displays as "1 Kib". </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1acacbbd4944a1b447643c3e46f8ab64e3" name="autoprefix_norm"><type>double</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="arg"><paramtype>const T &amp;</paramtype></parameter><description><para>ADL customization point for automatic prefixing. Returns a non-negative value. Implemented as std::abs for built-in types. </para></description></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aeeb6a033e138ad38f28e43c0d5d27e6b" name="typename_string"><type>std::string</type><template>
          <template-type-parameter name="Dimension"/>
          <template-type-parameter name="System"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dimension, System &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1afdb827e83cb2eb92605e6fde618b6ce1" name="symbol_string"><type>std::string</type><template>
          <template-type-parameter name="Dimension"/>
          <template-type-parameter name="System"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dimension, System &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a2f57a7cc022207dc963d0a60a2e833ad" name="name_string"><type>std::string</type><template>
          <template-type-parameter name="Dimension"/>
          <template-type-parameter name="System"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dimension, System &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a00df6d0c29e9cad3eddf50f0cadeb85e" name="operator&lt;&lt;"><type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type><template>
          <template-type-parameter name="Char"/>
          <template-type-parameter name="Traits"/>
          <template-type-parameter name="Dimension"/>
          <template-type-parameter name="System"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; Char, Traits &gt; &amp;</paramtype></parameter><parameter name="u"><paramtype>const <classname>unit</classname>&lt; Dimension, System &gt; &amp;</paramtype></parameter><description><para>Print a <computeroutput>unit</computeroutput> as a list of base units and their exponents. for @c symbol_format outputs e.g. "m s^-1" or "J".
for @c name_format  outputs e.g. "meter second^-1" or "joule".
for @c raw_format  outputs e.g. "m s^-1" or "meter kilogram^2 second^-2".
for @c typename_format  outputs the typename itself (currently demangled only on GCC). 
 </para></description></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a4d5ccaf954e4b34acc1b4b5a9d3f4570" name="operator&lt;&lt;"><type>std::basic_ostream&lt; Char, Traits &gt; &amp;</type><template>
          <template-type-parameter name="Char"/>
          <template-type-parameter name="Traits"/>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="T"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; Char, Traits &gt; &amp;</paramtype></parameter><parameter name="q"><paramtype>const <classname>quantity</classname>&lt; Unit, T &gt; &amp;</paramtype></parameter><purpose>Print a <computeroutput>quantity</computeroutput>. </purpose><description><para>Prints the value followed by the unit. If the engineering_prefix, or binary_prefix is set, tries to scale the value appropriately. For example, it might print 12.345 km instead of 12345 m. (Note does <emphasis role="bold">not</emphasis> attempt to automatically scale scalars like double, float...) </para></description></function>
























































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__dim_8hpp" name="boost/units/is_dim.hpp">
<para>Check that a type is a valid <computeroutput>dim</computeroutput>. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__dim" name="is_dim"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">mpl::false_</inherit><purpose>Check that a type is a valid <computeroutput>dim</computeroutput>. </purpose></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__dim_3_01dim_3_01T_00_01V_01_4_01_4" name="is_dim"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="V"/>
    </template><specialization><template-arg>dim&lt; T</template-arg><template-arg>V &gt;</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__dimension__list_8hpp" name="boost/units/is_dimension_list.hpp">
<para>Check that a type is a valid dimension list. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__dimension__list" name="is_dimension_list"><template>
      <template-type-parameter name="Seq"/>
    </template><inherit access="public">mpl::false_</inherit><purpose>Check that a type is a valid dimension list. </purpose></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__dimension__list_3_01dimensionless__type_01_4" name="is_dimension_list"><template>
    </template><specialization><template-arg>dimensionless_type</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__dimension__list_3_01list_3_01Item_00_01Next_01_4_01_4" name="is_dimension_list"><template>
      <template-type-parameter name="Item"/>
      <template-type-parameter name="Next"/>
    </template><specialization><template-arg>list&lt; Item</template-arg><template-arg>Next &gt;</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__dimensionless_8hpp" name="boost/units/is_dimensionless.hpp">
<para>Check if a unit or quantity is dimensionless. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__dimensionless" name="is_dimensionless"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">mpl::false_</inherit></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__dimensionless_3_01quantity_3_01Unit_00_01Y_01_4_01_4" name="is_dimensionless"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg></specialization><inherit access="public">boost::units::is_dimensionless&lt; Unit &gt;</inherit><purpose>Check if a quantity is dimensionless. </purpose></struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__dimensionless_3_01unit_3_01dimensionless__type_00_01System_01_4_01_4" name="is_dimensionless"><template>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unit&lt; dimensionless_type</template-arg><template-arg>System &gt;</template-arg></specialization><inherit access="public">mpl::true_</inherit><purpose>Check if a unit is dimensionless. </purpose></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__dimensionless__quantity_8hpp" name="boost/units/is_dimensionless_quantity.hpp">
<para>check that a type is a dimensionless quantity </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__dimensionless__quantity" name="is_dimensionless_quantity"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::units::is_quantity_of_dimension&lt; T, dimensionless_type &gt;</inherit><purpose>Check that a type is a dimensionless quantity. </purpose></struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__dimensionless__unit_8hpp" name="boost/units/is_dimensionless_unit.hpp">
<para>Check that a type is a dimensionless unit. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__dimensionless__unit" name="is_dimensionless_unit"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">boost::units::is_unit_of_dimension&lt; T, dimensionless_type &gt;</inherit><purpose>Check that a type is a dimensionless unit. </purpose></struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__quantity_8hpp" name="boost/units/is_quantity.hpp">
<para>Check that a type is a quantity. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__quantity" name="is_quantity"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">mpl::false_</inherit><purpose>Check that a type is a quantity. </purpose></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__quantity_3_01quantity_3_01Unit_00_01Y_01_4_01_4" name="is_quantity"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__quantity__of__dimension_8hpp" name="boost/units/is_quantity_of_dimension.hpp">
<para>Check that a type is a quantity of the specified dimension. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__quantity__of__dimension" name="is_quantity_of_dimension"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="Dim"/>
    </template><inherit access="public">mpl::false_</inherit><purpose>Check that a type is a quantity of the specified dimension. </purpose></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__quantity__of__dimension_3_01quantity_3_01Unit_00_01Y_01_4_00_01Dim_01_4" name="is_quantity_of_dimension"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
      <template-type-parameter name="Dim"/>
    </template><specialization><template-arg>quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg><template-arg>Dim</template-arg></specialization><inherit access="public">boost::units::is_unit_of_dimension&lt; Unit, Dim &gt;</inherit></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__quantity__of__system_8hpp" name="boost/units/is_quantity_of_system.hpp">
<para>Check that a type is a quantity in a specified system. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__quantity__of__system" name="is_quantity_of_system"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="System"/>
    </template><inherit access="public">mpl::false_</inherit><purpose>Check that a type is a quantity in a specified system. </purpose></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__quantity__of__system_3_01quantity_3_01Unit_00_01Y_01_4_00_01System_01_4" name="is_quantity_of_system"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg><template-arg>System</template-arg></specialization><inherit access="public">boost::units::is_unit_of_system&lt; Unit, System &gt;</inherit></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__unit_8hpp" name="boost/units/is_unit.hpp">
<para>Check that a type is a unit. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__unit" name="is_unit"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">mpl::false_</inherit><purpose>Check that a type is a unit. </purpose></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__unit_3_01unit_3_01Dim_00_01System_01_4_01_4" name="is_unit"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__unit__of__dimension_8hpp" name="boost/units/is_unit_of_dimension.hpp">
<para>Check that a type is a unit of the specified dimension. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__unit__of__dimension" name="is_unit_of_dimension"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="Dim"/>
    </template><inherit access="public">mpl::false_</inherit><purpose>Check that a type is a unit of the specified dimension. </purpose></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__unit__of__dimension_3_01absolute_3_01unit_3_01Dim_00_01System_01_4_01_4_00_01Dim_01_4" name="is_unit_of_dimension"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>absolute&lt; unit&lt; Dim</template-arg><template-arg>System &gt; &gt;</template-arg><template-arg>Dim</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__unit__of__dimension_3_01unit_3_01Dim_00_01System_01_4_00_01Dim_01_4" name="is_unit_of_dimension"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>Dim</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.is__unit__of__system_8hpp" name="boost/units/is_unit_of_system.hpp">
<para>Check that a type is a unit in a specified system. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1is__unit__of__system" name="is_unit_of_system"><template>
      <template-type-parameter name="T"/>
      <template-type-parameter name="System"/>
    </template><inherit access="public">mpl::false_</inherit><purpose>Check that a type is a unit in a specified system. </purpose></struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__unit__of__system_3_01absolute_3_01unit_3_01Dim_00_01System_01_4_01_4_00_01System_01_4" name="is_unit_of_system"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>absolute&lt; unit&lt; Dim</template-arg><template-arg>System &gt; &gt;</template-arg><template-arg>System</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1is__unit__of__system_3_01unit_3_01Dim_00_01System_01_4_00_01System_01_4" name="is_unit_of_system"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>System</template-arg></specialization><inherit access="public">mpl::true_</inherit></struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.lambda_8hpp" name="boost/units/lambda.hpp">
<para>Definitions to ease the usage of Boost.Units' quantity, unit, and absolute types in functors created with the Boost.Lambda library. </para><para><para>Torsten Maehne </para>

<para>2008-06-16</para>

Boost.Lambda's return type deduction system is extented to make use of Boost.Units' typeof_helper trait classes for Boost.Units' quantity, absolute, and unit template classes. </para><namespace name="boost">
<namespace name="lambda">
<struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__1_3_01unary__arithmetic__action_3_01minus__action_b2c643f7bef048eb5d363983d751716f" name="plain_return_type_1"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>unary_arithmetic_action&lt; minus_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action -quantity&lt;Unit, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__1_3_01unary__arithmetic__action_3_01minus__action_b2c643f7bef048eb5d363983d751716f_1acd6c1edc78551e9cc65339f9f155be56" name="type"><type><classname>boost::units::unary_minus_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit, Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__1_3_01unary__arithmetic__action_3_01minus__action_2e68f5ad344a1d32ff92abeca83ca96b" name="plain_return_type_1"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unary_arithmetic_action&lt; minus_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action -unit&lt;Dim, System&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__1_3_01unary__arithmetic__action_3_01minus__action_2e68f5ad344a1d32ff92abeca83ca96b_1ae4a74a3119fe584dbc07d304e9e0b415" name="type"><type><classname>boost::units::unary_minus_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__1_3_01unary__arithmetic__action_3_01plus__action_0e8c71c2240f5504cddb6e9548ba41a95" name="plain_return_type_1"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>unary_arithmetic_action&lt; plus_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action +quantity&lt;Unit, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__1_3_01unary__arithmetic__action_3_01plus__action_0e8c71c2240f5504cddb6e9548ba41a95_1aa8ddfbc48d56f0a34ea4730e650fd185" name="type"><type><classname>boost::units::unary_plus_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit, Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__1_3_01unary__arithmetic__action_3_01plus__action_0a513b16c011a73efd4e7c1c37e5fde03" name="plain_return_type_1"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unary_arithmetic_action&lt; plus_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action +unit&lt;Dim, System&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__1_3_01unary__arithmetic__action_3_01plus__action_0a513b16c011a73efd4e7c1c37e5fde03_1ae6a30c27250e89eb04d049916c88392b" name="type"><type><classname>boost::units::unary_plus_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_03f02857978172a1480f2e0f0c91f4829" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="X"/>
    </template><specialization><template-arg>arithmetic_action&lt; divide_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit</template-arg><template-arg>X &gt;</template-arg><template-arg>X</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;Unit, X&gt; / X. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_03f02857978172a1480f2e0f0c91f4829_1aa60f60f60bd94df33fb1ea82375bbba1" name="type"><type><classname>boost::units::divide_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit, X &gt;, X &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_0b5fc3be64c31c3f5068b0b62c3c54e3b" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit1"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Unit2"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; divide_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit1</template-arg><template-arg>X &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit2</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;Unit1, X&gt; / quantity&lt;Unit2, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_0b5fc3be64c31c3f5068b0b62c3c54e3b_1a820b0785eef581dc54a8b8bb8e470d05" name="type"><type><classname>boost::units::divide_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit1, X &gt;, <classname>boost::units::quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_007c72adbd55e1fc498ecc074a15d410e" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit1"/>
      <template-type-parameter name="Y"/>
      <template-type-parameter name="System2"/>
      <template-type-parameter name="Dim2"/>
    </template><specialization><template-arg>arithmetic_action&lt; divide_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit1</template-arg><template-arg>Y &gt;</template-arg><template-arg>boost::units::unit&lt; Dim2</template-arg><template-arg>System2 &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;Unit1, Y&gt; / unit&lt;Dim2, System2&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_007c72adbd55e1fc498ecc074a15d410e_1a03c2844453e9e43b0bc18215e316318d" name="type"><type><classname>boost::units::divide_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit1, Y &gt;, <classname>boost::units::unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_0b57ebbbedf620716a76531c4ec262d13" name="plain_return_type_2"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; divide_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>Y</template-arg></specialization><description><para>Partial specialization of return type trait for action unit&lt;Dim, System&gt; / Y. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_0b57ebbbedf620716a76531c4ec262d13_1a5ff103e86f6337a513194edc9883d291" name="type"><type><classname>boost::units::divide_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt;, Y &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_07c9d61d30e59b3e9669017d77c9e674a" name="plain_return_type_2"><template>
      <template-type-parameter name="System1"/>
      <template-type-parameter name="Dim1"/>
      <template-type-parameter name="Unit2"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; divide_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim1</template-arg><template-arg>System1 &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit2</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action unit&lt;Dim1, System1&gt; / quantity&lt;Unit2, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_07c9d61d30e59b3e9669017d77c9e674a_1aa5c6ab10f7bd6e3f7b25f6e66171201b" name="type"><type><classname>boost::units::divide_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim1, System1 &gt;, <classname>boost::units::quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_08a4a27b94f127ff2dfb9c2bcb13274c2" name="plain_return_type_2"><template>
      <template-type-parameter name="Dim1"/>
      <template-type-parameter name="Dim2"/>
      <template-type-parameter name="System1"/>
      <template-type-parameter name="System2"/>
    </template><specialization><template-arg>arithmetic_action&lt; divide_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim1</template-arg><template-arg>System1 &gt;</template-arg><template-arg>boost::units::unit&lt; Dim2</template-arg><template-arg>System2 &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action unit&lt;Dim1, System1&gt; / unit&lt;Dim2, System2&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_08a4a27b94f127ff2dfb9c2bcb13274c2_1af8d7b2440038d669f2af097d6bcab22b" name="type"><type><classname>boost::units::divide_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim1, System1 &gt;, <classname>boost::units::unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_076f273811107fe05047ab204d6de9559" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="X"/>
    </template><specialization><template-arg>arithmetic_action&lt; divide_action &gt;</template-arg><template-arg>X</template-arg><template-arg>boost::units::quantity&lt; Unit</template-arg><template-arg>X &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action X / quantity&lt;Unit, X&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_076f273811107fe05047ab204d6de9559_1a86ffb54f783127626bf38f63385b1c2c" name="type"><type><classname>boost::units::divide_typeof_helper</classname>&lt; X, <classname>boost::units::quantity</classname>&lt; Unit, X &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_0955e98e70bc0365f63b8122ae3f86cde" name="plain_return_type_2"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; divide_action &gt;</template-arg><template-arg>Y</template-arg><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action Y / unit&lt;Dim, System&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01divide__action_01_4_0955e98e70bc0365f63b8122ae3f86cde_1a502c8095e066ceb502edba3cfe79db40" name="type"><type><classname>boost::units::divide_typeof_helper</classname>&lt; Y, <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_00dc08ad90bb3897d8f2aa3dfdfee744c4" name="plain_return_type_2"><template>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; minus_action &gt;</template-arg><template-arg>boost::units::absolute&lt; Y &gt;</template-arg><template-arg>boost::units::absolute&lt; Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action absolute&lt;Y&gt; - absolute&lt;Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_00dc08ad90bb3897d8f2aa3dfdfee744c4_1a6de17df7278a0f43aed18628e041e0e5" name="type"><type>Y</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_00762792cc27f77a17318ba11016e29e5c" name="plain_return_type_2"><template>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; minus_action &gt;</template-arg><template-arg>boost::units::absolute&lt; Y &gt;</template-arg><template-arg>Y</template-arg></specialization><description><para>Partial specialization of return type trait for action absolute&lt;Y&gt; - Y. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_00762792cc27f77a17318ba11016e29e5c_1a7ce85279abd8a408acc8f6bd02b97630" name="type"><type><classname>boost::units::absolute</classname>&lt; Y &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_0049a1ca7156d0726cf6d184f281695f71" name="plain_return_type_2"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; minus_action &gt;</template-arg><template-arg>boost::units::quantity&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System)</template-arg><template-arg>X &gt;</template-arg><template-arg>Y</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;dimensionless, X&gt; - Y. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_0049a1ca7156d0726cf6d184f281695f71_1aafb11f95ae719428e224fa5880c59aa1" name="type"><type><classname>boost::units::subtract_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System), X &gt;, Y &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_0054df461b90223310eacb5f6afad49ca9" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit1"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Unit2"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; minus_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit1</template-arg><template-arg>X &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit2</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;Unit1, X&gt; - quantity&lt;Unit2, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_0054df461b90223310eacb5f6afad49ca9_1a8d19b50fc743317810648652c2f38365" name="type"><type><classname>boost::units::subtract_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit1, X &gt;, <classname>boost::units::quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_00feb30185545af984dc963b31c6d7f63f" name="plain_return_type_2"><template>
      <template-type-parameter name="Dim1"/>
      <template-type-parameter name="Dim2"/>
      <template-type-parameter name="System1"/>
      <template-type-parameter name="System2"/>
    </template><specialization><template-arg>arithmetic_action&lt; minus_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim1</template-arg><template-arg>System1 &gt;</template-arg><template-arg>boost::units::unit&lt; Dim2</template-arg><template-arg>System2 &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action unit&lt;Dim1, System1&gt; - unit&lt;Dim2, System2&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_00feb30185545af984dc963b31c6d7f63f_1a8cad042562e222891cff567beb0f7c5b" name="type"><type><classname>boost::units::subtract_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim1, System1 &gt;, <classname>boost::units::unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_008d7606957fafa511c56634ebef79d870" name="plain_return_type_2"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; minus_action &gt;</template-arg><template-arg>X</template-arg><template-arg>boost::units::quantity&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System)</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action X - quantity&lt;dimensionless, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01minus__action_01_4_008d7606957fafa511c56634ebef79d870_1a7f3122f6b3095fccd8eb22a873aa3fcb" name="type"><type><classname>boost::units::subtract_typeof_helper</classname>&lt; X, <classname>boost::units::quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System), Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4820e5bca1a65a5bf79897f5c94e8284b" name="plain_return_type_2"><template>
      <template-type-parameter name="D"/>
      <template-type-parameter name="S"/>
      <template-type-parameter name="T"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>boost::units::absolute&lt; boost::units::unit&lt; D</template-arg><template-arg>S &gt; &gt;</template-arg><template-arg>T</template-arg></specialization><description><para>Partial specialization of return type trait for action absolute&lt;unit&lt;D, S&gt; &gt; * T. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4820e5bca1a65a5bf79897f5c94e8284b_1aba7acceb3365227ba7e4359111640a15" name="type"><type><classname>boost::units::quantity</classname>&lt; <classname>boost::units::absolute</classname>&lt; <classname>boost::units::unit</classname>&lt; D, S &gt; &gt;, T &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_436835b3106aaf6564157b1392387753d" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="X"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit</template-arg><template-arg>X &gt;</template-arg><template-arg>X</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;Unit, X&gt; * X. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_436835b3106aaf6564157b1392387753d_1a8963bb915af877da6ed9b748d7661d41" name="type"><type><classname>boost::units::multiply_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit, X &gt;, X &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_496ddd698d58e936a7baa4b8cc3c15726" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit1"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Unit2"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit1</template-arg><template-arg>X &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit2</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;Unit1, X&gt; * quantity&lt;Unit2, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_496ddd698d58e936a7baa4b8cc3c15726_1ad7ea6da8a228edaf249d0b026f8b403a" name="type"><type><classname>boost::units::multiply_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit1, X &gt;, <classname>boost::units::quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4831e692d6de68666ca6695f0055de1ca" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit1"/>
      <template-type-parameter name="Y"/>
      <template-type-parameter name="System2"/>
      <template-type-parameter name="Dim2"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit1</template-arg><template-arg>Y &gt;</template-arg><template-arg>boost::units::unit&lt; Dim2</template-arg><template-arg>System2 &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;Unit1, Y&gt; * unit&lt;Dim2, System2&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4831e692d6de68666ca6695f0055de1ca_1a1f13ff1dd7df42bf267f7d8dac1a3d08" name="type"><type><classname>boost::units::multiply_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit1, Y &gt;, <classname>boost::units::unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_484e7efa174f9d1a3916d470f08e6d942" name="plain_return_type_2"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>Y</template-arg></specialization><description><para>Partial specialization of return type trait for action unit&lt;Dim, System&gt; * Y. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_484e7efa174f9d1a3916d470f08e6d942_1aa5e58e2c6233e966963fbd5196848472" name="type"><type><classname>boost::units::multiply_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt;, Y &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4ab3ef5789149ae1eb4b613a559a5d87d" name="plain_return_type_2"><template>
      <template-type-parameter name="System1"/>
      <template-type-parameter name="Dim1"/>
      <template-type-parameter name="Unit2"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim1</template-arg><template-arg>System1 &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit2</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action unit&lt;Dim1, System1&gt; * quantity&lt;Unit2, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4ab3ef5789149ae1eb4b613a559a5d87d_1a4c1d94ee88cf0509b03fb537a80645e3" name="type"><type><classname>boost::units::multiply_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim1, System1 &gt;, <classname>boost::units::quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4c6bc446a47a9af25e0f5d59ce65ebb22" name="plain_return_type_2"><template>
      <template-type-parameter name="Dim1"/>
      <template-type-parameter name="Dim2"/>
      <template-type-parameter name="System1"/>
      <template-type-parameter name="System2"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim1</template-arg><template-arg>System1 &gt;</template-arg><template-arg>boost::units::unit&lt; Dim2</template-arg><template-arg>System2 &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action unit&lt;Dim1, System1&gt; * unit&lt;Dim2, System2&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4c6bc446a47a9af25e0f5d59ce65ebb22_1ada8d6a69bcef583cbfa51f747402afba" name="type"><type><classname>boost::units::multiply_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim1, System1 &gt;, <classname>boost::units::unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4434fd87b4d6d0628d316e108095890f3" name="plain_return_type_2"><template>
      <template-type-parameter name="D"/>
      <template-type-parameter name="S"/>
      <template-type-parameter name="T"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>T</template-arg><template-arg>boost::units::absolute&lt; boost::units::unit&lt; D</template-arg><template-arg>S &gt; &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action T * absolute&lt;unit&lt;D, S&gt; &gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_4434fd87b4d6d0628d316e108095890f3_1af9e7faadac601de97fbc50a6b7271cd4" name="type"><type><classname>boost::units::quantity</classname>&lt; <classname>boost::units::absolute</classname>&lt; <classname>boost::units::unit</classname>&lt; D, S &gt; &gt;, T &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_416abb43edc5f2bc1d76ff21d2cd1be31" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="X"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>X</template-arg><template-arg>boost::units::quantity&lt; Unit</template-arg><template-arg>X &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action X * quantity&lt;Unit, X&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_416abb43edc5f2bc1d76ff21d2cd1be31_1af6875aaba4baf75e0a61646a23dbe83c" name="type"><type><classname>boost::units::multiply_typeof_helper</classname>&lt; X, <classname>boost::units::quantity</classname>&lt; Unit, X &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_40f47595d7460f3b07878873aff74a359" name="plain_return_type_2"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; multiply_action &gt;</template-arg><template-arg>Y</template-arg><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action Y * unit&lt;Dim, System&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01multiply__action_01_40f47595d7460f3b07878873aff74a359_1a008a6689231bdbecab919d27fc94b284" name="type"><type><classname>boost::units::multiply_typeof_helper</classname>&lt; Y, <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_eb2ad1bb46a58b85521a262c80bcedfe" name="plain_return_type_2"><template>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; plus_action &gt;</template-arg><template-arg>boost::units::absolute&lt; Y &gt;</template-arg><template-arg>Y</template-arg></specialization><description><para>Partial specialization of return type trait for action absolute&lt;Y&gt; + Y. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_eb2ad1bb46a58b85521a262c80bcedfe_1af6c06b265258d76c76f34803986fe43a" name="type"><type><classname>boost::units::absolute</classname>&lt; Y &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_13488ceb73a4ffde4c59c855c950f0eb" name="plain_return_type_2"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; plus_action &gt;</template-arg><template-arg>boost::units::quantity&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System)</template-arg><template-arg>X &gt;</template-arg><template-arg>Y</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;dimensionless, X&gt; + Y. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_13488ceb73a4ffde4c59c855c950f0eb_1a43b8a928d2613e3282e0d79e134cac7d" name="type"><type><classname>boost::units::add_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System), X &gt;, Y &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_a15627258a9f516cb51efbbd8283c3a2" name="plain_return_type_2"><template>
      <template-type-parameter name="Unit1"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Unit2"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; plus_action &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit1</template-arg><template-arg>X &gt;</template-arg><template-arg>boost::units::quantity&lt; Unit2</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action quantity&lt;Unit1, X&gt; + quantity&lt;Unit2, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_a15627258a9f516cb51efbbd8283c3a2_1a9fe600aee31dd02e1f2c076b2128390d" name="type"><type><classname>boost::units::add_typeof_helper</classname>&lt; <classname>boost::units::quantity</classname>&lt; Unit1, X &gt;, <classname>boost::units::quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_6cfd2fd96f8bf21e3d784dbb600e7d69" name="plain_return_type_2"><template>
      <template-type-parameter name="Dim1"/>
      <template-type-parameter name="Dim2"/>
      <template-type-parameter name="System1"/>
      <template-type-parameter name="System2"/>
    </template><specialization><template-arg>arithmetic_action&lt; plus_action &gt;</template-arg><template-arg>boost::units::unit&lt; Dim1</template-arg><template-arg>System1 &gt;</template-arg><template-arg>boost::units::unit&lt; Dim2</template-arg><template-arg>System2 &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action unit&lt;Dim1, System1&gt; + unit&lt;Dim2, System2&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_6cfd2fd96f8bf21e3d784dbb600e7d69_1abc8b7eb4683b75c50f09b34a5757eefa" name="type"><type><classname>boost::units::add_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim1, System1 &gt;, <classname>boost::units::unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_a787af19dc64626fb2e03d5ed3ae9949" name="plain_return_type_2"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; plus_action &gt;</template-arg><template-arg>X</template-arg><template-arg>boost::units::quantity&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System)</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action X + quantity&lt;dimensionless, Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_a787af19dc64626fb2e03d5ed3ae9949_1ab6af7f76035db8b50c08f24f9fca49c7" name="type"><type><classname>boost::units::add_typeof_helper</classname>&lt; X, <classname>boost::units::quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System), Y &gt; &gt;::type</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_867355884268d8db40661e028ee584f8" name="plain_return_type_2"><template>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>arithmetic_action&lt; plus_action &gt;</template-arg><template-arg>Y</template-arg><template-arg>boost::units::absolute&lt; Y &gt;</template-arg></specialization><description><para>Partial specialization of return type trait for action Y + absolute&lt;Y&gt;. </para></description><typedef id="doxygen.units_reference.structboost_1_1lambda_1_1plain__return__type__2_3_01arithmetic__action_3_01plus__action_01_4_00_867355884268d8db40661e028ee584f8_1a75879fd62772a71a6b93bfa46ff3d132" name="type"><type><classname>boost::units::absolute</classname>&lt; Y &gt;</type></typedef>
</struct-specialization></namespace>
<namespace name="units">
<struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1divide__typeof__helper_3_01boost_1_1lambda_1_1lambda__functor_3_01Arg_01163bd04e77bc3c7c76743579c1f8fe6b" name="divide_typeof_helper"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Arg"/>
    </template><specialization><template-arg>boost::lambda::lambda_functor&lt; Arg &gt;</template-arg><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1divide__typeof__helper_3_01boost_1_1lambda_1_1lambda__functor_3_01Arg_01163bd04e77bc3c7c76743579c1f8fe6b_1a9c42bdc46395bd04096aa2407724edb4" name="type"><type>boost::lambda::lambda_functor&lt; boost::lambda::lambda_functor_base&lt; boost::lambda::arithmetic_action&lt; boost::lambda::divide_action &gt;, tuple&lt; boost::lambda::lambda_functor&lt; Arg &gt;, typename boost::lambda::const_copy_argument&lt; const <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type &gt; &gt; &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1divide__typeof__helper_3_01boost_1_1units_1_1unit_3_01Dim_00_01System_014867dcefe293e1630772e7cf25e593d3" name="divide_typeof_helper"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Arg"/>
    </template><specialization><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>boost::lambda::lambda_functor&lt; Arg &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1divide__typeof__helper_3_01boost_1_1units_1_1unit_3_01Dim_00_01System_014867dcefe293e1630772e7cf25e593d3_1a39a1114c9214d9138041be33bc5ddcaa" name="type"><type>boost::lambda::lambda_functor&lt; boost::lambda::lambda_functor_base&lt; boost::lambda::arithmetic_action&lt; boost::lambda::divide_action &gt;, tuple&lt; typename boost::lambda::const_copy_argument&lt; const <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type, boost::lambda::lambda_functor&lt; Arg &gt; &gt; &gt; &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_3_01boost_1_1lambda_1_1lambda__functor_3_01Arg_2b506b730dc041b646943445cf81d061" name="multiply_typeof_helper"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Arg"/>
    </template><specialization><template-arg>boost::lambda::lambda_functor&lt; Arg &gt;</template-arg><template-arg>boost::units::absolute&lt; boost::units::unit&lt; Dim</template-arg><template-arg>System &gt; &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_3_01boost_1_1lambda_1_1lambda__functor_3_01Arg_2b506b730dc041b646943445cf81d061_1adb0032939c29400e15d5571f3080775d" name="type"><type>boost::lambda::lambda_functor&lt; boost::lambda::lambda_functor_base&lt; boost::lambda::arithmetic_action&lt; boost::lambda::multiply_action &gt;, tuple&lt; boost::lambda::lambda_functor&lt; Arg &gt;, typename boost::lambda::const_copy_argument&lt; const <classname>boost::units::absolute</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt; &gt;::type &gt; &gt; &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_3_01boost_1_1lambda_1_1lambda__functor_3_01Arg_6ed4328104506bbb34c1db6b46a0da5e" name="multiply_typeof_helper"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Arg"/>
    </template><specialization><template-arg>boost::lambda::lambda_functor&lt; Arg &gt;</template-arg><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_3_01boost_1_1lambda_1_1lambda__functor_3_01Arg_6ed4328104506bbb34c1db6b46a0da5e_1a5ab0a309a8ed070f02dad73e88ced4a9" name="type"><type>boost::lambda::lambda_functor&lt; boost::lambda::lambda_functor_base&lt; boost::lambda::arithmetic_action&lt; boost::lambda::multiply_action &gt;, tuple&lt; boost::lambda::lambda_functor&lt; Arg &gt;, typename boost::lambda::const_copy_argument&lt; const <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type &gt; &gt; &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_3_01boost_1_1units_1_1absolute_3_01boost_1_1uni9f9d8ce305713ed6fc65af9dc63aa5a6" name="multiply_typeof_helper"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Arg"/>
    </template><specialization><template-arg>boost::units::absolute&lt; boost::units::unit&lt; Dim</template-arg><template-arg>System &gt; &gt;</template-arg><template-arg>boost::lambda::lambda_functor&lt; Arg &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_3_01boost_1_1units_1_1absolute_3_01boost_1_1uni9f9d8ce305713ed6fc65af9dc63aa5a6_1a70d66c712748f712801746da3010c172" name="type"><type>boost::lambda::lambda_functor&lt; boost::lambda::lambda_functor_base&lt; boost::lambda::arithmetic_action&lt; boost::lambda::multiply_action &gt;, tuple&lt; typename boost::lambda::const_copy_argument&lt; const <classname>boost::units::absolute</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt; &gt;::type, boost::lambda::lambda_functor&lt; Arg &gt; &gt; &gt; &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_3_01boost_1_1units_1_1unit_3_01Dim_00_01System_d22040a46f7c365f298b5f73741351be" name="multiply_typeof_helper"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="Arg"/>
    </template><specialization><template-arg>boost::units::unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>boost::lambda::lambda_functor&lt; Arg &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_3_01boost_1_1units_1_1unit_3_01Dim_00_01System_d22040a46f7c365f298b5f73741351be_1ab74e6b238374cbc83bb2782ca61c8ff2" name="type"><type>boost::lambda::lambda_functor&lt; boost::lambda::lambda_functor_base&lt; boost::lambda::arithmetic_action&lt; boost::lambda::multiply_action &gt;, tuple&lt; typename boost::lambda::const_copy_argument&lt; const <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type, boost::lambda::lambda_functor&lt; Arg &gt; &gt; &gt; &gt;</type></typedef>
</struct-specialization>








































<function id="doxygen.units_reference.namespaceboost_1_1units_1a67023161fbb651d4af5c2373b585f042" name="operator*"><type>const <classname>multiply_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt;, boost::lambda::lambda_functor&lt; Arg &gt; &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Arg"/>
        </template><parameter name="a"><paramtype>const <classname>boost::units::unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const boost::lambda::lambda_functor&lt; Arg &gt; &amp;</paramtype></parameter><description><para>Disambiguating overload for action unit&lt;Dim, System&gt; * lambda_functor&lt;Arg&gt; based on &lt;boost/lambda/detail/operators.hpp&gt;. </para></description></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aaf6b01fdd501a0ced4eb43071a4f4352" name="operator/"><type>const <classname>divide_typeof_helper</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt;, boost::lambda::lambda_functor&lt; Arg &gt; &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Arg"/>
        </template><parameter name="a"><paramtype>const <classname>boost::units::unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const boost::lambda::lambda_functor&lt; Arg &gt; &amp;</paramtype></parameter><description><para>Disambiguating overload for action unit&lt;Dim, System&gt; / lambda_functor&lt;Arg&gt; based on &lt;boost/lambda/detail/operators.hpp&gt;. </para></description></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ad5bc2a0643b3edabb41e5fb3a2cf3c9f" name="operator*"><type>const <classname>multiply_typeof_helper</classname>&lt; boost::lambda::lambda_functor&lt; Arg &gt;, <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Arg"/>
        </template><parameter name="a"><paramtype>const boost::lambda::lambda_functor&lt; Arg &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>boost::units::unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><description><para>Disambiguating overload for action lambda_functor&lt;Arg&gt; * unit&lt;Dim, System&gt; based on &lt;boost/lambda/detail/operators.hpp&gt;. </para></description></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a87da08e77d984ad7e2768d34ff0d2d78" name="operator/"><type>const <classname>divide_typeof_helper</classname>&lt; boost::lambda::lambda_functor&lt; Arg &gt;, <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Arg"/>
        </template><parameter name="a"><paramtype>const boost::lambda::lambda_functor&lt; Arg &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>boost::units::unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><description><para>Disambiguating overload for action lambda_functor&lt;Arg&gt; / unit&lt;Dim, System&gt; based on &lt;boost/lambda/detail/operators.hpp&gt;. </para></description></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af8cd82c31a18fc8339affc36e5af823f" name="operator*"><type>const <classname>multiply_typeof_helper</classname>&lt; boost::lambda::lambda_functor&lt; Arg &gt;, <classname>boost::units::absolute</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt; &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Arg"/>
        </template><parameter name="a"><paramtype>const boost::lambda::lambda_functor&lt; Arg &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>boost::units::absolute</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt; &amp;</paramtype></parameter><description><para>Disambiguating overload for action lambda_functor&lt;Arg&gt; * absolute&lt;unit&lt;Dim, System&gt; &gt; based on &lt;boost/lambda/detail/operators.hpp&gt;. </para></description></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aca5a9e76f8ce061f48e11c706ea51af4" name="operator*"><type>const <classname>multiply_typeof_helper</classname>&lt; <classname>boost::units::absolute</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt;, boost::lambda::lambda_functor&lt; Arg &gt; &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Arg"/>
        </template><parameter name="a"><paramtype>const <classname>boost::units::absolute</classname>&lt; <classname>boost::units::unit</classname>&lt; Dim, System &gt; &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const boost::lambda::lambda_functor&lt; Arg &gt; &amp;</paramtype></parameter><description><para>Disambiguating overload for action absolute&lt;unit&lt;Dim, System&gt; &gt; * lambda_functor&lt;Arg&gt; based on &lt;boost/lambda/detail/operators.hpp&gt;. </para></description></function>















































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.limits_8hpp" name="boost/units/limits.hpp">
<para>specialize std::numeric_limits for units. </para><namespace name="std">
<class-specialization id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4" name="numeric_limits"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="T"/>
    </template><specialization><template-arg>::boost::units::quantity&lt; Unit</template-arg><template-arg>T &gt;</template-arg></specialization><typedef id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a1f6f28c50f37fa24b193a8f558bcc06d" name="quantity_type"><type><classname>::boost::units::quantity</classname>&lt; Unit, T &gt;</type></typedef>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1ae7b93f924578ff5e5b2f08c77a3350b6" name="is_specialized"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a18ac4f4d655f84c87479a4bb96060bd8" name="digits"><type>BOOST_STATIC_CONSTEXPR int</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a439d2713785d8c96d1c84f701ab76903" name="digits10"><type>BOOST_STATIC_CONSTEXPR int</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1ad1774182e9da7cc6c77513ccb6f7a7fa" name="max_digits10"><type>BOOST_STATIC_CONSTEXPR int</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a8d68a04f50f88df079ce737141833428" name="is_signed"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a45b0dc9d91c146052a8d1b7a14894993" name="is_integer"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1aaccbaf36ba1c4a145ddafe9a77f69edd" name="is_exact"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a062ffa72057c6cdf2026b1eedd761074" name="radix"><type>BOOST_STATIC_CONSTEXPR int</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a14a4fade96f710128b39c42486c02ebe" name="min_exponent"><type>BOOST_STATIC_CONSTEXPR int</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a3090150635aab9b52b8504a26279a00a" name="min_exponent10"><type>BOOST_STATIC_CONSTEXPR int</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a4c3005ba6d1a494f1360fb5fef857e1e" name="max_exponent"><type>BOOST_STATIC_CONSTEXPR int</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1ae3eb4224e91cd83a02014fbdd2e226ec" name="max_exponent10"><type>BOOST_STATIC_CONSTEXPR int</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a14e7db3b4177a1631493a1bd1b9e2b22" name="has_infinity"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a78530e69a07c5211974e2c791bc7c943" name="has_quiet_NaN"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a49b4dfac27a250551c5015066f51e5d5" name="has_signaling_NaN"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1af52c3fb1a4ccf3ce238db6fc359674ab" name="has_denorm_loss"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1ab3309e3e739dcb3f3c41cc4b9a29ac1f" name="is_iec559"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a649956f83d5b0bda357782e84de57927" name="is_bounded"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a48d9bcb2907518e6d7dfbe3706c4b594" name="is_modulo"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1ae2c4d455050c801e1a6ebbcb398dd413" name="traps"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1ac9e1da6b4d2a22a328494d176d7532c2" name="tinyness_before"><type>BOOST_STATIC_CONSTEXPR bool</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a3b8787e28828dcd099938476c182f6ab" name="has_denorm"><type>BOOST_STATIC_CONSTEXPR float_denorm_style</type></data-member>
<data-member id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a37ca1256b34db37259c7c0fa5ecb3595" name="round_style"><type>BOOST_STATIC_CONSTEXPR float_round_style</type></data-member>
<method-group name="public static functions">
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1ab8c6f0d8abb259d24844462c2dbbb8c8" name="min" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a33052aab6dc5a32f2b4dc28c58db8494" name="max" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1add6dddd275e28e086d709789f2aab53e" name="lowest" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a3569775529c929a5043b1e2d304014e7" name="epsilon" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a006a8dcb42d07de4aba018c3ebc6d49a" name="round_error" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a3a8eb8cec43d185bc92021039b981c8a" name="infinity" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1abcde48e92f50d103a3a95e51e861e867" name="quiet_NaN" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a0f1f8a92e258d67b34a3822dd4984f2b" name="signaling_NaN" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
<method id="doxygen.units_reference.classstd_1_1numeric__limits_3_01_1_1boost_1_1units_1_1quantity_3_01Unit_00_01T_01_4_01_4_1a70ee391d8f1ac6aa45000300869723b5" name="denorm_min" specifiers="static"><type>BOOST_CONSTEXPR quantity_type</type></method>
</method-group>
</class-specialization></namespace>
</header>
<header id="doxygen.units_reference.make__scaled__unit_8hpp" name="boost/units/make_scaled_unit.hpp">
<namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1make__scaled__unit" name="make_scaled_unit"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Scale"/>
    </template><typedef id="doxygen.units_reference.structboost_1_1units_1_1make__scaled__unit_1ae831807b997595bcfdfb3c0ef906f658" name="type"><type><classname>make_scaled_unit</classname>&lt; typenamereduce_unit&lt; Unit &gt;::type, Scale &gt;::type</type></typedef>
</struct><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1make__scaled__unit_3_01unit_3_01Dimension_00_01heterogeneous__system_3_0d6e13d7114bc48f18c27eea0145ae62d" name="make_scaled_unit"><template>
      <template-type-parameter name="Dimension"/>
      <template-type-parameter name="UnitList"/>
      <template-type-parameter name="OldScale"/>
      <template-type-parameter name="Scale"/>
    </template><specialization><template-arg>unit&lt; Dimension</template-arg><template-arg>heterogeneous_system&lt; heterogeneous_system_impl&lt; UnitList</template-arg><template-arg>Dimension</template-arg><template-arg>OldScale &gt; &gt; &gt;</template-arg><template-arg>Scale</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1make__scaled__unit_3_01unit_3_01Dimension_00_01heterogeneous__system_3_0d6e13d7114bc48f18c27eea0145ae62d_1ae90bbaa6c0e7267796e5ef68bd33721c" name="type"><type><classname>unit</classname>&lt; Dimension, <classname>heterogeneous_system</classname>&lt; <classname>heterogeneous_system_impl</classname>&lt; UnitList, Dimension, typename mpl::times&lt; OldScale, list&lt; scale_list_dim&lt; Scale &gt;, <classname>dimensionless_type</classname> &gt; &gt;::type &gt; &gt; &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1make__scaled__unit_3_01unit_3_01Dimension_00_01heterogeneous__system_3_073163ea84e7a42adf00ac3a552ecc7ca" name="make_scaled_unit"><template>
      <template-type-parameter name="Dimension"/>
      <template-type-parameter name="UnitList"/>
      <template-type-parameter name="OldScale"/>
      <template-nontype-parameter name="Base"><type>long</type></template-nontype-parameter>
    </template><specialization><template-arg>unit&lt; Dimension</template-arg><template-arg>heterogeneous_system&lt; heterogeneous_system_impl&lt; UnitList</template-arg><template-arg>Dimension</template-arg><template-arg>OldScale &gt; &gt; &gt;</template-arg><template-arg>scale&lt; Base</template-arg><template-arg>static_rational&lt; 0 &gt; &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1make__scaled__unit_3_01unit_3_01Dimension_00_01heterogeneous__system_3_073163ea84e7a42adf00ac3a552ecc7ca_1ad7ca704c5fa5154b27ef78b7790837f5" name="type"><type><classname>unit</classname>&lt; Dimension, <classname>heterogeneous_system</classname>&lt; <classname>heterogeneous_system_impl</classname>&lt; UnitList, Dimension, OldScale &gt; &gt; &gt;</type></typedef>
</struct-specialization>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.make__system_8hpp" name="boost/units/make_system.hpp">
<para>Metafunction returning a homogeneous system that can represent any combination of the base units. </para><para>Metafunction make_system returning a homogeneous system that can represent any combination of the base units. There must be no way to represent any of the base units in terms of the others. make_system&lt;foot_base_unit, meter_base_unit&gt;::type is not allowed, for example. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1make__system" name="make_system"><template>
      <template-type-parameter name="BaseUnit0"/>
      <template-type-parameter name="BaseUnit1"/>
      <template-type-parameter name="BaseUnit2"/>
      <template-nontype-parameter name=""><type>...</type></template-nontype-parameter>
      <template-type-parameter name="BaseUnitN"/>
    </template><description><para>Metafunction returning a homogeneous system that can represent any combination of the base units. There must be no way to represent any of the base units in terms of the others. <link linkend="doxygen.units_reference.structboost_1_1units_1_1make__system_1aa06a8728b2e1b50bf313658281f1095d">make_system&lt;foot_base_unit, meter_base_unit&gt;::type</link> is not allowed, for example. </para></description><typedef id="doxygen.units_reference.structboost_1_1units_1_1make__system_1aa06a8728b2e1b50bf313658281f1095d" name="type"><type><emphasis>unspecified</emphasis></type></typedef>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.operators_8hpp" name="boost/units/operators.hpp">
<para>Compile time operators and typeof helper classes. </para><para>These operators declare the compile-time operators needed to support dimensional analysis algebra. They require the use of Boost.Typeof, emulation or native. Typeof helper classes define result type for heterogeneous operators on value types. These must be defined through specialization for powers and roots. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1add__typeof__helper" name="add_typeof_helper"><template>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><method-group name="public member functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1add__typeof__helper_1a2c8bdf1ea25b407dcb6c6922fbc89ac2" name="typeof"><type>typedef</type><parameter name=""><paramtype>(typeof_::make&lt; X &gt;()+typeof_::make&lt; Y &gt;())</paramtype></parameter></method>
</method-group>
</struct><struct id="doxygen.units_reference.structboost_1_1units_1_1divide__typeof__helper" name="divide_typeof_helper"><template>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><method-group name="public member functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1divide__typeof__helper_1a97104b0bc21228e49f928f2bc6216e90" name="typeof"><type>typedef</type><parameter name=""><paramtype>(typeof_::make&lt; X &gt;()/typeof_::make&lt; Y &gt;())</paramtype></parameter></method>
</method-group>
</struct><struct id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper" name="multiply_typeof_helper"><template>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><method-group name="public member functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1multiply__typeof__helper_1a32ee18b7c3a6eec3da64b926f50c5592" name="typeof"><type>typedef</type><parameter name=""><paramtype>(typeof_::make&lt; X &gt;() *typeof_::make&lt; Y &gt;())</paramtype></parameter></method>
</method-group>
</struct><struct id="doxygen.units_reference.structboost_1_1units_1_1power__typeof__helper" name="power_typeof_helper"><template>
      <template-type-parameter name="BaseType"/>
      <template-type-parameter name="Exponent"/>
    </template><description><para>A helper used by <computeroutput>pow</computeroutput> to raise a runtime object to a compile time known exponent. This template is intended to be specialized. All specializations must conform to the interface shown here. <computeroutput>Exponent</computeroutput> will be either the exponent passed to <computeroutput>pow</computeroutput> or <computeroutput>static_rational&lt;N&gt;</computeroutput> for and integer argument, N. </para></description><typedef id="doxygen.units_reference.structboost_1_1units_1_1power__typeof__helper_1a8d37aa42c05b0485fbb4e04b32a12611" name="type"><purpose>specifies the result type </purpose><type><emphasis>unspecified</emphasis></type></typedef>
<method-group name="public static functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1power__typeof__helper_1a8d52be27cc880a26c2ca11dec9a82614" name="value" specifiers="static"><type>BOOST_CONSTEXPR type</type><parameter name="base"><paramtype>const BaseType &amp;</paramtype></parameter><purpose>Carries out the runtime calculation. </purpose></method>
</method-group>
</struct><struct id="doxygen.units_reference.structboost_1_1units_1_1root__typeof__helper" name="root_typeof_helper"><template>
      <template-type-parameter name="Radicand"/>
      <template-type-parameter name="Index"/>
    </template><description><para>A helper used by <computeroutput>root</computeroutput> to take a root of a runtime object using a compile time known index. This template is intended to be specialized. All specializations must conform to the interface shown here. <computeroutput>Index</computeroutput> will be either the type passed to <computeroutput>pow</computeroutput> or <computeroutput>static_rational&lt;N&gt;</computeroutput> for and integer argument, N. </para></description><typedef id="doxygen.units_reference.structboost_1_1units_1_1root__typeof__helper_1a2df163c7699071d45e3bb1b7f8f4f637" name="type"><purpose>specifies the result type </purpose><type><emphasis>unspecified</emphasis></type></typedef>
<method-group name="public static functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1root__typeof__helper_1afb0a32e3936a88ec7bf6b05b1e17506d" name="value" specifiers="static"><type>BOOST_CONSTEXPR type</type><parameter name="base"><paramtype>const Radicand &amp;</paramtype></parameter><purpose>Carries out the runtime calculation. </purpose></method>
</method-group>
</struct><struct id="doxygen.units_reference.structboost_1_1units_1_1subtract__typeof__helper" name="subtract_typeof_helper"><template>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><method-group name="public member functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1subtract__typeof__helper_1a5147390b67761eded467cdc73a9d0c7a" name="typeof"><type>typedef</type><parameter name=""><paramtype>(typeof_::make&lt; X &gt;() -typeof_::make&lt; Y &gt;())</paramtype></parameter></method>
</method-group>
</struct><struct id="doxygen.units_reference.structboost_1_1units_1_1unary__minus__typeof__helper" name="unary_minus_typeof_helper"><template>
      <template-type-parameter name="X"/>
    </template><method-group name="public member functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1unary__minus__typeof__helper_1ace9aee715cccd51c46498e5c21ac37c4" name="typeof"><type>typedef</type><parameter name=""><paramtype>(-typeof_::make&lt; X &gt;())</paramtype></parameter></method>
</method-group>
</struct><struct id="doxygen.units_reference.structboost_1_1units_1_1unary__plus__typeof__helper" name="unary_plus_typeof_helper"><template>
      <template-type-parameter name="X"/>
    </template><method-group name="public member functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1unary__plus__typeof__helper_1a7619894f95b5de207d12b5f5d13b51bb" name="typeof"><type>typedef</type><parameter name=""><paramtype>(+typeof_::make&lt; X &gt;())</paramtype></parameter></method>
</method-group>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.pow_8hpp" name="boost/units/pow.hpp">
<para>Raise values to exponents known at compile-time. </para><namespace name="boost">
<namespace name="units">





































<function id="doxygen.units_reference.namespaceboost_1_1units_1a6aace725951b12b1686f230af1fdcfc0" name="pow"><type>BOOST_CONSTEXPR <classname>power_typeof_helper</classname>&lt; Y, Rat &gt;::type</type><template>
          <template-type-parameter name="Rat"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="x"><paramtype>const Y &amp;</paramtype></parameter><purpose>raise a value to a <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput> power. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a03f83ce4da0173d3d9da71b04acc69e0" name="pow"><type>BOOST_CONSTEXPR <classname>power_typeof_helper</classname>&lt; Y, <classname>static_rational</classname>&lt; N &gt; &gt;::type</type><template>
          <template-nontype-parameter name="N"><type>long</type></template-nontype-parameter>
          <template-type-parameter name="Y"/>
        </template><parameter name="x"><paramtype>const Y &amp;</paramtype></parameter><purpose>raise a value to an integer power. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aec4354ed1791a02d271f7f38c68140f4" name="root"><type>BOOST_CONSTEXPR <classname>root_typeof_helper</classname>&lt; Y, Rat &gt;::type</type><template>
          <template-type-parameter name="Rat"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="x"><paramtype>const Y &amp;</paramtype></parameter><purpose>take the <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput> root of a value. </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a73686c5851f6ee038cb0872aba8892ce" name="root"><type>BOOST_CONSTEXPR <classname>root_typeof_helper</classname>&lt; Y, <classname>static_rational</classname>&lt; N &gt; &gt;::type</type><template>
          <template-nontype-parameter name="N"><type>long</type></template-nontype-parameter>
          <template-type-parameter name="Y"/>
        </template><parameter name="x"><paramtype>const Y &amp;</paramtype></parameter><purpose>take the integer root of a value. </purpose></function>





















































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.quantity_8hpp" name="boost/units/quantity.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1add__typeof__helper_3_01quantity_3_01unit_3_01Dim_00_01System_01_4_00_0150ab9fb78cc9d16b8a567f672e680a37" name="add_typeof_helper"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>quantity&lt; unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>X &gt;</template-arg><template-arg>quantity&lt; unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>Y &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1add__typeof__helper_3_01quantity_3_01unit_3_01Dim_00_01System_01_4_00_0150ab9fb78cc9d16b8a567f672e680a37_1a302d8dd6a09bc9acd89a49b8369e3e2f" name="value_type"><type><classname>add_typeof_helper</classname>&lt; X, Y &gt;::type</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1add__typeof__helper_3_01quantity_3_01unit_3_01Dim_00_01System_01_4_00_0150ab9fb78cc9d16b8a567f672e680a37_1a8f4f99572324550e86b729dc02bb68d5" name="unit_type"><type><classname>unit</classname>&lt; Dim, System &gt;</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1add__typeof__helper_3_01quantity_3_01unit_3_01Dim_00_01System_01_4_00_0150ab9fb78cc9d16b8a567f672e680a37_1ae5186e7fbdd1fb8a448731dc2796c297" name="type"><type><classname>quantity</classname>&lt; unit_type, value_type &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1add__typeof__helper_3_01quantity_3_01unit_3_01Dim1_00_01System1_01_4_00_c1e57319263083d9bd57c0be91d8b3ac" name="add_typeof_helper"><template>
      <template-type-parameter name="Dim1"/>
      <template-type-parameter name="System1"/>
      <template-type-parameter name="Dim2"/>
      <template-type-parameter name="System2"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>quantity&lt; unit&lt; Dim1</template-arg><template-arg>System1 &gt;</template-arg><template-arg>X &gt;</template-arg><template-arg>quantity&lt; unit&lt; Dim2</template-arg><template-arg>System2 &gt;</template-arg><template-arg>Y &gt;</template-arg></specialization><description><para>for sun CC we need to invoke SFINAE at the top level, otherwise it will silently return int. </para></description></struct-specialization><class id="doxygen.units_reference.classboost_1_1units_1_1quantity" name="quantity"><template>
      <template-type-parameter name="Unit"/>
      <template-type-parameter name="Y"/>
    </template><purpose>class declaration </purpose><typedef id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a5670a28c51eccb5c3355a448979a3c6e" name="this_type"><type><classname>quantity</classname>&lt; Unit, Y &gt;</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1quantity_1ade1397f802a46a7f82ced7799adadcd5" name="value_type"><type>Y</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1quantity_1aed3f80fe31d08d9d8626caac5a0d476d" name="unit_type"><type>Unit</type></typedef>
<method-group name="private member functions">
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a0290aea428552371c2f3740da6a1d751" name="BOOST_MPL_ASSERT_NOT"><type/><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype></parameter></method>
</method-group>
<method-group name="public member functions">
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a484474125b77a2e6ef9e1de01c8c54a9"/>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a318bce2dda5327260598a283bf76e8ad"><parameter name=""><paramtype>unspecified_null_pointer_constant_type</paramtype></parameter></constructor>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_1af73d7de246f97df78d4de8787afdde79"><parameter name="source"><paramtype>const this_type &amp;</paramtype></parameter></constructor>
<copy-assignment id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a3a16f2160d275e7f55db52552472bf65"><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="source"><paramtype>const this_type &amp;</paramtype></parameter></copy-assignment>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a705d20a31b83ed9f9d19c1bdbe2059b9"><template>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit, YY &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><purpose>implicit conversion between value types is allowed if allowed for value types themselves </purpose></constructor>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a4697636705c2804719498ff8640c8776" specifiers="explicit"><template>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit, YY &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><purpose>implicit conversion between value types is not allowed if not allowed for value types themselves </purpose></constructor>
<copy-assignment id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a3f47d4706ca778972a1a8edb9bed1688"><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><template>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit, YY &gt; &amp;</paramtype></parameter><purpose>implicit assignment between value types is allowed if allowed for value types themselves </purpose></copy-assignment>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a00e7e3bc37ecff448f8a84ddbc5bdca0" specifiers="explicit"><template>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit2, YY &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><purpose>explicit conversion between different unit systems is allowed if implicit conversion is disallowed </purpose></constructor>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_1ad95a1c6209daa48be549a3e2801a1fa7"><template>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit2, YY &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><purpose>implicit conversion between different unit systems is allowed if each fundamental dimension is implicitly convertible </purpose></constructor>
<copy-assignment id="doxygen.units_reference.classboost_1_1units_1_1quantity_1ac098018ddf73086447ee282dc65b7425"><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><template>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit2, YY &gt; &amp;</paramtype></parameter><purpose>implicit assignment between different unit systems is allowed if each fundamental dimension is implicitly convertible </purpose></copy-assignment>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a140ecba6b11b57ba6c65d8f795d91e0c" name="value" cv="const"><type>BOOST_CONSTEXPR const value_type &amp;</type><purpose>constant accessor to value </purpose><description><para>can add a quantity of the same type if add_typeof_helper&lt;value_type,value_type&gt;::type is convertible to value_type </para></description></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a6a770b3a169018dcff09142a2d4454d0" name="operator+="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><template>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit2, YY &gt; &amp;</paramtype></parameter><purpose>can subtract a quantity of the same type if subtract_typeof_helper&lt;value_type,value_type&gt;::type is convertible to value_type </purpose></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a0d81a4822546af1d6832677f9fe179c8" name="operator-="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><template>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit2, YY &gt; &amp;</paramtype></parameter></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a3334943ab558ace338ae0b608f7aa88a" name="operator*="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><template>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit2, YY &gt; &amp;</paramtype></parameter></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a2295f8100333e454ee1b3419450f7a24" name="operator/="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><template>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; Unit2, YY &gt; &amp;</paramtype></parameter><purpose>can multiply a quantity by a scalar value_type if multiply_typeof_helper&lt;value_type,value_type&gt;::type is convertible to value_type </purpose></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1afeb09a24afe9febd3663cc37478e384c" name="operator*="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="source"><paramtype>const value_type &amp;</paramtype></parameter><purpose>can divide a quantity by a scalar value_type if divide_typeof_helper&lt;value_type,value_type&gt;::type is convertible to value_type </purpose></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1aec81e696c1fe36eeaf5862d73d85771e" name="operator/="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="source"><paramtype>const value_type &amp;</paramtype></parameter></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a640b4cf05fa9f056e03ad02286dd9af3" name="from_value" specifiers="static"><type>BOOST_CONSTEXPR this_type</type><parameter name="val"><paramtype>const value_type &amp;</paramtype></parameter><purpose>Construct quantity directly from <computeroutput>value_type</computeroutput> (potentially dangerous). </purpose></method>
</method-group>
<method-group name="protected member functions">
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_1a69cb1a16166b736d7853423a95fda68b" specifiers="explicit"><parameter name="val"><paramtype>const value_type &amp;</paramtype></parameter><parameter name=""><paramtype>int</paramtype></parameter></constructor>
</method-group>
</class><class-specialization id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4" name="quantity"><template>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>BOOST_UNITS_DIMENSIONLESS_UNIT(System)</template-arg><template-arg>Y</template-arg></specialization><description><para>Specialization for dimensionless quantities. Implicit conversions between unit systems are allowed because all dimensionless quantities are equivalent. Implicit construction and assignment from and conversion to <computeroutput>value_type</computeroutput> is also allowed. </para></description><typedef id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1aecf41ede1ebc7032383e43286dae8d21" name="this_type"><type><classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, System &gt;, Y &gt;</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a924e7e30bbbfe5f043653d48401d7a19" name="value_type"><type>Y</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1ad7a6b2e2421ddf067710dac551dd174f" name="system_type"><type>System</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a18b10e7223fd506377a5375b268bf749" name="dimension_type"><type><classname>dimensionless_type</classname></type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a25ff6fe492560750333ca6510307a5ad" name="unit_type"><type><classname>unit</classname>&lt; dimension_type, system_type &gt;</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1ae9d2e3bd15992a7332cc9effb87643e1"/>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1af4dd4682d95417b0d6d0593eeaa06cda"><parameter name="val"><paramtype>value_type</paramtype></parameter><purpose>construction from raw <computeroutput>value_type</computeroutput> is allowed </purpose></constructor>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1ab7ce35f1c9b850755754d93bba90cbad"><parameter name="source"><paramtype>const this_type &amp;</paramtype></parameter></constructor>
<copy-assignment id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a4f42cf5189614982db3d914c3f4784f0"><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="source"><paramtype>const this_type &amp;</paramtype></parameter></copy-assignment>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1adf70922e5dcd8a06cb15db8498485d9c"><template>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; dimension_type, system_type &gt;, YY &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><purpose>implicit conversion between value types is allowed if allowed for value types themselves </purpose></constructor>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a5c0789312b5bbf28b5bfae590884e7c5" specifiers="explicit"><template>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; dimension_type, system_type &gt;, YY &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><purpose>implicit conversion between value types is not allowed if not allowed for value types themselves </purpose></constructor>
<copy-assignment id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a722d6861934c362817c955f3b50cd7ba"><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><template>
          <template-type-parameter name="YY"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; dimension_type, system_type &gt;, YY &gt; &amp;</paramtype></parameter><purpose>implicit assignment between value types is allowed if allowed for value types themselves </purpose></copy-assignment>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a905fc558e0644efe56b38178501616d3"><template>
          <template-type-parameter name="System2"/>
          <template-type-parameter name="Y2"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, System2 &gt;, Y2 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><purpose>implicit conversion between different unit systems is allowed </purpose></constructor>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1ae61c6b8b1408e80802d73a5713048fc4" specifiers="explicit"><template>
          <template-type-parameter name="System2"/>
          <template-type-parameter name="Y2"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, System2 &gt;, Y2 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><purpose>implicit conversion between different unit systems is allowed </purpose></constructor>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a403022c80fd3fcb03e593cd7898eeefa" specifiers="explicit"><template>
          <template-type-parameter name="System2"/>
          <template-type-parameter name="Y2"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; <classname>unit</classname>&lt; <classname>dimensionless_type</classname>, System2 &gt;, Y2 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype><emphasis>unspecified</emphasis></paramtype><default>0</default></parameter><description><para>conversion between different unit systems is explicit when the units are not equivalent. </para></description></constructor>
<copy-assignment id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a34132c496b2e7af9a666b367bae63aca"><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><template>
          <template-type-parameter name="System2"/>
        </template><parameter name="source"><paramtype>const <classname>quantity</classname>&lt; BOOST_UNITS_DIMENSIONLESS_UNIT(System2), Y &gt; &amp;</paramtype></parameter><purpose>implicit assignment between different unit systems is allowed </purpose></copy-assignment>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1ac8f9ce20418796aab03f0ef9d70bd585" name="operator value_type" cv="const"><type>BOOST_CONSTEXPR</type><purpose>implicit conversion to <computeroutput>value_type</computeroutput> is allowed </purpose></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a91e4ea789678df01841a3a88d34d1e88" name="value" cv="const"><type>BOOST_CONSTEXPR const value_type &amp;</type><purpose>constant accessor to value </purpose><description><para>can add a quantity of the same type if add_typeof_helper&lt;value_type,value_type&gt;::type is convertible to value_type </para></description></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a1181a83092295a873bed1e0c62a36371" name="operator+="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="source"><paramtype>const this_type &amp;</paramtype></parameter><purpose>can subtract a quantity of the same type if subtract_typeof_helper&lt;value_type,value_type&gt;::type is convertible to value_type </purpose></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a847c8041191770354671f5134139e482" name="operator-="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="source"><paramtype>const this_type &amp;</paramtype></parameter><purpose>can multiply a quantity by a scalar value_type if multiply_typeof_helper&lt;value_type,value_type&gt;::type is convertible to value_type </purpose></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1ae31a5014b900898eaae1280daea86141" name="operator*="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="val"><paramtype>const value_type &amp;</paramtype></parameter><purpose>can divide a quantity by a scalar value_type if divide_typeof_helper&lt;value_type,value_type&gt;::type is convertible to value_type </purpose></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1a008c3d086b9d785ad90e01c7b1b26d5e" name="operator/="><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name="val"><paramtype>const value_type &amp;</paramtype></parameter></method>
</method-group>
<method-group name="public static functions">
<method id="doxygen.units_reference.classboost_1_1units_1_1quantity_3_01BOOST__UNITS__DIMENSIONLESS__UNIT_07System_08_00_01Y_01_4_1aaed1f39b4d8f33afe74e9f13c07fb318" name="from_value" specifiers="static"><type>BOOST_CONSTEXPR this_type</type><parameter name="val"><paramtype>const value_type &amp;</paramtype></parameter><purpose>Construct quantity directly from <computeroutput>value_type</computeroutput>. </purpose></method>
</method-group>
</class-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1subtract__typeof__helper_3_01quantity_3_01unit_3_01Dim_00_01System_01_4_107cc49be50f1c715255010ab71f58fc" name="subtract_typeof_helper"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>quantity&lt; unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>X &gt;</template-arg><template-arg>quantity&lt; unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>Y &gt;</template-arg></specialization><typedef id="doxygen.units_reference.structboost_1_1units_1_1subtract__typeof__helper_3_01quantity_3_01unit_3_01Dim_00_01System_01_4_107cc49be50f1c715255010ab71f58fc_1a13935a39d9fa370d6c825a3502353eed" name="value_type"><type><classname>subtract_typeof_helper</classname>&lt; X, Y &gt;::type</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1subtract__typeof__helper_3_01quantity_3_01unit_3_01Dim_00_01System_01_4_107cc49be50f1c715255010ab71f58fc_1a36daadfdaf2c0ae227a556d763533128" name="unit_type"><type><classname>unit</classname>&lt; Dim, System &gt;</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1subtract__typeof__helper_3_01quantity_3_01unit_3_01Dim_00_01System_01_4_107cc49be50f1c715255010ab71f58fc_1a2ed18765696c20360ae89d7435204d00" name="type"><type><classname>quantity</classname>&lt; unit_type, value_type &gt;</type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1subtract__typeof__helper_3_01quantity_3_01unit_3_01Dim1_00_01System1_01_51e207194ed4e62a11c3a50089ffecf9" name="subtract_typeof_helper"><template>
      <template-type-parameter name="Dim1"/>
      <template-type-parameter name="System1"/>
      <template-type-parameter name="Dim2"/>
      <template-type-parameter name="System2"/>
      <template-type-parameter name="X"/>
      <template-type-parameter name="Y"/>
    </template><specialization><template-arg>quantity&lt; unit&lt; Dim1</template-arg><template-arg>System1 &gt;</template-arg><template-arg>X &gt;</template-arg><template-arg>quantity&lt; unit&lt; Dim2</template-arg><template-arg>System2 &gt;</template-arg><template-arg>Y &gt;</template-arg></specialization></struct-specialization>










<function id="doxygen.units_reference.namespaceboost_1_1units_1a7bbd69494423cf2e00bf7412373e0fd7" name="quantity_cast"><type>BOOST_CONSTEXPR X</type><template>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="source"><paramtype>Y &amp;</paramtype></parameter><purpose>quantity_cast provides mutating access to underlying quantity value_type </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a690bfe22ce83e1c24e712610982c4447" name="quantity_cast"><type>BOOST_CONSTEXPR X</type><template>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="source"><paramtype>const Y &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1adb460e409bdcbedc60308a9fc8fd38ed" name="swap"><type>void</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype><classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype><classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>swap quantities </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a70fc5feb3f67e209259e4bbb2211782f" name="operator/"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim, System &gt;, Y &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Y"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const Y &amp;</paramtype></parameter><purpose>runtime unit divided by scalar </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a9fa976ff0f60e82c673a7bb0887fa5ff" name="operator*"><type>BOOST_CONSTEXPR <classname>multiply_typeof_helper</classname>&lt; Y, <classname>unit</classname>&lt; Dim, System &gt; &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype>const Y &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><purpose>runtime scalar times unit </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af3a981a588dbc8eb1a91ec046a9624d4" name="operator/"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; Y, <classname>unit</classname>&lt; Dim, System &gt; &gt;::type</type><template>
          <template-type-parameter name="System"/>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype>const Y &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><purpose>runtime scalar divided by unit </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a907d63548309a2852d2ccd4fc240dc80" name="operator*"><type>BOOST_CONSTEXPR <classname>multiply_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit, X &gt;, X &gt;::type</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
        </template><parameter name="lhs"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const X &amp;</paramtype></parameter><purpose>runtime quantity times scalar </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a1be699921b8c410c089e0df796bdf762" name="operator*"><type>BOOST_CONSTEXPR <classname>multiply_typeof_helper</classname>&lt; X, <classname>quantity</classname>&lt; Unit, X &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
        </template><parameter name="lhs"><paramtype>const X &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><purpose>runtime scalar times quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ad302e2574fe59dd2cb7803e621f228c8" name="operator/"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit, X &gt;, X &gt;::type</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
        </template><parameter name="lhs"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const X &amp;</paramtype></parameter><purpose>runtime quantity divided by scalar </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1adf79070b98639f5901714de07f67755e" name="operator/"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; X, <classname>quantity</classname>&lt; Unit, X &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
        </template><parameter name="lhs"><paramtype>const X &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><purpose>runtime scalar divided by quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aca185f88b972bcf11037693a476a8c47" name="operator*"><type>BOOST_CONSTEXPR <classname>multiply_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim1, System1 &gt;, <classname>quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type><template>
          <template-type-parameter name="System1"/>
          <template-type-parameter name="Dim1"/>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="Y"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim1, System1 &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>quantity</classname>&lt; Unit2, Y &gt; &amp;</paramtype></parameter><purpose>runtime unit times quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a1d1adc88e4285691751e5391d4489d44" name="operator/"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim1, System1 &gt;, <classname>quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type><template>
          <template-type-parameter name="System1"/>
          <template-type-parameter name="Dim1"/>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="Y"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim1, System1 &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>quantity</classname>&lt; Unit2, Y &gt; &amp;</paramtype></parameter><purpose>runtime unit divided by quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a7b7425c39adf5c365c51db423e011ab5" name="operator*"><type>BOOST_CONSTEXPR <classname>multiply_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit1, Y &gt;, <classname>unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit1"/>
          <template-type-parameter name="System2"/>
          <template-type-parameter name="Dim2"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype>const <classname>quantity</classname>&lt; Unit1, Y &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim2, System2 &gt; &amp;</paramtype></parameter><purpose>runtime quantity times unit </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a9c76180f10fca36ad02ffbe9f88c7310" name="operator/"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit1, Y &gt;, <classname>unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit1"/>
          <template-type-parameter name="System2"/>
          <template-type-parameter name="Dim2"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype>const <classname>quantity</classname>&lt; Unit1, Y &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim2, System2 &gt; &amp;</paramtype></parameter><purpose>runtime quantity divided by unit </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af85f505e2254711d8b808114539f9280" name="operator+"><type>BOOST_CONSTEXPR <classname>unary_plus_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit, Y &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="val"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>runtime unary plus quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aeb9a3e18186b486146da7d5ac99ed993" name="operator-"><type>BOOST_CONSTEXPR <classname>unary_minus_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit, Y &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="val"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>runtime unary minus quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af8f24ac810fe623a8b369aed69398be7" name="operator+"><type>BOOST_CONSTEXPR <classname>add_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit1, X &gt;, <classname>quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit1"/>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype>const <classname>quantity</classname>&lt; Unit1, X &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>quantity</classname>&lt; Unit2, Y &gt; &amp;</paramtype></parameter><purpose>runtime quantity plus quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a829e7ea13a2905ba0de3ce9f79c1a708" name="operator-"><type>BOOST_CONSTEXPR <classname>subtract_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit1, X &gt;, <classname>quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit1"/>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype>const <classname>quantity</classname>&lt; Unit1, X &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>quantity</classname>&lt; Unit2, Y &gt; &amp;</paramtype></parameter><purpose>runtime quantity minus quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af55774a791737febc4b6ebb1969f53e1" name="operator*"><type>BOOST_CONSTEXPR <classname>multiply_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit1, X &gt;, <classname>quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit1"/>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype>const <classname>quantity</classname>&lt; Unit1, X &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>quantity</classname>&lt; Unit2, Y &gt; &amp;</paramtype></parameter><purpose>runtime quantity times quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aa6b41daca744efb2b2ddc2c58cc23107" name="operator/"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; <classname>quantity</classname>&lt; Unit1, X &gt;, <classname>quantity</classname>&lt; Unit2, Y &gt; &gt;::type</type><template>
          <template-type-parameter name="Unit1"/>
          <template-type-parameter name="Unit2"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="lhs"><paramtype>const <classname>quantity</classname>&lt; Unit1, X &gt; &amp;</paramtype></parameter><parameter name="rhs"><paramtype>const <classname>quantity</classname>&lt; Unit2, Y &gt; &amp;</paramtype></parameter><purpose>runtime quantity divided by quantity </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ae5fbe757013744cee0176972c0226ffa" name="operator=="><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="val1"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><parameter name="val2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>runtime operator== </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a58014c305f70e5ab3a5e3c44f53eb28c" name="operator!="><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="val1"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><parameter name="val2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>runtime operator!= </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a61d7f2e35523e8769fe859e05dd21cb1" name="operator&lt;"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="val1"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><parameter name="val2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>runtime operator&lt; </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ae4d5ceeabb57aaeaa5021092d315a75a" name="operator&lt;="><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="val1"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><parameter name="val2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>runtime operator&lt;= </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1adde839970d992492a99f7142ecbd3549" name="operator&gt;"><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="val1"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><parameter name="val2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>runtime operator&gt; </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a6b954aab6ef410245082275029d020d6" name="operator&gt;="><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Unit"/>
          <template-type-parameter name="X"/>
          <template-type-parameter name="Y"/>
        </template><parameter name="val1"><paramtype>const <classname>quantity</classname>&lt; Unit, X &gt; &amp;</paramtype></parameter><parameter name="val2"><paramtype>const <classname>quantity</classname>&lt; Unit, Y &gt; &amp;</paramtype></parameter><purpose>runtime operator&gt;= </purpose></function>

























































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.reduce__unit_8hpp" name="boost/units/reduce_unit.hpp">
<para>Returns a unique type for every unit. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1reduce__unit" name="reduce_unit"><template>
      <template-type-parameter name="Unit"/>
    </template><purpose>Returns a unique type for every unit. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1reduce__unit_1ab561edc3e1a442b254793a51aa4caaa9" name="type"><type><emphasis>unspecified</emphasis></type></typedef>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.scale_8hpp" name="boost/units/scale.hpp">
<para>10^3 Engineering &amp; 2^10 binary scaling factors for autoprefixing. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1scale" name="scale"><template>
      <template-nontype-parameter name="Base"><type>long</type></template-nontype-parameter>
      <template-type-parameter name="Exponent"/>
    </template><description><para>class representing a scaling factor such as 10^3 The exponent must be a static rational. </para></description><typedef id="doxygen.units_reference.structboost_1_1units_1_1scale_1a5e3cfd3b9b4ac697838a0e6847ad9aa1" name="exponent"><type>Exponent</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1scale_1a7b9a41e2dca7c59e2f4133d3e0b902f5" name="value_type"><type>double</type></typedef>
<data-member id="doxygen.units_reference.structboost_1_1units_1_1scale_1a22fcf4716dc5d38b15f6277ed8d0af67" name="base"><type>BOOST_STATIC_CONSTEXPR long</type></data-member>
<method-group name="public static functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1scale_1a61fc34aafaa378a3773a8bc38ab1d3ca" name="value" specifiers="static"><type>BOOST_CONSTEXPR value_type</type></method>
</method-group>
</struct>








<function id="doxygen.units_reference.namespaceboost_1_1units_1aa5b2853112b66a696ef0f6afab2918d7" name="symbol_string"><type>std::string</type><template>
          <template-nontype-parameter name="Base"><type>long</type></template-nontype-parameter>
          <template-type-parameter name="Exponent"/>
        </template><parameter name=""><paramtype>const <classname>scale</classname>&lt; Base, Exponent &gt; &amp;</paramtype></parameter></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a831271d252a3d7f1afb13cdfb3ab85a7" name="name_string"><type>std::string</type><template>
          <template-nontype-parameter name="Base"><type>long</type></template-nontype-parameter>
          <template-type-parameter name="Exponent"/>
        </template><parameter name=""><paramtype>const <classname>scale</classname>&lt; Base, Exponent &gt; &amp;</paramtype></parameter></function>



















































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.scaled__base__unit_8hpp" name="boost/units/scaled_base_unit.hpp">
<namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1base__unit__info" name="base_unit_info"><template>
      <template-type-parameter name="BaseUnit"/>
    </template><purpose>traits template for unit names. </purpose><method-group name="public static functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1base__unit__info_1aba77f33daae992eed2364ae31af4535e" name="name" specifiers="static"><type>std::string</type><purpose>The full name of the unit (returns BaseUnit::name() by default) </purpose></method>
<method id="doxygen.units_reference.structboost_1_1units_1_1base__unit__info_1a77dd8273b3b7aca0f29ab81ad9a44125" name="symbol" specifiers="static"><type>std::string</type><purpose>The symbol for the base unit (Returns BaseUnit::symbol() by default) </purpose><description><para>
</para></description><returns><para>BaseUnit::symbol(), for example "m"</para>
</returns></method>
</method-group>
</struct><struct id="doxygen.units_reference.structboost_1_1units_1_1heterogeneous__system" name="heterogeneous_system"><template>
      <template-type-parameter name="T"/>
    </template><inherit access="public">T</inherit><description><para>A system that can represent any possible combination of units at the expense of not preserving information about how it was created. Do not create specializations of this template directly. Instead use <computeroutput><link linkend="doxygen.units_reference.structboost_1_1units_1_1reduce__unit">reduce_unit</link></computeroutput> and <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1base__unit_1aac84e4e7d67a9e49184fb79b451cf98a">base_unit&lt;...&gt;::unit_type</link></computeroutput>. </para></description></struct><struct id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit" name="scaled_base_unit"><template>
      <template-type-parameter name="S"/>
      <template-type-parameter name="Scale"/>
    </template><typedef id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit_1a95142bbc168e1dd28fdf0b127558f428" name="type"><type><classname>scaled_base_unit</classname></type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit_1add2722ebc3c65af532e623bb0b6ca9d7" name="tag"><type><classname>scaled_base_unit_tag</classname></type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit_1a698953506011e3c1e7e74fd06f9cdd71" name="system_type"><type>S</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit_1a2667968048322971f6406d5df86e569c" name="scale_type"><type>Scale</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit_1a5dd6359c2af85e2804dd6d44b873bddd" name="dimension_type"><type>S::dimension_type</type></typedef>
<typedef id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit_1a0a05989e49f4544bbe345850b708da4f" name="unit_type"><type><emphasis>unspecified</emphasis></type></typedef>
<method-group name="public static functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit_1a8b081a780cb7d2ffa5538d65f1c5ff5f" name="symbol" specifiers="static"><type>std::string</type></method>
<method id="doxygen.units_reference.structboost_1_1units_1_1scaled__base__unit_1a4e414dc5cadfbbfee24fe3acb71ba652" name="name" specifiers="static"><type>std::string</type></method>
</method-group>
</struct>





























































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.static__constant_8hpp" name="boost/units/static_constant.hpp">
<macro id="doxygen.units_reference.static__constant_8hpp_1a35e0cd40e16404d014a5b0a2493b5345" name="BOOST_UNITS_STATIC_CONSTANT" kind="functionlike"><macro-parameter name="name"/><macro-parameter name="type"/><description><para>A convenience macro that allows definition of static constants in headers in an ODR-safe way. </para></description></macro>
</header>
<header id="doxygen.units_reference.static__rational_8hpp" name="boost/units/static_rational.hpp">
<para>Compile-time rational numbers and operators. </para><namespace name="boost">
<namespace name="units">
<struct id="doxygen.units_reference.structboost_1_1units_1_1static__abs" name="static_abs"><template>
      <template-nontype-parameter name="Value"><type>integer_type</type></template-nontype-parameter>
    </template><purpose>Compile time absolute value. </purpose><method-group name="public member functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1static__abs_1abccbff347c79233e30db801f296f4fe1" name="BOOST_STATIC_CONSTANT"><type/><parameter name=""><paramtype>integer_type</paramtype></parameter></method>
</method-group>
</struct><class id="doxygen.units_reference.classboost_1_1units_1_1static__rational" name="static_rational"><template>
      <template-nontype-parameter name="N"><type>integer_type</type></template-nontype-parameter>
      <template-nontype-parameter name="D"><type>integer_type</type><default>1</default></template-nontype-parameter>
    </template><description><para>This is an implementation of a compile time rational number, where <computeroutput>static_rational&lt;N,D&gt;</computeroutput> represents a rational number with numerator <computeroutput>N</computeroutput> and denominator <computeroutput>D</computeroutput>. Because of the potential for ambiguity arising from multiple equivalent values of <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput> (e.g. <computeroutput>static_rational&lt;6,2&gt;==static_rational&lt;3&gt;</computeroutput>), static rationals should always be accessed through <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational_1a0c4204a0fd1267697f1e5252dd75a87a">static_rational&lt;N,D&gt;::type</link></computeroutput>. Template specialization prevents instantiation of zero denominators (i.e. <computeroutput>static_rational&lt;N,0&gt;</computeroutput>). The following compile-time arithmetic operators are provided for <link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link> variables only (no operators are defined between long and <link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link>):<itemizedlist>
<listitem><para><computeroutput>mpl::negate</computeroutput> </para>
</listitem><listitem><para><computeroutput>mpl::plus</computeroutput> </para>
</listitem><listitem><para><computeroutput>mpl::minus</computeroutput> </para>
</listitem><listitem><para><computeroutput>mpl::times</computeroutput> </para>
</listitem><listitem><para><computeroutput>mpl::divides</computeroutput> </para>
</listitem></itemizedlist>
</para><para>Neither <computeroutput><link linkend="doxygen.units_reference.structboost_1_1units_1_1static__power">static_power</link></computeroutput> nor <computeroutput><link linkend="doxygen.units_reference.structboost_1_1units_1_1static__root">static_root</link></computeroutput> are defined for <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput>. This is because template types may not be floating point values, while powers and roots of rational numbers can produce floating point values. </para></description><typedef id="doxygen.units_reference.classboost_1_1units_1_1static__rational_1ad466f062aba70956ebaccf97890d3048" name="tag"><type><emphasis>unspecified</emphasis></type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1static__rational_1a0c4204a0fd1267697f1e5252dd75a87a" name="type"><purpose>static_rational&lt;N,D&gt; reduced by GCD </purpose><type><classname>static_rational</classname>&lt; Numerator, Denominator &gt;</type></typedef>
<data-member id="doxygen.units_reference.classboost_1_1units_1_1static__rational_1a7de832de12771abd1c133242d0abc90d" name="Numerator"><type>BOOST_STATIC_CONSTEXPR integer_type</type></data-member>
<data-member id="doxygen.units_reference.classboost_1_1units_1_1static__rational_1a0d2baf44fa083f1eb3127bdbb501b5b4" name="Denominator"><type>BOOST_STATIC_CONSTEXPR integer_type</type></data-member>
<method-group name="public static functions">
<method id="doxygen.units_reference.classboost_1_1units_1_1static__rational_1a107ccde56e7afdbf4e0bde78e2e73f57" name="numerator" specifiers="static"><type>BOOST_CONSTEXPR integer_type</type></method>
<method id="doxygen.units_reference.classboost_1_1units_1_1static__rational_1a5d18dc3d863a8327f43581b3f3128485" name="denominator" specifiers="static"><type>BOOST_CONSTEXPR integer_type</type></method>
</method-group>
<method-group name="public member functions">
<constructor id="doxygen.units_reference.classboost_1_1units_1_1static__rational_1a093d81f5bea470d5ba7922740c81c897"/>
</method-group>
</class><typedef id="doxygen.units_reference.namespaceboost_1_1units_1a4d84a0122eafd8a2cc0a0a9a08d79fb0" name="integer_type"><type>long</type></typedef>








<function id="doxygen.units_reference.namespaceboost_1_1units_1a74f4b1c063531ec03112ecd9595db3f4" name="value"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; T, T &gt;::type</type><template>
          <template-type-parameter name="T"/>
          <template-nontype-parameter name="N"><type>integer_type</type></template-nontype-parameter>
          <template-nontype-parameter name="D"><type>integer_type</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>const <classname>static_rational</classname>&lt; N, D &gt; &amp;</paramtype></parameter><purpose>get decimal value of <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput> </purpose></function>





















































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.unit_8hpp" name="boost/units/unit.hpp">
<namespace name="boost">
<namespace name="units">
<struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1power__typeof__helper_3_01unit_3_01Dim_00_01System_01_4_00_01static__rational_3_01N_00_01D_01_4_01_4" name="power_typeof_helper"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
      <template-nontype-parameter name="N"><type>long</type></template-nontype-parameter>
      <template-nontype-parameter name="D"><type>long</type></template-nontype-parameter>
    </template><specialization><template-arg>unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>static_rational&lt; N</template-arg><template-arg>D &gt;</template-arg></specialization><purpose>raise unit to a <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput> power </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1power__typeof__helper_3_01unit_3_01Dim_00_01System_01_4_00_01static__rational_3_01N_00_01D_01_4_01_4_1a2f1571ad7c7427d7f44eab3410244952" name="type"><type><classname>unit</classname>&lt; typename <classname>static_power</classname>&lt; Dim, <classname>static_rational</classname>&lt; N, D &gt; &gt;::type, typename <classname>static_power</classname>&lt; System, <classname>static_rational</classname>&lt; N, D &gt; &gt;::type &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1power__typeof__helper_3_01unit_3_01Dim_00_01System_01_4_00_01static__rational_3_01N_00_01D_01_4_01_4_1a85edf19f8234042dd21b89801e5ef822" name="value" specifiers="static"><type>BOOST_CONSTEXPR type</type><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter></method>
</method-group>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1reduce__unit_3_01unit_3_01Dim_00_01System_01_4_01_4" name="reduce_unit"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
    </template><specialization><template-arg>unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg></specialization><purpose>Returns a unique type for every unit. </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1reduce__unit_3_01unit_3_01Dim_00_01System_01_4_01_4_1aac44d1d5df48a7c8b68708df583303e3" name="type"><type><emphasis>unspecified</emphasis></type></typedef>
</struct-specialization><struct-specialization id="doxygen.units_reference.structboost_1_1units_1_1root__typeof__helper_3_01unit_3_01Dim_00_01System_01_4_00_01static__rational_3_01N_00_01D_01_4_01_4" name="root_typeof_helper"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
      <template-nontype-parameter name="N"><type>long</type></template-nontype-parameter>
      <template-nontype-parameter name="D"><type>long</type></template-nontype-parameter>
    </template><specialization><template-arg>unit&lt; Dim</template-arg><template-arg>System &gt;</template-arg><template-arg>static_rational&lt; N</template-arg><template-arg>D &gt;</template-arg></specialization><purpose>take the <computeroutput><link linkend="doxygen.units_reference.classboost_1_1units_1_1static__rational">static_rational</link></computeroutput> root of a unit </purpose><typedef id="doxygen.units_reference.structboost_1_1units_1_1root__typeof__helper_3_01unit_3_01Dim_00_01System_01_4_00_01static__rational_3_01N_00_01D_01_4_01_4_1a80d7a22c84694f16bd2fcc0c127622d3" name="type"><type><classname>unit</classname>&lt; typename <classname>static_root</classname>&lt; Dim, <classname>static_rational</classname>&lt; N, D &gt; &gt;::type, typename <classname>static_root</classname>&lt; System, <classname>static_rational</classname>&lt; N, D &gt; &gt;::type &gt;</type></typedef>
<method-group name="public static functions">
<method id="doxygen.units_reference.structboost_1_1units_1_1root__typeof__helper_3_01unit_3_01Dim_00_01System_01_4_00_01static__rational_3_01N_00_01D_01_4_01_4_1a2e8503641d9a9a64c4d5470d834a9297" name="value" specifiers="static"><type>BOOST_CONSTEXPR type</type><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter></method>
</method-group>
</struct-specialization><class id="doxygen.units_reference.classboost_1_1units_1_1unit" name="unit"><template>
      <template-type-parameter name="Dim"/>
      <template-type-parameter name="System"/>
      <template-type-parameter name="Enable"/>
    </template><purpose>class representing a model-dependent unit with no associated value </purpose><description><para>(e.g. meters, Kelvin, feet, etc...) </para></description><typedef id="doxygen.units_reference.classboost_1_1units_1_1unit_1acc85025c7d044b8cebdb088718e6f4da" name="unit_type"><type><classname>unit</classname>&lt; Dim, System &gt;</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1unit_1afce99485fb075031608e842b3a9cde00" name="this_type"><type><classname>unit</classname>&lt; Dim, System &gt;</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1unit_1a35577ab87971063b78424c57231d7ec4" name="dimension_type"><type>Dim</type></typedef>
<typedef id="doxygen.units_reference.classboost_1_1units_1_1unit_1a281237f3b0d8946f52384fc0bc451bbe" name="system_type"><type>System</type></typedef>
<method-group name="public member functions">
<constructor id="doxygen.units_reference.classboost_1_1units_1_1unit_1a12ab6bd9a5f6f995f906c17ddb9c8c72"/>
<constructor id="doxygen.units_reference.classboost_1_1units_1_1unit_1a960e5d4c9db00ecdf0889c31878ed53e"><parameter name=""><paramtype>const this_type &amp;</paramtype></parameter></constructor>
<copy-assignment id="doxygen.units_reference.classboost_1_1units_1_1unit_1a6096ea30ffc5869fbe2c4fcb0b919536"><type>BOOST_CXX14_CONSTEXPR this_type &amp;</type><parameter name=""><paramtype>const this_type &amp;</paramtype></parameter></copy-assignment>
</method-group>
</class><function id="doxygen.units_reference.namespaceboost_1_1units_1acce5b4923d817cb9354b7a3423b2bc06" name="operator+"><type>BOOST_CONSTEXPR <classname>unary_plus_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim, System &gt; &gt;::type</type><template>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="System"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><purpose>unit runtime unary plus </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a34743c0cd020c455fe4ac10fbab042e0" name="operator-"><type>BOOST_CONSTEXPR <classname>unary_minus_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim, System &gt; &gt;::type</type><template>
          <template-type-parameter name="Dim"/>
          <template-type-parameter name="System"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim, System &gt; &amp;</paramtype></parameter><purpose>unit runtime unary minus </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a4a1600a15fc01ae17545673a591fbd07" name="operator+"><type>BOOST_CONSTEXPR <classname>add_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim1, System1 &gt;, <classname>unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type><template>
          <template-type-parameter name="Dim1"/>
          <template-type-parameter name="Dim2"/>
          <template-type-parameter name="System1"/>
          <template-type-parameter name="System2"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim1, System1 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim2, System2 &gt; &amp;</paramtype></parameter><purpose>runtime add two units </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1ac45ba53f5ebe413b354ae72f564b5a97" name="operator-"><type>BOOST_CONSTEXPR <classname>subtract_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim1, System1 &gt;, <classname>unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type><template>
          <template-type-parameter name="Dim1"/>
          <template-type-parameter name="Dim2"/>
          <template-type-parameter name="System1"/>
          <template-type-parameter name="System2"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim1, System1 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim2, System2 &gt; &amp;</paramtype></parameter><purpose>runtime subtract two units </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1aed0cbab70c56bca7b3066bb6d2f20eb4" name="operator*"><type>BOOST_CONSTEXPR <classname>multiply_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim1, System1 &gt;, <classname>unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type><template>
          <template-type-parameter name="Dim1"/>
          <template-type-parameter name="Dim2"/>
          <template-type-parameter name="System1"/>
          <template-type-parameter name="System2"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim1, System1 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim2, System2 &gt; &amp;</paramtype></parameter><purpose>runtime multiply two units </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1acecfceb1c48fddc7836ade985a5b50d5" name="operator/"><type>BOOST_CONSTEXPR <classname>divide_typeof_helper</classname>&lt; <classname>unit</classname>&lt; Dim1, System1 &gt;, <classname>unit</classname>&lt; Dim2, System2 &gt; &gt;::type</type><template>
          <template-type-parameter name="Dim1"/>
          <template-type-parameter name="Dim2"/>
          <template-type-parameter name="System1"/>
          <template-type-parameter name="System2"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim1, System1 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim2, System2 &gt; &amp;</paramtype></parameter><purpose>runtime divide two units </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1a45e3956c6f3e32a8d9a8344437d31e2a" name="operator=="><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Dim1"/>
          <template-type-parameter name="Dim2"/>
          <template-type-parameter name="System1"/>
          <template-type-parameter name="System2"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim1, System1 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim2, System2 &gt; &amp;</paramtype></parameter><purpose>unit runtime <computeroutput>operator==</computeroutput> </purpose></function>
<function id="doxygen.units_reference.namespaceboost_1_1units_1af98945952f8dbe623e86d948c528e068" name="operator!="><type>BOOST_CONSTEXPR bool</type><template>
          <template-type-parameter name="Dim1"/>
          <template-type-parameter name="Dim2"/>
          <template-type-parameter name="System1"/>
          <template-type-parameter name="System2"/>
        </template><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim1, System1 &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>const <classname>unit</classname>&lt; Dim2, System2 &gt; &amp;</paramtype></parameter><purpose>unit runtime <computeroutput>operator!=</computeroutput> </purpose></function>






















































































































</namespace>
</namespace>
</header>
<header id="doxygen.units_reference.units__fwd_8hpp" name="boost/units/units_fwd.hpp">
<para>Forward declarations of library components. </para><para>Forward declarations of units library - dimensions, systems, quantity and string components. </para></header>
</library-reference>