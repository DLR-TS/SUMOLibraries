// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/map_lite_unittest.proto

#include "google/protobuf/map_lite_unittest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf_unittest {
PROTOBUF_CONSTEXPR TestMapLite_MapInt32Int32Entry_DoNotUse::TestMapLite_MapInt32Int32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapInt32Int32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapInt32Int32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapInt32Int32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapInt32Int32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapInt32Int32Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapInt32Int32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapInt64Int64Entry_DoNotUse::TestMapLite_MapInt64Int64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapInt64Int64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapInt64Int64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapInt64Int64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapInt64Int64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapInt64Int64Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapInt64Int64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapUint32Uint32Entry_DoNotUse::TestMapLite_MapUint32Uint32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapUint32Uint32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapUint32Uint32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapUint64Uint64Entry_DoNotUse::TestMapLite_MapUint64Uint64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapUint64Uint64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapUint64Uint64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapSint32Sint32Entry_DoNotUse::TestMapLite_MapSint32Sint32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapSint32Sint32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapSint32Sint32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapSint64Sint64Entry_DoNotUse::TestMapLite_MapSint64Sint64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapSint64Sint64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapSint64Sint64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapFixed32Fixed32Entry_DoNotUse::TestMapLite_MapFixed32Fixed32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapFixed32Fixed32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapFixed32Fixed32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapFixed64Fixed64Entry_DoNotUse::TestMapLite_MapFixed64Fixed64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapFixed64Fixed64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapFixed64Fixed64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse::TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse::TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal _TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapInt32FloatEntry_DoNotUse::TestMapLite_MapInt32FloatEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapInt32FloatEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapInt32FloatEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapInt32FloatEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapInt32FloatEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapInt32FloatEntry_DoNotUseDefaultTypeInternal _TestMapLite_MapInt32FloatEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapInt32DoubleEntry_DoNotUse::TestMapLite_MapInt32DoubleEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapInt32DoubleEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal _TestMapLite_MapInt32DoubleEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapBoolBoolEntry_DoNotUse::TestMapLite_MapBoolBoolEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapBoolBoolEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapBoolBoolEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapBoolBoolEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapBoolBoolEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapBoolBoolEntry_DoNotUseDefaultTypeInternal _TestMapLite_MapBoolBoolEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapStringStringEntry_DoNotUse::TestMapLite_MapStringStringEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapStringStringEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapStringStringEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapStringStringEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapStringStringEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapStringStringEntry_DoNotUseDefaultTypeInternal _TestMapLite_MapStringStringEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapInt32BytesEntry_DoNotUse::TestMapLite_MapInt32BytesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapInt32BytesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapInt32BytesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapInt32BytesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapInt32BytesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapInt32BytesEntry_DoNotUseDefaultTypeInternal _TestMapLite_MapInt32BytesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapInt32EnumEntry_DoNotUse::TestMapLite_MapInt32EnumEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapInt32EnumEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapInt32EnumEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapInt32EnumEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapInt32EnumEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapInt32EnumEntry_DoNotUseDefaultTypeInternal _TestMapLite_MapInt32EnumEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_MapInt32ForeignMessageEntry_DoNotUse::TestMapLite_MapInt32ForeignMessageEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_MapInt32ForeignMessageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_MapInt32ForeignMessageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_MapInt32ForeignMessageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_MapInt32ForeignMessageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_MapInt32ForeignMessageEntry_DoNotUseDefaultTypeInternal _TestMapLite_MapInt32ForeignMessageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite_TeboringEntry_DoNotUse::TestMapLite_TeboringEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMapLite_TeboringEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLite_TeboringEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLite_TeboringEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMapLite_TeboringEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLite_TeboringEntry_DoNotUseDefaultTypeInternal _TestMapLite_TeboringEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMapLite::TestMapLite(
    ::_pbi::ConstantInitialized)
  : map_int32_int32_()
  , map_int64_int64_()
  , map_uint32_uint32_()
  , map_uint64_uint64_()
  , map_sint32_sint32_()
  , map_sint64_sint64_()
  , map_fixed32_fixed32_()
  , map_fixed64_fixed64_()
  , map_sfixed32_sfixed32_()
  , map_sfixed64_sfixed64_()
  , map_int32_float_()
  , map_int32_double_()
  , map_bool_bool_()
  , map_string_string_()
  , map_int32_bytes_()
  , map_int32_enum_()
  , map_int32_foreign_message_()
  , teboring_(){}
struct TestMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapLiteDefaultTypeInternal() {}
  union {
    TestMapLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapLiteDefaultTypeInternal _TestMapLite_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32Int32Entry_DoNotUse::TestArenaMapLite_MapInt32Int32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapInt32Int32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32Int32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapInt32Int32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapInt32Int32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapInt32Int32Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapInt32Int32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt64Int64Entry_DoNotUse::TestArenaMapLite_MapInt64Int64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapInt64Int64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt64Int64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapInt64Int64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapInt64Int64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapInt64Int64Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapInt64Int64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapUint32Uint32Entry_DoNotUse::TestArenaMapLite_MapUint32Uint32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapUint32Uint32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapUint32Uint32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapUint64Uint64Entry_DoNotUse::TestArenaMapLite_MapUint64Uint64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapUint64Uint64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapUint64Uint64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapSint32Sint32Entry_DoNotUse::TestArenaMapLite_MapSint32Sint32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapSint32Sint32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapSint32Sint32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapSint64Sint64Entry_DoNotUse::TestArenaMapLite_MapSint64Sint64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapSint64Sint64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapSint64Sint64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse::TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse::TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse::TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse::TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32FloatEntry_DoNotUse::TestArenaMapLite_MapInt32FloatEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapInt32FloatEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32FloatEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapInt32FloatEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapInt32FloatEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapInt32FloatEntry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapInt32FloatEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32DoubleEntry_DoNotUse::TestArenaMapLite_MapInt32DoubleEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapInt32DoubleEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapInt32DoubleEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapBoolBoolEntry_DoNotUse::TestArenaMapLite_MapBoolBoolEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapBoolBoolEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapBoolBoolEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapBoolBoolEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapBoolBoolEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapBoolBoolEntry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapBoolBoolEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapStringStringEntry_DoNotUse::TestArenaMapLite_MapStringStringEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapStringStringEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapStringStringEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapStringStringEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapStringStringEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapStringStringEntry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapStringStringEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32BytesEntry_DoNotUse::TestArenaMapLite_MapInt32BytesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapInt32BytesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32BytesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapInt32BytesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapInt32BytesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapInt32BytesEntry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapInt32BytesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32EnumEntry_DoNotUse::TestArenaMapLite_MapInt32EnumEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapInt32EnumEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32EnumEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapInt32EnumEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapInt32EnumEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapInt32EnumEntry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapInt32EnumEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse::TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUseDefaultTypeInternal _TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestArenaMapLite::TestArenaMapLite(
    ::_pbi::ConstantInitialized)
  : map_int32_int32_()
  , map_int64_int64_()
  , map_uint32_uint32_()
  , map_uint64_uint64_()
  , map_sint32_sint32_()
  , map_sint64_sint64_()
  , map_fixed32_fixed32_()
  , map_fixed64_fixed64_()
  , map_sfixed32_sfixed32_()
  , map_sfixed64_sfixed64_()
  , map_int32_float_()
  , map_int32_double_()
  , map_bool_bool_()
  , map_string_string_()
  , map_int32_bytes_()
  , map_int32_enum_()
  , map_int32_foreign_message_(){}
struct TestArenaMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestArenaMapLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestArenaMapLiteDefaultTypeInternal() {}
  union {
    TestArenaMapLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestArenaMapLiteDefaultTypeInternal _TestArenaMapLite_default_instance_;
PROTOBUF_CONSTEXPR TestRequiredMessageMapLite_MapFieldEntry_DoNotUse::TestRequiredMessageMapLite_MapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestRequiredMessageMapLite_MapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredMessageMapLite_MapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredMessageMapLite_MapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRequiredMessageMapLite_MapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredMessageMapLite_MapFieldEntry_DoNotUseDefaultTypeInternal _TestRequiredMessageMapLite_MapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRequiredMessageMapLite::TestRequiredMessageMapLite(
    ::_pbi::ConstantInitialized)
  : map_field_(){}
struct TestRequiredMessageMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredMessageMapLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredMessageMapLiteDefaultTypeInternal() {}
  union {
    TestRequiredMessageMapLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredMessageMapLiteDefaultTypeInternal _TestRequiredMessageMapLite_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapLite_KnownMapFieldEntry_DoNotUse::TestEnumMapLite_KnownMapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestEnumMapLite_KnownMapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapLite_KnownMapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapLite_KnownMapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestEnumMapLite_KnownMapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapLite_KnownMapFieldEntry_DoNotUseDefaultTypeInternal _TestEnumMapLite_KnownMapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapLite_UnknownMapFieldEntry_DoNotUse::TestEnumMapLite_UnknownMapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestEnumMapLite_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapLite_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapLite_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestEnumMapLite_UnknownMapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapLite_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal _TestEnumMapLite_UnknownMapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapLite::TestEnumMapLite(
    ::_pbi::ConstantInitialized)
  : known_map_field_()
  , unknown_map_field_(){}
struct TestEnumMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapLiteDefaultTypeInternal() {}
  union {
    TestEnumMapLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapLiteDefaultTypeInternal _TestEnumMapLite_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse::TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUseDefaultTypeInternal _TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse::TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal _TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapPlusExtraLite::TestEnumMapPlusExtraLite(
    ::_pbi::ConstantInitialized)
  : known_map_field_()
  , unknown_map_field_(){}
struct TestEnumMapPlusExtraLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapPlusExtraLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapPlusExtraLiteDefaultTypeInternal() {}
  union {
    TestEnumMapPlusExtraLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapPlusExtraLiteDefaultTypeInternal _TestEnumMapPlusExtraLite_default_instance_;
PROTOBUF_CONSTEXPR TestMessageMapLite_MapInt32MessageEntry_DoNotUse::TestMessageMapLite_MapInt32MessageEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMessageMapLite_MapInt32MessageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageMapLite_MapInt32MessageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageMapLite_MapInt32MessageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMessageMapLite_MapInt32MessageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageMapLite_MapInt32MessageEntry_DoNotUseDefaultTypeInternal _TestMessageMapLite_MapInt32MessageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMessageMapLite::TestMessageMapLite(
    ::_pbi::ConstantInitialized)
  : map_int32_message_(){}
struct TestMessageMapLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageMapLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageMapLiteDefaultTypeInternal() {}
  union {
    TestMessageMapLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageMapLiteDefaultTypeInternal _TestMessageMapLite_default_instance_;
PROTOBUF_CONSTEXPR TestRequiredLite::TestRequiredLite(
    ::_pbi::ConstantInitialized)
  : a_(0)
  , b_(0)
  , c_(0){}
struct TestRequiredLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredLiteDefaultTypeInternal() {}
  union {
    TestRequiredLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredLiteDefaultTypeInternal _TestRequiredLite_default_instance_;
PROTOBUF_CONSTEXPR ForeignMessageArenaLite::ForeignMessageArenaLite(
    ::_pbi::ConstantInitialized)
  : c_(0){}
struct ForeignMessageArenaLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForeignMessageArenaLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForeignMessageArenaLiteDefaultTypeInternal() {}
  union {
    ForeignMessageArenaLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForeignMessageArenaLiteDefaultTypeInternal _ForeignMessageArenaLite_default_instance_;
}  // namespace protobuf_unittest
namespace protobuf_unittest {
bool Proto2MapEnumLite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Proto2MapEnumLite_strings[3] = {};

static const char Proto2MapEnumLite_names[] =
  "PROTO2_MAP_ENUM_BAR_LITE"
  "PROTO2_MAP_ENUM_BAZ_LITE"
  "PROTO2_MAP_ENUM_FOO_LITE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Proto2MapEnumLite_entries[] = {
  { {Proto2MapEnumLite_names + 0, 24}, 1 },
  { {Proto2MapEnumLite_names + 24, 24}, 2 },
  { {Proto2MapEnumLite_names + 48, 24}, 0 },
};

static const int Proto2MapEnumLite_entries_by_number[] = {
  2, // 0 -> PROTO2_MAP_ENUM_FOO_LITE
  0, // 1 -> PROTO2_MAP_ENUM_BAR_LITE
  1, // 2 -> PROTO2_MAP_ENUM_BAZ_LITE
};

const std::string& Proto2MapEnumLite_Name(
    Proto2MapEnumLite value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Proto2MapEnumLite_entries,
          Proto2MapEnumLite_entries_by_number,
          3, Proto2MapEnumLite_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Proto2MapEnumLite_entries,
      Proto2MapEnumLite_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Proto2MapEnumLite_strings[idx].get();
}
bool Proto2MapEnumLite_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Proto2MapEnumLite* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Proto2MapEnumLite_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Proto2MapEnumLite>(int_value);
  }
  return success;
}
bool Proto2MapEnumPlusExtraLite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Proto2MapEnumPlusExtraLite_strings[4] = {};

static const char Proto2MapEnumPlusExtraLite_names[] =
  "E_PROTO2_MAP_ENUM_BAR_LITE"
  "E_PROTO2_MAP_ENUM_BAZ_LITE"
  "E_PROTO2_MAP_ENUM_EXTRA_LITE"
  "E_PROTO2_MAP_ENUM_FOO_LITE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Proto2MapEnumPlusExtraLite_entries[] = {
  { {Proto2MapEnumPlusExtraLite_names + 0, 26}, 1 },
  { {Proto2MapEnumPlusExtraLite_names + 26, 26}, 2 },
  { {Proto2MapEnumPlusExtraLite_names + 52, 28}, 3 },
  { {Proto2MapEnumPlusExtraLite_names + 80, 26}, 0 },
};

static const int Proto2MapEnumPlusExtraLite_entries_by_number[] = {
  3, // 0 -> E_PROTO2_MAP_ENUM_FOO_LITE
  0, // 1 -> E_PROTO2_MAP_ENUM_BAR_LITE
  1, // 2 -> E_PROTO2_MAP_ENUM_BAZ_LITE
  2, // 3 -> E_PROTO2_MAP_ENUM_EXTRA_LITE
};

const std::string& Proto2MapEnumPlusExtraLite_Name(
    Proto2MapEnumPlusExtraLite value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Proto2MapEnumPlusExtraLite_entries,
          Proto2MapEnumPlusExtraLite_entries_by_number,
          4, Proto2MapEnumPlusExtraLite_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Proto2MapEnumPlusExtraLite_entries,
      Proto2MapEnumPlusExtraLite_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Proto2MapEnumPlusExtraLite_strings[idx].get();
}
bool Proto2MapEnumPlusExtraLite_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Proto2MapEnumPlusExtraLite* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Proto2MapEnumPlusExtraLite_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Proto2MapEnumPlusExtraLite>(int_value);
  }
  return success;
}
bool MapEnumLite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MapEnumLite_strings[3] = {};

static const char MapEnumLite_names[] =
  "MAP_ENUM_BAR_LITE"
  "MAP_ENUM_BAZ_LITE"
  "MAP_ENUM_FOO_LITE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MapEnumLite_entries[] = {
  { {MapEnumLite_names + 0, 17}, 1 },
  { {MapEnumLite_names + 17, 17}, 2 },
  { {MapEnumLite_names + 34, 17}, 0 },
};

static const int MapEnumLite_entries_by_number[] = {
  2, // 0 -> MAP_ENUM_FOO_LITE
  0, // 1 -> MAP_ENUM_BAR_LITE
  1, // 2 -> MAP_ENUM_BAZ_LITE
};

const std::string& MapEnumLite_Name(
    MapEnumLite value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MapEnumLite_entries,
          MapEnumLite_entries_by_number,
          3, MapEnumLite_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MapEnumLite_entries,
      MapEnumLite_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MapEnumLite_strings[idx].get();
}
bool MapEnumLite_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MapEnumLite* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MapEnumLite_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MapEnumLite>(int_value);
  }
  return success;
}

// ===================================================================

TestMapLite_MapInt32Int32Entry_DoNotUse::TestMapLite_MapInt32Int32Entry_DoNotUse() {}
TestMapLite_MapInt32Int32Entry_DoNotUse::TestMapLite_MapInt32Int32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapInt32Int32Entry_DoNotUse::MergeFrom(const TestMapLite_MapInt32Int32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapInt64Int64Entry_DoNotUse::TestMapLite_MapInt64Int64Entry_DoNotUse() {}
TestMapLite_MapInt64Int64Entry_DoNotUse::TestMapLite_MapInt64Int64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapInt64Int64Entry_DoNotUse::MergeFrom(const TestMapLite_MapInt64Int64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapUint32Uint32Entry_DoNotUse::TestMapLite_MapUint32Uint32Entry_DoNotUse() {}
TestMapLite_MapUint32Uint32Entry_DoNotUse::TestMapLite_MapUint32Uint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapUint32Uint32Entry_DoNotUse::MergeFrom(const TestMapLite_MapUint32Uint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapUint64Uint64Entry_DoNotUse::TestMapLite_MapUint64Uint64Entry_DoNotUse() {}
TestMapLite_MapUint64Uint64Entry_DoNotUse::TestMapLite_MapUint64Uint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapUint64Uint64Entry_DoNotUse::MergeFrom(const TestMapLite_MapUint64Uint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapSint32Sint32Entry_DoNotUse::TestMapLite_MapSint32Sint32Entry_DoNotUse() {}
TestMapLite_MapSint32Sint32Entry_DoNotUse::TestMapLite_MapSint32Sint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapSint32Sint32Entry_DoNotUse::MergeFrom(const TestMapLite_MapSint32Sint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapSint64Sint64Entry_DoNotUse::TestMapLite_MapSint64Sint64Entry_DoNotUse() {}
TestMapLite_MapSint64Sint64Entry_DoNotUse::TestMapLite_MapSint64Sint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapSint64Sint64Entry_DoNotUse::MergeFrom(const TestMapLite_MapSint64Sint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapFixed32Fixed32Entry_DoNotUse::TestMapLite_MapFixed32Fixed32Entry_DoNotUse() {}
TestMapLite_MapFixed32Fixed32Entry_DoNotUse::TestMapLite_MapFixed32Fixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapFixed32Fixed32Entry_DoNotUse::MergeFrom(const TestMapLite_MapFixed32Fixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapFixed64Fixed64Entry_DoNotUse::TestMapLite_MapFixed64Fixed64Entry_DoNotUse() {}
TestMapLite_MapFixed64Fixed64Entry_DoNotUse::TestMapLite_MapFixed64Fixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapFixed64Fixed64Entry_DoNotUse::MergeFrom(const TestMapLite_MapFixed64Fixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse::TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse() {}
TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse::TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse::MergeFrom(const TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse::TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse() {}
TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse::TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse::MergeFrom(const TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapInt32FloatEntry_DoNotUse::TestMapLite_MapInt32FloatEntry_DoNotUse() {}
TestMapLite_MapInt32FloatEntry_DoNotUse::TestMapLite_MapInt32FloatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapInt32FloatEntry_DoNotUse::MergeFrom(const TestMapLite_MapInt32FloatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapInt32DoubleEntry_DoNotUse::TestMapLite_MapInt32DoubleEntry_DoNotUse() {}
TestMapLite_MapInt32DoubleEntry_DoNotUse::TestMapLite_MapInt32DoubleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapInt32DoubleEntry_DoNotUse::MergeFrom(const TestMapLite_MapInt32DoubleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapBoolBoolEntry_DoNotUse::TestMapLite_MapBoolBoolEntry_DoNotUse() {}
TestMapLite_MapBoolBoolEntry_DoNotUse::TestMapLite_MapBoolBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapBoolBoolEntry_DoNotUse::MergeFrom(const TestMapLite_MapBoolBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapStringStringEntry_DoNotUse::TestMapLite_MapStringStringEntry_DoNotUse() {}
TestMapLite_MapStringStringEntry_DoNotUse::TestMapLite_MapStringStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapStringStringEntry_DoNotUse::MergeFrom(const TestMapLite_MapStringStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapInt32BytesEntry_DoNotUse::TestMapLite_MapInt32BytesEntry_DoNotUse() {}
TestMapLite_MapInt32BytesEntry_DoNotUse::TestMapLite_MapInt32BytesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapInt32BytesEntry_DoNotUse::MergeFrom(const TestMapLite_MapInt32BytesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapInt32EnumEntry_DoNotUse::TestMapLite_MapInt32EnumEntry_DoNotUse() {}
TestMapLite_MapInt32EnumEntry_DoNotUse::TestMapLite_MapInt32EnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapInt32EnumEntry_DoNotUse::MergeFrom(const TestMapLite_MapInt32EnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_MapInt32ForeignMessageEntry_DoNotUse::TestMapLite_MapInt32ForeignMessageEntry_DoNotUse() {}
TestMapLite_MapInt32ForeignMessageEntry_DoNotUse::TestMapLite_MapInt32ForeignMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_MapInt32ForeignMessageEntry_DoNotUse::MergeFrom(const TestMapLite_MapInt32ForeignMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestMapLite_TeboringEntry_DoNotUse::TestMapLite_TeboringEntry_DoNotUse() {}
TestMapLite_TeboringEntry_DoNotUse::TestMapLite_TeboringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMapLite_TeboringEntry_DoNotUse::MergeFrom(const TestMapLite_TeboringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class TestMapLite::_Internal {
 public:
};

void TestMapLite::clear_map_int32_foreign_message() {
  map_int32_foreign_message_.Clear();
}
TestMapLite::TestMapLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  map_int32_int32_(arena),
  map_int64_int64_(arena),
  map_uint32_uint32_(arena),
  map_uint64_uint64_(arena),
  map_sint32_sint32_(arena),
  map_sint64_sint64_(arena),
  map_fixed32_fixed32_(arena),
  map_fixed64_fixed64_(arena),
  map_sfixed32_sfixed32_(arena),
  map_sfixed64_sfixed64_(arena),
  map_int32_float_(arena),
  map_int32_double_(arena),
  map_bool_bool_(arena),
  map_string_string_(arena),
  map_int32_bytes_(arena),
  map_int32_enum_(arena),
  map_int32_foreign_message_(arena),
  teboring_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMapLite)
}
TestMapLite::TestMapLite(const TestMapLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  map_int32_int32_.MergeFrom(from.map_int32_int32_);
  map_int64_int64_.MergeFrom(from.map_int64_int64_);
  map_uint32_uint32_.MergeFrom(from.map_uint32_uint32_);
  map_uint64_uint64_.MergeFrom(from.map_uint64_uint64_);
  map_sint32_sint32_.MergeFrom(from.map_sint32_sint32_);
  map_sint64_sint64_.MergeFrom(from.map_sint64_sint64_);
  map_fixed32_fixed32_.MergeFrom(from.map_fixed32_fixed32_);
  map_fixed64_fixed64_.MergeFrom(from.map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.MergeFrom(from.map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.MergeFrom(from.map_sfixed64_sfixed64_);
  map_int32_float_.MergeFrom(from.map_int32_float_);
  map_int32_double_.MergeFrom(from.map_int32_double_);
  map_bool_bool_.MergeFrom(from.map_bool_bool_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_int32_bytes_.MergeFrom(from.map_int32_bytes_);
  map_int32_enum_.MergeFrom(from.map_int32_enum_);
  map_int32_foreign_message_.MergeFrom(from.map_int32_foreign_message_);
  teboring_.MergeFrom(from.teboring_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMapLite)
}

inline void TestMapLite::SharedCtor() {
}

TestMapLite::~TestMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMapLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMapLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_int32_int32_.Destruct();
  map_int64_int64_.Destruct();
  map_uint32_uint32_.Destruct();
  map_uint64_uint64_.Destruct();
  map_sint32_sint32_.Destruct();
  map_sint64_sint64_.Destruct();
  map_fixed32_fixed32_.Destruct();
  map_fixed64_fixed64_.Destruct();
  map_sfixed32_sfixed32_.Destruct();
  map_sfixed64_sfixed64_.Destruct();
  map_int32_float_.Destruct();
  map_int32_double_.Destruct();
  map_bool_bool_.Destruct();
  map_string_string_.Destruct();
  map_int32_bytes_.Destruct();
  map_int32_enum_.Destruct();
  map_int32_foreign_message_.Destruct();
  teboring_.Destruct();
}

void TestMapLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMapLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_int32_int32_.Clear();
  map_int64_int64_.Clear();
  map_uint32_uint32_.Clear();
  map_uint64_uint64_.Clear();
  map_sint32_sint32_.Clear();
  map_sint64_sint64_.Clear();
  map_fixed32_fixed32_.Clear();
  map_fixed64_fixed64_.Clear();
  map_sfixed32_sfixed32_.Clear();
  map_sfixed64_sfixed64_.Clear();
  map_int32_float_.Clear();
  map_int32_double_.Clear();
  map_bool_bool_.Clear();
  map_string_string_.Clear();
  map_int32_bytes_.Clear();
  map_int32_enum_.Clear();
  map_int32_foreign_message_.Clear();
  teboring_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestMapLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, int32> map_int32_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_int32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, int64> map_int64_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int64_int64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> map_uint32_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_uint32_uint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, uint64> map_uint64_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_uint64_uint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sint32, sint32> map_sint32_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_sint32_sint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sint64, sint64> map_sint64_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_sint64_sint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_fixed32_fixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_fixed64_fixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_sfixed32_sfixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_sfixed64_sfixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, float> map_int32_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_float_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, double> map_int32_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_double_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<bool, bool> map_bool_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_bool_bool_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> map_string_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_string_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, bytes> map_int32_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_bytes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<std::string>(&map_int32_enum_, ::protobuf_unittest::MapEnumLite_IsValid, 16, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.ForeignMessageLite> map_int32_foreign_message = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_foreign_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> teboring = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&teboring_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMapLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMapLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> map_int32_int32 = 1;
  if (!this->_internal_map_int32_int32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestMapLite_MapInt32Int32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_int32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, int64> map_int64_int64 = 2;
  if (!this->_internal_map_int64_int64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestMapLite_MapInt64Int64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int64_int64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> map_uint32_uint32 = 3;
  if (!this->_internal_map_uint32_uint32().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = TestMapLite_MapUint32Uint32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_uint32_uint32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint64, uint64> map_uint64_uint64 = 4;
  if (!this->_internal_map_uint64_uint64().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint64_t>;
    using WireHelper = TestMapLite_MapUint64Uint64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_uint64_uint64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sint32, sint32> map_sint32_sint32 = 5;
  if (!this->_internal_map_sint32_sint32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestMapLite_MapSint32Sint32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sint32_sint32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sint64, sint64> map_sint64_sint64 = 6;
  if (!this->_internal_map_sint64_sint64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestMapLite_MapSint64Sint64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sint64_sint64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
  if (!this->_internal_map_fixed32_fixed32().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = TestMapLite_MapFixed32Fixed32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_fixed32_fixed32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
  if (!this->_internal_map_fixed64_fixed64().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint64_t>;
    using WireHelper = TestMapLite_MapFixed64Fixed64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_fixed64_fixed64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
  if (!this->_internal_map_sfixed32_sfixed32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sfixed32_sfixed32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
  if (!this->_internal_map_sfixed64_sfixed64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sfixed64_sfixed64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, float> map_int32_float = 11;
  if (!this->_internal_map_int32_float().empty()) {
    using MapType = ::_pb::Map<int32_t, float>;
    using WireHelper = TestMapLite_MapInt32FloatEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_float();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, double> map_int32_double = 12;
  if (!this->_internal_map_int32_double().empty()) {
    using MapType = ::_pb::Map<int32_t, double>;
    using WireHelper = TestMapLite_MapInt32DoubleEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_double();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<bool, bool> map_bool_bool = 13;
  if (!this->_internal_map_bool_bool().empty()) {
    using MapType = ::_pb::Map<bool, bool>;
    using WireHelper = TestMapLite_MapBoolBoolEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_bool_bool();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, string> map_string_string = 14;
  if (!this->_internal_map_string_string().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TestMapLite_MapStringStringEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_string_string();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<int32, bytes> map_int32_bytes = 15;
  if (!this->_internal_map_int32_bytes().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = TestMapLite_MapInt32BytesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_bytes();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
  if (!this->_internal_map_int32_enum().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::MapEnumLite>;
    using WireHelper = TestMapLite_MapInt32EnumEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_enum();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .protobuf_unittest.ForeignMessageLite> map_int32_foreign_message = 17;
  if (!this->_internal_map_int32_foreign_message().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::ForeignMessageLite>;
    using WireHelper = TestMapLite_MapInt32ForeignMessageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_foreign_message();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, int32> teboring = 18;
  if (!this->_internal_teboring().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestMapLite_TeboringEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_teboring();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMapLite)
  return target;
}

size_t TestMapLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMapLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> map_int32_int32 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_int32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_int32_int32().begin();
      it != this->_internal_map_int32_int32().end(); ++it) {
    total_size += TestMapLite_MapInt32Int32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, int64> map_int64_int64 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int64_int64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_int64_int64().begin();
      it != this->_internal_map_int64_int64().end(); ++it) {
    total_size += TestMapLite_MapInt64Int64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> map_uint32_uint32 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint32_uint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_map_uint32_uint32().begin();
      it != this->_internal_map_uint32_uint32().end(); ++it) {
    total_size += TestMapLite_MapUint32Uint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, uint64> map_uint64_uint64 = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint64_uint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >::const_iterator
      it = this->_internal_map_uint64_uint64().begin();
      it != this->_internal_map_uint64_uint64().end(); ++it) {
    total_size += TestMapLite_MapUint64Uint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint32, sint32> map_sint32_sint32 = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint32_sint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_sint32_sint32().begin();
      it != this->_internal_map_sint32_sint32().end(); ++it) {
    total_size += TestMapLite_MapSint32Sint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint64, sint64> map_sint64_sint64 = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint64_sint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_sint64_sint64().begin();
      it != this->_internal_map_sint64_sint64().end(); ++it) {
    total_size += TestMapLite_MapSint64Sint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed32_fixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_map_fixed32_fixed32().begin();
      it != this->_internal_map_fixed32_fixed32().end(); ++it) {
    total_size += TestMapLite_MapFixed32Fixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed64_fixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >::const_iterator
      it = this->_internal_map_fixed64_fixed64().begin();
      it != this->_internal_map_fixed64_fixed64().end(); ++it) {
    total_size += TestMapLite_MapFixed64Fixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed32_sfixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_sfixed32_sfixed32().begin();
      it != this->_internal_map_sfixed32_sfixed32().end(); ++it) {
    total_size += TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed64_sfixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_sfixed64_sfixed64().begin();
      it != this->_internal_map_sfixed64_sfixed64().end(); ++it) {
    total_size += TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, float> map_int32_float = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_float_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >::const_iterator
      it = this->_internal_map_int32_float().begin();
      it != this->_internal_map_int32_float().end(); ++it) {
    total_size += TestMapLite_MapInt32FloatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, double> map_int32_double = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_double_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >::const_iterator
      it = this->_internal_map_int32_double().begin();
      it != this->_internal_map_int32_double().end(); ++it) {
    total_size += TestMapLite_MapInt32DoubleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, bool> map_bool_bool = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_bool_bool_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
      it = this->_internal_map_bool_bool().begin();
      it != this->_internal_map_bool_bool().end(); ++it) {
    total_size += TestMapLite_MapBoolBoolEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> map_string_string = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_string_string().begin();
      it != this->_internal_map_string_string().end(); ++it) {
    total_size += TestMapLite_MapStringStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, bytes> map_int32_bytes = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_bytes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_map_int32_bytes().begin();
      it != this->_internal_map_int32_bytes().end(); ++it) {
    total_size += TestMapLite_MapInt32BytesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_enum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::MapEnumLite >::const_iterator
      it = this->_internal_map_int32_enum().begin();
      it != this->_internal_map_int32_enum().end(); ++it) {
    total_size += TestMapLite_MapInt32EnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.ForeignMessageLite> map_int32_foreign_message = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_foreign_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::ForeignMessageLite >::const_iterator
      it = this->_internal_map_int32_foreign_message().begin();
      it != this->_internal_map_int32_foreign_message().end(); ++it) {
    total_size += TestMapLite_MapInt32ForeignMessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, int32> teboring = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_teboring_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_teboring().begin();
      it != this->_internal_teboring().end(); ++it) {
    total_size += TestMapLite_TeboringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMapLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestMapLite*>(
      &from));
}

void TestMapLite::MergeFrom(const TestMapLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMapLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_int32_int32_.MergeFrom(from.map_int32_int32_);
  map_int64_int64_.MergeFrom(from.map_int64_int64_);
  map_uint32_uint32_.MergeFrom(from.map_uint32_uint32_);
  map_uint64_uint64_.MergeFrom(from.map_uint64_uint64_);
  map_sint32_sint32_.MergeFrom(from.map_sint32_sint32_);
  map_sint64_sint64_.MergeFrom(from.map_sint64_sint64_);
  map_fixed32_fixed32_.MergeFrom(from.map_fixed32_fixed32_);
  map_fixed64_fixed64_.MergeFrom(from.map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.MergeFrom(from.map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.MergeFrom(from.map_sfixed64_sfixed64_);
  map_int32_float_.MergeFrom(from.map_int32_float_);
  map_int32_double_.MergeFrom(from.map_int32_double_);
  map_bool_bool_.MergeFrom(from.map_bool_bool_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_int32_bytes_.MergeFrom(from.map_int32_bytes_);
  map_int32_enum_.MergeFrom(from.map_int32_enum_);
  map_int32_foreign_message_.MergeFrom(from.map_int32_foreign_message_);
  teboring_.MergeFrom(from.teboring_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestMapLite::CopyFrom(const TestMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMapLite::IsInitialized() const {
  return true;
}

void TestMapLite::InternalSwap(TestMapLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_int32_int32_.InternalSwap(&other->map_int32_int32_);
  map_int64_int64_.InternalSwap(&other->map_int64_int64_);
  map_uint32_uint32_.InternalSwap(&other->map_uint32_uint32_);
  map_uint64_uint64_.InternalSwap(&other->map_uint64_uint64_);
  map_sint32_sint32_.InternalSwap(&other->map_sint32_sint32_);
  map_sint64_sint64_.InternalSwap(&other->map_sint64_sint64_);
  map_fixed32_fixed32_.InternalSwap(&other->map_fixed32_fixed32_);
  map_fixed64_fixed64_.InternalSwap(&other->map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.InternalSwap(&other->map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.InternalSwap(&other->map_sfixed64_sfixed64_);
  map_int32_float_.InternalSwap(&other->map_int32_float_);
  map_int32_double_.InternalSwap(&other->map_int32_double_);
  map_bool_bool_.InternalSwap(&other->map_bool_bool_);
  map_string_string_.InternalSwap(&other->map_string_string_);
  map_int32_bytes_.InternalSwap(&other->map_int32_bytes_);
  map_int32_enum_.InternalSwap(&other->map_int32_enum_);
  map_int32_foreign_message_.InternalSwap(&other->map_int32_foreign_message_);
  teboring_.InternalSwap(&other->teboring_);
}

std::string TestMapLite::GetTypeName() const {
  return "protobuf_unittest.TestMapLite";
}


// ===================================================================

TestArenaMapLite_MapInt32Int32Entry_DoNotUse::TestArenaMapLite_MapInt32Int32Entry_DoNotUse() {}
TestArenaMapLite_MapInt32Int32Entry_DoNotUse::TestArenaMapLite_MapInt32Int32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapInt32Int32Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapInt32Int32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapInt64Int64Entry_DoNotUse::TestArenaMapLite_MapInt64Int64Entry_DoNotUse() {}
TestArenaMapLite_MapInt64Int64Entry_DoNotUse::TestArenaMapLite_MapInt64Int64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapInt64Int64Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapInt64Int64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapUint32Uint32Entry_DoNotUse::TestArenaMapLite_MapUint32Uint32Entry_DoNotUse() {}
TestArenaMapLite_MapUint32Uint32Entry_DoNotUse::TestArenaMapLite_MapUint32Uint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapUint32Uint32Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapUint32Uint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapUint64Uint64Entry_DoNotUse::TestArenaMapLite_MapUint64Uint64Entry_DoNotUse() {}
TestArenaMapLite_MapUint64Uint64Entry_DoNotUse::TestArenaMapLite_MapUint64Uint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapUint64Uint64Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapUint64Uint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapSint32Sint32Entry_DoNotUse::TestArenaMapLite_MapSint32Sint32Entry_DoNotUse() {}
TestArenaMapLite_MapSint32Sint32Entry_DoNotUse::TestArenaMapLite_MapSint32Sint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapSint32Sint32Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapSint32Sint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapSint64Sint64Entry_DoNotUse::TestArenaMapLite_MapSint64Sint64Entry_DoNotUse() {}
TestArenaMapLite_MapSint64Sint64Entry_DoNotUse::TestArenaMapLite_MapSint64Sint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapSint64Sint64Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapSint64Sint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse::TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse() {}
TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse::TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse::TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse() {}
TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse::TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse::TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse() {}
TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse::TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse::TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse() {}
TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse::TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse::MergeFrom(const TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapInt32FloatEntry_DoNotUse::TestArenaMapLite_MapInt32FloatEntry_DoNotUse() {}
TestArenaMapLite_MapInt32FloatEntry_DoNotUse::TestArenaMapLite_MapInt32FloatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapInt32FloatEntry_DoNotUse::MergeFrom(const TestArenaMapLite_MapInt32FloatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapInt32DoubleEntry_DoNotUse::TestArenaMapLite_MapInt32DoubleEntry_DoNotUse() {}
TestArenaMapLite_MapInt32DoubleEntry_DoNotUse::TestArenaMapLite_MapInt32DoubleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapInt32DoubleEntry_DoNotUse::MergeFrom(const TestArenaMapLite_MapInt32DoubleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapBoolBoolEntry_DoNotUse::TestArenaMapLite_MapBoolBoolEntry_DoNotUse() {}
TestArenaMapLite_MapBoolBoolEntry_DoNotUse::TestArenaMapLite_MapBoolBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapBoolBoolEntry_DoNotUse::MergeFrom(const TestArenaMapLite_MapBoolBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapStringStringEntry_DoNotUse::TestArenaMapLite_MapStringStringEntry_DoNotUse() {}
TestArenaMapLite_MapStringStringEntry_DoNotUse::TestArenaMapLite_MapStringStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapStringStringEntry_DoNotUse::MergeFrom(const TestArenaMapLite_MapStringStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapInt32BytesEntry_DoNotUse::TestArenaMapLite_MapInt32BytesEntry_DoNotUse() {}
TestArenaMapLite_MapInt32BytesEntry_DoNotUse::TestArenaMapLite_MapInt32BytesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapInt32BytesEntry_DoNotUse::MergeFrom(const TestArenaMapLite_MapInt32BytesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapInt32EnumEntry_DoNotUse::TestArenaMapLite_MapInt32EnumEntry_DoNotUse() {}
TestArenaMapLite_MapInt32EnumEntry_DoNotUse::TestArenaMapLite_MapInt32EnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapInt32EnumEntry_DoNotUse::MergeFrom(const TestArenaMapLite_MapInt32EnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse::TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse() {}
TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse::TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse::MergeFrom(const TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class TestArenaMapLite::_Internal {
 public:
};

TestArenaMapLite::TestArenaMapLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  map_int32_int32_(arena),
  map_int64_int64_(arena),
  map_uint32_uint32_(arena),
  map_uint64_uint64_(arena),
  map_sint32_sint32_(arena),
  map_sint64_sint64_(arena),
  map_fixed32_fixed32_(arena),
  map_fixed64_fixed64_(arena),
  map_sfixed32_sfixed32_(arena),
  map_sfixed64_sfixed64_(arena),
  map_int32_float_(arena),
  map_int32_double_(arena),
  map_bool_bool_(arena),
  map_string_string_(arena),
  map_int32_bytes_(arena),
  map_int32_enum_(arena),
  map_int32_foreign_message_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestArenaMapLite)
}
TestArenaMapLite::TestArenaMapLite(const TestArenaMapLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  map_int32_int32_.MergeFrom(from.map_int32_int32_);
  map_int64_int64_.MergeFrom(from.map_int64_int64_);
  map_uint32_uint32_.MergeFrom(from.map_uint32_uint32_);
  map_uint64_uint64_.MergeFrom(from.map_uint64_uint64_);
  map_sint32_sint32_.MergeFrom(from.map_sint32_sint32_);
  map_sint64_sint64_.MergeFrom(from.map_sint64_sint64_);
  map_fixed32_fixed32_.MergeFrom(from.map_fixed32_fixed32_);
  map_fixed64_fixed64_.MergeFrom(from.map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.MergeFrom(from.map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.MergeFrom(from.map_sfixed64_sfixed64_);
  map_int32_float_.MergeFrom(from.map_int32_float_);
  map_int32_double_.MergeFrom(from.map_int32_double_);
  map_bool_bool_.MergeFrom(from.map_bool_bool_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_int32_bytes_.MergeFrom(from.map_int32_bytes_);
  map_int32_enum_.MergeFrom(from.map_int32_enum_);
  map_int32_foreign_message_.MergeFrom(from.map_int32_foreign_message_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestArenaMapLite)
}

inline void TestArenaMapLite::SharedCtor() {
}

TestArenaMapLite::~TestArenaMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestArenaMapLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestArenaMapLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_int32_int32_.Destruct();
  map_int64_int64_.Destruct();
  map_uint32_uint32_.Destruct();
  map_uint64_uint64_.Destruct();
  map_sint32_sint32_.Destruct();
  map_sint64_sint64_.Destruct();
  map_fixed32_fixed32_.Destruct();
  map_fixed64_fixed64_.Destruct();
  map_sfixed32_sfixed32_.Destruct();
  map_sfixed64_sfixed64_.Destruct();
  map_int32_float_.Destruct();
  map_int32_double_.Destruct();
  map_bool_bool_.Destruct();
  map_string_string_.Destruct();
  map_int32_bytes_.Destruct();
  map_int32_enum_.Destruct();
  map_int32_foreign_message_.Destruct();
}

void TestArenaMapLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestArenaMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestArenaMapLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_int32_int32_.Clear();
  map_int64_int64_.Clear();
  map_uint32_uint32_.Clear();
  map_uint64_uint64_.Clear();
  map_sint32_sint32_.Clear();
  map_sint64_sint64_.Clear();
  map_fixed32_fixed32_.Clear();
  map_fixed64_fixed64_.Clear();
  map_sfixed32_sfixed32_.Clear();
  map_sfixed64_sfixed64_.Clear();
  map_int32_float_.Clear();
  map_int32_double_.Clear();
  map_bool_bool_.Clear();
  map_string_string_.Clear();
  map_int32_bytes_.Clear();
  map_int32_enum_.Clear();
  map_int32_foreign_message_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestArenaMapLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, int32> map_int32_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_int32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, int64> map_int64_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int64_int64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> map_uint32_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_uint32_uint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, uint64> map_uint64_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_uint64_uint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sint32, sint32> map_sint32_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_sint32_sint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sint64, sint64> map_sint64_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_sint64_sint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_fixed32_fixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_fixed64_fixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_sfixed32_sfixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_sfixed64_sfixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, float> map_int32_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_float_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, double> map_int32_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_double_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<bool, bool> map_bool_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_bool_bool_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> map_string_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_string_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, bytes> map_int32_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_bytes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<std::string>(&map_int32_enum_, ::protobuf_unittest::MapEnumLite_IsValid, 16, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.ForeignMessageArenaLite> map_int32_foreign_message = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_int32_foreign_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestArenaMapLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestArenaMapLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> map_int32_int32 = 1;
  if (!this->_internal_map_int32_int32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestArenaMapLite_MapInt32Int32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_int32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, int64> map_int64_int64 = 2;
  if (!this->_internal_map_int64_int64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestArenaMapLite_MapInt64Int64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int64_int64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> map_uint32_uint32 = 3;
  if (!this->_internal_map_uint32_uint32().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = TestArenaMapLite_MapUint32Uint32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_uint32_uint32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint64, uint64> map_uint64_uint64 = 4;
  if (!this->_internal_map_uint64_uint64().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint64_t>;
    using WireHelper = TestArenaMapLite_MapUint64Uint64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_uint64_uint64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sint32, sint32> map_sint32_sint32 = 5;
  if (!this->_internal_map_sint32_sint32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestArenaMapLite_MapSint32Sint32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sint32_sint32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sint64, sint64> map_sint64_sint64 = 6;
  if (!this->_internal_map_sint64_sint64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestArenaMapLite_MapSint64Sint64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sint64_sint64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
  if (!this->_internal_map_fixed32_fixed32().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_fixed32_fixed32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
  if (!this->_internal_map_fixed64_fixed64().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint64_t>;
    using WireHelper = TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_fixed64_fixed64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
  if (!this->_internal_map_sfixed32_sfixed32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sfixed32_sfixed32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
  if (!this->_internal_map_sfixed64_sfixed64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sfixed64_sfixed64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, float> map_int32_float = 11;
  if (!this->_internal_map_int32_float().empty()) {
    using MapType = ::_pb::Map<int32_t, float>;
    using WireHelper = TestArenaMapLite_MapInt32FloatEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_float();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, double> map_int32_double = 12;
  if (!this->_internal_map_int32_double().empty()) {
    using MapType = ::_pb::Map<int32_t, double>;
    using WireHelper = TestArenaMapLite_MapInt32DoubleEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_double();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<bool, bool> map_bool_bool = 13;
  if (!this->_internal_map_bool_bool().empty()) {
    using MapType = ::_pb::Map<bool, bool>;
    using WireHelper = TestArenaMapLite_MapBoolBoolEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_bool_bool();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, string> map_string_string = 14;
  if (!this->_internal_map_string_string().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TestArenaMapLite_MapStringStringEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_string_string();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<int32, bytes> map_int32_bytes = 15;
  if (!this->_internal_map_int32_bytes().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = TestArenaMapLite_MapInt32BytesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_bytes();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
  if (!this->_internal_map_int32_enum().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::MapEnumLite>;
    using WireHelper = TestArenaMapLite_MapInt32EnumEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_enum();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .protobuf_unittest.ForeignMessageArenaLite> map_int32_foreign_message = 17;
  if (!this->_internal_map_int32_foreign_message().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::ForeignMessageArenaLite>;
    using WireHelper = TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_foreign_message();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestArenaMapLite)
  return target;
}

size_t TestArenaMapLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestArenaMapLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> map_int32_int32 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_int32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_int32_int32().begin();
      it != this->_internal_map_int32_int32().end(); ++it) {
    total_size += TestArenaMapLite_MapInt32Int32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, int64> map_int64_int64 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int64_int64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_int64_int64().begin();
      it != this->_internal_map_int64_int64().end(); ++it) {
    total_size += TestArenaMapLite_MapInt64Int64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> map_uint32_uint32 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint32_uint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_map_uint32_uint32().begin();
      it != this->_internal_map_uint32_uint32().end(); ++it) {
    total_size += TestArenaMapLite_MapUint32Uint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, uint64> map_uint64_uint64 = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint64_uint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >::const_iterator
      it = this->_internal_map_uint64_uint64().begin();
      it != this->_internal_map_uint64_uint64().end(); ++it) {
    total_size += TestArenaMapLite_MapUint64Uint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint32, sint32> map_sint32_sint32 = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint32_sint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_sint32_sint32().begin();
      it != this->_internal_map_sint32_sint32().end(); ++it) {
    total_size += TestArenaMapLite_MapSint32Sint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint64, sint64> map_sint64_sint64 = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint64_sint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_sint64_sint64().begin();
      it != this->_internal_map_sint64_sint64().end(); ++it) {
    total_size += TestArenaMapLite_MapSint64Sint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed32_fixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_map_fixed32_fixed32().begin();
      it != this->_internal_map_fixed32_fixed32().end(); ++it) {
    total_size += TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed64_fixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >::const_iterator
      it = this->_internal_map_fixed64_fixed64().begin();
      it != this->_internal_map_fixed64_fixed64().end(); ++it) {
    total_size += TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed32_sfixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_sfixed32_sfixed32().begin();
      it != this->_internal_map_sfixed32_sfixed32().end(); ++it) {
    total_size += TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed64_sfixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_sfixed64_sfixed64().begin();
      it != this->_internal_map_sfixed64_sfixed64().end(); ++it) {
    total_size += TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, float> map_int32_float = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_float_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >::const_iterator
      it = this->_internal_map_int32_float().begin();
      it != this->_internal_map_int32_float().end(); ++it) {
    total_size += TestArenaMapLite_MapInt32FloatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, double> map_int32_double = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_double_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >::const_iterator
      it = this->_internal_map_int32_double().begin();
      it != this->_internal_map_int32_double().end(); ++it) {
    total_size += TestArenaMapLite_MapInt32DoubleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, bool> map_bool_bool = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_bool_bool_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
      it = this->_internal_map_bool_bool().begin();
      it != this->_internal_map_bool_bool().end(); ++it) {
    total_size += TestArenaMapLite_MapBoolBoolEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> map_string_string = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_string_string().begin();
      it != this->_internal_map_string_string().end(); ++it) {
    total_size += TestArenaMapLite_MapStringStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, bytes> map_int32_bytes = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_bytes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_map_int32_bytes().begin();
      it != this->_internal_map_int32_bytes().end(); ++it) {
    total_size += TestArenaMapLite_MapInt32BytesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.MapEnumLite> map_int32_enum = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_enum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::MapEnumLite >::const_iterator
      it = this->_internal_map_int32_enum().begin();
      it != this->_internal_map_int32_enum().end(); ++it) {
    total_size += TestArenaMapLite_MapInt32EnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.ForeignMessageArenaLite> map_int32_foreign_message = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_foreign_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::ForeignMessageArenaLite >::const_iterator
      it = this->_internal_map_int32_foreign_message().begin();
      it != this->_internal_map_int32_foreign_message().end(); ++it) {
    total_size += TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestArenaMapLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestArenaMapLite*>(
      &from));
}

void TestArenaMapLite::MergeFrom(const TestArenaMapLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestArenaMapLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_int32_int32_.MergeFrom(from.map_int32_int32_);
  map_int64_int64_.MergeFrom(from.map_int64_int64_);
  map_uint32_uint32_.MergeFrom(from.map_uint32_uint32_);
  map_uint64_uint64_.MergeFrom(from.map_uint64_uint64_);
  map_sint32_sint32_.MergeFrom(from.map_sint32_sint32_);
  map_sint64_sint64_.MergeFrom(from.map_sint64_sint64_);
  map_fixed32_fixed32_.MergeFrom(from.map_fixed32_fixed32_);
  map_fixed64_fixed64_.MergeFrom(from.map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.MergeFrom(from.map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.MergeFrom(from.map_sfixed64_sfixed64_);
  map_int32_float_.MergeFrom(from.map_int32_float_);
  map_int32_double_.MergeFrom(from.map_int32_double_);
  map_bool_bool_.MergeFrom(from.map_bool_bool_);
  map_string_string_.MergeFrom(from.map_string_string_);
  map_int32_bytes_.MergeFrom(from.map_int32_bytes_);
  map_int32_enum_.MergeFrom(from.map_int32_enum_);
  map_int32_foreign_message_.MergeFrom(from.map_int32_foreign_message_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestArenaMapLite::CopyFrom(const TestArenaMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestArenaMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestArenaMapLite::IsInitialized() const {
  return true;
}

void TestArenaMapLite::InternalSwap(TestArenaMapLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_int32_int32_.InternalSwap(&other->map_int32_int32_);
  map_int64_int64_.InternalSwap(&other->map_int64_int64_);
  map_uint32_uint32_.InternalSwap(&other->map_uint32_uint32_);
  map_uint64_uint64_.InternalSwap(&other->map_uint64_uint64_);
  map_sint32_sint32_.InternalSwap(&other->map_sint32_sint32_);
  map_sint64_sint64_.InternalSwap(&other->map_sint64_sint64_);
  map_fixed32_fixed32_.InternalSwap(&other->map_fixed32_fixed32_);
  map_fixed64_fixed64_.InternalSwap(&other->map_fixed64_fixed64_);
  map_sfixed32_sfixed32_.InternalSwap(&other->map_sfixed32_sfixed32_);
  map_sfixed64_sfixed64_.InternalSwap(&other->map_sfixed64_sfixed64_);
  map_int32_float_.InternalSwap(&other->map_int32_float_);
  map_int32_double_.InternalSwap(&other->map_int32_double_);
  map_bool_bool_.InternalSwap(&other->map_bool_bool_);
  map_string_string_.InternalSwap(&other->map_string_string_);
  map_int32_bytes_.InternalSwap(&other->map_int32_bytes_);
  map_int32_enum_.InternalSwap(&other->map_int32_enum_);
  map_int32_foreign_message_.InternalSwap(&other->map_int32_foreign_message_);
}

std::string TestArenaMapLite::GetTypeName() const {
  return "protobuf_unittest.TestArenaMapLite";
}


// ===================================================================

TestRequiredMessageMapLite_MapFieldEntry_DoNotUse::TestRequiredMessageMapLite_MapFieldEntry_DoNotUse() {}
TestRequiredMessageMapLite_MapFieldEntry_DoNotUse::TestRequiredMessageMapLite_MapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRequiredMessageMapLite_MapFieldEntry_DoNotUse::MergeFrom(const TestRequiredMessageMapLite_MapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class TestRequiredMessageMapLite::_Internal {
 public:
};

TestRequiredMessageMapLite::TestRequiredMessageMapLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  map_field_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredMessageMapLite)
}
TestRequiredMessageMapLite::TestRequiredMessageMapLite(const TestRequiredMessageMapLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  map_field_.MergeFrom(from.map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredMessageMapLite)
}

inline void TestRequiredMessageMapLite::SharedCtor() {
}

TestRequiredMessageMapLite::~TestRequiredMessageMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredMessageMapLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRequiredMessageMapLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_field_.Destruct();
}

void TestRequiredMessageMapLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRequiredMessageMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredMessageMapLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_field_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestRequiredMessageMapLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.TestRequiredLite> map_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_field_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRequiredMessageMapLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredMessageMapLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestRequiredLite> map_field = 1;
  if (!this->_internal_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::TestRequiredLite>;
    using WireHelper = TestRequiredMessageMapLite_MapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredMessageMapLite)
  return target;
}

size_t TestRequiredMessageMapLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredMessageMapLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestRequiredLite> map_field = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::TestRequiredLite >::const_iterator
      it = this->_internal_map_field().begin();
      it != this->_internal_map_field().end(); ++it) {
    total_size += TestRequiredMessageMapLite_MapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequiredMessageMapLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestRequiredMessageMapLite*>(
      &from));
}

void TestRequiredMessageMapLite::MergeFrom(const TestRequiredMessageMapLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredMessageMapLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_field_.MergeFrom(from.map_field_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestRequiredMessageMapLite::CopyFrom(const TestRequiredMessageMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredMessageMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredMessageMapLite::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(map_field_)) return false;
  return true;
}

void TestRequiredMessageMapLite::InternalSwap(TestRequiredMessageMapLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_field_.InternalSwap(&other->map_field_);
}

std::string TestRequiredMessageMapLite::GetTypeName() const {
  return "protobuf_unittest.TestRequiredMessageMapLite";
}


// ===================================================================

TestEnumMapLite_KnownMapFieldEntry_DoNotUse::TestEnumMapLite_KnownMapFieldEntry_DoNotUse() {}
TestEnumMapLite_KnownMapFieldEntry_DoNotUse::TestEnumMapLite_KnownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMapLite_KnownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMapLite_KnownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestEnumMapLite_UnknownMapFieldEntry_DoNotUse::TestEnumMapLite_UnknownMapFieldEntry_DoNotUse() {}
TestEnumMapLite_UnknownMapFieldEntry_DoNotUse::TestEnumMapLite_UnknownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMapLite_UnknownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMapLite_UnknownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class TestEnumMapLite::_Internal {
 public:
};

TestEnumMapLite::TestEnumMapLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  known_map_field_(arena),
  unknown_map_field_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMapLite)
}
TestEnumMapLite::TestEnumMapLite(const TestEnumMapLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMapLite)
}

inline void TestEnumMapLite::SharedCtor() {
}

TestEnumMapLite::~TestEnumMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMapLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEnumMapLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  known_map_field_.Destruct();
  unknown_map_field_.Destruct();
}

void TestEnumMapLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEnumMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMapLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  known_map_field_.Clear();
  unknown_map_field_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestEnumMapLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.Proto2MapEnumLite> known_map_field = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<std::string>(&known_map_field_, ::protobuf_unittest::Proto2MapEnumLite_IsValid, 101, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.Proto2MapEnumLite> unknown_map_field = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<std::string>(&unknown_map_field_, ::protobuf_unittest::Proto2MapEnumLite_IsValid, 102, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<818>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEnumMapLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMapLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumLite> known_map_field = 101;
  if (!this->_internal_known_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::Proto2MapEnumLite>;
    using WireHelper = TestEnumMapLite_KnownMapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_known_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(101, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(101, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumLite> unknown_map_field = 102;
  if (!this->_internal_unknown_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::Proto2MapEnumLite>;
    using WireHelper = TestEnumMapLite_UnknownMapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_unknown_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(102, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(102, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMapLite)
  return target;
}

size_t TestEnumMapLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMapLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumLite> known_map_field = 101;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_known_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::Proto2MapEnumLite >::const_iterator
      it = this->_internal_known_map_field().begin();
      it != this->_internal_known_map_field().end(); ++it) {
    total_size += TestEnumMapLite_KnownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumLite> unknown_map_field = 102;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unknown_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::Proto2MapEnumLite >::const_iterator
      it = this->_internal_unknown_map_field().begin();
      it != this->_internal_unknown_map_field().end(); ++it) {
    total_size += TestEnumMapLite_UnknownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEnumMapLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestEnumMapLite*>(
      &from));
}

void TestEnumMapLite::MergeFrom(const TestEnumMapLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMapLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestEnumMapLite::CopyFrom(const TestEnumMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEnumMapLite::IsInitialized() const {
  return true;
}

void TestEnumMapLite::InternalSwap(TestEnumMapLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  known_map_field_.InternalSwap(&other->known_map_field_);
  unknown_map_field_.InternalSwap(&other->unknown_map_field_);
}

std::string TestEnumMapLite::GetTypeName() const {
  return "protobuf_unittest.TestEnumMapLite";
}


// ===================================================================

TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse::TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse() {}
TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse::TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse::TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse() {}
TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse::TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class TestEnumMapPlusExtraLite::_Internal {
 public:
};

TestEnumMapPlusExtraLite::TestEnumMapPlusExtraLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  known_map_field_(arena),
  unknown_map_field_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMapPlusExtraLite)
}
TestEnumMapPlusExtraLite::TestEnumMapPlusExtraLite(const TestEnumMapPlusExtraLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMapPlusExtraLite)
}

inline void TestEnumMapPlusExtraLite::SharedCtor() {
}

TestEnumMapPlusExtraLite::~TestEnumMapPlusExtraLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMapPlusExtraLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEnumMapPlusExtraLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  known_map_field_.Destruct();
  unknown_map_field_.Destruct();
}

void TestEnumMapPlusExtraLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEnumMapPlusExtraLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMapPlusExtraLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  known_map_field_.Clear();
  unknown_map_field_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestEnumMapPlusExtraLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> known_map_field = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<std::string>(&known_map_field_, ::protobuf_unittest::Proto2MapEnumPlusExtraLite_IsValid, 101, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> unknown_map_field = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<std::string>(&unknown_map_field_, ::protobuf_unittest::Proto2MapEnumPlusExtraLite_IsValid, 102, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<818>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEnumMapPlusExtraLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMapPlusExtraLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> known_map_field = 101;
  if (!this->_internal_known_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite>;
    using WireHelper = TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_known_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(101, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(101, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> unknown_map_field = 102;
  if (!this->_internal_unknown_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite>;
    using WireHelper = TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_unknown_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(102, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(102, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMapPlusExtraLite)
  return target;
}

size_t TestEnumMapPlusExtraLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMapPlusExtraLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> known_map_field = 101;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_known_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite >::const_iterator
      it = this->_internal_known_map_field().begin();
      it != this->_internal_known_map_field().end(); ++it) {
    total_size += TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtraLite> unknown_map_field = 102;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unknown_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtraLite >::const_iterator
      it = this->_internal_unknown_map_field().begin();
      it != this->_internal_unknown_map_field().end(); ++it) {
    total_size += TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEnumMapPlusExtraLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestEnumMapPlusExtraLite*>(
      &from));
}

void TestEnumMapPlusExtraLite::MergeFrom(const TestEnumMapPlusExtraLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMapPlusExtraLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestEnumMapPlusExtraLite::CopyFrom(const TestEnumMapPlusExtraLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMapPlusExtraLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEnumMapPlusExtraLite::IsInitialized() const {
  return true;
}

void TestEnumMapPlusExtraLite::InternalSwap(TestEnumMapPlusExtraLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  known_map_field_.InternalSwap(&other->known_map_field_);
  unknown_map_field_.InternalSwap(&other->unknown_map_field_);
}

std::string TestEnumMapPlusExtraLite::GetTypeName() const {
  return "protobuf_unittest.TestEnumMapPlusExtraLite";
}


// ===================================================================

TestMessageMapLite_MapInt32MessageEntry_DoNotUse::TestMessageMapLite_MapInt32MessageEntry_DoNotUse() {}
TestMessageMapLite_MapInt32MessageEntry_DoNotUse::TestMessageMapLite_MapInt32MessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMessageMapLite_MapInt32MessageEntry_DoNotUse::MergeFrom(const TestMessageMapLite_MapInt32MessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class TestMessageMapLite::_Internal {
 public:
};

void TestMessageMapLite::clear_map_int32_message() {
  map_int32_message_.Clear();
}
TestMessageMapLite::TestMessageMapLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  map_int32_message_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMessageMapLite)
}
TestMessageMapLite::TestMessageMapLite(const TestMessageMapLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  map_int32_message_.MergeFrom(from.map_int32_message_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMessageMapLite)
}

inline void TestMessageMapLite::SharedCtor() {
}

TestMessageMapLite::~TestMessageMapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMessageMapLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessageMapLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_int32_message_.Destruct();
}

void TestMessageMapLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessageMapLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMessageMapLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_int32_message_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestMessageMapLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.TestAllTypesLite> map_int32_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_int32_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessageMapLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMessageMapLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestAllTypesLite> map_int32_message = 1;
  if (!this->_internal_map_int32_message().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::TestAllTypesLite>;
    using WireHelper = TestMessageMapLite_MapInt32MessageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_message();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMessageMapLite)
  return target;
}

size_t TestMessageMapLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMessageMapLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestAllTypesLite> map_int32_message = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::TestAllTypesLite >::const_iterator
      it = this->_internal_map_int32_message().begin();
      it != this->_internal_map_int32_message().end(); ++it) {
    total_size += TestMessageMapLite_MapInt32MessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessageMapLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestMessageMapLite*>(
      &from));
}

void TestMessageMapLite::MergeFrom(const TestMessageMapLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMessageMapLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_int32_message_.MergeFrom(from.map_int32_message_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestMessageMapLite::CopyFrom(const TestMessageMapLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMessageMapLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageMapLite::IsInitialized() const {
  return true;
}

void TestMessageMapLite::InternalSwap(TestMessageMapLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_int32_message_.InternalSwap(&other->map_int32_message_);
}

std::string TestMessageMapLite::GetTypeName() const {
  return "protobuf_unittest.TestMessageMapLite";
}


// ===================================================================

class TestRequiredLite::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredLite>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TestRequiredLite::TestRequiredLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredLite)
}
TestRequiredLite::TestRequiredLite(const TestRequiredLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredLite)
}

inline void TestRequiredLite::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
}

TestRequiredLite::~TestRequiredLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRequiredLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestRequiredLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRequiredLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c_) -
        reinterpret_cast<char*>(&a_)) + sizeof(c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestRequiredLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRequiredLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // required int32 b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_b(), target);
  }

  // required int32 c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredLite)
  return target;
}

size_t TestRequiredLite::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_unittest.TestRequiredLite)
  size_t total_size = 0;

  if (_internal_has_a()) {
    // required int32 a = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
  }

  if (_internal_has_b()) {
    // required int32 b = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());
  }

  if (_internal_has_c()) {
    // required int32 c = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_c());
  }

  return total_size;
}
size_t TestRequiredLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredLite)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 a = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());

    // required int32 b = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());

    // required int32 c = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_c());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequiredLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestRequiredLite*>(
      &from));
}

void TestRequiredLite::MergeFrom(const TestRequiredLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000004u) {
      c_ = from.c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestRequiredLite::CopyFrom(const TestRequiredLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredLite::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestRequiredLite::InternalSwap(TestRequiredLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRequiredLite, c_)
      + sizeof(TestRequiredLite::c_)
      - PROTOBUF_FIELD_OFFSET(TestRequiredLite, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

std::string TestRequiredLite::GetTypeName() const {
  return "protobuf_unittest.TestRequiredLite";
}


// ===================================================================

class ForeignMessageArenaLite::_Internal {
 public:
  using HasBits = decltype(std::declval<ForeignMessageArenaLite>()._has_bits_);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ForeignMessageArenaLite::ForeignMessageArenaLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.ForeignMessageArenaLite)
}
ForeignMessageArenaLite::ForeignMessageArenaLite(const ForeignMessageArenaLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.ForeignMessageArenaLite)
}

inline void ForeignMessageArenaLite::SharedCtor() {
c_ = 0;
}

ForeignMessageArenaLite::~ForeignMessageArenaLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.ForeignMessageArenaLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForeignMessageArenaLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForeignMessageArenaLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForeignMessageArenaLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.ForeignMessageArenaLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ForeignMessageArenaLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForeignMessageArenaLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.ForeignMessageArenaLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.ForeignMessageArenaLite)
  return target;
}

size_t ForeignMessageArenaLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.ForeignMessageArenaLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 c = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_c());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForeignMessageArenaLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ForeignMessageArenaLite*>(
      &from));
}

void ForeignMessageArenaLite::MergeFrom(const ForeignMessageArenaLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.ForeignMessageArenaLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_c()) {
    _internal_set_c(from._internal_c());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ForeignMessageArenaLite::CopyFrom(const ForeignMessageArenaLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.ForeignMessageArenaLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessageArenaLite::IsInitialized() const {
  return true;
}

void ForeignMessageArenaLite::InternalSwap(ForeignMessageArenaLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(c_, other->c_);
}

std::string ForeignMessageArenaLite::GetTypeName() const {
  return "protobuf_unittest.ForeignMessageArenaLite";
}

#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestRequiredLite::kSingleFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestRequiredLite >, 11, false>
  TestRequiredLite::single(kSingleFieldNumber, ::protobuf_unittest::TestRequiredLite::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapInt32Int32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapInt32Int32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapInt32Int32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapInt64Int64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapInt64Int64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapInt64Int64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapUint32Uint32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapUint32Uint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapUint32Uint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapUint64Uint64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapUint64Uint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapUint64Uint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapSint32Sint32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapSint32Sint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapSint32Sint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapSint64Sint64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapSint64Sint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapSint64Sint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapFixed32Fixed32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapFixed32Fixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapFixed32Fixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapFixed64Fixed64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapFixed64Fixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapFixed64Fixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapSfixed32Sfixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapSfixed64Sfixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapInt32FloatEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapInt32FloatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapInt32FloatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapInt32DoubleEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapInt32DoubleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapInt32DoubleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapBoolBoolEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapBoolBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapBoolBoolEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapStringStringEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapStringStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapStringStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapInt32BytesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapInt32BytesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapInt32BytesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapInt32EnumEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapInt32EnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapInt32EnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_MapInt32ForeignMessageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_MapInt32ForeignMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_MapInt32ForeignMessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite_TeboringEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite_TeboringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite_TeboringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMapLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMapLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMapLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapInt32Int32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapInt32Int32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapInt32Int32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapInt64Int64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapInt64Int64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapInt64Int64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapUint32Uint32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapUint32Uint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapUint32Uint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapUint64Uint64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapUint64Uint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapUint64Uint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapSint32Sint32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapSint32Sint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapSint32Sint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapSint64Sint64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapSint64Sint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapSint64Sint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapFixed32Fixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapFixed64Fixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapSfixed32Sfixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapSfixed64Sfixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapInt32FloatEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapInt32FloatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapInt32FloatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapInt32DoubleEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapInt32DoubleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapInt32DoubleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapBoolBoolEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapBoolBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapBoolBoolEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapStringStringEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapStringStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapStringStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapInt32BytesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapInt32BytesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapInt32BytesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapInt32EnumEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapInt32EnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapInt32EnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite_MapInt32ForeignMessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestArenaMapLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestArenaMapLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestArenaMapLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredMessageMapLite_MapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredMessageMapLite_MapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredMessageMapLite_MapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredMessageMapLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredMessageMapLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredMessageMapLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapLite_KnownMapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapLite_KnownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapLite_KnownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapLite_UnknownMapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapLite_UnknownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapLite_UnknownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtraLite_KnownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtraLite_UnknownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtraLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtraLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtraLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMessageMapLite_MapInt32MessageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMessageMapLite_MapInt32MessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMessageMapLite_MapInt32MessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMessageMapLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMessageMapLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMessageMapLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::ForeignMessageArenaLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::ForeignMessageArenaLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::ForeignMessageArenaLite >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
