// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_mset.proto

#include "google/protobuf/unittest_mset.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf_unittest {
PROTOBUF_CONSTEXPR TestMessageSetContainer::TestMessageSetContainer(
    ::_pbi::ConstantInitialized)
  : message_set_(nullptr){}
struct TestMessageSetContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageSetContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageSetContainerDefaultTypeInternal() {}
  union {
    TestMessageSetContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageSetContainerDefaultTypeInternal _TestMessageSetContainer_default_instance_;
PROTOBUF_CONSTEXPR NestedTestMessageSetContainer::NestedTestMessageSetContainer(
    ::_pbi::ConstantInitialized)
  : container_(nullptr)
  , child_(nullptr){}
struct NestedTestMessageSetContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NestedTestMessageSetContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NestedTestMessageSetContainerDefaultTypeInternal() {}
  union {
    NestedTestMessageSetContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NestedTestMessageSetContainerDefaultTypeInternal _NestedTestMessageSetContainer_default_instance_;
PROTOBUF_CONSTEXPR TestMessageSetExtension1::TestMessageSetExtension1(
    ::_pbi::ConstantInitialized)
  : test_aliasing_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , recursive_(nullptr)
  , i_(0){}
struct TestMessageSetExtension1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageSetExtension1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageSetExtension1DefaultTypeInternal() {}
  union {
    TestMessageSetExtension1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageSetExtension1DefaultTypeInternal _TestMessageSetExtension1_default_instance_;
PROTOBUF_CONSTEXPR TestMessageSetExtension2::TestMessageSetExtension2(
    ::_pbi::ConstantInitialized)
  : str_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TestMessageSetExtension2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageSetExtension2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageSetExtension2DefaultTypeInternal() {}
  union {
    TestMessageSetExtension2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageSetExtension2DefaultTypeInternal _TestMessageSetExtension2_default_instance_;
PROTOBUF_CONSTEXPR NestedTestInt::NestedTestInt(
    ::_pbi::ConstantInitialized)
  : child_(nullptr)
  , a_(0u){}
struct NestedTestIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NestedTestIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NestedTestIntDefaultTypeInternal() {}
  union {
    NestedTestInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NestedTestIntDefaultTypeInternal _NestedTestInt_default_instance_;
PROTOBUF_CONSTEXPR TestMessageSetExtension3::TestMessageSetExtension3(
    ::_pbi::ConstantInitialized)
  : msg_(nullptr){}
struct TestMessageSetExtension3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageSetExtension3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageSetExtension3DefaultTypeInternal() {}
  union {
    TestMessageSetExtension3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageSetExtension3DefaultTypeInternal _TestMessageSetExtension3_default_instance_;
PROTOBUF_CONSTEXPR RawMessageSet_Item::RawMessageSet_Item(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_id_(0){}
struct RawMessageSet_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawMessageSet_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawMessageSet_ItemDefaultTypeInternal() {}
  union {
    RawMessageSet_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawMessageSet_ItemDefaultTypeInternal _RawMessageSet_Item_default_instance_;
PROTOBUF_CONSTEXPR RawMessageSet::RawMessageSet(
    ::_pbi::ConstantInitialized)
  : item_(){}
struct RawMessageSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawMessageSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawMessageSetDefaultTypeInternal() {}
  union {
    RawMessageSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawMessageSetDefaultTypeInternal _RawMessageSet_default_instance_;
}  // namespace protobuf_unittest
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_google_2fprotobuf_2funittest_5fmset_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2funittest_5fmset_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2funittest_5fmset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetContainer, message_set_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestMessageSetContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestMessageSetContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestMessageSetContainer, container_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestMessageSetContainer, child_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension1, i_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension1, recursive_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension1, test_aliasing_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension2, str_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestInt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestInt, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestInt, child_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMessageSetExtension3, msg_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RawMessageSet_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RawMessageSet_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RawMessageSet_Item, type_id_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RawMessageSet_Item, message_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RawMessageSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RawMessageSet, item_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::protobuf_unittest::TestMessageSetContainer)},
  { 8, 16, -1, sizeof(::protobuf_unittest::NestedTestMessageSetContainer)},
  { 18, 27, -1, sizeof(::protobuf_unittest::TestMessageSetExtension1)},
  { 30, 37, -1, sizeof(::protobuf_unittest::TestMessageSetExtension2)},
  { 38, 46, -1, sizeof(::protobuf_unittest::NestedTestInt)},
  { 48, 55, -1, sizeof(::protobuf_unittest::TestMessageSetExtension3)},
  { 56, 64, -1, sizeof(::protobuf_unittest::RawMessageSet_Item)},
  { 66, -1, -1, sizeof(::protobuf_unittest::RawMessageSet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf_unittest::_TestMessageSetContainer_default_instance_._instance,
  &::protobuf_unittest::_NestedTestMessageSetContainer_default_instance_._instance,
  &::protobuf_unittest::_TestMessageSetExtension1_default_instance_._instance,
  &::protobuf_unittest::_TestMessageSetExtension2_default_instance_._instance,
  &::protobuf_unittest::_NestedTestInt_default_instance_._instance,
  &::protobuf_unittest::_TestMessageSetExtension3_default_instance_._instance,
  &::protobuf_unittest::_RawMessageSet_Item_default_instance_._instance,
  &::protobuf_unittest::_RawMessageSet_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2funittest_5fmset_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#google/protobuf/unittest_mset.proto\022\021p"
  "rotobuf_unittest\032/google/protobuf/unitte"
  "st_mset_wire_format.proto\"Z\n\027TestMessage"
  "SetContainer\022\?\n\013message_set\030\001 \001(\0132*.prot"
  "o2_wireformat_unittest.TestMessageSet\"\237\001"
  "\n\035NestedTestMessageSetContainer\022=\n\tconta"
  "iner\030\001 \001(\0132*.protobuf_unittest.TestMessa"
  "geSetContainer\022\?\n\005child\030\002 \001(\01320.protobuf"
  "_unittest.NestedTestMessageSetContainer\""
  "\371\001\n\030TestMessageSetExtension1\022\t\n\001i\030\017 \001(\005\022"
  "=\n\trecursive\030\020 \001(\0132*.proto2_wireformat_u"
  "nittest.TestMessageSet\022\031\n\rtest_aliasing\030"
  "\021 \001(\tB\002\010\0022x\n\025message_set_extension\022*.pro"
  "to2_wireformat_unittest.TestMessageSet\030\260"
  "\246^ \001(\0132+.protobuf_unittest.TestMessageSe"
  "tExtension1\"\241\001\n\030TestMessageSetExtension2"
  "\022\013\n\003str\030\031 \001(\t2x\n\025message_set_extension\022*"
  ".proto2_wireformat_unittest.TestMessageS"
  "et\030\371\273^ \001(\0132+.protobuf_unittest.TestMessa"
  "geSetExtension2\"K\n\rNestedTestInt\022\t\n\001a\030\001 "
  "\001(\007\022/\n\005child\030\002 \001(\0132 .protobuf_unittest.N"
  "estedTestInt\"\304\001\n\030TestMessageSetExtension"
  "3\022-\n\003msg\030# \001(\0132 .protobuf_unittest.Neste"
  "dTestInt2y\n\025message_set_extension\022*.prot"
  "o2_wireformat_unittest.TestMessageSet\030\251\303"
  "\216] \001(\0132+.protobuf_unittest.TestMessageSe"
  "tExtension3\"n\n\rRawMessageSet\0223\n\004item\030\001 \003"
  "(\n2%.protobuf_unittest.RawMessageSet.Ite"
  "m\032(\n\004Item\022\017\n\007type_id\030\002 \002(\005\022\017\n\007message\030\003 "
  "\002(\014B\005H\001\370\001\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2funittest_5fmset_5fwire_5fformat_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto = {
    false, false, 1170, descriptor_table_protodef_google_2fprotobuf_2funittest_5fmset_2eproto,
    "google/protobuf/unittest_mset.proto",
    &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once, descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2funittest_5fmset_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto, file_level_enum_descriptors_google_2fprotobuf_2funittest_5fmset_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2funittest_5fmset_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2funittest_5fmset_2eproto(&descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto);
namespace protobuf_unittest {

// ===================================================================

class TestMessageSetContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessageSetContainer>()._has_bits_);
  static const ::proto2_wireformat_unittest::TestMessageSet& message_set(const TestMessageSetContainer* msg);
  static void set_has_message_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto2_wireformat_unittest::TestMessageSet&
TestMessageSetContainer::_Internal::message_set(const TestMessageSetContainer* msg) {
  return *msg->message_set_;
}
void TestMessageSetContainer::clear_message_set() {
  if (message_set_ != nullptr) message_set_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TestMessageSetContainer::TestMessageSetContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMessageSetContainer)
}
TestMessageSetContainer::TestMessageSetContainer(const TestMessageSetContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message_set()) {
    message_set_ = new ::proto2_wireformat_unittest::TestMessageSet(*from.message_set_);
  } else {
    message_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMessageSetContainer)
}

inline void TestMessageSetContainer::SharedCtor() {
message_set_ = nullptr;
}

TestMessageSetContainer::~TestMessageSetContainer() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMessageSetContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessageSetContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_set_;
}

void TestMessageSetContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessageSetContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMessageSetContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(message_set_ != nullptr);
    message_set_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessageSetContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto2_wireformat_unittest.TestMessageSet message_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessageSetContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMessageSetContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto2_wireformat_unittest.TestMessageSet message_set = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message_set(this),
        _Internal::message_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMessageSetContainer)
  return target;
}

size_t TestMessageSetContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMessageSetContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto2_wireformat_unittest.TestMessageSet message_set = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_set_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessageSetContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessageSetContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessageSetContainer::GetClassData() const { return &_class_data_; }

void TestMessageSetContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessageSetContainer *>(to)->MergeFrom(
      static_cast<const TestMessageSetContainer &>(from));
}


void TestMessageSetContainer::MergeFrom(const TestMessageSetContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMessageSetContainer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_set()) {
    _internal_mutable_message_set()->::proto2_wireformat_unittest::TestMessageSet::MergeFrom(from._internal_message_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessageSetContainer::CopyFrom(const TestMessageSetContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMessageSetContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageSetContainer::IsInitialized() const {
  if (_internal_has_message_set()) {
    if (!message_set_->IsInitialized()) return false;
  }
  return true;
}

void TestMessageSetContainer::InternalSwap(TestMessageSetContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(message_set_, other->message_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageSetContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[0]);
}

// ===================================================================

class NestedTestMessageSetContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<NestedTestMessageSetContainer>()._has_bits_);
  static const ::protobuf_unittest::TestMessageSetContainer& container(const NestedTestMessageSetContainer* msg);
  static void set_has_container(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::NestedTestMessageSetContainer& child(const NestedTestMessageSetContainer* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestMessageSetContainer&
NestedTestMessageSetContainer::_Internal::container(const NestedTestMessageSetContainer* msg) {
  return *msg->container_;
}
const ::protobuf_unittest::NestedTestMessageSetContainer&
NestedTestMessageSetContainer::_Internal::child(const NestedTestMessageSetContainer* msg) {
  return *msg->child_;
}
NestedTestMessageSetContainer::NestedTestMessageSetContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.NestedTestMessageSetContainer)
}
NestedTestMessageSetContainer::NestedTestMessageSetContainer(const NestedTestMessageSetContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container()) {
    container_ = new ::protobuf_unittest::TestMessageSetContainer(*from.container_);
  } else {
    container_ = nullptr;
  }
  if (from._internal_has_child()) {
    child_ = new ::protobuf_unittest::NestedTestMessageSetContainer(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.NestedTestMessageSetContainer)
}

inline void NestedTestMessageSetContainer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&container_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&child_) -
    reinterpret_cast<char*>(&container_)) + sizeof(child_));
}

NestedTestMessageSetContainer::~NestedTestMessageSetContainer() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.NestedTestMessageSetContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NestedTestMessageSetContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete container_;
  if (this != internal_default_instance()) delete child_;
}

void NestedTestMessageSetContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NestedTestMessageSetContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.NestedTestMessageSetContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(container_ != nullptr);
      container_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(child_ != nullptr);
      child_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedTestMessageSetContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMessageSetContainer container = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.NestedTestMessageSetContainer child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NestedTestMessageSetContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.NestedTestMessageSetContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMessageSetContainer container = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::container(this),
        _Internal::container(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.NestedTestMessageSetContainer child = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.NestedTestMessageSetContainer)
  return target;
}

size_t NestedTestMessageSetContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.NestedTestMessageSetContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestMessageSetContainer container = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *container_);
    }

    // optional .protobuf_unittest.NestedTestMessageSetContainer child = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NestedTestMessageSetContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NestedTestMessageSetContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NestedTestMessageSetContainer::GetClassData() const { return &_class_data_; }

void NestedTestMessageSetContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NestedTestMessageSetContainer *>(to)->MergeFrom(
      static_cast<const NestedTestMessageSetContainer &>(from));
}


void NestedTestMessageSetContainer::MergeFrom(const NestedTestMessageSetContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.NestedTestMessageSetContainer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_container()->::protobuf_unittest::TestMessageSetContainer::MergeFrom(from._internal_container());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_child()->::protobuf_unittest::NestedTestMessageSetContainer::MergeFrom(from._internal_child());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NestedTestMessageSetContainer::CopyFrom(const NestedTestMessageSetContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.NestedTestMessageSetContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedTestMessageSetContainer::IsInitialized() const {
  if (_internal_has_container()) {
    if (!container_->IsInitialized()) return false;
  }
  if (_internal_has_child()) {
    if (!child_->IsInitialized()) return false;
  }
  return true;
}

void NestedTestMessageSetContainer::InternalSwap(NestedTestMessageSetContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NestedTestMessageSetContainer, child_)
      + sizeof(NestedTestMessageSetContainer::child_)
      - PROTOBUF_FIELD_OFFSET(NestedTestMessageSetContainer, container_)>(
          reinterpret_cast<char*>(&container_),
          reinterpret_cast<char*>(&other->container_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedTestMessageSetContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[1]);
}

// ===================================================================

class TestMessageSetExtension1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessageSetExtension1>()._has_bits_);
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto2_wireformat_unittest::TestMessageSet& recursive(const TestMessageSetExtension1* msg);
  static void set_has_recursive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_test_aliasing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto2_wireformat_unittest::TestMessageSet&
TestMessageSetExtension1::_Internal::recursive(const TestMessageSetExtension1* msg) {
  return *msg->recursive_;
}
void TestMessageSetExtension1::clear_recursive() {
  if (recursive_ != nullptr) recursive_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TestMessageSetExtension1::TestMessageSetExtension1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMessageSetExtension1)
}
TestMessageSetExtension1::TestMessageSetExtension1(const TestMessageSetExtension1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_aliasing_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    test_aliasing_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_test_aliasing()) {
    test_aliasing_.Set(from._internal_test_aliasing(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_recursive()) {
    recursive_ = new ::proto2_wireformat_unittest::TestMessageSet(*from.recursive_);
  } else {
    recursive_ = nullptr;
  }
  i_ = from.i_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMessageSetExtension1)
}

inline void TestMessageSetExtension1::SharedCtor() {
test_aliasing_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  test_aliasing_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recursive_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&i_) -
    reinterpret_cast<char*>(&recursive_)) + sizeof(i_));
}

TestMessageSetExtension1::~TestMessageSetExtension1() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMessageSetExtension1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessageSetExtension1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  test_aliasing_.Destroy();
  if (this != internal_default_instance()) delete recursive_;
}

void TestMessageSetExtension1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessageSetExtension1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMessageSetExtension1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      test_aliasing_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(recursive_ != nullptr);
      recursive_->Clear();
    }
  }
  i_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessageSetExtension1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 i = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto2_wireformat_unittest.TestMessageSet recursive = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_recursive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string test_aliasing = 17 [ctype = STRING_PIECE];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_test_aliasing();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestMessageSetExtension1.test_aliasing");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessageSetExtension1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMessageSetExtension1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 i = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_i(), target);
  }

  // optional .proto2_wireformat_unittest.TestMessageSet recursive = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::recursive(this),
        _Internal::recursive(this).GetCachedSize(), target, stream);
  }

  // optional string test_aliasing = 17 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test_aliasing().data(), static_cast<int>(this->_internal_test_aliasing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestMessageSetExtension1.test_aliasing");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_test_aliasing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMessageSetExtension1)
  return target;
}

size_t TestMessageSetExtension1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMessageSetExtension1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string test_aliasing = 17 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_test_aliasing());
    }

    // optional .proto2_wireformat_unittest.TestMessageSet recursive = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recursive_);
    }

    // optional int32 i = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessageSetExtension1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessageSetExtension1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessageSetExtension1::GetClassData() const { return &_class_data_; }

void TestMessageSetExtension1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessageSetExtension1 *>(to)->MergeFrom(
      static_cast<const TestMessageSetExtension1 &>(from));
}


void TestMessageSetExtension1::MergeFrom(const TestMessageSetExtension1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMessageSetExtension1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_test_aliasing(from._internal_test_aliasing());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_recursive()->::proto2_wireformat_unittest::TestMessageSet::MergeFrom(from._internal_recursive());
    }
    if (cached_has_bits & 0x00000004u) {
      i_ = from.i_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessageSetExtension1::CopyFrom(const TestMessageSetExtension1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMessageSetExtension1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageSetExtension1::IsInitialized() const {
  if (_internal_has_recursive()) {
    if (!recursive_->IsInitialized()) return false;
  }
  return true;
}

void TestMessageSetExtension1::InternalSwap(TestMessageSetExtension1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &test_aliasing_, lhs_arena,
      &other->test_aliasing_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessageSetExtension1, i_)
      + sizeof(TestMessageSetExtension1::i_)
      - PROTOBUF_FIELD_OFFSET(TestMessageSetExtension1, recursive_)>(
          reinterpret_cast<char*>(&recursive_),
          reinterpret_cast<char*>(&other->recursive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageSetExtension1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[2]);
}

// ===================================================================

class TestMessageSetExtension2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessageSetExtension2>()._has_bits_);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestMessageSetExtension2::TestMessageSetExtension2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMessageSetExtension2)
}
TestMessageSetExtension2::TestMessageSetExtension2(const TestMessageSetExtension2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str()) {
    str_.Set(from._internal_str(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMessageSetExtension2)
}

inline void TestMessageSetExtension2::SharedCtor() {
str_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestMessageSetExtension2::~TestMessageSetExtension2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMessageSetExtension2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessageSetExtension2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_.Destroy();
}

void TestMessageSetExtension2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessageSetExtension2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMessageSetExtension2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessageSetExtension2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string str = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestMessageSetExtension2.str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessageSetExtension2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMessageSetExtension2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str = 25;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestMessageSetExtension2.str");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMessageSetExtension2)
  return target;
}

size_t TestMessageSetExtension2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMessageSetExtension2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str = 25;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessageSetExtension2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessageSetExtension2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessageSetExtension2::GetClassData() const { return &_class_data_; }

void TestMessageSetExtension2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessageSetExtension2 *>(to)->MergeFrom(
      static_cast<const TestMessageSetExtension2 &>(from));
}


void TestMessageSetExtension2::MergeFrom(const TestMessageSetExtension2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMessageSetExtension2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str()) {
    _internal_set_str(from._internal_str());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessageSetExtension2::CopyFrom(const TestMessageSetExtension2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMessageSetExtension2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageSetExtension2::IsInitialized() const {
  return true;
}

void TestMessageSetExtension2::InternalSwap(TestMessageSetExtension2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageSetExtension2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[3]);
}

// ===================================================================

class NestedTestInt::_Internal {
 public:
  using HasBits = decltype(std::declval<NestedTestInt>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::NestedTestInt& child(const NestedTestInt* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::NestedTestInt&
NestedTestInt::_Internal::child(const NestedTestInt* msg) {
  return *msg->child_;
}
NestedTestInt::NestedTestInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.NestedTestInt)
}
NestedTestInt::NestedTestInt(const NestedTestInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::protobuf_unittest::NestedTestInt(*from.child_);
  } else {
    child_ = nullptr;
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.NestedTestInt)
}

inline void NestedTestInt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&child_)) + sizeof(a_));
}

NestedTestInt::~NestedTestInt() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.NestedTestInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NestedTestInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void NestedTestInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NestedTestInt::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.NestedTestInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(child_ != nullptr);
    child_->Clear();
  }
  a_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedTestInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.NestedTestInt child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NestedTestInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.NestedTestInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 a = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_a(), target);
  }

  // optional .protobuf_unittest.NestedTestInt child = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.NestedTestInt)
  return target;
}

size_t NestedTestInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.NestedTestInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.NestedTestInt child = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_);
    }

    // optional fixed32 a = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NestedTestInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NestedTestInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NestedTestInt::GetClassData() const { return &_class_data_; }

void NestedTestInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NestedTestInt *>(to)->MergeFrom(
      static_cast<const NestedTestInt &>(from));
}


void NestedTestInt::MergeFrom(const NestedTestInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.NestedTestInt)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_child()->::protobuf_unittest::NestedTestInt::MergeFrom(from._internal_child());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NestedTestInt::CopyFrom(const NestedTestInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.NestedTestInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedTestInt::IsInitialized() const {
  return true;
}

void NestedTestInt::InternalSwap(NestedTestInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NestedTestInt, a_)
      + sizeof(NestedTestInt::a_)
      - PROTOBUF_FIELD_OFFSET(NestedTestInt, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedTestInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[4]);
}

// ===================================================================

class TestMessageSetExtension3::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessageSetExtension3>()._has_bits_);
  static const ::protobuf_unittest::NestedTestInt& msg(const TestMessageSetExtension3* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::NestedTestInt&
TestMessageSetExtension3::_Internal::msg(const TestMessageSetExtension3* msg) {
  return *msg->msg_;
}
TestMessageSetExtension3::TestMessageSetExtension3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMessageSetExtension3)
}
TestMessageSetExtension3::TestMessageSetExtension3(const TestMessageSetExtension3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::protobuf_unittest::NestedTestInt(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMessageSetExtension3)
}

inline void TestMessageSetExtension3::SharedCtor() {
msg_ = nullptr;
}

TestMessageSetExtension3::~TestMessageSetExtension3() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMessageSetExtension3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessageSetExtension3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msg_;
}

void TestMessageSetExtension3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessageSetExtension3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMessageSetExtension3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != nullptr);
    msg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessageSetExtension3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.NestedTestInt msg = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMessageSetExtension3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMessageSetExtension3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.NestedTestInt msg = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMessageSetExtension3)
  return target;
}

size_t TestMessageSetExtension3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMessageSetExtension3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.NestedTestInt msg = 35;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMessageSetExtension3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMessageSetExtension3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMessageSetExtension3::GetClassData() const { return &_class_data_; }

void TestMessageSetExtension3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMessageSetExtension3 *>(to)->MergeFrom(
      static_cast<const TestMessageSetExtension3 &>(from));
}


void TestMessageSetExtension3::MergeFrom(const TestMessageSetExtension3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMessageSetExtension3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _internal_mutable_msg()->::protobuf_unittest::NestedTestInt::MergeFrom(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMessageSetExtension3::CopyFrom(const TestMessageSetExtension3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMessageSetExtension3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageSetExtension3::IsInitialized() const {
  return true;
}

void TestMessageSetExtension3::InternalSwap(TestMessageSetExtension3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageSetExtension3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[5]);
}

// ===================================================================

class RawMessageSet_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<RawMessageSet_Item>()._has_bits_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RawMessageSet_Item::RawMessageSet_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.RawMessageSet.Item)
}
RawMessageSet_Item::RawMessageSet_Item(const RawMessageSet_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.RawMessageSet.Item)
}

inline void RawMessageSet_Item::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_id_ = 0;
}

RawMessageSet_Item::~RawMessageSet_Item() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.RawMessageSet.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawMessageSet_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void RawMessageSet_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawMessageSet_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.RawMessageSet.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawMessageSet_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RawMessageSet_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.RawMessageSet.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type_id(), target);
  }

  // required bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.RawMessageSet.Item)
  return target;
}

size_t RawMessageSet_Item::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_unittest.RawMessageSet.Item)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required bytes message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  if (_internal_has_type_id()) {
    // required int32 type_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());
  }

  return total_size;
}
size_t RawMessageSet_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.RawMessageSet.Item)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes message = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());

    // required int32 type_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawMessageSet_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RawMessageSet_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawMessageSet_Item::GetClassData() const { return &_class_data_; }

void RawMessageSet_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RawMessageSet_Item *>(to)->MergeFrom(
      static_cast<const RawMessageSet_Item &>(from));
}


void RawMessageSet_Item::MergeFrom(const RawMessageSet_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.RawMessageSet.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawMessageSet_Item::CopyFrom(const RawMessageSet_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.RawMessageSet.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawMessageSet_Item::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RawMessageSet_Item::InternalSwap(RawMessageSet_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(type_id_, other->type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawMessageSet_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[6]);
}

// ===================================================================

class RawMessageSet::_Internal {
 public:
};

RawMessageSet::RawMessageSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.RawMessageSet)
}
RawMessageSet::RawMessageSet(const RawMessageSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_(from.item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.RawMessageSet)
}

inline void RawMessageSet::SharedCtor() {
}

RawMessageSet::~RawMessageSet() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.RawMessageSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawMessageSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RawMessageSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawMessageSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.RawMessageSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawMessageSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated group Item = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 11)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_item(), ptr, 11);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<11>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RawMessageSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.RawMessageSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group Item = 1 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.RawMessageSet)
  return target;
}

size_t RawMessageSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.RawMessageSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Item = 1 { ... };
  total_size += 2UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawMessageSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RawMessageSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawMessageSet::GetClassData() const { return &_class_data_; }

void RawMessageSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RawMessageSet *>(to)->MergeFrom(
      static_cast<const RawMessageSet &>(from));
}


void RawMessageSet::MergeFrom(const RawMessageSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.RawMessageSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawMessageSet::CopyFrom(const RawMessageSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.RawMessageSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawMessageSet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(item_))
    return false;
  return true;
}

void RawMessageSet::InternalSwap(RawMessageSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawMessageSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_5fmset_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_5fmset_2eproto[7]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestMessageSetExtension1::kMessageSetExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::proto2_wireformat_unittest::TestMessageSet,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestMessageSetExtension1 >, 11, false>
  TestMessageSetExtension1::message_set_extension(kMessageSetExtensionFieldNumber, ::protobuf_unittest::TestMessageSetExtension1::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestMessageSetExtension2::kMessageSetExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::proto2_wireformat_unittest::TestMessageSet,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestMessageSetExtension2 >, 11, false>
  TestMessageSetExtension2::message_set_extension(kMessageSetExtensionFieldNumber, ::protobuf_unittest::TestMessageSetExtension2::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestMessageSetExtension3::kMessageSetExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::proto2_wireformat_unittest::TestMessageSet,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestMessageSetExtension3 >, 11, false>
  TestMessageSetExtension3::message_set_extension(kMessageSetExtensionFieldNumber, ::protobuf_unittest::TestMessageSetExtension3::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMessageSetContainer*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMessageSetContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMessageSetContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::NestedTestMessageSetContainer*
Arena::CreateMaybeMessage< ::protobuf_unittest::NestedTestMessageSetContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::NestedTestMessageSetContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMessageSetExtension1*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMessageSetExtension1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMessageSetExtension1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMessageSetExtension2*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMessageSetExtension2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMessageSetExtension2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::NestedTestInt*
Arena::CreateMaybeMessage< ::protobuf_unittest::NestedTestInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::NestedTestInt >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMessageSetExtension3*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMessageSetExtension3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMessageSetExtension3 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::RawMessageSet_Item*
Arena::CreateMaybeMessage< ::protobuf_unittest::RawMessageSet_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::RawMessageSet_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::RawMessageSet*
Arena::CreateMaybeMessage< ::protobuf_unittest::RawMessageSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::RawMessageSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
