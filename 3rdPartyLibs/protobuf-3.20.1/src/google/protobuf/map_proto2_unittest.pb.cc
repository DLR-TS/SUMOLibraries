// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/map_proto2_unittest.proto

#include "google/protobuf/map_proto2_unittest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf_unittest {
PROTOBUF_CONSTEXPR TestEnumMap_KnownMapFieldEntry_DoNotUse::TestEnumMap_KnownMapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestEnumMap_KnownMapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMap_KnownMapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMap_KnownMapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestEnumMap_KnownMapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMap_KnownMapFieldEntry_DoNotUseDefaultTypeInternal _TestEnumMap_KnownMapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMap_UnknownMapFieldEntry_DoNotUse::TestEnumMap_UnknownMapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestEnumMap_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMap_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMap_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestEnumMap_UnknownMapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMap_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal _TestEnumMap_UnknownMapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMap::TestEnumMap(
    ::_pbi::ConstantInitialized)
  : known_map_field_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , unknown_map_field_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TestEnumMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapDefaultTypeInternal() {}
  union {
    TestEnumMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapDefaultTypeInternal _TestEnumMap_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUseDefaultTypeInternal _TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal _TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestEnumMapPlusExtra::TestEnumMapPlusExtra(
    ::_pbi::ConstantInitialized)
  : known_map_field_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , unknown_map_field_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TestEnumMapPlusExtraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEnumMapPlusExtraDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEnumMapPlusExtraDefaultTypeInternal() {}
  union {
    TestEnumMapPlusExtra _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEnumMapPlusExtraDefaultTypeInternal _TestEnumMapPlusExtra_default_instance_;
PROTOBUF_CONSTEXPR TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestImportEnumMap_ImportEnumAmpEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestImportEnumMap_ImportEnumAmpEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestImportEnumMap_ImportEnumAmpEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestImportEnumMap_ImportEnumAmpEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestImportEnumMap_ImportEnumAmpEntry_DoNotUseDefaultTypeInternal _TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestImportEnumMap::TestImportEnumMap(
    ::_pbi::ConstantInitialized)
  : import_enum_amp_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TestImportEnumMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestImportEnumMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestImportEnumMapDefaultTypeInternal() {}
  union {
    TestImportEnumMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestImportEnumMapDefaultTypeInternal _TestImportEnumMap_default_instance_;
PROTOBUF_CONSTEXPR TestIntIntMap_MEntry_DoNotUse::TestIntIntMap_MEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestIntIntMap_MEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestIntIntMap_MEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestIntIntMap_MEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestIntIntMap_MEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestIntIntMap_MEntry_DoNotUseDefaultTypeInternal _TestIntIntMap_MEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestIntIntMap::TestIntIntMap(
    ::_pbi::ConstantInitialized)
  : m_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TestIntIntMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestIntIntMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestIntIntMapDefaultTypeInternal() {}
  union {
    TestIntIntMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestIntIntMapDefaultTypeInternal _TestIntIntMap_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MInt32Entry_DoNotUse::TestMaps_MInt32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MInt32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MInt32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MInt32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MInt32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MInt32Entry_DoNotUseDefaultTypeInternal _TestMaps_MInt32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MInt64Entry_DoNotUse::TestMaps_MInt64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MInt64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MInt64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MInt64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MInt64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MInt64Entry_DoNotUseDefaultTypeInternal _TestMaps_MInt64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MUint32Entry_DoNotUse::TestMaps_MUint32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MUint32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MUint32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MUint32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MUint32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MUint32Entry_DoNotUseDefaultTypeInternal _TestMaps_MUint32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MUint64Entry_DoNotUse::TestMaps_MUint64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MUint64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MUint64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MUint64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MUint64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MUint64Entry_DoNotUseDefaultTypeInternal _TestMaps_MUint64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MSint32Entry_DoNotUse::TestMaps_MSint32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MSint32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MSint32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MSint32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MSint32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MSint32Entry_DoNotUseDefaultTypeInternal _TestMaps_MSint32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MSint64Entry_DoNotUse::TestMaps_MSint64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MSint64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MSint64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MSint64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MSint64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MSint64Entry_DoNotUseDefaultTypeInternal _TestMaps_MSint64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MFixed32Entry_DoNotUse::TestMaps_MFixed32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MFixed32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MFixed32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MFixed32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MFixed32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MFixed32Entry_DoNotUseDefaultTypeInternal _TestMaps_MFixed32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MFixed64Entry_DoNotUse::TestMaps_MFixed64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MFixed64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MFixed64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MFixed64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MFixed64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MFixed64Entry_DoNotUseDefaultTypeInternal _TestMaps_MFixed64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MSfixed32Entry_DoNotUse::TestMaps_MSfixed32Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MSfixed32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MSfixed32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MSfixed32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MSfixed32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MSfixed32Entry_DoNotUseDefaultTypeInternal _TestMaps_MSfixed32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MSfixed64Entry_DoNotUse::TestMaps_MSfixed64Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MSfixed64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MSfixed64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MSfixed64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MSfixed64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MSfixed64Entry_DoNotUseDefaultTypeInternal _TestMaps_MSfixed64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MBoolEntry_DoNotUse::TestMaps_MBoolEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MBoolEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MBoolEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MBoolEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MBoolEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MBoolEntry_DoNotUseDefaultTypeInternal _TestMaps_MBoolEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps_MStringEntry_DoNotUse::TestMaps_MStringEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestMaps_MStringEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMaps_MStringEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMaps_MStringEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMaps_MStringEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMaps_MStringEntry_DoNotUseDefaultTypeInternal _TestMaps_MStringEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestMaps::TestMaps(
    ::_pbi::ConstantInitialized)
  : m_int32_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_int64_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_uint32_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_uint64_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_sint32_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_sint64_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_fixed32_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_fixed64_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_sfixed32_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_sfixed64_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_bool_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , m_string_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TestMapsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMapsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMapsDefaultTypeInternal() {}
  union {
    TestMaps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMapsDefaultTypeInternal _TestMaps_default_instance_;
PROTOBUF_CONSTEXPR TestSubmessageMaps::TestSubmessageMaps(
    ::_pbi::ConstantInitialized)
  : m_(nullptr){}
struct TestSubmessageMapsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestSubmessageMapsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestSubmessageMapsDefaultTypeInternal() {}
  union {
    TestSubmessageMaps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestSubmessageMapsDefaultTypeInternal _TestSubmessageMaps_default_instance_;
}  // namespace protobuf_unittest
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[24];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap, known_map_field_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap, unknown_map_field_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra, known_map_field_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra, unknown_map_field_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap, import_enum_amp_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap, m_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestSubmessageMaps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestSubmessageMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestSubmessageMaps, m_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::protobuf_unittest::TestEnumMap)},
  { 28, 36, -1, sizeof(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse)},
  { 38, 46, -1, sizeof(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse)},
  { 48, -1, -1, sizeof(::protobuf_unittest::TestEnumMapPlusExtra)},
  { 56, 64, -1, sizeof(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse)},
  { 66, -1, -1, sizeof(::protobuf_unittest::TestImportEnumMap)},
  { 73, 81, -1, sizeof(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse)},
  { 83, -1, -1, sizeof(::protobuf_unittest::TestIntIntMap)},
  { 90, 98, -1, sizeof(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse)},
  { 100, 108, -1, sizeof(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse)},
  { 110, 118, -1, sizeof(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse)},
  { 120, 128, -1, sizeof(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse)},
  { 130, 138, -1, sizeof(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse)},
  { 140, 148, -1, sizeof(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse)},
  { 150, 158, -1, sizeof(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse)},
  { 160, 168, -1, sizeof(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse)},
  { 170, 178, -1, sizeof(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse)},
  { 180, 188, -1, sizeof(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse)},
  { 190, 198, -1, sizeof(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse)},
  { 200, 208, -1, sizeof(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse)},
  { 210, -1, -1, sizeof(::protobuf_unittest::TestMaps)},
  { 228, 235, -1, sizeof(::protobuf_unittest::TestSubmessageMaps)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf_unittest::_TestEnumMap_KnownMapFieldEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestEnumMap_UnknownMapFieldEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestEnumMap_default_instance_._instance,
  &::protobuf_unittest::_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestEnumMapPlusExtra_default_instance_._instance,
  &::protobuf_unittest::_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestImportEnumMap_default_instance_._instance,
  &::protobuf_unittest::_TestIntIntMap_MEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestIntIntMap_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MInt32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MInt64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MUint32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MUint64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MSint32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MSint64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MFixed32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MFixed64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MSfixed32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MSfixed64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MBoolEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_MStringEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestMaps_default_instance_._instance,
  &::protobuf_unittest::_TestSubmessageMaps_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)google/protobuf/map_proto2_unittest.pr"
  "oto\022\021protobuf_unittest\032%google/protobuf/"
  "unittest_import.proto\"\333\002\n\013TestEnumMap\022J\n"
  "\017known_map_field\030e \003(\01321.protobuf_unitte"
  "st.TestEnumMap.KnownMapFieldEntry\022N\n\021unk"
  "nown_map_field\030f \003(\01323.protobuf_unittest"
  ".TestEnumMap.UnknownMapFieldEntry\032V\n\022Kno"
  "wnMapFieldEntry\022\013\n\003key\030\001 \001(\005\022/\n\005value\030\002 "
  "\001(\0162 .protobuf_unittest.Proto2MapEnum:\0028"
  "\001\032X\n\024UnknownMapFieldEntry\022\013\n\003key\030\001 \001(\005\022/"
  "\n\005value\030\002 \001(\0162 .protobuf_unittest.Proto2"
  "MapEnum:\0028\001\"\210\003\n\024TestEnumMapPlusExtra\022S\n\017"
  "known_map_field\030e \003(\0132:.protobuf_unittes"
  "t.TestEnumMapPlusExtra.KnownMapFieldEntr"
  "y\022W\n\021unknown_map_field\030f \003(\0132<.protobuf_"
  "unittest.TestEnumMapPlusExtra.UnknownMap"
  "FieldEntry\032_\n\022KnownMapFieldEntry\022\013\n\003key\030"
  "\001 \001(\005\0228\n\005value\030\002 \001(\0162).protobuf_unittest"
  ".Proto2MapEnumPlusExtra:\0028\001\032a\n\024UnknownMa"
  "pFieldEntry\022\013\n\003key\030\001 \001(\005\0228\n\005value\030\002 \001(\0162"
  ").protobuf_unittest.Proto2MapEnumPlusExt"
  "ra:\0028\001\"\307\001\n\021TestImportEnumMap\022P\n\017import_e"
  "num_amp\030\001 \003(\01327.protobuf_unittest.TestIm"
  "portEnumMap.ImportEnumAmpEntry\032`\n\022Import"
  "EnumAmpEntry\022\013\n\003key\030\001 \001(\005\0229\n\005value\030\002 \001(\016"
  "2*.protobuf_unittest_import.ImportEnumFo"
  "rMap:\0028\001\"m\n\rTestIntIntMap\0222\n\001m\030\001 \003(\0132\'.p"
  "rotobuf_unittest.TestIntIntMap.MEntry\032(\n"
  "\006MEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\""
  "\270\r\n\010TestMaps\0228\n\007m_int32\030\001 \003(\0132\'.protobuf"
  "_unittest.TestMaps.MInt32Entry\0228\n\007m_int6"
  "4\030\002 \003(\0132\'.protobuf_unittest.TestMaps.MIn"
  "t64Entry\022:\n\010m_uint32\030\003 \003(\0132(.protobuf_un"
  "ittest.TestMaps.MUint32Entry\022:\n\010m_uint64"
  "\030\004 \003(\0132(.protobuf_unittest.TestMaps.MUin"
  "t64Entry\022:\n\010m_sint32\030\005 \003(\0132(.protobuf_un"
  "ittest.TestMaps.MSint32Entry\022:\n\010m_sint64"
  "\030\006 \003(\0132(.protobuf_unittest.TestMaps.MSin"
  "t64Entry\022<\n\tm_fixed32\030\007 \003(\0132).protobuf_u"
  "nittest.TestMaps.MFixed32Entry\022<\n\tm_fixe"
  "d64\030\010 \003(\0132).protobuf_unittest.TestMaps.M"
  "Fixed64Entry\022>\n\nm_sfixed32\030\t \003(\0132*.proto"
  "buf_unittest.TestMaps.MSfixed32Entry\022>\n\n"
  "m_sfixed64\030\n \003(\0132*.protobuf_unittest.Tes"
  "tMaps.MSfixed64Entry\0226\n\006m_bool\030\013 \003(\0132&.p"
  "rotobuf_unittest.TestMaps.MBoolEntry\022:\n\010"
  "m_string\030\014 \003(\0132(.protobuf_unittest.TestM"
  "aps.MStringEntry\032O\n\013MInt32Entry\022\013\n\003key\030\001"
  " \001(\005\022/\n\005value\030\002 \001(\0132 .protobuf_unittest."
  "TestIntIntMap:\0028\001\032O\n\013MInt64Entry\022\013\n\003key\030"
  "\001 \001(\003\022/\n\005value\030\002 \001(\0132 .protobuf_unittest"
  ".TestIntIntMap:\0028\001\032P\n\014MUint32Entry\022\013\n\003ke"
  "y\030\001 \001(\r\022/\n\005value\030\002 \001(\0132 .protobuf_unitte"
  "st.TestIntIntMap:\0028\001\032P\n\014MUint64Entry\022\013\n\003"
  "key\030\001 \001(\004\022/\n\005value\030\002 \001(\0132 .protobuf_unit"
  "test.TestIntIntMap:\0028\001\032P\n\014MSint32Entry\022\013"
  "\n\003key\030\001 \001(\021\022/\n\005value\030\002 \001(\0132 .protobuf_un"
  "ittest.TestIntIntMap:\0028\001\032P\n\014MSint64Entry"
  "\022\013\n\003key\030\001 \001(\022\022/\n\005value\030\002 \001(\0132 .protobuf_"
  "unittest.TestIntIntMap:\0028\001\032Q\n\rMFixed32En"
  "try\022\013\n\003key\030\001 \001(\007\022/\n\005value\030\002 \001(\0132 .protob"
  "uf_unittest.TestIntIntMap:\0028\001\032Q\n\rMFixed6"
  "4Entry\022\013\n\003key\030\001 \001(\006\022/\n\005value\030\002 \001(\0132 .pro"
  "tobuf_unittest.TestIntIntMap:\0028\001\032R\n\016MSfi"
  "xed32Entry\022\013\n\003key\030\001 \001(\017\022/\n\005value\030\002 \001(\0132 "
  ".protobuf_unittest.TestIntIntMap:\0028\001\032R\n\016"
  "MSfixed64Entry\022\013\n\003key\030\001 \001(\020\022/\n\005value\030\002 \001"
  "(\0132 .protobuf_unittest.TestIntIntMap:\0028\001"
  "\032N\n\nMBoolEntry\022\013\n\003key\030\001 \001(\010\022/\n\005value\030\002 \001"
  "(\0132 .protobuf_unittest.TestIntIntMap:\0028\001"
  "\032P\n\014MStringEntry\022\013\n\003key\030\001 \001(\t\022/\n\005value\030\002"
  " \001(\0132 .protobuf_unittest.TestIntIntMap:\002"
  "8\001\"<\n\022TestSubmessageMaps\022&\n\001m\030\001 \001(\0132\033.pr"
  "otobuf_unittest.TestMaps*Z\n\rProto2MapEnu"
  "m\022\027\n\023PROTO2_MAP_ENUM_FOO\020\000\022\027\n\023PROTO2_MAP"
  "_ENUM_BAR\020\001\022\027\n\023PROTO2_MAP_ENUM_BAZ\020\002*\206\001\n"
  "\026Proto2MapEnumPlusExtra\022\031\n\025E_PROTO2_MAP_"
  "ENUM_FOO\020\000\022\031\n\025E_PROTO2_MAP_ENUM_BAR\020\001\022\031\n"
  "\025E_PROTO2_MAP_ENUM_BAZ\020\002\022\033\n\027E_PROTO2_MAP"
  "_ENUM_EXTRA\020\003B\003\370\001\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2funittest_5fimport_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto = {
    false, false, 3178, descriptor_table_protodef_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto,
    "google/protobuf/map_proto2_unittest.proto",
    &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once, descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_deps, 1, 24,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto, file_level_enum_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto(&descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto);
namespace protobuf_unittest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proto2MapEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[0];
}
bool Proto2MapEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proto2MapEnumPlusExtra_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[1];
}
bool Proto2MapEnumPlusExtra_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

TestEnumMap_KnownMapFieldEntry_DoNotUse::TestEnumMap_KnownMapFieldEntry_DoNotUse() {}
TestEnumMap_KnownMapFieldEntry_DoNotUse::TestEnumMap_KnownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMap_KnownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMap_KnownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMap_KnownMapFieldEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[0]);
}

// ===================================================================

TestEnumMap_UnknownMapFieldEntry_DoNotUse::TestEnumMap_UnknownMapFieldEntry_DoNotUse() {}
TestEnumMap_UnknownMapFieldEntry_DoNotUse::TestEnumMap_UnknownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMap_UnknownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMap_UnknownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMap_UnknownMapFieldEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[1]);
}

// ===================================================================

class TestEnumMap::_Internal {
 public:
};

TestEnumMap::TestEnumMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  known_map_field_(arena),
  unknown_map_field_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestEnumMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMap)
}
TestEnumMap::TestEnumMap(const TestEnumMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMap)
}

inline void TestEnumMap::SharedCtor() {
}

TestEnumMap::~TestEnumMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestEnumMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  known_map_field_.Destruct();
  unknown_map_field_.Destruct();
}

void TestEnumMap::ArenaDtor(void* object) {
  TestEnumMap* _this = reinterpret_cast< TestEnumMap* >(object);
  _this->known_map_field_.Destruct();
  _this->unknown_map_field_.Destruct();
}
void TestEnumMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEnumMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  known_map_field_.Clear();
  unknown_map_field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestEnumMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&known_map_field_, ::protobuf_unittest::Proto2MapEnum_IsValid, 101, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&unknown_map_field_, ::protobuf_unittest::Proto2MapEnum_IsValid, 102, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<818>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEnumMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
  if (!this->_internal_known_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::Proto2MapEnum>;
    using WireHelper = TestEnumMap_KnownMapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_known_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(101, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(101, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
  if (!this->_internal_unknown_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::Proto2MapEnum>;
    using WireHelper = TestEnumMap_UnknownMapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_unknown_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(102, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(102, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMap)
  return target;
}

size_t TestEnumMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_known_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::Proto2MapEnum >::const_iterator
      it = this->_internal_known_map_field().begin();
      it != this->_internal_known_map_field().end(); ++it) {
    total_size += TestEnumMap_KnownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unknown_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::Proto2MapEnum >::const_iterator
      it = this->_internal_unknown_map_field().begin();
      it != this->_internal_unknown_map_field().end(); ++it) {
    total_size += TestEnumMap_UnknownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEnumMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestEnumMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEnumMap::GetClassData() const { return &_class_data_; }

void TestEnumMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestEnumMap *>(to)->MergeFrom(
      static_cast<const TestEnumMap &>(from));
}


void TestEnumMap::MergeFrom(const TestEnumMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestEnumMap::CopyFrom(const TestEnumMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEnumMap::IsInitialized() const {
  return true;
}

void TestEnumMap::InternalSwap(TestEnumMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  known_map_field_.InternalSwap(&other->known_map_field_);
  unknown_map_field_.InternalSwap(&other->unknown_map_field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[2]);
}

// ===================================================================

TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse() {}
TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[3]);
}

// ===================================================================

TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse() {}
TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[4]);
}

// ===================================================================

class TestEnumMapPlusExtra::_Internal {
 public:
};

TestEnumMapPlusExtra::TestEnumMapPlusExtra(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  known_map_field_(arena),
  unknown_map_field_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestEnumMapPlusExtra::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMapPlusExtra)
}
TestEnumMapPlusExtra::TestEnumMapPlusExtra(const TestEnumMapPlusExtra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMapPlusExtra)
}

inline void TestEnumMapPlusExtra::SharedCtor() {
}

TestEnumMapPlusExtra::~TestEnumMapPlusExtra() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMapPlusExtra)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestEnumMapPlusExtra::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  known_map_field_.Destruct();
  unknown_map_field_.Destruct();
}

void TestEnumMapPlusExtra::ArenaDtor(void* object) {
  TestEnumMapPlusExtra* _this = reinterpret_cast< TestEnumMapPlusExtra* >(object);
  _this->known_map_field_.Destruct();
  _this->unknown_map_field_.Destruct();
}
void TestEnumMapPlusExtra::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEnumMapPlusExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMapPlusExtra)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  known_map_field_.Clear();
  unknown_map_field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestEnumMapPlusExtra::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&known_map_field_, ::protobuf_unittest::Proto2MapEnumPlusExtra_IsValid, 101, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&unknown_map_field_, ::protobuf_unittest::Proto2MapEnumPlusExtra_IsValid, 102, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<818>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEnumMapPlusExtra::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMapPlusExtra)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
  if (!this->_internal_known_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtra>;
    using WireHelper = TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_known_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(101, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(101, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
  if (!this->_internal_unknown_map_field().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtra>;
    using WireHelper = TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_unknown_map_field();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(102, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(102, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMapPlusExtra)
  return target;
}

size_t TestEnumMapPlusExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMapPlusExtra)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_known_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
      it = this->_internal_known_map_field().begin();
      it != this->_internal_known_map_field().end(); ++it) {
    total_size += TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unknown_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
      it = this->_internal_unknown_map_field().begin();
      it != this->_internal_unknown_map_field().end(); ++it) {
    total_size += TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEnumMapPlusExtra::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestEnumMapPlusExtra::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEnumMapPlusExtra::GetClassData() const { return &_class_data_; }

void TestEnumMapPlusExtra::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestEnumMapPlusExtra *>(to)->MergeFrom(
      static_cast<const TestEnumMapPlusExtra &>(from));
}


void TestEnumMapPlusExtra::MergeFrom(const TestEnumMapPlusExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestEnumMapPlusExtra::CopyFrom(const TestEnumMapPlusExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEnumMapPlusExtra::IsInitialized() const {
  return true;
}

void TestEnumMapPlusExtra::InternalSwap(TestEnumMapPlusExtra* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  known_map_field_.InternalSwap(&other->known_map_field_);
  unknown_map_field_.InternalSwap(&other->unknown_map_field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMapPlusExtra::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[5]);
}

// ===================================================================

TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse() {}
TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::MergeFrom(const TestImportEnumMap_ImportEnumAmpEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[6]);
}

// ===================================================================

class TestImportEnumMap::_Internal {
 public:
};

TestImportEnumMap::TestImportEnumMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  import_enum_amp_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestImportEnumMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestImportEnumMap)
}
TestImportEnumMap::TestImportEnumMap(const TestImportEnumMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  import_enum_amp_.MergeFrom(from.import_enum_amp_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestImportEnumMap)
}

inline void TestImportEnumMap::SharedCtor() {
}

TestImportEnumMap::~TestImportEnumMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestImportEnumMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestImportEnumMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  import_enum_amp_.Destruct();
}

void TestImportEnumMap::ArenaDtor(void* object) {
  TestImportEnumMap* _this = reinterpret_cast< TestImportEnumMap* >(object);
  _this->import_enum_amp_.Destruct();
}
void TestImportEnumMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestImportEnumMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestImportEnumMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  import_enum_amp_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestImportEnumMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&import_enum_amp_, ::protobuf_unittest_import::ImportEnumForMap_IsValid, 1, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestImportEnumMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestImportEnumMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
  if (!this->_internal_import_enum_amp().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest_import::ImportEnumForMap>;
    using WireHelper = TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_import_enum_amp();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestImportEnumMap)
  return target;
}

size_t TestImportEnumMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestImportEnumMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_import_enum_amp_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
      it = this->_internal_import_enum_amp().begin();
      it != this->_internal_import_enum_amp().end(); ++it) {
    total_size += TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestImportEnumMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestImportEnumMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestImportEnumMap::GetClassData() const { return &_class_data_; }

void TestImportEnumMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestImportEnumMap *>(to)->MergeFrom(
      static_cast<const TestImportEnumMap &>(from));
}


void TestImportEnumMap::MergeFrom(const TestImportEnumMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestImportEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  import_enum_amp_.MergeFrom(from.import_enum_amp_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestImportEnumMap::CopyFrom(const TestImportEnumMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestImportEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestImportEnumMap::IsInitialized() const {
  return true;
}

void TestImportEnumMap::InternalSwap(TestImportEnumMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  import_enum_amp_.InternalSwap(&other->import_enum_amp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestImportEnumMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[7]);
}

// ===================================================================

TestIntIntMap_MEntry_DoNotUse::TestIntIntMap_MEntry_DoNotUse() {}
TestIntIntMap_MEntry_DoNotUse::TestIntIntMap_MEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestIntIntMap_MEntry_DoNotUse::MergeFrom(const TestIntIntMap_MEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestIntIntMap_MEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[8]);
}

// ===================================================================

class TestIntIntMap::_Internal {
 public:
};

TestIntIntMap::TestIntIntMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestIntIntMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIntIntMap)
}
TestIntIntMap::TestIntIntMap(const TestIntIntMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_.MergeFrom(from.m_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIntIntMap)
}

inline void TestIntIntMap::SharedCtor() {
}

TestIntIntMap::~TestIntIntMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIntIntMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestIntIntMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_.Destruct();
}

void TestIntIntMap::ArenaDtor(void* object) {
  TestIntIntMap* _this = reinterpret_cast< TestIntIntMap* >(object);
  _this->m_.Destruct();
}
void TestIntIntMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestIntIntMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIntIntMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestIntIntMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, int32> m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestIntIntMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIntIntMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> m = 1;
  if (!this->_internal_m().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestIntIntMap_MEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIntIntMap)
  return target;
}

size_t TestIntIntMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIntIntMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_m().begin();
      it != this->_internal_m().end(); ++it) {
    total_size += TestIntIntMap_MEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestIntIntMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestIntIntMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestIntIntMap::GetClassData() const { return &_class_data_; }

void TestIntIntMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestIntIntMap *>(to)->MergeFrom(
      static_cast<const TestIntIntMap &>(from));
}


void TestIntIntMap::MergeFrom(const TestIntIntMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIntIntMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_.MergeFrom(from.m_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestIntIntMap::CopyFrom(const TestIntIntMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIntIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIntIntMap::IsInitialized() const {
  return true;
}

void TestIntIntMap::InternalSwap(TestIntIntMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_.InternalSwap(&other->m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestIntIntMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[9]);
}

// ===================================================================

TestMaps_MInt32Entry_DoNotUse::TestMaps_MInt32Entry_DoNotUse() {}
TestMaps_MInt32Entry_DoNotUse::TestMaps_MInt32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MInt32Entry_DoNotUse::MergeFrom(const TestMaps_MInt32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MInt32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[10]);
}

// ===================================================================

TestMaps_MInt64Entry_DoNotUse::TestMaps_MInt64Entry_DoNotUse() {}
TestMaps_MInt64Entry_DoNotUse::TestMaps_MInt64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MInt64Entry_DoNotUse::MergeFrom(const TestMaps_MInt64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MInt64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[11]);
}

// ===================================================================

TestMaps_MUint32Entry_DoNotUse::TestMaps_MUint32Entry_DoNotUse() {}
TestMaps_MUint32Entry_DoNotUse::TestMaps_MUint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MUint32Entry_DoNotUse::MergeFrom(const TestMaps_MUint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MUint32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[12]);
}

// ===================================================================

TestMaps_MUint64Entry_DoNotUse::TestMaps_MUint64Entry_DoNotUse() {}
TestMaps_MUint64Entry_DoNotUse::TestMaps_MUint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MUint64Entry_DoNotUse::MergeFrom(const TestMaps_MUint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MUint64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[13]);
}

// ===================================================================

TestMaps_MSint32Entry_DoNotUse::TestMaps_MSint32Entry_DoNotUse() {}
TestMaps_MSint32Entry_DoNotUse::TestMaps_MSint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MSint32Entry_DoNotUse::MergeFrom(const TestMaps_MSint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MSint32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[14]);
}

// ===================================================================

TestMaps_MSint64Entry_DoNotUse::TestMaps_MSint64Entry_DoNotUse() {}
TestMaps_MSint64Entry_DoNotUse::TestMaps_MSint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MSint64Entry_DoNotUse::MergeFrom(const TestMaps_MSint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MSint64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[15]);
}

// ===================================================================

TestMaps_MFixed32Entry_DoNotUse::TestMaps_MFixed32Entry_DoNotUse() {}
TestMaps_MFixed32Entry_DoNotUse::TestMaps_MFixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MFixed32Entry_DoNotUse::MergeFrom(const TestMaps_MFixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MFixed32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[16]);
}

// ===================================================================

TestMaps_MFixed64Entry_DoNotUse::TestMaps_MFixed64Entry_DoNotUse() {}
TestMaps_MFixed64Entry_DoNotUse::TestMaps_MFixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MFixed64Entry_DoNotUse::MergeFrom(const TestMaps_MFixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MFixed64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[17]);
}

// ===================================================================

TestMaps_MSfixed32Entry_DoNotUse::TestMaps_MSfixed32Entry_DoNotUse() {}
TestMaps_MSfixed32Entry_DoNotUse::TestMaps_MSfixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MSfixed32Entry_DoNotUse::MergeFrom(const TestMaps_MSfixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MSfixed32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[18]);
}

// ===================================================================

TestMaps_MSfixed64Entry_DoNotUse::TestMaps_MSfixed64Entry_DoNotUse() {}
TestMaps_MSfixed64Entry_DoNotUse::TestMaps_MSfixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MSfixed64Entry_DoNotUse::MergeFrom(const TestMaps_MSfixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MSfixed64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[19]);
}

// ===================================================================

TestMaps_MBoolEntry_DoNotUse::TestMaps_MBoolEntry_DoNotUse() {}
TestMaps_MBoolEntry_DoNotUse::TestMaps_MBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MBoolEntry_DoNotUse::MergeFrom(const TestMaps_MBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MBoolEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[20]);
}

// ===================================================================

TestMaps_MStringEntry_DoNotUse::TestMaps_MStringEntry_DoNotUse() {}
TestMaps_MStringEntry_DoNotUse::TestMaps_MStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MStringEntry_DoNotUse::MergeFrom(const TestMaps_MStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MStringEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[21]);
}

// ===================================================================

class TestMaps::_Internal {
 public:
};

TestMaps::TestMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  m_int32_(arena),
  m_int64_(arena),
  m_uint32_(arena),
  m_uint64_(arena),
  m_sint32_(arena),
  m_sint64_(arena),
  m_fixed32_(arena),
  m_fixed64_(arena),
  m_sfixed32_(arena),
  m_sfixed64_(arena),
  m_bool_(arena),
  m_string_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestMaps::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMaps)
}
TestMaps::TestMaps(const TestMaps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_int32_.MergeFrom(from.m_int32_);
  m_int64_.MergeFrom(from.m_int64_);
  m_uint32_.MergeFrom(from.m_uint32_);
  m_uint64_.MergeFrom(from.m_uint64_);
  m_sint32_.MergeFrom(from.m_sint32_);
  m_sint64_.MergeFrom(from.m_sint64_);
  m_fixed32_.MergeFrom(from.m_fixed32_);
  m_fixed64_.MergeFrom(from.m_fixed64_);
  m_sfixed32_.MergeFrom(from.m_sfixed32_);
  m_sfixed64_.MergeFrom(from.m_sfixed64_);
  m_bool_.MergeFrom(from.m_bool_);
  m_string_.MergeFrom(from.m_string_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMaps)
}

inline void TestMaps::SharedCtor() {
}

TestMaps::~TestMaps() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMaps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestMaps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  m_int32_.Destruct();
  m_int64_.Destruct();
  m_uint32_.Destruct();
  m_uint64_.Destruct();
  m_sint32_.Destruct();
  m_sint64_.Destruct();
  m_fixed32_.Destruct();
  m_fixed64_.Destruct();
  m_sfixed32_.Destruct();
  m_sfixed64_.Destruct();
  m_bool_.Destruct();
  m_string_.Destruct();
}

void TestMaps::ArenaDtor(void* object) {
  TestMaps* _this = reinterpret_cast< TestMaps* >(object);
  _this->m_int32_.Destruct();
  _this->m_int64_.Destruct();
  _this->m_uint32_.Destruct();
  _this->m_uint64_.Destruct();
  _this->m_sint32_.Destruct();
  _this->m_sint64_.Destruct();
  _this->m_fixed32_.Destruct();
  _this->m_fixed64_.Destruct();
  _this->m_sfixed32_.Destruct();
  _this->m_sfixed64_.Destruct();
  _this->m_bool_.Destruct();
  _this->m_string_.Destruct();
}
void TestMaps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMaps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_int32_.Clear();
  m_int64_.Clear();
  m_uint32_.Clear();
  m_uint64_.Clear();
  m_sint32_.Clear();
  m_sint64_.Clear();
  m_fixed32_.Clear();
  m_fixed64_.Clear();
  m_sfixed32_.Clear();
  m_sfixed64_.Clear();
  m_bool_.Clear();
  m_string_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMaps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_int32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_int64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_uint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_uint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_sint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_sint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_fixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_fixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_sfixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_sfixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_bool_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMaps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMaps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
  if (!this->_internal_m_int32().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MInt32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_int32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
  if (!this->_internal_m_int64().empty()) {
    using MapType = ::_pb::Map<int64_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MInt64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_int64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
  if (!this->_internal_m_uint32().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MUint32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_uint32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
  if (!this->_internal_m_uint64().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MUint64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_uint64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
  if (!this->_internal_m_sint32().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MSint32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_sint32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
  if (!this->_internal_m_sint64().empty()) {
    using MapType = ::_pb::Map<int64_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MSint64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_sint64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
  if (!this->_internal_m_fixed32().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MFixed32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_fixed32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
  if (!this->_internal_m_fixed64().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MFixed64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_fixed64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
  if (!this->_internal_m_sfixed32().empty()) {
    using MapType = ::_pb::Map<int32_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MSfixed32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_sfixed32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
  if (!this->_internal_m_sfixed64().empty()) {
    using MapType = ::_pb::Map<int64_t, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MSfixed64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_sfixed64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
  if (!this->_internal_m_bool().empty()) {
    using MapType = ::_pb::Map<bool, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MBoolEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_bool();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
  if (!this->_internal_m_string().empty()) {
    using MapType = ::_pb::Map<std::string, ::protobuf_unittest::TestIntIntMap>;
    using WireHelper = TestMaps_MStringEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_string();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestMaps.MStringEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMaps)
  return target;
}

size_t TestMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMaps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_int32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_int32().begin();
      it != this->_internal_m_int32().end(); ++it) {
    total_size += TestMaps_MInt32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_int64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_int64().begin();
      it != this->_internal_m_int64().end(); ++it) {
    total_size += TestMaps_MInt64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_uint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_uint32().begin();
      it != this->_internal_m_uint32().end(); ++it) {
    total_size += TestMaps_MUint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_uint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_uint64().begin();
      it != this->_internal_m_uint64().end(); ++it) {
    total_size += TestMaps_MUint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_sint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_sint32().begin();
      it != this->_internal_m_sint32().end(); ++it) {
    total_size += TestMaps_MSint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_sint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_sint64().begin();
      it != this->_internal_m_sint64().end(); ++it) {
    total_size += TestMaps_MSint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_fixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_fixed32().begin();
      it != this->_internal_m_fixed32().end(); ++it) {
    total_size += TestMaps_MFixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_fixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_fixed64().begin();
      it != this->_internal_m_fixed64().end(); ++it) {
    total_size += TestMaps_MFixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_sfixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_sfixed32().begin();
      it != this->_internal_m_sfixed32().end(); ++it) {
    total_size += TestMaps_MSfixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_sfixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_sfixed64().begin();
      it != this->_internal_m_sfixed64().end(); ++it) {
    total_size += TestMaps_MSfixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_bool_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_bool().begin();
      it != this->_internal_m_bool().end(); ++it) {
    total_size += TestMaps_MBoolEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->_internal_m_string().begin();
      it != this->_internal_m_string().end(); ++it) {
    total_size += TestMaps_MStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMaps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMaps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMaps::GetClassData() const { return &_class_data_; }

void TestMaps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMaps *>(to)->MergeFrom(
      static_cast<const TestMaps &>(from));
}


void TestMaps::MergeFrom(const TestMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMaps)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  m_int32_.MergeFrom(from.m_int32_);
  m_int64_.MergeFrom(from.m_int64_);
  m_uint32_.MergeFrom(from.m_uint32_);
  m_uint64_.MergeFrom(from.m_uint64_);
  m_sint32_.MergeFrom(from.m_sint32_);
  m_sint64_.MergeFrom(from.m_sint64_);
  m_fixed32_.MergeFrom(from.m_fixed32_);
  m_fixed64_.MergeFrom(from.m_fixed64_);
  m_sfixed32_.MergeFrom(from.m_sfixed32_);
  m_sfixed64_.MergeFrom(from.m_sfixed64_);
  m_bool_.MergeFrom(from.m_bool_);
  m_string_.MergeFrom(from.m_string_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMaps::CopyFrom(const TestMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMaps::IsInitialized() const {
  return true;
}

void TestMaps::InternalSwap(TestMaps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  m_int32_.InternalSwap(&other->m_int32_);
  m_int64_.InternalSwap(&other->m_int64_);
  m_uint32_.InternalSwap(&other->m_uint32_);
  m_uint64_.InternalSwap(&other->m_uint64_);
  m_sint32_.InternalSwap(&other->m_sint32_);
  m_sint64_.InternalSwap(&other->m_sint64_);
  m_fixed32_.InternalSwap(&other->m_fixed32_);
  m_fixed64_.InternalSwap(&other->m_fixed64_);
  m_sfixed32_.InternalSwap(&other->m_sfixed32_);
  m_sfixed64_.InternalSwap(&other->m_sfixed64_);
  m_bool_.InternalSwap(&other->m_bool_);
  m_string_.InternalSwap(&other->m_string_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMaps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[22]);
}

// ===================================================================

class TestSubmessageMaps::_Internal {
 public:
  using HasBits = decltype(std::declval<TestSubmessageMaps>()._has_bits_);
  static const ::protobuf_unittest::TestMaps& m(const TestSubmessageMaps* msg);
  static void set_has_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestMaps&
TestSubmessageMaps::_Internal::m(const TestSubmessageMaps* msg) {
  return *msg->m_;
}
TestSubmessageMaps::TestSubmessageMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestSubmessageMaps)
}
TestSubmessageMaps::TestSubmessageMaps(const TestSubmessageMaps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m()) {
    m_ = new ::protobuf_unittest::TestMaps(*from.m_);
  } else {
    m_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestSubmessageMaps)
}

inline void TestSubmessageMaps::SharedCtor() {
m_ = nullptr;
}

TestSubmessageMaps::~TestSubmessageMaps() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestSubmessageMaps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestSubmessageMaps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete m_;
}

void TestSubmessageMaps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestSubmessageMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestSubmessageMaps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(m_ != nullptr);
    m_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestSubmessageMaps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMaps m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestSubmessageMaps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestSubmessageMaps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMaps m = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::m(this),
        _Internal::m(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestSubmessageMaps)
  return target;
}

size_t TestSubmessageMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestSubmessageMaps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestMaps m = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestSubmessageMaps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestSubmessageMaps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestSubmessageMaps::GetClassData() const { return &_class_data_; }

void TestSubmessageMaps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestSubmessageMaps *>(to)->MergeFrom(
      static_cast<const TestSubmessageMaps &>(from));
}


void TestSubmessageMaps::MergeFrom(const TestSubmessageMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestSubmessageMaps)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m()) {
    _internal_mutable_m()->::protobuf_unittest::TestMaps::MergeFrom(from._internal_m());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestSubmessageMaps::CopyFrom(const TestSubmessageMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestSubmessageMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSubmessageMaps::IsInitialized() const {
  return true;
}

void TestSubmessageMaps::InternalSwap(TestSubmessageMaps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_, other->m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestSubmessageMaps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMap*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMap >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtra*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtra >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtra >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestImportEnumMap*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestImportEnumMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestImportEnumMap >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIntIntMap*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestIntIntMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIntIntMap >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MStringEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestSubmessageMaps*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestSubmessageMaps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestSubmessageMaps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
