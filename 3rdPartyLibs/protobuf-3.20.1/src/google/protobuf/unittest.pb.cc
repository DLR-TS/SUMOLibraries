// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest.proto

#include "google/protobuf/unittest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf_unittest {
PROTOBUF_CONSTEXPR TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(
    ::_pbi::ConstantInitialized)
  : bb_(0){}
struct TestAllTypes_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypes_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypes_NestedMessageDefaultTypeInternal() {}
  union {
    TestAllTypes_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypes_NestedMessageDefaultTypeInternal _TestAllTypes_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypes_OptionalGroup::TestAllTypes_OptionalGroup(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct TestAllTypes_OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypes_OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypes_OptionalGroupDefaultTypeInternal() {}
  union {
    TestAllTypes_OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypes_OptionalGroupDefaultTypeInternal _TestAllTypes_OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypes_RepeatedGroup::TestAllTypes_RepeatedGroup(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct TestAllTypes_RepeatedGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypes_RepeatedGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypes_RepeatedGroupDefaultTypeInternal() {}
  union {
    TestAllTypes_RepeatedGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypes_RepeatedGroupDefaultTypeInternal _TestAllTypes_RepeatedGroup_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypes::TestAllTypes(
    ::_pbi::ConstantInitialized)
  : repeated_int32_()
  , repeated_int64_()
  , repeated_uint32_()
  , repeated_uint64_()
  , repeated_sint32_()
  , repeated_sint64_()
  , repeated_fixed32_()
  , repeated_fixed64_()
  , repeated_sfixed32_()
  , repeated_sfixed64_()
  , repeated_float_()
  , repeated_double_()
  , repeated_bool_()
  , repeated_string_()
  , repeated_bytes_()
  , repeatedgroup_()
  , repeated_nested_message_()
  , repeated_foreign_message_()
  , repeated_import_message_()
  , repeated_nested_enum_()
  , repeated_foreign_enum_()
  , repeated_import_enum_()
  , repeated_string_piece_()
  , repeated_cord_()
  , repeated_lazy_message_()
  , optional_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_bytes_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_string_piece_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_cord_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , default_string_(nullptr, ::_pbi::ConstantInitialized{})
  , default_bytes_(nullptr, ::_pbi::ConstantInitialized{})
  , default_string_piece_(nullptr, ::_pbi::ConstantInitialized{})
  , default_cord_(nullptr, ::_pbi::ConstantInitialized{})
  , optionalgroup_(nullptr)
  , optional_nested_message_(nullptr)
  , optional_foreign_message_(nullptr)
  , optional_import_message_(nullptr)
  , optional_public_import_message_(nullptr)
  , optional_lazy_message_(nullptr)
  , optional_int64_(int64_t{0})
  , optional_int32_(0)
  , optional_uint32_(0u)
  , optional_uint64_(uint64_t{0u})
  , optional_sint64_(int64_t{0})
  , optional_sint32_(0)
  , optional_fixed32_(0u)
  , optional_fixed64_(uint64_t{0u})
  , optional_sfixed64_(int64_t{0})
  , optional_sfixed32_(0)
  , optional_float_(0)
  , optional_double_(0)
  , optional_bool_(false)
  , default_import_enum_(8)

  , optional_nested_enum_(1)

  , optional_foreign_enum_(4)

  , optional_import_enum_(7)

  , default_int32_(41)
  , default_int64_(int64_t{42})
  , default_uint64_(uint64_t{44u})
  , default_uint32_(43u)
  , default_sint32_(-45)
  , default_sint64_(int64_t{46})
  , default_fixed64_(uint64_t{48u})
  , default_fixed32_(47u)
  , default_sfixed32_(49)
  , default_sfixed64_(int64_t{-50})
  , default_double_(52000)
  , default_float_(51.5f)
  , default_bool_(true)
  , default_nested_enum_(2)

  , default_foreign_enum_(5)

  , _oneof_case_{}{}
struct TestAllTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesDefaultTypeInternal() {}
  union {
    TestAllTypes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesDefaultTypeInternal _TestAllTypes_default_instance_;
PROTOBUF_CONSTEXPR NestedTestAllTypes::NestedTestAllTypes(
    ::_pbi::ConstantInitialized)
  : repeated_child_()
  , child_(nullptr)
  , payload_(nullptr)
  , lazy_child_(nullptr)
  , eager_child_(nullptr){}
struct NestedTestAllTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NestedTestAllTypesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NestedTestAllTypesDefaultTypeInternal() {}
  union {
    NestedTestAllTypes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NestedTestAllTypesDefaultTypeInternal _NestedTestAllTypes_default_instance_;
PROTOBUF_CONSTEXPR TestDeprecatedFields::TestDeprecatedFields(
    ::_pbi::ConstantInitialized)
  : deprecated_int32_(0)
  , _oneof_case_{}{}
struct TestDeprecatedFieldsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDeprecatedFieldsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDeprecatedFieldsDefaultTypeInternal() {}
  union {
    TestDeprecatedFields _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDeprecatedFieldsDefaultTypeInternal _TestDeprecatedFields_default_instance_;
PROTOBUF_CONSTEXPR TestDeprecatedMessage::TestDeprecatedMessage(
    ::_pbi::ConstantInitialized){}
struct TestDeprecatedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDeprecatedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDeprecatedMessageDefaultTypeInternal() {}
  union {
    TestDeprecatedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDeprecatedMessageDefaultTypeInternal _TestDeprecatedMessage_default_instance_;
PROTOBUF_CONSTEXPR ForeignMessage::ForeignMessage(
    ::_pbi::ConstantInitialized)
  : c_(0)
  , d_(0){}
struct ForeignMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForeignMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForeignMessageDefaultTypeInternal() {}
  union {
    ForeignMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForeignMessageDefaultTypeInternal _ForeignMessage_default_instance_;
PROTOBUF_CONSTEXPR TestReservedFields::TestReservedFields(
    ::_pbi::ConstantInitialized){}
struct TestReservedFieldsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestReservedFieldsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestReservedFieldsDefaultTypeInternal() {}
  union {
    TestReservedFields _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestReservedFieldsDefaultTypeInternal _TestReservedFields_default_instance_;
PROTOBUF_CONSTEXPR TestAllExtensions::TestAllExtensions(
    ::_pbi::ConstantInitialized){}
struct TestAllExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllExtensionsDefaultTypeInternal() {}
  union {
    TestAllExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllExtensionsDefaultTypeInternal _TestAllExtensions_default_instance_;
PROTOBUF_CONSTEXPR OptionalGroup_extension::OptionalGroup_extension(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct OptionalGroup_extensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionalGroup_extensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionalGroup_extensionDefaultTypeInternal() {}
  union {
    OptionalGroup_extension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionalGroup_extensionDefaultTypeInternal _OptionalGroup_extension_default_instance_;
PROTOBUF_CONSTEXPR RepeatedGroup_extension::RepeatedGroup_extension(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct RepeatedGroup_extensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepeatedGroup_extensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepeatedGroup_extensionDefaultTypeInternal() {}
  union {
    RepeatedGroup_extension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepeatedGroup_extensionDefaultTypeInternal _RepeatedGroup_extension_default_instance_;
PROTOBUF_CONSTEXPR TestGroup_OptionalGroup::TestGroup_OptionalGroup(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct TestGroup_OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestGroup_OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestGroup_OptionalGroupDefaultTypeInternal() {}
  union {
    TestGroup_OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestGroup_OptionalGroupDefaultTypeInternal _TestGroup_OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR TestGroup::TestGroup(
    ::_pbi::ConstantInitialized)
  : optionalgroup_(nullptr)
  , optional_foreign_enum_(4)
{}
struct TestGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestGroupDefaultTypeInternal() {}
  union {
    TestGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestGroupDefaultTypeInternal _TestGroup_default_instance_;
PROTOBUF_CONSTEXPR TestGroupExtension::TestGroupExtension(
    ::_pbi::ConstantInitialized){}
struct TestGroupExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestGroupExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestGroupExtensionDefaultTypeInternal() {}
  union {
    TestGroupExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestGroupExtensionDefaultTypeInternal _TestGroupExtension_default_instance_;
PROTOBUF_CONSTEXPR TestNestedExtension_OptionalGroup_extension::TestNestedExtension_OptionalGroup_extension(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct TestNestedExtension_OptionalGroup_extensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedExtension_OptionalGroup_extensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedExtension_OptionalGroup_extensionDefaultTypeInternal() {}
  union {
    TestNestedExtension_OptionalGroup_extension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedExtension_OptionalGroup_extensionDefaultTypeInternal _TestNestedExtension_OptionalGroup_extension_default_instance_;
PROTOBUF_CONSTEXPR TestNestedExtension::TestNestedExtension(
    ::_pbi::ConstantInitialized){}
struct TestNestedExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedExtensionDefaultTypeInternal() {}
  union {
    TestNestedExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedExtensionDefaultTypeInternal _TestNestedExtension_default_instance_;
PROTOBUF_CONSTEXPR TestChildExtension::TestChildExtension(
    ::_pbi::ConstantInitialized)
  : a_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , b_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_extension_(nullptr){}
struct TestChildExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestChildExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestChildExtensionDefaultTypeInternal() {}
  union {
    TestChildExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestChildExtensionDefaultTypeInternal _TestChildExtension_default_instance_;
PROTOBUF_CONSTEXPR TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(
    ::_pbi::ConstantInitialized)
  : a_(0)
  , b_(0){}
struct TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsDefaultTypeInternal() {}
  union {
    TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsDefaultTypeInternal _TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions_default_instance_;
PROTOBUF_CONSTEXPR TestChildExtensionData_NestedTestAllExtensionsData::TestChildExtensionData_NestedTestAllExtensionsData(
    ::_pbi::ConstantInitialized)
  : dynamic_(nullptr){}
struct TestChildExtensionData_NestedTestAllExtensionsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestChildExtensionData_NestedTestAllExtensionsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestChildExtensionData_NestedTestAllExtensionsDataDefaultTypeInternal() {}
  union {
    TestChildExtensionData_NestedTestAllExtensionsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestChildExtensionData_NestedTestAllExtensionsDataDefaultTypeInternal _TestChildExtensionData_NestedTestAllExtensionsData_default_instance_;
PROTOBUF_CONSTEXPR TestChildExtensionData::TestChildExtensionData(
    ::_pbi::ConstantInitialized)
  : a_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , b_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_extension_(nullptr){}
struct TestChildExtensionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestChildExtensionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestChildExtensionDataDefaultTypeInternal() {}
  union {
    TestChildExtensionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestChildExtensionDataDefaultTypeInternal _TestChildExtensionData_default_instance_;
PROTOBUF_CONSTEXPR TestNestedChildExtension::TestNestedChildExtension(
    ::_pbi::ConstantInitialized)
  : child_(nullptr)
  , a_(0){}
struct TestNestedChildExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedChildExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedChildExtensionDefaultTypeInternal() {}
  union {
    TestNestedChildExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedChildExtensionDefaultTypeInternal _TestNestedChildExtension_default_instance_;
PROTOBUF_CONSTEXPR TestNestedChildExtensionData::TestNestedChildExtensionData(
    ::_pbi::ConstantInitialized)
  : child_(nullptr)
  , a_(0){}
struct TestNestedChildExtensionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedChildExtensionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedChildExtensionDataDefaultTypeInternal() {}
  union {
    TestNestedChildExtensionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedChildExtensionDataDefaultTypeInternal _TestNestedChildExtensionData_default_instance_;
PROTOBUF_CONSTEXPR TestRequired::TestRequired(
    ::_pbi::ConstantInitialized)
  : optional_foreign_(nullptr)
  , a_(0)
  , dummy2_(0)
  , b_(0)
  , dummy4_(0)
  , dummy5_(0)
  , dummy6_(0)
  , dummy7_(0)
  , dummy8_(0)
  , dummy9_(0)
  , dummy10_(0)
  , dummy11_(0)
  , dummy12_(0)
  , dummy13_(0)
  , dummy14_(0)
  , dummy15_(0)
  , dummy16_(0)
  , dummy17_(0)
  , dummy18_(0)
  , dummy19_(0)
  , dummy20_(0)
  , dummy21_(0)
  , dummy22_(0)
  , dummy23_(0)
  , dummy24_(0)
  , dummy25_(0)
  , dummy26_(0)
  , dummy27_(0)
  , dummy28_(0)
  , dummy29_(0)
  , dummy30_(0)
  , dummy31_(0)
  , dummy32_(0)
  , c_(0){}
struct TestRequiredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredDefaultTypeInternal() {}
  union {
    TestRequired _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredDefaultTypeInternal _TestRequired_default_instance_;
PROTOBUF_CONSTEXPR TestRequiredForeign::TestRequiredForeign(
    ::_pbi::ConstantInitialized)
  : repeated_message_()
  , optional_message_(nullptr)
  , dummy_(0){}
struct TestRequiredForeignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredForeignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredForeignDefaultTypeInternal() {}
  union {
    TestRequiredForeign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredForeignDefaultTypeInternal _TestRequiredForeign_default_instance_;
PROTOBUF_CONSTEXPR TestRequiredMessage::TestRequiredMessage(
    ::_pbi::ConstantInitialized)
  : repeated_message_()
  , optional_message_(nullptr)
  , required_message_(nullptr){}
struct TestRequiredMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredMessageDefaultTypeInternal() {}
  union {
    TestRequiredMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredMessageDefaultTypeInternal _TestRequiredMessage_default_instance_;
PROTOBUF_CONSTEXPR TestNestedRequiredForeign::TestNestedRequiredForeign(
    ::_pbi::ConstantInitialized)
  : child_(nullptr)
  , payload_(nullptr)
  , dummy_(0){}
struct TestNestedRequiredForeignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedRequiredForeignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedRequiredForeignDefaultTypeInternal() {}
  union {
    TestNestedRequiredForeign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedRequiredForeignDefaultTypeInternal _TestNestedRequiredForeign_default_instance_;
PROTOBUF_CONSTEXPR TestForeignNested::TestForeignNested(
    ::_pbi::ConstantInitialized)
  : foreign_nested_(nullptr){}
struct TestForeignNestedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestForeignNestedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestForeignNestedDefaultTypeInternal() {}
  union {
    TestForeignNested _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestForeignNestedDefaultTypeInternal _TestForeignNested_default_instance_;
PROTOBUF_CONSTEXPR TestEmptyMessage::TestEmptyMessage(
    ::_pbi::ConstantInitialized){}
struct TestEmptyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEmptyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEmptyMessageDefaultTypeInternal() {}
  union {
    TestEmptyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEmptyMessageDefaultTypeInternal _TestEmptyMessage_default_instance_;
PROTOBUF_CONSTEXPR TestEmptyMessageWithExtensions::TestEmptyMessageWithExtensions(
    ::_pbi::ConstantInitialized){}
struct TestEmptyMessageWithExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEmptyMessageWithExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEmptyMessageWithExtensionsDefaultTypeInternal() {}
  union {
    TestEmptyMessageWithExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEmptyMessageWithExtensionsDefaultTypeInternal _TestEmptyMessageWithExtensions_default_instance_;
PROTOBUF_CONSTEXPR TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage(
    ::_pbi::ConstantInitialized)
  : cc_(0){}
struct TestPickleNestedMessage_NestedMessage_NestedNestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPickleNestedMessage_NestedMessage_NestedNestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPickleNestedMessage_NestedMessage_NestedNestedMessageDefaultTypeInternal() {}
  union {
    TestPickleNestedMessage_NestedMessage_NestedNestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPickleNestedMessage_NestedMessage_NestedNestedMessageDefaultTypeInternal _TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage(
    ::_pbi::ConstantInitialized)
  : bb_(0){}
struct TestPickleNestedMessage_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPickleNestedMessage_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPickleNestedMessage_NestedMessageDefaultTypeInternal() {}
  union {
    TestPickleNestedMessage_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPickleNestedMessage_NestedMessageDefaultTypeInternal _TestPickleNestedMessage_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestPickleNestedMessage::TestPickleNestedMessage(
    ::_pbi::ConstantInitialized){}
struct TestPickleNestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPickleNestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPickleNestedMessageDefaultTypeInternal() {}
  union {
    TestPickleNestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPickleNestedMessageDefaultTypeInternal _TestPickleNestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestMultipleExtensionRanges::TestMultipleExtensionRanges(
    ::_pbi::ConstantInitialized){}
struct TestMultipleExtensionRangesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultipleExtensionRangesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultipleExtensionRangesDefaultTypeInternal() {}
  union {
    TestMultipleExtensionRanges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultipleExtensionRangesDefaultTypeInternal _TestMultipleExtensionRanges_default_instance_;
PROTOBUF_CONSTEXPR TestReallyLargeTagNumber::TestReallyLargeTagNumber(
    ::_pbi::ConstantInitialized)
  : a_(0)
  , bb_(0){}
struct TestReallyLargeTagNumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestReallyLargeTagNumberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestReallyLargeTagNumberDefaultTypeInternal() {}
  union {
    TestReallyLargeTagNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestReallyLargeTagNumberDefaultTypeInternal _TestReallyLargeTagNumber_default_instance_;
PROTOBUF_CONSTEXPR TestRecursiveMessage::TestRecursiveMessage(
    ::_pbi::ConstantInitialized)
  : a_(nullptr)
  , i_(0){}
struct TestRecursiveMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRecursiveMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRecursiveMessageDefaultTypeInternal() {}
  union {
    TestRecursiveMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRecursiveMessageDefaultTypeInternal _TestRecursiveMessage_default_instance_;
PROTOBUF_CONSTEXPR TestMutualRecursionA_SubMessage::TestMutualRecursionA_SubMessage(
    ::_pbi::ConstantInitialized)
  : b_(nullptr){}
struct TestMutualRecursionA_SubMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMutualRecursionA_SubMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMutualRecursionA_SubMessageDefaultTypeInternal() {}
  union {
    TestMutualRecursionA_SubMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMutualRecursionA_SubMessageDefaultTypeInternal _TestMutualRecursionA_SubMessage_default_instance_;
PROTOBUF_CONSTEXPR TestMutualRecursionA_SubGroup::TestMutualRecursionA_SubGroup(
    ::_pbi::ConstantInitialized)
  : sub_message_(nullptr)
  , not_in_this_scc_(nullptr){}
struct TestMutualRecursionA_SubGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMutualRecursionA_SubGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMutualRecursionA_SubGroupDefaultTypeInternal() {}
  union {
    TestMutualRecursionA_SubGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMutualRecursionA_SubGroupDefaultTypeInternal _TestMutualRecursionA_SubGroup_default_instance_;
PROTOBUF_CONSTEXPR TestMutualRecursionA::TestMutualRecursionA(
    ::_pbi::ConstantInitialized)
  : bb_(nullptr)
  , subgroup_(nullptr){}
struct TestMutualRecursionADefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMutualRecursionADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMutualRecursionADefaultTypeInternal() {}
  union {
    TestMutualRecursionA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMutualRecursionADefaultTypeInternal _TestMutualRecursionA_default_instance_;
PROTOBUF_CONSTEXPR TestMutualRecursionB::TestMutualRecursionB(
    ::_pbi::ConstantInitialized)
  : a_(nullptr)
  , optional_int32_(0){}
struct TestMutualRecursionBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMutualRecursionBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMutualRecursionBDefaultTypeInternal() {}
  union {
    TestMutualRecursionB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMutualRecursionBDefaultTypeInternal _TestMutualRecursionB_default_instance_;
PROTOBUF_CONSTEXPR TestIsInitialized_SubMessage_SubGroup::TestIsInitialized_SubMessage_SubGroup(
    ::_pbi::ConstantInitialized)
  : i_(0){}
struct TestIsInitialized_SubMessage_SubGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestIsInitialized_SubMessage_SubGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestIsInitialized_SubMessage_SubGroupDefaultTypeInternal() {}
  union {
    TestIsInitialized_SubMessage_SubGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestIsInitialized_SubMessage_SubGroupDefaultTypeInternal _TestIsInitialized_SubMessage_SubGroup_default_instance_;
PROTOBUF_CONSTEXPR TestIsInitialized_SubMessage::TestIsInitialized_SubMessage(
    ::_pbi::ConstantInitialized)
  : subgroup_(nullptr){}
struct TestIsInitialized_SubMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestIsInitialized_SubMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestIsInitialized_SubMessageDefaultTypeInternal() {}
  union {
    TestIsInitialized_SubMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestIsInitialized_SubMessageDefaultTypeInternal _TestIsInitialized_SubMessage_default_instance_;
PROTOBUF_CONSTEXPR TestIsInitialized::TestIsInitialized(
    ::_pbi::ConstantInitialized)
  : sub_message_(nullptr){}
struct TestIsInitializedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestIsInitializedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestIsInitializedDefaultTypeInternal() {}
  union {
    TestIsInitialized _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestIsInitializedDefaultTypeInternal _TestIsInitialized_default_instance_;
PROTOBUF_CONSTEXPR TestDupFieldNumber_Foo::TestDupFieldNumber_Foo(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct TestDupFieldNumber_FooDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDupFieldNumber_FooDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDupFieldNumber_FooDefaultTypeInternal() {}
  union {
    TestDupFieldNumber_Foo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDupFieldNumber_FooDefaultTypeInternal _TestDupFieldNumber_Foo_default_instance_;
PROTOBUF_CONSTEXPR TestDupFieldNumber_Bar::TestDupFieldNumber_Bar(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct TestDupFieldNumber_BarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDupFieldNumber_BarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDupFieldNumber_BarDefaultTypeInternal() {}
  union {
    TestDupFieldNumber_Bar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDupFieldNumber_BarDefaultTypeInternal _TestDupFieldNumber_Bar_default_instance_;
PROTOBUF_CONSTEXPR TestDupFieldNumber::TestDupFieldNumber(
    ::_pbi::ConstantInitialized)
  : foo_(nullptr)
  , bar_(nullptr)
  , a_(0){}
struct TestDupFieldNumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDupFieldNumberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDupFieldNumberDefaultTypeInternal() {}
  union {
    TestDupFieldNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDupFieldNumberDefaultTypeInternal _TestDupFieldNumber_default_instance_;
PROTOBUF_CONSTEXPR TestEagerMessage::TestEagerMessage(
    ::_pbi::ConstantInitialized)
  : sub_message_(nullptr){}
struct TestEagerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEagerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEagerMessageDefaultTypeInternal() {}
  union {
    TestEagerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEagerMessageDefaultTypeInternal _TestEagerMessage_default_instance_;
PROTOBUF_CONSTEXPR TestLazyMessage::TestLazyMessage(
    ::_pbi::ConstantInitialized)
  : sub_message_(nullptr){}
struct TestLazyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestLazyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestLazyMessageDefaultTypeInternal() {}
  union {
    TestLazyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestLazyMessageDefaultTypeInternal _TestLazyMessage_default_instance_;
PROTOBUF_CONSTEXPR TestEagerMaybeLazy_NestedMessage::TestEagerMaybeLazy_NestedMessage(
    ::_pbi::ConstantInitialized)
  : packed_(nullptr){}
struct TestEagerMaybeLazy_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEagerMaybeLazy_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEagerMaybeLazy_NestedMessageDefaultTypeInternal() {}
  union {
    TestEagerMaybeLazy_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEagerMaybeLazy_NestedMessageDefaultTypeInternal _TestEagerMaybeLazy_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestEagerMaybeLazy::TestEagerMaybeLazy(
    ::_pbi::ConstantInitialized)
  : message_foo_(nullptr)
  , message_bar_(nullptr)
  , message_baz_(nullptr){}
struct TestEagerMaybeLazyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEagerMaybeLazyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEagerMaybeLazyDefaultTypeInternal() {}
  union {
    TestEagerMaybeLazy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEagerMaybeLazyDefaultTypeInternal _TestEagerMaybeLazy_default_instance_;
PROTOBUF_CONSTEXPR TestNestedMessageHasBits_NestedMessage::TestNestedMessageHasBits_NestedMessage(
    ::_pbi::ConstantInitialized)
  : nestedmessage_repeated_int32_()
  , nestedmessage_repeated_foreignmessage_(){}
struct TestNestedMessageHasBits_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedMessageHasBits_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedMessageHasBits_NestedMessageDefaultTypeInternal() {}
  union {
    TestNestedMessageHasBits_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedMessageHasBits_NestedMessageDefaultTypeInternal _TestNestedMessageHasBits_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestNestedMessageHasBits::TestNestedMessageHasBits(
    ::_pbi::ConstantInitialized)
  : optional_nested_message_(nullptr){}
struct TestNestedMessageHasBitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedMessageHasBitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedMessageHasBitsDefaultTypeInternal() {}
  union {
    TestNestedMessageHasBits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedMessageHasBitsDefaultTypeInternal _TestNestedMessageHasBits_default_instance_;
PROTOBUF_CONSTEXPR TestCamelCaseFieldNames::TestCamelCaseFieldNames(
    ::_pbi::ConstantInitialized)
  : repeatedprimitivefield_()
  , repeatedstringfield_()
  , repeatedenumfield_()
  , repeatedmessagefield_()
  , repeatedstringpiecefield_()
  , repeatedcordfield_()
  , stringfield_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stringpiecefield_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cordfield_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , messagefield_(nullptr)
  , primitivefield_(0)
  , enumfield_(4)
{}
struct TestCamelCaseFieldNamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCamelCaseFieldNamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCamelCaseFieldNamesDefaultTypeInternal() {}
  union {
    TestCamelCaseFieldNames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCamelCaseFieldNamesDefaultTypeInternal _TestCamelCaseFieldNames_default_instance_;
PROTOBUF_CONSTEXPR TestFieldOrderings_NestedMessage::TestFieldOrderings_NestedMessage(
    ::_pbi::ConstantInitialized)
  : oo_(int64_t{0})
  , bb_(0){}
struct TestFieldOrderings_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFieldOrderings_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFieldOrderings_NestedMessageDefaultTypeInternal() {}
  union {
    TestFieldOrderings_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFieldOrderings_NestedMessageDefaultTypeInternal _TestFieldOrderings_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestFieldOrderings::TestFieldOrderings(
    ::_pbi::ConstantInitialized)
  : my_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_nested_message_(nullptr)
  , my_int_(int64_t{0})
  , my_float_(0){}
struct TestFieldOrderingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFieldOrderingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFieldOrderingsDefaultTypeInternal() {}
  union {
    TestFieldOrderings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFieldOrderingsDefaultTypeInternal _TestFieldOrderings_default_instance_;
PROTOBUF_CONSTEXPR TestExtensionOrderings1::TestExtensionOrderings1(
    ::_pbi::ConstantInitialized)
  : my_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TestExtensionOrderings1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExtensionOrderings1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExtensionOrderings1DefaultTypeInternal() {}
  union {
    TestExtensionOrderings1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExtensionOrderings1DefaultTypeInternal _TestExtensionOrderings1_default_instance_;
PROTOBUF_CONSTEXPR TestExtensionOrderings2_TestExtensionOrderings3::TestExtensionOrderings2_TestExtensionOrderings3(
    ::_pbi::ConstantInitialized)
  : my_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TestExtensionOrderings2_TestExtensionOrderings3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExtensionOrderings2_TestExtensionOrderings3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExtensionOrderings2_TestExtensionOrderings3DefaultTypeInternal() {}
  union {
    TestExtensionOrderings2_TestExtensionOrderings3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExtensionOrderings2_TestExtensionOrderings3DefaultTypeInternal _TestExtensionOrderings2_TestExtensionOrderings3_default_instance_;
PROTOBUF_CONSTEXPR TestExtensionOrderings2::TestExtensionOrderings2(
    ::_pbi::ConstantInitialized)
  : my_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TestExtensionOrderings2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExtensionOrderings2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExtensionOrderings2DefaultTypeInternal() {}
  union {
    TestExtensionOrderings2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExtensionOrderings2DefaultTypeInternal _TestExtensionOrderings2_default_instance_;
PROTOBUF_CONSTEXPR TestExtremeDefaultValues::TestExtremeDefaultValues(
    ::_pbi::ConstantInitialized)
  : escaped_bytes_(nullptr, ::_pbi::ConstantInitialized{})
  , utf8_string_(nullptr, ::_pbi::ConstantInitialized{})
  , cpp_trigraph_(nullptr, ::_pbi::ConstantInitialized{})
  , string_with_zero_(nullptr, ::_pbi::ConstantInitialized{})
  , bytes_with_zero_(nullptr, ::_pbi::ConstantInitialized{})
  , string_piece_with_zero_(nullptr, ::_pbi::ConstantInitialized{})
  , cord_with_zero_(nullptr, ::_pbi::ConstantInitialized{})
  , replacement_string_(nullptr, ::_pbi::ConstantInitialized{})
  , zero_float_(0)
  , large_uint64_(uint64_t{18446744073709551615u})
  , large_uint32_(4294967295u)
  , small_int32_(-2147483647)
  , small_int64_(int64_t{-9223372036854775807})
  , one_float_(1)
  , small_float_(1.5f)
  , negative_one_float_(-1)
  , negative_float_(-1.5f)
  , large_float_(2e+08f)
  , small_negative_float_(-8e-28f)
  , inf_double_(std::numeric_limits<double>::infinity())
  , neg_inf_double_(-std::numeric_limits<double>::infinity())
  , nan_double_(std::numeric_limits<double>::quiet_NaN())
  , inf_float_(std::numeric_limits<float>::infinity())
  , neg_inf_float_(-std::numeric_limits<float>::infinity())
  , nan_float_(std::numeric_limits<float>::quiet_NaN())
  , really_small_int32_(-2147483647 - 1)
  , really_small_int64_(int64_t{-9223372036854775807} - 1){}
struct TestExtremeDefaultValuesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExtremeDefaultValuesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExtremeDefaultValuesDefaultTypeInternal() {}
  union {
    TestExtremeDefaultValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExtremeDefaultValuesDefaultTypeInternal _TestExtremeDefaultValues_default_instance_;
PROTOBUF_CONSTEXPR SparseEnumMessage::SparseEnumMessage(
    ::_pbi::ConstantInitialized)
  : sparse_enum_(123)
{}
struct SparseEnumMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseEnumMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseEnumMessageDefaultTypeInternal() {}
  union {
    SparseEnumMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseEnumMessageDefaultTypeInternal _SparseEnumMessage_default_instance_;
PROTOBUF_CONSTEXPR OneString::OneString(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct OneStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneStringDefaultTypeInternal() {}
  union {
    OneString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneStringDefaultTypeInternal _OneString_default_instance_;
PROTOBUF_CONSTEXPR MoreString::MoreString(
    ::_pbi::ConstantInitialized)
  : data_(){}
struct MoreStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoreStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoreStringDefaultTypeInternal() {}
  union {
    MoreString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoreStringDefaultTypeInternal _MoreString_default_instance_;
PROTOBUF_CONSTEXPR OneBytes::OneBytes(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct OneBytesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneBytesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneBytesDefaultTypeInternal() {}
  union {
    OneBytes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneBytesDefaultTypeInternal _OneBytes_default_instance_;
PROTOBUF_CONSTEXPR MoreBytes::MoreBytes(
    ::_pbi::ConstantInitialized)
  : data_(){}
struct MoreBytesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoreBytesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoreBytesDefaultTypeInternal() {}
  union {
    MoreBytes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoreBytesDefaultTypeInternal _MoreBytes_default_instance_;
PROTOBUF_CONSTEXPR ManyOptionalString::ManyOptionalString(
    ::_pbi::ConstantInitialized)
  : str1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str3_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str4_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str6_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str7_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str8_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str9_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str10_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str11_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str12_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str13_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str14_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str15_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str16_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str17_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str18_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str19_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str20_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str21_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str22_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str23_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str24_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str25_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str26_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str27_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str28_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str29_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str30_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str31_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , str32_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ManyOptionalStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ManyOptionalStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ManyOptionalStringDefaultTypeInternal() {}
  union {
    ManyOptionalString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ManyOptionalStringDefaultTypeInternal _ManyOptionalString_default_instance_;
PROTOBUF_CONSTEXPR Int32Message::Int32Message(
    ::_pbi::ConstantInitialized)
  : data_(0){}
struct Int32MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int32MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int32MessageDefaultTypeInternal() {}
  union {
    Int32Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int32MessageDefaultTypeInternal _Int32Message_default_instance_;
PROTOBUF_CONSTEXPR Uint32Message::Uint32Message(
    ::_pbi::ConstantInitialized)
  : data_(0u){}
struct Uint32MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Uint32MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Uint32MessageDefaultTypeInternal() {}
  union {
    Uint32Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Uint32MessageDefaultTypeInternal _Uint32Message_default_instance_;
PROTOBUF_CONSTEXPR Int64Message::Int64Message(
    ::_pbi::ConstantInitialized)
  : data_(int64_t{0}){}
struct Int64MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64MessageDefaultTypeInternal() {}
  union {
    Int64Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64MessageDefaultTypeInternal _Int64Message_default_instance_;
PROTOBUF_CONSTEXPR Uint64Message::Uint64Message(
    ::_pbi::ConstantInitialized)
  : data_(uint64_t{0u}){}
struct Uint64MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Uint64MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Uint64MessageDefaultTypeInternal() {}
  union {
    Uint64Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Uint64MessageDefaultTypeInternal _Uint64Message_default_instance_;
PROTOBUF_CONSTEXPR BoolMessage::BoolMessage(
    ::_pbi::ConstantInitialized)
  : data_(false){}
struct BoolMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolMessageDefaultTypeInternal() {}
  union {
    BoolMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolMessageDefaultTypeInternal _BoolMessage_default_instance_;
PROTOBUF_CONSTEXPR TestOneof_FooGroup::TestOneof_FooGroup(
    ::_pbi::ConstantInitialized)
  : b_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , a_(0){}
struct TestOneof_FooGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOneof_FooGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOneof_FooGroupDefaultTypeInternal() {}
  union {
    TestOneof_FooGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOneof_FooGroupDefaultTypeInternal _TestOneof_FooGroup_default_instance_;
PROTOBUF_CONSTEXPR TestOneof::TestOneof(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct TestOneofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOneofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOneofDefaultTypeInternal() {}
  union {
    TestOneof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOneofDefaultTypeInternal _TestOneof_default_instance_;
PROTOBUF_CONSTEXPR TestOneofBackwardsCompatible_FooGroup::TestOneofBackwardsCompatible_FooGroup(
    ::_pbi::ConstantInitialized)
  : b_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , a_(0){}
struct TestOneofBackwardsCompatible_FooGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOneofBackwardsCompatible_FooGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOneofBackwardsCompatible_FooGroupDefaultTypeInternal() {}
  union {
    TestOneofBackwardsCompatible_FooGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOneofBackwardsCompatible_FooGroupDefaultTypeInternal _TestOneofBackwardsCompatible_FooGroup_default_instance_;
PROTOBUF_CONSTEXPR TestOneofBackwardsCompatible::TestOneofBackwardsCompatible(
    ::_pbi::ConstantInitialized)
  : foo_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , foo_message_(nullptr)
  , foogroup_(nullptr)
  , foo_int_(0){}
struct TestOneofBackwardsCompatibleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOneofBackwardsCompatibleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOneofBackwardsCompatibleDefaultTypeInternal() {}
  union {
    TestOneofBackwardsCompatible _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOneofBackwardsCompatibleDefaultTypeInternal _TestOneofBackwardsCompatible_default_instance_;
PROTOBUF_CONSTEXPR TestOneof2_FooGroup::TestOneof2_FooGroup(
    ::_pbi::ConstantInitialized)
  : b_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , a_(0){}
struct TestOneof2_FooGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOneof2_FooGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOneof2_FooGroupDefaultTypeInternal() {}
  union {
    TestOneof2_FooGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOneof2_FooGroupDefaultTypeInternal _TestOneof2_FooGroup_default_instance_;
PROTOBUF_CONSTEXPR TestOneof2_NestedMessage::TestOneof2_NestedMessage(
    ::_pbi::ConstantInitialized)
  : corge_int_()
  , qux_int_(int64_t{0}){}
struct TestOneof2_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOneof2_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOneof2_NestedMessageDefaultTypeInternal() {}
  union {
    TestOneof2_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOneof2_NestedMessageDefaultTypeInternal _TestOneof2_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestOneof2::TestOneof2(
    ::_pbi::ConstantInitialized)
  : baz_string_(nullptr, ::_pbi::ConstantInitialized{})
  , baz_int_(0)
  , _oneof_case_{}{}
struct TestOneof2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOneof2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOneof2DefaultTypeInternal() {}
  union {
    TestOneof2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOneof2DefaultTypeInternal _TestOneof2_default_instance_;
PROTOBUF_CONSTEXPR TestRequiredOneof_NestedMessage::TestRequiredOneof_NestedMessage(
    ::_pbi::ConstantInitialized)
  : required_double_(0){}
struct TestRequiredOneof_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredOneof_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredOneof_NestedMessageDefaultTypeInternal() {}
  union {
    TestRequiredOneof_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredOneof_NestedMessageDefaultTypeInternal _TestRequiredOneof_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestRequiredOneof::TestRequiredOneof(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct TestRequiredOneofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRequiredOneofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRequiredOneofDefaultTypeInternal() {}
  union {
    TestRequiredOneof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRequiredOneofDefaultTypeInternal _TestRequiredOneof_default_instance_;
PROTOBUF_CONSTEXPR TestPackedTypes::TestPackedTypes(
    ::_pbi::ConstantInitialized)
  : packed_int32_()
  , _packed_int32_cached_byte_size_(0)
  , packed_int64_()
  , _packed_int64_cached_byte_size_(0)
  , packed_uint32_()
  , _packed_uint32_cached_byte_size_(0)
  , packed_uint64_()
  , _packed_uint64_cached_byte_size_(0)
  , packed_sint32_()
  , _packed_sint32_cached_byte_size_(0)
  , packed_sint64_()
  , _packed_sint64_cached_byte_size_(0)
  , packed_fixed32_()
  , packed_fixed64_()
  , packed_sfixed32_()
  , packed_sfixed64_()
  , packed_float_()
  , packed_double_()
  , packed_bool_()
  , packed_enum_()
  , _packed_enum_cached_byte_size_(0){}
struct TestPackedTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPackedTypesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPackedTypesDefaultTypeInternal() {}
  union {
    TestPackedTypes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPackedTypesDefaultTypeInternal _TestPackedTypes_default_instance_;
PROTOBUF_CONSTEXPR TestUnpackedTypes::TestUnpackedTypes(
    ::_pbi::ConstantInitialized)
  : unpacked_int32_()
  , unpacked_int64_()
  , unpacked_uint32_()
  , unpacked_uint64_()
  , unpacked_sint32_()
  , unpacked_sint64_()
  , unpacked_fixed32_()
  , unpacked_fixed64_()
  , unpacked_sfixed32_()
  , unpacked_sfixed64_()
  , unpacked_float_()
  , unpacked_double_()
  , unpacked_bool_()
  , unpacked_enum_(){}
struct TestUnpackedTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestUnpackedTypesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestUnpackedTypesDefaultTypeInternal() {}
  union {
    TestUnpackedTypes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestUnpackedTypesDefaultTypeInternal _TestUnpackedTypes_default_instance_;
PROTOBUF_CONSTEXPR TestPackedExtensions::TestPackedExtensions(
    ::_pbi::ConstantInitialized){}
struct TestPackedExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPackedExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPackedExtensionsDefaultTypeInternal() {}
  union {
    TestPackedExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPackedExtensionsDefaultTypeInternal _TestPackedExtensions_default_instance_;
PROTOBUF_CONSTEXPR TestUnpackedExtensions::TestUnpackedExtensions(
    ::_pbi::ConstantInitialized){}
struct TestUnpackedExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestUnpackedExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestUnpackedExtensionsDefaultTypeInternal() {}
  union {
    TestUnpackedExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestUnpackedExtensionsDefaultTypeInternal _TestUnpackedExtensions_default_instance_;
PROTOBUF_CONSTEXPR TestDynamicExtensions_DynamicMessageType::TestDynamicExtensions_DynamicMessageType(
    ::_pbi::ConstantInitialized)
  : dynamic_field_(0){}
struct TestDynamicExtensions_DynamicMessageTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDynamicExtensions_DynamicMessageTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDynamicExtensions_DynamicMessageTypeDefaultTypeInternal() {}
  union {
    TestDynamicExtensions_DynamicMessageType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDynamicExtensions_DynamicMessageTypeDefaultTypeInternal _TestDynamicExtensions_DynamicMessageType_default_instance_;
PROTOBUF_CONSTEXPR TestDynamicExtensions::TestDynamicExtensions(
    ::_pbi::ConstantInitialized)
  : repeated_extension_()
  , packed_extension_()
  , _packed_extension_cached_byte_size_(0)
  , message_extension_(nullptr)
  , dynamic_message_extension_(nullptr)
  , scalar_extension_(0u)
  , enum_extension_(4)

  , dynamic_enum_extension_(2200)
{}
struct TestDynamicExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDynamicExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDynamicExtensionsDefaultTypeInternal() {}
  union {
    TestDynamicExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDynamicExtensionsDefaultTypeInternal _TestDynamicExtensions_default_instance_;
PROTOBUF_CONSTEXPR TestRepeatedScalarDifferentTagSizes::TestRepeatedScalarDifferentTagSizes(
    ::_pbi::ConstantInitialized)
  : repeated_fixed32_()
  , repeated_int32_()
  , repeated_fixed64_()
  , repeated_int64_()
  , repeated_float_()
  , repeated_uint64_(){}
struct TestRepeatedScalarDifferentTagSizesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepeatedScalarDifferentTagSizesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepeatedScalarDifferentTagSizesDefaultTypeInternal() {}
  union {
    TestRepeatedScalarDifferentTagSizes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepeatedScalarDifferentTagSizesDefaultTypeInternal _TestRepeatedScalarDifferentTagSizes_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGenerator_Group1::TestParsingMerge_RepeatedFieldsGenerator_Group1(
    ::_pbi::ConstantInitialized)
  : field1_(nullptr){}
struct TestParsingMerge_RepeatedFieldsGenerator_Group1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGenerator_Group1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMerge_RepeatedFieldsGenerator_Group1DefaultTypeInternal() {}
  union {
    TestParsingMerge_RepeatedFieldsGenerator_Group1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMerge_RepeatedFieldsGenerator_Group1DefaultTypeInternal _TestParsingMerge_RepeatedFieldsGenerator_Group1_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGenerator_Group2::TestParsingMerge_RepeatedFieldsGenerator_Group2(
    ::_pbi::ConstantInitialized)
  : field1_(nullptr){}
struct TestParsingMerge_RepeatedFieldsGenerator_Group2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGenerator_Group2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMerge_RepeatedFieldsGenerator_Group2DefaultTypeInternal() {}
  union {
    TestParsingMerge_RepeatedFieldsGenerator_Group2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMerge_RepeatedFieldsGenerator_Group2DefaultTypeInternal _TestParsingMerge_RepeatedFieldsGenerator_Group2_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGenerator::TestParsingMerge_RepeatedFieldsGenerator(
    ::_pbi::ConstantInitialized)
  : field1_()
  , field2_()
  , field3_()
  , group1_()
  , group2_()
  , ext1_()
  , ext2_(){}
struct TestParsingMerge_RepeatedFieldsGeneratorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGeneratorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMerge_RepeatedFieldsGeneratorDefaultTypeInternal() {}
  union {
    TestParsingMerge_RepeatedFieldsGenerator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMerge_RepeatedFieldsGeneratorDefaultTypeInternal _TestParsingMerge_RepeatedFieldsGenerator_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMerge_OptionalGroup::TestParsingMerge_OptionalGroup(
    ::_pbi::ConstantInitialized)
  : optional_group_all_types_(nullptr){}
struct TestParsingMerge_OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMerge_OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMerge_OptionalGroupDefaultTypeInternal() {}
  union {
    TestParsingMerge_OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMerge_OptionalGroupDefaultTypeInternal _TestParsingMerge_OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedGroup::TestParsingMerge_RepeatedGroup(
    ::_pbi::ConstantInitialized)
  : repeated_group_all_types_(nullptr){}
struct TestParsingMerge_RepeatedGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMerge_RepeatedGroupDefaultTypeInternal() {}
  union {
    TestParsingMerge_RepeatedGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMerge_RepeatedGroupDefaultTypeInternal _TestParsingMerge_RepeatedGroup_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMerge::TestParsingMerge(
    ::_pbi::ConstantInitialized)
  : repeated_all_types_()
  , repeatedgroup_()
  , required_all_types_(nullptr)
  , optional_all_types_(nullptr)
  , optionalgroup_(nullptr){}
struct TestParsingMergeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMergeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMergeDefaultTypeInternal() {}
  union {
    TestParsingMerge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMergeDefaultTypeInternal _TestParsingMerge_default_instance_;
PROTOBUF_CONSTEXPR TestMergeException::TestMergeException(
    ::_pbi::ConstantInitialized)
  : all_extensions_(nullptr){}
struct TestMergeExceptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMergeExceptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMergeExceptionDefaultTypeInternal() {}
  union {
    TestMergeException _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMergeExceptionDefaultTypeInternal _TestMergeException_default_instance_;
PROTOBUF_CONSTEXPR TestCommentInjectionMessage::TestCommentInjectionMessage(
    ::_pbi::ConstantInitialized)
  : a_(nullptr, ::_pbi::ConstantInitialized{}){}
struct TestCommentInjectionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestCommentInjectionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestCommentInjectionMessageDefaultTypeInternal() {}
  union {
    TestCommentInjectionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestCommentInjectionMessageDefaultTypeInternal _TestCommentInjectionMessage_default_instance_;
PROTOBUF_CONSTEXPR FooRequest::FooRequest(
    ::_pbi::ConstantInitialized){}
struct FooRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FooRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FooRequestDefaultTypeInternal() {}
  union {
    FooRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FooRequestDefaultTypeInternal _FooRequest_default_instance_;
PROTOBUF_CONSTEXPR FooResponse::FooResponse(
    ::_pbi::ConstantInitialized){}
struct FooResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FooResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FooResponseDefaultTypeInternal() {}
  union {
    FooResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FooResponseDefaultTypeInternal _FooResponse_default_instance_;
PROTOBUF_CONSTEXPR FooClientMessage::FooClientMessage(
    ::_pbi::ConstantInitialized){}
struct FooClientMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FooClientMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FooClientMessageDefaultTypeInternal() {}
  union {
    FooClientMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FooClientMessageDefaultTypeInternal _FooClientMessage_default_instance_;
PROTOBUF_CONSTEXPR FooServerMessage::FooServerMessage(
    ::_pbi::ConstantInitialized){}
struct FooServerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FooServerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FooServerMessageDefaultTypeInternal() {}
  union {
    FooServerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FooServerMessageDefaultTypeInternal _FooServerMessage_default_instance_;
PROTOBUF_CONSTEXPR BarRequest::BarRequest(
    ::_pbi::ConstantInitialized){}
struct BarRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BarRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BarRequestDefaultTypeInternal() {}
  union {
    BarRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BarRequestDefaultTypeInternal _BarRequest_default_instance_;
PROTOBUF_CONSTEXPR BarResponse::BarResponse(
    ::_pbi::ConstantInitialized){}
struct BarResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BarResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BarResponseDefaultTypeInternal() {}
  union {
    BarResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BarResponseDefaultTypeInternal _BarResponse_default_instance_;
PROTOBUF_CONSTEXPR TestJsonName::TestJsonName(
    ::_pbi::ConstantInitialized)
  : field_name1_(0)
  , fieldname2_(0)
  , fieldname3_(0)
  , _field_name4_(0)
  , field_name5_(0)
  , field_name6_(0)
  , fieldname7_(0){}
struct TestJsonNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestJsonNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestJsonNameDefaultTypeInternal() {}
  union {
    TestJsonName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestJsonNameDefaultTypeInternal _TestJsonName_default_instance_;
PROTOBUF_CONSTEXPR TestHugeFieldNumbers_OptionalGroup::TestHugeFieldNumbers_OptionalGroup(
    ::_pbi::ConstantInitialized)
  : group_a_(0){}
struct TestHugeFieldNumbers_OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestHugeFieldNumbers_OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestHugeFieldNumbers_OptionalGroupDefaultTypeInternal() {}
  union {
    TestHugeFieldNumbers_OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestHugeFieldNumbers_OptionalGroupDefaultTypeInternal _TestHugeFieldNumbers_OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestHugeFieldNumbers_StringStringMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestHugeFieldNumbers_StringStringMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestHugeFieldNumbers_StringStringMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestHugeFieldNumbers_StringStringMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestHugeFieldNumbers_StringStringMapEntry_DoNotUseDefaultTypeInternal _TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestHugeFieldNumbers::TestHugeFieldNumbers(
    ::_pbi::ConstantInitialized)
  : repeated_int32_()
  , packed_int32_()
  , _packed_int32_cached_byte_size_(0)
  , string_string_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , optional_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_bytes_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_message_(nullptr)
  , optionalgroup_(nullptr)
  , optional_int32_(0)
  , fixed_32_(0)
  , optional_enum_(4)

  , _oneof_case_{}{}
struct TestHugeFieldNumbersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestHugeFieldNumbersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestHugeFieldNumbersDefaultTypeInternal() {}
  union {
    TestHugeFieldNumbers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestHugeFieldNumbersDefaultTypeInternal _TestHugeFieldNumbers_default_instance_;
PROTOBUF_CONSTEXPR TestExtensionInsideTable::TestExtensionInsideTable(
    ::_pbi::ConstantInitialized)
  : field1_(0)
  , field2_(0)
  , field3_(0)
  , field4_(0)
  , field6_(0)
  , field7_(0)
  , field8_(0)
  , field9_(0)
  , field10_(0){}
struct TestExtensionInsideTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExtensionInsideTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExtensionInsideTableDefaultTypeInternal() {}
  union {
    TestExtensionInsideTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExtensionInsideTableDefaultTypeInternal _TestExtensionInsideTable_default_instance_;
PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup(
    ::_pbi::ConstantInitialized)
  : another_field_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupDefaultTypeInternal() {}
  union {
    TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupDefaultTypeInternal _TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup_default_instance_;
PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup(
    ::_pbi::ConstantInitialized)
  : but_why_tho_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupDefaultTypeInternal() {}
  union {
    TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupDefaultTypeInternal _TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup_default_instance_;
PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup(
    ::_pbi::ConstantInitialized)
  : layer2repeatedgroup_()
  , layer2anotheroptionalrepeatedgroup_(){}
struct TestNestedGroupExtensionOuter_Layer1OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedGroupExtensionOuter_Layer1OptionalGroupDefaultTypeInternal() {}
  union {
    TestNestedGroupExtensionOuter_Layer1OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedGroupExtensionOuter_Layer1OptionalGroupDefaultTypeInternal _TestNestedGroupExtensionOuter_Layer1OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter::TestNestedGroupExtensionOuter(
    ::_pbi::ConstantInitialized)
  : layer1optionalgroup_(nullptr){}
struct TestNestedGroupExtensionOuterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedGroupExtensionOuterDefaultTypeInternal() {}
  union {
    TestNestedGroupExtensionOuter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedGroupExtensionOuterDefaultTypeInternal _TestNestedGroupExtensionOuter_default_instance_;
PROTOBUF_CONSTEXPR TestNestedGroupExtensionInnerExtension::TestNestedGroupExtensionInnerExtension(
    ::_pbi::ConstantInitialized)
  : inner_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TestNestedGroupExtensionInnerExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedGroupExtensionInnerExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedGroupExtensionInnerExtensionDefaultTypeInternal() {}
  union {
    TestNestedGroupExtensionInnerExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedGroupExtensionInnerExtensionDefaultTypeInternal _TestNestedGroupExtensionInnerExtension_default_instance_;
PROTOBUF_CONSTEXPR TestExtensionRangeSerialize::TestExtensionRangeSerialize(
    ::_pbi::ConstantInitialized)
  : foo_one_(0)
  , foo_two_(0)
  , foo_three_(0)
  , foo_four_(0){}
struct TestExtensionRangeSerializeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestExtensionRangeSerializeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestExtensionRangeSerializeDefaultTypeInternal() {}
  union {
    TestExtensionRangeSerialize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestExtensionRangeSerializeDefaultTypeInternal _TestExtensionRangeSerialize_default_instance_;
}  // namespace protobuf_unittest
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2funittest_2eproto[111];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[7];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_google_2fprotobuf_2funittest_2eproto[1];

const uint32_t TableStruct_google_2fprotobuf_2funittest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_NestedMessage, bb_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_OptionalGroup, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_RepeatedGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_RepeatedGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes_RepeatedGroup, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_import_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_import_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_public_import_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, optional_lazy_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeatedgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_import_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_import_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, repeated_lazy_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_import_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, default_cord_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllTypes, oneof_field_),
  15,
  14,
  16,
  17,
  19,
  18,
  20,
  21,
  23,
  22,
  24,
  25,
  26,
  0,
  1,
  8,
  9,
  10,
  11,
  28,
  29,
  30,
  2,
  3,
  12,
  13,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  31,
  32,
  34,
  33,
  35,
  36,
  38,
  37,
  39,
  40,
  42,
  41,
  43,
  4,
  5,
  44,
  45,
  27,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, child_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, payload_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, repeated_child_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, lazy_child_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NestedTestAllTypes, eager_child_),
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, deprecated_int32_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedFields, oneof_fields_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDeprecatedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ForeignMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ForeignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ForeignMessage, c_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ForeignMessage, d_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReservedFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllExtensions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestAllExtensions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OptionalGroup_extension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OptionalGroup_extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OptionalGroup_extension, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RepeatedGroup_extension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RepeatedGroup_extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::RepeatedGroup_extension, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup_OptionalGroup, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroup, optional_foreign_enum_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroupExtension, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestGroupExtension, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension_OptionalGroup_extension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension_OptionalGroup_extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension_OptionalGroup_extension, a_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtension, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtension, b_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtension, optional_extension_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions, b_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData, dynamic_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData, b_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestChildExtensionData, optional_extension_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedChildExtension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedChildExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedChildExtension, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedChildExtension, child_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedChildExtensionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedChildExtensionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedChildExtensionData, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedChildExtensionData, child_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, b_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy4_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy5_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy7_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy8_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy9_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy10_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy11_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy12_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy13_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy14_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy15_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy16_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy17_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy18_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy19_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy20_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy21_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy22_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy23_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy24_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy25_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy26_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy27_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy28_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy29_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy30_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy31_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, dummy32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, c_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequired, optional_foreign_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, optional_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, repeated_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredForeign, dummy_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, optional_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, repeated_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredMessage, required_message_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedRequiredForeign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedRequiredForeign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedRequiredForeign, child_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedRequiredForeign, payload_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedRequiredForeign, dummy_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestForeignNested, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestForeignNested, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestForeignNested, foreign_nested_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmptyMessageWithExtensions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmptyMessageWithExtensions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage, cc_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage_NestedMessage, bb_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPickleNestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMultipleExtensionRanges, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMultipleExtensionRanges, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReallyLargeTagNumber, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReallyLargeTagNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReallyLargeTagNumber, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestReallyLargeTagNumber, bb_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRecursiveMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRecursiveMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRecursiveMessage, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRecursiveMessage, i_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubMessage, b_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubGroup, sub_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA_SubGroup, not_in_this_scc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA, bb_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionA, subgroup_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionB, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMutualRecursionB, optional_int32_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup, i_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized_SubMessage, subgroup_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIsInitialized, sub_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Foo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Foo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Foo, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Bar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Bar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber_Bar, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, foo_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDupFieldNumber, bar_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMessage, sub_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestLazyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestLazyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestLazyMessage, sub_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMaybeLazy_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMaybeLazy_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMaybeLazy_NestedMessage, packed_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMaybeLazy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMaybeLazy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMaybeLazy, message_foo_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMaybeLazy, message_bar_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEagerMaybeLazy, message_baz_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage, nestedmessage_repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage, nestedmessage_repeated_foreignmessage_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedMessageHasBits, optional_nested_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, primitivefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, stringfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, enumfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, messagefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, stringpiecefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, cordfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedprimitivefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedstringfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedenumfield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedmessagefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedstringpiecefield_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCamelCaseFieldNames, repeatedcordfield_),
  4,
  0,
  5,
  3,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings_NestedMessage, oo_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings_NestedMessage, bb_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, my_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, my_int_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, my_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestFieldOrderings, optional_nested_message_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings1, my_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3, my_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionOrderings2, my_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, escaped_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, large_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, large_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, small_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, small_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, really_small_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, really_small_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, utf8_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, zero_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, one_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, small_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, negative_one_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, negative_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, large_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, small_negative_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, inf_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, neg_inf_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, nan_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, inf_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, neg_inf_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, nan_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, cpp_trigraph_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, string_with_zero_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, bytes_with_zero_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, string_piece_with_zero_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, cord_with_zero_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtremeDefaultValues, replacement_string_),
  0,
  10,
  9,
  11,
  12,
  25,
  26,
  1,
  8,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::SparseEnumMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::SparseEnumMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::SparseEnumMessage, sparse_enum_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneString, data_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreString, data_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneBytes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::OneBytes, data_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::MoreBytes, data_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str4_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str5_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str7_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str8_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str9_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str10_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str11_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str12_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str13_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str14_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str15_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str16_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str17_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str18_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str19_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str20_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str21_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str22_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str23_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str24_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str25_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str26_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str27_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str28_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str29_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str30_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str31_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::ManyOptionalString, str32_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int32Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int32Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int32Message, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint32Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint32Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint32Message, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int64Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int64Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Int64Message, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint64Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint64Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Uint64Message, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BoolMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BoolMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BoolMessage, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof_FooGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof_FooGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof_FooGroup, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof_FooGroup, b_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof, foo_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup, b_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, foo_int_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, foo_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, foo_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneofBackwardsCompatible, foogroup_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_FooGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_FooGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_FooGroup, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_FooGroup, b_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_NestedMessage, qux_int_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2_NestedMessage, corge_int_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, baz_int_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, baz_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, foo_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestOneof2, bar_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof_NestedMessage, required_double_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRequiredOneof, foo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedTypes, packed_enum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedTypes, unpacked_enum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedExtensions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestPackedExtensions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedExtensions, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestUnpackedExtensions, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType, dynamic_field_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, scalar_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, enum_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, dynamic_enum_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, message_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, dynamic_message_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, repeated_extension_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDynamicExtensions, packed_extension_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1, field1_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2, field1_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, field1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, field2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, field3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, group1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, group2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, ext1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator, ext2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_OptionalGroup, optional_group_all_types_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge_RepeatedGroup, repeated_group_all_types_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, required_all_types_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, optional_all_types_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, repeated_all_types_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestParsingMerge, repeatedgroup_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMergeException, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMergeException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMergeException, all_extensions_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCommentInjectionMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCommentInjectionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestCommentInjectionMessage, a_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::FooServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::BarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, field_name1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, fieldname2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, fieldname3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, _field_name4_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, field_name5_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, field_name6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestJsonName, fieldname7_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup, group_a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, _extensions_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, fixed_32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, packed_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optional_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, string_string_map_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestHugeFieldNumbers, oneof_field_),
  4,
  5,
  ~0u,
  ~0u,
  6,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field4_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field7_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field8_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field9_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionInsideTable, field10_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, another_field_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup, but_why_tho_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup, layer2repeatedgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup, layer2anotheroptionalrepeatedgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionOuter, layer1optionalgroup_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionInnerExtension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionInnerExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestNestedGroupExtensionInnerExtension, inner_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionRangeSerialize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionRangeSerialize, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionRangeSerialize, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionRangeSerialize, foo_one_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionRangeSerialize, foo_two_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionRangeSerialize, foo_three_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestExtensionRangeSerialize, foo_four_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::protobuf_unittest::TestAllTypes_NestedMessage)},
  { 8, 15, -1, sizeof(::protobuf_unittest::TestAllTypes_OptionalGroup)},
  { 16, 23, -1, sizeof(::protobuf_unittest::TestAllTypes_RepeatedGroup)},
  { 24, 106, -1, sizeof(::protobuf_unittest::TestAllTypes)},
  { 181, 192, -1, sizeof(::protobuf_unittest::NestedTestAllTypes)},
  { 197, 206, -1, sizeof(::protobuf_unittest::TestDeprecatedFields)},
  { 208, -1, -1, sizeof(::protobuf_unittest::TestDeprecatedMessage)},
  { 214, 222, -1, sizeof(::protobuf_unittest::ForeignMessage)},
  { 224, -1, -1, sizeof(::protobuf_unittest::TestReservedFields)},
  { 230, -1, -1, sizeof(::protobuf_unittest::TestAllExtensions)},
  { 236, 243, -1, sizeof(::protobuf_unittest::OptionalGroup_extension)},
  { 244, 251, -1, sizeof(::protobuf_unittest::RepeatedGroup_extension)},
  { 252, 259, -1, sizeof(::protobuf_unittest::TestGroup_OptionalGroup)},
  { 260, 268, -1, sizeof(::protobuf_unittest::TestGroup)},
  { 270, -1, -1, sizeof(::protobuf_unittest::TestGroupExtension)},
  { 276, 283, -1, sizeof(::protobuf_unittest::TestNestedExtension_OptionalGroup_extension)},
  { 284, -1, -1, sizeof(::protobuf_unittest::TestNestedExtension)},
  { 290, 299, -1, sizeof(::protobuf_unittest::TestChildExtension)},
  { 302, 310, -1, sizeof(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions)},
  { 312, 319, -1, sizeof(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData)},
  { 320, 329, -1, sizeof(::protobuf_unittest::TestChildExtensionData)},
  { 332, 340, -1, sizeof(::protobuf_unittest::TestNestedChildExtension)},
  { 342, 350, -1, sizeof(::protobuf_unittest::TestNestedChildExtensionData)},
  { 352, 392, -1, sizeof(::protobuf_unittest::TestRequired)},
  { 426, 435, -1, sizeof(::protobuf_unittest::TestRequiredForeign)},
  { 438, 447, -1, sizeof(::protobuf_unittest::TestRequiredMessage)},
  { 450, 459, -1, sizeof(::protobuf_unittest::TestNestedRequiredForeign)},
  { 462, 469, -1, sizeof(::protobuf_unittest::TestForeignNested)},
  { 470, -1, -1, sizeof(::protobuf_unittest::TestEmptyMessage)},
  { 476, -1, -1, sizeof(::protobuf_unittest::TestEmptyMessageWithExtensions)},
  { 482, 489, -1, sizeof(::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage)},
  { 490, 497, -1, sizeof(::protobuf_unittest::TestPickleNestedMessage_NestedMessage)},
  { 498, -1, -1, sizeof(::protobuf_unittest::TestPickleNestedMessage)},
  { 504, -1, -1, sizeof(::protobuf_unittest::TestMultipleExtensionRanges)},
  { 510, 518, -1, sizeof(::protobuf_unittest::TestReallyLargeTagNumber)},
  { 520, 528, -1, sizeof(::protobuf_unittest::TestRecursiveMessage)},
  { 530, 537, -1, sizeof(::protobuf_unittest::TestMutualRecursionA_SubMessage)},
  { 538, 546, -1, sizeof(::protobuf_unittest::TestMutualRecursionA_SubGroup)},
  { 548, 556, -1, sizeof(::protobuf_unittest::TestMutualRecursionA)},
  { 558, 566, -1, sizeof(::protobuf_unittest::TestMutualRecursionB)},
  { 568, 575, -1, sizeof(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup)},
  { 576, 583, -1, sizeof(::protobuf_unittest::TestIsInitialized_SubMessage)},
  { 584, 591, -1, sizeof(::protobuf_unittest::TestIsInitialized)},
  { 592, 599, -1, sizeof(::protobuf_unittest::TestDupFieldNumber_Foo)},
  { 600, 607, -1, sizeof(::protobuf_unittest::TestDupFieldNumber_Bar)},
  { 608, 617, -1, sizeof(::protobuf_unittest::TestDupFieldNumber)},
  { 620, 627, -1, sizeof(::protobuf_unittest::TestEagerMessage)},
  { 628, 635, -1, sizeof(::protobuf_unittest::TestLazyMessage)},
  { 636, 643, -1, sizeof(::protobuf_unittest::TestEagerMaybeLazy_NestedMessage)},
  { 644, 653, -1, sizeof(::protobuf_unittest::TestEagerMaybeLazy)},
  { 656, -1, -1, sizeof(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage)},
  { 664, 671, -1, sizeof(::protobuf_unittest::TestNestedMessageHasBits)},
  { 672, 690, -1, sizeof(::protobuf_unittest::TestCamelCaseFieldNames)},
  { 702, 710, -1, sizeof(::protobuf_unittest::TestFieldOrderings_NestedMessage)},
  { 712, 722, -1, sizeof(::protobuf_unittest::TestFieldOrderings)},
  { 726, 733, -1, sizeof(::protobuf_unittest::TestExtensionOrderings1)},
  { 734, 741, -1, sizeof(::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3)},
  { 742, 749, -1, sizeof(::protobuf_unittest::TestExtensionOrderings2)},
  { 750, 783, -1, sizeof(::protobuf_unittest::TestExtremeDefaultValues)},
  { 810, 817, -1, sizeof(::protobuf_unittest::SparseEnumMessage)},
  { 818, 825, -1, sizeof(::protobuf_unittest::OneString)},
  { 826, -1, -1, sizeof(::protobuf_unittest::MoreString)},
  { 833, 840, -1, sizeof(::protobuf_unittest::OneBytes)},
  { 841, -1, -1, sizeof(::protobuf_unittest::MoreBytes)},
  { 848, 886, -1, sizeof(::protobuf_unittest::ManyOptionalString)},
  { 918, 925, -1, sizeof(::protobuf_unittest::Int32Message)},
  { 926, 933, -1, sizeof(::protobuf_unittest::Uint32Message)},
  { 934, 941, -1, sizeof(::protobuf_unittest::Int64Message)},
  { 942, 949, -1, sizeof(::protobuf_unittest::Uint64Message)},
  { 950, 957, -1, sizeof(::protobuf_unittest::BoolMessage)},
  { 958, 966, -1, sizeof(::protobuf_unittest::TestOneof_FooGroup)},
  { 968, -1, -1, sizeof(::protobuf_unittest::TestOneof)},
  { 979, 987, -1, sizeof(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup)},
  { 989, 999, -1, sizeof(::protobuf_unittest::TestOneofBackwardsCompatible)},
  { 1003, 1011, -1, sizeof(::protobuf_unittest::TestOneof2_FooGroup)},
  { 1013, 1021, -1, sizeof(::protobuf_unittest::TestOneof2_NestedMessage)},
  { 1023, 1052, -1, sizeof(::protobuf_unittest::TestOneof2)},
  { 1073, 1080, -1, sizeof(::protobuf_unittest::TestRequiredOneof_NestedMessage)},
  { 1081, -1, -1, sizeof(::protobuf_unittest::TestRequiredOneof)},
  { 1091, -1, -1, sizeof(::protobuf_unittest::TestPackedTypes)},
  { 1111, -1, -1, sizeof(::protobuf_unittest::TestUnpackedTypes)},
  { 1131, -1, -1, sizeof(::protobuf_unittest::TestPackedExtensions)},
  { 1137, -1, -1, sizeof(::protobuf_unittest::TestUnpackedExtensions)},
  { 1143, 1150, -1, sizeof(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType)},
  { 1151, 1164, -1, sizeof(::protobuf_unittest::TestDynamicExtensions)},
  { 1171, -1, -1, sizeof(::protobuf_unittest::TestRepeatedScalarDifferentTagSizes)},
  { 1183, 1190, -1, sizeof(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1)},
  { 1191, 1198, -1, sizeof(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2)},
  { 1199, -1, -1, sizeof(::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator)},
  { 1212, 1219, -1, sizeof(::protobuf_unittest::TestParsingMerge_OptionalGroup)},
  { 1220, 1227, -1, sizeof(::protobuf_unittest::TestParsingMerge_RepeatedGroup)},
  { 1228, 1239, -1, sizeof(::protobuf_unittest::TestParsingMerge)},
  { 1244, 1251, -1, sizeof(::protobuf_unittest::TestMergeException)},
  { 1252, 1259, -1, sizeof(::protobuf_unittest::TestCommentInjectionMessage)},
  { 1260, -1, -1, sizeof(::protobuf_unittest::FooRequest)},
  { 1266, -1, -1, sizeof(::protobuf_unittest::FooResponse)},
  { 1272, -1, -1, sizeof(::protobuf_unittest::FooClientMessage)},
  { 1278, -1, -1, sizeof(::protobuf_unittest::FooServerMessage)},
  { 1284, -1, -1, sizeof(::protobuf_unittest::BarRequest)},
  { 1290, -1, -1, sizeof(::protobuf_unittest::BarResponse)},
  { 1296, 1309, -1, sizeof(::protobuf_unittest::TestJsonName)},
  { 1316, 1323, -1, sizeof(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup)},
  { 1324, 1332, -1, sizeof(::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse)},
  { 1334, 1355, -1, sizeof(::protobuf_unittest::TestHugeFieldNumbers)},
  { 1369, 1384, -1, sizeof(::protobuf_unittest::TestExtensionInsideTable)},
  { 1393, 1400, -1, sizeof(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup)},
  { 1401, 1408, -1, sizeof(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup)},
  { 1409, -1, -1, sizeof(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup)},
  { 1417, 1424, -1, sizeof(::protobuf_unittest::TestNestedGroupExtensionOuter)},
  { 1425, 1432, -1, sizeof(::protobuf_unittest::TestNestedGroupExtensionInnerExtension)},
  { 1433, 1443, -1, sizeof(::protobuf_unittest::TestExtensionRangeSerialize)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf_unittest::_TestAllTypes_NestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestAllTypes_OptionalGroup_default_instance_._instance,
  &::protobuf_unittest::_TestAllTypes_RepeatedGroup_default_instance_._instance,
  &::protobuf_unittest::_TestAllTypes_default_instance_._instance,
  &::protobuf_unittest::_NestedTestAllTypes_default_instance_._instance,
  &::protobuf_unittest::_TestDeprecatedFields_default_instance_._instance,
  &::protobuf_unittest::_TestDeprecatedMessage_default_instance_._instance,
  &::protobuf_unittest::_ForeignMessage_default_instance_._instance,
  &::protobuf_unittest::_TestReservedFields_default_instance_._instance,
  &::protobuf_unittest::_TestAllExtensions_default_instance_._instance,
  &::protobuf_unittest::_OptionalGroup_extension_default_instance_._instance,
  &::protobuf_unittest::_RepeatedGroup_extension_default_instance_._instance,
  &::protobuf_unittest::_TestGroup_OptionalGroup_default_instance_._instance,
  &::protobuf_unittest::_TestGroup_default_instance_._instance,
  &::protobuf_unittest::_TestGroupExtension_default_instance_._instance,
  &::protobuf_unittest::_TestNestedExtension_OptionalGroup_extension_default_instance_._instance,
  &::protobuf_unittest::_TestNestedExtension_default_instance_._instance,
  &::protobuf_unittest::_TestChildExtension_default_instance_._instance,
  &::protobuf_unittest::_TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions_default_instance_._instance,
  &::protobuf_unittest::_TestChildExtensionData_NestedTestAllExtensionsData_default_instance_._instance,
  &::protobuf_unittest::_TestChildExtensionData_default_instance_._instance,
  &::protobuf_unittest::_TestNestedChildExtension_default_instance_._instance,
  &::protobuf_unittest::_TestNestedChildExtensionData_default_instance_._instance,
  &::protobuf_unittest::_TestRequired_default_instance_._instance,
  &::protobuf_unittest::_TestRequiredForeign_default_instance_._instance,
  &::protobuf_unittest::_TestRequiredMessage_default_instance_._instance,
  &::protobuf_unittest::_TestNestedRequiredForeign_default_instance_._instance,
  &::protobuf_unittest::_TestForeignNested_default_instance_._instance,
  &::protobuf_unittest::_TestEmptyMessage_default_instance_._instance,
  &::protobuf_unittest::_TestEmptyMessageWithExtensions_default_instance_._instance,
  &::protobuf_unittest::_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestPickleNestedMessage_NestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestPickleNestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestMultipleExtensionRanges_default_instance_._instance,
  &::protobuf_unittest::_TestReallyLargeTagNumber_default_instance_._instance,
  &::protobuf_unittest::_TestRecursiveMessage_default_instance_._instance,
  &::protobuf_unittest::_TestMutualRecursionA_SubMessage_default_instance_._instance,
  &::protobuf_unittest::_TestMutualRecursionA_SubGroup_default_instance_._instance,
  &::protobuf_unittest::_TestMutualRecursionA_default_instance_._instance,
  &::protobuf_unittest::_TestMutualRecursionB_default_instance_._instance,
  &::protobuf_unittest::_TestIsInitialized_SubMessage_SubGroup_default_instance_._instance,
  &::protobuf_unittest::_TestIsInitialized_SubMessage_default_instance_._instance,
  &::protobuf_unittest::_TestIsInitialized_default_instance_._instance,
  &::protobuf_unittest::_TestDupFieldNumber_Foo_default_instance_._instance,
  &::protobuf_unittest::_TestDupFieldNumber_Bar_default_instance_._instance,
  &::protobuf_unittest::_TestDupFieldNumber_default_instance_._instance,
  &::protobuf_unittest::_TestEagerMessage_default_instance_._instance,
  &::protobuf_unittest::_TestLazyMessage_default_instance_._instance,
  &::protobuf_unittest::_TestEagerMaybeLazy_NestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestEagerMaybeLazy_default_instance_._instance,
  &::protobuf_unittest::_TestNestedMessageHasBits_NestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestNestedMessageHasBits_default_instance_._instance,
  &::protobuf_unittest::_TestCamelCaseFieldNames_default_instance_._instance,
  &::protobuf_unittest::_TestFieldOrderings_NestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestFieldOrderings_default_instance_._instance,
  &::protobuf_unittest::_TestExtensionOrderings1_default_instance_._instance,
  &::protobuf_unittest::_TestExtensionOrderings2_TestExtensionOrderings3_default_instance_._instance,
  &::protobuf_unittest::_TestExtensionOrderings2_default_instance_._instance,
  &::protobuf_unittest::_TestExtremeDefaultValues_default_instance_._instance,
  &::protobuf_unittest::_SparseEnumMessage_default_instance_._instance,
  &::protobuf_unittest::_OneString_default_instance_._instance,
  &::protobuf_unittest::_MoreString_default_instance_._instance,
  &::protobuf_unittest::_OneBytes_default_instance_._instance,
  &::protobuf_unittest::_MoreBytes_default_instance_._instance,
  &::protobuf_unittest::_ManyOptionalString_default_instance_._instance,
  &::protobuf_unittest::_Int32Message_default_instance_._instance,
  &::protobuf_unittest::_Uint32Message_default_instance_._instance,
  &::protobuf_unittest::_Int64Message_default_instance_._instance,
  &::protobuf_unittest::_Uint64Message_default_instance_._instance,
  &::protobuf_unittest::_BoolMessage_default_instance_._instance,
  &::protobuf_unittest::_TestOneof_FooGroup_default_instance_._instance,
  &::protobuf_unittest::_TestOneof_default_instance_._instance,
  &::protobuf_unittest::_TestOneofBackwardsCompatible_FooGroup_default_instance_._instance,
  &::protobuf_unittest::_TestOneofBackwardsCompatible_default_instance_._instance,
  &::protobuf_unittest::_TestOneof2_FooGroup_default_instance_._instance,
  &::protobuf_unittest::_TestOneof2_NestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestOneof2_default_instance_._instance,
  &::protobuf_unittest::_TestRequiredOneof_NestedMessage_default_instance_._instance,
  &::protobuf_unittest::_TestRequiredOneof_default_instance_._instance,
  &::protobuf_unittest::_TestPackedTypes_default_instance_._instance,
  &::protobuf_unittest::_TestUnpackedTypes_default_instance_._instance,
  &::protobuf_unittest::_TestPackedExtensions_default_instance_._instance,
  &::protobuf_unittest::_TestUnpackedExtensions_default_instance_._instance,
  &::protobuf_unittest::_TestDynamicExtensions_DynamicMessageType_default_instance_._instance,
  &::protobuf_unittest::_TestDynamicExtensions_default_instance_._instance,
  &::protobuf_unittest::_TestRepeatedScalarDifferentTagSizes_default_instance_._instance,
  &::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_Group1_default_instance_._instance,
  &::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_Group2_default_instance_._instance,
  &::protobuf_unittest::_TestParsingMerge_RepeatedFieldsGenerator_default_instance_._instance,
  &::protobuf_unittest::_TestParsingMerge_OptionalGroup_default_instance_._instance,
  &::protobuf_unittest::_TestParsingMerge_RepeatedGroup_default_instance_._instance,
  &::protobuf_unittest::_TestParsingMerge_default_instance_._instance,
  &::protobuf_unittest::_TestMergeException_default_instance_._instance,
  &::protobuf_unittest::_TestCommentInjectionMessage_default_instance_._instance,
  &::protobuf_unittest::_FooRequest_default_instance_._instance,
  &::protobuf_unittest::_FooResponse_default_instance_._instance,
  &::protobuf_unittest::_FooClientMessage_default_instance_._instance,
  &::protobuf_unittest::_FooServerMessage_default_instance_._instance,
  &::protobuf_unittest::_BarRequest_default_instance_._instance,
  &::protobuf_unittest::_BarResponse_default_instance_._instance,
  &::protobuf_unittest::_TestJsonName_default_instance_._instance,
  &::protobuf_unittest::_TestHugeFieldNumbers_OptionalGroup_default_instance_._instance,
  &::protobuf_unittest::_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestHugeFieldNumbers_default_instance_._instance,
  &::protobuf_unittest::_TestExtensionInsideTable_default_instance_._instance,
  &::protobuf_unittest::_TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup_default_instance_._instance,
  &::protobuf_unittest::_TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup_default_instance_._instance,
  &::protobuf_unittest::_TestNestedGroupExtensionOuter_Layer1OptionalGroup_default_instance_._instance,
  &::protobuf_unittest::_TestNestedGroupExtensionOuter_default_instance_._instance,
  &::protobuf_unittest::_TestNestedGroupExtensionInnerExtension_default_instance_._instance,
  &::protobuf_unittest::_TestExtensionRangeSerialize_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2funittest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036google/protobuf/unittest.proto\022\021protob"
  "uf_unittest\032%google/protobuf/unittest_im"
  "port.proto\"\355\030\n\014TestAllTypes\022\026\n\016optional_"
  "int32\030\001 \001(\005\022\026\n\016optional_int64\030\002 \001(\003\022\027\n\017o"
  "ptional_uint32\030\003 \001(\r\022\027\n\017optional_uint64\030"
  "\004 \001(\004\022\027\n\017optional_sint32\030\005 \001(\021\022\027\n\017option"
  "al_sint64\030\006 \001(\022\022\030\n\020optional_fixed32\030\007 \001("
  "\007\022\030\n\020optional_fixed64\030\010 \001(\006\022\031\n\021optional_"
  "sfixed32\030\t \001(\017\022\031\n\021optional_sfixed64\030\n \001("
  "\020\022\026\n\016optional_float\030\013 \001(\002\022\027\n\017optional_do"
  "uble\030\014 \001(\001\022\025\n\roptional_bool\030\r \001(\010\022\027\n\017opt"
  "ional_string\030\016 \001(\t\022\026\n\016optional_bytes\030\017 \001"
  "(\014\022D\n\roptionalgroup\030\020 \001(\n2-.protobuf_uni"
  "ttest.TestAllTypes.OptionalGroup\022N\n\027opti"
  "onal_nested_message\030\022 \001(\0132-.protobuf_uni"
  "ttest.TestAllTypes.NestedMessage\022C\n\030opti"
  "onal_foreign_message\030\023 \001(\0132!.protobuf_un"
  "ittest.ForeignMessage\022H\n\027optional_import"
  "_message\030\024 \001(\0132\'.protobuf_unittest_impor"
  "t.ImportMessage\022H\n\024optional_nested_enum\030"
  "\025 \001(\0162*.protobuf_unittest.TestAllTypes.N"
  "estedEnum\022=\n\025optional_foreign_enum\030\026 \001(\016"
  "2\036.protobuf_unittest.ForeignEnum\022B\n\024opti"
  "onal_import_enum\030\027 \001(\0162$.protobuf_unitte"
  "st_import.ImportEnum\022!\n\025optional_string_"
  "piece\030\030 \001(\tB\002\010\002\022\031\n\roptional_cord\030\031 \001(\tB\002"
  "\010\001\022U\n\036optional_public_import_message\030\032 \001"
  "(\0132-.protobuf_unittest_import.PublicImpo"
  "rtMessage\022P\n\025optional_lazy_message\030\033 \001(\013"
  "2-.protobuf_unittest.TestAllTypes.Nested"
  "MessageB\002(\001\022\026\n\016repeated_int32\030\037 \003(\005\022\026\n\016r"
  "epeated_int64\030  \003(\003\022\027\n\017repeated_uint32\030!"
  " \003(\r\022\027\n\017repeated_uint64\030\" \003(\004\022\027\n\017repeate"
  "d_sint32\030# \003(\021\022\027\n\017repeated_sint64\030$ \003(\022\022"
  "\030\n\020repeated_fixed32\030% \003(\007\022\030\n\020repeated_fi"
  "xed64\030& \003(\006\022\031\n\021repeated_sfixed32\030\' \003(\017\022\031"
  "\n\021repeated_sfixed64\030( \003(\020\022\026\n\016repeated_fl"
  "oat\030) \003(\002\022\027\n\017repeated_double\030* \003(\001\022\025\n\rre"
  "peated_bool\030+ \003(\010\022\027\n\017repeated_string\030, \003"
  "(\t\022\026\n\016repeated_bytes\030- \003(\014\022D\n\rrepeatedgr"
  "oup\030. \003(\n2-.protobuf_unittest.TestAllTyp"
  "es.RepeatedGroup\022N\n\027repeated_nested_mess"
  "age\0300 \003(\0132-.protobuf_unittest.TestAllTyp"
  "es.NestedMessage\022C\n\030repeated_foreign_mes"
  "sage\0301 \003(\0132!.protobuf_unittest.ForeignMe"
  "ssage\022H\n\027repeated_import_message\0302 \003(\0132\'"
  ".protobuf_unittest_import.ImportMessage\022"
  "H\n\024repeated_nested_enum\0303 \003(\0162*.protobuf"
  "_unittest.TestAllTypes.NestedEnum\022=\n\025rep"
  "eated_foreign_enum\0304 \003(\0162\036.protobuf_unit"
  "test.ForeignEnum\022B\n\024repeated_import_enum"
  "\0305 \003(\0162$.protobuf_unittest_import.Import"
  "Enum\022!\n\025repeated_string_piece\0306 \003(\tB\002\010\002\022"
  "\031\n\rrepeated_cord\0307 \003(\tB\002\010\001\022P\n\025repeated_l"
  "azy_message\0309 \003(\0132-.protobuf_unittest.Te"
  "stAllTypes.NestedMessageB\002(\001\022\031\n\rdefault_"
  "int32\030= \001(\005:\00241\022\031\n\rdefault_int64\030> \001(\003:\002"
  "42\022\032\n\016default_uint32\030\? \001(\r:\00243\022\032\n\016defaul"
  "t_uint64\030@ \001(\004:\00244\022\033\n\016default_sint32\030A \001"
  "(\021:\003-45\022\032\n\016default_sint64\030B \001(\022:\00246\022\033\n\017d"
  "efault_fixed32\030C \001(\007:\00247\022\033\n\017default_fixe"
  "d64\030D \001(\006:\00248\022\034\n\020default_sfixed32\030E \001(\017:"
  "\00249\022\035\n\020default_sfixed64\030F \001(\020:\003-50\022\033\n\rde"
  "fault_float\030G \001(\002:\00451.5\022\035\n\016default_doubl"
  "e\030H \001(\001:\00552000\022\032\n\014default_bool\030I \001(\010:\004tr"
  "ue\022\035\n\016default_string\030J \001(\t:\005hello\022\034\n\rdef"
  "ault_bytes\030K \001(\014:\005world\022L\n\023default_neste"
  "d_enum\030Q \001(\0162*.protobuf_unittest.TestAll"
  "Types.NestedEnum:\003BAR\022I\n\024default_foreign"
  "_enum\030R \001(\0162\036.protobuf_unittest.ForeignE"
  "num:\013FOREIGN_BAR\022M\n\023default_import_enum\030"
  "S \001(\0162$.protobuf_unittest_import.ImportE"
  "num:\nIMPORT_BAR\022%\n\024default_string_piece\030"
  "T \001(\t:\003abcB\002\010\002\022\035\n\014default_cord\030U \001(\t:\00312"
  "3B\002\010\001\022\026\n\014oneof_uint32\030o \001(\rH\000\022M\n\024oneof_n"
  "ested_message\030p \001(\0132-.protobuf_unittest."
  "TestAllTypes.NestedMessageH\000\022\026\n\014oneof_st"
  "ring\030q \001(\tH\000\022\025\n\013oneof_bytes\030r \001(\014H\000\032\033\n\rN"
  "estedMessage\022\n\n\002bb\030\001 \001(\005\032\032\n\rOptionalGrou"
  "p\022\t\n\001a\030\021 \001(\005\032\032\n\rRepeatedGroup\022\t\n\001a\030/ \001(\005"
  "\"9\n\nNestedEnum\022\007\n\003FOO\020\001\022\007\n\003BAR\020\002\022\007\n\003BAZ\020"
  "\003\022\020\n\003NEG\020\377\377\377\377\377\377\377\377\377\001B\r\n\013oneof_field\"\264\002\n\022N"
  "estedTestAllTypes\0224\n\005child\030\001 \001(\0132%.proto"
  "buf_unittest.NestedTestAllTypes\0220\n\007paylo"
  "ad\030\002 \001(\0132\037.protobuf_unittest.TestAllType"
  "s\022=\n\016repeated_child\030\003 \003(\0132%.protobuf_uni"
  "ttest.NestedTestAllTypes\022=\n\nlazy_child\030\004"
  " \001(\0132%.protobuf_unittest.NestedTestAllTy"
  "pesB\002(\001\0228\n\013eager_child\030\005 \001(\0132\037.protobuf_"
  "unittest.TestAllTypesB\002(\000\"m\n\024TestDepreca"
  "tedFields\022\034\n\020deprecated_int32\030\001 \001(\005B\002\030\001\022"
  "\'\n\031deprecated_int32_in_oneof\030\002 \001(\005B\002\030\001H\000"
  "B\016\n\014oneof_fields\"\033\n\025TestDeprecatedMessag"
  "e:\002\030\001\"&\n\016ForeignMessage\022\t\n\001c\030\001 \001(\005\022\t\n\001d\030"
  "\002 \001(\005\"0\n\022TestReservedFieldsJ\004\010\002\020\003J\004\010\017\020\020J"
  "\004\010\t\020\014R\003barR\003baz\"\035\n\021TestAllExtensions*\010\010\001"
  "\020\200\200\200\200\002\"$\n\027OptionalGroup_extension\022\t\n\001a\030\021"
  " \001(\005\"$\n\027RepeatedGroup_extension\022\t\n\001a\030/ \001"
  "(\005\"\251\001\n\tTestGroup\022A\n\roptionalgroup\030\020 \001(\n2"
  "*.protobuf_unittest.TestGroup.OptionalGr"
  "oup\022=\n\025optional_foreign_enum\030\026 \001(\0162\036.pro"
  "tobuf_unittest.ForeignEnum\032\032\n\rOptionalGr"
  "oup\022\t\n\001a\030\021 \001(\005\"\036\n\022TestGroupExtension*\010\010\001"
  "\020\200\200\200\200\002\"\267\003\n\023TestNestedExtension\032$\n\027Option"
  "alGroup_extension\022\t\n\001a\030\021 \001(\00529\n\004test\022$.p"
  "rotobuf_unittest.TestAllExtensions\030\352\007 \001("
  "\t:\004test2F\n\027nested_string_extension\022$.pro"
  "tobuf_unittest.TestAllExtensions\030\353\007 \001(\t2"
  "\206\001\n\027optionalgroup_extension\022%.protobuf_u"
  "nittest.TestGroupExtension\030\020 \001(\n2>.proto"
  "buf_unittest.TestNestedExtension.Optiona"
  "lGroup_extension2n\n\037optional_foreign_enu"
  "m_extension\022%.protobuf_unittest.TestGrou"
  "pExtension\030\026 \001(\0162\036.protobuf_unittest.For"
  "eignEnum\"l\n\022TestChildExtension\022\t\n\001a\030\001 \001("
  "\t\022\t\n\001b\030\002 \001(\t\022@\n\022optional_extension\030\003 \001(\013"
  "2$.protobuf_unittest.TestAllExtensions\"\326"
  "\002\n\026TestChildExtensionData\022\t\n\001a\030\001 \001(\t\022\t\n\001"
  "b\030\002 \001(\t\022a\n\022optional_extension\030\003 \001(\0132E.pr"
  "otobuf_unittest.TestChildExtensionData.N"
  "estedTestAllExtensionsData\032\302\001\n\033NestedTes"
  "tAllExtensionsData\022r\n\007dynamic\030\200\304\256\303\001 \001(\0132"
  "].protobuf_unittest.TestChildExtensionDa"
  "ta.NestedTestAllExtensionsData.NestedDyn"
  "amicExtensions\032/\n\027NestedDynamicExtension"
  "s\022\t\n\001a\030\001 \001(\005\022\t\n\001b\030\002 \001(\005\"[\n\030TestNestedChi"
  "ldExtension\022\t\n\001a\030\001 \001(\005\0224\n\005child\030\002 \001(\0132%."
  "protobuf_unittest.TestChildExtension\"c\n\034"
  "TestNestedChildExtensionData\022\t\n\001a\030\001 \001(\005\022"
  "8\n\005child\030\002 \001(\0132).protobuf_unittest.TestC"
  "hildExtensionData\"\222\006\n\014TestRequired\022\t\n\001a\030"
  "\001 \002(\005\022\016\n\006dummy2\030\002 \001(\005\022\t\n\001b\030\003 \002(\005\022\016\n\006dumm"
  "y4\030\004 \001(\005\022\016\n\006dummy5\030\005 \001(\005\022\016\n\006dummy6\030\006 \001(\005"
  "\022\016\n\006dummy7\030\007 \001(\005\022\016\n\006dummy8\030\010 \001(\005\022\016\n\006dumm"
  "y9\030\t \001(\005\022\017\n\007dummy10\030\n \001(\005\022\017\n\007dummy11\030\013 \001"
  "(\005\022\017\n\007dummy12\030\014 \001(\005\022\017\n\007dummy13\030\r \001(\005\022\017\n\007"
  "dummy14\030\016 \001(\005\022\017\n\007dummy15\030\017 \001(\005\022\017\n\007dummy1"
  "6\030\020 \001(\005\022\017\n\007dummy17\030\021 \001(\005\022\017\n\007dummy18\030\022 \001("
  "\005\022\017\n\007dummy19\030\023 \001(\005\022\017\n\007dummy20\030\024 \001(\005\022\017\n\007d"
  "ummy21\030\025 \001(\005\022\017\n\007dummy22\030\026 \001(\005\022\017\n\007dummy23"
  "\030\027 \001(\005\022\017\n\007dummy24\030\030 \001(\005\022\017\n\007dummy25\030\031 \001(\005"
  "\022\017\n\007dummy26\030\032 \001(\005\022\017\n\007dummy27\030\033 \001(\005\022\017\n\007du"
  "mmy28\030\034 \001(\005\022\017\n\007dummy29\030\035 \001(\005\022\017\n\007dummy30\030"
  "\036 \001(\005\022\017\n\007dummy31\030\037 \001(\005\022\017\n\007dummy32\030  \001(\005\022"
  "\t\n\001c\030! \002(\005\022;\n\020optional_foreign\030\" \001(\0132!.p"
  "rotobuf_unittest.ForeignMessage2V\n\006singl"
  "e\022$.protobuf_unittest.TestAllExtensions\030"
  "\350\007 \001(\0132\037.protobuf_unittest.TestRequired2"
  "U\n\005multi\022$.protobuf_unittest.TestAllExte"
  "nsions\030\351\007 \003(\0132\037.protobuf_unittest.TestRe"
  "quired\"\232\001\n\023TestRequiredForeign\0229\n\020option"
  "al_message\030\001 \001(\0132\037.protobuf_unittest.Tes"
  "tRequired\0229\n\020repeated_message\030\002 \003(\0132\037.pr"
  "otobuf_unittest.TestRequired\022\r\n\005dummy\030\003 "
  "\001(\005\"\306\001\n\023TestRequiredMessage\0229\n\020optional_"
  "message\030\001 \001(\0132\037.protobuf_unittest.TestRe"
  "quired\0229\n\020repeated_message\030\002 \003(\0132\037.proto"
  "buf_unittest.TestRequired\0229\n\020required_me"
  "ssage\030\003 \002(\0132\037.protobuf_unittest.TestRequ"
  "ired\"\240\001\n\031TestNestedRequiredForeign\022;\n\005ch"
  "ild\030\001 \001(\0132,.protobuf_unittest.TestNested"
  "RequiredForeign\0227\n\007payload\030\002 \001(\0132&.proto"
  "buf_unittest.TestRequiredForeign\022\r\n\005dumm"
  "y\030\003 \001(\005\"Z\n\021TestForeignNested\022E\n\016foreign_"
  "nested\030\001 \001(\0132-.protobuf_unittest.TestAll"
  "Types.NestedMessage\"\022\n\020TestEmptyMessage\""
  "*\n\036TestEmptyMessageWithExtensions*\010\010\001\020\200\200"
  "\200\200\002\"Y\n\027TestPickleNestedMessage\032>\n\rNested"
  "Message\022\n\n\002bb\030\001 \001(\005\032!\n\023NestedNestedMessa"
  "ge\022\n\n\002cc\030\001 \001(\005\"7\n\033TestMultipleExtensionR"
  "anges*\004\010*\020+*\006\010\257 \020\224!*\n\010\200\200\004\020\200\200\200\200\002\"4\n\030TestR"
  "eallyLargeTagNumber\022\t\n\001a\030\001 \001(\005\022\r\n\002bb\030\377\377\377"
  "\177 \001(\005\"U\n\024TestRecursiveMessage\0222\n\001a\030\001 \001(\013"
  "2\'.protobuf_unittest.TestRecursiveMessag"
  "e\022\t\n\001i\030\002 \001(\005\"\341\002\n\024TestMutualRecursionA\0223\n"
  "\002bb\030\001 \001(\0132\'.protobuf_unittest.TestMutual"
  "RecursionB\022B\n\010subgroup\030\002 \001(\n20.protobuf_"
  "unittest.TestMutualRecursionA.SubGroup\032@"
  "\n\nSubMessage\0222\n\001b\030\001 \001(\0132\'.protobuf_unitt"
  "est.TestMutualRecursionB\032\215\001\n\010SubGroup\022G\n"
  "\013sub_message\030\003 \001(\01322.protobuf_unittest.T"
  "estMutualRecursionA.SubMessage\0228\n\017not_in"
  "_this_scc\030\004 \001(\0132\037.protobuf_unittest.Test"
  "AllTypes\"b\n\024TestMutualRecursionB\0222\n\001a\030\001 "
  "\001(\0132\'.protobuf_unittest.TestMutualRecurs"
  "ionA\022\026\n\016optional_int32\030\002 \001(\005\"\312\001\n\021TestIsI"
  "nitialized\022D\n\013sub_message\030\001 \001(\0132/.protob"
  "uf_unittest.TestIsInitialized.SubMessage"
  "\032o\n\nSubMessage\022J\n\010subgroup\030\001 \001(\n28.proto"
  "buf_unittest.TestIsInitialized.SubMessag"
  "e.SubGroup\032\025\n\010SubGroup\022\t\n\001i\030\002 \002(\005\"\263\001\n\022Te"
  "stDupFieldNumber\022\t\n\001a\030\001 \001(\005\0226\n\003foo\030\002 \001(\n"
  "2).protobuf_unittest.TestDupFieldNumber."
  "Foo\0226\n\003bar\030\003 \001(\n2).protobuf_unittest.Tes"
  "tDupFieldNumber.Bar\032\020\n\003Foo\022\t\n\001a\030\001 \001(\005\032\020\n"
  "\003Bar\022\t\n\001a\030\001 \001(\005\"L\n\020TestEagerMessage\0228\n\013s"
  "ub_message\030\001 \001(\0132\037.protobuf_unittest.Tes"
  "tAllTypesB\002(\000\"K\n\017TestLazyMessage\0228\n\013sub_"
  "message\030\001 \001(\0132\037.protobuf_unittest.TestAl"
  "lTypesB\002(\001\"\217\002\n\022TestEagerMaybeLazy\0224\n\013mes"
  "sage_foo\030\001 \001(\0132\037.protobuf_unittest.TestA"
  "llTypes\0224\n\013message_bar\030\002 \001(\0132\037.protobuf_"
  "unittest.TestAllTypes\022H\n\013message_baz\030\003 \001"
  "(\01323.protobuf_unittest.TestEagerMaybeLaz"
  "y.NestedMessage\032C\n\rNestedMessage\0222\n\006pack"
  "ed\030\001 \001(\0132\".protobuf_unittest.TestPackedT"
  "ypes\"\200\002\n\030TestNestedMessageHasBits\022Z\n\027opt"
  "ional_nested_message\030\001 \001(\01329.protobuf_un"
  "ittest.TestNestedMessageHasBits.NestedMe"
  "ssage\032\207\001\n\rNestedMessage\022$\n\034nestedmessage"
  "_repeated_int32\030\001 \003(\005\022P\n%nestedmessage_r"
  "epeated_foreignmessage\030\002 \003(\0132!.protobuf_"
  "unittest.ForeignMessage\"\345\003\n\027TestCamelCas"
  "eFieldNames\022\026\n\016PrimitiveField\030\001 \001(\005\022\023\n\013S"
  "tringField\030\002 \001(\t\0221\n\tEnumField\030\003 \001(\0162\036.pr"
  "otobuf_unittest.ForeignEnum\0227\n\014MessageFi"
  "eld\030\004 \001(\0132!.protobuf_unittest.ForeignMes"
  "sage\022\034\n\020StringPieceField\030\005 \001(\tB\002\010\002\022\025\n\tCo"
  "rdField\030\006 \001(\tB\002\010\001\022\036\n\026RepeatedPrimitiveFi"
  "eld\030\007 \003(\005\022\033\n\023RepeatedStringField\030\010 \003(\t\0229"
  "\n\021RepeatedEnumField\030\t \003(\0162\036.protobuf_uni"
  "ttest.ForeignEnum\022\?\n\024RepeatedMessageFiel"
  "d\030\n \003(\0132!.protobuf_unittest.ForeignMessa"
  "ge\022$\n\030RepeatedStringPieceField\030\013 \003(\tB\002\010\002"
  "\022\035\n\021RepeatedCordField\030\014 \003(\tB\002\010\001\"\325\001\n\022Test"
  "FieldOrderings\022\021\n\tmy_string\030\013 \001(\t\022\016\n\006my_"
  "int\030\001 \001(\003\022\020\n\010my_float\030e \001(\002\022U\n\027optional_"
  "nested_message\030\310\001 \001(\01323.protobuf_unittes"
  "t.TestFieldOrderings.NestedMessage\032\'\n\rNe"
  "stedMessage\022\n\n\002oo\030\002 \001(\003\022\n\n\002bb\030\001 \001(\005*\004\010\002\020"
  "\013*\004\010\014\020e\"\234\001\n\027TestExtensionOrderings1\022\021\n\tm"
  "y_string\030\001 \001(\t2n\n\023test_ext_orderings1\022%."
  "protobuf_unittest.TestFieldOrderings\030\r \001"
  "(\0132*.protobuf_unittest.TestExtensionOrde"
  "rings1\"\324\002\n\027TestExtensionOrderings2\022\021\n\tmy"
  "_string\030\001 \001(\t\032\265\001\n\027TestExtensionOrderings"
  "3\022\021\n\tmy_string\030\001 \001(\t2\206\001\n\023test_ext_orderi"
  "ngs3\022%.protobuf_unittest.TestFieldOrderi"
  "ngs\030\016 \001(\0132B.protobuf_unittest.TestExtens"
  "ionOrderings2.TestExtensionOrderings32n\n"
  "\023test_ext_orderings2\022%.protobuf_unittest"
  ".TestFieldOrderings\030\014 \001(\0132*.protobuf_uni"
  "ttest.TestExtensionOrderings2\"\266\007\n\030TestEx"
  "tremeDefaultValues\022\?\n\rescaped_bytes\030\001 \001("
  "\014:(\\000\\001\\007\\010\\014\\n\\r\\t\\013\\\\\\\'\\\"\\"
  "376\022 \n\014large_uint32\030\002 \001(\r:\n4294967295\022*\n"
  "\014large_uint64\030\003 \001(\004:\0241844674407370955161"
  "5\022 \n\013small_int32\030\004 \001(\005:\013-2147483647\022)\n\013s"
  "mall_int64\030\005 \001(\003:\024-9223372036854775807\022\'"
  "\n\022really_small_int32\030\025 \001(\005:\013-2147483648\022"
  "0\n\022really_small_int64\030\026 \001(\003:\024-9223372036"
  "854775808\022\030\n\013utf8_string\030\006 \001(\t:\003\341\210\264\022\025\n\nz"
  "ero_float\030\007 \001(\002:\0010\022\024\n\tone_float\030\010 \001(\002:\0011"
  "\022\030\n\013small_float\030\t \001(\002:\0031.5\022\036\n\022negative_o"
  "ne_float\030\n \001(\002:\002-1\022\034\n\016negative_float\030\013 \001"
  "(\002:\004-1.5\022\032\n\013large_float\030\014 \001(\002:\0052e+08\022$\n\024"
  "small_negative_float\030\r \001(\002:\006-8e-28\022\027\n\nin"
  "f_double\030\016 \001(\001:\003inf\022\034\n\016neg_inf_double\030\017 "
  "\001(\001:\004-inf\022\027\n\nnan_double\030\020 \001(\001:\003nan\022\026\n\tin"
  "f_float\030\021 \001(\002:\003inf\022\033\n\rneg_inf_float\030\022 \001("
  "\002:\004-inf\022\026\n\tnan_float\030\023 \001(\002:\003nan\022+\n\014cpp_t"
  "rigraph\030\024 \001(\t:\025\? \? \?\? \?\? \?\?\? \?\?/ \?\?-\022 \n\020"
  "string_with_zero\030\027 \001(\t:\006hel\000lo\022\"\n\017bytes_"
  "with_zero\030\030 \001(\014:\twor\\000ld\022(\n\026string_pie"
  "ce_with_zero\030\031 \001(\t:\004ab\000cB\002\010\002\022 \n\016cord_wit"
  "h_zero\030\032 \001(\t:\00412\0003B\002\010\001\022&\n\022replacement_st"
  "ring\030\033 \001(\t:\n${unknown}\"K\n\021SparseEnumMess"
  "age\0226\n\013sparse_enum\030\001 \001(\0162!.protobuf_unit"
  "test.TestSparseEnum\"\031\n\tOneString\022\014\n\004data"
  "\030\001 \001(\t\"\032\n\nMoreString\022\014\n\004data\030\001 \003(\t\"\030\n\010On"
  "eBytes\022\014\n\004data\030\001 \001(\014\"\031\n\tMoreBytes\022\014\n\004dat"
  "a\030\001 \003(\014\"\353\003\n\022ManyOptionalString\022\014\n\004str1\030\001"
  " \001(\t\022\014\n\004str2\030\002 \001(\t\022\014\n\004str3\030\003 \001(\t\022\014\n\004str4"
  "\030\004 \001(\t\022\014\n\004str5\030\005 \001(\t\022\014\n\004str6\030\006 \001(\t\022\014\n\004st"
  "r7\030\007 \001(\t\022\014\n\004str8\030\010 \001(\t\022\014\n\004str9\030\t \001(\t\022\r\n\005"
  "str10\030\n \001(\t\022\r\n\005str11\030\013 \001(\t\022\r\n\005str12\030\014 \001("
  "\t\022\r\n\005str13\030\r \001(\t\022\r\n\005str14\030\016 \001(\t\022\r\n\005str15"
  "\030\017 \001(\t\022\r\n\005str16\030\020 \001(\t\022\r\n\005str17\030\021 \001(\t\022\r\n\005"
  "str18\030\022 \001(\t\022\r\n\005str19\030\023 \001(\t\022\r\n\005str20\030\024 \001("
  "\t\022\r\n\005str21\030\025 \001(\t\022\r\n\005str22\030\026 \001(\t\022\r\n\005str23"
  "\030\027 \001(\t\022\r\n\005str24\030\030 \001(\t\022\r\n\005str25\030\031 \001(\t\022\r\n\005"
  "str26\030\032 \001(\t\022\r\n\005str27\030\033 \001(\t\022\r\n\005str28\030\034 \001("
  "\t\022\r\n\005str29\030\035 \001(\t\022\r\n\005str30\030\036 \001(\t\022\r\n\005str31"
  "\030\037 \001(\t\022\r\n\005str32\030  \001(\t\"\034\n\014Int32Message\022\014\n"
  "\004data\030\001 \001(\005\"\035\n\rUint32Message\022\014\n\004data\030\001 \001"
  "(\r\"\034\n\014Int64Message\022\014\n\004data\030\001 \001(\003\"\035\n\rUint"
  "64Message\022\014\n\004data\030\001 \001(\004\"\033\n\013BoolMessage\022\014"
  "\n\004data\030\001 \001(\010\"\320\001\n\tTestOneof\022\021\n\007foo_int\030\001 "
  "\001(\005H\000\022\024\n\nfoo_string\030\002 \001(\tH\000\0226\n\013foo_messa"
  "ge\030\003 \001(\0132\037.protobuf_unittest.TestAllType"
  "sH\000\0229\n\010foogroup\030\004 \001(\n2%.protobuf_unittes"
  "t.TestOneof.FooGroupH\000\032 \n\010FooGroup\022\t\n\001a\030"
  "\005 \001(\005\022\t\n\001b\030\006 \001(\tB\005\n\003foo\"\347\001\n\034TestOneofBac"
  "kwardsCompatible\022\017\n\007foo_int\030\001 \001(\005\022\022\n\nfoo"
  "_string\030\002 \001(\t\0224\n\013foo_message\030\003 \001(\0132\037.pro"
  "tobuf_unittest.TestAllTypes\022J\n\010foogroup\030"
  "\004 \001(\n28.protobuf_unittest.TestOneofBackw"
  "ardsCompatible.FooGroup\032 \n\010FooGroup\022\t\n\001a"
  "\030\005 \001(\005\022\t\n\001b\030\006 \001(\t\"\325\007\n\nTestOneof2\022\021\n\007foo_"
  "int\030\001 \001(\005H\000\022\024\n\nfoo_string\030\002 \001(\tH\000\022\026\n\010foo"
  "_cord\030\003 \001(\tB\002\010\001H\000\022\036\n\020foo_string_piece\030\004 "
  "\001(\tB\002\010\002H\000\022\023\n\tfoo_bytes\030\005 \001(\014H\000\022<\n\010foo_en"
  "um\030\006 \001(\0162(.protobuf_unittest.TestOneof2."
  "NestedEnumH\000\022B\n\013foo_message\030\007 \001(\0132+.prot"
  "obuf_unittest.TestOneof2.NestedMessageH\000"
  "\022:\n\010foogroup\030\010 \001(\n2&.protobuf_unittest.T"
  "estOneof2.FooGroupH\000\022K\n\020foo_lazy_message"
  "\030\013 \001(\0132+.protobuf_unittest.TestOneof2.Ne"
  "stedMessageB\002(\001H\000\022\024\n\007bar_int\030\014 \001(\005:\0015H\001\022"
  "\034\n\nbar_string\030\r \001(\t:\006STRINGH\001\022\034\n\010bar_cor"
  "d\030\016 \001(\t:\004CORDB\002\010\001H\001\022&\n\020bar_string_piece\030"
  "\017 \001(\t:\006SPIECEB\002\010\002H\001\022\032\n\tbar_bytes\030\020 \001(\014:\005"
  "BYTESH\001\022A\n\010bar_enum\030\021 \001(\0162(.protobuf_uni"
  "ttest.TestOneof2.NestedEnum:\003BARH\001\022)\n\035ba"
  "r_string_with_empty_default\030\024 \001(\t:\000H\001\022+\n"
  "\033bar_cord_with_empty_default\030\025 \001(\t:\000B\002\010\001"
  "H\001\0223\n#bar_string_piece_with_empty_defaul"
  "t\030\026 \001(\t:\000B\002\010\002H\001\022(\n\034bar_bytes_with_empty_"
  "default\030\027 \001(\014:\000H\001\022\017\n\007baz_int\030\022 \001(\005\022\027\n\nba"
  "z_string\030\023 \001(\t:\003BAZ\032 \n\010FooGroup\022\t\n\001a\030\t \001"
  "(\005\022\t\n\001b\030\n \001(\t\0323\n\rNestedMessage\022\017\n\007qux_in"
  "t\030\001 \001(\003\022\021\n\tcorge_int\030\002 \003(\005\"\'\n\nNestedEnum"
  "\022\007\n\003FOO\020\001\022\007\n\003BAR\020\002\022\007\n\003BAZ\020\003B\005\n\003fooB\005\n\003ba"
  "r\"\270\001\n\021TestRequiredOneof\022\021\n\007foo_int\030\001 \001(\005"
  "H\000\022\024\n\nfoo_string\030\002 \001(\tH\000\022I\n\013foo_message\030"
  "\003 \001(\01322.protobuf_unittest.TestRequiredOn"
  "eof.NestedMessageH\000\032(\n\rNestedMessage\022\027\n\017"
  "required_double\030\001 \002(\001B\005\n\003foo\"\252\003\n\017TestPac"
  "kedTypes\022\030\n\014packed_int32\030Z \003(\005B\002\020\001\022\030\n\014pa"
  "cked_int64\030[ \003(\003B\002\020\001\022\031\n\rpacked_uint32\030\\ "
  "\003(\rB\002\020\001\022\031\n\rpacked_uint64\030] \003(\004B\002\020\001\022\031\n\rpa"
  "cked_sint32\030^ \003(\021B\002\020\001\022\031\n\rpacked_sint64\030_"
  " \003(\022B\002\020\001\022\032\n\016packed_fixed32\030` \003(\007B\002\020\001\022\032\n\016"
  "packed_fixed64\030a \003(\006B\002\020\001\022\033\n\017packed_sfixe"
  "d32\030b \003(\017B\002\020\001\022\033\n\017packed_sfixed64\030c \003(\020B\002"
  "\020\001\022\030\n\014packed_float\030d \003(\002B\002\020\001\022\031\n\rpacked_d"
  "ouble\030e \003(\001B\002\020\001\022\027\n\013packed_bool\030f \003(\010B\002\020\001"
  "\0227\n\013packed_enum\030g \003(\0162\036.protobuf_unittes"
  "t.ForeignEnumB\002\020\001\"\310\003\n\021TestUnpackedTypes\022"
  "\032\n\016unpacked_int32\030Z \003(\005B\002\020\000\022\032\n\016unpacked_"
  "int64\030[ \003(\003B\002\020\000\022\033\n\017unpacked_uint32\030\\ \003(\r"
  "B\002\020\000\022\033\n\017unpacked_uint64\030] \003(\004B\002\020\000\022\033\n\017unp"
  "acked_sint32\030^ \003(\021B\002\020\000\022\033\n\017unpacked_sint6"
  "4\030_ \003(\022B\002\020\000\022\034\n\020unpacked_fixed32\030` \003(\007B\002\020"
  "\000\022\034\n\020unpacked_fixed64\030a \003(\006B\002\020\000\022\035\n\021unpac"
  "ked_sfixed32\030b \003(\017B\002\020\000\022\035\n\021unpacked_sfixe"
  "d64\030c \003(\020B\002\020\000\022\032\n\016unpacked_float\030d \003(\002B\002\020"
  "\000\022\033\n\017unpacked_double\030e \003(\001B\002\020\000\022\031\n\runpack"
  "ed_bool\030f \003(\010B\002\020\000\0229\n\runpacked_enum\030g \003(\016"
  "2\036.protobuf_unittest.ForeignEnumB\002\020\000\" \n\024"
  "TestPackedExtensions*\010\010\001\020\200\200\200\200\002\"\"\n\026TestUn"
  "packedExtensions*\010\010\001\020\200\200\200\200\002\"\231\004\n\025TestDynam"
  "icExtensions\022\031\n\020scalar_extension\030\320\017 \001(\007\022"
  "7\n\016enum_extension\030\321\017 \001(\0162\036.protobuf_unit"
  "test.ForeignEnum\022Y\n\026dynamic_enum_extensi"
  "on\030\322\017 \001(\01628.protobuf_unittest.TestDynami"
  "cExtensions.DynamicEnumType\022=\n\021message_e"
  "xtension\030\323\017 \001(\0132!.protobuf_unittest.Fore"
  "ignMessage\022_\n\031dynamic_message_extension\030"
  "\324\017 \001(\0132;.protobuf_unittest.TestDynamicEx"
  "tensions.DynamicMessageType\022\033\n\022repeated_"
  "extension\030\325\017 \003(\t\022\035\n\020packed_extension\030\326\017 "
  "\003(\021B\002\020\001\032,\n\022DynamicMessageType\022\026\n\rdynamic"
  "_field\030\264\020 \001(\005\"G\n\017DynamicEnumType\022\020\n\013DYNA"
  "MIC_FOO\020\230\021\022\020\n\013DYNAMIC_BAR\020\231\021\022\020\n\013DYNAMIC_"
  "BAZ\020\232\021\"\300\001\n#TestRepeatedScalarDifferentTa"
  "gSizes\022\030\n\020repeated_fixed32\030\014 \003(\007\022\026\n\016repe"
  "ated_int32\030\r \003(\005\022\031\n\020repeated_fixed64\030\376\017 "
  "\003(\006\022\027\n\016repeated_int64\030\377\017 \003(\003\022\030\n\016repeated"
  "_float\030\376\377\017 \003(\002\022\031\n\017repeated_uint64\030\377\377\017 \003("
  "\004\"\367\t\n\020TestParsingMerge\022;\n\022required_all_t"
  "ypes\030\001 \002(\0132\037.protobuf_unittest.TestAllTy"
  "pes\022;\n\022optional_all_types\030\002 \001(\0132\037.protob"
  "uf_unittest.TestAllTypes\022;\n\022repeated_all"
  "_types\030\003 \003(\0132\037.protobuf_unittest.TestAll"
  "Types\022H\n\roptionalgroup\030\n \001(\n21.protobuf_"
  "unittest.TestParsingMerge.OptionalGroup\022"
  "H\n\rrepeatedgroup\030\024 \003(\n21.protobuf_unitte"
  "st.TestParsingMerge.RepeatedGroup\032\252\004\n\027Re"
  "peatedFieldsGenerator\022/\n\006field1\030\001 \003(\0132\037."
  "protobuf_unittest.TestAllTypes\022/\n\006field2"
  "\030\002 \003(\0132\037.protobuf_unittest.TestAllTypes\022"
  "/\n\006field3\030\003 \003(\0132\037.protobuf_unittest.Test"
  "AllTypes\022R\n\006group1\030\n \003(\n2B.protobuf_unit"
  "test.TestParsingMerge.RepeatedFieldsGene"
  "rator.Group1\022R\n\006group2\030\024 \003(\n2B.protobuf_"
  "unittest.TestParsingMerge.RepeatedFields"
  "Generator.Group2\022.\n\004ext1\030\350\007 \003(\0132\037.protob"
  "uf_unittest.TestAllTypes\022.\n\004ext2\030\351\007 \003(\0132"
  "\037.protobuf_unittest.TestAllTypes\0329\n\006Grou"
  "p1\022/\n\006field1\030\013 \001(\0132\037.protobuf_unittest.T"
  "estAllTypes\0329\n\006Group2\022/\n\006field1\030\025 \001(\0132\037."
  "protobuf_unittest.TestAllTypes\032R\n\rOption"
  "alGroup\022A\n\030optional_group_all_types\030\013 \001("
  "\0132\037.protobuf_unittest.TestAllTypes\032R\n\rRe"
  "peatedGroup\022A\n\030repeated_group_all_types\030"
  "\025 \001(\0132\037.protobuf_unittest.TestAllTypes*\t"
  "\010\350\007\020\200\200\200\200\0022[\n\014optional_ext\022#.protobuf_uni"
  "ttest.TestParsingMerge\030\350\007 \001(\0132\037.protobuf"
  "_unittest.TestAllTypes2[\n\014repeated_ext\022#"
  ".protobuf_unittest.TestParsingMerge\030\351\007 \003"
  "(\0132\037.protobuf_unittest.TestAllTypes\"R\n\022T"
  "estMergeException\022<\n\016all_extensions\030\001 \001("
  "\0132$.protobuf_unittest.TestAllExtensions\""
  "D\n\033TestCommentInjectionMessage\022%\n\001a\030\001 \001("
  "\t:\032*/ <- Neither should this.\"\014\n\nFooRequ"
  "est\"\r\n\013FooResponse\"\022\n\020FooClientMessage\"\022"
  "\n\020FooServerMessage\"\014\n\nBarRequest\"\r\n\013BarR"
  "esponse\"\246\001\n\014TestJsonName\022\023\n\013field_name1\030"
  "\001 \001(\005\022\022\n\nfieldName2\030\002 \001(\005\022\022\n\nFieldName3\030"
  "\003 \001(\005\022\024\n\014_field_name4\030\004 \001(\005\022\023\n\013FIELD_NAM"
  "E5\030\005 \001(\005\022\032\n\013field_name6\030\006 \001(\005R\005@type\022\022\n\n"
  "fieldname7\030\007 \001(\005\"\375\005\n\024TestHugeFieldNumber"
  "s\022\032\n\016optional_int32\030\360\370\377\377\001 \001(\005\022\024\n\010fixed_3"
  "2\030\361\370\377\377\001 \001(\005\022\036\n\016repeated_int32\030\362\370\377\377\001 \003(\005B"
  "\002\020\000\022\034\n\014packed_int32\030\363\370\377\377\001 \003(\005B\002\020\001\0229\n\ropt"
  "ional_enum\030\364\370\377\377\001 \001(\0162\036.protobuf_unittest"
  ".ForeignEnum\022\033\n\017optional_string\030\365\370\377\377\001 \001("
  "\t\022\032\n\016optional_bytes\030\366\370\377\377\001 \001(\014\022\?\n\020optiona"
  "l_message\030\367\370\377\377\001 \001(\0132!.protobuf_unittest."
  "ForeignMessage\022P\n\roptionalgroup\030\370\370\377\377\001 \001("
  "\n25.protobuf_unittest.TestHugeFieldNumbe"
  "rs.OptionalGroup\022[\n\021string_string_map\030\372\370"
  "\377\377\001 \003(\0132<.protobuf_unittest.TestHugeFiel"
  "dNumbers.StringStringMapEntry\022\032\n\014oneof_u"
  "int32\030\373\370\377\377\001 \001(\rH\000\022C\n\024oneof_test_all_type"
  "s\030\374\370\377\377\001 \001(\0132\037.protobuf_unittest.TestAllT"
  "ypesH\000\022\032\n\014oneof_string\030\375\370\377\377\001 \001(\tH\000\022\031\n\013on"
  "eof_bytes\030\376\370\377\377\001 \001(\014H\000\032$\n\rOptionalGroup\022\023"
  "\n\007group_a\030\371\370\377\377\001 \001(\005\0326\n\024StringStringMapEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\014\010\340\252"
  "\377\377\001\020\360\370\377\377\001B\r\n\013oneof_field\"\261\001\n\030TestExtensi"
  "onInsideTable\022\016\n\006field1\030\001 \001(\005\022\016\n\006field2\030"
  "\002 \001(\005\022\016\n\006field3\030\003 \001(\005\022\016\n\006field4\030\004 \001(\005\022\016\n"
  "\006field6\030\006 \001(\005\022\016\n\006field7\030\007 \001(\005\022\016\n\006field8\030"
  "\010 \001(\005\022\016\n\006field9\030\t \001(\005\022\017\n\007field10\030\n \001(\005*\004"
  "\010\005\020\006\"\226\004\n\035TestNestedGroupExtensionOuter\022a"
  "\n\023layer1optionalgroup\030\001 \001(\n2D.protobuf_u"
  "nittest.TestNestedGroupExtensionOuter.La"
  "yer1OptionalGroup\032\221\003\n\023Layer1OptionalGrou"
  "p\022u\n\023layer2repeatedgroup\030\002 \003(\n2X.protobu"
  "f_unittest.TestNestedGroupExtensionOuter"
  ".Layer1OptionalGroup.Layer2RepeatedGroup"
  "\022\223\001\n\"layer2anotheroptionalrepeatedgroup\030"
  "\004 \003(\n2g.protobuf_unittest.TestNestedGrou"
  "pExtensionOuter.Layer1OptionalGroup.Laye"
  "r2AnotherOptionalRepeatedGroup\0322\n\023Layer2"
  "RepeatedGroup\022\025\n\ranother_field\030\006 \001(\t*\004\010\003"
  "\020\004\0329\n\"Layer2AnotherOptionalRepeatedGroup"
  "\022\023\n\013but_why_tho\030\005 \001(\t\"<\n&TestNestedGroup"
  "ExtensionInnerExtension\022\022\n\ninner_name\030\001 "
  "\001(\t\"\321\003\n\033TestExtensionRangeSerialize\022\017\n\007f"
  "oo_one\030\001 \001(\005\022\017\n\007foo_two\030\006 \001(\005\022\021\n\tfoo_thr"
  "ee\030\007 \001(\005\022\020\n\010foo_four\030\r \001(\005*\004\010\002\020\003*\004\010\003\020\005*\004"
  "\010\t\020\013*\004\010\017\020\020*\004\010\021\020\022*\004\010\023\020\0242\?\n\007bar_one\022..prot"
  "obuf_unittest.TestExtensionRangeSerializ"
  "e\030\002 \001(\0052\?\n\007bar_two\022..protobuf_unittest.T"
  "estExtensionRangeSerialize\030\004 \001(\0052A\n\tbar_"
  "three\022..protobuf_unittest.TestExtensionR"
  "angeSerialize\030\n \001(\0052@\n\010bar_four\022..protob"
  "uf_unittest.TestExtensionRangeSerialize\030"
  "\017 \001(\0052@\n\010bar_five\022..protobuf_unittest.Te"
  "stExtensionRangeSerialize\030\023 \001(\005*@\n\013Forei"
  "gnEnum\022\017\n\013FOREIGN_FOO\020\004\022\017\n\013FOREIGN_BAR\020\005"
  "\022\017\n\013FOREIGN_BAZ\020\006*K\n\024TestEnumWithDupValu"
  "e\022\010\n\004FOO1\020\001\022\010\n\004BAR1\020\002\022\007\n\003BAZ\020\003\022\010\n\004FOO2\020\001"
  "\022\010\n\004BAR2\020\002\032\002\020\001*\211\001\n\016TestSparseEnum\022\014\n\010SPA"
  "RSE_A\020{\022\016\n\010SPARSE_B\020\246\347\003\022\017\n\010SPARSE_C\020\262\261\200\006"
  "\022\025\n\010SPARSE_D\020\361\377\377\377\377\377\377\377\377\001\022\025\n\010SPARSE_E\020\264\336\374\377"
  "\377\377\377\377\377\001\022\014\n\010SPARSE_F\020\000\022\014\n\010SPARSE_G\020\002*\213\017\n\rV"
  "eryLargeEnum\022\026\n\022ENUM_LABEL_DEFAULT\020\000\022\020\n\014"
  "ENUM_LABEL_1\020\001\022\020\n\014ENUM_LABEL_2\020\002\022\020\n\014ENUM"
  "_LABEL_3\020\003\022\020\n\014ENUM_LABEL_4\020\004\022\020\n\014ENUM_LAB"
  "EL_5\020\005\022\020\n\014ENUM_LABEL_6\020\006\022\020\n\014ENUM_LABEL_7"
  "\020\007\022\020\n\014ENUM_LABEL_8\020\010\022\020\n\014ENUM_LABEL_9\020\t\022\021"
  "\n\rENUM_LABEL_10\020\n\022\021\n\rENUM_LABEL_11\020\013\022\021\n\r"
  "ENUM_LABEL_12\020\014\022\021\n\rENUM_LABEL_13\020\r\022\021\n\rEN"
  "UM_LABEL_14\020\016\022\021\n\rENUM_LABEL_15\020\017\022\021\n\rENUM"
  "_LABEL_16\020\020\022\021\n\rENUM_LABEL_17\020\021\022\021\n\rENUM_L"
  "ABEL_18\020\022\022\021\n\rENUM_LABEL_19\020\023\022\021\n\rENUM_LAB"
  "EL_20\020\024\022\021\n\rENUM_LABEL_21\020\025\022\021\n\rENUM_LABEL"
  "_22\020\026\022\021\n\rENUM_LABEL_23\020\027\022\021\n\rENUM_LABEL_2"
  "4\020\030\022\021\n\rENUM_LABEL_25\020\031\022\021\n\rENUM_LABEL_26\020"
  "\032\022\021\n\rENUM_LABEL_27\020\033\022\021\n\rENUM_LABEL_28\020\034\022"
  "\021\n\rENUM_LABEL_29\020\035\022\021\n\rENUM_LABEL_30\020\036\022\021\n"
  "\rENUM_LABEL_31\020\037\022\021\n\rENUM_LABEL_32\020 \022\021\n\rE"
  "NUM_LABEL_33\020!\022\021\n\rENUM_LABEL_34\020\"\022\021\n\rENU"
  "M_LABEL_35\020#\022\021\n\rENUM_LABEL_36\020$\022\021\n\rENUM_"
  "LABEL_37\020%\022\021\n\rENUM_LABEL_38\020&\022\021\n\rENUM_LA"
  "BEL_39\020\'\022\021\n\rENUM_LABEL_40\020(\022\021\n\rENUM_LABE"
  "L_41\020)\022\021\n\rENUM_LABEL_42\020*\022\021\n\rENUM_LABEL_"
  "43\020+\022\021\n\rENUM_LABEL_44\020,\022\021\n\rENUM_LABEL_45"
  "\020-\022\021\n\rENUM_LABEL_46\020.\022\021\n\rENUM_LABEL_47\020/"
  "\022\021\n\rENUM_LABEL_48\0200\022\021\n\rENUM_LABEL_49\0201\022\021"
  "\n\rENUM_LABEL_50\0202\022\021\n\rENUM_LABEL_51\0203\022\021\n\r"
  "ENUM_LABEL_52\0204\022\021\n\rENUM_LABEL_53\0205\022\021\n\rEN"
  "UM_LABEL_54\0206\022\021\n\rENUM_LABEL_55\0207\022\021\n\rENUM"
  "_LABEL_56\0208\022\021\n\rENUM_LABEL_57\0209\022\021\n\rENUM_L"
  "ABEL_58\020:\022\021\n\rENUM_LABEL_59\020;\022\021\n\rENUM_LAB"
  "EL_60\020<\022\021\n\rENUM_LABEL_61\020=\022\021\n\rENUM_LABEL"
  "_62\020>\022\021\n\rENUM_LABEL_63\020\?\022\021\n\rENUM_LABEL_6"
  "4\020@\022\021\n\rENUM_LABEL_65\020A\022\021\n\rENUM_LABEL_66\020"
  "B\022\021\n\rENUM_LABEL_67\020C\022\021\n\rENUM_LABEL_68\020D\022"
  "\021\n\rENUM_LABEL_69\020E\022\021\n\rENUM_LABEL_70\020F\022\021\n"
  "\rENUM_LABEL_71\020G\022\021\n\rENUM_LABEL_72\020H\022\021\n\rE"
  "NUM_LABEL_73\020I\022\021\n\rENUM_LABEL_74\020J\022\021\n\rENU"
  "M_LABEL_75\020K\022\021\n\rENUM_LABEL_76\020L\022\021\n\rENUM_"
  "LABEL_77\020M\022\021\n\rENUM_LABEL_78\020N\022\021\n\rENUM_LA"
  "BEL_79\020O\022\021\n\rENUM_LABEL_80\020P\022\021\n\rENUM_LABE"
  "L_81\020Q\022\021\n\rENUM_LABEL_82\020R\022\021\n\rENUM_LABEL_"
  "83\020S\022\021\n\rENUM_LABEL_84\020T\022\021\n\rENUM_LABEL_85"
  "\020U\022\021\n\rENUM_LABEL_86\020V\022\021\n\rENUM_LABEL_87\020W"
  "\022\021\n\rENUM_LABEL_88\020X\022\021\n\rENUM_LABEL_89\020Y\022\021"
  "\n\rENUM_LABEL_90\020Z\022\021\n\rENUM_LABEL_91\020[\022\021\n\r"
  "ENUM_LABEL_92\020\\\022\021\n\rENUM_LABEL_93\020]\022\021\n\rEN"
  "UM_LABEL_94\020^\022\021\n\rENUM_LABEL_95\020_\022\021\n\rENUM"
  "_LABEL_96\020`\022\021\n\rENUM_LABEL_97\020a\022\021\n\rENUM_L"
  "ABEL_98\020b\022\021\n\rENUM_LABEL_99\020c\022\022\n\016ENUM_LAB"
  "EL_100\020d2\231\001\n\013TestService\022D\n\003Foo\022\035.protob"
  "uf_unittest.FooRequest\032\036.protobuf_unitte"
  "st.FooResponse\022D\n\003Bar\022\035.protobuf_unittes"
  "t.BarRequest\032\036.protobuf_unittest.BarResp"
  "onse:F\n\030optional_int32_extension\022$.proto"
  "buf_unittest.TestAllExtensions\030\001 \001(\005:F\n\030"
  "optional_int64_extension\022$.protobuf_unit"
  "test.TestAllExtensions\030\002 \001(\003:G\n\031optional"
  "_uint32_extension\022$.protobuf_unittest.Te"
  "stAllExtensions\030\003 \001(\r:G\n\031optional_uint64"
  "_extension\022$.protobuf_unittest.TestAllEx"
  "tensions\030\004 \001(\004:G\n\031optional_sint32_extens"
  "ion\022$.protobuf_unittest.TestAllExtension"
  "s\030\005 \001(\021:G\n\031optional_sint64_extension\022$.p"
  "rotobuf_unittest.TestAllExtensions\030\006 \001(\022"
  ":H\n\032optional_fixed32_extension\022$.protobu"
  "f_unittest.TestAllExtensions\030\007 \001(\007:H\n\032op"
  "tional_fixed64_extension\022$.protobuf_unit"
  "test.TestAllExtensions\030\010 \001(\006:I\n\033optional"
  "_sfixed32_extension\022$.protobuf_unittest."
  "TestAllExtensions\030\t \001(\017:I\n\033optional_sfix"
  "ed64_extension\022$.protobuf_unittest.TestA"
  "llExtensions\030\n \001(\020:F\n\030optional_float_ext"
  "ension\022$.protobuf_unittest.TestAllExtens"
  "ions\030\013 \001(\002:G\n\031optional_double_extension\022"
  "$.protobuf_unittest.TestAllExtensions\030\014 "
  "\001(\001:E\n\027optional_bool_extension\022$.protobu"
  "f_unittest.TestAllExtensions\030\r \001(\010:G\n\031op"
  "tional_string_extension\022$.protobuf_unitt"
  "est.TestAllExtensions\030\016 \001(\t:F\n\030optional_"
  "bytes_extension\022$.protobuf_unittest.Test"
  "AllExtensions\030\017 \001(\014:q\n\027optionalgroup_ext"
  "ension\022$.protobuf_unittest.TestAllExtens"
  "ions\030\020 \001(\n2*.protobuf_unittest.OptionalG"
  "roup_extension:~\n!optional_nested_messag"
  "e_extension\022$.protobuf_unittest.TestAllE"
  "xtensions\030\022 \001(\0132-.protobuf_unittest.Test"
  "AllTypes.NestedMessage:s\n\"optional_forei"
  "gn_message_extension\022$.protobuf_unittest"
  ".TestAllExtensions\030\023 \001(\0132!.protobuf_unit"
  "test.ForeignMessage:x\n!optional_import_m"
  "essage_extension\022$.protobuf_unittest.Tes"
  "tAllExtensions\030\024 \001(\0132\'.protobuf_unittest"
  "_import.ImportMessage:x\n\036optional_nested"
  "_enum_extension\022$.protobuf_unittest.Test"
  "AllExtensions\030\025 \001(\0162*.protobuf_unittest."
  "TestAllTypes.NestedEnum:m\n\037optional_fore"
  "ign_enum_extension\022$.protobuf_unittest.T"
  "estAllExtensions\030\026 \001(\0162\036.protobuf_unitte"
  "st.ForeignEnum:r\n\036optional_import_enum_e"
  "xtension\022$.protobuf_unittest.TestAllExte"
  "nsions\030\027 \001(\0162$.protobuf_unittest_import."
  "ImportEnum:Q\n\037optional_string_piece_exte"
  "nsion\022$.protobuf_unittest.TestAllExtensi"
  "ons\030\030 \001(\tB\002\010\002:I\n\027optional_cord_extension"
  "\022$.protobuf_unittest.TestAllExtensions\030\031"
  " \001(\tB\002\010\001:\205\001\n(optional_public_import_mess"
  "age_extension\022$.protobuf_unittest.TestAl"
  "lExtensions\030\032 \001(\0132-.protobuf_unittest_im"
  "port.PublicImportMessage:\200\001\n\037optional_la"
  "zy_message_extension\022$.protobuf_unittest"
  ".TestAllExtensions\030\033 \001(\0132-.protobuf_unit"
  "test.TestAllTypes.NestedMessageB\002(\001:F\n\030r"
  "epeated_int32_extension\022$.protobuf_unitt"
  "est.TestAllExtensions\030\037 \003(\005:F\n\030repeated_"
  "int64_extension\022$.protobuf_unittest.Test"
  "AllExtensions\030  \003(\003:G\n\031repeated_uint32_e"
  "xtension\022$.protobuf_unittest.TestAllExte"
  "nsions\030! \003(\r:G\n\031repeated_uint64_extensio"
  "n\022$.protobuf_unittest.TestAllExtensions\030"
  "\" \003(\004:G\n\031repeated_sint32_extension\022$.pro"
  "tobuf_unittest.TestAllExtensions\030# \003(\021:G"
  "\n\031repeated_sint64_extension\022$.protobuf_u"
  "nittest.TestAllExtensions\030$ \003(\022:H\n\032repea"
  "ted_fixed32_extension\022$.protobuf_unittes"
  "t.TestAllExtensions\030% \003(\007:H\n\032repeated_fi"
  "xed64_extension\022$.protobuf_unittest.Test"
  "AllExtensions\030& \003(\006:I\n\033repeated_sfixed32"
  "_extension\022$.protobuf_unittest.TestAllEx"
  "tensions\030\' \003(\017:I\n\033repeated_sfixed64_exte"
  "nsion\022$.protobuf_unittest.TestAllExtensi"
  "ons\030( \003(\020:F\n\030repeated_float_extension\022$."
  "protobuf_unittest.TestAllExtensions\030) \003("
  "\002:G\n\031repeated_double_extension\022$.protobu"
  "f_unittest.TestAllExtensions\030* \003(\001:E\n\027re"
  "peated_bool_extension\022$.protobuf_unittes"
  "t.TestAllExtensions\030+ \003(\010:G\n\031repeated_st"
  "ring_extension\022$.protobuf_unittest.TestA"
  "llExtensions\030, \003(\t:F\n\030repeated_bytes_ext"
  "ension\022$.protobuf_unittest.TestAllExtens"
  "ions\030- \003(\014:q\n\027repeatedgroup_extension\022$."
  "protobuf_unittest.TestAllExtensions\030. \003("
  "\n2*.protobuf_unittest.RepeatedGroup_exte"
  "nsion:~\n!repeated_nested_message_extensi"
  "on\022$.protobuf_unittest.TestAllExtensions"
  "\0300 \003(\0132-.protobuf_unittest.TestAllTypes."
  "NestedMessage:s\n\"repeated_foreign_messag"
  "e_extension\022$.protobuf_unittest.TestAllE"
  "xtensions\0301 \003(\0132!.protobuf_unittest.Fore"
  "ignMessage:x\n!repeated_import_message_ex"
  "tension\022$.protobuf_unittest.TestAllExten"
  "sions\0302 \003(\0132\'.protobuf_unittest_import.I"
  "mportMessage:x\n\036repeated_nested_enum_ext"
  "ension\022$.protobuf_unittest.TestAllExtens"
  "ions\0303 \003(\0162*.protobuf_unittest.TestAllTy"
  "pes.NestedEnum:m\n\037repeated_foreign_enum_"
  "extension\022$.protobuf_unittest.TestAllExt"
  "ensions\0304 \003(\0162\036.protobuf_unittest.Foreig"
  "nEnum:r\n\036repeated_import_enum_extension\022"
  "$.protobuf_unittest.TestAllExtensions\0305 "
  "\003(\0162$.protobuf_unittest_import.ImportEnu"
  "m:Q\n\037repeated_string_piece_extension\022$.p"
  "rotobuf_unittest.TestAllExtensions\0306 \003(\t"
  "B\002\010\002:I\n\027repeated_cord_extension\022$.protob"
  "uf_unittest.TestAllExtensions\0307 \003(\tB\002\010\001:"
  "\200\001\n\037repeated_lazy_message_extension\022$.pr"
  "otobuf_unittest.TestAllExtensions\0309 \003(\0132"
  "-.protobuf_unittest.TestAllTypes.NestedM"
  "essageB\002(\001:I\n\027default_int32_extension\022$."
  "protobuf_unittest.TestAllExtensions\030= \001("
  "\005:\00241:I\n\027default_int64_extension\022$.proto"
  "buf_unittest.TestAllExtensions\030> \001(\003:\00242"
  ":J\n\030default_uint32_extension\022$.protobuf_"
  "unittest.TestAllExtensions\030\? \001(\r:\00243:J\n\030"
  "default_uint64_extension\022$.protobuf_unit"
  "test.TestAllExtensions\030@ \001(\004:\00244:K\n\030defa"
  "ult_sint32_extension\022$.protobuf_unittest"
  ".TestAllExtensions\030A \001(\021:\003-45:J\n\030default"
  "_sint64_extension\022$.protobuf_unittest.Te"
  "stAllExtensions\030B \001(\022:\00246:K\n\031default_fix"
  "ed32_extension\022$.protobuf_unittest.TestA"
  "llExtensions\030C \001(\007:\00247:K\n\031default_fixed6"
  "4_extension\022$.protobuf_unittest.TestAllE"
  "xtensions\030D \001(\006:\00248:L\n\032default_sfixed32_"
  "extension\022$.protobuf_unittest.TestAllExt"
  "ensions\030E \001(\017:\00249:M\n\032default_sfixed64_ex"
  "tension\022$.protobuf_unittest.TestAllExten"
  "sions\030F \001(\020:\003-50:K\n\027default_float_extens"
  "ion\022$.protobuf_unittest.TestAllExtension"
  "s\030G \001(\002:\00451.5:M\n\030default_double_extensio"
  "n\022$.protobuf_unittest.TestAllExtensions\030"
  "H \001(\001:\00552000:J\n\026default_bool_extension\022$"
  ".protobuf_unittest.TestAllExtensions\030I \001"
  "(\010:\004true:M\n\030default_string_extension\022$.p"
  "rotobuf_unittest.TestAllExtensions\030J \001(\t"
  ":\005hello:L\n\027default_bytes_extension\022$.pro"
  "tobuf_unittest.TestAllExtensions\030K \001(\014:\005"
  "world:|\n\035default_nested_enum_extension\022$"
  ".protobuf_unittest.TestAllExtensions\030Q \001"
  "(\0162*.protobuf_unittest.TestAllTypes.Nest"
  "edEnum:\003BAR:y\n\036default_foreign_enum_exte"
  "nsion\022$.protobuf_unittest.TestAllExtensi"
  "ons\030R \001(\0162\036.protobuf_unittest.ForeignEnu"
  "m:\013FOREIGN_BAR:}\n\035default_import_enum_ex"
  "tension\022$.protobuf_unittest.TestAllExten"
  "sions\030S \001(\0162$.protobuf_unittest_import.I"
  "mportEnum:\nIMPORT_BAR:U\n\036default_string_"
  "piece_extension\022$.protobuf_unittest.Test"
  "AllExtensions\030T \001(\t:\003abcB\002\010\002:M\n\026default_"
  "cord_extension\022$.protobuf_unittest.TestA"
  "llExtensions\030U \001(\t:\003123B\002\010\001:D\n\026oneof_uin"
  "t32_extension\022$.protobuf_unittest.TestAl"
  "lExtensions\030o \001(\r:{\n\036oneof_nested_messag"
  "e_extension\022$.protobuf_unittest.TestAllE"
  "xtensions\030p \001(\0132-.protobuf_unittest.Test"
  "AllTypes.NestedMessage:D\n\026oneof_string_e"
  "xtension\022$.protobuf_unittest.TestAllExte"
  "nsions\030q \001(\t:C\n\025oneof_bytes_extension\022$."
  "protobuf_unittest.TestAllExtensions\030r \001("
  "\014:B\n\023my_extension_string\022%.protobuf_unit"
  "test.TestFieldOrderings\0302 \001(\t:\?\n\020my_exte"
  "nsion_int\022%.protobuf_unittest.TestFieldO"
  "rderings\030\005 \001(\005:K\n\026packed_int32_extension"
  "\022\'.protobuf_unittest.TestPackedExtension"
  "s\030Z \003(\005B\002\020\001:K\n\026packed_int64_extension\022\'."
  "protobuf_unittest.TestPackedExtensions\030["
  " \003(\003B\002\020\001:L\n\027packed_uint32_extension\022\'.pr"
  "otobuf_unittest.TestPackedExtensions\030\\ \003"
  "(\rB\002\020\001:L\n\027packed_uint64_extension\022\'.prot"
  "obuf_unittest.TestPackedExtensions\030] \003(\004"
  "B\002\020\001:L\n\027packed_sint32_extension\022\'.protob"
  "uf_unittest.TestPackedExtensions\030^ \003(\021B\002"
  "\020\001:L\n\027packed_sint64_extension\022\'.protobuf"
  "_unittest.TestPackedExtensions\030_ \003(\022B\002\020\001"
  ":M\n\030packed_fixed32_extension\022\'.protobuf_"
  "unittest.TestPackedExtensions\030` \003(\007B\002\020\001:"
  "M\n\030packed_fixed64_extension\022\'.protobuf_u"
  "nittest.TestPackedExtensions\030a \003(\006B\002\020\001:N"
  "\n\031packed_sfixed32_extension\022\'.protobuf_u"
  "nittest.TestPackedExtensions\030b \003(\017B\002\020\001:N"
  "\n\031packed_sfixed64_extension\022\'.protobuf_u"
  "nittest.TestPackedExtensions\030c \003(\020B\002\020\001:K"
  "\n\026packed_float_extension\022\'.protobuf_unit"
  "test.TestPackedExtensions\030d \003(\002B\002\020\001:L\n\027p"
  "acked_double_extension\022\'.protobuf_unitte"
  "st.TestPackedExtensions\030e \003(\001B\002\020\001:J\n\025pac"
  "ked_bool_extension\022\'.protobuf_unittest.T"
  "estPackedExtensions\030f \003(\010B\002\020\001:j\n\025packed_"
  "enum_extension\022\'.protobuf_unittest.TestP"
  "ackedExtensions\030g \003(\0162\036.protobuf_unittes"
  "t.ForeignEnumB\002\020\001:O\n\030unpacked_int32_exte"
  "nsion\022).protobuf_unittest.TestUnpackedEx"
  "tensions\030Z \003(\005B\002\020\000:O\n\030unpacked_int64_ext"
  "ension\022).protobuf_unittest.TestUnpackedE"
  "xtensions\030[ \003(\003B\002\020\000:P\n\031unpacked_uint32_e"
  "xtension\022).protobuf_unittest.TestUnpacke"
  "dExtensions\030\\ \003(\rB\002\020\000:P\n\031unpacked_uint64"
  "_extension\022).protobuf_unittest.TestUnpac"
  "kedExtensions\030] \003(\004B\002\020\000:P\n\031unpacked_sint"
  "32_extension\022).protobuf_unittest.TestUnp"
  "ackedExtensions\030^ \003(\021B\002\020\000:P\n\031unpacked_si"
  "nt64_extension\022).protobuf_unittest.TestU"
  "npackedExtensions\030_ \003(\022B\002\020\000:Q\n\032unpacked_"
  "fixed32_extension\022).protobuf_unittest.Te"
  "stUnpackedExtensions\030` \003(\007B\002\020\000:Q\n\032unpack"
  "ed_fixed64_extension\022).protobuf_unittest"
  ".TestUnpackedExtensions\030a \003(\006B\002\020\000:R\n\033unp"
  "acked_sfixed32_extension\022).protobuf_unit"
  "test.TestUnpackedExtensions\030b \003(\017B\002\020\000:R\n"
  "\033unpacked_sfixed64_extension\022).protobuf_"
  "unittest.TestUnpackedExtensions\030c \003(\020B\002\020"
  "\000:O\n\030unpacked_float_extension\022).protobuf"
  "_unittest.TestUnpackedExtensions\030d \003(\002B\002"
  "\020\000:P\n\031unpacked_double_extension\022).protob"
  "uf_unittest.TestUnpackedExtensions\030e \003(\001"
  "B\002\020\000:N\n\027unpacked_bool_extension\022).protob"
  "uf_unittest.TestUnpackedExtensions\030f \003(\010"
  "B\002\020\000:n\n\027unpacked_enum_extension\022).protob"
  "uf_unittest.TestUnpackedExtensions\030g \003(\016"
  "2\036.protobuf_unittest.ForeignEnumB\002\020\000:d\n\016"
  "test_all_types\022\'.protobuf_unittest.TestH"
  "ugeFieldNumbers\030\340\252\377\377\001 \001(\0132\037.protobuf_uni"
  "ttest.TestAllTypes:Z\n%test_extension_ins"
  "ide_table_extension\022+.protobuf_unittest."
  "TestExtensionInsideTable\030\005 \001(\005:\242\001\n\005inner"
  "\022X.protobuf_unittest.TestNestedGroupExte"
  "nsionOuter.Layer1OptionalGroup.Layer2Rep"
  "eatedGroup\030\003 \001(\01329.protobuf_unittest.Tes"
  "tNestedGroupExtensionInnerExtensionB\035B\rU"
  "nittestProtoH\001\200\001\001\210\001\001\220\001\001\370\001\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2funittest_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2funittest_5fimport_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2funittest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2funittest_2eproto = {
    false, false, 30306, descriptor_table_protodef_google_2fprotobuf_2funittest_2eproto,
    "google/protobuf/unittest.proto",
    &descriptor_table_google_2fprotobuf_2funittest_2eproto_once, descriptor_table_google_2fprotobuf_2funittest_2eproto_deps, 1, 111,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2funittest_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2funittest_2eproto, file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2funittest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2funittest_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2funittest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2funittest_2eproto(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
namespace protobuf_unittest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypes_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[0];
}
bool TestAllTypes_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestAllTypes_NestedEnum TestAllTypes::FOO;
constexpr TestAllTypes_NestedEnum TestAllTypes::BAR;
constexpr TestAllTypes_NestedEnum TestAllTypes::BAZ;
constexpr TestAllTypes_NestedEnum TestAllTypes::NEG;
constexpr TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MIN;
constexpr TestAllTypes_NestedEnum TestAllTypes::NestedEnum_MAX;
constexpr int TestAllTypes::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestOneof2_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[1];
}
bool TestOneof2_NestedEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestOneof2_NestedEnum TestOneof2::FOO;
constexpr TestOneof2_NestedEnum TestOneof2::BAR;
constexpr TestOneof2_NestedEnum TestOneof2::BAZ;
constexpr TestOneof2_NestedEnum TestOneof2::NestedEnum_MIN;
constexpr TestOneof2_NestedEnum TestOneof2::NestedEnum_MAX;
constexpr int TestOneof2::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestDynamicExtensions_DynamicEnumType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[2];
}
bool TestDynamicExtensions_DynamicEnumType_IsValid(int value) {
  switch (value) {
    case 2200:
    case 2201:
    case 2202:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DYNAMIC_FOO;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DYNAMIC_BAR;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DYNAMIC_BAZ;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DynamicEnumType_MIN;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::DynamicEnumType_MAX;
constexpr int TestDynamicExtensions::DynamicEnumType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForeignEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[3];
}
bool ForeignEnum_IsValid(int value) {
  switch (value) {
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnumWithDupValue_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[4];
}
bool TestEnumWithDupValue_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestSparseEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[5];
}
bool TestSparseEnum_IsValid(int value) {
  switch (value) {
    case -53452:
    case -15:
    case 0:
    case 2:
    case 123:
    case 62374:
    case 12589234:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VeryLargeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_2eproto[6];
}
bool VeryLargeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TestAllTypes_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypes_NestedMessage>()._has_bits_);
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypes.NestedMessage)
}
TestAllTypes_NestedMessage::TestAllTypes_NestedMessage(const TestAllTypes_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bb_ = from.bb_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypes.NestedMessage)
}

inline void TestAllTypes_NestedMessage::SharedCtor() {
bb_ = 0;
}

TestAllTypes_NestedMessage::~TestAllTypes_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypes.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypes_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypes_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypes_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypes.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bb_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypes_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypes_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypes.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypes.NestedMessage)
  return target;
}

size_t TestAllTypes_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypes.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 bb = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bb());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypes_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestAllTypes_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypes_NestedMessage::GetClassData() const { return &_class_data_; }

void TestAllTypes_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestAllTypes_NestedMessage *>(to)->MergeFrom(
      static_cast<const TestAllTypes_NestedMessage &>(from));
}


void TestAllTypes_NestedMessage::MergeFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypes.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bb()) {
    _internal_set_bb(from._internal_bb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypes_NestedMessage::CopyFrom(const TestAllTypes_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypes.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_NestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypes_NestedMessage::InternalSwap(TestAllTypes_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[0]);
}

// ===================================================================

class TestAllTypes_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypes_OptionalGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypes_OptionalGroup::TestAllTypes_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypes.OptionalGroup)
}
TestAllTypes_OptionalGroup::TestAllTypes_OptionalGroup(const TestAllTypes_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypes.OptionalGroup)
}

inline void TestAllTypes_OptionalGroup::SharedCtor() {
a_ = 0;
}

TestAllTypes_OptionalGroup::~TestAllTypes_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypes.OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypes_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypes_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypes_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypes_OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypes_OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypes.OptionalGroup)
  return target;
}

size_t TestAllTypes_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypes_OptionalGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestAllTypes_OptionalGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypes_OptionalGroup::GetClassData() const { return &_class_data_; }

void TestAllTypes_OptionalGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestAllTypes_OptionalGroup *>(to)->MergeFrom(
      static_cast<const TestAllTypes_OptionalGroup &>(from));
}


void TestAllTypes_OptionalGroup::MergeFrom(const TestAllTypes_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypes_OptionalGroup::CopyFrom(const TestAllTypes_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypes.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_OptionalGroup::IsInitialized() const {
  return true;
}

void TestAllTypes_OptionalGroup::InternalSwap(TestAllTypes_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes_OptionalGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[1]);
}

// ===================================================================

class TestAllTypes_RepeatedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypes_RepeatedGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypes_RepeatedGroup::TestAllTypes_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypes.RepeatedGroup)
}
TestAllTypes_RepeatedGroup::TestAllTypes_RepeatedGroup(const TestAllTypes_RepeatedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypes.RepeatedGroup)
}

inline void TestAllTypes_RepeatedGroup::SharedCtor() {
a_ = 0;
}

TestAllTypes_RepeatedGroup::~TestAllTypes_RepeatedGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypes.RepeatedGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypes_RepeatedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypes_RepeatedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypes_RepeatedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypes_RepeatedGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypes_RepeatedGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypes.RepeatedGroup)
  return target;
}

size_t TestAllTypes_RepeatedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 47;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypes_RepeatedGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestAllTypes_RepeatedGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypes_RepeatedGroup::GetClassData() const { return &_class_data_; }

void TestAllTypes_RepeatedGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestAllTypes_RepeatedGroup *>(to)->MergeFrom(
      static_cast<const TestAllTypes_RepeatedGroup &>(from));
}


void TestAllTypes_RepeatedGroup::MergeFrom(const TestAllTypes_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypes_RepeatedGroup::CopyFrom(const TestAllTypes_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypes.RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes_RepeatedGroup::IsInitialized() const {
  return true;
}

void TestAllTypes_RepeatedGroup::InternalSwap(TestAllTypes_RepeatedGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes_RepeatedGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[2]);
}

// ===================================================================

class TestAllTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypes>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_optional_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_optional_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_optional_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_optional_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_optional_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_optional_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_optional_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_optional_double(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestAllTypes_OptionalGroup& optionalgroup(const TestAllTypes* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::protobuf_unittest::TestAllTypes_NestedMessage& optional_nested_message(const TestAllTypes* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::protobuf_unittest::ForeignMessage& optional_foreign_message(const TestAllTypes* msg);
  static void set_has_optional_foreign_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::protobuf_unittest_import::ImportMessage& optional_import_message(const TestAllTypes* msg);
  static void set_has_optional_import_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_optional_nested_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_optional_foreign_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_optional_import_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_optional_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest_import::PublicImportMessage& optional_public_import_message(const TestAllTypes* msg);
  static void set_has_optional_public_import_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::protobuf_unittest::TestAllTypes_NestedMessage& optional_lazy_message(const TestAllTypes* msg);
  static void set_has_optional_lazy_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_default_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_default_int64(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_default_uint32(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_default_uint64(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_default_sint32(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_default_sint64(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_default_fixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_default_fixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_default_sfixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_default_sfixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_default_float(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_default_double(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_default_bool(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_default_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_nested_enum(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_default_foreign_enum(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_default_import_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_default_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::protobuf_unittest::TestAllTypes_NestedMessage& oneof_nested_message(const TestAllTypes* msg);
};

const ::protobuf_unittest::TestAllTypes_OptionalGroup&
TestAllTypes::_Internal::optionalgroup(const TestAllTypes* msg) {
  return *msg->optionalgroup_;
}
const ::protobuf_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::optional_nested_message(const TestAllTypes* msg) {
  return *msg->optional_nested_message_;
}
const ::protobuf_unittest::ForeignMessage&
TestAllTypes::_Internal::optional_foreign_message(const TestAllTypes* msg) {
  return *msg->optional_foreign_message_;
}
const ::protobuf_unittest_import::ImportMessage&
TestAllTypes::_Internal::optional_import_message(const TestAllTypes* msg) {
  return *msg->optional_import_message_;
}
const ::protobuf_unittest_import::PublicImportMessage&
TestAllTypes::_Internal::optional_public_import_message(const TestAllTypes* msg) {
  return *msg->optional_public_import_message_;
}
const ::protobuf_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::optional_lazy_message(const TestAllTypes* msg) {
  return *msg->optional_lazy_message_;
}
const ::protobuf_unittest::TestAllTypes_NestedMessage&
TestAllTypes::_Internal::oneof_nested_message(const TestAllTypes* msg) {
  return *msg->oneof_field_.oneof_nested_message_;
}
void TestAllTypes::clear_optional_import_message() {
  if (optional_import_message_ != nullptr) optional_import_message_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void TestAllTypes::clear_optional_public_import_message() {
  if (optional_public_import_message_ != nullptr) optional_public_import_message_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void TestAllTypes::clear_repeated_import_message() {
  repeated_import_message_.Clear();
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_{{{"hello", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_{{{"world", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_{{{"abc", 3}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_{{{"123", 3}}, {nullptr}};
void TestAllTypes::set_allocated_oneof_nested_message(::protobuf_unittest::TestAllTypes_NestedMessage* oneof_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_nested_message);
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.oneof_nested_message)
}
TestAllTypes::TestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_sint32_(arena),
  repeated_sint64_(arena),
  repeated_fixed32_(arena),
  repeated_fixed64_(arena),
  repeated_sfixed32_(arena),
  repeated_sfixed64_(arena),
  repeated_float_(arena),
  repeated_double_(arena),
  repeated_bool_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeatedgroup_(arena),
  repeated_nested_message_(arena),
  repeated_foreign_message_(arena),
  repeated_import_message_(arena),
  repeated_nested_enum_(arena),
  repeated_foreign_enum_(arena),
  repeated_import_enum_(arena),
  repeated_string_piece_(arena),
  repeated_cord_(arena),
  repeated_lazy_message_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypes)
}
TestAllTypes::TestAllTypes(const TestAllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeatedgroup_(from.repeatedgroup_),
      repeated_nested_message_(from.repeated_nested_message_),
      repeated_foreign_message_(from.repeated_foreign_message_),
      repeated_import_message_(from.repeated_import_message_),
      repeated_nested_enum_(from.repeated_nested_enum_),
      repeated_foreign_enum_(from.repeated_foreign_enum_),
      repeated_import_enum_(from.repeated_import_enum_),
      repeated_string_piece_(from.repeated_string_piece_),
      repeated_cord_(from.repeated_cord_),
      repeated_lazy_message_(from.repeated_lazy_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string()) {
    optional_string_.Set(from._internal_optional_string(), 
      GetArenaForAllocation());
  }
  optional_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(from._internal_optional_bytes(), 
      GetArenaForAllocation());
  }
  optional_string_piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_string_piece_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string_piece()) {
    optional_string_piece_.Set(from._internal_optional_string_piece(), 
      GetArenaForAllocation());
  }
  optional_cord_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_cord_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_cord()) {
    optional_cord_.Set(from._internal_optional_cord(), 
      GetArenaForAllocation());
  }
  default_string_.InitDefault();
  if (from._internal_has_default_string()) {
    default_string_.Set(from._internal_default_string(), 
      GetArenaForAllocation());
  }
  default_bytes_.InitDefault();
  if (from._internal_has_default_bytes()) {
    default_bytes_.Set(from._internal_default_bytes(), 
      GetArenaForAllocation());
  }
  default_string_piece_.InitDefault();
  if (from._internal_has_default_string_piece()) {
    default_string_piece_.Set(from._internal_default_string_piece(), 
      GetArenaForAllocation());
  }
  default_cord_.InitDefault();
  if (from._internal_has_default_cord()) {
    default_cord_.Set(from._internal_default_cord(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestAllTypes_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_unittest::TestAllTypes_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  if (from._internal_has_optional_foreign_message()) {
    optional_foreign_message_ = new ::protobuf_unittest::ForeignMessage(*from.optional_foreign_message_);
  } else {
    optional_foreign_message_ = nullptr;
  }
  if (from._internal_has_optional_import_message()) {
    optional_import_message_ = new ::protobuf_unittest_import::ImportMessage(*from.optional_import_message_);
  } else {
    optional_import_message_ = nullptr;
  }
  if (from._internal_has_optional_public_import_message()) {
    optional_public_import_message_ = new ::protobuf_unittest_import::PublicImportMessage(*from.optional_public_import_message_);
  } else {
    optional_public_import_message_ = nullptr;
  }
  if (from._internal_has_optional_lazy_message()) {
    optional_lazy_message_ = new ::protobuf_unittest::TestAllTypes_NestedMessage(*from.optional_lazy_message_);
  } else {
    optional_lazy_message_ = nullptr;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_foreign_enum_) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(default_foreign_enum_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypes)
}

inline void TestAllTypes::SharedCtor() {
optional_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_bytes_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_bytes_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_string_piece_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_string_piece_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_cord_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_cord_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
default_string_.InitDefault();
default_bytes_.InitDefault();
default_string_piece_.InitDefault();
default_cord_.InitDefault();
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optionalgroup_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&optional_bool_) -
    reinterpret_cast<char*>(&optionalgroup_)) + sizeof(optional_bool_));
default_import_enum_ = 8;
optional_nested_enum_ = 1;
optional_foreign_enum_ = 4;
optional_import_enum_ = 7;
default_int32_ = 41;
default_int64_ = int64_t{42};
default_uint64_ = uint64_t{44u};
default_uint32_ = 43u;
default_sint32_ = -45;
default_sint64_ = int64_t{46};
default_fixed64_ = uint64_t{48u};
default_fixed32_ = 47u;
default_sfixed32_ = 49;
default_sfixed64_ = int64_t{-50};
default_double_ = 52000;
default_float_ = 51.5f;
default_bool_ = true;
default_nested_enum_ = 2;
default_foreign_enum_ = 5;
clear_has_oneof_field();
}

TestAllTypes::~TestAllTypes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  optional_string_.Destroy();
  optional_bytes_.Destroy();
  optional_string_piece_.Destroy();
  optional_cord_.Destroy();
  default_string_.Destroy();
  default_bytes_.Destroy();
  default_string_piece_.Destroy();
  default_cord_.Destroy();
  if (this != internal_default_instance()) delete optionalgroup_;
  if (this != internal_default_instance()) delete optional_nested_message_;
  if (this != internal_default_instance()) delete optional_foreign_message_;
  if (this != internal_default_instance()) delete optional_import_message_;
  if (this != internal_default_instance()) delete optional_public_import_message_;
  if (this != internal_default_instance()) delete optional_lazy_message_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypes::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestAllTypes)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_field_.oneof_nested_message_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy();
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy();
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeatedgroup_.Clear();
  repeated_nested_message_.Clear();
  repeated_foreign_message_.Clear();
  repeated_import_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_foreign_enum_.Clear();
  repeated_import_enum_.Clear();
  repeated_string_piece_.Clear();
  repeated_cord_.Clear();
  repeated_lazy_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      optional_string_piece_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      optional_cord_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      default_string_.ClearToDefault(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      default_bytes_.ClearToDefault(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      default_string_piece_.ClearToDefault(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      default_cord_.ClearToDefault(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(optional_nested_message_ != nullptr);
      optional_nested_message_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(optional_foreign_message_ != nullptr);
      optional_foreign_message_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(optional_import_message_ != nullptr);
      optional_import_message_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(optional_public_import_message_ != nullptr);
      optional_public_import_message_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(optional_lazy_message_ != nullptr);
      optional_lazy_message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&optional_int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_int32_) -
        reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_int32_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&optional_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_sfixed32_) -
        reinterpret_cast<char*>(&optional_uint32_)) + sizeof(optional_sfixed32_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&optional_float_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_bool_) -
        reinterpret_cast<char*>(&optional_float_)) + sizeof(optional_bool_));
    default_import_enum_ = 8;
    optional_nested_enum_ = 1;
    optional_foreign_enum_ = 4;
    optional_import_enum_ = 7;
    default_int32_ = 41;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    default_int64_ = int64_t{42};
    default_uint64_ = uint64_t{44u};
    default_uint32_ = 43u;
    default_sint32_ = -45;
    default_sint64_ = int64_t{46};
    default_fixed64_ = uint64_t{48u};
    default_fixed32_ = 47u;
    default_sfixed32_ = 49;
  }
  if (cached_has_bits & 0x00003f00u) {
    default_sfixed64_ = int64_t{-50};
    default_double_ = 52000;
    default_float_ = 51.5f;
    default_bool_ = true;
    default_nested_enum_ = 2;
    default_foreign_enum_ = 5;
  }
  clear_oneof_field();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_optional_int32(&_has_bits_);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 optional_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_optional_int64(&_has_bits_);
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 optional_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_optional_uint32(&_has_bits_);
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_optional_uint64(&_has_bits_);
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 optional_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_optional_sint32(&_has_bits_);
          optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 optional_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_optional_sint64(&_has_bits_);
          optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 optional_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_optional_fixed32(&_has_bits_);
          optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 optional_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_optional_fixed64(&_has_bits_);
          optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 optional_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_optional_sfixed32(&_has_bits_);
          optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 optional_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_optional_sfixed64(&_has_bits_);
          optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional float optional_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_optional_float(&_has_bits_);
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double optional_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_optional_double(&_has_bits_);
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool optional_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_optional_bool(&_has_bits_);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.optional_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group OptionalGroup = 16 { ... };
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 131)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 131);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_foreign_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_import_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(val))) {
            _internal_set_optional_nested_enum(static_cast<::protobuf_unittest::TestAllTypes_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_optional_foreign_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnum_IsValid(val))) {
            _internal_set_optional_import_enum(static_cast<::protobuf_unittest_import::ImportEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_optional_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.optional_string_piece");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string optional_cord = 25 [ctype = CORD];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_optional_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.optional_cord");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_public_import_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_lazy_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<301>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<305>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
            ptr += sizeof(int32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<317>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
            ptr += sizeof(int64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<321>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float repeated_float = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<333>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double repeated_double = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<337>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<344>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.repeated_string");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated group RepeatedGroup = 46 { ... };
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 115)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_repeatedgroup(), ptr, 371);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<371>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_foreign_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_import_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(val))) {
              _internal_add_repeated_nested_enum(static_cast<::protobuf_unittest::TestAllTypes_NestedEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<408>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_nested_enum(), ptr, ctx, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid, &_internal_metadata_, 51);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
              _internal_add_repeated_foreign_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<416>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_foreign_enum(), ptr, ctx, ::protobuf_unittest::ForeignEnum_IsValid, &_internal_metadata_, 52);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnum_IsValid(val))) {
              _internal_add_repeated_import_enum(static_cast<::protobuf_unittest_import::ImportEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<424>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_import_enum(), ptr, ctx, ::protobuf_unittest_import::ImportEnum_IsValid, &_internal_metadata_, 53);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string_piece();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.repeated_string_piece");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_cord = 55 [ctype = CORD];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_cord();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.repeated_cord");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_lazy_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 default_int32 = 61 [default = 41];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_default_int32(&_has_bits_);
          default_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 default_int64 = 62 [default = 42];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_default_int64(&_has_bits_);
          default_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 default_uint32 = 63 [default = 43];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_default_uint32(&_has_bits_);
          default_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 default_uint64 = 64 [default = 44];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_default_uint64(&_has_bits_);
          default_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 default_sint32 = 65 [default = -45];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_default_sint32(&_has_bits_);
          default_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 default_sint64 = 66 [default = 46];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_default_sint64(&_has_bits_);
          default_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 default_fixed32 = 67 [default = 47];
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_default_fixed32(&_has_bits_);
          default_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 default_fixed64 = 68 [default = 48];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_default_fixed64(&_has_bits_);
          default_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 default_sfixed32 = 69 [default = 49];
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_default_sfixed32(&_has_bits_);
          default_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 default_sfixed64 = 70 [default = -50];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_default_sfixed64(&_has_bits_);
          default_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional float default_float = 71 [default = 51.5];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_default_float(&_has_bits_);
          default_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double default_double = 72 [default = 52000];
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_default_double(&_has_bits_);
          default_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool default_bool = 73 [default = true];
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_default_bool(&_has_bits_);
          default_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string default_string = 74 [default = "hello"];
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_default_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.default_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes default_bytes = 75 [default = "world"];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_default_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(val))) {
            _internal_set_default_nested_enum(static_cast<::protobuf_unittest::TestAllTypes_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(81, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_default_foreign_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(82, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnum_IsValid(val))) {
            _internal_set_default_import_enum(static_cast<::protobuf_unittest_import::ImportEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(83, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_default_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.default_string_piece");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string default_cord = 85 [default = "123", ctype = CORD];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_default_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.default_cord");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestAllTypes.oneof_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 1;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // optional int64 optional_int64 = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // optional uint32 optional_uint32 = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // optional uint64 optional_uint64 = 4;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // optional sint32 optional_sint32 = 5;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_optional_sint32(), target);
  }

  // optional sint64 optional_sint64 = 6;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(6, this->_internal_optional_sint64(), target);
  }

  // optional fixed32 optional_fixed32 = 7;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_optional_fixed32(), target);
  }

  // optional fixed64 optional_fixed64 = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_optional_fixed64(), target);
  }

  // optional sfixed32 optional_sfixed32 = 9;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_optional_sfixed32(), target);
  }

  // optional sfixed64 optional_sfixed64 = 10;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_optional_sfixed64(), target);
  }

  // optional float optional_float = 11;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_optional_float(), target);
  }

  // optional double optional_double = 12;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_optional_double(), target);
  }

  // optional bool optional_bool = 13;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_optional_bool(), target);
  }

  // optional string optional_string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.optional_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_optional_bytes(), target);
  }

  // optional group OptionalGroup = 16 { ... };
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        16, _Internal::optionalgroup(this), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::optional_nested_message(this),
        _Internal::optional_nested_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::optional_foreign_message(this),
        _Internal::optional_foreign_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::optional_import_message(this),
        _Internal::optional_import_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_optional_nested_enum(), target);
  }

  // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  // optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_optional_import_enum(), target);
  }

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string_piece().data(), static_cast<int>(this->_internal_optional_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.optional_string_piece");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_optional_string_piece(), target);
  }

  // optional string optional_cord = 25 [ctype = CORD];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_cord().data(), static_cast<int>(this->_internal_optional_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.optional_cord");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_optional_cord(), target);
  }

  // optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::optional_public_import_message(this),
        _Internal::optional_public_import_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::optional_lazy_message(this),
        _Internal::optional_lazy_message(this).GetCachedSize(), target, stream);
  }

  // repeated int32 repeated_int32 = 31;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 32;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 33;
  for (int i = 0, n = this->_internal_repeated_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 34;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_repeated_uint64(i), target);
  }

  // repeated sint32 repeated_sint32 = 35;
  for (int i = 0, n = this->_internal_repeated_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(35, this->_internal_repeated_sint32(i), target);
  }

  // repeated sint64 repeated_sint64 = 36;
  for (int i = 0, n = this->_internal_repeated_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(36, this->_internal_repeated_sint64(i), target);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(37, this->_internal_repeated_fixed32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(38, this->_internal_repeated_fixed64(i), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  for (int i = 0, n = this->_internal_repeated_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(39, this->_internal_repeated_sfixed32(i), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  for (int i = 0, n = this->_internal_repeated_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(40, this->_internal_repeated_sfixed64(i), target);
  }

  // repeated float repeated_float = 41;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_repeated_float(i), target);
  }

  // repeated double repeated_double = 42;
  for (int i = 0, n = this->_internal_repeated_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_repeated_double(i), target);
  }

  // repeated bool repeated_bool = 43;
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_repeated_bool(i), target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.repeated_string");
    target = stream->WriteString(44, s, target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(45, s, target);
  }

  // repeated group RepeatedGroup = 46 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeatedgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(46, this->_internal_repeatedgroup(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_nested_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_foreign_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_foreign_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_import_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_import_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  for (int i = 0, n = this->_internal_repeated_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        51, this->_internal_repeated_nested_enum(i), target);
  }

  // repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
  for (int i = 0, n = this->_internal_repeated_foreign_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        52, this->_internal_repeated_foreign_enum(i), target);
  }

  // repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
  for (int i = 0, n = this->_internal_repeated_import_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        53, this->_internal_repeated_import_enum(i), target);
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeated_string_piece_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string_piece(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.repeated_string_piece");
    target = stream->WriteString(54, s, target);
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeated_cord_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_cord(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.repeated_cord");
    target = stream->WriteString(55, s, target);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_lazy_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_lazy_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(57, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 default_int32 = 61 [default = 41];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(61, this->_internal_default_int32(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int64 default_int64 = 62 [default = 42];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(62, this->_internal_default_int64(), target);
  }

  // optional uint32 default_uint32 = 63 [default = 43];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(63, this->_internal_default_uint32(), target);
  }

  // optional uint64 default_uint64 = 64 [default = 44];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(64, this->_internal_default_uint64(), target);
  }

  // optional sint32 default_sint32 = 65 [default = -45];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(65, this->_internal_default_sint32(), target);
  }

  // optional sint64 default_sint64 = 66 [default = 46];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(66, this->_internal_default_sint64(), target);
  }

  // optional fixed32 default_fixed32 = 67 [default = 47];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(67, this->_internal_default_fixed32(), target);
  }

  // optional fixed64 default_fixed64 = 68 [default = 48];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(68, this->_internal_default_fixed64(), target);
  }

  // optional sfixed32 default_sfixed32 = 69 [default = 49];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(69, this->_internal_default_sfixed32(), target);
  }

  // optional sfixed64 default_sfixed64 = 70 [default = -50];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(70, this->_internal_default_sfixed64(), target);
  }

  // optional float default_float = 71 [default = 51.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(71, this->_internal_default_float(), target);
  }

  // optional double default_double = 72 [default = 52000];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(72, this->_internal_default_double(), target);
  }

  // optional bool default_bool = 73 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_default_bool(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string default_string = 74 [default = "hello"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_string().data(), static_cast<int>(this->_internal_default_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.default_string");
    target = stream->WriteStringMaybeAliased(
        74, this->_internal_default_string(), target);
  }

  // optional bytes default_bytes = 75 [default = "world"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        75, this->_internal_default_bytes(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      81, this->_internal_default_nested_enum(), target);
  }

  // optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      82, this->_internal_default_foreign_enum(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      83, this->_internal_default_import_enum(), target);
  }

  // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_string_piece().data(), static_cast<int>(this->_internal_default_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.default_string_piece");
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_default_string_piece(), target);
  }

  // optional string default_cord = 85 [default = "123", ctype = CORD];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_cord().data(), static_cast<int>(this->_internal_default_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestAllTypes.default_cord");
    target = stream->WriteStringMaybeAliased(
        85, this->_internal_default_cord(), target);
  }

  switch (oneof_field_case()) {
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(111, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofNestedMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(112, _Internal::oneof_nested_message(this),
          _Internal::oneof_nested_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kOneofString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestAllTypes.oneof_string");
      target = stream->WriteStringMaybeAliased(
          113, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          114, this->_internal_oneof_bytes(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypes)
  return target;
}

size_t TestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sfixed64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_double_size());
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // repeated group RepeatedGroup = 46 { ... };
  total_size += 4UL * this->_internal_repeatedgroup_size();
  for (const auto& msg : this->repeatedgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
  total_size += 2UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
  total_size += 2UL * this->_internal_repeated_foreign_message_size();
  for (const auto& msg : this->repeated_foreign_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
  total_size += 2UL * this->_internal_repeated_import_message_size();
  for (const auto& msg : this->repeated_import_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeated_nested_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_foreign_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeated_foreign_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_import_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeated_import_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_piece_.size());
  for (int i = 0, n = repeated_string_piece_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_piece_.Get(i));
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_cord_.size());
  for (int i = 0, n = repeated_cord_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_cord_.Get(i));
  }

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  total_size += 2UL * this->_internal_repeated_lazy_message_size();
  for (const auto& msg : this->repeated_lazy_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string optional_string = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string_piece());
    }

    // optional string optional_cord = 25 [ctype = CORD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_cord());
    }

    // optional string default_string = 74 [default = "hello"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_string());
    }

    // optional bytes default_bytes = 75 [default = "world"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_default_bytes());
    }

    // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_string_piece());
    }

    // optional string default_cord = 85 [default = "123", ctype = CORD];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_cord());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional group OptionalGroup = 16 { ... };
    if (cached_has_bits & 0x00000100u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_nested_message_);
    }

    // optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_foreign_message_);
    }

    // optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_import_message_);
    }

    // optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_public_import_message_);
    }

    // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_lazy_message_);
    }

    // optional int64 optional_int64 = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optional_int64());
    }

    // optional int32 optional_int32 = 1;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_optional_int32());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 optional_uint32 = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_optional_uint32());
    }

    // optional uint64 optional_uint64 = 4;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_optional_uint64());
    }

    // optional sint64 optional_sint64 = 6;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_optional_sint64());
    }

    // optional sint32 optional_sint32 = 5;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_optional_sint32());
    }

    // optional fixed32 optional_fixed32 = 7;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional fixed64 optional_fixed64 = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 optional_sfixed64 = 10;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional sfixed32 optional_sfixed32 = 9;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float optional_float = 11;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional double optional_double = 12;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 8;
    }

    // optional bool optional_bool = 13;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_default_import_enum());
    }

    // optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_nested_enum());
    }

    // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
    }

    // optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_import_enum());
    }

    // optional int32 default_int32 = 61 [default = 41];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_default_int32());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 default_int64 = 62 [default = 42];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_default_int64());
    }

    // optional uint64 default_uint64 = 64 [default = 44];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_default_uint64());
    }

    // optional uint32 default_uint32 = 63 [default = 43];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_default_uint32());
    }

    // optional sint32 default_sint32 = 65 [default = -45];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt32Size(
          this->_internal_default_sint32());
    }

    // optional sint64 default_sint64 = 66 [default = 46];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt64Size(
          this->_internal_default_sint64());
    }

    // optional fixed64 default_fixed64 = 68 [default = 48];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional fixed32 default_fixed32 = 67 [default = 47];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional sfixed32 default_sfixed32 = 69 [default = 49];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional sfixed64 default_sfixed64 = 70 [default = -50];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double default_double = 72 [default = 52000];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional float default_float = 71 [default = 51.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional bool default_bool = 73 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_default_nested_enum());
    }

    // optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_default_foreign_enum());
    }

  }
  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // .protobuf_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_nested_message_);
      break;
    }
    // string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestAllTypes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypes::GetClassData() const { return &_class_data_; }

void TestAllTypes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestAllTypes *>(to)->MergeFrom(
      static_cast<const TestAllTypes &>(from));
}


void TestAllTypes::MergeFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeatedgroup_.MergeFrom(from.repeatedgroup_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_foreign_message_.MergeFrom(from.repeated_foreign_message_);
  repeated_import_message_.MergeFrom(from.repeated_import_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_foreign_enum_.MergeFrom(from.repeated_foreign_enum_);
  repeated_import_enum_.MergeFrom(from.repeated_import_enum_);
  repeated_string_piece_.MergeFrom(from.repeated_string_piece_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  repeated_lazy_message_.MergeFrom(from.repeated_lazy_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_optional_string_piece(from._internal_optional_string_piece());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_optional_cord(from._internal_optional_cord());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_default_string(from._internal_default_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_default_bytes(from._internal_default_bytes());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_default_string_piece(from._internal_default_string_piece());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_default_cord(from._internal_default_cord());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestAllTypes_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_optional_nested_message()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_optional_nested_message());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_optional_foreign_message()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_optional_foreign_message());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_optional_import_message()->::protobuf_unittest_import::ImportMessage::MergeFrom(from._internal_optional_import_message());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_optional_public_import_message()->::protobuf_unittest_import::PublicImportMessage::MergeFrom(from._internal_optional_public_import_message());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_optional_lazy_message()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_optional_lazy_message());
    }
    if (cached_has_bits & 0x00004000u) {
      optional_int64_ = from.optional_int64_;
    }
    if (cached_has_bits & 0x00008000u) {
      optional_int32_ = from.optional_int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      optional_uint32_ = from.optional_uint32_;
    }
    if (cached_has_bits & 0x00020000u) {
      optional_uint64_ = from.optional_uint64_;
    }
    if (cached_has_bits & 0x00040000u) {
      optional_sint64_ = from.optional_sint64_;
    }
    if (cached_has_bits & 0x00080000u) {
      optional_sint32_ = from.optional_sint32_;
    }
    if (cached_has_bits & 0x00100000u) {
      optional_fixed32_ = from.optional_fixed32_;
    }
    if (cached_has_bits & 0x00200000u) {
      optional_fixed64_ = from.optional_fixed64_;
    }
    if (cached_has_bits & 0x00400000u) {
      optional_sfixed64_ = from.optional_sfixed64_;
    }
    if (cached_has_bits & 0x00800000u) {
      optional_sfixed32_ = from.optional_sfixed32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      optional_float_ = from.optional_float_;
    }
    if (cached_has_bits & 0x02000000u) {
      optional_double_ = from.optional_double_;
    }
    if (cached_has_bits & 0x04000000u) {
      optional_bool_ = from.optional_bool_;
    }
    if (cached_has_bits & 0x08000000u) {
      default_import_enum_ = from.default_import_enum_;
    }
    if (cached_has_bits & 0x10000000u) {
      optional_nested_enum_ = from.optional_nested_enum_;
    }
    if (cached_has_bits & 0x20000000u) {
      optional_foreign_enum_ = from.optional_foreign_enum_;
    }
    if (cached_has_bits & 0x40000000u) {
      optional_import_enum_ = from.optional_import_enum_;
    }
    if (cached_has_bits & 0x80000000u) {
      default_int32_ = from.default_int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      default_int64_ = from.default_int64_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_uint64_ = from.default_uint64_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_uint32_ = from.default_uint32_;
    }
    if (cached_has_bits & 0x00000008u) {
      default_sint32_ = from.default_sint32_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_sint64_ = from.default_sint64_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_fixed64_ = from.default_fixed64_;
    }
    if (cached_has_bits & 0x00000040u) {
      default_fixed32_ = from.default_fixed32_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_sfixed32_ = from.default_sfixed32_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      default_sfixed64_ = from.default_sfixed64_;
    }
    if (cached_has_bits & 0x00000200u) {
      default_double_ = from.default_double_;
    }
    if (cached_has_bits & 0x00000400u) {
      default_float_ = from.default_float_;
    }
    if (cached_has_bits & 0x00000800u) {
      default_bool_ = from.default_bool_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_nested_enum_ = from.default_nested_enum_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_foreign_enum_ = from.default_foreign_enum_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypes::CopyFrom(const TestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypes::IsInitialized() const {
  return true;
}

void TestAllTypes::InternalSwap(TestAllTypes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeatedgroup_.InternalSwap(&other->repeatedgroup_);
  repeated_nested_message_.InternalSwap(&other->repeated_nested_message_);
  repeated_foreign_message_.InternalSwap(&other->repeated_foreign_message_);
  repeated_import_message_.InternalSwap(&other->repeated_import_message_);
  repeated_nested_enum_.InternalSwap(&other->repeated_nested_enum_);
  repeated_foreign_enum_.InternalSwap(&other->repeated_foreign_enum_);
  repeated_import_enum_.InternalSwap(&other->repeated_import_enum_);
  repeated_string_piece_.InternalSwap(&other->repeated_string_piece_);
  repeated_cord_.InternalSwap(&other->repeated_cord_);
  repeated_lazy_message_.InternalSwap(&other->repeated_lazy_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_string_, lhs_arena,
      &other->optional_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_bytes_, lhs_arena,
      &other->optional_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_string_piece_, lhs_arena,
      &other->optional_string_piece_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_cord_, lhs_arena,
      &other->optional_cord_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_string_, lhs_arena,
      &other->default_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_bytes_, lhs_arena,
      &other->default_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_string_piece_, lhs_arena,
      &other->default_string_piece_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_cord_, lhs_arena,
      &other->default_cord_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypes, optional_bool_)
      + sizeof(TestAllTypes::optional_bool_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypes, optionalgroup_)>(
          reinterpret_cast<char*>(&optionalgroup_),
          reinterpret_cast<char*>(&other->optionalgroup_));
  swap(default_import_enum_, other->default_import_enum_);
  swap(optional_nested_enum_, other->optional_nested_enum_);
  swap(optional_foreign_enum_, other->optional_foreign_enum_);
  swap(optional_import_enum_, other->optional_import_enum_);
  swap(default_int32_, other->default_int32_);
  swap(default_int64_, other->default_int64_);
  swap(default_uint64_, other->default_uint64_);
  swap(default_uint32_, other->default_uint32_);
  swap(default_sint32_, other->default_sint32_);
  swap(default_sint64_, other->default_sint64_);
  swap(default_fixed64_, other->default_fixed64_);
  swap(default_fixed32_, other->default_fixed32_);
  swap(default_sfixed32_, other->default_sfixed32_);
  swap(default_sfixed64_, other->default_sfixed64_);
  swap(default_double_, other->default_double_);
  swap(default_float_, other->default_float_);
  swap(default_bool_, other->default_bool_);
  swap(default_nested_enum_, other->default_nested_enum_);
  swap(default_foreign_enum_, other->default_foreign_enum_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[3]);
}

// ===================================================================

class NestedTestAllTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<NestedTestAllTypes>()._has_bits_);
  static const ::protobuf_unittest::NestedTestAllTypes& child(const NestedTestAllTypes* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& payload(const NestedTestAllTypes* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::NestedTestAllTypes& lazy_child(const NestedTestAllTypes* msg);
  static void set_has_lazy_child(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf_unittest::TestAllTypes& eager_child(const NestedTestAllTypes* msg);
  static void set_has_eager_child(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::protobuf_unittest::NestedTestAllTypes&
NestedTestAllTypes::_Internal::child(const NestedTestAllTypes* msg) {
  return *msg->child_;
}
const ::protobuf_unittest::TestAllTypes&
NestedTestAllTypes::_Internal::payload(const NestedTestAllTypes* msg) {
  return *msg->payload_;
}
const ::protobuf_unittest::NestedTestAllTypes&
NestedTestAllTypes::_Internal::lazy_child(const NestedTestAllTypes* msg) {
  return *msg->lazy_child_;
}
const ::protobuf_unittest::TestAllTypes&
NestedTestAllTypes::_Internal::eager_child(const NestedTestAllTypes* msg) {
  return *msg->eager_child_;
}
NestedTestAllTypes::NestedTestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_child_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.NestedTestAllTypes)
}
NestedTestAllTypes::NestedTestAllTypes(const NestedTestAllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_child_(from.repeated_child_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::protobuf_unittest::NestedTestAllTypes(*from.child_);
  } else {
    child_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new ::protobuf_unittest::TestAllTypes(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  if (from._internal_has_lazy_child()) {
    lazy_child_ = new ::protobuf_unittest::NestedTestAllTypes(*from.lazy_child_);
  } else {
    lazy_child_ = nullptr;
  }
  if (from._internal_has_eager_child()) {
    eager_child_ = new ::protobuf_unittest::TestAllTypes(*from.eager_child_);
  } else {
    eager_child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.NestedTestAllTypes)
}

inline void NestedTestAllTypes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eager_child_) -
    reinterpret_cast<char*>(&child_)) + sizeof(eager_child_));
}

NestedTestAllTypes::~NestedTestAllTypes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.NestedTestAllTypes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NestedTestAllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete child_;
  if (this != internal_default_instance()) delete payload_;
  if (this != internal_default_instance()) delete lazy_child_;
  if (this != internal_default_instance()) delete eager_child_;
}

void NestedTestAllTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NestedTestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.NestedTestAllTypes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_child_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(child_ != nullptr);
      child_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(payload_ != nullptr);
      payload_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lazy_child_ != nullptr);
      lazy_child_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(eager_child_ != nullptr);
      eager_child_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedTestAllTypes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.NestedTestAllTypes child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.NestedTestAllTypes repeated_child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.NestedTestAllTypes lazy_child = 4 [lazy = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lazy_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes eager_child = 5 [lazy = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_eager_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NestedTestAllTypes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.NestedTestAllTypes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.NestedTestAllTypes child = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.NestedTestAllTypes repeated_child = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_child_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_child(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.NestedTestAllTypes lazy_child = 4 [lazy = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lazy_child(this),
        _Internal::lazy_child(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes eager_child = 5 [lazy = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::eager_child(this),
        _Internal::eager_child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.NestedTestAllTypes)
  return target;
}

size_t NestedTestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.NestedTestAllTypes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.NestedTestAllTypes repeated_child = 3;
  total_size += 1UL * this->_internal_repeated_child_size();
  for (const auto& msg : this->repeated_child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .protobuf_unittest.NestedTestAllTypes child = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_);
    }

    // optional .protobuf_unittest.TestAllTypes payload = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_);
    }

    // optional .protobuf_unittest.NestedTestAllTypes lazy_child = 4 [lazy = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lazy_child_);
    }

    // optional .protobuf_unittest.TestAllTypes eager_child = 5 [lazy = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eager_child_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NestedTestAllTypes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NestedTestAllTypes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NestedTestAllTypes::GetClassData() const { return &_class_data_; }

void NestedTestAllTypes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NestedTestAllTypes *>(to)->MergeFrom(
      static_cast<const NestedTestAllTypes &>(from));
}


void NestedTestAllTypes::MergeFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.NestedTestAllTypes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_child_.MergeFrom(from.repeated_child_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_child()->::protobuf_unittest::NestedTestAllTypes::MergeFrom(from._internal_child());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_payload()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lazy_child()->::protobuf_unittest::NestedTestAllTypes::MergeFrom(from._internal_lazy_child());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_eager_child()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_eager_child());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NestedTestAllTypes::CopyFrom(const NestedTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.NestedTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedTestAllTypes::IsInitialized() const {
  return true;
}

void NestedTestAllTypes::InternalSwap(NestedTestAllTypes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_child_.InternalSwap(&other->repeated_child_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, eager_child_)
      + sizeof(NestedTestAllTypes::eager_child_)
      - PROTOBUF_FIELD_OFFSET(NestedTestAllTypes, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedTestAllTypes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[4]);
}

// ===================================================================

class TestDeprecatedFields::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDeprecatedFields>()._has_bits_);
  static void set_has_deprecated_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDeprecatedFields::TestDeprecatedFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDeprecatedFields)
}
TestDeprecatedFields::TestDeprecatedFields(const TestDeprecatedFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deprecated_int32_ = from.deprecated_int32_;
  clear_has_oneof_fields();
  switch (from.oneof_fields_case()) {
    case kDeprecatedInt32InOneof: {
      _internal_set_deprecated_int32_in_oneof(from._internal_deprecated_int32_in_oneof());
      break;
    }
    case ONEOF_FIELDS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDeprecatedFields)
}

inline void TestDeprecatedFields::SharedCtor() {
deprecated_int32_ = 0;
clear_has_oneof_fields();
}

TestDeprecatedFields::~TestDeprecatedFields() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDeprecatedFields)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDeprecatedFields::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof_fields()) {
    clear_oneof_fields();
  }
}

void TestDeprecatedFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDeprecatedFields::clear_oneof_fields() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestDeprecatedFields)
  switch (oneof_fields_case()) {
    case kDeprecatedInt32InOneof: {
      // No need to clear
      break;
    }
    case ONEOF_FIELDS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELDS_NOT_SET;
}


void TestDeprecatedFields::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDeprecatedFields)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_int32_ = 0;
  clear_oneof_fields();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDeprecatedFields::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 deprecated_int32 = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_deprecated_int32(&has_bits);
          deprecated_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 deprecated_int32_in_oneof = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_deprecated_int32_in_oneof(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDeprecatedFields::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDeprecatedFields)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 deprecated_int32 = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_deprecated_int32(), target);
  }

  // int32 deprecated_int32_in_oneof = 2 [deprecated = true];
  if (_internal_has_deprecated_int32_in_oneof()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_deprecated_int32_in_oneof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDeprecatedFields)
  return target;
}

size_t TestDeprecatedFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDeprecatedFields)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 deprecated_int32 = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deprecated_int32());
  }

  switch (oneof_fields_case()) {
    // int32 deprecated_int32_in_oneof = 2 [deprecated = true];
    case kDeprecatedInt32InOneof: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deprecated_int32_in_oneof());
      break;
    }
    case ONEOF_FIELDS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDeprecatedFields::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDeprecatedFields::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDeprecatedFields::GetClassData() const { return &_class_data_; }

void TestDeprecatedFields::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDeprecatedFields *>(to)->MergeFrom(
      static_cast<const TestDeprecatedFields &>(from));
}


void TestDeprecatedFields::MergeFrom(const TestDeprecatedFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDeprecatedFields)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_deprecated_int32()) {
    _internal_set_deprecated_int32(from._internal_deprecated_int32());
  }
  switch (from.oneof_fields_case()) {
    case kDeprecatedInt32InOneof: {
      _internal_set_deprecated_int32_in_oneof(from._internal_deprecated_int32_in_oneof());
      break;
    }
    case ONEOF_FIELDS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDeprecatedFields::CopyFrom(const TestDeprecatedFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDeprecatedFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDeprecatedFields::IsInitialized() const {
  return true;
}

void TestDeprecatedFields::InternalSwap(TestDeprecatedFields* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(deprecated_int32_, other->deprecated_int32_);
  swap(oneof_fields_, other->oneof_fields_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDeprecatedFields::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[5]);
}

// ===================================================================

class TestDeprecatedMessage::_Internal {
 public:
};

TestDeprecatedMessage::TestDeprecatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDeprecatedMessage)
}
TestDeprecatedMessage::TestDeprecatedMessage(const TestDeprecatedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDeprecatedMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDeprecatedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDeprecatedMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestDeprecatedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[6]);
}

// ===================================================================

class ForeignMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ForeignMessage>()._has_bits_);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ForeignMessage::ForeignMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.ForeignMessage)
}
ForeignMessage::ForeignMessage(const ForeignMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&c_, &from.c_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&c_)) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.ForeignMessage)
}

inline void ForeignMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&c_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&c_)) + sizeof(d_));
}

ForeignMessage::~ForeignMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.ForeignMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForeignMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForeignMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForeignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.ForeignMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&c_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&d_) -
        reinterpret_cast<char*>(&c_)) + sizeof(d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForeignMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_d(&has_bits);
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForeignMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.ForeignMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  // optional int32 d = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.ForeignMessage)
  return target;
}

size_t ForeignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.ForeignMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 c = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_c());
    }

    // optional int32 d = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_d());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForeignMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForeignMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForeignMessage::GetClassData() const { return &_class_data_; }

void ForeignMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ForeignMessage *>(to)->MergeFrom(
      static_cast<const ForeignMessage &>(from));
}


void ForeignMessage::MergeFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.ForeignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000002u) {
      d_ = from.d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForeignMessage::CopyFrom(const ForeignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.ForeignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessage::IsInitialized() const {
  return true;
}

void ForeignMessage::InternalSwap(ForeignMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForeignMessage, d_)
      + sizeof(ForeignMessage::d_)
      - PROTOBUF_FIELD_OFFSET(ForeignMessage, c_)>(
          reinterpret_cast<char*>(&c_),
          reinterpret_cast<char*>(&other->c_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForeignMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[7]);
}

// ===================================================================

class TestReservedFields::_Internal {
 public:
};

TestReservedFields::TestReservedFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestReservedFields)
}
TestReservedFields::TestReservedFields(const TestReservedFields& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestReservedFields)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestReservedFields::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestReservedFields::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestReservedFields::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[8]);
}

// ===================================================================

class TestAllExtensions::_Internal {
 public:
};

TestAllExtensions::TestAllExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllExtensions)
}
TestAllExtensions::TestAllExtensions(const TestAllExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllExtensions)
}

inline void TestAllExtensions::SharedCtor() {
}

TestAllExtensions::~TestAllExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllExtensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllExtensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllExtensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllExtensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllExtensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllExtensions)
  return target;
}

size_t TestAllExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllExtensions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestAllExtensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllExtensions::GetClassData() const { return &_class_data_; }

void TestAllExtensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestAllExtensions *>(to)->MergeFrom(
      static_cast<const TestAllExtensions &>(from));
}


void TestAllExtensions::MergeFrom(const TestAllExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllExtensions::CopyFrom(const TestAllExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllExtensions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestAllExtensions::InternalSwap(TestAllExtensions* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[9]);
}

// ===================================================================

class OptionalGroup_extension::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionalGroup_extension>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OptionalGroup_extension::OptionalGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.OptionalGroup_extension)
}
OptionalGroup_extension::OptionalGroup_extension(const OptionalGroup_extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.OptionalGroup_extension)
}

inline void OptionalGroup_extension::SharedCtor() {
a_ = 0;
}

OptionalGroup_extension::~OptionalGroup_extension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.OptionalGroup_extension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionalGroup_extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OptionalGroup_extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OptionalGroup_extension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.OptionalGroup_extension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalGroup_extension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionalGroup_extension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.OptionalGroup_extension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.OptionalGroup_extension)
  return target;
}

size_t OptionalGroup_extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.OptionalGroup_extension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionalGroup_extension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OptionalGroup_extension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionalGroup_extension::GetClassData() const { return &_class_data_; }

void OptionalGroup_extension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OptionalGroup_extension *>(to)->MergeFrom(
      static_cast<const OptionalGroup_extension &>(from));
}


void OptionalGroup_extension::MergeFrom(const OptionalGroup_extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.OptionalGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionalGroup_extension::CopyFrom(const OptionalGroup_extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.OptionalGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalGroup_extension::IsInitialized() const {
  return true;
}

void OptionalGroup_extension::InternalSwap(OptionalGroup_extension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalGroup_extension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[10]);
}

// ===================================================================

class RepeatedGroup_extension::_Internal {
 public:
  using HasBits = decltype(std::declval<RepeatedGroup_extension>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RepeatedGroup_extension::RepeatedGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.RepeatedGroup_extension)
}
RepeatedGroup_extension::RepeatedGroup_extension(const RepeatedGroup_extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.RepeatedGroup_extension)
}

inline void RepeatedGroup_extension::SharedCtor() {
a_ = 0;
}

RepeatedGroup_extension::~RepeatedGroup_extension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.RepeatedGroup_extension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepeatedGroup_extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepeatedGroup_extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RepeatedGroup_extension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.RepeatedGroup_extension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepeatedGroup_extension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepeatedGroup_extension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.RepeatedGroup_extension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.RepeatedGroup_extension)
  return target;
}

size_t RepeatedGroup_extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.RepeatedGroup_extension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 47;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepeatedGroup_extension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RepeatedGroup_extension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepeatedGroup_extension::GetClassData() const { return &_class_data_; }

void RepeatedGroup_extension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RepeatedGroup_extension *>(to)->MergeFrom(
      static_cast<const RepeatedGroup_extension &>(from));
}


void RepeatedGroup_extension::MergeFrom(const RepeatedGroup_extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.RepeatedGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepeatedGroup_extension::CopyFrom(const RepeatedGroup_extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.RepeatedGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedGroup_extension::IsInitialized() const {
  return true;
}

void RepeatedGroup_extension::InternalSwap(RepeatedGroup_extension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedGroup_extension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[11]);
}

// ===================================================================

class TestGroup_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestGroup_OptionalGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestGroup_OptionalGroup::TestGroup_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestGroup.OptionalGroup)
}
TestGroup_OptionalGroup::TestGroup_OptionalGroup(const TestGroup_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestGroup.OptionalGroup)
}

inline void TestGroup_OptionalGroup::SharedCtor() {
a_ = 0;
}

TestGroup_OptionalGroup::~TestGroup_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestGroup.OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestGroup_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestGroup_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestGroup_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestGroup.OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestGroup_OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestGroup_OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestGroup.OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestGroup.OptionalGroup)
  return target;
}

size_t TestGroup_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestGroup.OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestGroup_OptionalGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestGroup_OptionalGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestGroup_OptionalGroup::GetClassData() const { return &_class_data_; }

void TestGroup_OptionalGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestGroup_OptionalGroup *>(to)->MergeFrom(
      static_cast<const TestGroup_OptionalGroup &>(from));
}


void TestGroup_OptionalGroup::MergeFrom(const TestGroup_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestGroup.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestGroup_OptionalGroup::CopyFrom(const TestGroup_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestGroup.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGroup_OptionalGroup::IsInitialized() const {
  return true;
}

void TestGroup_OptionalGroup::InternalSwap(TestGroup_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGroup_OptionalGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[12]);
}

// ===================================================================

class TestGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestGroup>()._has_bits_);
  static const ::protobuf_unittest::TestGroup_OptionalGroup& optionalgroup(const TestGroup* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_foreign_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestGroup_OptionalGroup&
TestGroup::_Internal::optionalgroup(const TestGroup* msg) {
  return *msg->optionalgroup_;
}
TestGroup::TestGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestGroup)
}
TestGroup::TestGroup(const TestGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestGroup_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  optional_foreign_enum_ = from.optional_foreign_enum_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestGroup)
}

inline void TestGroup::SharedCtor() {
optionalgroup_ = nullptr;
optional_foreign_enum_ = 4;
}

TestGroup::~TestGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete optionalgroup_;
}

void TestGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
    optional_foreign_enum_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional group OptionalGroup = 16 { ... };
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 131)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 131);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_optional_foreign_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional group OptionalGroup = 16 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        16, _Internal::optionalgroup(this), target, stream);
  }

  // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestGroup)
  return target;
}

size_t TestGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional group OptionalGroup = 16 { ... };
    if (cached_has_bits & 0x00000001u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestGroup::GetClassData() const { return &_class_data_; }

void TestGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestGroup *>(to)->MergeFrom(
      static_cast<const TestGroup &>(from));
}


void TestGroup::MergeFrom(const TestGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestGroup_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000002u) {
      optional_foreign_enum_ = from.optional_foreign_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestGroup::CopyFrom(const TestGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGroup::IsInitialized() const {
  return true;
}

void TestGroup::InternalSwap(TestGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(optionalgroup_, other->optionalgroup_);
  swap(optional_foreign_enum_, other->optional_foreign_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[13]);
}

// ===================================================================

class TestGroupExtension::_Internal {
 public:
};

TestGroupExtension::TestGroupExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestGroupExtension)
}
TestGroupExtension::TestGroupExtension(const TestGroupExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestGroupExtension)
}

inline void TestGroupExtension::SharedCtor() {
}

TestGroupExtension::~TestGroupExtension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestGroupExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestGroupExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestGroupExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestGroupExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestGroupExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestGroupExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestGroupExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestGroupExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestGroupExtension)
  return target;
}

size_t TestGroupExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestGroupExtension)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestGroupExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestGroupExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestGroupExtension::GetClassData() const { return &_class_data_; }

void TestGroupExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestGroupExtension *>(to)->MergeFrom(
      static_cast<const TestGroupExtension &>(from));
}


void TestGroupExtension::MergeFrom(const TestGroupExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestGroupExtension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestGroupExtension::CopyFrom(const TestGroupExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestGroupExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGroupExtension::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestGroupExtension::InternalSwap(TestGroupExtension* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGroupExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[14]);
}

// ===================================================================

class TestNestedExtension_OptionalGroup_extension::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedExtension_OptionalGroup_extension>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestNestedExtension_OptionalGroup_extension::TestNestedExtension_OptionalGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
}
TestNestedExtension_OptionalGroup_extension::TestNestedExtension_OptionalGroup_extension(const TestNestedExtension_OptionalGroup_extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
}

inline void TestNestedExtension_OptionalGroup_extension::SharedCtor() {
a_ = 0;
}

TestNestedExtension_OptionalGroup_extension::~TestNestedExtension_OptionalGroup_extension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedExtension_OptionalGroup_extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestNestedExtension_OptionalGroup_extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedExtension_OptionalGroup_extension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedExtension_OptionalGroup_extension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedExtension_OptionalGroup_extension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  return target;
}

size_t TestNestedExtension_OptionalGroup_extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedExtension_OptionalGroup_extension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedExtension_OptionalGroup_extension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedExtension_OptionalGroup_extension::GetClassData() const { return &_class_data_; }

void TestNestedExtension_OptionalGroup_extension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedExtension_OptionalGroup_extension *>(to)->MergeFrom(
      static_cast<const TestNestedExtension_OptionalGroup_extension &>(from));
}


void TestNestedExtension_OptionalGroup_extension::MergeFrom(const TestNestedExtension_OptionalGroup_extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedExtension_OptionalGroup_extension::CopyFrom(const TestNestedExtension_OptionalGroup_extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedExtension_OptionalGroup_extension::IsInitialized() const {
  return true;
}

void TestNestedExtension_OptionalGroup_extension::InternalSwap(TestNestedExtension_OptionalGroup_extension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedExtension_OptionalGroup_extension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[15]);
}

// ===================================================================

class TestNestedExtension::_Internal {
 public:
};

TestNestedExtension::TestNestedExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedExtension)
}
TestNestedExtension::TestNestedExtension(const TestNestedExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedExtension)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedExtension::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestNestedExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[16]);
}

// ===================================================================

class TestChildExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<TestChildExtension>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestAllExtensions& optional_extension(const TestChildExtension* msg);
  static void set_has_optional_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::TestAllExtensions&
TestChildExtension::_Internal::optional_extension(const TestChildExtension* msg) {
  return *msg->optional_extension_;
}
TestChildExtension::TestChildExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestChildExtension)
}
TestChildExtension::TestChildExtension(const TestChildExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_a()) {
    a_.Set(from._internal_a(), 
      GetArenaForAllocation());
  }
  b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_b()) {
    b_.Set(from._internal_b(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optional_extension()) {
    optional_extension_ = new ::protobuf_unittest::TestAllExtensions(*from.optional_extension_);
  } else {
    optional_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestChildExtension)
}

inline void TestChildExtension::SharedCtor() {
a_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  a_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
b_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  b_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_extension_ = nullptr;
}

TestChildExtension::~TestChildExtension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestChildExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestChildExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  a_.Destroy();
  b_.Destroy();
  if (this != internal_default_instance()) delete optional_extension_;
}

void TestChildExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestChildExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestChildExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      a_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      b_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optional_extension_ != nullptr);
      optional_extension_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestChildExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestChildExtension.a");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestChildExtension.b");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllExtensions optional_extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestChildExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestChildExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_a().data(), static_cast<int>(this->_internal_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestChildExtension.a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_a(), target);
  }

  // optional string b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestChildExtension.b");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_b(), target);
  }

  // optional .protobuf_unittest.TestAllExtensions optional_extension = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::optional_extension(this),
        _Internal::optional_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestChildExtension)
  return target;
}

size_t TestChildExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestChildExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_a());
    }

    // optional string b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional .protobuf_unittest.TestAllExtensions optional_extension = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_extension_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestChildExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestChildExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestChildExtension::GetClassData() const { return &_class_data_; }

void TestChildExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestChildExtension *>(to)->MergeFrom(
      static_cast<const TestChildExtension &>(from));
}


void TestChildExtension::MergeFrom(const TestChildExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestChildExtension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_a(from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optional_extension()->::protobuf_unittest::TestAllExtensions::MergeFrom(from._internal_optional_extension());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestChildExtension::CopyFrom(const TestChildExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestChildExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestChildExtension::IsInitialized() const {
  if (_internal_has_optional_extension()) {
    if (!optional_extension_->IsInitialized()) return false;
  }
  return true;
}

void TestChildExtension::InternalSwap(TestChildExtension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &a_, lhs_arena,
      &other->a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &b_, lhs_arena,
      &other->b_, rhs_arena
  );
  swap(optional_extension_, other->optional_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestChildExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[17]);
}

// ===================================================================

class TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_Internal {
 public:
  using HasBits = decltype(std::declval<TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
}
TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
}

inline void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
}

TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::~TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&a_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional int32 b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
  return target;
}

size_t TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

    // optional int32 b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::GetClassData() const { return &_class_data_; }

void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions *>(to)->MergeFrom(
      static_cast<const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions &>(from));
}


void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::MergeFrom(const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::CopyFrom(const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::IsInitialized() const {
  return true;
}

void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::InternalSwap(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions, b_)
      + sizeof(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::b_)
      - PROTOBUF_FIELD_OFFSET(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[18]);
}

// ===================================================================

class TestChildExtensionData_NestedTestAllExtensionsData::_Internal {
 public:
  using HasBits = decltype(std::declval<TestChildExtensionData_NestedTestAllExtensionsData>()._has_bits_);
  static const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& dynamic(const TestChildExtensionData_NestedTestAllExtensionsData* msg);
  static void set_has_dynamic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions&
TestChildExtensionData_NestedTestAllExtensionsData::_Internal::dynamic(const TestChildExtensionData_NestedTestAllExtensionsData* msg) {
  return *msg->dynamic_;
}
TestChildExtensionData_NestedTestAllExtensionsData::TestChildExtensionData_NestedTestAllExtensionsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
}
TestChildExtensionData_NestedTestAllExtensionsData::TestChildExtensionData_NestedTestAllExtensionsData(const TestChildExtensionData_NestedTestAllExtensionsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dynamic()) {
    dynamic_ = new ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(*from.dynamic_);
  } else {
    dynamic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
}

inline void TestChildExtensionData_NestedTestAllExtensionsData::SharedCtor() {
dynamic_ = nullptr;
}

TestChildExtensionData_NestedTestAllExtensionsData::~TestChildExtensionData_NestedTestAllExtensionsData() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestChildExtensionData_NestedTestAllExtensionsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dynamic_;
}

void TestChildExtensionData_NestedTestAllExtensionsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestChildExtensionData_NestedTestAllExtensionsData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dynamic_ != nullptr);
    dynamic_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestChildExtensionData_NestedTestAllExtensionsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions dynamic = 409707008;
      case 409707008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestChildExtensionData_NestedTestAllExtensionsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions dynamic = 409707008;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(409707008, _Internal::dynamic(this),
        _Internal::dynamic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
  return target;
}

size_t TestChildExtensionData_NestedTestAllExtensionsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions dynamic = 409707008;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestChildExtensionData_NestedTestAllExtensionsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestChildExtensionData_NestedTestAllExtensionsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestChildExtensionData_NestedTestAllExtensionsData::GetClassData() const { return &_class_data_; }

void TestChildExtensionData_NestedTestAllExtensionsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestChildExtensionData_NestedTestAllExtensionsData *>(to)->MergeFrom(
      static_cast<const TestChildExtensionData_NestedTestAllExtensionsData &>(from));
}


void TestChildExtensionData_NestedTestAllExtensionsData::MergeFrom(const TestChildExtensionData_NestedTestAllExtensionsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dynamic()) {
    _internal_mutable_dynamic()->::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::MergeFrom(from._internal_dynamic());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestChildExtensionData_NestedTestAllExtensionsData::CopyFrom(const TestChildExtensionData_NestedTestAllExtensionsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestChildExtensionData_NestedTestAllExtensionsData::IsInitialized() const {
  return true;
}

void TestChildExtensionData_NestedTestAllExtensionsData::InternalSwap(TestChildExtensionData_NestedTestAllExtensionsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dynamic_, other->dynamic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestChildExtensionData_NestedTestAllExtensionsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[19]);
}

// ===================================================================

class TestChildExtensionData::_Internal {
 public:
  using HasBits = decltype(std::declval<TestChildExtensionData>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData& optional_extension(const TestChildExtensionData* msg);
  static void set_has_optional_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData&
TestChildExtensionData::_Internal::optional_extension(const TestChildExtensionData* msg) {
  return *msg->optional_extension_;
}
TestChildExtensionData::TestChildExtensionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestChildExtensionData)
}
TestChildExtensionData::TestChildExtensionData(const TestChildExtensionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_a()) {
    a_.Set(from._internal_a(), 
      GetArenaForAllocation());
  }
  b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_b()) {
    b_.Set(from._internal_b(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optional_extension()) {
    optional_extension_ = new ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData(*from.optional_extension_);
  } else {
    optional_extension_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestChildExtensionData)
}

inline void TestChildExtensionData::SharedCtor() {
a_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  a_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
b_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  b_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_extension_ = nullptr;
}

TestChildExtensionData::~TestChildExtensionData() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestChildExtensionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestChildExtensionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  a_.Destroy();
  b_.Destroy();
  if (this != internal_default_instance()) delete optional_extension_;
}

void TestChildExtensionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestChildExtensionData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestChildExtensionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      a_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      b_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optional_extension_ != nullptr);
      optional_extension_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestChildExtensionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestChildExtensionData.a");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestChildExtensionData.b");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData optional_extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestChildExtensionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestChildExtensionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_a().data(), static_cast<int>(this->_internal_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestChildExtensionData.a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_a(), target);
  }

  // optional string b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestChildExtensionData.b");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_b(), target);
  }

  // optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData optional_extension = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::optional_extension(this),
        _Internal::optional_extension(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestChildExtensionData)
  return target;
}

size_t TestChildExtensionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestChildExtensionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_a());
    }

    // optional string b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData optional_extension = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_extension_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestChildExtensionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestChildExtensionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestChildExtensionData::GetClassData() const { return &_class_data_; }

void TestChildExtensionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestChildExtensionData *>(to)->MergeFrom(
      static_cast<const TestChildExtensionData &>(from));
}


void TestChildExtensionData::MergeFrom(const TestChildExtensionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestChildExtensionData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_a(from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optional_extension()->::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData::MergeFrom(from._internal_optional_extension());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestChildExtensionData::CopyFrom(const TestChildExtensionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestChildExtensionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestChildExtensionData::IsInitialized() const {
  return true;
}

void TestChildExtensionData::InternalSwap(TestChildExtensionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &a_, lhs_arena,
      &other->a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &b_, lhs_arena,
      &other->b_, rhs_arena
  );
  swap(optional_extension_, other->optional_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestChildExtensionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[20]);
}

// ===================================================================

class TestNestedChildExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedChildExtension>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestChildExtension& child(const TestNestedChildExtension* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestChildExtension&
TestNestedChildExtension::_Internal::child(const TestNestedChildExtension* msg) {
  return *msg->child_;
}
TestNestedChildExtension::TestNestedChildExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedChildExtension)
}
TestNestedChildExtension::TestNestedChildExtension(const TestNestedChildExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::protobuf_unittest::TestChildExtension(*from.child_);
  } else {
    child_ = nullptr;
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedChildExtension)
}

inline void TestNestedChildExtension::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&child_)) + sizeof(a_));
}

TestNestedChildExtension::~TestNestedChildExtension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedChildExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedChildExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void TestNestedChildExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedChildExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedChildExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(child_ != nullptr);
    child_->Clear();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedChildExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestChildExtension child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedChildExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedChildExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional .protobuf_unittest.TestChildExtension child = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedChildExtension)
  return target;
}

size_t TestNestedChildExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedChildExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestChildExtension child = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_);
    }

    // optional int32 a = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedChildExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedChildExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedChildExtension::GetClassData() const { return &_class_data_; }

void TestNestedChildExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedChildExtension *>(to)->MergeFrom(
      static_cast<const TestNestedChildExtension &>(from));
}


void TestNestedChildExtension::MergeFrom(const TestNestedChildExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedChildExtension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_child()->::protobuf_unittest::TestChildExtension::MergeFrom(from._internal_child());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedChildExtension::CopyFrom(const TestNestedChildExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedChildExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedChildExtension::IsInitialized() const {
  if (_internal_has_child()) {
    if (!child_->IsInitialized()) return false;
  }
  return true;
}

void TestNestedChildExtension::InternalSwap(TestNestedChildExtension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestNestedChildExtension, a_)
      + sizeof(TestNestedChildExtension::a_)
      - PROTOBUF_FIELD_OFFSET(TestNestedChildExtension, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedChildExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[21]);
}

// ===================================================================

class TestNestedChildExtensionData::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedChildExtensionData>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestChildExtensionData& child(const TestNestedChildExtensionData* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestChildExtensionData&
TestNestedChildExtensionData::_Internal::child(const TestNestedChildExtensionData* msg) {
  return *msg->child_;
}
TestNestedChildExtensionData::TestNestedChildExtensionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedChildExtensionData)
}
TestNestedChildExtensionData::TestNestedChildExtensionData(const TestNestedChildExtensionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::protobuf_unittest::TestChildExtensionData(*from.child_);
  } else {
    child_ = nullptr;
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedChildExtensionData)
}

inline void TestNestedChildExtensionData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&child_)) + sizeof(a_));
}

TestNestedChildExtensionData::~TestNestedChildExtensionData() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedChildExtensionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedChildExtensionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void TestNestedChildExtensionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedChildExtensionData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedChildExtensionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(child_ != nullptr);
    child_->Clear();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedChildExtensionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestChildExtensionData child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedChildExtensionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedChildExtensionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional .protobuf_unittest.TestChildExtensionData child = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedChildExtensionData)
  return target;
}

size_t TestNestedChildExtensionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedChildExtensionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestChildExtensionData child = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_);
    }

    // optional int32 a = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedChildExtensionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedChildExtensionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedChildExtensionData::GetClassData() const { return &_class_data_; }

void TestNestedChildExtensionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedChildExtensionData *>(to)->MergeFrom(
      static_cast<const TestNestedChildExtensionData &>(from));
}


void TestNestedChildExtensionData::MergeFrom(const TestNestedChildExtensionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedChildExtensionData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_child()->::protobuf_unittest::TestChildExtensionData::MergeFrom(from._internal_child());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedChildExtensionData::CopyFrom(const TestNestedChildExtensionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedChildExtensionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedChildExtensionData::IsInitialized() const {
  return true;
}

void TestNestedChildExtensionData::InternalSwap(TestNestedChildExtensionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestNestedChildExtensionData, a_)
      + sizeof(TestNestedChildExtensionData::a_)
      - PROTOBUF_FIELD_OFFSET(TestNestedChildExtensionData, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedChildExtensionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[22]);
}

// ===================================================================

class TestRequired::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequired>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dummy2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dummy4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dummy5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dummy6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dummy7(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dummy8(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dummy9(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dummy10(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_dummy11(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dummy12(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dummy13(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dummy14(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dummy15(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_dummy16(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_dummy17(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_dummy18(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dummy19(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_dummy20(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_dummy21(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_dummy22(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_dummy23(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_dummy24(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_dummy25(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_dummy26(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_dummy27(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_dummy28(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_dummy29(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_dummy30(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_dummy31(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_dummy32(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::protobuf_unittest::ForeignMessage& optional_foreign(const TestRequired* msg);
  static void set_has_optional_foreign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0x0000000a) ^ 0x0000000a)
       | ((has_bits[1] & 0x00000002) ^ 0x00000002)) != 0;
  }
};

const ::protobuf_unittest::ForeignMessage&
TestRequired::_Internal::optional_foreign(const TestRequired* msg) {
  return *msg->optional_foreign_;
}
TestRequired::TestRequired(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequired)
}
TestRequired::TestRequired(const TestRequired& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_optional_foreign()) {
    optional_foreign_ = new ::protobuf_unittest::ForeignMessage(*from.optional_foreign_);
  } else {
    optional_foreign_ = nullptr;
  }
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequired)
}

inline void TestRequired::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optional_foreign_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&optional_foreign_)) + sizeof(c_));
}

TestRequired::~TestRequired() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequired)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRequired::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete optional_foreign_;
}

void TestRequired::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRequired::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequired)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_foreign_ != nullptr);
    optional_foreign_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy7_) -
        reinterpret_cast<char*>(&a_)) + sizeof(dummy7_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&dummy8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy15_) -
        reinterpret_cast<char*>(&dummy8_)) + sizeof(dummy15_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&dummy16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy23_) -
        reinterpret_cast<char*>(&dummy16_)) + sizeof(dummy23_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&dummy24_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dummy31_) -
        reinterpret_cast<char*>(&dummy24_)) + sizeof(dummy31_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dummy32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c_) -
        reinterpret_cast<char*>(&dummy32_)) + sizeof(c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRequired::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&_has_bits_);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_dummy2(&_has_bits_);
          dummy2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_b(&_has_bits_);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dummy4(&_has_bits_);
          dummy4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_dummy5(&_has_bits_);
          dummy5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_dummy6(&_has_bits_);
          dummy6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_dummy7(&_has_bits_);
          dummy7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_dummy8(&_has_bits_);
          dummy8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy9 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_dummy9(&_has_bits_);
          dummy9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_dummy10(&_has_bits_);
          dummy10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy11 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_dummy11(&_has_bits_);
          dummy11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy12 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_dummy12(&_has_bits_);
          dummy12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy13 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_dummy13(&_has_bits_);
          dummy13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy14 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_dummy14(&_has_bits_);
          dummy14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy15 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_dummy15(&_has_bits_);
          dummy15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy16 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_dummy16(&_has_bits_);
          dummy16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy17 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_dummy17(&_has_bits_);
          dummy17_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy18 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_dummy18(&_has_bits_);
          dummy18_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy19 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_dummy19(&_has_bits_);
          dummy19_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy20 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_dummy20(&_has_bits_);
          dummy20_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy21 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_dummy21(&_has_bits_);
          dummy21_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy22 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_dummy22(&_has_bits_);
          dummy22_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy23 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_dummy23(&_has_bits_);
          dummy23_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy24 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_dummy24(&_has_bits_);
          dummy24_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy25 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_dummy25(&_has_bits_);
          dummy25_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy26 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_dummy26(&_has_bits_);
          dummy26_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy27 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_dummy27(&_has_bits_);
          dummy27_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy28 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_dummy28(&_has_bits_);
          dummy28_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy29 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_dummy29(&_has_bits_);
          dummy29_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy30 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_dummy30(&_has_bits_);
          dummy30_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy31 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_dummy31(&_has_bits_);
          dummy31_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy32 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_dummy32(&_has_bits_);
          dummy32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 c = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_c(&_has_bits_);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage optional_foreign = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_foreign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRequired::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequired)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 a = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional int32 dummy2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_dummy2(), target);
  }

  // required int32 b = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  // optional int32 dummy4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_dummy4(), target);
  }

  // optional int32 dummy5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_dummy5(), target);
  }

  // optional int32 dummy6 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_dummy6(), target);
  }

  // optional int32 dummy7 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_dummy7(), target);
  }

  // optional int32 dummy8 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_dummy8(), target);
  }

  // optional int32 dummy9 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_dummy9(), target);
  }

  // optional int32 dummy10 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_dummy10(), target);
  }

  // optional int32 dummy11 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_dummy11(), target);
  }

  // optional int32 dummy12 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_dummy12(), target);
  }

  // optional int32 dummy13 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_dummy13(), target);
  }

  // optional int32 dummy14 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_dummy14(), target);
  }

  // optional int32 dummy15 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_dummy15(), target);
  }

  // optional int32 dummy16 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_dummy16(), target);
  }

  // optional int32 dummy17 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_dummy17(), target);
  }

  // optional int32 dummy18 = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_dummy18(), target);
  }

  // optional int32 dummy19 = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_dummy19(), target);
  }

  // optional int32 dummy20 = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_dummy20(), target);
  }

  // optional int32 dummy21 = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_dummy21(), target);
  }

  // optional int32 dummy22 = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_dummy22(), target);
  }

  // optional int32 dummy23 = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_dummy23(), target);
  }

  // optional int32 dummy24 = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_dummy24(), target);
  }

  // optional int32 dummy25 = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_dummy25(), target);
  }

  // optional int32 dummy26 = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_dummy26(), target);
  }

  // optional int32 dummy27 = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_dummy27(), target);
  }

  // optional int32 dummy28 = 28;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_dummy28(), target);
  }

  // optional int32 dummy29 = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_dummy29(), target);
  }

  // optional int32 dummy30 = 30;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_dummy30(), target);
  }

  // optional int32 dummy31 = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_dummy31(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 dummy32 = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_dummy32(), target);
  }

  // required int32 c = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_c(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.ForeignMessage optional_foreign = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::optional_foreign(this),
        _Internal::optional_foreign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequired)
  return target;
}

size_t TestRequired::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_unittest.TestRequired)
  size_t total_size = 0;

  if (_internal_has_a()) {
    // required int32 a = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
  }

  if (_internal_has_b()) {
    // required int32 b = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());
  }

  if (_internal_has_c()) {
    // required int32 c = 33;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_c());
  }

  return total_size;
}
size_t TestRequired::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequired)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0x0000000a) ^ 0x0000000a)
       | ((_has_bits_[1] & 0x00000002) ^ 0x00000002)) == 0) {  // All required fields are present.
    // required int32 a = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());

    // required int32 b = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());

    // required int32 c = 33;
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_c());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.ForeignMessage optional_foreign = 34;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_foreign_);
  }

  // optional int32 dummy2 = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy2());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional int32 dummy4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy4());
    }

    // optional int32 dummy5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy5());
    }

    // optional int32 dummy6 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy6());
    }

    // optional int32 dummy7 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy7());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 dummy8 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy8());
    }

    // optional int32 dummy9 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy9());
    }

    // optional int32 dummy10 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy10());
    }

    // optional int32 dummy11 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy11());
    }

    // optional int32 dummy12 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy12());
    }

    // optional int32 dummy13 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy13());
    }

    // optional int32 dummy14 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy14());
    }

    // optional int32 dummy15 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy15());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 dummy16 = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy16());
    }

    // optional int32 dummy17 = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy17());
    }

    // optional int32 dummy18 = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy18());
    }

    // optional int32 dummy19 = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy19());
    }

    // optional int32 dummy20 = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy20());
    }

    // optional int32 dummy21 = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy21());
    }

    // optional int32 dummy22 = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy22());
    }

    // optional int32 dummy23 = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy23());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 dummy24 = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy24());
    }

    // optional int32 dummy25 = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy25());
    }

    // optional int32 dummy26 = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy26());
    }

    // optional int32 dummy27 = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy27());
    }

    // optional int32 dummy28 = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy28());
    }

    // optional int32 dummy29 = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy29());
    }

    // optional int32 dummy30 = 30;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy30());
    }

    // optional int32 dummy31 = 31;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_dummy31());
    }

  }
  // optional int32 dummy32 = 32;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dummy32());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRequired::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestRequired::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRequired::GetClassData() const { return &_class_data_; }

void TestRequired::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestRequired *>(to)->MergeFrom(
      static_cast<const TestRequired &>(from));
}


void TestRequired::MergeFrom(const TestRequired& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequired)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_optional_foreign()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_optional_foreign());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000004u) {
      dummy2_ = from.dummy2_;
    }
    if (cached_has_bits & 0x00000008u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000010u) {
      dummy4_ = from.dummy4_;
    }
    if (cached_has_bits & 0x00000020u) {
      dummy5_ = from.dummy5_;
    }
    if (cached_has_bits & 0x00000040u) {
      dummy6_ = from.dummy6_;
    }
    if (cached_has_bits & 0x00000080u) {
      dummy7_ = from.dummy7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      dummy8_ = from.dummy8_;
    }
    if (cached_has_bits & 0x00000200u) {
      dummy9_ = from.dummy9_;
    }
    if (cached_has_bits & 0x00000400u) {
      dummy10_ = from.dummy10_;
    }
    if (cached_has_bits & 0x00000800u) {
      dummy11_ = from.dummy11_;
    }
    if (cached_has_bits & 0x00001000u) {
      dummy12_ = from.dummy12_;
    }
    if (cached_has_bits & 0x00002000u) {
      dummy13_ = from.dummy13_;
    }
    if (cached_has_bits & 0x00004000u) {
      dummy14_ = from.dummy14_;
    }
    if (cached_has_bits & 0x00008000u) {
      dummy15_ = from.dummy15_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      dummy16_ = from.dummy16_;
    }
    if (cached_has_bits & 0x00020000u) {
      dummy17_ = from.dummy17_;
    }
    if (cached_has_bits & 0x00040000u) {
      dummy18_ = from.dummy18_;
    }
    if (cached_has_bits & 0x00080000u) {
      dummy19_ = from.dummy19_;
    }
    if (cached_has_bits & 0x00100000u) {
      dummy20_ = from.dummy20_;
    }
    if (cached_has_bits & 0x00200000u) {
      dummy21_ = from.dummy21_;
    }
    if (cached_has_bits & 0x00400000u) {
      dummy22_ = from.dummy22_;
    }
    if (cached_has_bits & 0x00800000u) {
      dummy23_ = from.dummy23_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      dummy24_ = from.dummy24_;
    }
    if (cached_has_bits & 0x02000000u) {
      dummy25_ = from.dummy25_;
    }
    if (cached_has_bits & 0x04000000u) {
      dummy26_ = from.dummy26_;
    }
    if (cached_has_bits & 0x08000000u) {
      dummy27_ = from.dummy27_;
    }
    if (cached_has_bits & 0x10000000u) {
      dummy28_ = from.dummy28_;
    }
    if (cached_has_bits & 0x20000000u) {
      dummy29_ = from.dummy29_;
    }
    if (cached_has_bits & 0x40000000u) {
      dummy30_ = from.dummy30_;
    }
    if (cached_has_bits & 0x80000000u) {
      dummy31_ = from.dummy31_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dummy32_ = from.dummy32_;
    }
    if (cached_has_bits & 0x00000002u) {
      c_ = from.c_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRequired::CopyFrom(const TestRequired& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequired)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequired::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestRequired::InternalSwap(TestRequired* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRequired, c_)
      + sizeof(TestRequired::c_)
      - PROTOBUF_FIELD_OFFSET(TestRequired, optional_foreign_)>(
          reinterpret_cast<char*>(&optional_foreign_),
          reinterpret_cast<char*>(&other->optional_foreign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequired::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[23]);
}

// ===================================================================

class TestRequiredForeign::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredForeign>()._has_bits_);
  static const ::protobuf_unittest::TestRequired& optional_message(const TestRequiredForeign* msg);
  static void set_has_optional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestRequired&
TestRequiredForeign::_Internal::optional_message(const TestRequiredForeign* msg) {
  return *msg->optional_message_;
}
TestRequiredForeign::TestRequiredForeign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_message_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredForeign)
}
TestRequiredForeign::TestRequiredForeign(const TestRequiredForeign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_message_(from.repeated_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_optional_message()) {
    optional_message_ = new ::protobuf_unittest::TestRequired(*from.optional_message_);
  } else {
    optional_message_ = nullptr;
  }
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredForeign)
}

inline void TestRequiredForeign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optional_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dummy_) -
    reinterpret_cast<char*>(&optional_message_)) + sizeof(dummy_));
}

TestRequiredForeign::~TestRequiredForeign() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredForeign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRequiredForeign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete optional_message_;
}

void TestRequiredForeign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRequiredForeign::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredForeign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_message_ != nullptr);
    optional_message_->Clear();
  }
  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRequiredForeign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestRequired optional_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestRequired repeated_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRequiredForeign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredForeign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestRequired optional_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::optional_message(this),
        _Internal::optional_message(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 dummy = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredForeign)
  return target;
}

size_t TestRequiredForeign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredForeign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  total_size += 1UL * this->_internal_repeated_message_size();
  for (const auto& msg : this->repeated_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestRequired optional_message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_message_);
    }

    // optional int32 dummy = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRequiredForeign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestRequiredForeign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRequiredForeign::GetClassData() const { return &_class_data_; }

void TestRequiredForeign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestRequiredForeign *>(to)->MergeFrom(
      static_cast<const TestRequiredForeign &>(from));
}


void TestRequiredForeign::MergeFrom(const TestRequiredForeign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredForeign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_message_.MergeFrom(from.repeated_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_optional_message()->::protobuf_unittest::TestRequired::MergeFrom(from._internal_optional_message());
    }
    if (cached_has_bits & 0x00000002u) {
      dummy_ = from.dummy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRequiredForeign::CopyFrom(const TestRequiredForeign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredForeign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredForeign::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(repeated_message_))
    return false;
  if (_internal_has_optional_message()) {
    if (!optional_message_->IsInitialized()) return false;
  }
  return true;
}

void TestRequiredForeign::InternalSwap(TestRequiredForeign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_message_.InternalSwap(&other->repeated_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRequiredForeign, dummy_)
      + sizeof(TestRequiredForeign::dummy_)
      - PROTOBUF_FIELD_OFFSET(TestRequiredForeign, optional_message_)>(
          reinterpret_cast<char*>(&optional_message_),
          reinterpret_cast<char*>(&other->optional_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredForeign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[24]);
}

// ===================================================================

class TestRequiredMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredMessage>()._has_bits_);
  static const ::protobuf_unittest::TestRequired& optional_message(const TestRequiredMessage* msg);
  static void set_has_optional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestRequired& required_message(const TestRequiredMessage* msg);
  static void set_has_required_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::protobuf_unittest::TestRequired&
TestRequiredMessage::_Internal::optional_message(const TestRequiredMessage* msg) {
  return *msg->optional_message_;
}
const ::protobuf_unittest::TestRequired&
TestRequiredMessage::_Internal::required_message(const TestRequiredMessage* msg) {
  return *msg->required_message_;
}
TestRequiredMessage::TestRequiredMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_message_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredMessage)
}
TestRequiredMessage::TestRequiredMessage(const TestRequiredMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_message_(from.repeated_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_optional_message()) {
    optional_message_ = new ::protobuf_unittest::TestRequired(*from.optional_message_);
  } else {
    optional_message_ = nullptr;
  }
  if (from._internal_has_required_message()) {
    required_message_ = new ::protobuf_unittest::TestRequired(*from.required_message_);
  } else {
    required_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredMessage)
}

inline void TestRequiredMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optional_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&required_message_) -
    reinterpret_cast<char*>(&optional_message_)) + sizeof(required_message_));
}

TestRequiredMessage::~TestRequiredMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRequiredMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete optional_message_;
  if (this != internal_default_instance()) delete required_message_;
}

void TestRequiredMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRequiredMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(optional_message_ != nullptr);
      optional_message_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(required_message_ != nullptr);
      required_message_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRequiredMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestRequired optional_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestRequired repeated_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .protobuf_unittest.TestRequired required_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRequiredMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestRequired optional_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::optional_message(this),
        _Internal::optional_message(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .protobuf_unittest.TestRequired required_message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::required_message(this),
        _Internal::required_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredMessage)
  return target;
}

size_t TestRequiredMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredMessage)
  size_t total_size = 0;

  // required .protobuf_unittest.TestRequired required_message = 3;
  if (_internal_has_required_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_message_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  total_size += 1UL * this->_internal_repeated_message_size();
  for (const auto& msg : this->repeated_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .protobuf_unittest.TestRequired optional_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRequiredMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestRequiredMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRequiredMessage::GetClassData() const { return &_class_data_; }

void TestRequiredMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestRequiredMessage *>(to)->MergeFrom(
      static_cast<const TestRequiredMessage &>(from));
}


void TestRequiredMessage::MergeFrom(const TestRequiredMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_message_.MergeFrom(from.repeated_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_optional_message()->::protobuf_unittest::TestRequired::MergeFrom(from._internal_optional_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_required_message()->::protobuf_unittest::TestRequired::MergeFrom(from._internal_required_message());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRequiredMessage::CopyFrom(const TestRequiredMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(repeated_message_))
    return false;
  if (_internal_has_optional_message()) {
    if (!optional_message_->IsInitialized()) return false;
  }
  if (_internal_has_required_message()) {
    if (!required_message_->IsInitialized()) return false;
  }
  return true;
}

void TestRequiredMessage::InternalSwap(TestRequiredMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_message_.InternalSwap(&other->repeated_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRequiredMessage, required_message_)
      + sizeof(TestRequiredMessage::required_message_)
      - PROTOBUF_FIELD_OFFSET(TestRequiredMessage, optional_message_)>(
          reinterpret_cast<char*>(&optional_message_),
          reinterpret_cast<char*>(&other->optional_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[25]);
}

// ===================================================================

class TestNestedRequiredForeign::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedRequiredForeign>()._has_bits_);
  static const ::protobuf_unittest::TestNestedRequiredForeign& child(const TestNestedRequiredForeign* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestRequiredForeign& payload(const TestNestedRequiredForeign* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::TestNestedRequiredForeign&
TestNestedRequiredForeign::_Internal::child(const TestNestedRequiredForeign* msg) {
  return *msg->child_;
}
const ::protobuf_unittest::TestRequiredForeign&
TestNestedRequiredForeign::_Internal::payload(const TestNestedRequiredForeign* msg) {
  return *msg->payload_;
}
TestNestedRequiredForeign::TestNestedRequiredForeign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedRequiredForeign)
}
TestNestedRequiredForeign::TestNestedRequiredForeign(const TestNestedRequiredForeign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::protobuf_unittest::TestNestedRequiredForeign(*from.child_);
  } else {
    child_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new ::protobuf_unittest::TestRequiredForeign(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedRequiredForeign)
}

inline void TestNestedRequiredForeign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&child_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dummy_) -
    reinterpret_cast<char*>(&child_)) + sizeof(dummy_));
}

TestNestedRequiredForeign::~TestNestedRequiredForeign() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedRequiredForeign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedRequiredForeign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete child_;
  if (this != internal_default_instance()) delete payload_;
}

void TestNestedRequiredForeign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedRequiredForeign::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedRequiredForeign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(child_ != nullptr);
      child_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(payload_ != nullptr);
      payload_->Clear();
    }
  }
  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedRequiredForeign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestNestedRequiredForeign child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestRequiredForeign payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dummy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedRequiredForeign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedRequiredForeign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestNestedRequiredForeign child = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestRequiredForeign payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // optional int32 dummy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedRequiredForeign)
  return target;
}

size_t TestNestedRequiredForeign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedRequiredForeign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .protobuf_unittest.TestNestedRequiredForeign child = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *child_);
    }

    // optional .protobuf_unittest.TestRequiredForeign payload = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_);
    }

    // optional int32 dummy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedRequiredForeign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedRequiredForeign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedRequiredForeign::GetClassData() const { return &_class_data_; }

void TestNestedRequiredForeign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedRequiredForeign *>(to)->MergeFrom(
      static_cast<const TestNestedRequiredForeign &>(from));
}


void TestNestedRequiredForeign::MergeFrom(const TestNestedRequiredForeign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedRequiredForeign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_child()->::protobuf_unittest::TestNestedRequiredForeign::MergeFrom(from._internal_child());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_payload()->::protobuf_unittest::TestRequiredForeign::MergeFrom(from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      dummy_ = from.dummy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedRequiredForeign::CopyFrom(const TestNestedRequiredForeign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedRequiredForeign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedRequiredForeign::IsInitialized() const {
  if (_internal_has_child()) {
    if (!child_->IsInitialized()) return false;
  }
  if (_internal_has_payload()) {
    if (!payload_->IsInitialized()) return false;
  }
  return true;
}

void TestNestedRequiredForeign::InternalSwap(TestNestedRequiredForeign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestNestedRequiredForeign, dummy_)
      + sizeof(TestNestedRequiredForeign::dummy_)
      - PROTOBUF_FIELD_OFFSET(TestNestedRequiredForeign, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedRequiredForeign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[26]);
}

// ===================================================================

class TestForeignNested::_Internal {
 public:
  using HasBits = decltype(std::declval<TestForeignNested>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes_NestedMessage& foreign_nested(const TestForeignNested* msg);
  static void set_has_foreign_nested(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes_NestedMessage&
TestForeignNested::_Internal::foreign_nested(const TestForeignNested* msg) {
  return *msg->foreign_nested_;
}
TestForeignNested::TestForeignNested(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestForeignNested)
}
TestForeignNested::TestForeignNested(const TestForeignNested& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_foreign_nested()) {
    foreign_nested_ = new ::protobuf_unittest::TestAllTypes_NestedMessage(*from.foreign_nested_);
  } else {
    foreign_nested_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestForeignNested)
}

inline void TestForeignNested::SharedCtor() {
foreign_nested_ = nullptr;
}

TestForeignNested::~TestForeignNested() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestForeignNested)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestForeignNested::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete foreign_nested_;
}

void TestForeignNested::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestForeignNested::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestForeignNested)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(foreign_nested_ != nullptr);
    foreign_nested_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestForeignNested::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreign_nested(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestForeignNested::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestForeignNested)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::foreign_nested(this),
        _Internal::foreign_nested(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestForeignNested)
  return target;
}

size_t TestForeignNested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestForeignNested)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *foreign_nested_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestForeignNested::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestForeignNested::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestForeignNested::GetClassData() const { return &_class_data_; }

void TestForeignNested::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestForeignNested *>(to)->MergeFrom(
      static_cast<const TestForeignNested &>(from));
}


void TestForeignNested::MergeFrom(const TestForeignNested& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestForeignNested)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_foreign_nested()) {
    _internal_mutable_foreign_nested()->::protobuf_unittest::TestAllTypes_NestedMessage::MergeFrom(from._internal_foreign_nested());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestForeignNested::CopyFrom(const TestForeignNested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestForeignNested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestForeignNested::IsInitialized() const {
  return true;
}

void TestForeignNested::InternalSwap(TestForeignNested* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foreign_nested_, other->foreign_nested_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestForeignNested::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[27]);
}

// ===================================================================

class TestEmptyMessage::_Internal {
 public:
};

TestEmptyMessage::TestEmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEmptyMessage)
}
TestEmptyMessage::TestEmptyMessage(const TestEmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEmptyMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEmptyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEmptyMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestEmptyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[28]);
}

// ===================================================================

class TestEmptyMessageWithExtensions::_Internal {
 public:
};

TestEmptyMessageWithExtensions::TestEmptyMessageWithExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEmptyMessageWithExtensions)
}
TestEmptyMessageWithExtensions::TestEmptyMessageWithExtensions(const TestEmptyMessageWithExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEmptyMessageWithExtensions)
}

inline void TestEmptyMessageWithExtensions::SharedCtor() {
}

TestEmptyMessageWithExtensions::~TestEmptyMessageWithExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEmptyMessageWithExtensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEmptyMessageWithExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestEmptyMessageWithExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEmptyMessageWithExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestEmptyMessageWithExtensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEmptyMessageWithExtensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEmptyMessageWithExtensions)
  return target;
}

size_t TestEmptyMessageWithExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEmptyMessageWithExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestEmptyMessageWithExtensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEmptyMessageWithExtensions::GetClassData() const { return &_class_data_; }

void TestEmptyMessageWithExtensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestEmptyMessageWithExtensions *>(to)->MergeFrom(
      static_cast<const TestEmptyMessageWithExtensions &>(from));
}


void TestEmptyMessageWithExtensions::MergeFrom(const TestEmptyMessageWithExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestEmptyMessageWithExtensions::CopyFrom(const TestEmptyMessageWithExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEmptyMessageWithExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmptyMessageWithExtensions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestEmptyMessageWithExtensions::InternalSwap(TestEmptyMessageWithExtensions* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEmptyMessageWithExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[29]);
}

// ===================================================================

class TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPickleNestedMessage_NestedMessage_NestedNestedMessage>()._has_bits_);
  static void set_has_cc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
}
TestPickleNestedMessage_NestedMessage_NestedNestedMessage::TestPickleNestedMessage_NestedMessage_NestedNestedMessage(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cc_ = from.cc_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
}

inline void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SharedCtor() {
cc_ = 0;
}

TestPickleNestedMessage_NestedMessage_NestedNestedMessage::~TestPickleNestedMessage_NestedMessage_NestedNestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 cc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cc(&has_bits);
          cc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  return target;
}

size_t TestPickleNestedMessage_NestedMessage_NestedNestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 cc = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestPickleNestedMessage_NestedMessage_NestedNestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestPickleNestedMessage_NestedMessage_NestedNestedMessage::GetClassData() const { return &_class_data_; }

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestPickleNestedMessage_NestedMessage_NestedNestedMessage *>(to)->MergeFrom(
      static_cast<const TestPickleNestedMessage_NestedMessage_NestedNestedMessage &>(from));
}


void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::MergeFrom(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cc()) {
    _internal_set_cc(from._internal_cc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::CopyFrom(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPickleNestedMessage_NestedMessage_NestedNestedMessage::IsInitialized() const {
  return true;
}

void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::InternalSwap(TestPickleNestedMessage_NestedMessage_NestedNestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cc_, other->cc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage_NestedMessage_NestedNestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[30]);
}

// ===================================================================

class TestPickleNestedMessage_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestPickleNestedMessage_NestedMessage>()._has_bits_);
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
}
TestPickleNestedMessage_NestedMessage::TestPickleNestedMessage_NestedMessage(const TestPickleNestedMessage_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bb_ = from.bb_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
}

inline void TestPickleNestedMessage_NestedMessage::SharedCtor() {
bb_ = 0;
}

TestPickleNestedMessage_NestedMessage::~TestPickleNestedMessage_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestPickleNestedMessage_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestPickleNestedMessage_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestPickleNestedMessage_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bb_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestPickleNestedMessage_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestPickleNestedMessage_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  return target;
}

size_t TestPickleNestedMessage_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 bb = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bb());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestPickleNestedMessage_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestPickleNestedMessage_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestPickleNestedMessage_NestedMessage::GetClassData() const { return &_class_data_; }

void TestPickleNestedMessage_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestPickleNestedMessage_NestedMessage *>(to)->MergeFrom(
      static_cast<const TestPickleNestedMessage_NestedMessage &>(from));
}


void TestPickleNestedMessage_NestedMessage::MergeFrom(const TestPickleNestedMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bb()) {
    _internal_set_bb(from._internal_bb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestPickleNestedMessage_NestedMessage::CopyFrom(const TestPickleNestedMessage_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPickleNestedMessage_NestedMessage::IsInitialized() const {
  return true;
}

void TestPickleNestedMessage_NestedMessage::InternalSwap(TestPickleNestedMessage_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[31]);
}

// ===================================================================

class TestPickleNestedMessage::_Internal {
 public:
};

TestPickleNestedMessage::TestPickleNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPickleNestedMessage)
}
TestPickleNestedMessage::TestPickleNestedMessage(const TestPickleNestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPickleNestedMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestPickleNestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestPickleNestedMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestPickleNestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[32]);
}

// ===================================================================

class TestMultipleExtensionRanges::_Internal {
 public:
};

TestMultipleExtensionRanges::TestMultipleExtensionRanges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMultipleExtensionRanges)
}
TestMultipleExtensionRanges::TestMultipleExtensionRanges(const TestMultipleExtensionRanges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMultipleExtensionRanges)
}

inline void TestMultipleExtensionRanges::SharedCtor() {
}

TestMultipleExtensionRanges::~TestMultipleExtensionRanges() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMultipleExtensionRanges)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMultipleExtensionRanges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMultipleExtensionRanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMultipleExtensionRanges::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMultipleExtensionRanges)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMultipleExtensionRanges::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((336u <= tag && tag < 344u) ||
        (33144u <= tag && tag < 33952u) ||
        (524288u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMultipleExtensionRanges::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMultipleExtensionRanges)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [42, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 42, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMultipleExtensionRanges)
  return target;
}

size_t TestMultipleExtensionRanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMultipleExtensionRanges)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMultipleExtensionRanges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMultipleExtensionRanges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMultipleExtensionRanges::GetClassData() const { return &_class_data_; }

void TestMultipleExtensionRanges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMultipleExtensionRanges *>(to)->MergeFrom(
      static_cast<const TestMultipleExtensionRanges &>(from));
}


void TestMultipleExtensionRanges::MergeFrom(const TestMultipleExtensionRanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMultipleExtensionRanges)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultipleExtensionRanges::CopyFrom(const TestMultipleExtensionRanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMultipleExtensionRanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMultipleExtensionRanges::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestMultipleExtensionRanges::InternalSwap(TestMultipleExtensionRanges* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMultipleExtensionRanges::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[33]);
}

// ===================================================================

class TestReallyLargeTagNumber::_Internal {
 public:
  using HasBits = decltype(std::declval<TestReallyLargeTagNumber>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestReallyLargeTagNumber::TestReallyLargeTagNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestReallyLargeTagNumber)
}
TestReallyLargeTagNumber::TestReallyLargeTagNumber(const TestReallyLargeTagNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&bb_) -
    reinterpret_cast<char*>(&a_)) + sizeof(bb_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestReallyLargeTagNumber)
}

inline void TestReallyLargeTagNumber::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bb_) -
    reinterpret_cast<char*>(&a_)) + sizeof(bb_));
}

TestReallyLargeTagNumber::~TestReallyLargeTagNumber() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestReallyLargeTagNumber)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestReallyLargeTagNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestReallyLargeTagNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestReallyLargeTagNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestReallyLargeTagNumber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bb_) -
        reinterpret_cast<char*>(&a_)) + sizeof(bb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestReallyLargeTagNumber::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bb = 268435455;
      case 268435455:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestReallyLargeTagNumber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestReallyLargeTagNumber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional int32 bb = 268435455;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(268435455, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestReallyLargeTagNumber)
  return target;
}

size_t TestReallyLargeTagNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestReallyLargeTagNumber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

    // optional int32 bb = 268435455;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_bb());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestReallyLargeTagNumber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestReallyLargeTagNumber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestReallyLargeTagNumber::GetClassData() const { return &_class_data_; }

void TestReallyLargeTagNumber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestReallyLargeTagNumber *>(to)->MergeFrom(
      static_cast<const TestReallyLargeTagNumber &>(from));
}


void TestReallyLargeTagNumber::MergeFrom(const TestReallyLargeTagNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestReallyLargeTagNumber)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      bb_ = from.bb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestReallyLargeTagNumber::CopyFrom(const TestReallyLargeTagNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestReallyLargeTagNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReallyLargeTagNumber::IsInitialized() const {
  return true;
}

void TestReallyLargeTagNumber::InternalSwap(TestReallyLargeTagNumber* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestReallyLargeTagNumber, bb_)
      + sizeof(TestReallyLargeTagNumber::bb_)
      - PROTOBUF_FIELD_OFFSET(TestReallyLargeTagNumber, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestReallyLargeTagNumber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[34]);
}

// ===================================================================

class TestRecursiveMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRecursiveMessage>()._has_bits_);
  static const ::protobuf_unittest::TestRecursiveMessage& a(const TestRecursiveMessage* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestRecursiveMessage&
TestRecursiveMessage::_Internal::a(const TestRecursiveMessage* msg) {
  return *msg->a_;
}
TestRecursiveMessage::TestRecursiveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRecursiveMessage)
}
TestRecursiveMessage::TestRecursiveMessage(const TestRecursiveMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_a()) {
    a_ = new ::protobuf_unittest::TestRecursiveMessage(*from.a_);
  } else {
    a_ = nullptr;
  }
  i_ = from.i_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRecursiveMessage)
}

inline void TestRecursiveMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&i_) -
    reinterpret_cast<char*>(&a_)) + sizeof(i_));
}

TestRecursiveMessage::~TestRecursiveMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRecursiveMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRecursiveMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete a_;
}

void TestRecursiveMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRecursiveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRecursiveMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(a_ != nullptr);
    a_->Clear();
  }
  i_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRecursiveMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestRecursiveMessage a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRecursiveMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRecursiveMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestRecursiveMessage a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::a(this),
        _Internal::a(this).GetCachedSize(), target, stream);
  }

  // optional int32 i = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRecursiveMessage)
  return target;
}

size_t TestRecursiveMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRecursiveMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestRecursiveMessage a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a_);
    }

    // optional int32 i = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRecursiveMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestRecursiveMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRecursiveMessage::GetClassData() const { return &_class_data_; }

void TestRecursiveMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestRecursiveMessage *>(to)->MergeFrom(
      static_cast<const TestRecursiveMessage &>(from));
}


void TestRecursiveMessage::MergeFrom(const TestRecursiveMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRecursiveMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_a()->::protobuf_unittest::TestRecursiveMessage::MergeFrom(from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      i_ = from.i_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRecursiveMessage::CopyFrom(const TestRecursiveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRecursiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRecursiveMessage::IsInitialized() const {
  return true;
}

void TestRecursiveMessage::InternalSwap(TestRecursiveMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestRecursiveMessage, i_)
      + sizeof(TestRecursiveMessage::i_)
      - PROTOBUF_FIELD_OFFSET(TestRecursiveMessage, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRecursiveMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[35]);
}

// ===================================================================

class TestMutualRecursionA_SubMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMutualRecursionA_SubMessage>()._has_bits_);
  static const ::protobuf_unittest::TestMutualRecursionB& b(const TestMutualRecursionA_SubMessage* msg);
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestMutualRecursionB&
TestMutualRecursionA_SubMessage::_Internal::b(const TestMutualRecursionA_SubMessage* msg) {
  return *msg->b_;
}
TestMutualRecursionA_SubMessage::TestMutualRecursionA_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMutualRecursionA.SubMessage)
}
TestMutualRecursionA_SubMessage::TestMutualRecursionA_SubMessage(const TestMutualRecursionA_SubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_b()) {
    b_ = new ::protobuf_unittest::TestMutualRecursionB(*from.b_);
  } else {
    b_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMutualRecursionA.SubMessage)
}

inline void TestMutualRecursionA_SubMessage::SharedCtor() {
b_ = nullptr;
}

TestMutualRecursionA_SubMessage::~TestMutualRecursionA_SubMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMutualRecursionA.SubMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMutualRecursionA_SubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete b_;
}

void TestMutualRecursionA_SubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMutualRecursionA_SubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(b_ != nullptr);
    b_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMutualRecursionA_SubMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMutualRecursionB b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMutualRecursionA_SubMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMutualRecursionB b = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::b(this),
        _Internal::b(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMutualRecursionA.SubMessage)
  return target;
}

size_t TestMutualRecursionA_SubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestMutualRecursionB b = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMutualRecursionA_SubMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMutualRecursionA_SubMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMutualRecursionA_SubMessage::GetClassData() const { return &_class_data_; }

void TestMutualRecursionA_SubMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMutualRecursionA_SubMessage *>(to)->MergeFrom(
      static_cast<const TestMutualRecursionA_SubMessage &>(from));
}


void TestMutualRecursionA_SubMessage::MergeFrom(const TestMutualRecursionA_SubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_b()) {
    _internal_mutable_b()->::protobuf_unittest::TestMutualRecursionB::MergeFrom(from._internal_b());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMutualRecursionA_SubMessage::CopyFrom(const TestMutualRecursionA_SubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMutualRecursionA.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMutualRecursionA_SubMessage::IsInitialized() const {
  return true;
}

void TestMutualRecursionA_SubMessage::InternalSwap(TestMutualRecursionA_SubMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(b_, other->b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMutualRecursionA_SubMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[36]);
}

// ===================================================================

class TestMutualRecursionA_SubGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMutualRecursionA_SubGroup>()._has_bits_);
  static const ::protobuf_unittest::TestMutualRecursionA_SubMessage& sub_message(const TestMutualRecursionA_SubGroup* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& not_in_this_scc(const TestMutualRecursionA_SubGroup* msg);
  static void set_has_not_in_this_scc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestMutualRecursionA_SubMessage&
TestMutualRecursionA_SubGroup::_Internal::sub_message(const TestMutualRecursionA_SubGroup* msg) {
  return *msg->sub_message_;
}
const ::protobuf_unittest::TestAllTypes&
TestMutualRecursionA_SubGroup::_Internal::not_in_this_scc(const TestMutualRecursionA_SubGroup* msg) {
  return *msg->not_in_this_scc_;
}
TestMutualRecursionA_SubGroup::TestMutualRecursionA_SubGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMutualRecursionA.SubGroup)
}
TestMutualRecursionA_SubGroup::TestMutualRecursionA_SubGroup(const TestMutualRecursionA_SubGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_unittest::TestMutualRecursionA_SubMessage(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  if (from._internal_has_not_in_this_scc()) {
    not_in_this_scc_ = new ::protobuf_unittest::TestAllTypes(*from.not_in_this_scc_);
  } else {
    not_in_this_scc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMutualRecursionA.SubGroup)
}

inline void TestMutualRecursionA_SubGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sub_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&not_in_this_scc_) -
    reinterpret_cast<char*>(&sub_message_)) + sizeof(not_in_this_scc_));
}

TestMutualRecursionA_SubGroup::~TestMutualRecursionA_SubGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMutualRecursionA.SubGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMutualRecursionA_SubGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sub_message_;
  if (this != internal_default_instance()) delete not_in_this_scc_;
}

void TestMutualRecursionA_SubGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMutualRecursionA_SubGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sub_message_ != nullptr);
      sub_message_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(not_in_this_scc_ != nullptr);
      not_in_this_scc_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMutualRecursionA_SubGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes not_in_this_scc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_in_this_scc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMutualRecursionA_SubGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sub_message(this),
        _Internal::sub_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes not_in_this_scc = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::not_in_this_scc(this),
        _Internal::not_in_this_scc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMutualRecursionA.SubGroup)
  return target;
}

size_t TestMutualRecursionA_SubGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_message_);
    }

    // optional .protobuf_unittest.TestAllTypes not_in_this_scc = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *not_in_this_scc_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMutualRecursionA_SubGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMutualRecursionA_SubGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMutualRecursionA_SubGroup::GetClassData() const { return &_class_data_; }

void TestMutualRecursionA_SubGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMutualRecursionA_SubGroup *>(to)->MergeFrom(
      static_cast<const TestMutualRecursionA_SubGroup &>(from));
}


void TestMutualRecursionA_SubGroup::MergeFrom(const TestMutualRecursionA_SubGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sub_message()->::protobuf_unittest::TestMutualRecursionA_SubMessage::MergeFrom(from._internal_sub_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_not_in_this_scc()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_not_in_this_scc());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMutualRecursionA_SubGroup::CopyFrom(const TestMutualRecursionA_SubGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMutualRecursionA.SubGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMutualRecursionA_SubGroup::IsInitialized() const {
  return true;
}

void TestMutualRecursionA_SubGroup::InternalSwap(TestMutualRecursionA_SubGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMutualRecursionA_SubGroup, not_in_this_scc_)
      + sizeof(TestMutualRecursionA_SubGroup::not_in_this_scc_)
      - PROTOBUF_FIELD_OFFSET(TestMutualRecursionA_SubGroup, sub_message_)>(
          reinterpret_cast<char*>(&sub_message_),
          reinterpret_cast<char*>(&other->sub_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMutualRecursionA_SubGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[37]);
}

// ===================================================================

class TestMutualRecursionA::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMutualRecursionA>()._has_bits_);
  static const ::protobuf_unittest::TestMutualRecursionB& bb(const TestMutualRecursionA* msg);
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestMutualRecursionA_SubGroup& subgroup(const TestMutualRecursionA* msg);
  static void set_has_subgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestMutualRecursionB&
TestMutualRecursionA::_Internal::bb(const TestMutualRecursionA* msg) {
  return *msg->bb_;
}
const ::protobuf_unittest::TestMutualRecursionA_SubGroup&
TestMutualRecursionA::_Internal::subgroup(const TestMutualRecursionA* msg) {
  return *msg->subgroup_;
}
TestMutualRecursionA::TestMutualRecursionA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMutualRecursionA)
}
TestMutualRecursionA::TestMutualRecursionA(const TestMutualRecursionA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bb()) {
    bb_ = new ::protobuf_unittest::TestMutualRecursionB(*from.bb_);
  } else {
    bb_ = nullptr;
  }
  if (from._internal_has_subgroup()) {
    subgroup_ = new ::protobuf_unittest::TestMutualRecursionA_SubGroup(*from.subgroup_);
  } else {
    subgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMutualRecursionA)
}

inline void TestMutualRecursionA::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subgroup_) -
    reinterpret_cast<char*>(&bb_)) + sizeof(subgroup_));
}

TestMutualRecursionA::~TestMutualRecursionA() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMutualRecursionA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMutualRecursionA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bb_;
  if (this != internal_default_instance()) delete subgroup_;
}

void TestMutualRecursionA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMutualRecursionA::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMutualRecursionA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bb_ != nullptr);
      bb_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(subgroup_ != nullptr);
      subgroup_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMutualRecursionA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMutualRecursionB bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group SubGroup = 2 { ... };
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 19)) {
          ptr = ctx->ParseGroup(_internal_mutable_subgroup(), ptr, 19);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMutualRecursionA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMutualRecursionA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMutualRecursionB bb = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bb(this),
        _Internal::bb(this).GetCachedSize(), target, stream);
  }

  // optional group SubGroup = 2 { ... };
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        2, _Internal::subgroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMutualRecursionA)
  return target;
}

size_t TestMutualRecursionA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMutualRecursionA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestMutualRecursionB bb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bb_);
    }

    // optional group SubGroup = 2 { ... };
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *subgroup_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMutualRecursionA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMutualRecursionA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMutualRecursionA::GetClassData() const { return &_class_data_; }

void TestMutualRecursionA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMutualRecursionA *>(to)->MergeFrom(
      static_cast<const TestMutualRecursionA &>(from));
}


void TestMutualRecursionA::MergeFrom(const TestMutualRecursionA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMutualRecursionA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bb()->::protobuf_unittest::TestMutualRecursionB::MergeFrom(from._internal_bb());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_subgroup()->::protobuf_unittest::TestMutualRecursionA_SubGroup::MergeFrom(from._internal_subgroup());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMutualRecursionA::CopyFrom(const TestMutualRecursionA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMutualRecursionA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMutualRecursionA::IsInitialized() const {
  return true;
}

void TestMutualRecursionA::InternalSwap(TestMutualRecursionA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMutualRecursionA, subgroup_)
      + sizeof(TestMutualRecursionA::subgroup_)
      - PROTOBUF_FIELD_OFFSET(TestMutualRecursionA, bb_)>(
          reinterpret_cast<char*>(&bb_),
          reinterpret_cast<char*>(&other->bb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMutualRecursionA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[38]);
}

// ===================================================================

class TestMutualRecursionB::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMutualRecursionB>()._has_bits_);
  static const ::protobuf_unittest::TestMutualRecursionA& a(const TestMutualRecursionB* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestMutualRecursionA&
TestMutualRecursionB::_Internal::a(const TestMutualRecursionB* msg) {
  return *msg->a_;
}
TestMutualRecursionB::TestMutualRecursionB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMutualRecursionB)
}
TestMutualRecursionB::TestMutualRecursionB(const TestMutualRecursionB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_a()) {
    a_ = new ::protobuf_unittest::TestMutualRecursionA(*from.a_);
  } else {
    a_ = nullptr;
  }
  optional_int32_ = from.optional_int32_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMutualRecursionB)
}

inline void TestMutualRecursionB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&optional_int32_) -
    reinterpret_cast<char*>(&a_)) + sizeof(optional_int32_));
}

TestMutualRecursionB::~TestMutualRecursionB() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMutualRecursionB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMutualRecursionB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete a_;
}

void TestMutualRecursionB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMutualRecursionB::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMutualRecursionB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(a_ != nullptr);
    a_->Clear();
  }
  optional_int32_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMutualRecursionB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMutualRecursionA a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 optional_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_optional_int32(&has_bits);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMutualRecursionB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMutualRecursionB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMutualRecursionA a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::a(this),
        _Internal::a(this).GetCachedSize(), target, stream);
  }

  // optional int32 optional_int32 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_optional_int32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMutualRecursionB)
  return target;
}

size_t TestMutualRecursionB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMutualRecursionB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_unittest.TestMutualRecursionA a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a_);
    }

    // optional int32 optional_int32 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_optional_int32());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMutualRecursionB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMutualRecursionB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMutualRecursionB::GetClassData() const { return &_class_data_; }

void TestMutualRecursionB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMutualRecursionB *>(to)->MergeFrom(
      static_cast<const TestMutualRecursionB &>(from));
}


void TestMutualRecursionB::MergeFrom(const TestMutualRecursionB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMutualRecursionB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_a()->::protobuf_unittest::TestMutualRecursionA::MergeFrom(from._internal_a());
    }
    if (cached_has_bits & 0x00000002u) {
      optional_int32_ = from.optional_int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMutualRecursionB::CopyFrom(const TestMutualRecursionB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMutualRecursionB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMutualRecursionB::IsInitialized() const {
  return true;
}

void TestMutualRecursionB::InternalSwap(TestMutualRecursionB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMutualRecursionB, optional_int32_)
      + sizeof(TestMutualRecursionB::optional_int32_)
      - PROTOBUF_FIELD_OFFSET(TestMutualRecursionB, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMutualRecursionB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[39]);
}

// ===================================================================

class TestIsInitialized_SubMessage_SubGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestIsInitialized_SubMessage_SubGroup>()._has_bits_);
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestIsInitialized_SubMessage_SubGroup::TestIsInitialized_SubMessage_SubGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
}
TestIsInitialized_SubMessage_SubGroup::TestIsInitialized_SubMessage_SubGroup(const TestIsInitialized_SubMessage_SubGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_ = from.i_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
}

inline void TestIsInitialized_SubMessage_SubGroup::SharedCtor() {
i_ = 0;
}

TestIsInitialized_SubMessage_SubGroup::~TestIsInitialized_SubMessage_SubGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestIsInitialized_SubMessage_SubGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestIsInitialized_SubMessage_SubGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestIsInitialized_SubMessage_SubGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestIsInitialized_SubMessage_SubGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestIsInitialized_SubMessage_SubGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 i = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  return target;
}

size_t TestIsInitialized_SubMessage_SubGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  size_t total_size = 0;

  // required int32 i = 2;
  if (_internal_has_i()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestIsInitialized_SubMessage_SubGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestIsInitialized_SubMessage_SubGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestIsInitialized_SubMessage_SubGroup::GetClassData() const { return &_class_data_; }

void TestIsInitialized_SubMessage_SubGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestIsInitialized_SubMessage_SubGroup *>(to)->MergeFrom(
      static_cast<const TestIsInitialized_SubMessage_SubGroup &>(from));
}


void TestIsInitialized_SubMessage_SubGroup::MergeFrom(const TestIsInitialized_SubMessage_SubGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_i()) {
    _internal_set_i(from._internal_i());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestIsInitialized_SubMessage_SubGroup::CopyFrom(const TestIsInitialized_SubMessage_SubGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIsInitialized_SubMessage_SubGroup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestIsInitialized_SubMessage_SubGroup::InternalSwap(TestIsInitialized_SubMessage_SubGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(i_, other->i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestIsInitialized_SubMessage_SubGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[40]);
}

// ===================================================================

class TestIsInitialized_SubMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestIsInitialized_SubMessage>()._has_bits_);
  static const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup& subgroup(const TestIsInitialized_SubMessage* msg);
  static void set_has_subgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup&
TestIsInitialized_SubMessage::_Internal::subgroup(const TestIsInitialized_SubMessage* msg) {
  return *msg->subgroup_;
}
TestIsInitialized_SubMessage::TestIsInitialized_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIsInitialized.SubMessage)
}
TestIsInitialized_SubMessage::TestIsInitialized_SubMessage(const TestIsInitialized_SubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subgroup()) {
    subgroup_ = new ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup(*from.subgroup_);
  } else {
    subgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIsInitialized.SubMessage)
}

inline void TestIsInitialized_SubMessage::SharedCtor() {
subgroup_ = nullptr;
}

TestIsInitialized_SubMessage::~TestIsInitialized_SubMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIsInitialized.SubMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestIsInitialized_SubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete subgroup_;
}

void TestIsInitialized_SubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestIsInitialized_SubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIsInitialized.SubMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(subgroup_ != nullptr);
    subgroup_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestIsInitialized_SubMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional group SubGroup = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 11)) {
          ptr = ctx->ParseGroup(_internal_mutable_subgroup(), ptr, 11);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestIsInitialized_SubMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIsInitialized.SubMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional group SubGroup = 1 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        1, _Internal::subgroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIsInitialized.SubMessage)
  return target;
}

size_t TestIsInitialized_SubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIsInitialized.SubMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional group SubGroup = 1 { ... };
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
        *subgroup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestIsInitialized_SubMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestIsInitialized_SubMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestIsInitialized_SubMessage::GetClassData() const { return &_class_data_; }

void TestIsInitialized_SubMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestIsInitialized_SubMessage *>(to)->MergeFrom(
      static_cast<const TestIsInitialized_SubMessage &>(from));
}


void TestIsInitialized_SubMessage::MergeFrom(const TestIsInitialized_SubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIsInitialized.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subgroup()) {
    _internal_mutable_subgroup()->::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup::MergeFrom(from._internal_subgroup());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestIsInitialized_SubMessage::CopyFrom(const TestIsInitialized_SubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIsInitialized.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIsInitialized_SubMessage::IsInitialized() const {
  if (_internal_has_subgroup()) {
    if (!subgroup_->IsInitialized()) return false;
  }
  return true;
}

void TestIsInitialized_SubMessage::InternalSwap(TestIsInitialized_SubMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(subgroup_, other->subgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestIsInitialized_SubMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[41]);
}

// ===================================================================

class TestIsInitialized::_Internal {
 public:
  using HasBits = decltype(std::declval<TestIsInitialized>()._has_bits_);
  static const ::protobuf_unittest::TestIsInitialized_SubMessage& sub_message(const TestIsInitialized* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestIsInitialized_SubMessage&
TestIsInitialized::_Internal::sub_message(const TestIsInitialized* msg) {
  return *msg->sub_message_;
}
TestIsInitialized::TestIsInitialized(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIsInitialized)
}
TestIsInitialized::TestIsInitialized(const TestIsInitialized& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_unittest::TestIsInitialized_SubMessage(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIsInitialized)
}

inline void TestIsInitialized::SharedCtor() {
sub_message_ = nullptr;
}

TestIsInitialized::~TestIsInitialized() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIsInitialized)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestIsInitialized::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sub_message_;
}

void TestIsInitialized::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestIsInitialized::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIsInitialized)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sub_message_ != nullptr);
    sub_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestIsInitialized::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestIsInitialized::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIsInitialized)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sub_message(this),
        _Internal::sub_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIsInitialized)
  return target;
}

size_t TestIsInitialized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIsInitialized)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestIsInitialized::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestIsInitialized::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestIsInitialized::GetClassData() const { return &_class_data_; }

void TestIsInitialized::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestIsInitialized *>(to)->MergeFrom(
      static_cast<const TestIsInitialized &>(from));
}


void TestIsInitialized::MergeFrom(const TestIsInitialized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIsInitialized)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sub_message()) {
    _internal_mutable_sub_message()->::protobuf_unittest::TestIsInitialized_SubMessage::MergeFrom(from._internal_sub_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestIsInitialized::CopyFrom(const TestIsInitialized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIsInitialized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIsInitialized::IsInitialized() const {
  if (_internal_has_sub_message()) {
    if (!sub_message_->IsInitialized()) return false;
  }
  return true;
}

void TestIsInitialized::InternalSwap(TestIsInitialized* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sub_message_, other->sub_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestIsInitialized::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[42]);
}

// ===================================================================

class TestDupFieldNumber_Foo::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDupFieldNumber_Foo>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDupFieldNumber_Foo::TestDupFieldNumber_Foo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDupFieldNumber.Foo)
}
TestDupFieldNumber_Foo::TestDupFieldNumber_Foo(const TestDupFieldNumber_Foo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDupFieldNumber.Foo)
}

inline void TestDupFieldNumber_Foo::SharedCtor() {
a_ = 0;
}

TestDupFieldNumber_Foo::~TestDupFieldNumber_Foo() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDupFieldNumber.Foo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDupFieldNumber_Foo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestDupFieldNumber_Foo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDupFieldNumber_Foo::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDupFieldNumber.Foo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDupFieldNumber_Foo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDupFieldNumber_Foo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDupFieldNumber.Foo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDupFieldNumber.Foo)
  return target;
}

size_t TestDupFieldNumber_Foo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDupFieldNumber.Foo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDupFieldNumber_Foo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDupFieldNumber_Foo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDupFieldNumber_Foo::GetClassData() const { return &_class_data_; }

void TestDupFieldNumber_Foo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDupFieldNumber_Foo *>(to)->MergeFrom(
      static_cast<const TestDupFieldNumber_Foo &>(from));
}


void TestDupFieldNumber_Foo::MergeFrom(const TestDupFieldNumber_Foo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDupFieldNumber.Foo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDupFieldNumber_Foo::CopyFrom(const TestDupFieldNumber_Foo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDupFieldNumber.Foo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDupFieldNumber_Foo::IsInitialized() const {
  return true;
}

void TestDupFieldNumber_Foo::InternalSwap(TestDupFieldNumber_Foo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDupFieldNumber_Foo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[43]);
}

// ===================================================================

class TestDupFieldNumber_Bar::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDupFieldNumber_Bar>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDupFieldNumber_Bar::TestDupFieldNumber_Bar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDupFieldNumber.Bar)
}
TestDupFieldNumber_Bar::TestDupFieldNumber_Bar(const TestDupFieldNumber_Bar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDupFieldNumber.Bar)
}

inline void TestDupFieldNumber_Bar::SharedCtor() {
a_ = 0;
}

TestDupFieldNumber_Bar::~TestDupFieldNumber_Bar() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDupFieldNumber.Bar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDupFieldNumber_Bar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestDupFieldNumber_Bar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDupFieldNumber_Bar::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDupFieldNumber.Bar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDupFieldNumber_Bar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDupFieldNumber_Bar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDupFieldNumber.Bar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDupFieldNumber.Bar)
  return target;
}

size_t TestDupFieldNumber_Bar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDupFieldNumber.Bar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDupFieldNumber_Bar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDupFieldNumber_Bar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDupFieldNumber_Bar::GetClassData() const { return &_class_data_; }

void TestDupFieldNumber_Bar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDupFieldNumber_Bar *>(to)->MergeFrom(
      static_cast<const TestDupFieldNumber_Bar &>(from));
}


void TestDupFieldNumber_Bar::MergeFrom(const TestDupFieldNumber_Bar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDupFieldNumber.Bar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDupFieldNumber_Bar::CopyFrom(const TestDupFieldNumber_Bar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDupFieldNumber.Bar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDupFieldNumber_Bar::IsInitialized() const {
  return true;
}

void TestDupFieldNumber_Bar::InternalSwap(TestDupFieldNumber_Bar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDupFieldNumber_Bar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[44]);
}

// ===================================================================

class TestDupFieldNumber::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDupFieldNumber>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf_unittest::TestDupFieldNumber_Foo& foo(const TestDupFieldNumber* msg);
  static void set_has_foo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestDupFieldNumber_Bar& bar(const TestDupFieldNumber* msg);
  static void set_has_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestDupFieldNumber_Foo&
TestDupFieldNumber::_Internal::foo(const TestDupFieldNumber* msg) {
  return *msg->foo_;
}
const ::protobuf_unittest::TestDupFieldNumber_Bar&
TestDupFieldNumber::_Internal::bar(const TestDupFieldNumber* msg) {
  return *msg->bar_;
}
TestDupFieldNumber::TestDupFieldNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDupFieldNumber)
}
TestDupFieldNumber::TestDupFieldNumber(const TestDupFieldNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_foo()) {
    foo_ = new ::protobuf_unittest::TestDupFieldNumber_Foo(*from.foo_);
  } else {
    foo_ = nullptr;
  }
  if (from._internal_has_bar()) {
    bar_ = new ::protobuf_unittest::TestDupFieldNumber_Bar(*from.bar_);
  } else {
    bar_ = nullptr;
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDupFieldNumber)
}

inline void TestDupFieldNumber::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&foo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&foo_)) + sizeof(a_));
}

TestDupFieldNumber::~TestDupFieldNumber() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDupFieldNumber)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDupFieldNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete foo_;
  if (this != internal_default_instance()) delete bar_;
}

void TestDupFieldNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDupFieldNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDupFieldNumber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(foo_ != nullptr);
      foo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bar_ != nullptr);
      bar_->Clear();
    }
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDupFieldNumber::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group Foo = 2 { ... };
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 19)) {
          ptr = ctx->ParseGroup(_internal_mutable_foo(), ptr, 19);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group Bar = 3 { ... };
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 27)) {
          ptr = ctx->ParseGroup(_internal_mutable_bar(), ptr, 27);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDupFieldNumber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDupFieldNumber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional group Foo = 2 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        2, _Internal::foo(this), target, stream);
  }

  // optional group Bar = 3 { ... };
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        3, _Internal::bar(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDupFieldNumber)
  return target;
}

size_t TestDupFieldNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDupFieldNumber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional group Foo = 2 { ... };
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *foo_);
    }

    // optional group Bar = 3 { ... };
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *bar_);
    }

    // optional int32 a = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDupFieldNumber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDupFieldNumber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDupFieldNumber::GetClassData() const { return &_class_data_; }

void TestDupFieldNumber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDupFieldNumber *>(to)->MergeFrom(
      static_cast<const TestDupFieldNumber &>(from));
}


void TestDupFieldNumber::MergeFrom(const TestDupFieldNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDupFieldNumber)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_foo()->::protobuf_unittest::TestDupFieldNumber_Foo::MergeFrom(from._internal_foo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bar()->::protobuf_unittest::TestDupFieldNumber_Bar::MergeFrom(from._internal_bar());
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDupFieldNumber::CopyFrom(const TestDupFieldNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDupFieldNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDupFieldNumber::IsInitialized() const {
  return true;
}

void TestDupFieldNumber::InternalSwap(TestDupFieldNumber* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDupFieldNumber, a_)
      + sizeof(TestDupFieldNumber::a_)
      - PROTOBUF_FIELD_OFFSET(TestDupFieldNumber, foo_)>(
          reinterpret_cast<char*>(&foo_),
          reinterpret_cast<char*>(&other->foo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDupFieldNumber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[45]);
}

// ===================================================================

class TestEagerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEagerMessage>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& sub_message(const TestEagerMessage* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestEagerMessage::_Internal::sub_message(const TestEagerMessage* msg) {
  return *msg->sub_message_;
}
TestEagerMessage::TestEagerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEagerMessage)
}
TestEagerMessage::TestEagerMessage(const TestEagerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_unittest::TestAllTypes(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEagerMessage)
}

inline void TestEagerMessage::SharedCtor() {
sub_message_ = nullptr;
}

TestEagerMessage::~TestEagerMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEagerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEagerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sub_message_;
}

void TestEagerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEagerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEagerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sub_message_ != nullptr);
    sub_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestEagerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEagerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEagerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sub_message(this),
        _Internal::sub_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEagerMessage)
  return target;
}

size_t TestEagerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEagerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEagerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestEagerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEagerMessage::GetClassData() const { return &_class_data_; }

void TestEagerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestEagerMessage *>(to)->MergeFrom(
      static_cast<const TestEagerMessage &>(from));
}


void TestEagerMessage::MergeFrom(const TestEagerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEagerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sub_message()) {
    _internal_mutable_sub_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_sub_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestEagerMessage::CopyFrom(const TestEagerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEagerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEagerMessage::IsInitialized() const {
  return true;
}

void TestEagerMessage::InternalSwap(TestEagerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sub_message_, other->sub_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEagerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[46]);
}

// ===================================================================

class TestLazyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestLazyMessage>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& sub_message(const TestLazyMessage* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestLazyMessage::_Internal::sub_message(const TestLazyMessage* msg) {
  return *msg->sub_message_;
}
TestLazyMessage::TestLazyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestLazyMessage)
}
TestLazyMessage::TestLazyMessage(const TestLazyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_unittest::TestAllTypes(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestLazyMessage)
}

inline void TestLazyMessage::SharedCtor() {
sub_message_ = nullptr;
}

TestLazyMessage::~TestLazyMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestLazyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestLazyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sub_message_;
}

void TestLazyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestLazyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestLazyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sub_message_ != nullptr);
    sub_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestLazyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestLazyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestLazyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sub_message(this),
        _Internal::sub_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestLazyMessage)
  return target;
}

size_t TestLazyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestLazyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestLazyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestLazyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestLazyMessage::GetClassData() const { return &_class_data_; }

void TestLazyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestLazyMessage *>(to)->MergeFrom(
      static_cast<const TestLazyMessage &>(from));
}


void TestLazyMessage::MergeFrom(const TestLazyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestLazyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sub_message()) {
    _internal_mutable_sub_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_sub_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestLazyMessage::CopyFrom(const TestLazyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestLazyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestLazyMessage::IsInitialized() const {
  return true;
}

void TestLazyMessage::InternalSwap(TestLazyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sub_message_, other->sub_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestLazyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[47]);
}

// ===================================================================

class TestEagerMaybeLazy_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEagerMaybeLazy_NestedMessage>()._has_bits_);
  static const ::protobuf_unittest::TestPackedTypes& packed(const TestEagerMaybeLazy_NestedMessage* msg);
  static void set_has_packed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestPackedTypes&
TestEagerMaybeLazy_NestedMessage::_Internal::packed(const TestEagerMaybeLazy_NestedMessage* msg) {
  return *msg->packed_;
}
TestEagerMaybeLazy_NestedMessage::TestEagerMaybeLazy_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
}
TestEagerMaybeLazy_NestedMessage::TestEagerMaybeLazy_NestedMessage(const TestEagerMaybeLazy_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_packed()) {
    packed_ = new ::protobuf_unittest::TestPackedTypes(*from.packed_);
  } else {
    packed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
}

inline void TestEagerMaybeLazy_NestedMessage::SharedCtor() {
packed_ = nullptr;
}

TestEagerMaybeLazy_NestedMessage::~TestEagerMaybeLazy_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEagerMaybeLazy_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete packed_;
}

void TestEagerMaybeLazy_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEagerMaybeLazy_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(packed_ != nullptr);
    packed_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestEagerMaybeLazy_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestPackedTypes packed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEagerMaybeLazy_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestPackedTypes packed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packed(this),
        _Internal::packed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
  return target;
}

size_t TestEagerMaybeLazy_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestPackedTypes packed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packed_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEagerMaybeLazy_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestEagerMaybeLazy_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEagerMaybeLazy_NestedMessage::GetClassData() const { return &_class_data_; }

void TestEagerMaybeLazy_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestEagerMaybeLazy_NestedMessage *>(to)->MergeFrom(
      static_cast<const TestEagerMaybeLazy_NestedMessage &>(from));
}


void TestEagerMaybeLazy_NestedMessage::MergeFrom(const TestEagerMaybeLazy_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_packed()) {
    _internal_mutable_packed()->::protobuf_unittest::TestPackedTypes::MergeFrom(from._internal_packed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestEagerMaybeLazy_NestedMessage::CopyFrom(const TestEagerMaybeLazy_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEagerMaybeLazy_NestedMessage::IsInitialized() const {
  return true;
}

void TestEagerMaybeLazy_NestedMessage::InternalSwap(TestEagerMaybeLazy_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packed_, other->packed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEagerMaybeLazy_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[48]);
}

// ===================================================================

class TestEagerMaybeLazy::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEagerMaybeLazy>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& message_foo(const TestEagerMaybeLazy* msg);
  static void set_has_message_foo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& message_bar(const TestEagerMaybeLazy* msg);
  static void set_has_message_bar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage& message_baz(const TestEagerMaybeLazy* msg);
  static void set_has_message_baz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestEagerMaybeLazy::_Internal::message_foo(const TestEagerMaybeLazy* msg) {
  return *msg->message_foo_;
}
const ::protobuf_unittest::TestAllTypes&
TestEagerMaybeLazy::_Internal::message_bar(const TestEagerMaybeLazy* msg) {
  return *msg->message_bar_;
}
const ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage&
TestEagerMaybeLazy::_Internal::message_baz(const TestEagerMaybeLazy* msg) {
  return *msg->message_baz_;
}
TestEagerMaybeLazy::TestEagerMaybeLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEagerMaybeLazy)
}
TestEagerMaybeLazy::TestEagerMaybeLazy(const TestEagerMaybeLazy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message_foo()) {
    message_foo_ = new ::protobuf_unittest::TestAllTypes(*from.message_foo_);
  } else {
    message_foo_ = nullptr;
  }
  if (from._internal_has_message_bar()) {
    message_bar_ = new ::protobuf_unittest::TestAllTypes(*from.message_bar_);
  } else {
    message_bar_ = nullptr;
  }
  if (from._internal_has_message_baz()) {
    message_baz_ = new ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage(*from.message_baz_);
  } else {
    message_baz_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEagerMaybeLazy)
}

inline void TestEagerMaybeLazy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_foo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_baz_) -
    reinterpret_cast<char*>(&message_foo_)) + sizeof(message_baz_));
}

TestEagerMaybeLazy::~TestEagerMaybeLazy() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEagerMaybeLazy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEagerMaybeLazy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_foo_;
  if (this != internal_default_instance()) delete message_bar_;
  if (this != internal_default_instance()) delete message_baz_;
}

void TestEagerMaybeLazy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEagerMaybeLazy::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEagerMaybeLazy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(message_foo_ != nullptr);
      message_foo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_bar_ != nullptr);
      message_bar_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(message_baz_ != nullptr);
      message_baz_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestEagerMaybeLazy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes message_foo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_foo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes message_bar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_bar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestEagerMaybeLazy.NestedMessage message_baz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_baz(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEagerMaybeLazy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEagerMaybeLazy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes message_foo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message_foo(this),
        _Internal::message_foo(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes message_bar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message_bar(this),
        _Internal::message_bar(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestEagerMaybeLazy.NestedMessage message_baz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::message_baz(this),
        _Internal::message_baz(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEagerMaybeLazy)
  return target;
}

size_t TestEagerMaybeLazy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEagerMaybeLazy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .protobuf_unittest.TestAllTypes message_foo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_foo_);
    }

    // optional .protobuf_unittest.TestAllTypes message_bar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_bar_);
    }

    // optional .protobuf_unittest.TestEagerMaybeLazy.NestedMessage message_baz = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_baz_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestEagerMaybeLazy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestEagerMaybeLazy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestEagerMaybeLazy::GetClassData() const { return &_class_data_; }

void TestEagerMaybeLazy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestEagerMaybeLazy *>(to)->MergeFrom(
      static_cast<const TestEagerMaybeLazy &>(from));
}


void TestEagerMaybeLazy::MergeFrom(const TestEagerMaybeLazy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEagerMaybeLazy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_message_foo()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_message_foo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message_bar()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_message_bar());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_message_baz()->::protobuf_unittest::TestEagerMaybeLazy_NestedMessage::MergeFrom(from._internal_message_baz());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestEagerMaybeLazy::CopyFrom(const TestEagerMaybeLazy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEagerMaybeLazy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEagerMaybeLazy::IsInitialized() const {
  return true;
}

void TestEagerMaybeLazy::InternalSwap(TestEagerMaybeLazy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestEagerMaybeLazy, message_baz_)
      + sizeof(TestEagerMaybeLazy::message_baz_)
      - PROTOBUF_FIELD_OFFSET(TestEagerMaybeLazy, message_foo_)>(
          reinterpret_cast<char*>(&message_foo_),
          reinterpret_cast<char*>(&other->message_foo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEagerMaybeLazy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[49]);
}

// ===================================================================

class TestNestedMessageHasBits_NestedMessage::_Internal {
 public:
};

TestNestedMessageHasBits_NestedMessage::TestNestedMessageHasBits_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nestedmessage_repeated_int32_(arena),
  nestedmessage_repeated_foreignmessage_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
}
TestNestedMessageHasBits_NestedMessage::TestNestedMessageHasBits_NestedMessage(const TestNestedMessageHasBits_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nestedmessage_repeated_int32_(from.nestedmessage_repeated_int32_),
      nestedmessage_repeated_foreignmessage_(from.nestedmessage_repeated_foreignmessage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
}

inline void TestNestedMessageHasBits_NestedMessage::SharedCtor() {
}

TestNestedMessageHasBits_NestedMessage::~TestNestedMessageHasBits_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedMessageHasBits_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestNestedMessageHasBits_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedMessageHasBits_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nestedmessage_repeated_int32_.Clear();
  nestedmessage_repeated_foreignmessage_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedMessageHasBits_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 nestedmessage_repeated_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nestedmessage_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nestedmessage_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nestedmessage_repeated_foreignmessage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedMessageHasBits_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 nestedmessage_repeated_int32 = 1;
  for (int i = 0, n = this->_internal_nestedmessage_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nestedmessage_repeated_int32(i), target);
  }

  // repeated .protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nestedmessage_repeated_foreignmessage_size()); i < n; i++) {
    const auto& repfield = this->_internal_nestedmessage_repeated_foreignmessage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  return target;
}

size_t TestNestedMessageHasBits_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nestedmessage_repeated_int32 = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->nestedmessage_repeated_int32_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_nestedmessage_repeated_int32_size());
    total_size += data_size;
  }

  // repeated .protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
  total_size += 1UL * this->_internal_nestedmessage_repeated_foreignmessage_size();
  for (const auto& msg : this->nestedmessage_repeated_foreignmessage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedMessageHasBits_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedMessageHasBits_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedMessageHasBits_NestedMessage::GetClassData() const { return &_class_data_; }

void TestNestedMessageHasBits_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedMessageHasBits_NestedMessage *>(to)->MergeFrom(
      static_cast<const TestNestedMessageHasBits_NestedMessage &>(from));
}


void TestNestedMessageHasBits_NestedMessage::MergeFrom(const TestNestedMessageHasBits_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nestedmessage_repeated_int32_.MergeFrom(from.nestedmessage_repeated_int32_);
  nestedmessage_repeated_foreignmessage_.MergeFrom(from.nestedmessage_repeated_foreignmessage_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedMessageHasBits_NestedMessage::CopyFrom(const TestNestedMessageHasBits_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedMessageHasBits_NestedMessage::IsInitialized() const {
  return true;
}

void TestNestedMessageHasBits_NestedMessage::InternalSwap(TestNestedMessageHasBits_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nestedmessage_repeated_int32_.InternalSwap(&other->nestedmessage_repeated_int32_);
  nestedmessage_repeated_foreignmessage_.InternalSwap(&other->nestedmessage_repeated_foreignmessage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedMessageHasBits_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[50]);
}

// ===================================================================

class TestNestedMessageHasBits::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedMessageHasBits>()._has_bits_);
  static const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage& optional_nested_message(const TestNestedMessageHasBits* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage&
TestNestedMessageHasBits::_Internal::optional_nested_message(const TestNestedMessageHasBits* msg) {
  return *msg->optional_nested_message_;
}
TestNestedMessageHasBits::TestNestedMessageHasBits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedMessageHasBits)
}
TestNestedMessageHasBits::TestNestedMessageHasBits(const TestNestedMessageHasBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedMessageHasBits)
}

inline void TestNestedMessageHasBits::SharedCtor() {
optional_nested_message_ = nullptr;
}

TestNestedMessageHasBits::~TestNestedMessageHasBits() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedMessageHasBits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedMessageHasBits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete optional_nested_message_;
}

void TestNestedMessageHasBits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedMessageHasBits::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedMessageHasBits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_nested_message_ != nullptr);
    optional_nested_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedMessageHasBits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedMessageHasBits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedMessageHasBits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::optional_nested_message(this),
        _Internal::optional_nested_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedMessageHasBits)
  return target;
}

size_t TestNestedMessageHasBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedMessageHasBits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_nested_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedMessageHasBits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedMessageHasBits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedMessageHasBits::GetClassData() const { return &_class_data_; }

void TestNestedMessageHasBits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedMessageHasBits *>(to)->MergeFrom(
      static_cast<const TestNestedMessageHasBits &>(from));
}


void TestNestedMessageHasBits::MergeFrom(const TestNestedMessageHasBits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedMessageHasBits)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_optional_nested_message()) {
    _internal_mutable_optional_nested_message()->::protobuf_unittest::TestNestedMessageHasBits_NestedMessage::MergeFrom(from._internal_optional_nested_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedMessageHasBits::CopyFrom(const TestNestedMessageHasBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedMessageHasBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedMessageHasBits::IsInitialized() const {
  return true;
}

void TestNestedMessageHasBits::InternalSwap(TestNestedMessageHasBits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(optional_nested_message_, other->optional_nested_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedMessageHasBits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[51]);
}

// ===================================================================

class TestCamelCaseFieldNames::_Internal {
 public:
  using HasBits = decltype(std::declval<TestCamelCaseFieldNames>()._has_bits_);
  static void set_has_primitivefield(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stringfield(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enumfield(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::protobuf_unittest::ForeignMessage& messagefield(const TestCamelCaseFieldNames* msg);
  static void set_has_messagefield(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stringpiecefield(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cordfield(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::ForeignMessage&
TestCamelCaseFieldNames::_Internal::messagefield(const TestCamelCaseFieldNames* msg) {
  return *msg->messagefield_;
}
TestCamelCaseFieldNames::TestCamelCaseFieldNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeatedprimitivefield_(arena),
  repeatedstringfield_(arena),
  repeatedenumfield_(arena),
  repeatedmessagefield_(arena),
  repeatedstringpiecefield_(arena),
  repeatedcordfield_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestCamelCaseFieldNames)
}
TestCamelCaseFieldNames::TestCamelCaseFieldNames(const TestCamelCaseFieldNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeatedprimitivefield_(from.repeatedprimitivefield_),
      repeatedstringfield_(from.repeatedstringfield_),
      repeatedenumfield_(from.repeatedenumfield_),
      repeatedmessagefield_(from.repeatedmessagefield_),
      repeatedstringpiecefield_(from.repeatedstringpiecefield_),
      repeatedcordfield_(from.repeatedcordfield_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stringfield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stringfield_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stringfield()) {
    stringfield_.Set(from._internal_stringfield(), 
      GetArenaForAllocation());
  }
  stringpiecefield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stringpiecefield_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stringpiecefield()) {
    stringpiecefield_.Set(from._internal_stringpiecefield(), 
      GetArenaForAllocation());
  }
  cordfield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cordfield_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cordfield()) {
    cordfield_.Set(from._internal_cordfield(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_messagefield()) {
    messagefield_ = new ::protobuf_unittest::ForeignMessage(*from.messagefield_);
  } else {
    messagefield_ = nullptr;
  }
  ::memcpy(&primitivefield_, &from.primitivefield_,
    static_cast<size_t>(reinterpret_cast<char*>(&enumfield_) -
    reinterpret_cast<char*>(&primitivefield_)) + sizeof(enumfield_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestCamelCaseFieldNames)
}

inline void TestCamelCaseFieldNames::SharedCtor() {
stringfield_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stringfield_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stringpiecefield_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stringpiecefield_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cordfield_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cordfield_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&messagefield_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&primitivefield_) -
    reinterpret_cast<char*>(&messagefield_)) + sizeof(primitivefield_));
enumfield_ = 4;
}

TestCamelCaseFieldNames::~TestCamelCaseFieldNames() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestCamelCaseFieldNames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestCamelCaseFieldNames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stringfield_.Destroy();
  stringpiecefield_.Destroy();
  cordfield_.Destroy();
  if (this != internal_default_instance()) delete messagefield_;
}

void TestCamelCaseFieldNames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestCamelCaseFieldNames::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestCamelCaseFieldNames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeatedprimitivefield_.Clear();
  repeatedstringfield_.Clear();
  repeatedenumfield_.Clear();
  repeatedmessagefield_.Clear();
  repeatedstringpiecefield_.Clear();
  repeatedcordfield_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stringfield_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      stringpiecefield_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      cordfield_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(messagefield_ != nullptr);
      messagefield_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    primitivefield_ = 0;
    enumfield_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestCamelCaseFieldNames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 PrimitiveField = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_primitivefield(&has_bits);
          primitivefield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string StringField = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stringfield();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.StringField");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum EnumField = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_enumfield(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage MessageField = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagefield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string StringPieceField = 5 [ctype = STRING_PIECE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stringpiecefield();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.StringPieceField");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string CordField = 6 [ctype = CORD];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cordfield();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.CordField");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated int32 RepeatedPrimitiveField = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeatedprimitivefield(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeatedprimitivefield(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string RepeatedStringField = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeatedstringfield();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
              _internal_add_repeatedenumfield(static_cast<::protobuf_unittest::ForeignEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeatedenumfield(), ptr, ctx, ::protobuf_unittest::ForeignEnum_IsValid, &_internal_metadata_, 9);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeatedmessagefield(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeatedstringpiecefield();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string RepeatedCordField = 12 [ctype = CORD];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeatedcordfield();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestCamelCaseFieldNames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestCamelCaseFieldNames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 PrimitiveField = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_primitivefield(), target);
  }

  // optional string StringField = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringfield().data(), static_cast<int>(this->_internal_stringfield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.StringField");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stringfield(), target);
  }

  // optional .protobuf_unittest.ForeignEnum EnumField = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_enumfield(), target);
  }

  // optional .protobuf_unittest.ForeignMessage MessageField = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::messagefield(this),
        _Internal::messagefield(this).GetCachedSize(), target, stream);
  }

  // optional string StringPieceField = 5 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringpiecefield().data(), static_cast<int>(this->_internal_stringpiecefield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.StringPieceField");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stringpiecefield(), target);
  }

  // optional string CordField = 6 [ctype = CORD];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cordfield().data(), static_cast<int>(this->_internal_cordfield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.CordField");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cordfield(), target);
  }

  // repeated int32 RepeatedPrimitiveField = 7;
  for (int i = 0, n = this->_internal_repeatedprimitivefield_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_repeatedprimitivefield(i), target);
  }

  // repeated string RepeatedStringField = 8;
  for (int i = 0, n = this->_internal_repeatedstringfield_size(); i < n; i++) {
    const auto& s = this->_internal_repeatedstringfield(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField");
    target = stream->WriteString(8, s, target);
  }

  // repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
  for (int i = 0, n = this->_internal_repeatedenumfield_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_repeatedenumfield(i), target);
  }

  // repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeatedmessagefield_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeatedmessagefield(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeatedstringpiecefield_size(); i < n; i++) {
    const auto& s = this->_internal_repeatedstringpiecefield(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField");
    target = stream->WriteString(11, s, target);
  }

  // repeated string RepeatedCordField = 12 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeatedcordfield_size(); i < n; i++) {
    const auto& s = this->_internal_repeatedcordfield(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestCamelCaseFieldNames)
  return target;
}

size_t TestCamelCaseFieldNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestCamelCaseFieldNames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 RepeatedPrimitiveField = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeatedprimitivefield_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_repeatedprimitivefield_size());
    total_size += data_size;
  }

  // repeated string RepeatedStringField = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeatedstringfield_.size());
  for (int i = 0, n = repeatedstringfield_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeatedstringfield_.Get(i));
  }

  // repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeatedenumfield_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeatedenumfield(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
  total_size += 1UL * this->_internal_repeatedmessagefield_size();
  for (const auto& msg : this->repeatedmessagefield_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeatedstringpiecefield_.size());
  for (int i = 0, n = repeatedstringpiecefield_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeatedstringpiecefield_.Get(i));
  }

  // repeated string RepeatedCordField = 12 [ctype = CORD];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeatedcordfield_.size());
  for (int i = 0, n = repeatedcordfield_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeatedcordfield_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string StringField = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringfield());
    }

    // optional string StringPieceField = 5 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringpiecefield());
    }

    // optional string CordField = 6 [ctype = CORD];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cordfield());
    }

    // optional .protobuf_unittest.ForeignMessage MessageField = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *messagefield_);
    }

    // optional int32 PrimitiveField = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_primitivefield());
    }

    // optional .protobuf_unittest.ForeignEnum EnumField = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_enumfield());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestCamelCaseFieldNames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestCamelCaseFieldNames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestCamelCaseFieldNames::GetClassData() const { return &_class_data_; }

void TestCamelCaseFieldNames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestCamelCaseFieldNames *>(to)->MergeFrom(
      static_cast<const TestCamelCaseFieldNames &>(from));
}


void TestCamelCaseFieldNames::MergeFrom(const TestCamelCaseFieldNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestCamelCaseFieldNames)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeatedprimitivefield_.MergeFrom(from.repeatedprimitivefield_);
  repeatedstringfield_.MergeFrom(from.repeatedstringfield_);
  repeatedenumfield_.MergeFrom(from.repeatedenumfield_);
  repeatedmessagefield_.MergeFrom(from.repeatedmessagefield_);
  repeatedstringpiecefield_.MergeFrom(from.repeatedstringpiecefield_);
  repeatedcordfield_.MergeFrom(from.repeatedcordfield_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringfield(from._internal_stringfield());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_stringpiecefield(from._internal_stringpiecefield());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cordfield(from._internal_cordfield());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_messagefield()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_messagefield());
    }
    if (cached_has_bits & 0x00000010u) {
      primitivefield_ = from.primitivefield_;
    }
    if (cached_has_bits & 0x00000020u) {
      enumfield_ = from.enumfield_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestCamelCaseFieldNames::CopyFrom(const TestCamelCaseFieldNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestCamelCaseFieldNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCamelCaseFieldNames::IsInitialized() const {
  return true;
}

void TestCamelCaseFieldNames::InternalSwap(TestCamelCaseFieldNames* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeatedprimitivefield_.InternalSwap(&other->repeatedprimitivefield_);
  repeatedstringfield_.InternalSwap(&other->repeatedstringfield_);
  repeatedenumfield_.InternalSwap(&other->repeatedenumfield_);
  repeatedmessagefield_.InternalSwap(&other->repeatedmessagefield_);
  repeatedstringpiecefield_.InternalSwap(&other->repeatedstringpiecefield_);
  repeatedcordfield_.InternalSwap(&other->repeatedcordfield_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stringfield_, lhs_arena,
      &other->stringfield_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stringpiecefield_, lhs_arena,
      &other->stringpiecefield_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cordfield_, lhs_arena,
      &other->cordfield_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestCamelCaseFieldNames, primitivefield_)
      + sizeof(TestCamelCaseFieldNames::primitivefield_)
      - PROTOBUF_FIELD_OFFSET(TestCamelCaseFieldNames, messagefield_)>(
          reinterpret_cast<char*>(&messagefield_),
          reinterpret_cast<char*>(&other->messagefield_));
  swap(enumfield_, other->enumfield_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCamelCaseFieldNames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[52]);
}

// ===================================================================

class TestFieldOrderings_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldOrderings_NestedMessage>()._has_bits_);
  static void set_has_oo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestFieldOrderings_NestedMessage::TestFieldOrderings_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestFieldOrderings.NestedMessage)
}
TestFieldOrderings_NestedMessage::TestFieldOrderings_NestedMessage(const TestFieldOrderings_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&oo_, &from.oo_,
    static_cast<size_t>(reinterpret_cast<char*>(&bb_) -
    reinterpret_cast<char*>(&oo_)) + sizeof(bb_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestFieldOrderings.NestedMessage)
}

inline void TestFieldOrderings_NestedMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bb_) -
    reinterpret_cast<char*>(&oo_)) + sizeof(bb_));
}

TestFieldOrderings_NestedMessage::~TestFieldOrderings_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestFieldOrderings.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestFieldOrderings_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestFieldOrderings_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestFieldOrderings_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&oo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bb_) -
        reinterpret_cast<char*>(&oo_)) + sizeof(bb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldOrderings_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 oo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_oo(&has_bits);
          oo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestFieldOrderings_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bb = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  // optional int64 oo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_oo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestFieldOrderings.NestedMessage)
  return target;
}

size_t TestFieldOrderings_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 oo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_oo());
    }

    // optional int32 bb = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bb());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestFieldOrderings_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestFieldOrderings_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestFieldOrderings_NestedMessage::GetClassData() const { return &_class_data_; }

void TestFieldOrderings_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestFieldOrderings_NestedMessage *>(to)->MergeFrom(
      static_cast<const TestFieldOrderings_NestedMessage &>(from));
}


void TestFieldOrderings_NestedMessage::MergeFrom(const TestFieldOrderings_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      oo_ = from.oo_;
    }
    if (cached_has_bits & 0x00000002u) {
      bb_ = from.bb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestFieldOrderings_NestedMessage::CopyFrom(const TestFieldOrderings_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestFieldOrderings.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldOrderings_NestedMessage::IsInitialized() const {
  return true;
}

void TestFieldOrderings_NestedMessage::InternalSwap(TestFieldOrderings_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestFieldOrderings_NestedMessage, bb_)
      + sizeof(TestFieldOrderings_NestedMessage::bb_)
      - PROTOBUF_FIELD_OFFSET(TestFieldOrderings_NestedMessage, oo_)>(
          reinterpret_cast<char*>(&oo_),
          reinterpret_cast<char*>(&other->oo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldOrderings_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[53]);
}

// ===================================================================

class TestFieldOrderings::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldOrderings>()._has_bits_);
  static void set_has_my_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_my_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_my_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest::TestFieldOrderings_NestedMessage& optional_nested_message(const TestFieldOrderings* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestFieldOrderings_NestedMessage&
TestFieldOrderings::_Internal::optional_nested_message(const TestFieldOrderings* msg) {
  return *msg->optional_nested_message_;
}
TestFieldOrderings::TestFieldOrderings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestFieldOrderings)
}
TestFieldOrderings::TestFieldOrderings(const TestFieldOrderings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  my_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    my_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_my_string()) {
    my_string_.Set(from._internal_my_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_unittest::TestFieldOrderings_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  ::memcpy(&my_int_, &from.my_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&my_float_) -
    reinterpret_cast<char*>(&my_int_)) + sizeof(my_float_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestFieldOrderings)
}

inline void TestFieldOrderings::SharedCtor() {
my_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  my_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optional_nested_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&my_float_) -
    reinterpret_cast<char*>(&optional_nested_message_)) + sizeof(my_float_));
}

TestFieldOrderings::~TestFieldOrderings() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestFieldOrderings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestFieldOrderings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  my_string_.Destroy();
  if (this != internal_default_instance()) delete optional_nested_message_;
}

void TestFieldOrderings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestFieldOrderings::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestFieldOrderings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      my_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(optional_nested_message_ != nullptr);
      optional_nested_message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&my_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&my_float_) -
        reinterpret_cast<char*>(&my_int_)) + sizeof(my_float_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldOrderings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 my_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_my_int(&has_bits);
          my_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string my_string = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_my_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestFieldOrderings.my_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float my_float = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_my_float(&has_bits);
          my_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((16u <= tag && tag < 88u) ||
        (96u <= tag && tag < 808u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestFieldOrderings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestFieldOrderings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 my_int = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_my_int(), target);
  }

  // Extension range [2, 11)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 2, 11, target, stream);

  // optional string my_string = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestFieldOrderings.my_string");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_my_string(), target);
  }

  // Extension range [12, 101)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 12, 101, target, stream);

  // optional float my_float = 101;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(101, this->_internal_my_float(), target);
  }

  // optional .protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(200, _Internal::optional_nested_message(this),
        _Internal::optional_nested_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestFieldOrderings)
  return target;
}

size_t TestFieldOrderings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestFieldOrderings)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string my_string = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_my_string());
    }

    // optional .protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_nested_message_);
    }

    // optional int64 my_int = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_my_int());
    }

    // optional float my_float = 101;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestFieldOrderings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestFieldOrderings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestFieldOrderings::GetClassData() const { return &_class_data_; }

void TestFieldOrderings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestFieldOrderings *>(to)->MergeFrom(
      static_cast<const TestFieldOrderings &>(from));
}


void TestFieldOrderings::MergeFrom(const TestFieldOrderings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestFieldOrderings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_my_string(from._internal_my_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_optional_nested_message()->::protobuf_unittest::TestFieldOrderings_NestedMessage::MergeFrom(from._internal_optional_nested_message());
    }
    if (cached_has_bits & 0x00000004u) {
      my_int_ = from.my_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      my_float_ = from.my_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestFieldOrderings::CopyFrom(const TestFieldOrderings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestFieldOrderings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldOrderings::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestFieldOrderings::InternalSwap(TestFieldOrderings* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &my_string_, lhs_arena,
      &other->my_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestFieldOrderings, my_float_)
      + sizeof(TestFieldOrderings::my_float_)
      - PROTOBUF_FIELD_OFFSET(TestFieldOrderings, optional_nested_message_)>(
          reinterpret_cast<char*>(&optional_nested_message_),
          reinterpret_cast<char*>(&other->optional_nested_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldOrderings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[54]);
}

// ===================================================================

class TestExtensionOrderings1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionOrderings1>()._has_bits_);
  static void set_has_my_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestExtensionOrderings1::TestExtensionOrderings1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionOrderings1)
}
TestExtensionOrderings1::TestExtensionOrderings1(const TestExtensionOrderings1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  my_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    my_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_my_string()) {
    my_string_.Set(from._internal_my_string(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionOrderings1)
}

inline void TestExtensionOrderings1::SharedCtor() {
my_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  my_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestExtensionOrderings1::~TestExtensionOrderings1() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionOrderings1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestExtensionOrderings1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  my_string_.Destroy();
}

void TestExtensionOrderings1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestExtensionOrderings1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionOrderings1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    my_string_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestExtensionOrderings1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string my_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_my_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtensionOrderings1.my_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestExtensionOrderings1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionOrderings1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string my_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtensionOrderings1.my_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_my_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionOrderings1)
  return target;
}

size_t TestExtensionOrderings1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionOrderings1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string my_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_my_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestExtensionOrderings1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestExtensionOrderings1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestExtensionOrderings1::GetClassData() const { return &_class_data_; }

void TestExtensionOrderings1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestExtensionOrderings1 *>(to)->MergeFrom(
      static_cast<const TestExtensionOrderings1 &>(from));
}


void TestExtensionOrderings1::MergeFrom(const TestExtensionOrderings1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionOrderings1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_my_string()) {
    _internal_set_my_string(from._internal_my_string());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestExtensionOrderings1::CopyFrom(const TestExtensionOrderings1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionOrderings1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionOrderings1::IsInitialized() const {
  return true;
}

void TestExtensionOrderings1::InternalSwap(TestExtensionOrderings1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &my_string_, lhs_arena,
      &other->my_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionOrderings1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[55]);
}

// ===================================================================

class TestExtensionOrderings2_TestExtensionOrderings3::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionOrderings2_TestExtensionOrderings3>()._has_bits_);
  static void set_has_my_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestExtensionOrderings2_TestExtensionOrderings3::TestExtensionOrderings2_TestExtensionOrderings3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
}
TestExtensionOrderings2_TestExtensionOrderings3::TestExtensionOrderings2_TestExtensionOrderings3(const TestExtensionOrderings2_TestExtensionOrderings3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  my_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    my_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_my_string()) {
    my_string_.Set(from._internal_my_string(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
}

inline void TestExtensionOrderings2_TestExtensionOrderings3::SharedCtor() {
my_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  my_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestExtensionOrderings2_TestExtensionOrderings3::~TestExtensionOrderings2_TestExtensionOrderings3() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestExtensionOrderings2_TestExtensionOrderings3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  my_string_.Destroy();
}

void TestExtensionOrderings2_TestExtensionOrderings3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestExtensionOrderings2_TestExtensionOrderings3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    my_string_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestExtensionOrderings2_TestExtensionOrderings3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string my_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_my_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestExtensionOrderings2_TestExtensionOrderings3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string my_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_my_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  return target;
}

size_t TestExtensionOrderings2_TestExtensionOrderings3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string my_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_my_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestExtensionOrderings2_TestExtensionOrderings3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestExtensionOrderings2_TestExtensionOrderings3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestExtensionOrderings2_TestExtensionOrderings3::GetClassData() const { return &_class_data_; }

void TestExtensionOrderings2_TestExtensionOrderings3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestExtensionOrderings2_TestExtensionOrderings3 *>(to)->MergeFrom(
      static_cast<const TestExtensionOrderings2_TestExtensionOrderings3 &>(from));
}


void TestExtensionOrderings2_TestExtensionOrderings3::MergeFrom(const TestExtensionOrderings2_TestExtensionOrderings3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_my_string()) {
    _internal_set_my_string(from._internal_my_string());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestExtensionOrderings2_TestExtensionOrderings3::CopyFrom(const TestExtensionOrderings2_TestExtensionOrderings3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionOrderings2_TestExtensionOrderings3::IsInitialized() const {
  return true;
}

void TestExtensionOrderings2_TestExtensionOrderings3::InternalSwap(TestExtensionOrderings2_TestExtensionOrderings3* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &my_string_, lhs_arena,
      &other->my_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionOrderings2_TestExtensionOrderings3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[56]);
}

// ===================================================================

class TestExtensionOrderings2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionOrderings2>()._has_bits_);
  static void set_has_my_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestExtensionOrderings2::TestExtensionOrderings2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionOrderings2)
}
TestExtensionOrderings2::TestExtensionOrderings2(const TestExtensionOrderings2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  my_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    my_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_my_string()) {
    my_string_.Set(from._internal_my_string(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionOrderings2)
}

inline void TestExtensionOrderings2::SharedCtor() {
my_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  my_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestExtensionOrderings2::~TestExtensionOrderings2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionOrderings2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestExtensionOrderings2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  my_string_.Destroy();
}

void TestExtensionOrderings2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestExtensionOrderings2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionOrderings2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    my_string_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestExtensionOrderings2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string my_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_my_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtensionOrderings2.my_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestExtensionOrderings2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionOrderings2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string my_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtensionOrderings2.my_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_my_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionOrderings2)
  return target;
}

size_t TestExtensionOrderings2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionOrderings2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string my_string = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_my_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestExtensionOrderings2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestExtensionOrderings2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestExtensionOrderings2::GetClassData() const { return &_class_data_; }

void TestExtensionOrderings2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestExtensionOrderings2 *>(to)->MergeFrom(
      static_cast<const TestExtensionOrderings2 &>(from));
}


void TestExtensionOrderings2::MergeFrom(const TestExtensionOrderings2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionOrderings2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_my_string()) {
    _internal_set_my_string(from._internal_my_string());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestExtensionOrderings2::CopyFrom(const TestExtensionOrderings2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionOrderings2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionOrderings2::IsInitialized() const {
  return true;
}

void TestExtensionOrderings2::InternalSwap(TestExtensionOrderings2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &my_string_, lhs_arena,
      &other->my_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionOrderings2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[57]);
}

// ===================================================================

class TestExtremeDefaultValues::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtremeDefaultValues>()._has_bits_);
  static void set_has_escaped_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_large_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_large_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_small_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_small_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_really_small_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_really_small_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_utf8_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zero_float(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_one_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_small_float(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_negative_one_float(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_negative_float(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_large_float(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_small_negative_float(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_inf_double(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_neg_inf_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_nan_double(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_inf_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_neg_inf_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_nan_float(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_cpp_trigraph(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_with_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_with_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_string_piece_with_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cord_with_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_replacement_string(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_{{{"\000\001\007\010\014\n\r\t\013\\\'\"\376", 13}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_{{{"\341\210\264", 3}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_{{{"\? \? \?\? \?\? \?\?\? \?\?/ \?\?-", 21}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_{{{"hel\000lo", 6}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_{{{"wor\000ld", 6}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_{{{"ab\000c", 4}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_{{{"12\0003", 4}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_{{{"${unknown}", 10}}, {nullptr}};
TestExtremeDefaultValues::TestExtremeDefaultValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtremeDefaultValues)
}
TestExtremeDefaultValues::TestExtremeDefaultValues(const TestExtremeDefaultValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  escaped_bytes_.InitDefault();
  if (from._internal_has_escaped_bytes()) {
    escaped_bytes_.Set(from._internal_escaped_bytes(), 
      GetArenaForAllocation());
  }
  utf8_string_.InitDefault();
  if (from._internal_has_utf8_string()) {
    utf8_string_.Set(from._internal_utf8_string(), 
      GetArenaForAllocation());
  }
  cpp_trigraph_.InitDefault();
  if (from._internal_has_cpp_trigraph()) {
    cpp_trigraph_.Set(from._internal_cpp_trigraph(), 
      GetArenaForAllocation());
  }
  string_with_zero_.InitDefault();
  if (from._internal_has_string_with_zero()) {
    string_with_zero_.Set(from._internal_string_with_zero(), 
      GetArenaForAllocation());
  }
  bytes_with_zero_.InitDefault();
  if (from._internal_has_bytes_with_zero()) {
    bytes_with_zero_.Set(from._internal_bytes_with_zero(), 
      GetArenaForAllocation());
  }
  string_piece_with_zero_.InitDefault();
  if (from._internal_has_string_piece_with_zero()) {
    string_piece_with_zero_.Set(from._internal_string_piece_with_zero(), 
      GetArenaForAllocation());
  }
  cord_with_zero_.InitDefault();
  if (from._internal_has_cord_with_zero()) {
    cord_with_zero_.Set(from._internal_cord_with_zero(), 
      GetArenaForAllocation());
  }
  replacement_string_.InitDefault();
  if (from._internal_has_replacement_string()) {
    replacement_string_.Set(from._internal_replacement_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&zero_float_, &from.zero_float_,
    static_cast<size_t>(reinterpret_cast<char*>(&really_small_int64_) -
    reinterpret_cast<char*>(&zero_float_)) + sizeof(really_small_int64_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtremeDefaultValues)
}

inline void TestExtremeDefaultValues::SharedCtor() {
escaped_bytes_.InitDefault();
utf8_string_.InitDefault();
cpp_trigraph_.InitDefault();
string_with_zero_.InitDefault();
bytes_with_zero_.InitDefault();
string_piece_with_zero_.InitDefault();
cord_with_zero_.InitDefault();
replacement_string_.InitDefault();
zero_float_ = 0;
large_uint64_ = uint64_t{18446744073709551615u};
large_uint32_ = 4294967295u;
small_int32_ = -2147483647;
small_int64_ = int64_t{-9223372036854775807};
one_float_ = 1;
small_float_ = 1.5f;
negative_one_float_ = -1;
negative_float_ = -1.5f;
large_float_ = 2e+08f;
small_negative_float_ = -8e-28f;
inf_double_ = std::numeric_limits<double>::infinity();
neg_inf_double_ = -std::numeric_limits<double>::infinity();
nan_double_ = std::numeric_limits<double>::quiet_NaN();
inf_float_ = std::numeric_limits<float>::infinity();
neg_inf_float_ = -std::numeric_limits<float>::infinity();
nan_float_ = std::numeric_limits<float>::quiet_NaN();
really_small_int32_ = -2147483647 - 1;
really_small_int64_ = int64_t{-9223372036854775807} - 1;
}

TestExtremeDefaultValues::~TestExtremeDefaultValues() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtremeDefaultValues)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestExtremeDefaultValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  escaped_bytes_.Destroy();
  utf8_string_.Destroy();
  cpp_trigraph_.Destroy();
  string_with_zero_.Destroy();
  bytes_with_zero_.Destroy();
  string_piece_with_zero_.Destroy();
  cord_with_zero_.Destroy();
  replacement_string_.Destroy();
}

void TestExtremeDefaultValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestExtremeDefaultValues::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtremeDefaultValues)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      escaped_bytes_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      utf8_string_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      cpp_trigraph_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      string_with_zero_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      bytes_with_zero_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      string_piece_with_zero_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      cord_with_zero_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      replacement_string_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x0000ff00u) {
    zero_float_ = 0;
    large_uint64_ = uint64_t{18446744073709551615u};
    large_uint32_ = 4294967295u;
    small_int32_ = -2147483647;
    small_int64_ = int64_t{-9223372036854775807};
    one_float_ = 1;
    small_float_ = 1.5f;
    negative_one_float_ = -1;
  }
  if (cached_has_bits & 0x00ff0000u) {
    negative_float_ = -1.5f;
    large_float_ = 2e+08f;
    small_negative_float_ = -8e-28f;
    inf_double_ = std::numeric_limits<double>::infinity();
    neg_inf_double_ = -std::numeric_limits<double>::infinity();
    nan_double_ = std::numeric_limits<double>::quiet_NaN();
    inf_float_ = std::numeric_limits<float>::infinity();
    neg_inf_float_ = -std::numeric_limits<float>::infinity();
  }
  if (cached_has_bits & 0x07000000u) {
    nan_float_ = std::numeric_limits<float>::quiet_NaN();
    really_small_int32_ = -2147483647 - 1;
    really_small_int64_ = int64_t{-9223372036854775807} - 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestExtremeDefaultValues::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\"\376"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_escaped_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 large_uint32 = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_large_uint32(&has_bits);
          large_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 large_uint64 = 3 [default = 18446744073709551615];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_large_uint64(&has_bits);
          large_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 small_int32 = 4 [default = -2147483647];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_small_int32(&has_bits);
          small_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 small_int64 = 5 [default = -9223372036854775807];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_small_int64(&has_bits);
          small_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string utf8_string = 6 [default = "\341\210\264"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_utf8_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.utf8_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float zero_float = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_zero_float(&has_bits);
          zero_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float one_float = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_one_float(&has_bits);
          one_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float small_float = 9 [default = 1.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_small_float(&has_bits);
          small_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float negative_one_float = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_negative_one_float(&has_bits);
          negative_one_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float negative_float = 11 [default = -1.5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_negative_float(&has_bits);
          negative_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float large_float = 12 [default = 2e+08];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_large_float(&has_bits);
          large_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float small_negative_float = 13 [default = -8e-28];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_small_negative_float(&has_bits);
          small_negative_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double inf_double = 14 [default = inf];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_inf_double(&has_bits);
          inf_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double neg_inf_double = 15 [default = -inf];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_neg_inf_double(&has_bits);
          neg_inf_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double nan_double = 16 [default = nan];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_nan_double(&has_bits);
          nan_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float inf_float = 17 [default = inf];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_inf_float(&has_bits);
          inf_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float neg_inf_float = 18 [default = -inf];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_neg_inf_float(&has_bits);
          neg_inf_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float nan_float = 19 [default = nan];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_nan_float(&has_bits);
          nan_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_cpp_trigraph();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 really_small_int32 = 21 [default = -2147483648];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_really_small_int32(&has_bits);
          really_small_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 really_small_int64 = 22 [default = -9223372036854775808];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_really_small_int64(&has_bits);
          really_small_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_with_zero = 23 [default = "hel\000lo"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_string_with_zero();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.string_with_zero");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_bytes_with_zero();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_piece_with_zero = 25 [default = "ab\000c", ctype = STRING_PIECE];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_string_piece_with_zero();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string cord_with_zero = 26 [default = "12\0003", ctype = CORD];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_cord_with_zero();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.cord_with_zero");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string replacement_string = 27 [default = "${unknown}"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_replacement_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestExtremeDefaultValues.replacement_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestExtremeDefaultValues::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtremeDefaultValues)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\"\376"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_escaped_bytes(), target);
  }

  // optional uint32 large_uint32 = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_large_uint32(), target);
  }

  // optional uint64 large_uint64 = 3 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_large_uint64(), target);
  }

  // optional int32 small_int32 = 4 [default = -2147483647];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_small_int32(), target);
  }

  // optional int64 small_int64 = 5 [default = -9223372036854775807];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_small_int64(), target);
  }

  // optional string utf8_string = 6 [default = "\341\210\264"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_utf8_string().data(), static_cast<int>(this->_internal_utf8_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.utf8_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_utf8_string(), target);
  }

  // optional float zero_float = 7 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_zero_float(), target);
  }

  // optional float one_float = 8 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_one_float(), target);
  }

  // optional float small_float = 9 [default = 1.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_small_float(), target);
  }

  // optional float negative_one_float = 10 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_negative_one_float(), target);
  }

  // optional float negative_float = 11 [default = -1.5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_negative_float(), target);
  }

  // optional float large_float = 12 [default = 2e+08];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_large_float(), target);
  }

  // optional float small_negative_float = 13 [default = -8e-28];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_small_negative_float(), target);
  }

  // optional double inf_double = 14 [default = inf];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_inf_double(), target);
  }

  // optional double neg_inf_double = 15 [default = -inf];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_neg_inf_double(), target);
  }

  // optional double nan_double = 16 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_nan_double(), target);
  }

  // optional float inf_float = 17 [default = inf];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_inf_float(), target);
  }

  // optional float neg_inf_float = 18 [default = -inf];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_neg_inf_float(), target);
  }

  // optional float nan_float = 19 [default = nan];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_nan_float(), target);
  }

  // optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cpp_trigraph().data(), static_cast<int>(this->_internal_cpp_trigraph().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_cpp_trigraph(), target);
  }

  // optional int32 really_small_int32 = 21 [default = -2147483648];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_really_small_int32(), target);
  }

  // optional int64 really_small_int64 = 22 [default = -9223372036854775808];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_really_small_int64(), target);
  }

  // optional string string_with_zero = 23 [default = "hel\000lo"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_with_zero().data(), static_cast<int>(this->_internal_string_with_zero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.string_with_zero");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_string_with_zero(), target);
  }

  // optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_bytes_with_zero(), target);
  }

  // optional string string_piece_with_zero = 25 [default = "ab\000c", ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_piece_with_zero().data(), static_cast<int>(this->_internal_string_piece_with_zero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_string_piece_with_zero(), target);
  }

  // optional string cord_with_zero = 26 [default = "12\0003", ctype = CORD];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cord_with_zero().data(), static_cast<int>(this->_internal_cord_with_zero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.cord_with_zero");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_cord_with_zero(), target);
  }

  // optional string replacement_string = 27 [default = "${unknown}"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_replacement_string().data(), static_cast<int>(this->_internal_replacement_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestExtremeDefaultValues.replacement_string");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_replacement_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtremeDefaultValues)
  return target;
}

size_t TestExtremeDefaultValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtremeDefaultValues)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\"\376"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_escaped_bytes());
    }

    // optional string utf8_string = 6 [default = "\341\210\264"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_utf8_string());
    }

    // optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpp_trigraph());
    }

    // optional string string_with_zero = 23 [default = "hel\000lo"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_with_zero());
    }

    // optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_with_zero());
    }

    // optional string string_piece_with_zero = 25 [default = "ab\000c", ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_piece_with_zero());
    }

    // optional string cord_with_zero = 26 [default = "12\0003", ctype = CORD];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cord_with_zero());
    }

    // optional string replacement_string = 27 [default = "${unknown}"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_replacement_string());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float zero_float = 7 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint64 large_uint64 = 3 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_large_uint64());
    }

    // optional uint32 large_uint32 = 2 [default = 4294967295];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_large_uint32());
    }

    // optional int32 small_int32 = 4 [default = -2147483647];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_small_int32());
    }

    // optional int64 small_int64 = 5 [default = -9223372036854775807];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_small_int64());
    }

    // optional float one_float = 8 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float small_float = 9 [default = 1.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float negative_one_float = 10 [default = -1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float negative_float = 11 [default = -1.5];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float large_float = 12 [default = 2e+08];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float small_negative_float = 13 [default = -8e-28];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional double inf_double = 14 [default = inf];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double neg_inf_double = 15 [default = -inf];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional double nan_double = 16 [default = nan];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional float inf_float = 17 [default = inf];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float neg_inf_float = 18 [default = -inf];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional float nan_float = 19 [default = nan];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 really_small_int32 = 21 [default = -2147483648];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_really_small_int32());
    }

    // optional int64 really_small_int64 = 22 [default = -9223372036854775808];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_really_small_int64());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestExtremeDefaultValues::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestExtremeDefaultValues::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestExtremeDefaultValues::GetClassData() const { return &_class_data_; }

void TestExtremeDefaultValues::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestExtremeDefaultValues *>(to)->MergeFrom(
      static_cast<const TestExtremeDefaultValues &>(from));
}


void TestExtremeDefaultValues::MergeFrom(const TestExtremeDefaultValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtremeDefaultValues)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_escaped_bytes(from._internal_escaped_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_utf8_string(from._internal_utf8_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_cpp_trigraph(from._internal_cpp_trigraph());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_string_with_zero(from._internal_string_with_zero());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_bytes_with_zero(from._internal_bytes_with_zero());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_string_piece_with_zero(from._internal_string_piece_with_zero());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_cord_with_zero(from._internal_cord_with_zero());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_replacement_string(from._internal_replacement_string());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      zero_float_ = from.zero_float_;
    }
    if (cached_has_bits & 0x00000200u) {
      large_uint64_ = from.large_uint64_;
    }
    if (cached_has_bits & 0x00000400u) {
      large_uint32_ = from.large_uint32_;
    }
    if (cached_has_bits & 0x00000800u) {
      small_int32_ = from.small_int32_;
    }
    if (cached_has_bits & 0x00001000u) {
      small_int64_ = from.small_int64_;
    }
    if (cached_has_bits & 0x00002000u) {
      one_float_ = from.one_float_;
    }
    if (cached_has_bits & 0x00004000u) {
      small_float_ = from.small_float_;
    }
    if (cached_has_bits & 0x00008000u) {
      negative_one_float_ = from.negative_one_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      negative_float_ = from.negative_float_;
    }
    if (cached_has_bits & 0x00020000u) {
      large_float_ = from.large_float_;
    }
    if (cached_has_bits & 0x00040000u) {
      small_negative_float_ = from.small_negative_float_;
    }
    if (cached_has_bits & 0x00080000u) {
      inf_double_ = from.inf_double_;
    }
    if (cached_has_bits & 0x00100000u) {
      neg_inf_double_ = from.neg_inf_double_;
    }
    if (cached_has_bits & 0x00200000u) {
      nan_double_ = from.nan_double_;
    }
    if (cached_has_bits & 0x00400000u) {
      inf_float_ = from.inf_float_;
    }
    if (cached_has_bits & 0x00800000u) {
      neg_inf_float_ = from.neg_inf_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      nan_float_ = from.nan_float_;
    }
    if (cached_has_bits & 0x02000000u) {
      really_small_int32_ = from.really_small_int32_;
    }
    if (cached_has_bits & 0x04000000u) {
      really_small_int64_ = from.really_small_int64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestExtremeDefaultValues::CopyFrom(const TestExtremeDefaultValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtremeDefaultValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtremeDefaultValues::IsInitialized() const {
  return true;
}

void TestExtremeDefaultValues::InternalSwap(TestExtremeDefaultValues* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &escaped_bytes_, lhs_arena,
      &other->escaped_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &utf8_string_, lhs_arena,
      &other->utf8_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cpp_trigraph_, lhs_arena,
      &other->cpp_trigraph_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &string_with_zero_, lhs_arena,
      &other->string_with_zero_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bytes_with_zero_, lhs_arena,
      &other->bytes_with_zero_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &string_piece_with_zero_, lhs_arena,
      &other->string_piece_with_zero_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cord_with_zero_, lhs_arena,
      &other->cord_with_zero_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &replacement_string_, lhs_arena,
      &other->replacement_string_, rhs_arena
  );
  swap(zero_float_, other->zero_float_);
  swap(large_uint64_, other->large_uint64_);
  swap(large_uint32_, other->large_uint32_);
  swap(small_int32_, other->small_int32_);
  swap(small_int64_, other->small_int64_);
  swap(one_float_, other->one_float_);
  swap(small_float_, other->small_float_);
  swap(negative_one_float_, other->negative_one_float_);
  swap(negative_float_, other->negative_float_);
  swap(large_float_, other->large_float_);
  swap(small_negative_float_, other->small_negative_float_);
  swap(inf_double_, other->inf_double_);
  swap(neg_inf_double_, other->neg_inf_double_);
  swap(nan_double_, other->nan_double_);
  swap(inf_float_, other->inf_float_);
  swap(neg_inf_float_, other->neg_inf_float_);
  swap(nan_float_, other->nan_float_);
  swap(really_small_int32_, other->really_small_int32_);
  swap(really_small_int64_, other->really_small_int64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtremeDefaultValues::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[58]);
}

// ===================================================================

class SparseEnumMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseEnumMessage>()._has_bits_);
  static void set_has_sparse_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseEnumMessage::SparseEnumMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.SparseEnumMessage)
}
SparseEnumMessage::SparseEnumMessage(const SparseEnumMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sparse_enum_ = from.sparse_enum_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.SparseEnumMessage)
}

inline void SparseEnumMessage::SharedCtor() {
sparse_enum_ = 123;
}

SparseEnumMessage::~SparseEnumMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.SparseEnumMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SparseEnumMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SparseEnumMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SparseEnumMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.SparseEnumMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sparse_enum_ = 123;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SparseEnumMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestSparseEnum sparse_enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestSparseEnum_IsValid(val))) {
            _internal_set_sparse_enum(static_cast<::protobuf_unittest::TestSparseEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SparseEnumMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.SparseEnumMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestSparseEnum sparse_enum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sparse_enum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.SparseEnumMessage)
  return target;
}

size_t SparseEnumMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.SparseEnumMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestSparseEnum sparse_enum = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sparse_enum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SparseEnumMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SparseEnumMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SparseEnumMessage::GetClassData() const { return &_class_data_; }

void SparseEnumMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SparseEnumMessage *>(to)->MergeFrom(
      static_cast<const SparseEnumMessage &>(from));
}


void SparseEnumMessage::MergeFrom(const SparseEnumMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.SparseEnumMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sparse_enum()) {
    _internal_set_sparse_enum(from._internal_sparse_enum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SparseEnumMessage::CopyFrom(const SparseEnumMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.SparseEnumMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseEnumMessage::IsInitialized() const {
  return true;
}

void SparseEnumMessage::InternalSwap(SparseEnumMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sparse_enum_, other->sparse_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseEnumMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[59]);
}

// ===================================================================

class OneString::_Internal {
 public:
  using HasBits = decltype(std::declval<OneString>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OneString::OneString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.OneString)
}
OneString::OneString(const OneString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.OneString)
}

inline void OneString::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OneString::~OneString() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.OneString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void OneString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OneString::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.OneString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.OneString.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.OneString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.OneString.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.OneString)
  return target;
}

size_t OneString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.OneString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OneString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneString::GetClassData() const { return &_class_data_; }

void OneString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OneString *>(to)->MergeFrom(
      static_cast<const OneString &>(from));
}


void OneString::MergeFrom(const OneString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.OneString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneString::CopyFrom(const OneString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.OneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneString::IsInitialized() const {
  return true;
}

void OneString::InternalSwap(OneString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OneString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[60]);
}

// ===================================================================

class MoreString::_Internal {
 public:
};

MoreString::MoreString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.MoreString)
}
MoreString::MoreString(const MoreString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.MoreString)
}

inline void MoreString::SharedCtor() {
}

MoreString::~MoreString() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.MoreString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoreString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoreString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoreString::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.MoreString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoreString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.MoreString.data");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoreString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.MoreString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.MoreString.data");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.MoreString)
  return target;
}

size_t MoreString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.MoreString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoreString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoreString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoreString::GetClassData() const { return &_class_data_; }

void MoreString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoreString *>(to)->MergeFrom(
      static_cast<const MoreString &>(from));
}


void MoreString::MergeFrom(const MoreString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.MoreString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoreString::CopyFrom(const MoreString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.MoreString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoreString::IsInitialized() const {
  return true;
}

void MoreString::InternalSwap(MoreString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoreString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[61]);
}

// ===================================================================

class OneBytes::_Internal {
 public:
  using HasBits = decltype(std::declval<OneBytes>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OneBytes::OneBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.OneBytes)
}
OneBytes::OneBytes(const OneBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.OneBytes)
}

inline void OneBytes::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OneBytes::~OneBytes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.OneBytes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneBytes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void OneBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OneBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.OneBytes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneBytes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneBytes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.OneBytes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.OneBytes)
  return target;
}

size_t OneBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.OneBytes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneBytes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OneBytes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneBytes::GetClassData() const { return &_class_data_; }

void OneBytes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OneBytes *>(to)->MergeFrom(
      static_cast<const OneBytes &>(from));
}


void OneBytes::MergeFrom(const OneBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.OneBytes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneBytes::CopyFrom(const OneBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.OneBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneBytes::IsInitialized() const {
  return true;
}

void OneBytes::InternalSwap(OneBytes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OneBytes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[62]);
}

// ===================================================================

class MoreBytes::_Internal {
 public:
};

MoreBytes::MoreBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.MoreBytes)
}
MoreBytes::MoreBytes(const MoreBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.MoreBytes)
}

inline void MoreBytes::SharedCtor() {
}

MoreBytes::~MoreBytes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.MoreBytes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoreBytes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoreBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoreBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.MoreBytes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoreBytes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoreBytes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.MoreBytes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.MoreBytes)
  return target;
}

size_t MoreBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.MoreBytes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoreBytes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoreBytes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoreBytes::GetClassData() const { return &_class_data_; }

void MoreBytes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoreBytes *>(to)->MergeFrom(
      static_cast<const MoreBytes &>(from));
}


void MoreBytes::MergeFrom(const MoreBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.MoreBytes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoreBytes::CopyFrom(const MoreBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.MoreBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoreBytes::IsInitialized() const {
  return true;
}

void MoreBytes::InternalSwap(MoreBytes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoreBytes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[63]);
}

// ===================================================================

class ManyOptionalString::_Internal {
 public:
  using HasBits = decltype(std::declval<ManyOptionalString>()._has_bits_);
  static void set_has_str1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_str2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_str3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_str4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_str5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_str6(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_str7(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_str8(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_str9(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_str10(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_str11(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_str12(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_str13(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_str14(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_str15(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_str16(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_str17(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_str18(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_str19(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_str20(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_str21(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_str22(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_str23(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_str24(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_str25(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_str26(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_str27(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_str28(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_str29(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_str30(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_str31(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_str32(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
};

ManyOptionalString::ManyOptionalString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.ManyOptionalString)
}
ManyOptionalString::ManyOptionalString(const ManyOptionalString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str1()) {
    str1_.Set(from._internal_str1(), 
      GetArenaForAllocation());
  }
  str2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str2()) {
    str2_.Set(from._internal_str2(), 
      GetArenaForAllocation());
  }
  str3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str3()) {
    str3_.Set(from._internal_str3(), 
      GetArenaForAllocation());
  }
  str4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str4()) {
    str4_.Set(from._internal_str4(), 
      GetArenaForAllocation());
  }
  str5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str5()) {
    str5_.Set(from._internal_str5(), 
      GetArenaForAllocation());
  }
  str6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str6()) {
    str6_.Set(from._internal_str6(), 
      GetArenaForAllocation());
  }
  str7_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str7_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str7()) {
    str7_.Set(from._internal_str7(), 
      GetArenaForAllocation());
  }
  str8_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str8_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str8()) {
    str8_.Set(from._internal_str8(), 
      GetArenaForAllocation());
  }
  str9_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str9_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str9()) {
    str9_.Set(from._internal_str9(), 
      GetArenaForAllocation());
  }
  str10_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str10_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str10()) {
    str10_.Set(from._internal_str10(), 
      GetArenaForAllocation());
  }
  str11_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str11_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str11()) {
    str11_.Set(from._internal_str11(), 
      GetArenaForAllocation());
  }
  str12_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str12_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str12()) {
    str12_.Set(from._internal_str12(), 
      GetArenaForAllocation());
  }
  str13_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str13_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str13()) {
    str13_.Set(from._internal_str13(), 
      GetArenaForAllocation());
  }
  str14_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str14_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str14()) {
    str14_.Set(from._internal_str14(), 
      GetArenaForAllocation());
  }
  str15_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str15_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str15()) {
    str15_.Set(from._internal_str15(), 
      GetArenaForAllocation());
  }
  str16_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str16_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str16()) {
    str16_.Set(from._internal_str16(), 
      GetArenaForAllocation());
  }
  str17_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str17_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str17()) {
    str17_.Set(from._internal_str17(), 
      GetArenaForAllocation());
  }
  str18_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str18_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str18()) {
    str18_.Set(from._internal_str18(), 
      GetArenaForAllocation());
  }
  str19_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str19_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str19()) {
    str19_.Set(from._internal_str19(), 
      GetArenaForAllocation());
  }
  str20_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str20_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str20()) {
    str20_.Set(from._internal_str20(), 
      GetArenaForAllocation());
  }
  str21_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str21_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str21()) {
    str21_.Set(from._internal_str21(), 
      GetArenaForAllocation());
  }
  str22_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str22_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str22()) {
    str22_.Set(from._internal_str22(), 
      GetArenaForAllocation());
  }
  str23_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str23_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str23()) {
    str23_.Set(from._internal_str23(), 
      GetArenaForAllocation());
  }
  str24_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str24_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str24()) {
    str24_.Set(from._internal_str24(), 
      GetArenaForAllocation());
  }
  str25_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str25_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str25()) {
    str25_.Set(from._internal_str25(), 
      GetArenaForAllocation());
  }
  str26_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str26_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str26()) {
    str26_.Set(from._internal_str26(), 
      GetArenaForAllocation());
  }
  str27_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str27_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str27()) {
    str27_.Set(from._internal_str27(), 
      GetArenaForAllocation());
  }
  str28_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str28_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str28()) {
    str28_.Set(from._internal_str28(), 
      GetArenaForAllocation());
  }
  str29_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str29_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str29()) {
    str29_.Set(from._internal_str29(), 
      GetArenaForAllocation());
  }
  str30_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str30_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str30()) {
    str30_.Set(from._internal_str30(), 
      GetArenaForAllocation());
  }
  str31_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str31_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str31()) {
    str31_.Set(from._internal_str31(), 
      GetArenaForAllocation());
  }
  str32_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str32_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str32()) {
    str32_.Set(from._internal_str32(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.ManyOptionalString)
}

inline void ManyOptionalString::SharedCtor() {
str1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str3_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str3_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str4_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str4_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str6_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str6_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str7_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str7_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str8_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str8_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str9_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str9_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str10_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str10_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str11_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str11_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str12_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str12_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str13_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str13_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str14_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str14_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str15_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str15_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str16_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str16_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str17_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str17_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str18_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str18_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str19_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str19_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str20_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str20_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str21_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str21_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str22_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str22_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str23_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str23_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str24_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str24_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str25_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str25_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str26_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str26_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str27_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str27_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str28_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str28_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str29_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str29_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str30_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str30_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str31_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str31_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str32_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str32_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ManyOptionalString::~ManyOptionalString() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.ManyOptionalString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ManyOptionalString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str1_.Destroy();
  str2_.Destroy();
  str3_.Destroy();
  str4_.Destroy();
  str5_.Destroy();
  str6_.Destroy();
  str7_.Destroy();
  str8_.Destroy();
  str9_.Destroy();
  str10_.Destroy();
  str11_.Destroy();
  str12_.Destroy();
  str13_.Destroy();
  str14_.Destroy();
  str15_.Destroy();
  str16_.Destroy();
  str17_.Destroy();
  str18_.Destroy();
  str19_.Destroy();
  str20_.Destroy();
  str21_.Destroy();
  str22_.Destroy();
  str23_.Destroy();
  str24_.Destroy();
  str25_.Destroy();
  str26_.Destroy();
  str27_.Destroy();
  str28_.Destroy();
  str29_.Destroy();
  str30_.Destroy();
  str31_.Destroy();
  str32_.Destroy();
}

void ManyOptionalString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ManyOptionalString::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.ManyOptionalString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      str1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      str2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      str3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      str4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      str5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      str6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      str7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      str8_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      str9_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      str10_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      str11_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      str12_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      str13_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      str14_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      str15_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      str16_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      str17_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      str18_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      str19_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      str20_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      str21_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      str22_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      str23_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      str24_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      str25_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      str26_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      str27_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      str28_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      str29_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x20000000u) {
      str30_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x40000000u) {
      str31_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x80000000u) {
      str32_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManyOptionalString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string str1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_str1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_str3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str3");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_str4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str4");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_str5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str5");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_str6();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str6");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_str7();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str7");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_str8();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str8");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str9 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_str9();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str9");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_str10();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str10");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str11 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_str11();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str11");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str12 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_str12();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str12");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str13 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_str13();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str13");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str14 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_str14();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str14");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str15 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_str15();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str15");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str16 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_str16();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str16");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str17 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_str17();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str17");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str18 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_str18();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str18");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str19 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_str19();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str19");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str20 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_str20();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str20");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str21 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_str21();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str21");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str22 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_str22();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str22");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str23 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_str23();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str23");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str24 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_str24();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str24");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str25 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_str25();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str25");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str26 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_str26();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str26");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str27 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_str27();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str27");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str28 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_str28();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str28");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str29 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_str29();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str29");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str30 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_str30();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str30");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str31 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_str31();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str31");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string str32 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_str32();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.ManyOptionalString.str32");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ManyOptionalString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.ManyOptionalString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str1().data(), static_cast<int>(this->_internal_str1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str1(), target);
  }

  // optional string str2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str2().data(), static_cast<int>(this->_internal_str2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str2(), target);
  }

  // optional string str3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str3().data(), static_cast<int>(this->_internal_str3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_str3(), target);
  }

  // optional string str4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str4().data(), static_cast<int>(this->_internal_str4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_str4(), target);
  }

  // optional string str5 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str5().data(), static_cast<int>(this->_internal_str5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str5");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_str5(), target);
  }

  // optional string str6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str6().data(), static_cast<int>(this->_internal_str6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str6");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_str6(), target);
  }

  // optional string str7 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str7().data(), static_cast<int>(this->_internal_str7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str7");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_str7(), target);
  }

  // optional string str8 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str8().data(), static_cast<int>(this->_internal_str8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str8");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_str8(), target);
  }

  // optional string str9 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str9().data(), static_cast<int>(this->_internal_str9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str9");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_str9(), target);
  }

  // optional string str10 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str10().data(), static_cast<int>(this->_internal_str10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str10");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_str10(), target);
  }

  // optional string str11 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str11().data(), static_cast<int>(this->_internal_str11().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str11");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_str11(), target);
  }

  // optional string str12 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str12().data(), static_cast<int>(this->_internal_str12().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str12");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_str12(), target);
  }

  // optional string str13 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str13().data(), static_cast<int>(this->_internal_str13().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str13");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_str13(), target);
  }

  // optional string str14 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str14().data(), static_cast<int>(this->_internal_str14().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str14");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_str14(), target);
  }

  // optional string str15 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str15().data(), static_cast<int>(this->_internal_str15().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str15");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_str15(), target);
  }

  // optional string str16 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str16().data(), static_cast<int>(this->_internal_str16().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str16");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_str16(), target);
  }

  // optional string str17 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str17().data(), static_cast<int>(this->_internal_str17().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str17");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_str17(), target);
  }

  // optional string str18 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str18().data(), static_cast<int>(this->_internal_str18().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str18");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_str18(), target);
  }

  // optional string str19 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str19().data(), static_cast<int>(this->_internal_str19().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str19");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_str19(), target);
  }

  // optional string str20 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str20().data(), static_cast<int>(this->_internal_str20().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str20");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_str20(), target);
  }

  // optional string str21 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str21().data(), static_cast<int>(this->_internal_str21().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str21");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_str21(), target);
  }

  // optional string str22 = 22;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str22().data(), static_cast<int>(this->_internal_str22().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str22");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_str22(), target);
  }

  // optional string str23 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str23().data(), static_cast<int>(this->_internal_str23().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str23");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_str23(), target);
  }

  // optional string str24 = 24;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str24().data(), static_cast<int>(this->_internal_str24().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str24");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_str24(), target);
  }

  // optional string str25 = 25;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str25().data(), static_cast<int>(this->_internal_str25().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str25");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_str25(), target);
  }

  // optional string str26 = 26;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str26().data(), static_cast<int>(this->_internal_str26().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str26");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_str26(), target);
  }

  // optional string str27 = 27;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str27().data(), static_cast<int>(this->_internal_str27().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str27");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_str27(), target);
  }

  // optional string str28 = 28;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str28().data(), static_cast<int>(this->_internal_str28().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str28");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_str28(), target);
  }

  // optional string str29 = 29;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str29().data(), static_cast<int>(this->_internal_str29().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str29");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_str29(), target);
  }

  // optional string str30 = 30;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str30().data(), static_cast<int>(this->_internal_str30().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str30");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_str30(), target);
  }

  // optional string str31 = 31;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str31().data(), static_cast<int>(this->_internal_str31().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str31");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_str31(), target);
  }

  // optional string str32 = 32;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str32().data(), static_cast<int>(this->_internal_str32().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.ManyOptionalString.str32");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_str32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.ManyOptionalString)
  return target;
}

size_t ManyOptionalString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.ManyOptionalString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string str1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str1());
    }

    // optional string str2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str2());
    }

    // optional string str3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str3());
    }

    // optional string str4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str4());
    }

    // optional string str5 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str5());
    }

    // optional string str6 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str6());
    }

    // optional string str7 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str7());
    }

    // optional string str8 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str8());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string str9 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str9());
    }

    // optional string str10 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str10());
    }

    // optional string str11 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str11());
    }

    // optional string str12 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str12());
    }

    // optional string str13 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str13());
    }

    // optional string str14 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str14());
    }

    // optional string str15 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str15());
    }

    // optional string str16 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str16());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string str17 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str17());
    }

    // optional string str18 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str18());
    }

    // optional string str19 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str19());
    }

    // optional string str20 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str20());
    }

    // optional string str21 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str21());
    }

    // optional string str22 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str22());
    }

    // optional string str23 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str23());
    }

    // optional string str24 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str24());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional string str25 = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str25());
    }

    // optional string str26 = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str26());
    }

    // optional string str27 = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str27());
    }

    // optional string str28 = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str28());
    }

    // optional string str29 = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str29());
    }

    // optional string str30 = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str30());
    }

    // optional string str31 = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str31());
    }

    // optional string str32 = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str32());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ManyOptionalString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ManyOptionalString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ManyOptionalString::GetClassData() const { return &_class_data_; }

void ManyOptionalString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ManyOptionalString *>(to)->MergeFrom(
      static_cast<const ManyOptionalString &>(from));
}


void ManyOptionalString::MergeFrom(const ManyOptionalString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.ManyOptionalString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_str1(from._internal_str1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_str2(from._internal_str2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_str3(from._internal_str3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_str4(from._internal_str4());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_str5(from._internal_str5());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_str6(from._internal_str6());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_str7(from._internal_str7());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_str8(from._internal_str8());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_str9(from._internal_str9());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_str10(from._internal_str10());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_str11(from._internal_str11());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_str12(from._internal_str12());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_str13(from._internal_str13());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_str14(from._internal_str14());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_str15(from._internal_str15());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_str16(from._internal_str16());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_str17(from._internal_str17());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_str18(from._internal_str18());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_str19(from._internal_str19());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_str20(from._internal_str20());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_str21(from._internal_str21());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_str22(from._internal_str22());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_str23(from._internal_str23());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_str24(from._internal_str24());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_str25(from._internal_str25());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_str26(from._internal_str26());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_str27(from._internal_str27());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_str28(from._internal_str28());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_str29(from._internal_str29());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_set_str30(from._internal_str30());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_set_str31(from._internal_str31());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_set_str32(from._internal_str32());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ManyOptionalString::CopyFrom(const ManyOptionalString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.ManyOptionalString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManyOptionalString::IsInitialized() const {
  return true;
}

void ManyOptionalString::InternalSwap(ManyOptionalString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str1_, lhs_arena,
      &other->str1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str2_, lhs_arena,
      &other->str2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str3_, lhs_arena,
      &other->str3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str4_, lhs_arena,
      &other->str4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str5_, lhs_arena,
      &other->str5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str6_, lhs_arena,
      &other->str6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str7_, lhs_arena,
      &other->str7_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str8_, lhs_arena,
      &other->str8_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str9_, lhs_arena,
      &other->str9_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str10_, lhs_arena,
      &other->str10_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str11_, lhs_arena,
      &other->str11_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str12_, lhs_arena,
      &other->str12_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str13_, lhs_arena,
      &other->str13_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str14_, lhs_arena,
      &other->str14_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str15_, lhs_arena,
      &other->str15_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str16_, lhs_arena,
      &other->str16_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str17_, lhs_arena,
      &other->str17_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str18_, lhs_arena,
      &other->str18_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str19_, lhs_arena,
      &other->str19_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str20_, lhs_arena,
      &other->str20_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str21_, lhs_arena,
      &other->str21_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str22_, lhs_arena,
      &other->str22_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str23_, lhs_arena,
      &other->str23_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str24_, lhs_arena,
      &other->str24_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str25_, lhs_arena,
      &other->str25_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str26_, lhs_arena,
      &other->str26_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str27_, lhs_arena,
      &other->str27_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str28_, lhs_arena,
      &other->str28_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str29_, lhs_arena,
      &other->str29_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str30_, lhs_arena,
      &other->str30_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str31_, lhs_arena,
      &other->str31_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str32_, lhs_arena,
      &other->str32_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ManyOptionalString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[64]);
}

// ===================================================================

class Int32Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Int32Message>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Int32Message::Int32Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Int32Message)
}
Int32Message::Int32Message(const Int32Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Int32Message)
}

inline void Int32Message::SharedCtor() {
data_ = 0;
}

Int32Message::~Int32Message() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Int32Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int32Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Int32Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Int32Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Int32Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int32Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int32Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Int32Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Int32Message)
  return target;
}

size_t Int32Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Int32Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int32Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Int32Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int32Message::GetClassData() const { return &_class_data_; }

void Int32Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Int32Message *>(to)->MergeFrom(
      static_cast<const Int32Message &>(from));
}


void Int32Message::MergeFrom(const Int32Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Int32Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int32Message::CopyFrom(const Int32Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Int32Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Message::IsInitialized() const {
  return true;
}

void Int32Message::InternalSwap(Int32Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int32Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[65]);
}

// ===================================================================

class Uint32Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Uint32Message>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Uint32Message::Uint32Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Uint32Message)
}
Uint32Message::Uint32Message(const Uint32Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Uint32Message)
}

inline void Uint32Message::SharedCtor() {
data_ = 0u;
}

Uint32Message::~Uint32Message() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Uint32Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uint32Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Uint32Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Uint32Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Uint32Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint32Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uint32Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Uint32Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Uint32Message)
  return target;
}

size_t Uint32Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Uint32Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uint32Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Uint32Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uint32Message::GetClassData() const { return &_class_data_; }

void Uint32Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Uint32Message *>(to)->MergeFrom(
      static_cast<const Uint32Message &>(from));
}


void Uint32Message::MergeFrom(const Uint32Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Uint32Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uint32Message::CopyFrom(const Uint32Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Uint32Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint32Message::IsInitialized() const {
  return true;
}

void Uint32Message::InternalSwap(Uint32Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint32Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[66]);
}

// ===================================================================

class Int64Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Int64Message>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Int64Message::Int64Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Int64Message)
}
Int64Message::Int64Message(const Int64Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Int64Message)
}

inline void Int64Message::SharedCtor() {
data_ = int64_t{0};
}

Int64Message::~Int64Message() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Int64Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int64Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Int64Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Int64Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Int64Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int64Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int64Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Int64Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Int64Message)
  return target;
}

size_t Int64Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Int64Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int64Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Int64Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int64Message::GetClassData() const { return &_class_data_; }

void Int64Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Int64Message *>(to)->MergeFrom(
      static_cast<const Int64Message &>(from));
}


void Int64Message::MergeFrom(const Int64Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Int64Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int64Message::CopyFrom(const Int64Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Int64Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Message::IsInitialized() const {
  return true;
}

void Int64Message::InternalSwap(Int64Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int64Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[67]);
}

// ===================================================================

class Uint64Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Uint64Message>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Uint64Message::Uint64Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Uint64Message)
}
Uint64Message::Uint64Message(const Uint64Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Uint64Message)
}

inline void Uint64Message::SharedCtor() {
data_ = uint64_t{0u};
}

Uint64Message::~Uint64Message() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.Uint64Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uint64Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Uint64Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Uint64Message::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.Uint64Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint64Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uint64Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.Uint64Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.Uint64Message)
  return target;
}

size_t Uint64Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.Uint64Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uint64Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Uint64Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uint64Message::GetClassData() const { return &_class_data_; }

void Uint64Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Uint64Message *>(to)->MergeFrom(
      static_cast<const Uint64Message &>(from));
}


void Uint64Message::MergeFrom(const Uint64Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.Uint64Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uint64Message::CopyFrom(const Uint64Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.Uint64Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint64Message::IsInitialized() const {
  return true;
}

void Uint64Message::InternalSwap(Uint64Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint64Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[68]);
}

// ===================================================================

class BoolMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<BoolMessage>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BoolMessage::BoolMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.BoolMessage)
}
BoolMessage::BoolMessage(const BoolMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.BoolMessage)
}

inline void BoolMessage::SharedCtor() {
data_ = false;
}

BoolMessage::~BoolMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.BoolMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoolMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoolMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoolMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.BoolMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoolMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.BoolMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.BoolMessage)
  return target;
}

size_t BoolMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.BoolMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoolMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoolMessage::GetClassData() const { return &_class_data_; }

void BoolMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoolMessage *>(to)->MergeFrom(
      static_cast<const BoolMessage &>(from));
}


void BoolMessage::MergeFrom(const BoolMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.BoolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoolMessage::CopyFrom(const BoolMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.BoolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolMessage::IsInitialized() const {
  return true;
}

void BoolMessage::InternalSwap(BoolMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[69]);
}

// ===================================================================

class TestOneof_FooGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof_FooGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOneof_FooGroup::TestOneof_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof.FooGroup)
}
TestOneof_FooGroup::TestOneof_FooGroup(const TestOneof_FooGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_b()) {
    b_.Set(from._internal_b(), 
      GetArenaForAllocation());
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof.FooGroup)
}

inline void TestOneof_FooGroup::SharedCtor() {
b_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  b_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
a_ = 0;
}

TestOneof_FooGroup::~TestOneof_FooGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof.FooGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOneof_FooGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  b_.Destroy();
}

void TestOneof_FooGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestOneof_FooGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof.FooGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    b_.ClearNonDefaultToEmpty();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOneof_FooGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof.FooGroup.b");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOneof_FooGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof.FooGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_a(), target);
  }

  // optional string b = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneof.FooGroup.b");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof.FooGroup)
  return target;
}

size_t TestOneof_FooGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof.FooGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string b = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional int32 a = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOneof_FooGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestOneof_FooGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOneof_FooGroup::GetClassData() const { return &_class_data_; }

void TestOneof_FooGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestOneof_FooGroup *>(to)->MergeFrom(
      static_cast<const TestOneof_FooGroup &>(from));
}


void TestOneof_FooGroup::MergeFrom(const TestOneof_FooGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOneof_FooGroup::CopyFrom(const TestOneof_FooGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof_FooGroup::IsInitialized() const {
  return true;
}

void TestOneof_FooGroup::InternalSwap(TestOneof_FooGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &b_, lhs_arena,
      &other->b_, rhs_arena
  );
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof_FooGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[70]);
}

// ===================================================================

class TestOneof::_Internal {
 public:
  static const ::protobuf_unittest::TestAllTypes& foo_message(const TestOneof* msg);
  static const ::protobuf_unittest::TestOneof_FooGroup& foogroup(const TestOneof* msg);
};

const ::protobuf_unittest::TestAllTypes&
TestOneof::_Internal::foo_message(const TestOneof* msg) {
  return *msg->foo_.foo_message_;
}
const ::protobuf_unittest::TestOneof_FooGroup&
TestOneof::_Internal::foogroup(const TestOneof* msg) {
  return *msg->foo_.foogroup_;
}
void TestOneof::set_allocated_foo_message(::protobuf_unittest::TestAllTypes* foo_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_foo();
  if (foo_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foo_message);
    if (message_arena != submessage_arena) {
      foo_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_message, submessage_arena);
    }
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof.foo_message)
}
void TestOneof::set_allocated_foogroup(::protobuf_unittest::TestOneof_FooGroup* foogroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_foo();
  if (foogroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foogroup);
    if (message_arena != submessage_arena) {
      foogroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foogroup, submessage_arena);
    }
    set_has_foogroup();
    foo_.foogroup_ = foogroup;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof.foogroup)
}
TestOneof::TestOneof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof)
}
TestOneof::TestOneof(const TestOneof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_foo();
  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_foo_message());
      break;
    }
    case kFoogroup: {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneof_FooGroup::MergeFrom(from._internal_foogroup());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof)
}

inline void TestOneof::SharedCtor() {
clear_has_foo();
}

TestOneof::~TestOneof() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOneof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_foo()) {
    clear_foo();
  }
}

void TestOneof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestOneof::clear_foo() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestOneof)
  switch (foo_case()) {
    case kFooInt: {
      // No need to clear
      break;
    }
    case kFooString: {
      foo_.foo_string_.Destroy();
      break;
    }
    case kFooMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete foo_.foo_message_;
      }
      break;
    }
    case kFoogroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete foo_.foogroup_;
      }
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOO_NOT_SET;
}


void TestOneof::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_foo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOneof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 foo_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_foo_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string foo_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_foo_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof.foo_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestAllTypes foo_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // group FooGroup = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 35)) {
          ptr = ctx->ParseGroup(_internal_mutable_foogroup(), ptr, 35);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOneof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (foo_case()) {
    case kFooInt: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_int(), target);
      break;
    }
    case kFooString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_string().data(), static_cast<int>(this->_internal_foo_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof.foo_string");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_foo_string(), target);
      break;
    }
    case kFooMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::foo_message(this),
          _Internal::foo_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kFoogroup: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteGroup(
          4, _Internal::foogroup(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof)
  return target;
}

size_t TestOneof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (foo_case()) {
    // int32 foo_int = 1;
    case kFooInt: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_foo_int());
      break;
    }
    // string foo_string = 2;
    case kFooString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string());
      break;
    }
    // .protobuf_unittest.TestAllTypes foo_message = 3;
    case kFooMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_.foo_message_);
      break;
    }
    // group FooGroup = 4 { ... };
    case kFoogroup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *foo_.foogroup_);
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOneof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestOneof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOneof::GetClassData() const { return &_class_data_; }

void TestOneof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestOneof *>(to)->MergeFrom(
      static_cast<const TestOneof &>(from));
}


void TestOneof::MergeFrom(const TestOneof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_foo_message());
      break;
    }
    case kFoogroup: {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneof_FooGroup::MergeFrom(from._internal_foogroup());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOneof::CopyFrom(const TestOneof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof::IsInitialized() const {
  return true;
}

void TestOneof::InternalSwap(TestOneof* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(foo_, other->foo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[71]);
}

// ===================================================================

class TestOneofBackwardsCompatible_FooGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneofBackwardsCompatible_FooGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOneofBackwardsCompatible_FooGroup::TestOneofBackwardsCompatible_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
}
TestOneofBackwardsCompatible_FooGroup::TestOneofBackwardsCompatible_FooGroup(const TestOneofBackwardsCompatible_FooGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_b()) {
    b_.Set(from._internal_b(), 
      GetArenaForAllocation());
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
}

inline void TestOneofBackwardsCompatible_FooGroup::SharedCtor() {
b_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  b_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
a_ = 0;
}

TestOneofBackwardsCompatible_FooGroup::~TestOneofBackwardsCompatible_FooGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOneofBackwardsCompatible_FooGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  b_.Destroy();
}

void TestOneofBackwardsCompatible_FooGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestOneofBackwardsCompatible_FooGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    b_.ClearNonDefaultToEmpty();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOneofBackwardsCompatible_FooGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOneofBackwardsCompatible_FooGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_a(), target);
  }

  // optional string b = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  return target;
}

size_t TestOneofBackwardsCompatible_FooGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string b = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional int32 a = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOneofBackwardsCompatible_FooGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestOneofBackwardsCompatible_FooGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOneofBackwardsCompatible_FooGroup::GetClassData() const { return &_class_data_; }

void TestOneofBackwardsCompatible_FooGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestOneofBackwardsCompatible_FooGroup *>(to)->MergeFrom(
      static_cast<const TestOneofBackwardsCompatible_FooGroup &>(from));
}


void TestOneofBackwardsCompatible_FooGroup::MergeFrom(const TestOneofBackwardsCompatible_FooGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOneofBackwardsCompatible_FooGroup::CopyFrom(const TestOneofBackwardsCompatible_FooGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneofBackwardsCompatible_FooGroup::IsInitialized() const {
  return true;
}

void TestOneofBackwardsCompatible_FooGroup::InternalSwap(TestOneofBackwardsCompatible_FooGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &b_, lhs_arena,
      &other->b_, rhs_arena
  );
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneofBackwardsCompatible_FooGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[72]);
}

// ===================================================================

class TestOneofBackwardsCompatible::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneofBackwardsCompatible>()._has_bits_);
  static void set_has_foo_int(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_foo_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& foo_message(const TestOneofBackwardsCompatible* msg);
  static void set_has_foo_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup& foogroup(const TestOneofBackwardsCompatible* msg);
  static void set_has_foogroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestOneofBackwardsCompatible::_Internal::foo_message(const TestOneofBackwardsCompatible* msg) {
  return *msg->foo_message_;
}
const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup&
TestOneofBackwardsCompatible::_Internal::foogroup(const TestOneofBackwardsCompatible* msg) {
  return *msg->foogroup_;
}
TestOneofBackwardsCompatible::TestOneofBackwardsCompatible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneofBackwardsCompatible)
}
TestOneofBackwardsCompatible::TestOneofBackwardsCompatible(const TestOneofBackwardsCompatible& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  foo_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    foo_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_foo_string()) {
    foo_string_.Set(from._internal_foo_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_foo_message()) {
    foo_message_ = new ::protobuf_unittest::TestAllTypes(*from.foo_message_);
  } else {
    foo_message_ = nullptr;
  }
  if (from._internal_has_foogroup()) {
    foogroup_ = new ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup(*from.foogroup_);
  } else {
    foogroup_ = nullptr;
  }
  foo_int_ = from.foo_int_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneofBackwardsCompatible)
}

inline void TestOneofBackwardsCompatible::SharedCtor() {
foo_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  foo_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&foo_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&foo_int_) -
    reinterpret_cast<char*>(&foo_message_)) + sizeof(foo_int_));
}

TestOneofBackwardsCompatible::~TestOneofBackwardsCompatible() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneofBackwardsCompatible)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOneofBackwardsCompatible::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  foo_string_.Destroy();
  if (this != internal_default_instance()) delete foo_message_;
  if (this != internal_default_instance()) delete foogroup_;
}

void TestOneofBackwardsCompatible::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestOneofBackwardsCompatible::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneofBackwardsCompatible)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      foo_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(foo_message_ != nullptr);
      foo_message_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(foogroup_ != nullptr);
      foogroup_->Clear();
    }
  }
  foo_int_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOneofBackwardsCompatible::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 foo_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_foo_int(&has_bits);
          foo_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string foo_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_foo_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneofBackwardsCompatible.foo_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes foo_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group FooGroup = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 35)) {
          ptr = ctx->ParseGroup(_internal_mutable_foogroup(), ptr, 35);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOneofBackwardsCompatible::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneofBackwardsCompatible)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 foo_int = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_int(), target);
  }

  // optional string foo_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_foo_string().data(), static_cast<int>(this->_internal_foo_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneofBackwardsCompatible.foo_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_foo_string(), target);
  }

  // optional .protobuf_unittest.TestAllTypes foo_message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::foo_message(this),
        _Internal::foo_message(this).GetCachedSize(), target, stream);
  }

  // optional group FooGroup = 4 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        4, _Internal::foogroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneofBackwardsCompatible)
  return target;
}

size_t TestOneofBackwardsCompatible::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneofBackwardsCompatible)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string foo_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string());
    }

    // optional .protobuf_unittest.TestAllTypes foo_message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_message_);
    }

    // optional group FooGroup = 4 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *foogroup_);
    }

    // optional int32 foo_int = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_foo_int());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOneofBackwardsCompatible::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestOneofBackwardsCompatible::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOneofBackwardsCompatible::GetClassData() const { return &_class_data_; }

void TestOneofBackwardsCompatible::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestOneofBackwardsCompatible *>(to)->MergeFrom(
      static_cast<const TestOneofBackwardsCompatible &>(from));
}


void TestOneofBackwardsCompatible::MergeFrom(const TestOneofBackwardsCompatible& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneofBackwardsCompatible)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_foo_string(from._internal_foo_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_foo_message()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_foo_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup::MergeFrom(from._internal_foogroup());
    }
    if (cached_has_bits & 0x00000008u) {
      foo_int_ = from.foo_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOneofBackwardsCompatible::CopyFrom(const TestOneofBackwardsCompatible& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneofBackwardsCompatible)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneofBackwardsCompatible::IsInitialized() const {
  return true;
}

void TestOneofBackwardsCompatible::InternalSwap(TestOneofBackwardsCompatible* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &foo_string_, lhs_arena,
      &other->foo_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestOneofBackwardsCompatible, foo_int_)
      + sizeof(TestOneofBackwardsCompatible::foo_int_)
      - PROTOBUF_FIELD_OFFSET(TestOneofBackwardsCompatible, foo_message_)>(
          reinterpret_cast<char*>(&foo_message_),
          reinterpret_cast<char*>(&other->foo_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneofBackwardsCompatible::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[73]);
}

// ===================================================================

class TestOneof2_FooGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof2_FooGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOneof2_FooGroup::TestOneof2_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof2.FooGroup)
}
TestOneof2_FooGroup::TestOneof2_FooGroup(const TestOneof2_FooGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_b()) {
    b_.Set(from._internal_b(), 
      GetArenaForAllocation());
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof2.FooGroup)
}

inline void TestOneof2_FooGroup::SharedCtor() {
b_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  b_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
a_ = 0;
}

TestOneof2_FooGroup::~TestOneof2_FooGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof2.FooGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOneof2_FooGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  b_.Destroy();
}

void TestOneof2_FooGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestOneof2_FooGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof2.FooGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    b_.ClearNonDefaultToEmpty();
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOneof2_FooGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string b = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.FooGroup.b");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOneof2_FooGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof2.FooGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_a(), target);
  }

  // optional string b = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneof2.FooGroup.b");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof2.FooGroup)
  return target;
}

size_t TestOneof2_FooGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof2.FooGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string b = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional int32 a = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOneof2_FooGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestOneof2_FooGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOneof2_FooGroup::GetClassData() const { return &_class_data_; }

void TestOneof2_FooGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestOneof2_FooGroup *>(to)->MergeFrom(
      static_cast<const TestOneof2_FooGroup &>(from));
}


void TestOneof2_FooGroup::MergeFrom(const TestOneof2_FooGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof2.FooGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOneof2_FooGroup::CopyFrom(const TestOneof2_FooGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof2.FooGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof2_FooGroup::IsInitialized() const {
  return true;
}

void TestOneof2_FooGroup::InternalSwap(TestOneof2_FooGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &b_, lhs_arena,
      &other->b_, rhs_arena
  );
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof2_FooGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[74]);
}

// ===================================================================

class TestOneof2_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof2_NestedMessage>()._has_bits_);
  static void set_has_qux_int(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOneof2_NestedMessage::TestOneof2_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  corge_int_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof2.NestedMessage)
}
TestOneof2_NestedMessage::TestOneof2_NestedMessage(const TestOneof2_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      corge_int_(from.corge_int_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  qux_int_ = from.qux_int_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof2.NestedMessage)
}

inline void TestOneof2_NestedMessage::SharedCtor() {
qux_int_ = int64_t{0};
}

TestOneof2_NestedMessage::~TestOneof2_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof2.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOneof2_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestOneof2_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestOneof2_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof2.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corge_int_.Clear();
  qux_int_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOneof2_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 qux_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_qux_int(&has_bits);
          qux_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 corge_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_corge_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_corge_int(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOneof2_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof2.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 qux_int = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_qux_int(), target);
  }

  // repeated int32 corge_int = 2;
  for (int i = 0, n = this->_internal_corge_int_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_corge_int(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof2.NestedMessage)
  return target;
}

size_t TestOneof2_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof2.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 corge_int = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->corge_int_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_corge_int_size());
    total_size += data_size;
  }

  // optional int64 qux_int = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_qux_int());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOneof2_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestOneof2_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOneof2_NestedMessage::GetClassData() const { return &_class_data_; }

void TestOneof2_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestOneof2_NestedMessage *>(to)->MergeFrom(
      static_cast<const TestOneof2_NestedMessage &>(from));
}


void TestOneof2_NestedMessage::MergeFrom(const TestOneof2_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof2.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  corge_int_.MergeFrom(from.corge_int_);
  if (from._internal_has_qux_int()) {
    _internal_set_qux_int(from._internal_qux_int());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOneof2_NestedMessage::CopyFrom(const TestOneof2_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof2.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof2_NestedMessage::IsInitialized() const {
  return true;
}

void TestOneof2_NestedMessage::InternalSwap(TestOneof2_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  corge_int_.InternalSwap(&other->corge_int_);
  swap(qux_int_, other->qux_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof2_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[75]);
}

// ===================================================================

class TestOneof2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOneof2>()._has_bits_);
  static const ::protobuf_unittest::TestOneof2_NestedMessage& foo_message(const TestOneof2* msg);
  static const ::protobuf_unittest::TestOneof2_FooGroup& foogroup(const TestOneof2* msg);
  static const ::protobuf_unittest::TestOneof2_NestedMessage& foo_lazy_message(const TestOneof2* msg);
  static void set_has_baz_int(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_baz_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestOneof2_NestedMessage&
TestOneof2::_Internal::foo_message(const TestOneof2* msg) {
  return *msg->foo_.foo_message_;
}
const ::protobuf_unittest::TestOneof2_FooGroup&
TestOneof2::_Internal::foogroup(const TestOneof2* msg) {
  return *msg->foo_.foogroup_;
}
const ::protobuf_unittest::TestOneof2_NestedMessage&
TestOneof2::_Internal::foo_lazy_message(const TestOneof2* msg) {
  return *msg->foo_.foo_lazy_message_;
}
void TestOneof2::set_allocated_foo_message(::protobuf_unittest::TestOneof2_NestedMessage* foo_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_foo();
  if (foo_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foo_message);
    if (message_arena != submessage_arena) {
      foo_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_message, submessage_arena);
    }
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foo_message)
}
void TestOneof2::set_allocated_foogroup(::protobuf_unittest::TestOneof2_FooGroup* foogroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_foo();
  if (foogroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foogroup);
    if (message_arena != submessage_arena) {
      foogroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foogroup, submessage_arena);
    }
    set_has_foogroup();
    foo_.foogroup_ = foogroup;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foogroup)
}
void TestOneof2::set_allocated_foo_lazy_message(::protobuf_unittest::TestOneof2_NestedMessage* foo_lazy_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_foo();
  if (foo_lazy_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foo_lazy_message);
    if (message_arena != submessage_arena) {
      foo_lazy_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_lazy_message, submessage_arena);
    }
    set_has_foo_lazy_message();
    foo_.foo_lazy_message_ = foo_lazy_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foo_lazy_message)
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_{{{"STRING", 6}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_{{{"CORD", 4}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_{{{"SPIECE", 6}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_{{{"BYTES", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_{{{"BAZ", 3}}, {nullptr}};
TestOneof2::TestOneof2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneof2)
}
TestOneof2::TestOneof2(const TestOneof2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  baz_string_.InitDefault();
  if (from._internal_has_baz_string()) {
    baz_string_.Set(from._internal_baz_string(), 
      GetArenaForAllocation());
  }
  baz_int_ = from.baz_int_;
  clear_has_foo();
  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooCord: {
      _internal_set_foo_cord(from._internal_foo_cord());
      break;
    }
    case kFooStringPiece: {
      _internal_set_foo_string_piece(from._internal_foo_string_piece());
      break;
    }
    case kFooBytes: {
      _internal_set_foo_bytes(from._internal_foo_bytes());
      break;
    }
    case kFooEnum: {
      _internal_set_foo_enum(from._internal_foo_enum());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestOneof2_NestedMessage::MergeFrom(from._internal_foo_message());
      break;
    }
    case kFoogroup: {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneof2_FooGroup::MergeFrom(from._internal_foogroup());
      break;
    }
    case kFooLazyMessage: {
      _internal_mutable_foo_lazy_message()->::protobuf_unittest::TestOneof2_NestedMessage::MergeFrom(from._internal_foo_lazy_message());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  clear_has_bar();
  switch (from.bar_case()) {
    case kBarInt: {
      _internal_set_bar_int(from._internal_bar_int());
      break;
    }
    case kBarString: {
      _internal_set_bar_string(from._internal_bar_string());
      break;
    }
    case kBarCord: {
      _internal_set_bar_cord(from._internal_bar_cord());
      break;
    }
    case kBarStringPiece: {
      _internal_set_bar_string_piece(from._internal_bar_string_piece());
      break;
    }
    case kBarBytes: {
      _internal_set_bar_bytes(from._internal_bar_bytes());
      break;
    }
    case kBarEnum: {
      _internal_set_bar_enum(from._internal_bar_enum());
      break;
    }
    case kBarStringWithEmptyDefault: {
      _internal_set_bar_string_with_empty_default(from._internal_bar_string_with_empty_default());
      break;
    }
    case kBarCordWithEmptyDefault: {
      _internal_set_bar_cord_with_empty_default(from._internal_bar_cord_with_empty_default());
      break;
    }
    case kBarStringPieceWithEmptyDefault: {
      _internal_set_bar_string_piece_with_empty_default(from._internal_bar_string_piece_with_empty_default());
      break;
    }
    case kBarBytesWithEmptyDefault: {
      _internal_set_bar_bytes_with_empty_default(from._internal_bar_bytes_with_empty_default());
      break;
    }
    case BAR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneof2)
}

inline void TestOneof2::SharedCtor() {
baz_string_.InitDefault();
baz_int_ = 0;
clear_has_foo();
clear_has_bar();
}

TestOneof2::~TestOneof2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneof2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOneof2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  baz_string_.Destroy();
  if (has_foo()) {
    clear_foo();
  }
  if (has_bar()) {
    clear_bar();
  }
}

void TestOneof2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestOneof2::clear_foo() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestOneof2)
  switch (foo_case()) {
    case kFooInt: {
      // No need to clear
      break;
    }
    case kFooString: {
      foo_.foo_string_.Destroy();
      break;
    }
    case kFooCord: {
      foo_.foo_cord_.Destroy();
      break;
    }
    case kFooStringPiece: {
      foo_.foo_string_piece_.Destroy();
      break;
    }
    case kFooBytes: {
      foo_.foo_bytes_.Destroy();
      break;
    }
    case kFooEnum: {
      // No need to clear
      break;
    }
    case kFooMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete foo_.foo_message_;
      }
      break;
    }
    case kFoogroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete foo_.foogroup_;
      }
      break;
    }
    case kFooLazyMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete foo_.foo_lazy_message_;
      }
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOO_NOT_SET;
}

void TestOneof2::clear_bar() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestOneof2)
  switch (bar_case()) {
    case kBarInt: {
      // No need to clear
      break;
    }
    case kBarString: {
      bar_.bar_string_.Destroy();
      break;
    }
    case kBarCord: {
      bar_.bar_cord_.Destroy();
      break;
    }
    case kBarStringPiece: {
      bar_.bar_string_piece_.Destroy();
      break;
    }
    case kBarBytes: {
      bar_.bar_bytes_.Destroy();
      break;
    }
    case kBarEnum: {
      // No need to clear
      break;
    }
    case kBarStringWithEmptyDefault: {
      bar_.bar_string_with_empty_default_.Destroy();
      break;
    }
    case kBarCordWithEmptyDefault: {
      bar_.bar_cord_with_empty_default_.Destroy();
      break;
    }
    case kBarStringPieceWithEmptyDefault: {
      bar_.bar_string_piece_with_empty_default_.Destroy();
      break;
    }
    case kBarBytesWithEmptyDefault: {
      bar_.bar_bytes_with_empty_default_.Destroy();
      break;
    }
    case BAR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = BAR_NOT_SET;
}


void TestOneof2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneof2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    baz_string_.ClearToDefault(::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_, GetArenaForAllocation());
     }
  baz_int_ = 0;
  clear_foo();
  clear_bar();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOneof2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 foo_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_foo_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string foo_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_foo_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.foo_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string foo_cord = 3 [ctype = CORD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_foo_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.foo_cord");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string foo_string_piece = 4 [ctype = STRING_PIECE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_foo_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.foo_string_piece");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // bytes foo_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_foo_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestOneof2.NestedEnum foo_enum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestOneof2_NestedEnum_IsValid(val))) {
            _internal_set_foo_enum(static_cast<::protobuf_unittest::TestOneof2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestOneof2.NestedMessage foo_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // group FooGroup = 8 { ... };
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 67)) {
          ptr = ctx->ParseGroup(_internal_mutable_foogroup(), ptr, 67);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestOneof2.NestedMessage foo_lazy_message = 11 [lazy = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_lazy_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bar_int = 12 [default = 5];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _internal_set_bar_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bar_string = 13 [default = "STRING"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_bar_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string bar_cord = 14 [default = "CORD", ctype = CORD];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_bar_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_cord");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string bar_string_piece = 15 [default = "SPIECE", ctype = STRING_PIECE];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_bar_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_string_piece");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // bytes bar_bytes = 16 [default = "BYTES"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_bar_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestOneof2.NestedEnum bar_enum = 17 [default = BAR];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestOneof2_NestedEnum_IsValid(val))) {
            _internal_set_bar_enum(static_cast<::protobuf_unittest::TestOneof2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 baz_int = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_baz_int(&has_bits);
          baz_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string baz_string = 19 [default = "BAZ"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_baz_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.baz_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string bar_string_with_empty_default = 20 [default = ""];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_bar_string_with_empty_default();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_string_with_empty_default");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string bar_cord_with_empty_default = 21 [default = "", ctype = CORD];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_bar_cord_with_empty_default();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_cord_with_empty_default");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // string bar_string_piece_with_empty_default = 22 [default = "", ctype = STRING_PIECE];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_bar_string_piece_with_empty_default();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestOneof2.bar_string_piece_with_empty_default");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // bytes bar_bytes_with_empty_default = 23 [default = ""];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_bar_bytes_with_empty_default();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOneof2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneof2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (foo_case()) {
    case kFooInt: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_int(), target);
      break;
    }
    case kFooString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_string().data(), static_cast<int>(this->_internal_foo_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.foo_string");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_foo_string(), target);
      break;
    }
    case kFooCord: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_cord().data(), static_cast<int>(this->_internal_foo_cord().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.foo_cord");
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_foo_cord(), target);
      break;
    }
    case kFooStringPiece: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_string_piece().data(), static_cast<int>(this->_internal_foo_string_piece().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.foo_string_piece");
      target = stream->WriteStringMaybeAliased(
          4, this->_internal_foo_string_piece(), target);
      break;
    }
    case kFooBytes: {
      target = stream->WriteBytesMaybeAliased(
          5, this->_internal_foo_bytes(), target);
      break;
    }
    case kFooEnum: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_foo_enum(), target);
      break;
    }
    case kFooMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::foo_message(this),
          _Internal::foo_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kFoogroup: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteGroup(
          8, _Internal::foogroup(this), target, stream);
      break;
    }
    case kFooLazyMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::foo_lazy_message(this),
          _Internal::foo_lazy_message(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  switch (bar_case()) {
    case kBarInt: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_bar_int(), target);
      break;
    }
    case kBarString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_string().data(), static_cast<int>(this->_internal_bar_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_string");
      target = stream->WriteStringMaybeAliased(
          13, this->_internal_bar_string(), target);
      break;
    }
    case kBarCord: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_cord().data(), static_cast<int>(this->_internal_bar_cord().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_cord");
      target = stream->WriteStringMaybeAliased(
          14, this->_internal_bar_cord(), target);
      break;
    }
    case kBarStringPiece: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_string_piece().data(), static_cast<int>(this->_internal_bar_string_piece().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_string_piece");
      target = stream->WriteStringMaybeAliased(
          15, this->_internal_bar_string_piece(), target);
      break;
    }
    case kBarBytes: {
      target = stream->WriteBytesMaybeAliased(
          16, this->_internal_bar_bytes(), target);
      break;
    }
    case kBarEnum: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        17, this->_internal_bar_enum(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional int32 baz_int = 18;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_baz_int(), target);
  }

  // optional string baz_string = 19 [default = "BAZ"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_baz_string().data(), static_cast<int>(this->_internal_baz_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestOneof2.baz_string");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_baz_string(), target);
  }

  switch (bar_case()) {
    case kBarStringWithEmptyDefault: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_string_with_empty_default().data(), static_cast<int>(this->_internal_bar_string_with_empty_default().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_string_with_empty_default");
      target = stream->WriteStringMaybeAliased(
          20, this->_internal_bar_string_with_empty_default(), target);
      break;
    }
    case kBarCordWithEmptyDefault: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_cord_with_empty_default().data(), static_cast<int>(this->_internal_bar_cord_with_empty_default().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_cord_with_empty_default");
      target = stream->WriteStringMaybeAliased(
          21, this->_internal_bar_cord_with_empty_default(), target);
      break;
    }
    case kBarStringPieceWithEmptyDefault: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_bar_string_piece_with_empty_default().data(), static_cast<int>(this->_internal_bar_string_piece_with_empty_default().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestOneof2.bar_string_piece_with_empty_default");
      target = stream->WriteStringMaybeAliased(
          22, this->_internal_bar_string_piece_with_empty_default(), target);
      break;
    }
    case kBarBytesWithEmptyDefault: {
      target = stream->WriteBytesMaybeAliased(
          23, this->_internal_bar_bytes_with_empty_default(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneof2)
  return target;
}

size_t TestOneof2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneof2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string baz_string = 19 [default = "BAZ"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_baz_string());
    }

    // optional int32 baz_int = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_baz_int());
    }

  }
  switch (foo_case()) {
    // int32 foo_int = 1;
    case kFooInt: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_foo_int());
      break;
    }
    // string foo_string = 2;
    case kFooString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string());
      break;
    }
    // string foo_cord = 3 [ctype = CORD];
    case kFooCord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_cord());
      break;
    }
    // string foo_string_piece = 4 [ctype = STRING_PIECE];
    case kFooStringPiece: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string_piece());
      break;
    }
    // bytes foo_bytes = 5;
    case kFooBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_foo_bytes());
      break;
    }
    // .protobuf_unittest.TestOneof2.NestedEnum foo_enum = 6;
    case kFooEnum: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_foo_enum());
      break;
    }
    // .protobuf_unittest.TestOneof2.NestedMessage foo_message = 7;
    case kFooMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_.foo_message_);
      break;
    }
    // group FooGroup = 8 { ... };
    case kFoogroup: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *foo_.foogroup_);
      break;
    }
    // .protobuf_unittest.TestOneof2.NestedMessage foo_lazy_message = 11 [lazy = true];
    case kFooLazyMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_.foo_lazy_message_);
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  switch (bar_case()) {
    // int32 bar_int = 12 [default = 5];
    case kBarInt: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bar_int());
      break;
    }
    // string bar_string = 13 [default = "STRING"];
    case kBarString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_string());
      break;
    }
    // string bar_cord = 14 [default = "CORD", ctype = CORD];
    case kBarCord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_cord());
      break;
    }
    // string bar_string_piece = 15 [default = "SPIECE", ctype = STRING_PIECE];
    case kBarStringPiece: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_string_piece());
      break;
    }
    // bytes bar_bytes = 16 [default = "BYTES"];
    case kBarBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bar_bytes());
      break;
    }
    // .protobuf_unittest.TestOneof2.NestedEnum bar_enum = 17 [default = BAR];
    case kBarEnum: {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bar_enum());
      break;
    }
    // string bar_string_with_empty_default = 20 [default = ""];
    case kBarStringWithEmptyDefault: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_string_with_empty_default());
      break;
    }
    // string bar_cord_with_empty_default = 21 [default = "", ctype = CORD];
    case kBarCordWithEmptyDefault: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_cord_with_empty_default());
      break;
    }
    // string bar_string_piece_with_empty_default = 22 [default = "", ctype = STRING_PIECE];
    case kBarStringPieceWithEmptyDefault: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bar_string_piece_with_empty_default());
      break;
    }
    // bytes bar_bytes_with_empty_default = 23 [default = ""];
    case kBarBytesWithEmptyDefault: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bar_bytes_with_empty_default());
      break;
    }
    case BAR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOneof2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestOneof2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOneof2::GetClassData() const { return &_class_data_; }

void TestOneof2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestOneof2 *>(to)->MergeFrom(
      static_cast<const TestOneof2 &>(from));
}


void TestOneof2::MergeFrom(const TestOneof2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneof2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_baz_string(from._internal_baz_string());
    }
    if (cached_has_bits & 0x00000002u) {
      baz_int_ = from.baz_int_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooCord: {
      _internal_set_foo_cord(from._internal_foo_cord());
      break;
    }
    case kFooStringPiece: {
      _internal_set_foo_string_piece(from._internal_foo_string_piece());
      break;
    }
    case kFooBytes: {
      _internal_set_foo_bytes(from._internal_foo_bytes());
      break;
    }
    case kFooEnum: {
      _internal_set_foo_enum(from._internal_foo_enum());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestOneof2_NestedMessage::MergeFrom(from._internal_foo_message());
      break;
    }
    case kFoogroup: {
      _internal_mutable_foogroup()->::protobuf_unittest::TestOneof2_FooGroup::MergeFrom(from._internal_foogroup());
      break;
    }
    case kFooLazyMessage: {
      _internal_mutable_foo_lazy_message()->::protobuf_unittest::TestOneof2_NestedMessage::MergeFrom(from._internal_foo_lazy_message());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  switch (from.bar_case()) {
    case kBarInt: {
      _internal_set_bar_int(from._internal_bar_int());
      break;
    }
    case kBarString: {
      _internal_set_bar_string(from._internal_bar_string());
      break;
    }
    case kBarCord: {
      _internal_set_bar_cord(from._internal_bar_cord());
      break;
    }
    case kBarStringPiece: {
      _internal_set_bar_string_piece(from._internal_bar_string_piece());
      break;
    }
    case kBarBytes: {
      _internal_set_bar_bytes(from._internal_bar_bytes());
      break;
    }
    case kBarEnum: {
      _internal_set_bar_enum(from._internal_bar_enum());
      break;
    }
    case kBarStringWithEmptyDefault: {
      _internal_set_bar_string_with_empty_default(from._internal_bar_string_with_empty_default());
      break;
    }
    case kBarCordWithEmptyDefault: {
      _internal_set_bar_cord_with_empty_default(from._internal_bar_cord_with_empty_default());
      break;
    }
    case kBarStringPieceWithEmptyDefault: {
      _internal_set_bar_string_piece_with_empty_default(from._internal_bar_string_piece_with_empty_default());
      break;
    }
    case kBarBytesWithEmptyDefault: {
      _internal_set_bar_bytes_with_empty_default(from._internal_bar_bytes_with_empty_default());
      break;
    }
    case BAR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOneof2::CopyFrom(const TestOneof2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneof2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneof2::IsInitialized() const {
  return true;
}

void TestOneof2::InternalSwap(TestOneof2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &baz_string_, lhs_arena,
      &other->baz_string_, rhs_arena
  );
  swap(baz_int_, other->baz_int_);
  swap(foo_, other->foo_);
  swap(bar_, other->bar_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOneof2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[76]);
}

// ===================================================================

class TestRequiredOneof_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredOneof_NestedMessage>()._has_bits_);
  static void set_has_required_double(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestRequiredOneof_NestedMessage::TestRequiredOneof_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredOneof.NestedMessage)
}
TestRequiredOneof_NestedMessage::TestRequiredOneof_NestedMessage(const TestRequiredOneof_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  required_double_ = from.required_double_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredOneof.NestedMessage)
}

inline void TestRequiredOneof_NestedMessage::SharedCtor() {
required_double_ = 0;
}

TestRequiredOneof_NestedMessage::~TestRequiredOneof_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredOneof.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRequiredOneof_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestRequiredOneof_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRequiredOneof_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_double_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRequiredOneof_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double required_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_required_double(&has_bits);
          required_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRequiredOneof_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double required_double = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_required_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredOneof.NestedMessage)
  return target;
}

size_t TestRequiredOneof_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  size_t total_size = 0;

  // required double required_double = 1;
  if (_internal_has_required_double()) {
    total_size += 1 + 8;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRequiredOneof_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestRequiredOneof_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRequiredOneof_NestedMessage::GetClassData() const { return &_class_data_; }

void TestRequiredOneof_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestRequiredOneof_NestedMessage *>(to)->MergeFrom(
      static_cast<const TestRequiredOneof_NestedMessage &>(from));
}


void TestRequiredOneof_NestedMessage::MergeFrom(const TestRequiredOneof_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_required_double()) {
    _internal_set_required_double(from._internal_required_double());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRequiredOneof_NestedMessage::CopyFrom(const TestRequiredOneof_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredOneof.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredOneof_NestedMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestRequiredOneof_NestedMessage::InternalSwap(TestRequiredOneof_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(required_double_, other->required_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredOneof_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[77]);
}

// ===================================================================

class TestRequiredOneof::_Internal {
 public:
  static const ::protobuf_unittest::TestRequiredOneof_NestedMessage& foo_message(const TestRequiredOneof* msg);
};

const ::protobuf_unittest::TestRequiredOneof_NestedMessage&
TestRequiredOneof::_Internal::foo_message(const TestRequiredOneof* msg) {
  return *msg->foo_.foo_message_;
}
void TestRequiredOneof::set_allocated_foo_message(::protobuf_unittest::TestRequiredOneof_NestedMessage* foo_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_foo();
  if (foo_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foo_message);
    if (message_arena != submessage_arena) {
      foo_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_message, submessage_arena);
    }
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestRequiredOneof.foo_message)
}
TestRequiredOneof::TestRequiredOneof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRequiredOneof)
}
TestRequiredOneof::TestRequiredOneof(const TestRequiredOneof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_foo();
  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestRequiredOneof_NestedMessage::MergeFrom(from._internal_foo_message());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRequiredOneof)
}

inline void TestRequiredOneof::SharedCtor() {
clear_has_foo();
}

TestRequiredOneof::~TestRequiredOneof() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRequiredOneof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRequiredOneof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_foo()) {
    clear_foo();
  }
}

void TestRequiredOneof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRequiredOneof::clear_foo() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestRequiredOneof)
  switch (foo_case()) {
    case kFooInt: {
      // No need to clear
      break;
    }
    case kFooString: {
      foo_.foo_string_.Destroy();
      break;
    }
    case kFooMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete foo_.foo_message_;
      }
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOO_NOT_SET;
}


void TestRequiredOneof::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRequiredOneof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_foo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRequiredOneof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 foo_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_foo_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string foo_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_foo_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestRequiredOneof.foo_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestRequiredOneof.NestedMessage foo_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_foo_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRequiredOneof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRequiredOneof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (foo_case()) {
    case kFooInt: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_int(), target);
      break;
    }
    case kFooString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_foo_string().data(), static_cast<int>(this->_internal_foo_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestRequiredOneof.foo_string");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_foo_string(), target);
      break;
    }
    case kFooMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::foo_message(this),
          _Internal::foo_message(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRequiredOneof)
  return target;
}

size_t TestRequiredOneof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRequiredOneof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (foo_case()) {
    // int32 foo_int = 1;
    case kFooInt: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_foo_int());
      break;
    }
    // string foo_string = 2;
    case kFooString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foo_string());
      break;
    }
    // .protobuf_unittest.TestRequiredOneof.NestedMessage foo_message = 3;
    case kFooMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foo_.foo_message_);
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRequiredOneof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestRequiredOneof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRequiredOneof::GetClassData() const { return &_class_data_; }

void TestRequiredOneof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestRequiredOneof *>(to)->MergeFrom(
      static_cast<const TestRequiredOneof &>(from));
}


void TestRequiredOneof::MergeFrom(const TestRequiredOneof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRequiredOneof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.foo_case()) {
    case kFooInt: {
      _internal_set_foo_int(from._internal_foo_int());
      break;
    }
    case kFooString: {
      _internal_set_foo_string(from._internal_foo_string());
      break;
    }
    case kFooMessage: {
      _internal_mutable_foo_message()->::protobuf_unittest::TestRequiredOneof_NestedMessage::MergeFrom(from._internal_foo_message());
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRequiredOneof::CopyFrom(const TestRequiredOneof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRequiredOneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredOneof::IsInitialized() const {
  switch (foo_case()) {
    case kFooInt: {
      break;
    }
    case kFooString: {
      break;
    }
    case kFooMessage: {
      if (_internal_has_foo_message()) {
        if (!foo_.foo_message_->IsInitialized()) return false;
      }
      break;
    }
    case FOO_NOT_SET: {
      break;
    }
  }
  return true;
}

void TestRequiredOneof::InternalSwap(TestRequiredOneof* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(foo_, other->foo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredOneof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[78]);
}

// ===================================================================

class TestPackedTypes::_Internal {
 public:
};

TestPackedTypes::TestPackedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  packed_int32_(arena),
  packed_int64_(arena),
  packed_uint32_(arena),
  packed_uint64_(arena),
  packed_sint32_(arena),
  packed_sint64_(arena),
  packed_fixed32_(arena),
  packed_fixed64_(arena),
  packed_sfixed32_(arena),
  packed_sfixed64_(arena),
  packed_float_(arena),
  packed_double_(arena),
  packed_bool_(arena),
  packed_enum_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPackedTypes)
}
TestPackedTypes::TestPackedTypes(const TestPackedTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packed_int32_(from.packed_int32_),
      packed_int64_(from.packed_int64_),
      packed_uint32_(from.packed_uint32_),
      packed_uint64_(from.packed_uint64_),
      packed_sint32_(from.packed_sint32_),
      packed_sint64_(from.packed_sint64_),
      packed_fixed32_(from.packed_fixed32_),
      packed_fixed64_(from.packed_fixed64_),
      packed_sfixed32_(from.packed_sfixed32_),
      packed_sfixed64_(from.packed_sfixed64_),
      packed_float_(from.packed_float_),
      packed_double_(from.packed_double_),
      packed_bool_(from.packed_bool_),
      packed_enum_(from.packed_enum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPackedTypes)
}

inline void TestPackedTypes::SharedCtor() {
}

TestPackedTypes::~TestPackedTypes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPackedTypes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestPackedTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestPackedTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestPackedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPackedTypes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packed_int32_.Clear();
  packed_int64_.Clear();
  packed_uint32_.Clear();
  packed_uint64_.Clear();
  packed_sint32_.Clear();
  packed_sint64_.Clear();
  packed_fixed32_.Clear();
  packed_fixed64_.Clear();
  packed_sfixed32_.Clear();
  packed_sfixed64_.Clear();
  packed_float_.Clear();
  packed_double_.Clear();
  packed_bool_.Clear();
  packed_enum_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestPackedTypes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 packed_int32 = 90 [packed = true];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 208) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 packed_int64 = 91 [packed = true];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packed_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 216) {
          _internal_add_packed_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 packed_uint32 = 92 [packed = true];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 224) {
          _internal_add_packed_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 packed_uint64 = 93 [packed = true];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packed_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 232) {
          _internal_add_packed_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 packed_sint32 = 94 [packed = true];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 240) {
          _internal_add_packed_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 packed_sint64 = 95 [packed = true];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_packed_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 248) {
          _internal_add_packed_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 packed_fixed32 = 96 [packed = true];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_packed_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 5) {
          _internal_add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 packed_fixed64 = 97 [packed = true];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_packed_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_packed_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_packed_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated float packed_float = 100 [packed = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_packed_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_packed_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated double packed_double = 101 [packed = true];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_packed_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_packed_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated bool packed_bool = 102 [packed = true];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_packed_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_packed_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_packed_enum(), ptr, ctx, ::protobuf_unittest::ForeignEnum_IsValid, &_internal_metadata_, 103);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_add_packed_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(103, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestPackedTypes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPackedTypes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          90, _internal_packed_int32(), byte_size, target);
    }
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    int byte_size = _packed_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          91, _internal_packed_int64(), byte_size, target);
    }
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    int byte_size = _packed_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          92, _internal_packed_uint32(), byte_size, target);
    }
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    int byte_size = _packed_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          93, _internal_packed_uint64(), byte_size, target);
    }
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    int byte_size = _packed_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          94, _internal_packed_sint32(), byte_size, target);
    }
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    int byte_size = _packed_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          95, _internal_packed_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  if (this->_internal_packed_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(96, _internal_packed_fixed32(), target);
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  if (this->_internal_packed_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(97, _internal_packed_fixed64(), target);
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  if (this->_internal_packed_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(98, _internal_packed_sfixed32(), target);
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  if (this->_internal_packed_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(99, _internal_packed_sfixed64(), target);
  }

  // repeated float packed_float = 100 [packed = true];
  if (this->_internal_packed_float_size() > 0) {
    target = stream->WriteFixedPacked(100, _internal_packed_float(), target);
  }

  // repeated double packed_double = 101 [packed = true];
  if (this->_internal_packed_double_size() > 0) {
    target = stream->WriteFixedPacked(101, _internal_packed_double(), target);
  }

  // repeated bool packed_bool = 102 [packed = true];
  if (this->_internal_packed_bool_size() > 0) {
    target = stream->WriteFixedPacked(102, _internal_packed_bool(), target);
  }

  // repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
  {
    int byte_size = _packed_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          103, packed_enum_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPackedTypes)
  return target;
}

size_t TestPackedTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPackedTypes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->packed_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->packed_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->packed_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->packed_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->packed_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float packed_float = 100 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double packed_double = 101 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool packed_bool = 102 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_packed_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestPackedTypes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestPackedTypes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestPackedTypes::GetClassData() const { return &_class_data_; }

void TestPackedTypes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestPackedTypes *>(to)->MergeFrom(
      static_cast<const TestPackedTypes &>(from));
}


void TestPackedTypes::MergeFrom(const TestPackedTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packed_int32_.MergeFrom(from.packed_int32_);
  packed_int64_.MergeFrom(from.packed_int64_);
  packed_uint32_.MergeFrom(from.packed_uint32_);
  packed_uint64_.MergeFrom(from.packed_uint64_);
  packed_sint32_.MergeFrom(from.packed_sint32_);
  packed_sint64_.MergeFrom(from.packed_sint64_);
  packed_fixed32_.MergeFrom(from.packed_fixed32_);
  packed_fixed64_.MergeFrom(from.packed_fixed64_);
  packed_sfixed32_.MergeFrom(from.packed_sfixed32_);
  packed_sfixed64_.MergeFrom(from.packed_sfixed64_);
  packed_float_.MergeFrom(from.packed_float_);
  packed_double_.MergeFrom(from.packed_double_);
  packed_bool_.MergeFrom(from.packed_bool_);
  packed_enum_.MergeFrom(from.packed_enum_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestPackedTypes::CopyFrom(const TestPackedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedTypes::IsInitialized() const {
  return true;
}

void TestPackedTypes::InternalSwap(TestPackedTypes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  packed_int32_.InternalSwap(&other->packed_int32_);
  packed_int64_.InternalSwap(&other->packed_int64_);
  packed_uint32_.InternalSwap(&other->packed_uint32_);
  packed_uint64_.InternalSwap(&other->packed_uint64_);
  packed_sint32_.InternalSwap(&other->packed_sint32_);
  packed_sint64_.InternalSwap(&other->packed_sint64_);
  packed_fixed32_.InternalSwap(&other->packed_fixed32_);
  packed_fixed64_.InternalSwap(&other->packed_fixed64_);
  packed_sfixed32_.InternalSwap(&other->packed_sfixed32_);
  packed_sfixed64_.InternalSwap(&other->packed_sfixed64_);
  packed_float_.InternalSwap(&other->packed_float_);
  packed_double_.InternalSwap(&other->packed_double_);
  packed_bool_.InternalSwap(&other->packed_bool_);
  packed_enum_.InternalSwap(&other->packed_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPackedTypes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[79]);
}

// ===================================================================

class TestUnpackedTypes::_Internal {
 public:
};

TestUnpackedTypes::TestUnpackedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unpacked_int32_(arena),
  unpacked_int64_(arena),
  unpacked_uint32_(arena),
  unpacked_uint64_(arena),
  unpacked_sint32_(arena),
  unpacked_sint64_(arena),
  unpacked_fixed32_(arena),
  unpacked_fixed64_(arena),
  unpacked_sfixed32_(arena),
  unpacked_sfixed64_(arena),
  unpacked_float_(arena),
  unpacked_double_(arena),
  unpacked_bool_(arena),
  unpacked_enum_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestUnpackedTypes)
}
TestUnpackedTypes::TestUnpackedTypes(const TestUnpackedTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unpacked_int32_(from.unpacked_int32_),
      unpacked_int64_(from.unpacked_int64_),
      unpacked_uint32_(from.unpacked_uint32_),
      unpacked_uint64_(from.unpacked_uint64_),
      unpacked_sint32_(from.unpacked_sint32_),
      unpacked_sint64_(from.unpacked_sint64_),
      unpacked_fixed32_(from.unpacked_fixed32_),
      unpacked_fixed64_(from.unpacked_fixed64_),
      unpacked_sfixed32_(from.unpacked_sfixed32_),
      unpacked_sfixed64_(from.unpacked_sfixed64_),
      unpacked_float_(from.unpacked_float_),
      unpacked_double_(from.unpacked_double_),
      unpacked_bool_(from.unpacked_bool_),
      unpacked_enum_(from.unpacked_enum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestUnpackedTypes)
}

inline void TestUnpackedTypes::SharedCtor() {
}

TestUnpackedTypes::~TestUnpackedTypes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestUnpackedTypes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestUnpackedTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestUnpackedTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestUnpackedTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestUnpackedTypes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unpacked_int32_.Clear();
  unpacked_int64_.Clear();
  unpacked_uint32_.Clear();
  unpacked_uint64_.Clear();
  unpacked_sint32_.Clear();
  unpacked_sint64_.Clear();
  unpacked_fixed32_.Clear();
  unpacked_fixed64_.Clear();
  unpacked_sfixed32_.Clear();
  unpacked_sfixed64_.Clear();
  unpacked_float_.Clear();
  unpacked_double_.Clear();
  unpacked_bool_.Clear();
  unpacked_enum_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestUnpackedTypes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 unpacked_int32 = 90 [packed = false];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<720>(ptr));
        } else if (static_cast<uint8_t>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unpacked_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 unpacked_int64 = 91 [packed = false];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<728>(ptr));
        } else if (static_cast<uint8_t>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_unpacked_int64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 unpacked_uint32 = 92 [packed = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<736>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unpacked_uint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 unpacked_uint64 = 93 [packed = false];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<744>(ptr));
        } else if (static_cast<uint8_t>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unpacked_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 unpacked_sint32 = 94 [packed = false];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<752>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_unpacked_sint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 unpacked_sint64 = 95 [packed = false];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<760>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_unpacked_sint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 unpacked_fixed32 = 96 [packed = false];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<773>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_unpacked_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 unpacked_fixed64 = 97 [packed = false];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<777>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_unpacked_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
            ptr += sizeof(int32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<789>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_unpacked_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
            ptr += sizeof(int64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<793>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_unpacked_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float unpacked_float = 100 [packed = false];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<805>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_unpacked_float(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double unpacked_double = 101 [packed = false];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<809>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_unpacked_double(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool unpacked_bool = 102 [packed = false];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<816>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_unpacked_bool(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
              _internal_add_unpacked_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(103, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<824>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_unpacked_enum(), ptr, ctx, ::protobuf_unittest::ForeignEnum_IsValid, &_internal_metadata_, 103);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestUnpackedTypes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestUnpackedTypes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 unpacked_int32 = 90 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(90, this->_internal_unpacked_int32(i), target);
  }

  // repeated int64 unpacked_int64 = 91 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(91, this->_internal_unpacked_int64(i), target);
  }

  // repeated uint32 unpacked_uint32 = 92 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(92, this->_internal_unpacked_uint32(i), target);
  }

  // repeated uint64 unpacked_uint64 = 93 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(93, this->_internal_unpacked_uint64(i), target);
  }

  // repeated sint32 unpacked_sint32 = 94 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(94, this->_internal_unpacked_sint32(i), target);
  }

  // repeated sint64 unpacked_sint64 = 95 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(95, this->_internal_unpacked_sint64(i), target);
  }

  // repeated fixed32 unpacked_fixed32 = 96 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(96, this->_internal_unpacked_fixed32(i), target);
  }

  // repeated fixed64 unpacked_fixed64 = 97 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(97, this->_internal_unpacked_fixed64(i), target);
  }

  // repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(98, this->_internal_unpacked_sfixed32(i), target);
  }

  // repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(99, this->_internal_unpacked_sfixed64(i), target);
  }

  // repeated float unpacked_float = 100 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(100, this->_internal_unpacked_float(i), target);
  }

  // repeated double unpacked_double = 101 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(101, this->_internal_unpacked_double(i), target);
  }

  // repeated bool unpacked_bool = 102 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(102, this->_internal_unpacked_bool(i), target);
  }

  // repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        103, this->_internal_unpacked_enum(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestUnpackedTypes)
  return target;
}

size_t TestUnpackedTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestUnpackedTypes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 unpacked_int32 = 90 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->unpacked_int32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_int32_size());
    total_size += data_size;
  }

  // repeated int64 unpacked_int64 = 91 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->unpacked_int64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_int64_size());
    total_size += data_size;
  }

  // repeated uint32 unpacked_uint32 = 92 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->unpacked_uint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 unpacked_uint64 = 93 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->unpacked_uint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 unpacked_sint32 = 94 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->unpacked_sint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 unpacked_sint64 = 95 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->unpacked_sint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 unpacked_fixed32 = 96 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 unpacked_fixed64 = 97 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_sfixed64_size());
    total_size += data_size;
  }

  // repeated float unpacked_float = 100 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_float_size());
    total_size += data_size;
  }

  // repeated double unpacked_double = 101 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_double_size());
    total_size += data_size;
  }

  // repeated bool unpacked_bool = 102 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_bool_size());
    total_size += data_size;
  }

  // repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_unpacked_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestUnpackedTypes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestUnpackedTypes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestUnpackedTypes::GetClassData() const { return &_class_data_; }

void TestUnpackedTypes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestUnpackedTypes *>(to)->MergeFrom(
      static_cast<const TestUnpackedTypes &>(from));
}


void TestUnpackedTypes::MergeFrom(const TestUnpackedTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestUnpackedTypes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unpacked_int32_.MergeFrom(from.unpacked_int32_);
  unpacked_int64_.MergeFrom(from.unpacked_int64_);
  unpacked_uint32_.MergeFrom(from.unpacked_uint32_);
  unpacked_uint64_.MergeFrom(from.unpacked_uint64_);
  unpacked_sint32_.MergeFrom(from.unpacked_sint32_);
  unpacked_sint64_.MergeFrom(from.unpacked_sint64_);
  unpacked_fixed32_.MergeFrom(from.unpacked_fixed32_);
  unpacked_fixed64_.MergeFrom(from.unpacked_fixed64_);
  unpacked_sfixed32_.MergeFrom(from.unpacked_sfixed32_);
  unpacked_sfixed64_.MergeFrom(from.unpacked_sfixed64_);
  unpacked_float_.MergeFrom(from.unpacked_float_);
  unpacked_double_.MergeFrom(from.unpacked_double_);
  unpacked_bool_.MergeFrom(from.unpacked_bool_);
  unpacked_enum_.MergeFrom(from.unpacked_enum_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestUnpackedTypes::CopyFrom(const TestUnpackedTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestUnpackedTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestUnpackedTypes::IsInitialized() const {
  return true;
}

void TestUnpackedTypes::InternalSwap(TestUnpackedTypes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unpacked_int32_.InternalSwap(&other->unpacked_int32_);
  unpacked_int64_.InternalSwap(&other->unpacked_int64_);
  unpacked_uint32_.InternalSwap(&other->unpacked_uint32_);
  unpacked_uint64_.InternalSwap(&other->unpacked_uint64_);
  unpacked_sint32_.InternalSwap(&other->unpacked_sint32_);
  unpacked_sint64_.InternalSwap(&other->unpacked_sint64_);
  unpacked_fixed32_.InternalSwap(&other->unpacked_fixed32_);
  unpacked_fixed64_.InternalSwap(&other->unpacked_fixed64_);
  unpacked_sfixed32_.InternalSwap(&other->unpacked_sfixed32_);
  unpacked_sfixed64_.InternalSwap(&other->unpacked_sfixed64_);
  unpacked_float_.InternalSwap(&other->unpacked_float_);
  unpacked_double_.InternalSwap(&other->unpacked_double_);
  unpacked_bool_.InternalSwap(&other->unpacked_bool_);
  unpacked_enum_.InternalSwap(&other->unpacked_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestUnpackedTypes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[80]);
}

// ===================================================================

class TestPackedExtensions::_Internal {
 public:
};

TestPackedExtensions::TestPackedExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPackedExtensions)
}
TestPackedExtensions::TestPackedExtensions(const TestPackedExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPackedExtensions)
}

inline void TestPackedExtensions::SharedCtor() {
}

TestPackedExtensions::~TestPackedExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPackedExtensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestPackedExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestPackedExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestPackedExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPackedExtensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestPackedExtensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestPackedExtensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPackedExtensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPackedExtensions)
  return target;
}

size_t TestPackedExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPackedExtensions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestPackedExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestPackedExtensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestPackedExtensions::GetClassData() const { return &_class_data_; }

void TestPackedExtensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestPackedExtensions *>(to)->MergeFrom(
      static_cast<const TestPackedExtensions &>(from));
}


void TestPackedExtensions::MergeFrom(const TestPackedExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPackedExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestPackedExtensions::CopyFrom(const TestPackedExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPackedExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedExtensions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestPackedExtensions::InternalSwap(TestPackedExtensions* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPackedExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[81]);
}

// ===================================================================

class TestUnpackedExtensions::_Internal {
 public:
};

TestUnpackedExtensions::TestUnpackedExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestUnpackedExtensions)
}
TestUnpackedExtensions::TestUnpackedExtensions(const TestUnpackedExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestUnpackedExtensions)
}

inline void TestUnpackedExtensions::SharedCtor() {
}

TestUnpackedExtensions::~TestUnpackedExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestUnpackedExtensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestUnpackedExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestUnpackedExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestUnpackedExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestUnpackedExtensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestUnpackedExtensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestUnpackedExtensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestUnpackedExtensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestUnpackedExtensions)
  return target;
}

size_t TestUnpackedExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestUnpackedExtensions)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestUnpackedExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestUnpackedExtensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestUnpackedExtensions::GetClassData() const { return &_class_data_; }

void TestUnpackedExtensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestUnpackedExtensions *>(to)->MergeFrom(
      static_cast<const TestUnpackedExtensions &>(from));
}


void TestUnpackedExtensions::MergeFrom(const TestUnpackedExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestUnpackedExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestUnpackedExtensions::CopyFrom(const TestUnpackedExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestUnpackedExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestUnpackedExtensions::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestUnpackedExtensions::InternalSwap(TestUnpackedExtensions* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestUnpackedExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[82]);
}

// ===================================================================

class TestDynamicExtensions_DynamicMessageType::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDynamicExtensions_DynamicMessageType>()._has_bits_);
  static void set_has_dynamic_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestDynamicExtensions_DynamicMessageType::TestDynamicExtensions_DynamicMessageType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
}
TestDynamicExtensions_DynamicMessageType::TestDynamicExtensions_DynamicMessageType(const TestDynamicExtensions_DynamicMessageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dynamic_field_ = from.dynamic_field_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
}

inline void TestDynamicExtensions_DynamicMessageType::SharedCtor() {
dynamic_field_ = 0;
}

TestDynamicExtensions_DynamicMessageType::~TestDynamicExtensions_DynamicMessageType() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDynamicExtensions_DynamicMessageType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestDynamicExtensions_DynamicMessageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDynamicExtensions_DynamicMessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynamic_field_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDynamicExtensions_DynamicMessageType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dynamic_field = 2100;
      case 2100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_dynamic_field(&has_bits);
          dynamic_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDynamicExtensions_DynamicMessageType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dynamic_field = 2100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2100, this->_internal_dynamic_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  return target;
}

size_t TestDynamicExtensions_DynamicMessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dynamic_field = 2100;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 3 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dynamic_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDynamicExtensions_DynamicMessageType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDynamicExtensions_DynamicMessageType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDynamicExtensions_DynamicMessageType::GetClassData() const { return &_class_data_; }

void TestDynamicExtensions_DynamicMessageType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDynamicExtensions_DynamicMessageType *>(to)->MergeFrom(
      static_cast<const TestDynamicExtensions_DynamicMessageType &>(from));
}


void TestDynamicExtensions_DynamicMessageType::MergeFrom(const TestDynamicExtensions_DynamicMessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dynamic_field()) {
    _internal_set_dynamic_field(from._internal_dynamic_field());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDynamicExtensions_DynamicMessageType::CopyFrom(const TestDynamicExtensions_DynamicMessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDynamicExtensions_DynamicMessageType::IsInitialized() const {
  return true;
}

void TestDynamicExtensions_DynamicMessageType::InternalSwap(TestDynamicExtensions_DynamicMessageType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dynamic_field_, other->dynamic_field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDynamicExtensions_DynamicMessageType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[83]);
}

// ===================================================================

class TestDynamicExtensions::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDynamicExtensions>()._has_bits_);
  static void set_has_scalar_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enum_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dynamic_enum_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protobuf_unittest::ForeignMessage& message_extension(const TestDynamicExtensions* msg);
  static void set_has_message_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType& dynamic_message_extension(const TestDynamicExtensions* msg);
  static void set_has_dynamic_message_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::ForeignMessage&
TestDynamicExtensions::_Internal::message_extension(const TestDynamicExtensions* msg) {
  return *msg->message_extension_;
}
const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType&
TestDynamicExtensions::_Internal::dynamic_message_extension(const TestDynamicExtensions* msg) {
  return *msg->dynamic_message_extension_;
}
TestDynamicExtensions::TestDynamicExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_extension_(arena),
  packed_extension_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDynamicExtensions)
}
TestDynamicExtensions::TestDynamicExtensions(const TestDynamicExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_extension_(from.repeated_extension_),
      packed_extension_(from.packed_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message_extension()) {
    message_extension_ = new ::protobuf_unittest::ForeignMessage(*from.message_extension_);
  } else {
    message_extension_ = nullptr;
  }
  if (from._internal_has_dynamic_message_extension()) {
    dynamic_message_extension_ = new ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType(*from.dynamic_message_extension_);
  } else {
    dynamic_message_extension_ = nullptr;
  }
  ::memcpy(&scalar_extension_, &from.scalar_extension_,
    static_cast<size_t>(reinterpret_cast<char*>(&dynamic_enum_extension_) -
    reinterpret_cast<char*>(&scalar_extension_)) + sizeof(dynamic_enum_extension_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDynamicExtensions)
}

inline void TestDynamicExtensions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_extension_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scalar_extension_) -
    reinterpret_cast<char*>(&message_extension_)) + sizeof(scalar_extension_));
enum_extension_ = 4;
dynamic_enum_extension_ = 2200;
}

TestDynamicExtensions::~TestDynamicExtensions() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDynamicExtensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDynamicExtensions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_extension_;
  if (this != internal_default_instance()) delete dynamic_message_extension_;
}

void TestDynamicExtensions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDynamicExtensions::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDynamicExtensions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_extension_.Clear();
  packed_extension_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(message_extension_ != nullptr);
      message_extension_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dynamic_message_extension_ != nullptr);
      dynamic_message_extension_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    scalar_extension_ = 0u;
    enum_extension_ = 4;
    dynamic_enum_extension_ = 2200;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDynamicExtensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 scalar_extension = 2000;
      case 2000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_scalar_extension(&has_bits);
          scalar_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum enum_extension = 2001;
      case 2001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_enum_extension(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2001, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
      case 2002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestDynamicExtensions_DynamicEnumType_IsValid(val))) {
            _internal_set_dynamic_enum_extension(static_cast<::protobuf_unittest::TestDynamicExtensions_DynamicEnumType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2002, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage message_extension = 2003;
      case 2003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
      case 2004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_message_extension(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_extension = 2005;
      case 2005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_extension();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestDynamicExtensions.repeated_extension");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16042>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 packed_extension = 2006 [packed = true];
      case 2006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_extension(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_packed_extension(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDynamicExtensions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDynamicExtensions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 scalar_extension = 2000;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2000, this->_internal_scalar_extension(), target);
  }

  // optional .protobuf_unittest.ForeignEnum enum_extension = 2001;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2001, this->_internal_enum_extension(), target);
  }

  // optional .protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2002, this->_internal_dynamic_enum_extension(), target);
  }

  // optional .protobuf_unittest.ForeignMessage message_extension = 2003;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2003, _Internal::message_extension(this),
        _Internal::message_extension(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2004, _Internal::dynamic_message_extension(this),
        _Internal::dynamic_message_extension(this).GetCachedSize(), target, stream);
  }

  // repeated string repeated_extension = 2005;
  for (int i = 0, n = this->_internal_repeated_extension_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_extension(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestDynamicExtensions.repeated_extension");
    target = stream->WriteString(2005, s, target);
  }

  // repeated sint32 packed_extension = 2006 [packed = true];
  {
    int byte_size = _packed_extension_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          2006, _internal_packed_extension(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDynamicExtensions)
  return target;
}

size_t TestDynamicExtensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDynamicExtensions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string repeated_extension = 2005;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_extension_.size());
  for (int i = 0, n = repeated_extension_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_extension_.Get(i));
  }

  // repeated sint32 packed_extension = 2006 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->packed_extension_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_extension_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .protobuf_unittest.ForeignMessage message_extension = 2003;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_extension_);
    }

    // optional .protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dynamic_message_extension_);
    }

    // optional fixed32 scalar_extension = 2000;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional .protobuf_unittest.ForeignEnum enum_extension = 2001;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_enum_extension());
    }

    // optional .protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dynamic_enum_extension());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDynamicExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDynamicExtensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDynamicExtensions::GetClassData() const { return &_class_data_; }

void TestDynamicExtensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDynamicExtensions *>(to)->MergeFrom(
      static_cast<const TestDynamicExtensions &>(from));
}


void TestDynamicExtensions::MergeFrom(const TestDynamicExtensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDynamicExtensions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_extension_.MergeFrom(from.repeated_extension_);
  packed_extension_.MergeFrom(from.packed_extension_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_message_extension()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_message_extension());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dynamic_message_extension()->::protobuf_unittest::TestDynamicExtensions_DynamicMessageType::MergeFrom(from._internal_dynamic_message_extension());
    }
    if (cached_has_bits & 0x00000004u) {
      scalar_extension_ = from.scalar_extension_;
    }
    if (cached_has_bits & 0x00000008u) {
      enum_extension_ = from.enum_extension_;
    }
    if (cached_has_bits & 0x00000010u) {
      dynamic_enum_extension_ = from.dynamic_enum_extension_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDynamicExtensions::CopyFrom(const TestDynamicExtensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDynamicExtensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDynamicExtensions::IsInitialized() const {
  return true;
}

void TestDynamicExtensions::InternalSwap(TestDynamicExtensions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_extension_.InternalSwap(&other->repeated_extension_);
  packed_extension_.InternalSwap(&other->packed_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDynamicExtensions, scalar_extension_)
      + sizeof(TestDynamicExtensions::scalar_extension_)
      - PROTOBUF_FIELD_OFFSET(TestDynamicExtensions, message_extension_)>(
          reinterpret_cast<char*>(&message_extension_),
          reinterpret_cast<char*>(&other->message_extension_));
  swap(enum_extension_, other->enum_extension_);
  swap(dynamic_enum_extension_, other->dynamic_enum_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDynamicExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[84]);
}

// ===================================================================

class TestRepeatedScalarDifferentTagSizes::_Internal {
 public:
};

TestRepeatedScalarDifferentTagSizes::TestRepeatedScalarDifferentTagSizes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_fixed32_(arena),
  repeated_int32_(arena),
  repeated_fixed64_(arena),
  repeated_int64_(arena),
  repeated_float_(arena),
  repeated_uint64_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
}
TestRepeatedScalarDifferentTagSizes::TestRepeatedScalarDifferentTagSizes(const TestRepeatedScalarDifferentTagSizes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_int32_(from.repeated_int32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_int64_(from.repeated_int64_),
      repeated_float_(from.repeated_float_),
      repeated_uint64_(from.repeated_uint64_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
}

inline void TestRepeatedScalarDifferentTagSizes::SharedCtor() {
}

TestRepeatedScalarDifferentTagSizes::~TestRepeatedScalarDifferentTagSizes() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestRepeatedScalarDifferentTagSizes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestRepeatedScalarDifferentTagSizes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestRepeatedScalarDifferentTagSizes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_fixed32_.Clear();
  repeated_int32_.Clear();
  repeated_fixed64_.Clear();
  repeated_int64_.Clear();
  repeated_float_.Clear();
  repeated_uint64_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRepeatedScalarDifferentTagSizes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 repeated_fixed32 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<101>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 2046;
      case 2046:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16369>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 2047;
      case 2047:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16376>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float repeated_float = 262142;
      case 262142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 262143;
      case 262143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRepeatedScalarDifferentTagSizes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 repeated_fixed32 = 12;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(12, this->_internal_repeated_fixed32(i), target);
  }

  // repeated int32 repeated_int32 = 13;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_repeated_int32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 2046;
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2046, this->_internal_repeated_fixed64(i), target);
  }

  // repeated int64 repeated_int64 = 2047;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2047, this->_internal_repeated_int64(i), target);
  }

  // repeated float repeated_float = 262142;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(262142, this->_internal_repeated_float(i), target);
  }

  // repeated uint64 repeated_uint64 = 262143;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(262143, this->_internal_repeated_uint64(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  return target;
}

size_t TestRepeatedScalarDifferentTagSizes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 repeated_fixed32 = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated int32 repeated_int32 = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 2046;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 2047;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 262142;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::_pbi::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 262143;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 3 *
                  ::_pbi::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRepeatedScalarDifferentTagSizes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestRepeatedScalarDifferentTagSizes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRepeatedScalarDifferentTagSizes::GetClassData() const { return &_class_data_; }

void TestRepeatedScalarDifferentTagSizes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestRepeatedScalarDifferentTagSizes *>(to)->MergeFrom(
      static_cast<const TestRepeatedScalarDifferentTagSizes &>(from));
}


void TestRepeatedScalarDifferentTagSizes::MergeFrom(const TestRepeatedScalarDifferentTagSizes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRepeatedScalarDifferentTagSizes::CopyFrom(const TestRepeatedScalarDifferentTagSizes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepeatedScalarDifferentTagSizes::IsInitialized() const {
  return true;
}

void TestRepeatedScalarDifferentTagSizes::InternalSwap(TestRepeatedScalarDifferentTagSizes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepeatedScalarDifferentTagSizes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[85]);
}

// ===================================================================

class TestParsingMerge_RepeatedFieldsGenerator_Group1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_RepeatedFieldsGenerator_Group1>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& field1(const TestParsingMerge_RepeatedFieldsGenerator_Group1* msg);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge_RepeatedFieldsGenerator_Group1::_Internal::field1(const TestParsingMerge_RepeatedFieldsGenerator_Group1* msg) {
  return *msg->field1_;
}
TestParsingMerge_RepeatedFieldsGenerator_Group1::TestParsingMerge_RepeatedFieldsGenerator_Group1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
}
TestParsingMerge_RepeatedFieldsGenerator_Group1::TestParsingMerge_RepeatedFieldsGenerator_Group1(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_field1()) {
    field1_ = new ::protobuf_unittest::TestAllTypes(*from.field1_);
  } else {
    field1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
}

inline void TestParsingMerge_RepeatedFieldsGenerator_Group1::SharedCtor() {
field1_ = nullptr;
}

TestParsingMerge_RepeatedFieldsGenerator_Group1::~TestParsingMerge_RepeatedFieldsGenerator_Group1() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMerge_RepeatedFieldsGenerator_Group1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete field1_;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field1_ != nullptr);
    field1_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestParsingMerge_RepeatedFieldsGenerator_Group1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes field1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_field1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMerge_RepeatedFieldsGenerator_Group1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes field1 = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::field1(this),
        _Internal::field1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  return target;
}

size_t TestParsingMerge_RepeatedFieldsGenerator_Group1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes field1 = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field1_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestParsingMerge_RepeatedFieldsGenerator_Group1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestParsingMerge_RepeatedFieldsGenerator_Group1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestParsingMerge_RepeatedFieldsGenerator_Group1::GetClassData() const { return &_class_data_; }

void TestParsingMerge_RepeatedFieldsGenerator_Group1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestParsingMerge_RepeatedFieldsGenerator_Group1 *>(to)->MergeFrom(
      static_cast<const TestParsingMerge_RepeatedFieldsGenerator_Group1 &>(from));
}


void TestParsingMerge_RepeatedFieldsGenerator_Group1::MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_field1()) {
    _internal_mutable_field1()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_field1());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_RepeatedFieldsGenerator_Group1::IsInitialized() const {
  return true;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group1::InternalSwap(TestParsingMerge_RepeatedFieldsGenerator_Group1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field1_, other->field1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_RepeatedFieldsGenerator_Group1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[86]);
}

// ===================================================================

class TestParsingMerge_RepeatedFieldsGenerator_Group2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_RepeatedFieldsGenerator_Group2>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& field1(const TestParsingMerge_RepeatedFieldsGenerator_Group2* msg);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge_RepeatedFieldsGenerator_Group2::_Internal::field1(const TestParsingMerge_RepeatedFieldsGenerator_Group2* msg) {
  return *msg->field1_;
}
TestParsingMerge_RepeatedFieldsGenerator_Group2::TestParsingMerge_RepeatedFieldsGenerator_Group2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
}
TestParsingMerge_RepeatedFieldsGenerator_Group2::TestParsingMerge_RepeatedFieldsGenerator_Group2(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_field1()) {
    field1_ = new ::protobuf_unittest::TestAllTypes(*from.field1_);
  } else {
    field1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
}

inline void TestParsingMerge_RepeatedFieldsGenerator_Group2::SharedCtor() {
field1_ = nullptr;
}

TestParsingMerge_RepeatedFieldsGenerator_Group2::~TestParsingMerge_RepeatedFieldsGenerator_Group2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMerge_RepeatedFieldsGenerator_Group2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete field1_;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field1_ != nullptr);
    field1_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestParsingMerge_RepeatedFieldsGenerator_Group2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes field1 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_field1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMerge_RepeatedFieldsGenerator_Group2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes field1 = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::field1(this),
        _Internal::field1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  return target;
}

size_t TestParsingMerge_RepeatedFieldsGenerator_Group2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes field1 = 21;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field1_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestParsingMerge_RepeatedFieldsGenerator_Group2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestParsingMerge_RepeatedFieldsGenerator_Group2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestParsingMerge_RepeatedFieldsGenerator_Group2::GetClassData() const { return &_class_data_; }

void TestParsingMerge_RepeatedFieldsGenerator_Group2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestParsingMerge_RepeatedFieldsGenerator_Group2 *>(to)->MergeFrom(
      static_cast<const TestParsingMerge_RepeatedFieldsGenerator_Group2 &>(from));
}


void TestParsingMerge_RepeatedFieldsGenerator_Group2::MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_field1()) {
    _internal_mutable_field1()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_field1());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_RepeatedFieldsGenerator_Group2::IsInitialized() const {
  return true;
}

void TestParsingMerge_RepeatedFieldsGenerator_Group2::InternalSwap(TestParsingMerge_RepeatedFieldsGenerator_Group2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field1_, other->field1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_RepeatedFieldsGenerator_Group2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[87]);
}

// ===================================================================

class TestParsingMerge_RepeatedFieldsGenerator::_Internal {
 public:
};

TestParsingMerge_RepeatedFieldsGenerator::TestParsingMerge_RepeatedFieldsGenerator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field1_(arena),
  field2_(arena),
  field3_(arena),
  group1_(arena),
  group2_(arena),
  ext1_(arena),
  ext2_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
}
TestParsingMerge_RepeatedFieldsGenerator::TestParsingMerge_RepeatedFieldsGenerator(const TestParsingMerge_RepeatedFieldsGenerator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field1_(from.field1_),
      field2_(from.field2_),
      field3_(from.field3_),
      group1_(from.group1_),
      group2_(from.group2_),
      ext1_(from.ext1_),
      ext2_(from.ext2_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
}

inline void TestParsingMerge_RepeatedFieldsGenerator::SharedCtor() {
}

TestParsingMerge_RepeatedFieldsGenerator::~TestParsingMerge_RepeatedFieldsGenerator() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMerge_RepeatedFieldsGenerator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestParsingMerge_RepeatedFieldsGenerator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMerge_RepeatedFieldsGenerator::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field1_.Clear();
  field2_.Clear();
  field3_.Clear();
  group1_.Clear();
  group2_.Clear();
  ext1_.Clear();
  ext2_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestParsingMerge_RepeatedFieldsGenerator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf_unittest.TestAllTypes field1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes field2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes field3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated group Group1 = 10 { ... };
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 83)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_group1(), ptr, 83);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<83>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated group Group2 = 20 { ... };
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 163)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_group2(), ptr, 163);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<163>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes ext1 = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ext1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8002>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes ext2 = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ext2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8010>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMerge_RepeatedFieldsGenerator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypes field1 = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field1_size()); i < n; i++) {
    const auto& repfield = this->_internal_field1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes field2 = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field2_size()); i < n; i++) {
    const auto& repfield = this->_internal_field2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes field3 = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field3_size()); i < n; i++) {
    const auto& repfield = this->_internal_field3(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated group Group1 = 10 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(10, this->_internal_group1(i), target, stream);
  }

  // repeated group Group2 = 20 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(20, this->_internal_group2(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes ext1 = 1000;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ext1_size()); i < n; i++) {
    const auto& repfield = this->_internal_ext1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1000, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes ext2 = 1001;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ext2_size()); i < n; i++) {
    const auto& repfield = this->_internal_ext2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1001, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  return target;
}

size_t TestParsingMerge_RepeatedFieldsGenerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypes field1 = 1;
  total_size += 1UL * this->_internal_field1_size();
  for (const auto& msg : this->field1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes field2 = 2;
  total_size += 1UL * this->_internal_field2_size();
  for (const auto& msg : this->field2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes field3 = 3;
  total_size += 1UL * this->_internal_field3_size();
  for (const auto& msg : this->field3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated group Group1 = 10 { ... };
  total_size += 2UL * this->_internal_group1_size();
  for (const auto& msg : this->group1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated group Group2 = 20 { ... };
  total_size += 4UL * this->_internal_group2_size();
  for (const auto& msg : this->group2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes ext1 = 1000;
  total_size += 2UL * this->_internal_ext1_size();
  for (const auto& msg : this->ext1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypes ext2 = 1001;
  total_size += 2UL * this->_internal_ext2_size();
  for (const auto& msg : this->ext2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestParsingMerge_RepeatedFieldsGenerator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestParsingMerge_RepeatedFieldsGenerator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestParsingMerge_RepeatedFieldsGenerator::GetClassData() const { return &_class_data_; }

void TestParsingMerge_RepeatedFieldsGenerator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestParsingMerge_RepeatedFieldsGenerator *>(to)->MergeFrom(
      static_cast<const TestParsingMerge_RepeatedFieldsGenerator &>(from));
}


void TestParsingMerge_RepeatedFieldsGenerator::MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  field1_.MergeFrom(from.field1_);
  field2_.MergeFrom(from.field2_);
  field3_.MergeFrom(from.field3_);
  group1_.MergeFrom(from.group1_);
  group2_.MergeFrom(from.group2_);
  ext1_.MergeFrom(from.ext1_);
  ext2_.MergeFrom(from.ext2_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestParsingMerge_RepeatedFieldsGenerator::CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_RepeatedFieldsGenerator::IsInitialized() const {
  return true;
}

void TestParsingMerge_RepeatedFieldsGenerator::InternalSwap(TestParsingMerge_RepeatedFieldsGenerator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field1_.InternalSwap(&other->field1_);
  field2_.InternalSwap(&other->field2_);
  field3_.InternalSwap(&other->field3_);
  group1_.InternalSwap(&other->group1_);
  group2_.InternalSwap(&other->group2_);
  ext1_.InternalSwap(&other->ext1_);
  ext2_.InternalSwap(&other->ext2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_RepeatedFieldsGenerator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[88]);
}

// ===================================================================

class TestParsingMerge_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_OptionalGroup>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& optional_group_all_types(const TestParsingMerge_OptionalGroup* msg);
  static void set_has_optional_group_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge_OptionalGroup::_Internal::optional_group_all_types(const TestParsingMerge_OptionalGroup* msg) {
  return *msg->optional_group_all_types_;
}
TestParsingMerge_OptionalGroup::TestParsingMerge_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.OptionalGroup)
}
TestParsingMerge_OptionalGroup::TestParsingMerge_OptionalGroup(const TestParsingMerge_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_optional_group_all_types()) {
    optional_group_all_types_ = new ::protobuf_unittest::TestAllTypes(*from.optional_group_all_types_);
  } else {
    optional_group_all_types_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.OptionalGroup)
}

inline void TestParsingMerge_OptionalGroup::SharedCtor() {
optional_group_all_types_ = nullptr;
}

TestParsingMerge_OptionalGroup::~TestParsingMerge_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMerge_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete optional_group_all_types_;
}

void TestParsingMerge_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMerge_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_group_all_types_ != nullptr);
    optional_group_all_types_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestParsingMerge_OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes optional_group_all_types = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_group_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMerge_OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes optional_group_all_types = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::optional_group_all_types(this),
        _Internal::optional_group_all_types(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.OptionalGroup)
  return target;
}

size_t TestParsingMerge_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes optional_group_all_types = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_group_all_types_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestParsingMerge_OptionalGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestParsingMerge_OptionalGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestParsingMerge_OptionalGroup::GetClassData() const { return &_class_data_; }

void TestParsingMerge_OptionalGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestParsingMerge_OptionalGroup *>(to)->MergeFrom(
      static_cast<const TestParsingMerge_OptionalGroup &>(from));
}


void TestParsingMerge_OptionalGroup::MergeFrom(const TestParsingMerge_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_optional_group_all_types()) {
    _internal_mutable_optional_group_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_optional_group_all_types());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestParsingMerge_OptionalGroup::CopyFrom(const TestParsingMerge_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_OptionalGroup::IsInitialized() const {
  return true;
}

void TestParsingMerge_OptionalGroup::InternalSwap(TestParsingMerge_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(optional_group_all_types_, other->optional_group_all_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_OptionalGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[89]);
}

// ===================================================================

class TestParsingMerge_RepeatedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge_RepeatedGroup>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& repeated_group_all_types(const TestParsingMerge_RepeatedGroup* msg);
  static void set_has_repeated_group_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge_RepeatedGroup::_Internal::repeated_group_all_types(const TestParsingMerge_RepeatedGroup* msg) {
  return *msg->repeated_group_all_types_;
}
TestParsingMerge_RepeatedGroup::TestParsingMerge_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge.RepeatedGroup)
}
TestParsingMerge_RepeatedGroup::TestParsingMerge_RepeatedGroup(const TestParsingMerge_RepeatedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_repeated_group_all_types()) {
    repeated_group_all_types_ = new ::protobuf_unittest::TestAllTypes(*from.repeated_group_all_types_);
  } else {
    repeated_group_all_types_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge.RepeatedGroup)
}

inline void TestParsingMerge_RepeatedGroup::SharedCtor() {
repeated_group_all_types_ = nullptr;
}

TestParsingMerge_RepeatedGroup::~TestParsingMerge_RepeatedGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMerge_RepeatedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete repeated_group_all_types_;
}

void TestParsingMerge_RepeatedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMerge_RepeatedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(repeated_group_all_types_ != nullptr);
    repeated_group_all_types_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestParsingMerge_RepeatedGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_group_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMerge_RepeatedGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::repeated_group_all_types(this),
        _Internal::repeated_group_all_types(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  return target;
}

size_t TestParsingMerge_RepeatedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeated_group_all_types_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestParsingMerge_RepeatedGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestParsingMerge_RepeatedGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestParsingMerge_RepeatedGroup::GetClassData() const { return &_class_data_; }

void TestParsingMerge_RepeatedGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestParsingMerge_RepeatedGroup *>(to)->MergeFrom(
      static_cast<const TestParsingMerge_RepeatedGroup &>(from));
}


void TestParsingMerge_RepeatedGroup::MergeFrom(const TestParsingMerge_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_repeated_group_all_types()) {
    _internal_mutable_repeated_group_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_repeated_group_all_types());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestParsingMerge_RepeatedGroup::CopyFrom(const TestParsingMerge_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge.RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge_RepeatedGroup::IsInitialized() const {
  return true;
}

void TestParsingMerge_RepeatedGroup::InternalSwap(TestParsingMerge_RepeatedGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(repeated_group_all_types_, other->repeated_group_all_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge_RepeatedGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[90]);
}

// ===================================================================

class TestParsingMerge::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMerge>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypes& required_all_types(const TestParsingMerge* msg);
  static void set_has_required_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypes& optional_all_types(const TestParsingMerge* msg);
  static void set_has_optional_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestParsingMerge_OptionalGroup& optionalgroup(const TestParsingMerge* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::protobuf_unittest::TestAllTypes&
TestParsingMerge::_Internal::required_all_types(const TestParsingMerge* msg) {
  return *msg->required_all_types_;
}
const ::protobuf_unittest::TestAllTypes&
TestParsingMerge::_Internal::optional_all_types(const TestParsingMerge* msg) {
  return *msg->optional_all_types_;
}
const ::protobuf_unittest::TestParsingMerge_OptionalGroup&
TestParsingMerge::_Internal::optionalgroup(const TestParsingMerge* msg) {
  return *msg->optionalgroup_;
}
TestParsingMerge::TestParsingMerge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  repeated_all_types_(arena),
  repeatedgroup_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMerge)
}
TestParsingMerge::TestParsingMerge(const TestParsingMerge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_all_types_(from.repeated_all_types_),
      repeatedgroup_(from.repeatedgroup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  if (from._internal_has_required_all_types()) {
    required_all_types_ = new ::protobuf_unittest::TestAllTypes(*from.required_all_types_);
  } else {
    required_all_types_ = nullptr;
  }
  if (from._internal_has_optional_all_types()) {
    optional_all_types_ = new ::protobuf_unittest::TestAllTypes(*from.optional_all_types_);
  } else {
    optional_all_types_ = nullptr;
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestParsingMerge_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMerge)
}

inline void TestParsingMerge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&required_all_types_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&optionalgroup_) -
    reinterpret_cast<char*>(&required_all_types_)) + sizeof(optionalgroup_));
}

TestParsingMerge::~TestParsingMerge() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMerge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMerge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete required_all_types_;
  if (this != internal_default_instance()) delete optional_all_types_;
  if (this != internal_default_instance()) delete optionalgroup_;
}

void TestParsingMerge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMerge::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMerge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  repeated_all_types_.Clear();
  repeatedgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(required_all_types_ != nullptr);
      required_all_types_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(optional_all_types_ != nullptr);
      optional_all_types_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestParsingMerge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .protobuf_unittest.TestAllTypes required_all_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypes optional_all_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypes repeated_all_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_all_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional group OptionalGroup = 10 { ... };
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 83)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 83);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated group RepeatedGroup = 20 { ... };
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 163)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_repeatedgroup(), ptr, 163);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<163>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMerge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMerge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protobuf_unittest.TestAllTypes required_all_types = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::required_all_types(this),
        _Internal::required_all_types(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypes optional_all_types = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::optional_all_types(this),
        _Internal::optional_all_types(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypes repeated_all_types = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_all_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_all_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional group OptionalGroup = 10 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        10, _Internal::optionalgroup(this), target, stream);
  }

  // repeated group RepeatedGroup = 20 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeatedgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(20, this->_internal_repeatedgroup(i), target, stream);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMerge)
  return target;
}

size_t TestParsingMerge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMerge)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .protobuf_unittest.TestAllTypes required_all_types = 1;
  if (_internal_has_required_all_types()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_all_types_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypes repeated_all_types = 3;
  total_size += 1UL * this->_internal_repeated_all_types_size();
  for (const auto& msg : this->repeated_all_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated group RepeatedGroup = 20 { ... };
  total_size += 4UL * this->_internal_repeatedgroup_size();
  for (const auto& msg : this->repeatedgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .protobuf_unittest.TestAllTypes optional_all_types = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_all_types_);
    }

    // optional group OptionalGroup = 10 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestParsingMerge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestParsingMerge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestParsingMerge::GetClassData() const { return &_class_data_; }

void TestParsingMerge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestParsingMerge *>(to)->MergeFrom(
      static_cast<const TestParsingMerge &>(from));
}


void TestParsingMerge::MergeFrom(const TestParsingMerge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMerge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_all_types_.MergeFrom(from.repeated_all_types_);
  repeatedgroup_.MergeFrom(from.repeatedgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_required_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_required_all_types());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_optional_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_optional_all_types());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestParsingMerge_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestParsingMerge::CopyFrom(const TestParsingMerge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMerge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMerge::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestParsingMerge::InternalSwap(TestParsingMerge* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_all_types_.InternalSwap(&other->repeated_all_types_);
  repeatedgroup_.InternalSwap(&other->repeatedgroup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestParsingMerge, optionalgroup_)
      + sizeof(TestParsingMerge::optionalgroup_)
      - PROTOBUF_FIELD_OFFSET(TestParsingMerge, required_all_types_)>(
          reinterpret_cast<char*>(&required_all_types_),
          reinterpret_cast<char*>(&other->required_all_types_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestParsingMerge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[91]);
}

// ===================================================================

class TestMergeException::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMergeException>()._has_bits_);
  static const ::protobuf_unittest::TestAllExtensions& all_extensions(const TestMergeException* msg);
  static void set_has_all_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllExtensions&
TestMergeException::_Internal::all_extensions(const TestMergeException* msg) {
  return *msg->all_extensions_;
}
TestMergeException::TestMergeException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMergeException)
}
TestMergeException::TestMergeException(const TestMergeException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_all_extensions()) {
    all_extensions_ = new ::protobuf_unittest::TestAllExtensions(*from.all_extensions_);
  } else {
    all_extensions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMergeException)
}

inline void TestMergeException::SharedCtor() {
all_extensions_ = nullptr;
}

TestMergeException::~TestMergeException() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMergeException)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMergeException::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete all_extensions_;
}

void TestMergeException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMergeException::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMergeException)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(all_extensions_ != nullptr);
    all_extensions_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMergeException::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllExtensions all_extensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_extensions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMergeException::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMergeException)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllExtensions all_extensions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::all_extensions(this),
        _Internal::all_extensions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMergeException)
  return target;
}

size_t TestMergeException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMergeException)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllExtensions all_extensions = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *all_extensions_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestMergeException::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestMergeException::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestMergeException::GetClassData() const { return &_class_data_; }

void TestMergeException::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestMergeException *>(to)->MergeFrom(
      static_cast<const TestMergeException &>(from));
}


void TestMergeException::MergeFrom(const TestMergeException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMergeException)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_all_extensions()) {
    _internal_mutable_all_extensions()->::protobuf_unittest::TestAllExtensions::MergeFrom(from._internal_all_extensions());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestMergeException::CopyFrom(const TestMergeException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMergeException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMergeException::IsInitialized() const {
  if (_internal_has_all_extensions()) {
    if (!all_extensions_->IsInitialized()) return false;
  }
  return true;
}

void TestMergeException::InternalSwap(TestMergeException* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(all_extensions_, other->all_extensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMergeException::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[92]);
}

// ===================================================================

class TestCommentInjectionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestCommentInjectionMessage>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_{{{"*/ <- Neither should this.", 26}}, {nullptr}};
TestCommentInjectionMessage::TestCommentInjectionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestCommentInjectionMessage)
}
TestCommentInjectionMessage::TestCommentInjectionMessage(const TestCommentInjectionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_.InitDefault();
  if (from._internal_has_a()) {
    a_.Set(from._internal_a(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestCommentInjectionMessage)
}

inline void TestCommentInjectionMessage::SharedCtor() {
a_.InitDefault();
}

TestCommentInjectionMessage::~TestCommentInjectionMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestCommentInjectionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestCommentInjectionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  a_.Destroy();
}

void TestCommentInjectionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestCommentInjectionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestCommentInjectionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    a_.ClearToDefault(::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_, GetArenaForAllocation());
     }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestCommentInjectionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string a = 1 [default = "*/ <- Neither should this."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestCommentInjectionMessage.a");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestCommentInjectionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestCommentInjectionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string a = 1 [default = "*/ <- Neither should this."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_a().data(), static_cast<int>(this->_internal_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestCommentInjectionMessage.a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestCommentInjectionMessage)
  return target;
}

size_t TestCommentInjectionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestCommentInjectionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string a = 1 [default = "*/ <- Neither should this."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestCommentInjectionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestCommentInjectionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestCommentInjectionMessage::GetClassData() const { return &_class_data_; }

void TestCommentInjectionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestCommentInjectionMessage *>(to)->MergeFrom(
      static_cast<const TestCommentInjectionMessage &>(from));
}


void TestCommentInjectionMessage::MergeFrom(const TestCommentInjectionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestCommentInjectionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestCommentInjectionMessage::CopyFrom(const TestCommentInjectionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestCommentInjectionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCommentInjectionMessage::IsInitialized() const {
  return true;
}

void TestCommentInjectionMessage::InternalSwap(TestCommentInjectionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &a_, lhs_arena,
      &other->a_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCommentInjectionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[93]);
}

// ===================================================================

class FooRequest::_Internal {
 public:
};

FooRequest::FooRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FooRequest)
}
FooRequest::FooRequest(const FooRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FooRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FooRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FooRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FooRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[94]);
}

// ===================================================================

class FooResponse::_Internal {
 public:
};

FooResponse::FooResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FooResponse)
}
FooResponse::FooResponse(const FooResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FooResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FooResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FooResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FooResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[95]);
}

// ===================================================================

class FooClientMessage::_Internal {
 public:
};

FooClientMessage::FooClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FooClientMessage)
}
FooClientMessage::FooClientMessage(const FooClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FooClientMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FooClientMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FooClientMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FooClientMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[96]);
}

// ===================================================================

class FooServerMessage::_Internal {
 public:
};

FooServerMessage::FooServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.FooServerMessage)
}
FooServerMessage::FooServerMessage(const FooServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.FooServerMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FooServerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FooServerMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FooServerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[97]);
}

// ===================================================================

class BarRequest::_Internal {
 public:
};

BarRequest::BarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.BarRequest)
}
BarRequest::BarRequest(const BarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.BarRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BarRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BarRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BarRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[98]);
}

// ===================================================================

class BarResponse::_Internal {
 public:
};

BarResponse::BarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.BarResponse)
}
BarResponse::BarResponse(const BarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.BarResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BarResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BarResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BarResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[99]);
}

// ===================================================================

class TestJsonName::_Internal {
 public:
  using HasBits = decltype(std::declval<TestJsonName>()._has_bits_);
  static void set_has_field_name1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fieldname2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fieldname3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has__field_name4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_name5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field_name6(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldname7(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

TestJsonName::TestJsonName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestJsonName)
}
TestJsonName::TestJsonName(const TestJsonName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&field_name1_, &from.field_name1_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldname7_) -
    reinterpret_cast<char*>(&field_name1_)) + sizeof(fieldname7_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestJsonName)
}

inline void TestJsonName::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&field_name1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldname7_) -
    reinterpret_cast<char*>(&field_name1_)) + sizeof(fieldname7_));
}

TestJsonName::~TestJsonName() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestJsonName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestJsonName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestJsonName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestJsonName::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestJsonName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&field_name1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldname7_) -
        reinterpret_cast<char*>(&field_name1_)) + sizeof(fieldname7_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestJsonName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 field_name1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field_name1(&has_bits);
          field_name1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 fieldName2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fieldname2(&has_bits);
          fieldname2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FieldName3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_fieldname3(&has_bits);
          fieldname3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 _field_name4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has__field_name4(&has_bits);
          _field_name4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FIELD_NAME5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_field_name5(&has_bits);
          field_name5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field_name6 = 6 [json_name = "@type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_field_name6(&has_bits);
          field_name6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 fieldname7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_fieldname7(&has_bits);
          fieldname7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestJsonName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestJsonName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 field_name1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_field_name1(), target);
  }

  // optional int32 fieldName2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_fieldname2(), target);
  }

  // optional int32 FieldName3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_fieldname3(), target);
  }

  // optional int32 _field_name4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal__field_name4(), target);
  }

  // optional int32 FIELD_NAME5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_field_name5(), target);
  }

  // optional int32 field_name6 = 6 [json_name = "@type"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_field_name6(), target);
  }

  // optional int32 fieldname7 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_fieldname7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestJsonName)
  return target;
}

size_t TestJsonName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestJsonName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 field_name1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_name1());
    }

    // optional int32 fieldName2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fieldname2());
    }

    // optional int32 FieldName3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fieldname3());
    }

    // optional int32 _field_name4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal__field_name4());
    }

    // optional int32 FIELD_NAME5 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_name5());
    }

    // optional int32 field_name6 = 6 [json_name = "@type"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_name6());
    }

    // optional int32 fieldname7 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fieldname7());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestJsonName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestJsonName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestJsonName::GetClassData() const { return &_class_data_; }

void TestJsonName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestJsonName *>(to)->MergeFrom(
      static_cast<const TestJsonName &>(from));
}


void TestJsonName::MergeFrom(const TestJsonName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestJsonName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      field_name1_ = from.field_name1_;
    }
    if (cached_has_bits & 0x00000002u) {
      fieldname2_ = from.fieldname2_;
    }
    if (cached_has_bits & 0x00000004u) {
      fieldname3_ = from.fieldname3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _field_name4_ = from._field_name4_;
    }
    if (cached_has_bits & 0x00000010u) {
      field_name5_ = from.field_name5_;
    }
    if (cached_has_bits & 0x00000020u) {
      field_name6_ = from.field_name6_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldname7_ = from.fieldname7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestJsonName::CopyFrom(const TestJsonName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestJsonName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestJsonName::IsInitialized() const {
  return true;
}

void TestJsonName::InternalSwap(TestJsonName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestJsonName, fieldname7_)
      + sizeof(TestJsonName::fieldname7_)
      - PROTOBUF_FIELD_OFFSET(TestJsonName, field_name1_)>(
          reinterpret_cast<char*>(&field_name1_),
          reinterpret_cast<char*>(&other->field_name1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestJsonName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[100]);
}

// ===================================================================

class TestHugeFieldNumbers_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestHugeFieldNumbers_OptionalGroup>()._has_bits_);
  static void set_has_group_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestHugeFieldNumbers_OptionalGroup::TestHugeFieldNumbers_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
}
TestHugeFieldNumbers_OptionalGroup::TestHugeFieldNumbers_OptionalGroup(const TestHugeFieldNumbers_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_a_ = from.group_a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
}

inline void TestHugeFieldNumbers_OptionalGroup::SharedCtor() {
group_a_ = 0;
}

TestHugeFieldNumbers_OptionalGroup::~TestHugeFieldNumbers_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestHugeFieldNumbers_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestHugeFieldNumbers_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestHugeFieldNumbers_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestHugeFieldNumbers_OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 group_a = 536870009;
      case 536870009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_group_a(&has_bits);
          group_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestHugeFieldNumbers_OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 group_a = 536870009;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(536870009, this->_internal_group_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  return target;
}

size_t TestHugeFieldNumbers_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 group_a = 536870009;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_group_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestHugeFieldNumbers_OptionalGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestHugeFieldNumbers_OptionalGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestHugeFieldNumbers_OptionalGroup::GetClassData() const { return &_class_data_; }

void TestHugeFieldNumbers_OptionalGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestHugeFieldNumbers_OptionalGroup *>(to)->MergeFrom(
      static_cast<const TestHugeFieldNumbers_OptionalGroup &>(from));
}


void TestHugeFieldNumbers_OptionalGroup::MergeFrom(const TestHugeFieldNumbers_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group_a()) {
    _internal_set_group_a(from._internal_group_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestHugeFieldNumbers_OptionalGroup::CopyFrom(const TestHugeFieldNumbers_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHugeFieldNumbers_OptionalGroup::IsInitialized() const {
  return true;
}

void TestHugeFieldNumbers_OptionalGroup::InternalSwap(TestHugeFieldNumbers_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(group_a_, other->group_a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestHugeFieldNumbers_OptionalGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[101]);
}

// ===================================================================

TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse() {}
TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::MergeFrom(const TestHugeFieldNumbers_StringStringMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[102]);
}

// ===================================================================

class TestHugeFieldNumbers::_Internal {
 public:
  using HasBits = decltype(std::declval<TestHugeFieldNumbers>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fixed_32(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_optional_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::ForeignMessage& optional_message(const TestHugeFieldNumbers* msg);
  static void set_has_optional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup& optionalgroup(const TestHugeFieldNumbers* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest::TestAllTypes& oneof_test_all_types(const TestHugeFieldNumbers* msg);
};

const ::protobuf_unittest::ForeignMessage&
TestHugeFieldNumbers::_Internal::optional_message(const TestHugeFieldNumbers* msg) {
  return *msg->optional_message_;
}
const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup&
TestHugeFieldNumbers::_Internal::optionalgroup(const TestHugeFieldNumbers* msg) {
  return *msg->optionalgroup_;
}
const ::protobuf_unittest::TestAllTypes&
TestHugeFieldNumbers::_Internal::oneof_test_all_types(const TestHugeFieldNumbers* msg) {
  return *msg->oneof_field_.oneof_test_all_types_;
}
void TestHugeFieldNumbers::set_allocated_oneof_test_all_types(::protobuf_unittest::TestAllTypes* oneof_test_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_field();
  if (oneof_test_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_test_all_types);
    if (message_arena != submessage_arena) {
      oneof_test_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_test_all_types, submessage_arena);
    }
    set_has_oneof_test_all_types();
    oneof_field_.oneof_test_all_types_ = oneof_test_all_types;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbers.oneof_test_all_types)
}
TestHugeFieldNumbers::TestHugeFieldNumbers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  repeated_int32_(arena),
  packed_int32_(arena),
  string_string_map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestHugeFieldNumbers::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestHugeFieldNumbers)
}
TestHugeFieldNumbers::TestHugeFieldNumbers(const TestHugeFieldNumbers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_),
      packed_int32_(from.packed_int32_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  string_string_map_.MergeFrom(from.string_string_map_);
  optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string()) {
    optional_string_.Set(from._internal_optional_string(), 
      GetArenaForAllocation());
  }
  optional_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(from._internal_optional_bytes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optional_message()) {
    optional_message_ = new ::protobuf_unittest::ForeignMessage(*from.optional_message_);
  } else {
    optional_message_ = nullptr;
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  ::memcpy(&optional_int32_, &from.optional_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) -
    reinterpret_cast<char*>(&optional_int32_)) + sizeof(optional_enum_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofTestAllTypes: {
      _internal_mutable_oneof_test_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_oneof_test_all_types());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestHugeFieldNumbers)
}

inline void TestHugeFieldNumbers::SharedCtor() {
optional_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_bytes_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_bytes_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optional_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fixed_32_) -
    reinterpret_cast<char*>(&optional_message_)) + sizeof(fixed_32_));
optional_enum_ = 4;
clear_has_oneof_field();
}

TestHugeFieldNumbers::~TestHugeFieldNumbers() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestHugeFieldNumbers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestHugeFieldNumbers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_string_map_.Destruct();
  optional_string_.Destroy();
  optional_bytes_.Destroy();
  if (this != internal_default_instance()) delete optional_message_;
  if (this != internal_default_instance()) delete optionalgroup_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestHugeFieldNumbers::ArenaDtor(void* object) {
  TestHugeFieldNumbers* _this = reinterpret_cast< TestHugeFieldNumbers* >(object);
  _this->string_string_map_.Destruct();
}
void TestHugeFieldNumbers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestHugeFieldNumbers::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestHugeFieldNumbers)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofTestAllTypes: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_field_.oneof_test_all_types_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy();
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy();
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestHugeFieldNumbers::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestHugeFieldNumbers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  repeated_int32_.Clear();
  packed_int32_.Clear();
  string_string_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optional_message_ != nullptr);
      optional_message_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&optional_int32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed_32_) -
        reinterpret_cast<char*>(&optional_int32_)) + sizeof(fixed_32_));
    optional_enum_ = 4;
  }
  clear_oneof_field();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestHugeFieldNumbers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 536870000;
      case 536870000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_optional_int32(&has_bits);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 fixed_32 = 536870001;
      case 536870001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_fixed_32(&has_bits);
          fixed_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 536870002 [packed = false];
      case 536870002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 packed_int32 = 536870003 [packed = true];
      case 536870003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnum optional_enum = 536870004;
      case 536870004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnum_IsValid(val))) {
            _internal_set_optional_enum(static_cast<::protobuf_unittest::ForeignEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(536870004, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string = 536870005;
      case 536870005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestHugeFieldNumbers.optional_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 536870006;
      case 536870006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessage optional_message = 536870007;
      case 536870007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group OptionalGroup = 536870008 { ... };
      case 536870008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 195)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 4294960067);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> string_string_map = 536870010;
      case 536870010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(&string_string_map_, ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 536870011;
      case 536870011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestAllTypes oneof_test_all_types = 536870012;
      case 536870012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_test_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string = 536870013;
      case 536870013:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestHugeFieldNumbers.oneof_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes = 536870014;
      case 536870014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((4294880000u <= tag && tag < 4294960000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestHugeFieldNumbers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestHugeFieldNumbers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [536860000, 536870000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 536860000, 536870000, target, stream);

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 536870000;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(536870000, this->_internal_optional_int32(), target);
  }

  // optional int32 fixed_32 = 536870001;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(536870001, this->_internal_fixed_32(), target);
  }

  // repeated int32 repeated_int32 = 536870002 [packed = false];
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(536870002, this->_internal_repeated_int32(i), target);
  }

  // repeated int32 packed_int32 = 536870003 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          536870003, _internal_packed_int32(), byte_size, target);
    }
  }

  // optional .protobuf_unittest.ForeignEnum optional_enum = 536870004;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      536870004, this->_internal_optional_enum(), target);
  }

  // optional string optional_string = 536870005;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestHugeFieldNumbers.optional_string");
    target = stream->WriteStringMaybeAliased(
        536870005, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 536870006;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        536870006, this->_internal_optional_bytes(), target);
  }

  // optional .protobuf_unittest.ForeignMessage optional_message = 536870007;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(536870007, _Internal::optional_message(this),
        _Internal::optional_message(this).GetCachedSize(), target, stream);
  }

  // optional group OptionalGroup = 536870008 { ... };
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        536870008, _Internal::optionalgroup(this), target, stream);
  }

  // map<string, string> string_string_map = 536870010;
  if (!this->_internal_string_string_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_string_string_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestHugeFieldNumbers.StringStringMapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestHugeFieldNumbers.StringStringMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(536870010, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(536870010, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  switch (oneof_field_case()) {
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(536870011, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofTestAllTypes: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(536870012, _Internal::oneof_test_all_types(this),
          _Internal::oneof_test_all_types(this).GetCachedSize(), target, stream);
      break;
    }
    case kOneofString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestHugeFieldNumbers.oneof_string");
      target = stream->WriteStringMaybeAliased(
          536870013, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          536870014, this->_internal_oneof_bytes(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestHugeFieldNumbers)
  return target;
}

size_t TestHugeFieldNumbers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestHugeFieldNumbers)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 536870002 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 5 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int32 packed_int32 = 536870003 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 5 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, string> string_string_map = 536870010;
  total_size += 5 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_string_string_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_string_string_map().begin();
      it != this->_internal_string_string_map().end(); ++it) {
    total_size += TestHugeFieldNumbers_StringStringMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string optional_string = 536870005;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 536870006;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // optional .protobuf_unittest.ForeignMessage optional_message = 536870007;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_message_);
    }

    // optional group OptionalGroup = 536870008 { ... };
    if (cached_has_bits & 0x00000008u) {
      total_size += 10 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional int32 optional_int32 = 536870000;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

    // optional int32 fixed_32 = 536870001;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_fixed_32());
    }

    // optional .protobuf_unittest.ForeignEnum optional_enum = 536870004;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_enum());
    }

  }
  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 536870011;
    case kOneofUint32: {
      total_size += 5 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // .protobuf_unittest.TestAllTypes oneof_test_all_types = 536870012;
    case kOneofTestAllTypes: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_test_all_types_);
      break;
    }
    // string oneof_string = 536870013;
    case kOneofString: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 536870014;
    case kOneofBytes: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestHugeFieldNumbers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestHugeFieldNumbers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestHugeFieldNumbers::GetClassData() const { return &_class_data_; }

void TestHugeFieldNumbers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestHugeFieldNumbers *>(to)->MergeFrom(
      static_cast<const TestHugeFieldNumbers &>(from));
}


void TestHugeFieldNumbers::MergeFrom(const TestHugeFieldNumbers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestHugeFieldNumbers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  packed_int32_.MergeFrom(from.packed_int32_);
  string_string_map_.MergeFrom(from.string_string_map_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optional_message()->::protobuf_unittest::ForeignMessage::MergeFrom(from._internal_optional_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000010u) {
      optional_int32_ = from.optional_int32_;
    }
    if (cached_has_bits & 0x00000020u) {
      fixed_32_ = from.fixed_32_;
    }
    if (cached_has_bits & 0x00000040u) {
      optional_enum_ = from.optional_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofTestAllTypes: {
      _internal_mutable_oneof_test_all_types()->::protobuf_unittest::TestAllTypes::MergeFrom(from._internal_oneof_test_all_types());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestHugeFieldNumbers::CopyFrom(const TestHugeFieldNumbers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestHugeFieldNumbers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHugeFieldNumbers::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestHugeFieldNumbers::InternalSwap(TestHugeFieldNumbers* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  packed_int32_.InternalSwap(&other->packed_int32_);
  string_string_map_.InternalSwap(&other->string_string_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_string_, lhs_arena,
      &other->optional_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_bytes_, lhs_arena,
      &other->optional_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestHugeFieldNumbers, fixed_32_)
      + sizeof(TestHugeFieldNumbers::fixed_32_)
      - PROTOBUF_FIELD_OFFSET(TestHugeFieldNumbers, optional_message_)>(
          reinterpret_cast<char*>(&optional_message_),
          reinterpret_cast<char*>(&other->optional_message_));
  swap(optional_enum_, other->optional_enum_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestHugeFieldNumbers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[103]);
}

// ===================================================================

class TestExtensionInsideTable::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionInsideTable>()._has_bits_);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field6(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field7(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_field8(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_field9(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_field10(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TestExtensionInsideTable::TestExtensionInsideTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionInsideTable)
}
TestExtensionInsideTable::TestExtensionInsideTable(const TestExtensionInsideTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  ::memcpy(&field1_, &from.field1_,
    static_cast<size_t>(reinterpret_cast<char*>(&field10_) -
    reinterpret_cast<char*>(&field1_)) + sizeof(field10_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionInsideTable)
}

inline void TestExtensionInsideTable::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&field1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field10_) -
    reinterpret_cast<char*>(&field1_)) + sizeof(field10_));
}

TestExtensionInsideTable::~TestExtensionInsideTable() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionInsideTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestExtensionInsideTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestExtensionInsideTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestExtensionInsideTable::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionInsideTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&field1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field9_) -
        reinterpret_cast<char*>(&field1_)) + sizeof(field9_));
  }
  field10_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestExtensionInsideTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 field1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field1(&has_bits);
          field1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_field2(&has_bits);
          field2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_field3(&has_bits);
          field3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_field4(&has_bits);
          field4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_field6(&has_bits);
          field6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_field7(&has_bits);
          field7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_field8(&has_bits);
          field8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field9 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_field9(&has_bits);
          field9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_field10(&has_bits);
          field10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((40u <= tag && tag < 48u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestExtensionInsideTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionInsideTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 field1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_field1(), target);
  }

  // optional int32 field2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_field2(), target);
  }

  // optional int32 field3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_field3(), target);
  }

  // optional int32 field4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_field4(), target);
  }

  // Extension range [5, 6)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 5, 6, target, stream);

  // optional int32 field6 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_field6(), target);
  }

  // optional int32 field7 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_field7(), target);
  }

  // optional int32 field8 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_field8(), target);
  }

  // optional int32 field9 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_field9(), target);
  }

  // optional int32 field10 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_field10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionInsideTable)
  return target;
}

size_t TestExtensionInsideTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionInsideTable)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 field1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field1());
    }

    // optional int32 field2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field2());
    }

    // optional int32 field3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field3());
    }

    // optional int32 field4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field4());
    }

    // optional int32 field6 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field6());
    }

    // optional int32 field7 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field7());
    }

    // optional int32 field8 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field8());
    }

    // optional int32 field9 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field9());
    }

  }
  // optional int32 field10 = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field10());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestExtensionInsideTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestExtensionInsideTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestExtensionInsideTable::GetClassData() const { return &_class_data_; }

void TestExtensionInsideTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestExtensionInsideTable *>(to)->MergeFrom(
      static_cast<const TestExtensionInsideTable &>(from));
}


void TestExtensionInsideTable::MergeFrom(const TestExtensionInsideTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionInsideTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      field1_ = from.field1_;
    }
    if (cached_has_bits & 0x00000002u) {
      field2_ = from.field2_;
    }
    if (cached_has_bits & 0x00000004u) {
      field3_ = from.field3_;
    }
    if (cached_has_bits & 0x00000008u) {
      field4_ = from.field4_;
    }
    if (cached_has_bits & 0x00000010u) {
      field6_ = from.field6_;
    }
    if (cached_has_bits & 0x00000020u) {
      field7_ = from.field7_;
    }
    if (cached_has_bits & 0x00000040u) {
      field8_ = from.field8_;
    }
    if (cached_has_bits & 0x00000080u) {
      field9_ = from.field9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_field10(from._internal_field10());
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestExtensionInsideTable::CopyFrom(const TestExtensionInsideTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionInsideTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionInsideTable::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestExtensionInsideTable::InternalSwap(TestExtensionInsideTable* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestExtensionInsideTable, field10_)
      + sizeof(TestExtensionInsideTable::field10_)
      - PROTOBUF_FIELD_OFFSET(TestExtensionInsideTable, field1_)>(
          reinterpret_cast<char*>(&field1_),
          reinterpret_cast<char*>(&other->field1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionInsideTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[104]);
}

// ===================================================================

class TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup>()._has_bits_);
  static void set_has_another_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
}
TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  another_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    another_field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_another_field()) {
    another_field_.Set(from._internal_another_field(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
}

inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::SharedCtor() {
another_field_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  another_field_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::~TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  another_field_.Destroy();
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    another_field_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string another_field = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_another_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.another_field");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((24u <= tag && tag < 32u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [3, 4)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 3, 4, target, stream);

  cached_has_bits = _has_bits_[0];
  // optional string another_field = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_another_field().data(), static_cast<int>(this->_internal_another_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.another_field");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_another_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
  return target;
}

size_t TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string another_field = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_another_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::GetClassData() const { return &_class_data_; }

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup *>(to)->MergeFrom(
      static_cast<const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup &>(from));
}


void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::MergeFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_another_field()) {
    _internal_set_another_field(from._internal_another_field());
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::CopyFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::InternalSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &another_field_, lhs_arena,
      &other->another_field_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[105]);
}

// ===================================================================

class TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup>()._has_bits_);
  static void set_has_but_why_tho(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
}
TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  but_why_tho_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    but_why_tho_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_but_why_tho()) {
    but_why_tho_.Set(from._internal_but_why_tho(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
}

inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::SharedCtor() {
but_why_tho_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  but_why_tho_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::~TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  but_why_tho_.Destroy();
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    but_why_tho_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string but_why_tho = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_but_why_tho();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup.but_why_tho");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string but_why_tho = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_but_why_tho().data(), static_cast<int>(this->_internal_but_why_tho().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup.but_why_tho");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_but_why_tho(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
  return target;
}

size_t TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string but_why_tho = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_but_why_tho());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::GetClassData() const { return &_class_data_; }

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup *>(to)->MergeFrom(
      static_cast<const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup &>(from));
}


void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::MergeFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_but_why_tho()) {
    _internal_set_but_why_tho(from._internal_but_why_tho());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::CopyFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::IsInitialized() const {
  return true;
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::InternalSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &but_why_tho_, lhs_arena,
      &other->but_why_tho_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[106]);
}

// ===================================================================

class TestNestedGroupExtensionOuter_Layer1OptionalGroup::_Internal {
 public:
};

TestNestedGroupExtensionOuter_Layer1OptionalGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  layer2repeatedgroup_(arena),
  layer2anotheroptionalrepeatedgroup_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
}
TestNestedGroupExtensionOuter_Layer1OptionalGroup::TestNestedGroupExtensionOuter_Layer1OptionalGroup(const TestNestedGroupExtensionOuter_Layer1OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layer2repeatedgroup_(from.layer2repeatedgroup_),
      layer2anotheroptionalrepeatedgroup_(from.layer2anotheroptionalrepeatedgroup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
}

inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup::SharedCtor() {
}

TestNestedGroupExtensionOuter_Layer1OptionalGroup::~TestNestedGroupExtensionOuter_Layer1OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer2repeatedgroup_.Clear();
  layer2anotheroptionalrepeatedgroup_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedGroupExtensionOuter_Layer1OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated group Layer2RepeatedGroup = 2 { ... };
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 19)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_layer2repeatedgroup(), ptr, 19);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<19>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated group Layer2AnotherOptionalRepeatedGroup = 4 { ... };
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 35)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_layer2anotheroptionalrepeatedgroup(), ptr, 35);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<35>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedGroupExtensionOuter_Layer1OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group Layer2RepeatedGroup = 2 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layer2repeatedgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(2, this->_internal_layer2repeatedgroup(i), target, stream);
  }

  // repeated group Layer2AnotherOptionalRepeatedGroup = 4 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layer2anotheroptionalrepeatedgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(4, this->_internal_layer2anotheroptionalrepeatedgroup(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
  return target;
}

size_t TestNestedGroupExtensionOuter_Layer1OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Layer2RepeatedGroup = 2 { ... };
  total_size += 2UL * this->_internal_layer2repeatedgroup_size();
  for (const auto& msg : this->layer2repeatedgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated group Layer2AnotherOptionalRepeatedGroup = 4 { ... };
  total_size += 2UL * this->_internal_layer2anotheroptionalrepeatedgroup_size();
  for (const auto& msg : this->layer2anotheroptionalrepeatedgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedGroupExtensionOuter_Layer1OptionalGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedGroupExtensionOuter_Layer1OptionalGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedGroupExtensionOuter_Layer1OptionalGroup::GetClassData() const { return &_class_data_; }

void TestNestedGroupExtensionOuter_Layer1OptionalGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedGroupExtensionOuter_Layer1OptionalGroup *>(to)->MergeFrom(
      static_cast<const TestNestedGroupExtensionOuter_Layer1OptionalGroup &>(from));
}


void TestNestedGroupExtensionOuter_Layer1OptionalGroup::MergeFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  layer2repeatedgroup_.MergeFrom(from.layer2repeatedgroup_);
  layer2anotheroptionalrepeatedgroup_.MergeFrom(from.layer2anotheroptionalrepeatedgroup_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup::CopyFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedGroupExtensionOuter_Layer1OptionalGroup::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(layer2repeatedgroup_))
    return false;
  return true;
}

void TestNestedGroupExtensionOuter_Layer1OptionalGroup::InternalSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  layer2repeatedgroup_.InternalSwap(&other->layer2repeatedgroup_);
  layer2anotheroptionalrepeatedgroup_.InternalSwap(&other->layer2anotheroptionalrepeatedgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedGroupExtensionOuter_Layer1OptionalGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[107]);
}

// ===================================================================

class TestNestedGroupExtensionOuter::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedGroupExtensionOuter>()._has_bits_);
  static const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup& layer1optionalgroup(const TestNestedGroupExtensionOuter* msg);
  static void set_has_layer1optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup&
TestNestedGroupExtensionOuter::_Internal::layer1optionalgroup(const TestNestedGroupExtensionOuter* msg) {
  return *msg->layer1optionalgroup_;
}
TestNestedGroupExtensionOuter::TestNestedGroupExtensionOuter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedGroupExtensionOuter)
}
TestNestedGroupExtensionOuter::TestNestedGroupExtensionOuter(const TestNestedGroupExtensionOuter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_layer1optionalgroup()) {
    layer1optionalgroup_ = new ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup(*from.layer1optionalgroup_);
  } else {
    layer1optionalgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedGroupExtensionOuter)
}

inline void TestNestedGroupExtensionOuter::SharedCtor() {
layer1optionalgroup_ = nullptr;
}

TestNestedGroupExtensionOuter::~TestNestedGroupExtensionOuter() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedGroupExtensionOuter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedGroupExtensionOuter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete layer1optionalgroup_;
}

void TestNestedGroupExtensionOuter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedGroupExtensionOuter::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedGroupExtensionOuter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(layer1optionalgroup_ != nullptr);
    layer1optionalgroup_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedGroupExtensionOuter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional group Layer1OptionalGroup = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 11)) {
          ptr = ctx->ParseGroup(_internal_mutable_layer1optionalgroup(), ptr, 11);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedGroupExtensionOuter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedGroupExtensionOuter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional group Layer1OptionalGroup = 1 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        1, _Internal::layer1optionalgroup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedGroupExtensionOuter)
  return target;
}

size_t TestNestedGroupExtensionOuter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedGroupExtensionOuter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional group Layer1OptionalGroup = 1 { ... };
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
        *layer1optionalgroup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedGroupExtensionOuter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedGroupExtensionOuter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedGroupExtensionOuter::GetClassData() const { return &_class_data_; }

void TestNestedGroupExtensionOuter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedGroupExtensionOuter *>(to)->MergeFrom(
      static_cast<const TestNestedGroupExtensionOuter &>(from));
}


void TestNestedGroupExtensionOuter::MergeFrom(const TestNestedGroupExtensionOuter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedGroupExtensionOuter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_layer1optionalgroup()) {
    _internal_mutable_layer1optionalgroup()->::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup::MergeFrom(from._internal_layer1optionalgroup());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedGroupExtensionOuter::CopyFrom(const TestNestedGroupExtensionOuter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedGroupExtensionOuter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedGroupExtensionOuter::IsInitialized() const {
  if (_internal_has_layer1optionalgroup()) {
    if (!layer1optionalgroup_->IsInitialized()) return false;
  }
  return true;
}

void TestNestedGroupExtensionOuter::InternalSwap(TestNestedGroupExtensionOuter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(layer1optionalgroup_, other->layer1optionalgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedGroupExtensionOuter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[108]);
}

// ===================================================================

class TestNestedGroupExtensionInnerExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<TestNestedGroupExtensionInnerExtension>()._has_bits_);
  static void set_has_inner_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestNestedGroupExtensionInnerExtension::TestNestedGroupExtensionInnerExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
}
TestNestedGroupExtensionInnerExtension::TestNestedGroupExtensionInnerExtension(const TestNestedGroupExtensionInnerExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inner_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    inner_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_inner_name()) {
    inner_name_.Set(from._internal_inner_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
}

inline void TestNestedGroupExtensionInnerExtension::SharedCtor() {
inner_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  inner_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestNestedGroupExtensionInnerExtension::~TestNestedGroupExtensionInnerExtension() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedGroupExtensionInnerExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  inner_name_.Destroy();
}

void TestNestedGroupExtensionInnerExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedGroupExtensionInnerExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    inner_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestNestedGroupExtensionInnerExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string inner_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inner_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestNestedGroupExtensionInnerExtension.inner_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedGroupExtensionInnerExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string inner_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inner_name().data(), static_cast<int>(this->_internal_inner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestNestedGroupExtensionInnerExtension.inner_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inner_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
  return target;
}

size_t TestNestedGroupExtensionInnerExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string inner_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inner_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestNestedGroupExtensionInnerExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestNestedGroupExtensionInnerExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestNestedGroupExtensionInnerExtension::GetClassData() const { return &_class_data_; }

void TestNestedGroupExtensionInnerExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestNestedGroupExtensionInnerExtension *>(to)->MergeFrom(
      static_cast<const TestNestedGroupExtensionInnerExtension &>(from));
}


void TestNestedGroupExtensionInnerExtension::MergeFrom(const TestNestedGroupExtensionInnerExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inner_name()) {
    _internal_set_inner_name(from._internal_inner_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestNestedGroupExtensionInnerExtension::CopyFrom(const TestNestedGroupExtensionInnerExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedGroupExtensionInnerExtension::IsInitialized() const {
  return true;
}

void TestNestedGroupExtensionInnerExtension::InternalSwap(TestNestedGroupExtensionInnerExtension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &inner_name_, lhs_arena,
      &other->inner_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestNestedGroupExtensionInnerExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[109]);
}

// ===================================================================

class TestExtensionRangeSerialize::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionRangeSerialize>()._has_bits_);
  static void set_has_foo_one(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_foo_two(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_foo_three(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_foo_four(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TestExtensionRangeSerialize::TestExtensionRangeSerialize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestExtensionRangeSerialize)
}
TestExtensionRangeSerialize::TestExtensionRangeSerialize(const TestExtensionRangeSerialize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  ::memcpy(&foo_one_, &from.foo_one_,
    static_cast<size_t>(reinterpret_cast<char*>(&foo_four_) -
    reinterpret_cast<char*>(&foo_one_)) + sizeof(foo_four_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestExtensionRangeSerialize)
}

inline void TestExtensionRangeSerialize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&foo_one_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&foo_four_) -
    reinterpret_cast<char*>(&foo_one_)) + sizeof(foo_four_));
}

TestExtensionRangeSerialize::~TestExtensionRangeSerialize() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestExtensionRangeSerialize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestExtensionRangeSerialize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestExtensionRangeSerialize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestExtensionRangeSerialize::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestExtensionRangeSerialize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&foo_one_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&foo_four_) -
        reinterpret_cast<char*>(&foo_one_)) + sizeof(foo_four_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestExtensionRangeSerialize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 foo_one = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_foo_one(&has_bits);
          foo_one_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 foo_two = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_foo_two(&has_bits);
          foo_two_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 foo_three = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_foo_three(&has_bits);
          foo_three_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 foo_four = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_foo_four(&has_bits);
          foo_four_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((16u <= tag && tag < 24u) ||
        (24u <= tag && tag < 40u) ||
        (72u <= tag && tag < 88u) ||
        (120u <= tag && tag < 128u) ||
        (136u <= tag && tag < 144u) ||
        (152u <= tag && tag < 160u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestExtensionRangeSerialize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestExtensionRangeSerialize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 foo_one = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_foo_one(), target);
  }

  // Extension range [2, 5)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 2, 5, target, stream);

  // optional int32 foo_two = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_foo_two(), target);
  }

  // optional int32 foo_three = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_foo_three(), target);
  }

  // Extension range [9, 11)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 9, 11, target, stream);

  // optional int32 foo_four = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_foo_four(), target);
  }

  // Extension range [15, 20)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 15, 20, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestExtensionRangeSerialize)
  return target;
}

size_t TestExtensionRangeSerialize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestExtensionRangeSerialize)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 foo_one = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_foo_one());
    }

    // optional int32 foo_two = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_foo_two());
    }

    // optional int32 foo_three = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_foo_three());
    }

    // optional int32 foo_four = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_foo_four());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestExtensionRangeSerialize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestExtensionRangeSerialize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestExtensionRangeSerialize::GetClassData() const { return &_class_data_; }

void TestExtensionRangeSerialize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestExtensionRangeSerialize *>(to)->MergeFrom(
      static_cast<const TestExtensionRangeSerialize &>(from));
}


void TestExtensionRangeSerialize::MergeFrom(const TestExtensionRangeSerialize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestExtensionRangeSerialize)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      foo_one_ = from.foo_one_;
    }
    if (cached_has_bits & 0x00000002u) {
      foo_two_ = from.foo_two_;
    }
    if (cached_has_bits & 0x00000004u) {
      foo_three_ = from.foo_three_;
    }
    if (cached_has_bits & 0x00000008u) {
      foo_four_ = from.foo_four_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestExtensionRangeSerialize::CopyFrom(const TestExtensionRangeSerialize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestExtensionRangeSerialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionRangeSerialize::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestExtensionRangeSerialize::InternalSwap(TestExtensionRangeSerialize* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestExtensionRangeSerialize, foo_four_)
      + sizeof(TestExtensionRangeSerialize::foo_four_)
      - PROTOBUF_FIELD_OFFSET(TestExtensionRangeSerialize, foo_one_)>(
          reinterpret_cast<char*>(&foo_one_),
          reinterpret_cast<char*>(&other->foo_one_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestExtensionRangeSerialize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2funittest_2eproto[110]);
}

// ===================================================================

TestService::~TestService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_2eproto);
  return file_level_service_descriptors_google_2fprotobuf_2funittest_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestService::GetDescriptor() {
  return descriptor();
}

void TestService::Foo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::protobuf_unittest::FooRequest*,
                         ::protobuf_unittest::FooResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Foo() not implemented.");
  done->Run();
}

void TestService::Bar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::protobuf_unittest::BarRequest*,
                         ::protobuf_unittest::BarResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Bar() not implemented.");
  done->Run();
}

void TestService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_google_2fprotobuf_2funittest_2eproto[0]);
  switch(method->index()) {
    case 0:
      Foo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::protobuf_unittest::FooRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::protobuf_unittest::FooResponse*>(
                 response),
             done);
      break;
    case 1:
      Bar(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::protobuf_unittest::BarRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::protobuf_unittest::BarResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::FooRequest::default_instance();
    case 1:
      return ::protobuf_unittest::BarRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::FooResponse::default_instance();
    case 1:
      return ::protobuf_unittest::BarResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestService_Stub::TestService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestService_Stub::TestService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TestService_Stub::~TestService_Stub() {
  if (owns_channel_) delete channel_;
}

void TestService_Stub::Foo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::protobuf_unittest::FooRequest* request,
                              ::protobuf_unittest::FooResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestService_Stub::Bar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::protobuf_unittest::BarRequest* request,
                              ::protobuf_unittest::BarResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
const std::string TestNestedExtension_test_default("test");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestNestedExtension::kTestFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  TestNestedExtension::test(kTestFieldNumber, TestNestedExtension_test_default, nullptr);
const std::string TestNestedExtension_nested_string_extension_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestNestedExtension::kNestedStringExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  TestNestedExtension::nested_string_extension(kNestedStringExtensionFieldNumber, TestNestedExtension_nested_string_extension_default, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestNestedExtension::kOptionalgroupExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestGroupExtension,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension >, 10, false>
  TestNestedExtension::optionalgroup_extension(kOptionalgroupExtensionFieldNumber, ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestNestedExtension::kOptionalForeignEnumExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestGroupExtension,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false>
  TestNestedExtension::optional_foreign_enum_extension(kOptionalForeignEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestRequired::kSingleFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestRequired >, 11, false>
  TestRequired::single(kSingleFieldNumber, ::protobuf_unittest::TestRequired::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestRequired::kMultiFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestRequired >, 11, false>
  TestRequired::multi(kMultiFieldNumber, ::protobuf_unittest::TestRequired::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtensionOrderings1::kTestExtOrderings1FieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings1 >, 11, false>
  TestExtensionOrderings1::test_ext_orderings1(kTestExtOrderings1FieldNumber, ::protobuf_unittest::TestExtensionOrderings1::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtensionOrderings2_TestExtensionOrderings3::kTestExtOrderings3FieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3 >, 11, false>
  TestExtensionOrderings2_TestExtensionOrderings3::test_ext_orderings3(kTestExtOrderings3FieldNumber, ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtensionOrderings2::kTestExtOrderings2FieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings2 >, 11, false>
  TestExtensionOrderings2::test_ext_orderings2(kTestExtOrderings2FieldNumber, ::protobuf_unittest::TestExtensionOrderings2::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestParsingMerge::kOptionalExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMerge,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false>
  TestParsingMerge::optional_ext(kOptionalExtFieldNumber, ::protobuf_unittest::TestAllTypes::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestParsingMerge::kRepeatedExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMerge,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false>
  TestParsingMerge::repeated_ext(kRepeatedExtFieldNumber, ::protobuf_unittest::TestAllTypes::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtensionRangeSerialize::kBarOneFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  TestExtensionRangeSerialize::bar_one(kBarOneFieldNumber, 0, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtensionRangeSerialize::kBarTwoFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  TestExtensionRangeSerialize::bar_two(kBarTwoFieldNumber, 0, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtensionRangeSerialize::kBarThreeFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  TestExtensionRangeSerialize::bar_three(kBarThreeFieldNumber, 0, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtensionRangeSerialize::kBarFourFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  TestExtensionRangeSerialize::bar_four(kBarFourFieldNumber, 0, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestExtensionRangeSerialize::kBarFiveFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  TestExtensionRangeSerialize::bar_five(kBarFiveFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  optional_int32_extension(kOptionalInt32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 3, false>
  optional_int64_extension(kOptionalInt64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  optional_uint32_extension(kOptionalUint32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 4, false>
  optional_uint64_extension(kOptionalUint64ExtensionFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 17, false>
  optional_sint32_extension(kOptionalSint32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 18, false>
  optional_sint64_extension(kOptionalSint64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 7, false>
  optional_fixed32_extension(kOptionalFixed32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 6, false>
  optional_fixed64_extension(kOptionalFixed64ExtensionFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 15, false>
  optional_sfixed32_extension(kOptionalSfixed32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 16, false>
  optional_sfixed64_extension(kOptionalSfixed64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false>
  optional_float_extension(kOptionalFloatExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false>
  optional_double_extension(kOptionalDoubleExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  optional_bool_extension(kOptionalBoolExtensionFieldNumber, false, nullptr);
const std::string optional_string_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  optional_string_extension(kOptionalStringExtensionFieldNumber, optional_string_extension_default, nullptr);
const std::string optional_bytes_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false>
  optional_bytes_extension(kOptionalBytesExtensionFieldNumber, optional_bytes_extension_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionalGroup_extension >, 10, false>
  optionalgroup_extension(kOptionalgroupExtensionFieldNumber, ::protobuf_unittest::OptionalGroup_extension::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false>
  optional_nested_message_extension(kOptionalNestedMessageExtensionFieldNumber, ::protobuf_unittest::TestAllTypes_NestedMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::ForeignMessage >, 11, false>
  optional_foreign_message_extension(kOptionalForeignMessageExtensionFieldNumber, ::protobuf_unittest::ForeignMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::ImportMessage >, 11, false>
  optional_import_message_extension(kOptionalImportMessageExtensionFieldNumber, ::protobuf_unittest_import::ImportMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false>
  optional_nested_enum_extension(kOptionalNestedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(1), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false>
  optional_foreign_enum_extension(kOptionalForeignEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false>
  optional_import_enum_extension(kOptionalImportEnumExtensionFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnum >(7), nullptr);
const std::string optional_string_piece_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  optional_string_piece_extension(kOptionalStringPieceExtensionFieldNumber, optional_string_piece_extension_default, nullptr);
const std::string optional_cord_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  optional_cord_extension(kOptionalCordExtensionFieldNumber, optional_cord_extension_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::PublicImportMessage >, 11, false>
  optional_public_import_message_extension(kOptionalPublicImportMessageExtensionFieldNumber, ::protobuf_unittest_import::PublicImportMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false>
  optional_lazy_message_extension(kOptionalLazyMessageExtensionFieldNumber, ::protobuf_unittest::TestAllTypes_NestedMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, false>
  repeated_int32_extension(kRepeatedInt32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 3, false>
  repeated_int64_extension(kRepeatedInt64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 13, false>
  repeated_uint32_extension(kRepeatedUint32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 4, false>
  repeated_uint64_extension(kRepeatedUint64ExtensionFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 17, false>
  repeated_sint32_extension(kRepeatedSint32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 18, false>
  repeated_sint64_extension(kRepeatedSint64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 7, false>
  repeated_fixed32_extension(kRepeatedFixed32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 6, false>
  repeated_fixed64_extension(kRepeatedFixed64ExtensionFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 15, false>
  repeated_sfixed32_extension(kRepeatedSfixed32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 16, false>
  repeated_sfixed64_extension(kRepeatedSfixed64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, false>
  repeated_float_extension(kRepeatedFloatExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false>
  repeated_double_extension(kRepeatedDoubleExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false>
  repeated_bool_extension(kRepeatedBoolExtensionFieldNumber, false, nullptr);
const std::string repeated_string_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false>
  repeated_string_extension(kRepeatedStringExtensionFieldNumber, repeated_string_extension_default, nullptr);
const std::string repeated_bytes_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 12, false>
  repeated_bytes_extension(kRepeatedBytesExtensionFieldNumber, repeated_bytes_extension_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::RepeatedGroup_extension >, 10, false>
  repeatedgroup_extension(kRepeatedgroupExtensionFieldNumber, ::protobuf_unittest::RepeatedGroup_extension::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false>
  repeated_nested_message_extension(kRepeatedNestedMessageExtensionFieldNumber, ::protobuf_unittest::TestAllTypes_NestedMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::ForeignMessage >, 11, false>
  repeated_foreign_message_extension(kRepeatedForeignMessageExtensionFieldNumber, ::protobuf_unittest::ForeignMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest_import::ImportMessage >, 11, false>
  repeated_import_message_extension(kRepeatedImportMessageExtensionFieldNumber, ::protobuf_unittest_import::ImportMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false>
  repeated_nested_enum_extension(kRepeatedNestedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(1), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false>
  repeated_foreign_enum_extension(kRepeatedForeignEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false>
  repeated_import_enum_extension(kRepeatedImportEnumExtensionFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnum >(7), nullptr);
const std::string repeated_string_piece_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false>
  repeated_string_piece_extension(kRepeatedStringPieceExtensionFieldNumber, repeated_string_piece_extension_default, nullptr);
const std::string repeated_cord_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false>
  repeated_cord_extension(kRepeatedCordExtensionFieldNumber, repeated_cord_extension_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false>
  repeated_lazy_message_extension(kRepeatedLazyMessageExtensionFieldNumber, ::protobuf_unittest::TestAllTypes_NestedMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  default_int32_extension(kDefaultInt32ExtensionFieldNumber, 41, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 3, false>
  default_int64_extension(kDefaultInt64ExtensionFieldNumber, int64_t{42}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  default_uint32_extension(kDefaultUint32ExtensionFieldNumber, 43u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 4, false>
  default_uint64_extension(kDefaultUint64ExtensionFieldNumber, uint64_t{44u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 17, false>
  default_sint32_extension(kDefaultSint32ExtensionFieldNumber, -45, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 18, false>
  default_sint64_extension(kDefaultSint64ExtensionFieldNumber, int64_t{46}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 7, false>
  default_fixed32_extension(kDefaultFixed32ExtensionFieldNumber, 47u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 6, false>
  default_fixed64_extension(kDefaultFixed64ExtensionFieldNumber, uint64_t{48u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 15, false>
  default_sfixed32_extension(kDefaultSfixed32ExtensionFieldNumber, 49, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 16, false>
  default_sfixed64_extension(kDefaultSfixed64ExtensionFieldNumber, int64_t{-50}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false>
  default_float_extension(kDefaultFloatExtensionFieldNumber, 51.5f, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false>
  default_double_extension(kDefaultDoubleExtensionFieldNumber, 52000, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  default_bool_extension(kDefaultBoolExtensionFieldNumber, true, nullptr);
const std::string default_string_extension_default("hello");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  default_string_extension(kDefaultStringExtensionFieldNumber, default_string_extension_default, nullptr);
const std::string default_bytes_extension_default("world");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false>
  default_bytes_extension(kDefaultBytesExtensionFieldNumber, default_bytes_extension_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false>
  default_nested_enum_extension(kDefaultNestedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(2), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false>
  default_foreign_enum_extension(kDefaultForeignEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(5), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false>
  default_import_enum_extension(kDefaultImportEnumExtensionFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnum >(8), nullptr);
const std::string default_string_piece_extension_default("abc");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  default_string_piece_extension(kDefaultStringPieceExtensionFieldNumber, default_string_piece_extension_default, nullptr);
const std::string default_cord_extension_default("123");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  default_cord_extension(kDefaultCordExtensionFieldNumber, default_cord_extension_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  oneof_uint32_extension(kOneofUint32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false>
  oneof_nested_message_extension(kOneofNestedMessageExtensionFieldNumber, ::protobuf_unittest::TestAllTypes_NestedMessage::default_instance(), nullptr);
const std::string oneof_string_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  oneof_string_extension(kOneofStringExtensionFieldNumber, oneof_string_extension_default, nullptr);
const std::string oneof_bytes_extension_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false>
  oneof_bytes_extension(kOneofBytesExtensionFieldNumber, oneof_bytes_extension_default, nullptr);
const std::string my_extension_string_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  my_extension_string(kMyExtensionStringFieldNumber, my_extension_string_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  my_extension_int(kMyExtensionIntFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, true>
  packed_int32_extension(kPackedInt32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 3, true>
  packed_int64_extension(kPackedInt64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 13, true>
  packed_uint32_extension(kPackedUint32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 4, true>
  packed_uint64_extension(kPackedUint64ExtensionFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 17, true>
  packed_sint32_extension(kPackedSint32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 18, true>
  packed_sint64_extension(kPackedSint64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 7, true>
  packed_fixed32_extension(kPackedFixed32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 6, true>
  packed_fixed64_extension(kPackedFixed64ExtensionFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 15, true>
  packed_sfixed32_extension(kPackedSfixed32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 16, true>
  packed_sfixed64_extension(kPackedSfixed64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, true>
  packed_float_extension(kPackedFloatExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, true>
  packed_double_extension(kPackedDoubleExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, true>
  packed_bool_extension(kPackedBoolExtensionFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, true>
  packed_enum_extension(kPackedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, false>
  unpacked_int32_extension(kUnpackedInt32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 3, false>
  unpacked_int64_extension(kUnpackedInt64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 13, false>
  unpacked_uint32_extension(kUnpackedUint32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 4, false>
  unpacked_uint64_extension(kUnpackedUint64ExtensionFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 17, false>
  unpacked_sint32_extension(kUnpackedSint32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 18, false>
  unpacked_sint64_extension(kUnpackedSint64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 7, false>
  unpacked_fixed32_extension(kUnpackedFixed32ExtensionFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 6, false>
  unpacked_fixed64_extension(kUnpackedFixed64ExtensionFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 15, false>
  unpacked_sfixed32_extension(kUnpackedSfixed32ExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 16, false>
  unpacked_sfixed64_extension(kUnpackedSfixed64ExtensionFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, false>
  unpacked_float_extension(kUnpackedFloatExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false>
  unpacked_double_extension(kUnpackedDoubleExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false>
  unpacked_bool_extension(kUnpackedBoolExtensionFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false>
  unpacked_enum_extension(kUnpackedEnumExtensionFieldNumber, static_cast< ::protobuf_unittest::ForeignEnum >(4), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestHugeFieldNumbers,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false>
  test_all_types(kTestAllTypesFieldNumber, ::protobuf_unittest::TestAllTypes::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionInsideTable,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  test_extension_inside_table_extension(kTestExtensionInsideTableExtensionFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestNestedGroupExtensionInnerExtension >, 11, false>
  inner(kInnerFieldNumber, ::protobuf_unittest::TestNestedGroupExtensionInnerExtension::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypes_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypes_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypes_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypes_OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypes_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypes_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypes_RepeatedGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypes_RepeatedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypes_RepeatedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypes*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::NestedTestAllTypes*
Arena::CreateMaybeMessage< ::protobuf_unittest::NestedTestAllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::NestedTestAllTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDeprecatedFields*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDeprecatedFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDeprecatedFields >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDeprecatedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDeprecatedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDeprecatedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::ForeignMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::ForeignMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::ForeignMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestReservedFields*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestReservedFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestReservedFields >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllExtensions*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::OptionalGroup_extension*
Arena::CreateMaybeMessage< ::protobuf_unittest::OptionalGroup_extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::OptionalGroup_extension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::RepeatedGroup_extension*
Arena::CreateMaybeMessage< ::protobuf_unittest::RepeatedGroup_extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::RepeatedGroup_extension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestGroup_OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestGroup_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestGroup_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestGroupExtension*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestGroupExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestGroupExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedExtension*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestChildExtension*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestChildExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestChildExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestChildExtensionData*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestChildExtensionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestChildExtensionData >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedChildExtension*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedChildExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedChildExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedChildExtensionData*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedChildExtensionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedChildExtensionData >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequired*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequired >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequired >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredForeign*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredForeign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredForeign >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedRequiredForeign*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedRequiredForeign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedRequiredForeign >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestForeignNested*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestForeignNested >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestForeignNested >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEmptyMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEmptyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEmptyMessageWithExtensions*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEmptyMessageWithExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEmptyMessageWithExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPickleNestedMessage_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestPickleNestedMessage_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPickleNestedMessage_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPickleNestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestPickleNestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPickleNestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMultipleExtensionRanges*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMultipleExtensionRanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMultipleExtensionRanges >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestReallyLargeTagNumber*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestReallyLargeTagNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestReallyLargeTagNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRecursiveMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRecursiveMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRecursiveMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMutualRecursionA_SubMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMutualRecursionA_SubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMutualRecursionA_SubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMutualRecursionA_SubGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMutualRecursionA_SubGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMutualRecursionA_SubGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMutualRecursionA*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMutualRecursionA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMutualRecursionA >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMutualRecursionB*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMutualRecursionB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMutualRecursionB >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIsInitialized_SubMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestIsInitialized_SubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIsInitialized_SubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIsInitialized*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestIsInitialized >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIsInitialized >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDupFieldNumber_Foo*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDupFieldNumber_Foo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDupFieldNumber_Foo >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDupFieldNumber_Bar*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDupFieldNumber_Bar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDupFieldNumber_Bar >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDupFieldNumber*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDupFieldNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDupFieldNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEagerMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEagerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEagerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestLazyMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestLazyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestLazyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEagerMaybeLazy*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEagerMaybeLazy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEagerMaybeLazy >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedMessageHasBits*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedMessageHasBits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedMessageHasBits >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestCamelCaseFieldNames*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestCamelCaseFieldNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestCamelCaseFieldNames >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestFieldOrderings_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestFieldOrderings_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestFieldOrderings_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestFieldOrderings*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestFieldOrderings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestFieldOrderings >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionOrderings1*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionOrderings1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionOrderings1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionOrderings2*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionOrderings2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionOrderings2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtremeDefaultValues*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtremeDefaultValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtremeDefaultValues >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::SparseEnumMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::SparseEnumMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::SparseEnumMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::OneString*
Arena::CreateMaybeMessage< ::protobuf_unittest::OneString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::OneString >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::MoreString*
Arena::CreateMaybeMessage< ::protobuf_unittest::MoreString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::MoreString >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::OneBytes*
Arena::CreateMaybeMessage< ::protobuf_unittest::OneBytes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::OneBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::MoreBytes*
Arena::CreateMaybeMessage< ::protobuf_unittest::MoreBytes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::MoreBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::ManyOptionalString*
Arena::CreateMaybeMessage< ::protobuf_unittest::ManyOptionalString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::ManyOptionalString >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Int32Message*
Arena::CreateMaybeMessage< ::protobuf_unittest::Int32Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Int32Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Uint32Message*
Arena::CreateMaybeMessage< ::protobuf_unittest::Uint32Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Uint32Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Int64Message*
Arena::CreateMaybeMessage< ::protobuf_unittest::Int64Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Int64Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Uint64Message*
Arena::CreateMaybeMessage< ::protobuf_unittest::Uint64Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Uint64Message >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::BoolMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::BoolMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::BoolMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof_FooGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof_FooGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof_FooGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneofBackwardsCompatible*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneofBackwardsCompatible >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneofBackwardsCompatible >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof2_FooGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof2_FooGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof2_FooGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof2_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof2_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof2_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneof2*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneof2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneof2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredOneof_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredOneof_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredOneof_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRequiredOneof*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRequiredOneof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRequiredOneof >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPackedTypes*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestPackedTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPackedTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestUnpackedTypes*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestUnpackedTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestUnpackedTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPackedExtensions*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestPackedExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPackedExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestUnpackedExtensions*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestUnpackedExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestUnpackedExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDynamicExtensions*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDynamicExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDynamicExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge_RepeatedGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge_RepeatedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge_RepeatedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMerge*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMerge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMerge >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMergeException*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMergeException >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMergeException >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestCommentInjectionMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestCommentInjectionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestCommentInjectionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FooRequest*
Arena::CreateMaybeMessage< ::protobuf_unittest::FooRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FooRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FooResponse*
Arena::CreateMaybeMessage< ::protobuf_unittest::FooResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FooResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FooClientMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::FooClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FooClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::FooServerMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::FooServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::FooServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::BarRequest*
Arena::CreateMaybeMessage< ::protobuf_unittest::BarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::BarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::BarResponse*
Arena::CreateMaybeMessage< ::protobuf_unittest::BarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::BarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestJsonName*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestJsonName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestJsonName >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbers*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbers >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionInsideTable*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionInsideTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionInsideTable >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedGroupExtensionOuter*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedGroupExtensionOuter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedGroupExtensionOuter >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedGroupExtensionInnerExtension*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedGroupExtensionInnerExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedGroupExtensionInnerExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestExtensionRangeSerialize*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestExtensionRangeSerialize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestExtensionRangeSerialize >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
