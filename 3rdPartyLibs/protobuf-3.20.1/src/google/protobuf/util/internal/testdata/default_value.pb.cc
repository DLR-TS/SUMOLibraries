// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/default_value.proto

#include "google/protobuf/util/internal/testdata/default_value.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_util_converter {
namespace testing {
PROTOBUF_CONSTEXPR DefaultValueTestCases::DefaultValueTestCases(
    ::_pbi::ConstantInitialized)
  : empty_double_(nullptr)
  , double_with_default_value_(nullptr)
  , double_with_nondefault_value_(nullptr)
  , repeated_double_(nullptr)
  , nested_message_(nullptr)
  , repeated_nested_message_(nullptr)
  , double_message_with_oneof_(nullptr)
  , empty_struct_(nullptr)
  , empty_struct2_(nullptr)
  , struct_with_null_value_(nullptr)
  , struct_with_values_(nullptr)
  , struct_with_nested_struct_(nullptr)
  , struct_with_nested_list_(nullptr)
  , struct_with_list_of_nulls_(nullptr)
  , struct_with_list_of_lists_(nullptr)
  , struct_with_list_of_structs_(nullptr)
  , top_level_struct_(nullptr)
  , value_wrapper_simple_(nullptr)
  , value_wrapper_with_struct_(nullptr)
  , value_wrapper_with_list_(nullptr)
  , list_value_wrapper_(nullptr)
  , top_level_value_simple_(nullptr)
  , top_level_value_with_struct_(nullptr)
  , top_level_value_with_list_(nullptr)
  , top_level_listvalue_(nullptr)
  , empty_any_(nullptr)
  , type_only_any_(nullptr)
  , recursive_any_(nullptr)
  , any_with_message_value_(nullptr)
  , any_with_nested_message_(nullptr)
  , any_with_message_containing_map_(nullptr)
  , any_with_message_containing_struct_(nullptr)
  , top_level_any_(nullptr)
  , empty_map_(nullptr)
  , string_to_int_(nullptr)
  , int_to_string_(nullptr)
  , mixed1_(nullptr)
  , mixed2_(nullptr)
  , empty_mixed2_(nullptr)
  , map_of_objects_(nullptr)
  , mixed_empty_(nullptr)
  , message_map_empty_(nullptr)
  , double_value_(nullptr)
  , double_value_default_(nullptr){}
struct DefaultValueTestCasesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefaultValueTestCasesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefaultValueTestCasesDefaultTypeInternal() {}
  union {
    DefaultValueTestCases _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefaultValueTestCasesDefaultTypeInternal _DefaultValueTestCases_default_instance_;
PROTOBUF_CONSTEXPR DoubleMessage::DoubleMessage(
    ::_pbi::ConstantInitialized)
  : repeated_double_()
  , repeated_nested_message_()
  , nested_message_(nullptr)
  , double_wrapper_(nullptr)
  , double_value_(0)
  , _oneof_case_{}{}
struct DoubleMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleMessageDefaultTypeInternal() {}
  union {
    DoubleMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleMessageDefaultTypeInternal _DoubleMessage_default_instance_;
PROTOBUF_CONSTEXPR StructMessage::StructMessage(
    ::_pbi::ConstantInitialized)
  : struct__(nullptr){}
struct StructMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructMessageDefaultTypeInternal() {}
  union {
    StructMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructMessageDefaultTypeInternal _StructMessage_default_instance_;
PROTOBUF_CONSTEXPR ValueMessage::ValueMessage(
    ::_pbi::ConstantInitialized)
  : value_(nullptr){}
struct ValueMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueMessageDefaultTypeInternal() {}
  union {
    ValueMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueMessageDefaultTypeInternal _ValueMessage_default_instance_;
PROTOBUF_CONSTEXPR ListValueMessage::ListValueMessage(
    ::_pbi::ConstantInitialized)
  : shopping_list_(nullptr){}
struct ListValueMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListValueMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListValueMessageDefaultTypeInternal() {}
  union {
    ListValueMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListValueMessageDefaultTypeInternal _ListValueMessage_default_instance_;
PROTOBUF_CONSTEXPR RequestMessage::RequestMessage(
    ::_pbi::ConstantInitialized)
  : content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct RequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestMessageDefaultTypeInternal() {}
  union {
    RequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
PROTOBUF_CONSTEXPR AnyMessage::AnyMessage(
    ::_pbi::ConstantInitialized)
  : any_(nullptr)
  , data_(nullptr){}
struct AnyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyMessageDefaultTypeInternal() {}
  union {
    AnyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyMessageDefaultTypeInternal _AnyMessage_default_instance_;
PROTOBUF_CONSTEXPR AnyData_MapDataEntry_DoNotUse::AnyData_MapDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AnyData_MapDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyData_MapDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyData_MapDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AnyData_MapDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyData_MapDataEntry_DoNotUseDefaultTypeInternal _AnyData_MapDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AnyData::AnyData(
    ::_pbi::ConstantInitialized)
  : msgs_()
  , map_data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , repeated_data_()
  , str_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , nested_data_(nullptr)
  , struct_data_(nullptr)
  , attr_(0){}
struct AnyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyDataDefaultTypeInternal() {}
  union {
    AnyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyDataDefaultTypeInternal _AnyData_default_instance_;
PROTOBUF_CONSTEXPR StringtoIntMap_MapEntry_DoNotUse::StringtoIntMap_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct StringtoIntMap_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringtoIntMap_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringtoIntMap_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StringtoIntMap_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringtoIntMap_MapEntry_DoNotUseDefaultTypeInternal _StringtoIntMap_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StringtoIntMap::StringtoIntMap(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct StringtoIntMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringtoIntMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringtoIntMapDefaultTypeInternal() {}
  union {
    StringtoIntMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringtoIntMapDefaultTypeInternal _StringtoIntMap_default_instance_;
PROTOBUF_CONSTEXPR IntToStringMap_MapEntry_DoNotUse::IntToStringMap_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct IntToStringMap_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntToStringMap_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntToStringMap_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    IntToStringMap_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntToStringMap_MapEntry_DoNotUseDefaultTypeInternal _IntToStringMap_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR IntToStringMap::IntToStringMap(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct IntToStringMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntToStringMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntToStringMapDefaultTypeInternal() {}
  union {
    IntToStringMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntToStringMapDefaultTypeInternal _IntToStringMap_default_instance_;
PROTOBUF_CONSTEXPR MixedMap_MapEntry_DoNotUse::MixedMap_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MixedMap_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MixedMap_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MixedMap_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MixedMap_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MixedMap_MapEntry_DoNotUseDefaultTypeInternal _MixedMap_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MixedMap::MixedMap(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , int_value_(0){}
struct MixedMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MixedMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MixedMapDefaultTypeInternal() {}
  union {
    MixedMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MixedMapDefaultTypeInternal _MixedMap_default_instance_;
PROTOBUF_CONSTEXPR MixedMap2_MapEntry_DoNotUse::MixedMap2_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MixedMap2_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MixedMap2_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MixedMap2_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MixedMap2_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MixedMap2_MapEntry_DoNotUseDefaultTypeInternal _MixedMap2_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MixedMap2::MixedMap2(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ee_(0)
{}
struct MixedMap2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR MixedMap2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MixedMap2DefaultTypeInternal() {}
  union {
    MixedMap2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MixedMap2DefaultTypeInternal _MixedMap2_default_instance_;
PROTOBUF_CONSTEXPR MessageMap_M::MessageMap_M(
    ::_pbi::ConstantInitialized)
  : inner_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , inner_int_(0){}
struct MessageMap_MDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageMap_MDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageMap_MDefaultTypeInternal() {}
  union {
    MessageMap_M _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageMap_MDefaultTypeInternal _MessageMap_M_default_instance_;
PROTOBUF_CONSTEXPR MessageMap_MapEntry_DoNotUse::MessageMap_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MessageMap_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageMap_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageMap_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MessageMap_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageMap_MapEntry_DoNotUseDefaultTypeInternal _MessageMap_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MessageMap::MessageMap(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct MessageMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageMapDefaultTypeInternal() {}
  union {
    MessageMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageMapDefaultTypeInternal _MessageMap_default_instance_;
PROTOBUF_CONSTEXPR DoubleValueMessage::DoubleValueMessage(
    ::_pbi::ConstantInitialized)
  : double__(nullptr){}
struct DoubleValueMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleValueMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleValueMessageDefaultTypeInternal() {}
  union {
    DoubleValueMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleValueMessageDefaultTypeInternal _DoubleValueMessage_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_double_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_with_default_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_with_nondefault_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_message_with_oneof_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_struct2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_null_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_values_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_nested_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_nested_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_list_of_nulls_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_list_of_lists_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, struct_with_list_of_structs_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, value_wrapper_simple_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, value_wrapper_with_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, value_wrapper_with_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, list_value_wrapper_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_value_simple_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_value_with_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_value_with_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_listvalue_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, type_only_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, recursive_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, any_with_message_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, any_with_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, any_with_message_containing_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, any_with_message_containing_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, top_level_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, string_to_int_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, int_to_string_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, mixed1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, mixed2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, empty_mixed2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, map_of_objects_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, mixed_empty_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, message_map_empty_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DefaultValueTestCases, double_value_default_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, double_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, double_wrapper_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleMessage, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructMessage, struct__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ValueMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ValueMessage, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ListValueMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ListValueMessage, shopping_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::RequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::RequestMessage, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyMessage, any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyMessage, data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, attr_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, str_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, msgs_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, nested_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, map_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, struct_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyData, repeated_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoIntMap, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToStringMap, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap, msg_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap, int_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2, ee_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MixedMap2, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_M, inner_int_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_M, inner_text_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MessageMap, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleValueMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DoubleValueMessage, double__),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_util_converter::testing::DefaultValueTestCases)},
  { 50, -1, -1, sizeof(::proto_util_converter::testing::DoubleMessage)},
  { 64, -1, -1, sizeof(::proto_util_converter::testing::StructMessage)},
  { 71, -1, -1, sizeof(::proto_util_converter::testing::ValueMessage)},
  { 78, -1, -1, sizeof(::proto_util_converter::testing::ListValueMessage)},
  { 85, -1, -1, sizeof(::proto_util_converter::testing::RequestMessage)},
  { 92, -1, -1, sizeof(::proto_util_converter::testing::AnyMessage)},
  { 100, 108, -1, sizeof(::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse)},
  { 110, -1, -1, sizeof(::proto_util_converter::testing::AnyData)},
  { 123, 131, -1, sizeof(::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse)},
  { 133, -1, -1, sizeof(::proto_util_converter::testing::StringtoIntMap)},
  { 140, 148, -1, sizeof(::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse)},
  { 150, -1, -1, sizeof(::proto_util_converter::testing::IntToStringMap)},
  { 157, 165, -1, sizeof(::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse)},
  { 167, -1, -1, sizeof(::proto_util_converter::testing::MixedMap)},
  { 176, 184, -1, sizeof(::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse)},
  { 186, -1, -1, sizeof(::proto_util_converter::testing::MixedMap2)},
  { 195, -1, -1, sizeof(::proto_util_converter::testing::MessageMap_M)},
  { 203, 211, -1, sizeof(::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse)},
  { 213, -1, -1, sizeof(::proto_util_converter::testing::MessageMap)},
  { 220, -1, -1, sizeof(::proto_util_converter::testing::DoubleValueMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_util_converter::testing::_DefaultValueTestCases_default_instance_._instance,
  &::proto_util_converter::testing::_DoubleMessage_default_instance_._instance,
  &::proto_util_converter::testing::_StructMessage_default_instance_._instance,
  &::proto_util_converter::testing::_ValueMessage_default_instance_._instance,
  &::proto_util_converter::testing::_ListValueMessage_default_instance_._instance,
  &::proto_util_converter::testing::_RequestMessage_default_instance_._instance,
  &::proto_util_converter::testing::_AnyMessage_default_instance_._instance,
  &::proto_util_converter::testing::_AnyData_MapDataEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_AnyData_default_instance_._instance,
  &::proto_util_converter::testing::_StringtoIntMap_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_StringtoIntMap_default_instance_._instance,
  &::proto_util_converter::testing::_IntToStringMap_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_IntToStringMap_default_instance_._instance,
  &::proto_util_converter::testing::_MixedMap_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MixedMap_default_instance_._instance,
  &::proto_util_converter::testing::_MixedMap2_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MixedMap2_default_instance_._instance,
  &::proto_util_converter::testing::_MessageMap_M_default_instance_._instance,
  &::proto_util_converter::testing::_MessageMap_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MessageMap_default_instance_._instance,
  &::proto_util_converter::testing::_DoubleValueMessage_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:google/protobuf/util/internal/testdata"
  "/default_value.proto\022\034proto_util_convert"
  "er.testing\032\031google/protobuf/any.proto\032\034g"
  "oogle/protobuf/struct.proto\032\036google/prot"
  "obuf/wrappers.proto\"\307\030\n\025DefaultValueTest"
  "Cases\022A\n\014empty_double\030\001 \001(\0132+.proto_util"
  "_converter.testing.DoubleMessage\022N\n\031doub"
  "le_with_default_value\030\002 \001(\0132+.proto_util"
  "_converter.testing.DoubleMessage\022Q\n\034doub"
  "le_with_nondefault_value\030\003 \001(\0132+.proto_u"
  "til_converter.testing.DoubleMessage\022D\n\017r"
  "epeated_double\030\004 \001(\0132+.proto_util_conver"
  "ter.testing.DoubleMessage\022C\n\016nested_mess"
  "age\030\005 \001(\0132+.proto_util_converter.testing"
  ".DoubleMessage\022L\n\027repeated_nested_messag"
  "e\030\006 \001(\0132+.proto_util_converter.testing.D"
  "oubleMessage\022N\n\031double_message_with_oneo"
  "f\030\007 \001(\0132+.proto_util_converter.testing.D"
  "oubleMessage\022B\n\014empty_struct\030\311\001 \001(\0132+.pr"
  "oto_util_converter.testing.StructMessage"
  "\022C\n\rempty_struct2\030\312\001 \001(\0132+.proto_util_co"
  "nverter.testing.StructMessage\022L\n\026struct_"
  "with_null_value\030\313\001 \001(\0132+.proto_util_conv"
  "erter.testing.StructMessage\022H\n\022struct_wi"
  "th_values\030\314\001 \001(\0132+.proto_util_converter."
  "testing.StructMessage\022O\n\031struct_with_nes"
  "ted_struct\030\315\001 \001(\0132+.proto_util_converter"
  ".testing.StructMessage\022M\n\027struct_with_ne"
  "sted_list\030\316\001 \001(\0132+.proto_util_converter."
  "testing.StructMessage\022O\n\031struct_with_lis"
  "t_of_nulls\030\317\001 \001(\0132+.proto_util_converter"
  ".testing.StructMessage\022O\n\031struct_with_li"
  "st_of_lists\030\320\001 \001(\0132+.proto_util_converte"
  "r.testing.StructMessage\022Q\n\033struct_with_l"
  "ist_of_structs\030\321\001 \001(\0132+.proto_util_conve"
  "rter.testing.StructMessage\0222\n\020top_level_"
  "struct\030\322\001 \001(\0132\027.google.protobuf.Struct\022I"
  "\n\024value_wrapper_simple\030\324\001 \001(\0132*.proto_ut"
  "il_converter.testing.ValueMessage\022N\n\031val"
  "ue_wrapper_with_struct\030\325\001 \001(\0132*.proto_ut"
  "il_converter.testing.ValueMessage\022L\n\027val"
  "ue_wrapper_with_list\030\326\001 \001(\0132*.proto_util"
  "_converter.testing.ValueMessage\022K\n\022list_"
  "value_wrapper\030\327\001 \001(\0132..proto_util_conver"
  "ter.testing.ListValueMessage\0227\n\026top_leve"
  "l_value_simple\030\330\001 \001(\0132\026.google.protobuf."
  "Value\022<\n\033top_level_value_with_struct\030\331\001 "
  "\001(\0132\026.google.protobuf.Value\022:\n\031top_level"
  "_value_with_list\030\332\001 \001(\0132\026.google.protobu"
  "f.Value\0228\n\023top_level_listvalue\030\333\001 \001(\0132\032."
  "google.protobuf.ListValue\022<\n\tempty_any\030\255"
  "\002 \001(\0132(.proto_util_converter.testing.Any"
  "Message\022@\n\rtype_only_any\030\256\002 \001(\0132(.proto_"
  "util_converter.testing.AnyMessage\022@\n\rrec"
  "ursive_any\030\257\002 \001(\0132(.proto_util_converter"
  ".testing.AnyMessage\022I\n\026any_with_message_"
  "value\030\260\002 \001(\0132(.proto_util_converter.test"
  "ing.AnyMessage\022J\n\027any_with_nested_messag"
  "e\030\261\002 \001(\0132(.proto_util_converter.testing."
  "AnyMessage\022R\n\037any_with_message_containin"
  "g_map\030\262\002 \001(\0132(.proto_util_converter.test"
  "ing.AnyMessage\022U\n\"any_with_message_conta"
  "ining_struct\030\263\002 \001(\0132(.proto_util_convert"
  "er.testing.AnyMessage\022,\n\rtop_level_any\030\264"
  "\002 \001(\0132\024.google.protobuf.Any\022@\n\tempty_map"
  "\030\221\003 \001(\0132,.proto_util_converter.testing.S"
  "tringtoIntMap\022D\n\rstring_to_int\030\222\003 \001(\0132,."
  "proto_util_converter.testing.StringtoInt"
  "Map\022D\n\rint_to_string\030\223\003 \001(\0132,.proto_util"
  "_converter.testing.IntToStringMap\0227\n\006mix"
  "ed1\030\224\003 \001(\0132&.proto_util_converter.testin"
  "g.MixedMap\0228\n\006mixed2\030\225\003 \001(\0132\'.proto_util"
  "_converter.testing.MixedMap2\022>\n\014empty_mi"
  "xed2\030\226\003 \001(\0132\'.proto_util_converter.testi"
  "ng.MixedMap2\022A\n\016map_of_objects\030\227\003 \001(\0132(."
  "proto_util_converter.testing.MessageMap\022"
  "<\n\013mixed_empty\030\230\003 \001(\0132&.proto_util_conve"
  "rter.testing.MixedMap\022D\n\021message_map_emp"
  "ty\030\231\003 \001(\0132(.proto_util_converter.testing"
  ".MessageMap\022G\n\014double_value\030\365\003 \001(\01320.pro"
  "to_util_converter.testing.DoubleValueMes"
  "sage\022O\n\024double_value_default\030\366\003 \001(\01320.pr"
  "oto_util_converter.testing.DoubleValueMe"
  "ssage\"\272\002\n\rDoubleMessage\022\024\n\014double_value\030"
  "\001 \001(\001\022\027\n\017repeated_double\030\002 \003(\001\022C\n\016nested"
  "_message\030\003 \001(\0132+.proto_util_converter.te"
  "sting.DoubleMessage\022L\n\027repeated_nested_m"
  "essage\030\004 \003(\0132+.proto_util_converter.test"
  "ing.DoubleMessage\0224\n\016double_wrapper\030d \001("
  "\0132\034.google.protobuf.DoubleValue\022\023\n\tstr_v"
  "alue\030p \001(\tH\000\022\023\n\tnum_value\030q \001(\003H\000B\007\n\005val"
  "ue\"8\n\rStructMessage\022\'\n\006struct\030\001 \001(\0132\027.go"
  "ogle.protobuf.Struct\"5\n\014ValueMessage\022%\n\005"
  "value\030\001 \001(\0132\026.google.protobuf.Value\"E\n\020L"
  "istValueMessage\0221\n\rshopping_list\030\001 \001(\0132\032"
  ".google.protobuf.ListValue\"!\n\016RequestMes"
  "sage\022\017\n\007content\030\001 \001(\t\"d\n\nAnyMessage\022!\n\003a"
  "ny\030\001 \001(\0132\024.google.protobuf.Any\0223\n\004data\030\002"
  " \001(\0132%.proto_util_converter.testing.AnyD"
  "ata\"\320\002\n\007AnyData\022\014\n\004attr\030\001 \001(\005\022\013\n\003str\030\002 \001"
  "(\t\022\014\n\004msgs\030\003 \003(\t\022:\n\013nested_data\030\004 \001(\0132%."
  "proto_util_converter.testing.AnyData\022D\n\010"
  "map_data\030\007 \003(\01322.proto_util_converter.te"
  "sting.AnyData.MapDataEntry\022,\n\013struct_dat"
  "a\030\010 \001(\0132\027.google.protobuf.Struct\022<\n\rrepe"
  "ated_data\030\t \003(\0132%.proto_util_converter.t"
  "esting.AnyData\032.\n\014MapDataEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\200\001\n\016StringtoIntMa"
  "p\022B\n\003map\030\001 \003(\01325.proto_util_converter.te"
  "sting.StringtoIntMap.MapEntry\032*\n\010MapEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\200\001\n\016In"
  "tToStringMap\022B\n\003map\030\001 \003(\01325.proto_util_c"
  "onverter.testing.IntToStringMap.MapEntry"
  "\032*\n\010MapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t"
  ":\0028\001\"\224\001\n\010MixedMap\022\013\n\003msg\030\001 \001(\t\022<\n\003map\030\002 "
  "\003(\0132/.proto_util_converter.testing.Mixed"
  "Map.MapEntry\022\021\n\tint_value\030\003 \001(\005\032*\n\010MapEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\337\001\n\t"
  "MixedMap2\022=\n\003map\030\001 \003(\01320.proto_util_conv"
  "erter.testing.MixedMap2.MapEntry\0225\n\002ee\030\002"
  " \001(\0162).proto_util_converter.testing.Mixe"
  "dMap2.E\022\013\n\003msg\030\004 \001(\t\032*\n\010MapEntry\022\013\n\003key\030"
  "\001 \001(\005\022\r\n\005value\030\002 \001(\010:\0028\001\"#\n\001E\022\006\n\002E0\020\000\022\006\n"
  "\002E1\020\001\022\006\n\002E2\020\002\022\006\n\002E3\020\003\"\320\001\n\nMessageMap\022>\n\003"
  "map\030\001 \003(\01321.proto_util_converter.testing"
  ".MessageMap.MapEntry\032*\n\001M\022\021\n\tinner_int\030\001"
  " \001(\005\022\022\n\ninner_text\030\002 \001(\t\032V\n\010MapEntry\022\013\n\003"
  "key\030\001 \001(\t\0229\n\005value\030\002 \001(\0132*.proto_util_co"
  "nverter.testing.MessageMap.M:\0028\001\"B\n\022Doub"
  "leValueMessage\022,\n\006double\030\001 \001(\0132\034.google."
  "protobuf.DoubleValue2\204\001\n\027DefaultValueTes"
  "tService\022i\n\004Call\022,.proto_util_converter."
  "testing.RequestMessage\0323.proto_util_conv"
  "erter.testing.DefaultValueTestCasesb\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto = {
    false, false, 5363, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto,
    "google/protobuf/util/internal/testdata/default_value.proto",
    &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_deps, 3, 21,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
namespace proto_util_converter {
namespace testing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MixedMap2_E_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[0];
}
bool MixedMap2_E_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MixedMap2_E MixedMap2::E0;
constexpr MixedMap2_E MixedMap2::E1;
constexpr MixedMap2_E MixedMap2::E2;
constexpr MixedMap2_E MixedMap2::E3;
constexpr MixedMap2_E MixedMap2::E_MIN;
constexpr MixedMap2_E MixedMap2::E_MAX;
constexpr int MixedMap2::E_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DefaultValueTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::DoubleMessage& empty_double(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& double_with_default_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& double_with_nondefault_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& repeated_double(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& nested_message(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& repeated_nested_message(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleMessage& double_message_with_oneof(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& empty_struct(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& empty_struct2(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_null_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_values(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_nested_struct(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_nested_list(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_list_of_nulls(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_list_of_lists(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StructMessage& struct_with_list_of_structs(const DefaultValueTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& top_level_struct(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::ValueMessage& value_wrapper_simple(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::ValueMessage& value_wrapper_with_struct(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::ValueMessage& value_wrapper_with_list(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::ListValueMessage& list_value_wrapper(const DefaultValueTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Value& top_level_value_simple(const DefaultValueTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_struct(const DefaultValueTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_list(const DefaultValueTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::ListValue& top_level_listvalue(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& empty_any(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& type_only_any(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& recursive_any(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& any_with_message_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& any_with_nested_message(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& any_with_message_containing_map(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::AnyMessage& any_with_message_containing_struct(const DefaultValueTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& top_level_any(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StringtoIntMap& empty_map(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::StringtoIntMap& string_to_int(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::IntToStringMap& int_to_string(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MixedMap& mixed1(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MixedMap2& mixed2(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MixedMap2& empty_mixed2(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MessageMap& map_of_objects(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MixedMap& mixed_empty(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::MessageMap& message_map_empty(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleValueMessage& double_value(const DefaultValueTestCases* msg);
  static const ::proto_util_converter::testing::DoubleValueMessage& double_value_default(const DefaultValueTestCases* msg);
};

const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::empty_double(const DefaultValueTestCases* msg) {
  return *msg->empty_double_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::double_with_default_value(const DefaultValueTestCases* msg) {
  return *msg->double_with_default_value_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::double_with_nondefault_value(const DefaultValueTestCases* msg) {
  return *msg->double_with_nondefault_value_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::repeated_double(const DefaultValueTestCases* msg) {
  return *msg->repeated_double_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::nested_message(const DefaultValueTestCases* msg) {
  return *msg->nested_message_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::repeated_nested_message(const DefaultValueTestCases* msg) {
  return *msg->repeated_nested_message_;
}
const ::proto_util_converter::testing::DoubleMessage&
DefaultValueTestCases::_Internal::double_message_with_oneof(const DefaultValueTestCases* msg) {
  return *msg->double_message_with_oneof_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::empty_struct(const DefaultValueTestCases* msg) {
  return *msg->empty_struct_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::empty_struct2(const DefaultValueTestCases* msg) {
  return *msg->empty_struct2_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_null_value(const DefaultValueTestCases* msg) {
  return *msg->struct_with_null_value_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_values(const DefaultValueTestCases* msg) {
  return *msg->struct_with_values_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_nested_struct(const DefaultValueTestCases* msg) {
  return *msg->struct_with_nested_struct_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_nested_list(const DefaultValueTestCases* msg) {
  return *msg->struct_with_nested_list_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_list_of_nulls(const DefaultValueTestCases* msg) {
  return *msg->struct_with_list_of_nulls_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_list_of_lists(const DefaultValueTestCases* msg) {
  return *msg->struct_with_list_of_lists_;
}
const ::proto_util_converter::testing::StructMessage&
DefaultValueTestCases::_Internal::struct_with_list_of_structs(const DefaultValueTestCases* msg) {
  return *msg->struct_with_list_of_structs_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
DefaultValueTestCases::_Internal::top_level_struct(const DefaultValueTestCases* msg) {
  return *msg->top_level_struct_;
}
const ::proto_util_converter::testing::ValueMessage&
DefaultValueTestCases::_Internal::value_wrapper_simple(const DefaultValueTestCases* msg) {
  return *msg->value_wrapper_simple_;
}
const ::proto_util_converter::testing::ValueMessage&
DefaultValueTestCases::_Internal::value_wrapper_with_struct(const DefaultValueTestCases* msg) {
  return *msg->value_wrapper_with_struct_;
}
const ::proto_util_converter::testing::ValueMessage&
DefaultValueTestCases::_Internal::value_wrapper_with_list(const DefaultValueTestCases* msg) {
  return *msg->value_wrapper_with_list_;
}
const ::proto_util_converter::testing::ListValueMessage&
DefaultValueTestCases::_Internal::list_value_wrapper(const DefaultValueTestCases* msg) {
  return *msg->list_value_wrapper_;
}
const ::PROTOBUF_NAMESPACE_ID::Value&
DefaultValueTestCases::_Internal::top_level_value_simple(const DefaultValueTestCases* msg) {
  return *msg->top_level_value_simple_;
}
const ::PROTOBUF_NAMESPACE_ID::Value&
DefaultValueTestCases::_Internal::top_level_value_with_struct(const DefaultValueTestCases* msg) {
  return *msg->top_level_value_with_struct_;
}
const ::PROTOBUF_NAMESPACE_ID::Value&
DefaultValueTestCases::_Internal::top_level_value_with_list(const DefaultValueTestCases* msg) {
  return *msg->top_level_value_with_list_;
}
const ::PROTOBUF_NAMESPACE_ID::ListValue&
DefaultValueTestCases::_Internal::top_level_listvalue(const DefaultValueTestCases* msg) {
  return *msg->top_level_listvalue_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::empty_any(const DefaultValueTestCases* msg) {
  return *msg->empty_any_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::type_only_any(const DefaultValueTestCases* msg) {
  return *msg->type_only_any_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::recursive_any(const DefaultValueTestCases* msg) {
  return *msg->recursive_any_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::any_with_message_value(const DefaultValueTestCases* msg) {
  return *msg->any_with_message_value_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::any_with_nested_message(const DefaultValueTestCases* msg) {
  return *msg->any_with_nested_message_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::any_with_message_containing_map(const DefaultValueTestCases* msg) {
  return *msg->any_with_message_containing_map_;
}
const ::proto_util_converter::testing::AnyMessage&
DefaultValueTestCases::_Internal::any_with_message_containing_struct(const DefaultValueTestCases* msg) {
  return *msg->any_with_message_containing_struct_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
DefaultValueTestCases::_Internal::top_level_any(const DefaultValueTestCases* msg) {
  return *msg->top_level_any_;
}
const ::proto_util_converter::testing::StringtoIntMap&
DefaultValueTestCases::_Internal::empty_map(const DefaultValueTestCases* msg) {
  return *msg->empty_map_;
}
const ::proto_util_converter::testing::StringtoIntMap&
DefaultValueTestCases::_Internal::string_to_int(const DefaultValueTestCases* msg) {
  return *msg->string_to_int_;
}
const ::proto_util_converter::testing::IntToStringMap&
DefaultValueTestCases::_Internal::int_to_string(const DefaultValueTestCases* msg) {
  return *msg->int_to_string_;
}
const ::proto_util_converter::testing::MixedMap&
DefaultValueTestCases::_Internal::mixed1(const DefaultValueTestCases* msg) {
  return *msg->mixed1_;
}
const ::proto_util_converter::testing::MixedMap2&
DefaultValueTestCases::_Internal::mixed2(const DefaultValueTestCases* msg) {
  return *msg->mixed2_;
}
const ::proto_util_converter::testing::MixedMap2&
DefaultValueTestCases::_Internal::empty_mixed2(const DefaultValueTestCases* msg) {
  return *msg->empty_mixed2_;
}
const ::proto_util_converter::testing::MessageMap&
DefaultValueTestCases::_Internal::map_of_objects(const DefaultValueTestCases* msg) {
  return *msg->map_of_objects_;
}
const ::proto_util_converter::testing::MixedMap&
DefaultValueTestCases::_Internal::mixed_empty(const DefaultValueTestCases* msg) {
  return *msg->mixed_empty_;
}
const ::proto_util_converter::testing::MessageMap&
DefaultValueTestCases::_Internal::message_map_empty(const DefaultValueTestCases* msg) {
  return *msg->message_map_empty_;
}
const ::proto_util_converter::testing::DoubleValueMessage&
DefaultValueTestCases::_Internal::double_value(const DefaultValueTestCases* msg) {
  return *msg->double_value_;
}
const ::proto_util_converter::testing::DoubleValueMessage&
DefaultValueTestCases::_Internal::double_value_default(const DefaultValueTestCases* msg) {
  return *msg->double_value_default_;
}
void DefaultValueTestCases::clear_top_level_struct() {
  if (GetArenaForAllocation() == nullptr && top_level_struct_ != nullptr) {
    delete top_level_struct_;
  }
  top_level_struct_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_value_simple() {
  if (GetArenaForAllocation() == nullptr && top_level_value_simple_ != nullptr) {
    delete top_level_value_simple_;
  }
  top_level_value_simple_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_value_with_struct() {
  if (GetArenaForAllocation() == nullptr && top_level_value_with_struct_ != nullptr) {
    delete top_level_value_with_struct_;
  }
  top_level_value_with_struct_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_value_with_list() {
  if (GetArenaForAllocation() == nullptr && top_level_value_with_list_ != nullptr) {
    delete top_level_value_with_list_;
  }
  top_level_value_with_list_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_listvalue() {
  if (GetArenaForAllocation() == nullptr && top_level_listvalue_ != nullptr) {
    delete top_level_listvalue_;
  }
  top_level_listvalue_ = nullptr;
}
void DefaultValueTestCases::clear_top_level_any() {
  if (GetArenaForAllocation() == nullptr && top_level_any_ != nullptr) {
    delete top_level_any_;
  }
  top_level_any_ = nullptr;
}
DefaultValueTestCases::DefaultValueTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.DefaultValueTestCases)
}
DefaultValueTestCases::DefaultValueTestCases(const DefaultValueTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_empty_double()) {
    empty_double_ = new ::proto_util_converter::testing::DoubleMessage(*from.empty_double_);
  } else {
    empty_double_ = nullptr;
  }
  if (from._internal_has_double_with_default_value()) {
    double_with_default_value_ = new ::proto_util_converter::testing::DoubleMessage(*from.double_with_default_value_);
  } else {
    double_with_default_value_ = nullptr;
  }
  if (from._internal_has_double_with_nondefault_value()) {
    double_with_nondefault_value_ = new ::proto_util_converter::testing::DoubleMessage(*from.double_with_nondefault_value_);
  } else {
    double_with_nondefault_value_ = nullptr;
  }
  if (from._internal_has_repeated_double()) {
    repeated_double_ = new ::proto_util_converter::testing::DoubleMessage(*from.repeated_double_);
  } else {
    repeated_double_ = nullptr;
  }
  if (from._internal_has_nested_message()) {
    nested_message_ = new ::proto_util_converter::testing::DoubleMessage(*from.nested_message_);
  } else {
    nested_message_ = nullptr;
  }
  if (from._internal_has_repeated_nested_message()) {
    repeated_nested_message_ = new ::proto_util_converter::testing::DoubleMessage(*from.repeated_nested_message_);
  } else {
    repeated_nested_message_ = nullptr;
  }
  if (from._internal_has_double_message_with_oneof()) {
    double_message_with_oneof_ = new ::proto_util_converter::testing::DoubleMessage(*from.double_message_with_oneof_);
  } else {
    double_message_with_oneof_ = nullptr;
  }
  if (from._internal_has_empty_struct()) {
    empty_struct_ = new ::proto_util_converter::testing::StructMessage(*from.empty_struct_);
  } else {
    empty_struct_ = nullptr;
  }
  if (from._internal_has_empty_struct2()) {
    empty_struct2_ = new ::proto_util_converter::testing::StructMessage(*from.empty_struct2_);
  } else {
    empty_struct2_ = nullptr;
  }
  if (from._internal_has_struct_with_null_value()) {
    struct_with_null_value_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_null_value_);
  } else {
    struct_with_null_value_ = nullptr;
  }
  if (from._internal_has_struct_with_values()) {
    struct_with_values_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_values_);
  } else {
    struct_with_values_ = nullptr;
  }
  if (from._internal_has_struct_with_nested_struct()) {
    struct_with_nested_struct_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_nested_struct_);
  } else {
    struct_with_nested_struct_ = nullptr;
  }
  if (from._internal_has_struct_with_nested_list()) {
    struct_with_nested_list_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_nested_list_);
  } else {
    struct_with_nested_list_ = nullptr;
  }
  if (from._internal_has_struct_with_list_of_nulls()) {
    struct_with_list_of_nulls_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_list_of_nulls_);
  } else {
    struct_with_list_of_nulls_ = nullptr;
  }
  if (from._internal_has_struct_with_list_of_lists()) {
    struct_with_list_of_lists_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_list_of_lists_);
  } else {
    struct_with_list_of_lists_ = nullptr;
  }
  if (from._internal_has_struct_with_list_of_structs()) {
    struct_with_list_of_structs_ = new ::proto_util_converter::testing::StructMessage(*from.struct_with_list_of_structs_);
  } else {
    struct_with_list_of_structs_ = nullptr;
  }
  if (from._internal_has_top_level_struct()) {
    top_level_struct_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.top_level_struct_);
  } else {
    top_level_struct_ = nullptr;
  }
  if (from._internal_has_value_wrapper_simple()) {
    value_wrapper_simple_ = new ::proto_util_converter::testing::ValueMessage(*from.value_wrapper_simple_);
  } else {
    value_wrapper_simple_ = nullptr;
  }
  if (from._internal_has_value_wrapper_with_struct()) {
    value_wrapper_with_struct_ = new ::proto_util_converter::testing::ValueMessage(*from.value_wrapper_with_struct_);
  } else {
    value_wrapper_with_struct_ = nullptr;
  }
  if (from._internal_has_value_wrapper_with_list()) {
    value_wrapper_with_list_ = new ::proto_util_converter::testing::ValueMessage(*from.value_wrapper_with_list_);
  } else {
    value_wrapper_with_list_ = nullptr;
  }
  if (from._internal_has_list_value_wrapper()) {
    list_value_wrapper_ = new ::proto_util_converter::testing::ListValueMessage(*from.list_value_wrapper_);
  } else {
    list_value_wrapper_ = nullptr;
  }
  if (from._internal_has_top_level_value_simple()) {
    top_level_value_simple_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from.top_level_value_simple_);
  } else {
    top_level_value_simple_ = nullptr;
  }
  if (from._internal_has_top_level_value_with_struct()) {
    top_level_value_with_struct_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from.top_level_value_with_struct_);
  } else {
    top_level_value_with_struct_ = nullptr;
  }
  if (from._internal_has_top_level_value_with_list()) {
    top_level_value_with_list_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from.top_level_value_with_list_);
  } else {
    top_level_value_with_list_ = nullptr;
  }
  if (from._internal_has_top_level_listvalue()) {
    top_level_listvalue_ = new ::PROTOBUF_NAMESPACE_ID::ListValue(*from.top_level_listvalue_);
  } else {
    top_level_listvalue_ = nullptr;
  }
  if (from._internal_has_empty_any()) {
    empty_any_ = new ::proto_util_converter::testing::AnyMessage(*from.empty_any_);
  } else {
    empty_any_ = nullptr;
  }
  if (from._internal_has_type_only_any()) {
    type_only_any_ = new ::proto_util_converter::testing::AnyMessage(*from.type_only_any_);
  } else {
    type_only_any_ = nullptr;
  }
  if (from._internal_has_recursive_any()) {
    recursive_any_ = new ::proto_util_converter::testing::AnyMessage(*from.recursive_any_);
  } else {
    recursive_any_ = nullptr;
  }
  if (from._internal_has_any_with_message_value()) {
    any_with_message_value_ = new ::proto_util_converter::testing::AnyMessage(*from.any_with_message_value_);
  } else {
    any_with_message_value_ = nullptr;
  }
  if (from._internal_has_any_with_nested_message()) {
    any_with_nested_message_ = new ::proto_util_converter::testing::AnyMessage(*from.any_with_nested_message_);
  } else {
    any_with_nested_message_ = nullptr;
  }
  if (from._internal_has_any_with_message_containing_map()) {
    any_with_message_containing_map_ = new ::proto_util_converter::testing::AnyMessage(*from.any_with_message_containing_map_);
  } else {
    any_with_message_containing_map_ = nullptr;
  }
  if (from._internal_has_any_with_message_containing_struct()) {
    any_with_message_containing_struct_ = new ::proto_util_converter::testing::AnyMessage(*from.any_with_message_containing_struct_);
  } else {
    any_with_message_containing_struct_ = nullptr;
  }
  if (from._internal_has_top_level_any()) {
    top_level_any_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.top_level_any_);
  } else {
    top_level_any_ = nullptr;
  }
  if (from._internal_has_empty_map()) {
    empty_map_ = new ::proto_util_converter::testing::StringtoIntMap(*from.empty_map_);
  } else {
    empty_map_ = nullptr;
  }
  if (from._internal_has_string_to_int()) {
    string_to_int_ = new ::proto_util_converter::testing::StringtoIntMap(*from.string_to_int_);
  } else {
    string_to_int_ = nullptr;
  }
  if (from._internal_has_int_to_string()) {
    int_to_string_ = new ::proto_util_converter::testing::IntToStringMap(*from.int_to_string_);
  } else {
    int_to_string_ = nullptr;
  }
  if (from._internal_has_mixed1()) {
    mixed1_ = new ::proto_util_converter::testing::MixedMap(*from.mixed1_);
  } else {
    mixed1_ = nullptr;
  }
  if (from._internal_has_mixed2()) {
    mixed2_ = new ::proto_util_converter::testing::MixedMap2(*from.mixed2_);
  } else {
    mixed2_ = nullptr;
  }
  if (from._internal_has_empty_mixed2()) {
    empty_mixed2_ = new ::proto_util_converter::testing::MixedMap2(*from.empty_mixed2_);
  } else {
    empty_mixed2_ = nullptr;
  }
  if (from._internal_has_map_of_objects()) {
    map_of_objects_ = new ::proto_util_converter::testing::MessageMap(*from.map_of_objects_);
  } else {
    map_of_objects_ = nullptr;
  }
  if (from._internal_has_mixed_empty()) {
    mixed_empty_ = new ::proto_util_converter::testing::MixedMap(*from.mixed_empty_);
  } else {
    mixed_empty_ = nullptr;
  }
  if (from._internal_has_message_map_empty()) {
    message_map_empty_ = new ::proto_util_converter::testing::MessageMap(*from.message_map_empty_);
  } else {
    message_map_empty_ = nullptr;
  }
  if (from._internal_has_double_value()) {
    double_value_ = new ::proto_util_converter::testing::DoubleValueMessage(*from.double_value_);
  } else {
    double_value_ = nullptr;
  }
  if (from._internal_has_double_value_default()) {
    double_value_default_ = new ::proto_util_converter::testing::DoubleValueMessage(*from.double_value_default_);
  } else {
    double_value_default_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DefaultValueTestCases)
}

inline void DefaultValueTestCases::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&empty_double_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&double_value_default_) -
    reinterpret_cast<char*>(&empty_double_)) + sizeof(double_value_default_));
}

DefaultValueTestCases::~DefaultValueTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.DefaultValueTestCases)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DefaultValueTestCases::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete empty_double_;
  if (this != internal_default_instance()) delete double_with_default_value_;
  if (this != internal_default_instance()) delete double_with_nondefault_value_;
  if (this != internal_default_instance()) delete repeated_double_;
  if (this != internal_default_instance()) delete nested_message_;
  if (this != internal_default_instance()) delete repeated_nested_message_;
  if (this != internal_default_instance()) delete double_message_with_oneof_;
  if (this != internal_default_instance()) delete empty_struct_;
  if (this != internal_default_instance()) delete empty_struct2_;
  if (this != internal_default_instance()) delete struct_with_null_value_;
  if (this != internal_default_instance()) delete struct_with_values_;
  if (this != internal_default_instance()) delete struct_with_nested_struct_;
  if (this != internal_default_instance()) delete struct_with_nested_list_;
  if (this != internal_default_instance()) delete struct_with_list_of_nulls_;
  if (this != internal_default_instance()) delete struct_with_list_of_lists_;
  if (this != internal_default_instance()) delete struct_with_list_of_structs_;
  if (this != internal_default_instance()) delete top_level_struct_;
  if (this != internal_default_instance()) delete value_wrapper_simple_;
  if (this != internal_default_instance()) delete value_wrapper_with_struct_;
  if (this != internal_default_instance()) delete value_wrapper_with_list_;
  if (this != internal_default_instance()) delete list_value_wrapper_;
  if (this != internal_default_instance()) delete top_level_value_simple_;
  if (this != internal_default_instance()) delete top_level_value_with_struct_;
  if (this != internal_default_instance()) delete top_level_value_with_list_;
  if (this != internal_default_instance()) delete top_level_listvalue_;
  if (this != internal_default_instance()) delete empty_any_;
  if (this != internal_default_instance()) delete type_only_any_;
  if (this != internal_default_instance()) delete recursive_any_;
  if (this != internal_default_instance()) delete any_with_message_value_;
  if (this != internal_default_instance()) delete any_with_nested_message_;
  if (this != internal_default_instance()) delete any_with_message_containing_map_;
  if (this != internal_default_instance()) delete any_with_message_containing_struct_;
  if (this != internal_default_instance()) delete top_level_any_;
  if (this != internal_default_instance()) delete empty_map_;
  if (this != internal_default_instance()) delete string_to_int_;
  if (this != internal_default_instance()) delete int_to_string_;
  if (this != internal_default_instance()) delete mixed1_;
  if (this != internal_default_instance()) delete mixed2_;
  if (this != internal_default_instance()) delete empty_mixed2_;
  if (this != internal_default_instance()) delete map_of_objects_;
  if (this != internal_default_instance()) delete mixed_empty_;
  if (this != internal_default_instance()) delete message_map_empty_;
  if (this != internal_default_instance()) delete double_value_;
  if (this != internal_default_instance()) delete double_value_default_;
}

void DefaultValueTestCases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DefaultValueTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.DefaultValueTestCases)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && empty_double_ != nullptr) {
    delete empty_double_;
  }
  empty_double_ = nullptr;
  if (GetArenaForAllocation() == nullptr && double_with_default_value_ != nullptr) {
    delete double_with_default_value_;
  }
  double_with_default_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && double_with_nondefault_value_ != nullptr) {
    delete double_with_nondefault_value_;
  }
  double_with_nondefault_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && repeated_double_ != nullptr) {
    delete repeated_double_;
  }
  repeated_double_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nested_message_ != nullptr) {
    delete nested_message_;
  }
  nested_message_ = nullptr;
  if (GetArenaForAllocation() == nullptr && repeated_nested_message_ != nullptr) {
    delete repeated_nested_message_;
  }
  repeated_nested_message_ = nullptr;
  if (GetArenaForAllocation() == nullptr && double_message_with_oneof_ != nullptr) {
    delete double_message_with_oneof_;
  }
  double_message_with_oneof_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_struct_ != nullptr) {
    delete empty_struct_;
  }
  empty_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_struct2_ != nullptr) {
    delete empty_struct2_;
  }
  empty_struct2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && struct_with_null_value_ != nullptr) {
    delete struct_with_null_value_;
  }
  struct_with_null_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && struct_with_values_ != nullptr) {
    delete struct_with_values_;
  }
  struct_with_values_ = nullptr;
  if (GetArenaForAllocation() == nullptr && struct_with_nested_struct_ != nullptr) {
    delete struct_with_nested_struct_;
  }
  struct_with_nested_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && struct_with_nested_list_ != nullptr) {
    delete struct_with_nested_list_;
  }
  struct_with_nested_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && struct_with_list_of_nulls_ != nullptr) {
    delete struct_with_list_of_nulls_;
  }
  struct_with_list_of_nulls_ = nullptr;
  if (GetArenaForAllocation() == nullptr && struct_with_list_of_lists_ != nullptr) {
    delete struct_with_list_of_lists_;
  }
  struct_with_list_of_lists_ = nullptr;
  if (GetArenaForAllocation() == nullptr && struct_with_list_of_structs_ != nullptr) {
    delete struct_with_list_of_structs_;
  }
  struct_with_list_of_structs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && top_level_struct_ != nullptr) {
    delete top_level_struct_;
  }
  top_level_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_wrapper_simple_ != nullptr) {
    delete value_wrapper_simple_;
  }
  value_wrapper_simple_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_wrapper_with_struct_ != nullptr) {
    delete value_wrapper_with_struct_;
  }
  value_wrapper_with_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_wrapper_with_list_ != nullptr) {
    delete value_wrapper_with_list_;
  }
  value_wrapper_with_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && list_value_wrapper_ != nullptr) {
    delete list_value_wrapper_;
  }
  list_value_wrapper_ = nullptr;
  if (GetArenaForAllocation() == nullptr && top_level_value_simple_ != nullptr) {
    delete top_level_value_simple_;
  }
  top_level_value_simple_ = nullptr;
  if (GetArenaForAllocation() == nullptr && top_level_value_with_struct_ != nullptr) {
    delete top_level_value_with_struct_;
  }
  top_level_value_with_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && top_level_value_with_list_ != nullptr) {
    delete top_level_value_with_list_;
  }
  top_level_value_with_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && top_level_listvalue_ != nullptr) {
    delete top_level_listvalue_;
  }
  top_level_listvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_any_ != nullptr) {
    delete empty_any_;
  }
  empty_any_ = nullptr;
  if (GetArenaForAllocation() == nullptr && type_only_any_ != nullptr) {
    delete type_only_any_;
  }
  type_only_any_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recursive_any_ != nullptr) {
    delete recursive_any_;
  }
  recursive_any_ = nullptr;
  if (GetArenaForAllocation() == nullptr && any_with_message_value_ != nullptr) {
    delete any_with_message_value_;
  }
  any_with_message_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && any_with_nested_message_ != nullptr) {
    delete any_with_nested_message_;
  }
  any_with_nested_message_ = nullptr;
  if (GetArenaForAllocation() == nullptr && any_with_message_containing_map_ != nullptr) {
    delete any_with_message_containing_map_;
  }
  any_with_message_containing_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && any_with_message_containing_struct_ != nullptr) {
    delete any_with_message_containing_struct_;
  }
  any_with_message_containing_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && top_level_any_ != nullptr) {
    delete top_level_any_;
  }
  top_level_any_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_map_ != nullptr) {
    delete empty_map_;
  }
  empty_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && string_to_int_ != nullptr) {
    delete string_to_int_;
  }
  string_to_int_ = nullptr;
  if (GetArenaForAllocation() == nullptr && int_to_string_ != nullptr) {
    delete int_to_string_;
  }
  int_to_string_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mixed1_ != nullptr) {
    delete mixed1_;
  }
  mixed1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mixed2_ != nullptr) {
    delete mixed2_;
  }
  mixed2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_mixed2_ != nullptr) {
    delete empty_mixed2_;
  }
  empty_mixed2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && map_of_objects_ != nullptr) {
    delete map_of_objects_;
  }
  map_of_objects_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mixed_empty_ != nullptr) {
    delete mixed_empty_;
  }
  mixed_empty_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_map_empty_ != nullptr) {
    delete message_map_empty_;
  }
  message_map_empty_ = nullptr;
  if (GetArenaForAllocation() == nullptr && double_value_ != nullptr) {
    delete double_value_;
  }
  double_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && double_value_default_ != nullptr) {
    delete double_value_default_;
  }
  double_value_default_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultValueTestCases::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_util_converter.testing.DoubleMessage empty_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_double(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_with_default_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_with_nondefault_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage repeated_double = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_double(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage nested_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_message_with_oneof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage empty_struct = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage empty_struct2 = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_struct2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_null_value = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_null_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_values = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_values(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_nested_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_nested_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_nulls(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_lists(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_structs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct top_level_struct = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_simple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_with_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_with_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value_wrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_simple = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_simple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_with_struct = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_with_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_with_list = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_with_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.ListValue top_level_listvalue = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_listvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage empty_any = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_any(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage type_only_any = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_only_any(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage recursive_any = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_recursive_any(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage any_with_message_value = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_with_message_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_with_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_with_message_containing_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_with_message_containing_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any top_level_any = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_any(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoIntMap empty_map = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoIntMap string_to_int = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_to_int(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.IntToStringMap int_to_string = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_to_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap mixed1 = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap2 mixed2 = 405;
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_mixed2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MessageMap map_of_objects = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_of_objects(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap mixed_empty = 408;
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed_empty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MessageMap message_map_empty = 409;
      case 409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_map_empty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleValueMessage double_value = 501;
      case 501:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
      case 502:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_value_default(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DefaultValueTestCases::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.DefaultValueTestCases)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.DoubleMessage empty_double = 1;
  if (this->_internal_has_empty_double()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::empty_double(this),
        _Internal::empty_double(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
  if (this->_internal_has_double_with_default_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::double_with_default_value(this),
        _Internal::double_with_default_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
  if (this->_internal_has_double_with_nondefault_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::double_with_nondefault_value(this),
        _Internal::double_with_nondefault_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage repeated_double = 4;
  if (this->_internal_has_repeated_double()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::repeated_double(this),
        _Internal::repeated_double(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage nested_message = 5;
  if (this->_internal_has_nested_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::nested_message(this),
        _Internal::nested_message(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
  if (this->_internal_has_repeated_nested_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::repeated_nested_message(this),
        _Internal::repeated_nested_message(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
  if (this->_internal_has_double_message_with_oneof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::double_message_with_oneof(this),
        _Internal::double_message_with_oneof(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage empty_struct = 201;
  if (this->_internal_has_empty_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(201, _Internal::empty_struct(this),
        _Internal::empty_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage empty_struct2 = 202;
  if (this->_internal_has_empty_struct2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(202, _Internal::empty_struct2(this),
        _Internal::empty_struct2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_null_value = 203;
  if (this->_internal_has_struct_with_null_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(203, _Internal::struct_with_null_value(this),
        _Internal::struct_with_null_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_values = 204;
  if (this->_internal_has_struct_with_values()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(204, _Internal::struct_with_values(this),
        _Internal::struct_with_values(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
  if (this->_internal_has_struct_with_nested_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(205, _Internal::struct_with_nested_struct(this),
        _Internal::struct_with_nested_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
  if (this->_internal_has_struct_with_nested_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(206, _Internal::struct_with_nested_list(this),
        _Internal::struct_with_nested_list(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
  if (this->_internal_has_struct_with_list_of_nulls()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(207, _Internal::struct_with_list_of_nulls(this),
        _Internal::struct_with_list_of_nulls(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
  if (this->_internal_has_struct_with_list_of_lists()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(208, _Internal::struct_with_list_of_lists(this),
        _Internal::struct_with_list_of_lists(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
  if (this->_internal_has_struct_with_list_of_structs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(209, _Internal::struct_with_list_of_structs(this),
        _Internal::struct_with_list_of_structs(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct top_level_struct = 210;
  if (this->_internal_has_top_level_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(210, _Internal::top_level_struct(this),
        _Internal::top_level_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
  if (this->_internal_has_value_wrapper_simple()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(212, _Internal::value_wrapper_simple(this),
        _Internal::value_wrapper_simple(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
  if (this->_internal_has_value_wrapper_with_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(213, _Internal::value_wrapper_with_struct(this),
        _Internal::value_wrapper_with_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
  if (this->_internal_has_value_wrapper_with_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(214, _Internal::value_wrapper_with_list(this),
        _Internal::value_wrapper_with_list(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
  if (this->_internal_has_list_value_wrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(215, _Internal::list_value_wrapper(this),
        _Internal::list_value_wrapper(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Value top_level_value_simple = 216;
  if (this->_internal_has_top_level_value_simple()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(216, _Internal::top_level_value_simple(this),
        _Internal::top_level_value_simple(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Value top_level_value_with_struct = 217;
  if (this->_internal_has_top_level_value_with_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(217, _Internal::top_level_value_with_struct(this),
        _Internal::top_level_value_with_struct(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Value top_level_value_with_list = 218;
  if (this->_internal_has_top_level_value_with_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(218, _Internal::top_level_value_with_list(this),
        _Internal::top_level_value_with_list(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.ListValue top_level_listvalue = 219;
  if (this->_internal_has_top_level_listvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(219, _Internal::top_level_listvalue(this),
        _Internal::top_level_listvalue(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage empty_any = 301;
  if (this->_internal_has_empty_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::empty_any(this),
        _Internal::empty_any(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage type_only_any = 302;
  if (this->_internal_has_type_only_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(302, _Internal::type_only_any(this),
        _Internal::type_only_any(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage recursive_any = 303;
  if (this->_internal_has_recursive_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(303, _Internal::recursive_any(this),
        _Internal::recursive_any(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_value = 304;
  if (this->_internal_has_any_with_message_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(304, _Internal::any_with_message_value(this),
        _Internal::any_with_message_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
  if (this->_internal_has_any_with_nested_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(305, _Internal::any_with_nested_message(this),
        _Internal::any_with_nested_message(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
  if (this->_internal_has_any_with_message_containing_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(306, _Internal::any_with_message_containing_map(this),
        _Internal::any_with_message_containing_map(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
  if (this->_internal_has_any_with_message_containing_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(307, _Internal::any_with_message_containing_struct(this),
        _Internal::any_with_message_containing_struct(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any top_level_any = 308;
  if (this->_internal_has_top_level_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(308, _Internal::top_level_any(this),
        _Internal::top_level_any(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StringtoIntMap empty_map = 401;
  if (this->_internal_has_empty_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(401, _Internal::empty_map(this),
        _Internal::empty_map(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StringtoIntMap string_to_int = 402;
  if (this->_internal_has_string_to_int()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(402, _Internal::string_to_int(this),
        _Internal::string_to_int(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.IntToStringMap int_to_string = 403;
  if (this->_internal_has_int_to_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(403, _Internal::int_to_string(this),
        _Internal::int_to_string(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MixedMap mixed1 = 404;
  if (this->_internal_has_mixed1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(404, _Internal::mixed1(this),
        _Internal::mixed1(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MixedMap2 mixed2 = 405;
  if (this->_internal_has_mixed2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(405, _Internal::mixed2(this),
        _Internal::mixed2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
  if (this->_internal_has_empty_mixed2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(406, _Internal::empty_mixed2(this),
        _Internal::empty_mixed2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MessageMap map_of_objects = 407;
  if (this->_internal_has_map_of_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(407, _Internal::map_of_objects(this),
        _Internal::map_of_objects(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MixedMap mixed_empty = 408;
  if (this->_internal_has_mixed_empty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(408, _Internal::mixed_empty(this),
        _Internal::mixed_empty(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MessageMap message_map_empty = 409;
  if (this->_internal_has_message_map_empty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(409, _Internal::message_map_empty(this),
        _Internal::message_map_empty(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DoubleValueMessage double_value = 501;
  if (this->_internal_has_double_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(501, _Internal::double_value(this),
        _Internal::double_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
  if (this->_internal_has_double_value_default()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(502, _Internal::double_value_default(this),
        _Internal::double_value_default(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.DefaultValueTestCases)
  return target;
}

size_t DefaultValueTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.DefaultValueTestCases)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.DoubleMessage empty_double = 1;
  if (this->_internal_has_empty_double()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_double_);
  }

  // .proto_util_converter.testing.DoubleMessage double_with_default_value = 2;
  if (this->_internal_has_double_with_default_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_with_default_value_);
  }

  // .proto_util_converter.testing.DoubleMessage double_with_nondefault_value = 3;
  if (this->_internal_has_double_with_nondefault_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_with_nondefault_value_);
  }

  // .proto_util_converter.testing.DoubleMessage repeated_double = 4;
  if (this->_internal_has_repeated_double()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeated_double_);
  }

  // .proto_util_converter.testing.DoubleMessage nested_message = 5;
  if (this->_internal_has_nested_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_message_);
  }

  // .proto_util_converter.testing.DoubleMessage repeated_nested_message = 6;
  if (this->_internal_has_repeated_nested_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeated_nested_message_);
  }

  // .proto_util_converter.testing.DoubleMessage double_message_with_oneof = 7;
  if (this->_internal_has_double_message_with_oneof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_message_with_oneof_);
  }

  // .proto_util_converter.testing.StructMessage empty_struct = 201;
  if (this->_internal_has_empty_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_struct_);
  }

  // .proto_util_converter.testing.StructMessage empty_struct2 = 202;
  if (this->_internal_has_empty_struct2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_struct2_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_null_value = 203;
  if (this->_internal_has_struct_with_null_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_null_value_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_values = 204;
  if (this->_internal_has_struct_with_values()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_values_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_nested_struct = 205;
  if (this->_internal_has_struct_with_nested_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_nested_struct_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_nested_list = 206;
  if (this->_internal_has_struct_with_nested_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_nested_list_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_nulls = 207;
  if (this->_internal_has_struct_with_list_of_nulls()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_list_of_nulls_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_lists = 208;
  if (this->_internal_has_struct_with_list_of_lists()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_list_of_lists_);
  }

  // .proto_util_converter.testing.StructMessage struct_with_list_of_structs = 209;
  if (this->_internal_has_struct_with_list_of_structs()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_with_list_of_structs_);
  }

  // .google.protobuf.Struct top_level_struct = 210;
  if (this->_internal_has_top_level_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_struct_);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_simple = 212;
  if (this->_internal_has_value_wrapper_simple()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_wrapper_simple_);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_struct = 213;
  if (this->_internal_has_value_wrapper_with_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_wrapper_with_struct_);
  }

  // .proto_util_converter.testing.ValueMessage value_wrapper_with_list = 214;
  if (this->_internal_has_value_wrapper_with_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_wrapper_with_list_);
  }

  // .proto_util_converter.testing.ListValueMessage list_value_wrapper = 215;
  if (this->_internal_has_list_value_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_value_wrapper_);
  }

  // .google.protobuf.Value top_level_value_simple = 216;
  if (this->_internal_has_top_level_value_simple()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_value_simple_);
  }

  // .google.protobuf.Value top_level_value_with_struct = 217;
  if (this->_internal_has_top_level_value_with_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_value_with_struct_);
  }

  // .google.protobuf.Value top_level_value_with_list = 218;
  if (this->_internal_has_top_level_value_with_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_value_with_list_);
  }

  // .google.protobuf.ListValue top_level_listvalue = 219;
  if (this->_internal_has_top_level_listvalue()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_listvalue_);
  }

  // .proto_util_converter.testing.AnyMessage empty_any = 301;
  if (this->_internal_has_empty_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_any_);
  }

  // .proto_util_converter.testing.AnyMessage type_only_any = 302;
  if (this->_internal_has_type_only_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_only_any_);
  }

  // .proto_util_converter.testing.AnyMessage recursive_any = 303;
  if (this->_internal_has_recursive_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recursive_any_);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_value = 304;
  if (this->_internal_has_any_with_message_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_value_);
  }

  // .proto_util_converter.testing.AnyMessage any_with_nested_message = 305;
  if (this->_internal_has_any_with_nested_message()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_nested_message_);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_map = 306;
  if (this->_internal_has_any_with_message_containing_map()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_containing_map_);
  }

  // .proto_util_converter.testing.AnyMessage any_with_message_containing_struct = 307;
  if (this->_internal_has_any_with_message_containing_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_containing_struct_);
  }

  // .google.protobuf.Any top_level_any = 308;
  if (this->_internal_has_top_level_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_any_);
  }

  // .proto_util_converter.testing.StringtoIntMap empty_map = 401;
  if (this->_internal_has_empty_map()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_map_);
  }

  // .proto_util_converter.testing.StringtoIntMap string_to_int = 402;
  if (this->_internal_has_string_to_int()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *string_to_int_);
  }

  // .proto_util_converter.testing.IntToStringMap int_to_string = 403;
  if (this->_internal_has_int_to_string()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *int_to_string_);
  }

  // .proto_util_converter.testing.MixedMap mixed1 = 404;
  if (this->_internal_has_mixed1()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed1_);
  }

  // .proto_util_converter.testing.MixedMap2 mixed2 = 405;
  if (this->_internal_has_mixed2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed2_);
  }

  // .proto_util_converter.testing.MixedMap2 empty_mixed2 = 406;
  if (this->_internal_has_empty_mixed2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_mixed2_);
  }

  // .proto_util_converter.testing.MessageMap map_of_objects = 407;
  if (this->_internal_has_map_of_objects()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_of_objects_);
  }

  // .proto_util_converter.testing.MixedMap mixed_empty = 408;
  if (this->_internal_has_mixed_empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed_empty_);
  }

  // .proto_util_converter.testing.MessageMap message_map_empty = 409;
  if (this->_internal_has_message_map_empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_map_empty_);
  }

  // .proto_util_converter.testing.DoubleValueMessage double_value = 501;
  if (this->_internal_has_double_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_value_);
  }

  // .proto_util_converter.testing.DoubleValueMessage double_value_default = 502;
  if (this->_internal_has_double_value_default()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_value_default_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultValueTestCases::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DefaultValueTestCases::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultValueTestCases::GetClassData() const { return &_class_data_; }

void DefaultValueTestCases::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DefaultValueTestCases *>(to)->MergeFrom(
      static_cast<const DefaultValueTestCases &>(from));
}


void DefaultValueTestCases::MergeFrom(const DefaultValueTestCases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.DefaultValueTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_empty_double()) {
    _internal_mutable_empty_double()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_empty_double());
  }
  if (from._internal_has_double_with_default_value()) {
    _internal_mutable_double_with_default_value()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_double_with_default_value());
  }
  if (from._internal_has_double_with_nondefault_value()) {
    _internal_mutable_double_with_nondefault_value()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_double_with_nondefault_value());
  }
  if (from._internal_has_repeated_double()) {
    _internal_mutable_repeated_double()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_repeated_double());
  }
  if (from._internal_has_nested_message()) {
    _internal_mutable_nested_message()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_nested_message());
  }
  if (from._internal_has_repeated_nested_message()) {
    _internal_mutable_repeated_nested_message()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_repeated_nested_message());
  }
  if (from._internal_has_double_message_with_oneof()) {
    _internal_mutable_double_message_with_oneof()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_double_message_with_oneof());
  }
  if (from._internal_has_empty_struct()) {
    _internal_mutable_empty_struct()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_empty_struct());
  }
  if (from._internal_has_empty_struct2()) {
    _internal_mutable_empty_struct2()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_empty_struct2());
  }
  if (from._internal_has_struct_with_null_value()) {
    _internal_mutable_struct_with_null_value()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_null_value());
  }
  if (from._internal_has_struct_with_values()) {
    _internal_mutable_struct_with_values()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_values());
  }
  if (from._internal_has_struct_with_nested_struct()) {
    _internal_mutable_struct_with_nested_struct()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_nested_struct());
  }
  if (from._internal_has_struct_with_nested_list()) {
    _internal_mutable_struct_with_nested_list()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_nested_list());
  }
  if (from._internal_has_struct_with_list_of_nulls()) {
    _internal_mutable_struct_with_list_of_nulls()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_list_of_nulls());
  }
  if (from._internal_has_struct_with_list_of_lists()) {
    _internal_mutable_struct_with_list_of_lists()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_list_of_lists());
  }
  if (from._internal_has_struct_with_list_of_structs()) {
    _internal_mutable_struct_with_list_of_structs()->::proto_util_converter::testing::StructMessage::MergeFrom(from._internal_struct_with_list_of_structs());
  }
  if (from._internal_has_top_level_struct()) {
    _internal_mutable_top_level_struct()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_top_level_struct());
  }
  if (from._internal_has_value_wrapper_simple()) {
    _internal_mutable_value_wrapper_simple()->::proto_util_converter::testing::ValueMessage::MergeFrom(from._internal_value_wrapper_simple());
  }
  if (from._internal_has_value_wrapper_with_struct()) {
    _internal_mutable_value_wrapper_with_struct()->::proto_util_converter::testing::ValueMessage::MergeFrom(from._internal_value_wrapper_with_struct());
  }
  if (from._internal_has_value_wrapper_with_list()) {
    _internal_mutable_value_wrapper_with_list()->::proto_util_converter::testing::ValueMessage::MergeFrom(from._internal_value_wrapper_with_list());
  }
  if (from._internal_has_list_value_wrapper()) {
    _internal_mutable_list_value_wrapper()->::proto_util_converter::testing::ListValueMessage::MergeFrom(from._internal_list_value_wrapper());
  }
  if (from._internal_has_top_level_value_simple()) {
    _internal_mutable_top_level_value_simple()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_top_level_value_simple());
  }
  if (from._internal_has_top_level_value_with_struct()) {
    _internal_mutable_top_level_value_with_struct()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_top_level_value_with_struct());
  }
  if (from._internal_has_top_level_value_with_list()) {
    _internal_mutable_top_level_value_with_list()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_top_level_value_with_list());
  }
  if (from._internal_has_top_level_listvalue()) {
    _internal_mutable_top_level_listvalue()->::PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_top_level_listvalue());
  }
  if (from._internal_has_empty_any()) {
    _internal_mutable_empty_any()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_empty_any());
  }
  if (from._internal_has_type_only_any()) {
    _internal_mutable_type_only_any()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_type_only_any());
  }
  if (from._internal_has_recursive_any()) {
    _internal_mutable_recursive_any()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_recursive_any());
  }
  if (from._internal_has_any_with_message_value()) {
    _internal_mutable_any_with_message_value()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_any_with_message_value());
  }
  if (from._internal_has_any_with_nested_message()) {
    _internal_mutable_any_with_nested_message()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_any_with_nested_message());
  }
  if (from._internal_has_any_with_message_containing_map()) {
    _internal_mutable_any_with_message_containing_map()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_any_with_message_containing_map());
  }
  if (from._internal_has_any_with_message_containing_struct()) {
    _internal_mutable_any_with_message_containing_struct()->::proto_util_converter::testing::AnyMessage::MergeFrom(from._internal_any_with_message_containing_struct());
  }
  if (from._internal_has_top_level_any()) {
    _internal_mutable_top_level_any()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_top_level_any());
  }
  if (from._internal_has_empty_map()) {
    _internal_mutable_empty_map()->::proto_util_converter::testing::StringtoIntMap::MergeFrom(from._internal_empty_map());
  }
  if (from._internal_has_string_to_int()) {
    _internal_mutable_string_to_int()->::proto_util_converter::testing::StringtoIntMap::MergeFrom(from._internal_string_to_int());
  }
  if (from._internal_has_int_to_string()) {
    _internal_mutable_int_to_string()->::proto_util_converter::testing::IntToStringMap::MergeFrom(from._internal_int_to_string());
  }
  if (from._internal_has_mixed1()) {
    _internal_mutable_mixed1()->::proto_util_converter::testing::MixedMap::MergeFrom(from._internal_mixed1());
  }
  if (from._internal_has_mixed2()) {
    _internal_mutable_mixed2()->::proto_util_converter::testing::MixedMap2::MergeFrom(from._internal_mixed2());
  }
  if (from._internal_has_empty_mixed2()) {
    _internal_mutable_empty_mixed2()->::proto_util_converter::testing::MixedMap2::MergeFrom(from._internal_empty_mixed2());
  }
  if (from._internal_has_map_of_objects()) {
    _internal_mutable_map_of_objects()->::proto_util_converter::testing::MessageMap::MergeFrom(from._internal_map_of_objects());
  }
  if (from._internal_has_mixed_empty()) {
    _internal_mutable_mixed_empty()->::proto_util_converter::testing::MixedMap::MergeFrom(from._internal_mixed_empty());
  }
  if (from._internal_has_message_map_empty()) {
    _internal_mutable_message_map_empty()->::proto_util_converter::testing::MessageMap::MergeFrom(from._internal_message_map_empty());
  }
  if (from._internal_has_double_value()) {
    _internal_mutable_double_value()->::proto_util_converter::testing::DoubleValueMessage::MergeFrom(from._internal_double_value());
  }
  if (from._internal_has_double_value_default()) {
    _internal_mutable_double_value_default()->::proto_util_converter::testing::DoubleValueMessage::MergeFrom(from._internal_double_value_default());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultValueTestCases::CopyFrom(const DefaultValueTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.DefaultValueTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultValueTestCases::IsInitialized() const {
  return true;
}

void DefaultValueTestCases::InternalSwap(DefaultValueTestCases* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DefaultValueTestCases, double_value_default_)
      + sizeof(DefaultValueTestCases::double_value_default_)
      - PROTOBUF_FIELD_OFFSET(DefaultValueTestCases, empty_double_)>(
          reinterpret_cast<char*>(&empty_double_),
          reinterpret_cast<char*>(&other->empty_double_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultValueTestCases::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[0]);
}

// ===================================================================

class DoubleMessage::_Internal {
 public:
  static const ::proto_util_converter::testing::DoubleMessage& nested_message(const DoubleMessage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& double_wrapper(const DoubleMessage* msg);
};

const ::proto_util_converter::testing::DoubleMessage&
DoubleMessage::_Internal::nested_message(const DoubleMessage* msg) {
  return *msg->nested_message_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
DoubleMessage::_Internal::double_wrapper(const DoubleMessage* msg) {
  return *msg->double_wrapper_;
}
void DoubleMessage::clear_double_wrapper() {
  if (GetArenaForAllocation() == nullptr && double_wrapper_ != nullptr) {
    delete double_wrapper_;
  }
  double_wrapper_ = nullptr;
}
DoubleMessage::DoubleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_double_(arena),
  repeated_nested_message_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.DoubleMessage)
}
DoubleMessage::DoubleMessage(const DoubleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repeated_double_(from.repeated_double_),
      repeated_nested_message_(from.repeated_nested_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nested_message()) {
    nested_message_ = new ::proto_util_converter::testing::DoubleMessage(*from.nested_message_);
  } else {
    nested_message_ = nullptr;
  }
  if (from._internal_has_double_wrapper()) {
    double_wrapper_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.double_wrapper_);
  } else {
    double_wrapper_ = nullptr;
  }
  double_value_ = from.double_value_;
  clear_has_value();
  switch (from.value_case()) {
    case kStrValue: {
      _internal_set_str_value(from._internal_str_value());
      break;
    }
    case kNumValue: {
      _internal_set_num_value(from._internal_num_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DoubleMessage)
}

inline void DoubleMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nested_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&double_value_) -
    reinterpret_cast<char*>(&nested_message_)) + sizeof(double_value_));
clear_has_value();
}

DoubleMessage::~DoubleMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.DoubleMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nested_message_;
  if (this != internal_default_instance()) delete double_wrapper_;
  if (has_value()) {
    clear_value();
  }
}

void DoubleMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleMessage::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:proto_util_converter.testing.DoubleMessage)
  switch (value_case()) {
    case kStrValue: {
      value_.str_value_.Destroy();
      break;
    }
    case kNumValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void DoubleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.DoubleMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_double_.Clear();
  repeated_nested_message_.Clear();
  if (GetArenaForAllocation() == nullptr && nested_message_ != nullptr) {
    delete nested_message_;
  }
  nested_message_ = nullptr;
  if (GetArenaForAllocation() == nullptr && double_wrapper_ != nullptr) {
    delete double_wrapper_;
  }
  double_wrapper_ = nullptr;
  double_value_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double double_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double repeated_double = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DoubleMessage nested_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue double_wrapper = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_wrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str_value = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_str_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.DoubleMessage.str_value"));
        } else
          goto handle_unusual;
        continue;
      // int64 num_value = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_num_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.DoubleMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double double_value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_double_value = this->_internal_double_value();
  uint64_t raw_double_value;
  memcpy(&raw_double_value, &tmp_double_value, sizeof(tmp_double_value));
  if (raw_double_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_value(), target);
  }

  // repeated double repeated_double = 2;
  if (this->_internal_repeated_double_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_repeated_double(), target);
  }

  // .proto_util_converter.testing.DoubleMessage nested_message = 3;
  if (this->_internal_has_nested_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nested_message(this),
        _Internal::nested_message(this).GetCachedSize(), target, stream);
  }

  // repeated .proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_nested_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue double_wrapper = 100;
  if (this->_internal_has_double_wrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::double_wrapper(this),
        _Internal::double_wrapper(this).GetCachedSize(), target, stream);
  }

  // string str_value = 112;
  if (_internal_has_str_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_value().data(), static_cast<int>(this->_internal_str_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.DoubleMessage.str_value");
    target = stream->WriteStringMaybeAliased(
        112, this->_internal_str_value(), target);
  }

  // int64 num_value = 113;
  if (_internal_has_num_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(113, this->_internal_num_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.DoubleMessage)
  return target;
}

size_t DoubleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.DoubleMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double repeated_double = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .proto_util_converter.testing.DoubleMessage repeated_nested_message = 4;
  total_size += 1UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto_util_converter.testing.DoubleMessage nested_message = 3;
  if (this->_internal_has_nested_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_message_);
  }

  // .google.protobuf.DoubleValue double_wrapper = 100;
  if (this->_internal_has_double_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double_wrapper_);
  }

  // double double_value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_double_value = this->_internal_double_value();
  uint64_t raw_double_value;
  memcpy(&raw_double_value, &tmp_double_value, sizeof(tmp_double_value));
  if (raw_double_value != 0) {
    total_size += 1 + 8;
  }

  switch (value_case()) {
    // string str_value = 112;
    case kStrValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_value());
      break;
    }
    // int64 num_value = 113;
    case kNumValue: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_num_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DoubleMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleMessage::GetClassData() const { return &_class_data_; }

void DoubleMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DoubleMessage *>(to)->MergeFrom(
      static_cast<const DoubleMessage &>(from));
}


void DoubleMessage::MergeFrom(const DoubleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.DoubleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  if (from._internal_has_nested_message()) {
    _internal_mutable_nested_message()->::proto_util_converter::testing::DoubleMessage::MergeFrom(from._internal_nested_message());
  }
  if (from._internal_has_double_wrapper()) {
    _internal_mutable_double_wrapper()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_double_wrapper());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_double_value = from._internal_double_value();
  uint64_t raw_double_value;
  memcpy(&raw_double_value, &tmp_double_value, sizeof(tmp_double_value));
  if (raw_double_value != 0) {
    _internal_set_double_value(from._internal_double_value());
  }
  switch (from.value_case()) {
    case kStrValue: {
      _internal_set_str_value(from._internal_str_value());
      break;
    }
    case kNumValue: {
      _internal_set_num_value(from._internal_num_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleMessage::CopyFrom(const DoubleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.DoubleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMessage::IsInitialized() const {
  return true;
}

void DoubleMessage::InternalSwap(DoubleMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_nested_message_.InternalSwap(&other->repeated_nested_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleMessage, double_value_)
      + sizeof(DoubleMessage::double_value_)
      - PROTOBUF_FIELD_OFFSET(DoubleMessage, nested_message_)>(
          reinterpret_cast<char*>(&nested_message_),
          reinterpret_cast<char*>(&other->nested_message_));
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[1]);
}

// ===================================================================

class StructMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& struct_(const StructMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
StructMessage::_Internal::struct_(const StructMessage* msg) {
  return *msg->struct__;
}
void StructMessage::clear_struct_() {
  if (GetArenaForAllocation() == nullptr && struct__ != nullptr) {
    delete struct__;
  }
  struct__ = nullptr;
}
StructMessage::StructMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.StructMessage)
}
StructMessage::StructMessage(const StructMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_struct_()) {
    struct__ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.struct__);
  } else {
    struct__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StructMessage)
}

inline void StructMessage::SharedCtor() {
struct__ = nullptr;
}

StructMessage::~StructMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StructMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete struct__;
}

void StructMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StructMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && struct__ != nullptr) {
    delete struct__;
  }
  struct__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StructMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct struct = 1;
  if (this->_internal_has_struct_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::struct_(this),
        _Internal::struct_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StructMessage)
  return target;
}

size_t StructMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StructMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct struct = 1;
  if (this->_internal_has_struct_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructMessage::GetClassData() const { return &_class_data_; }

void StructMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StructMessage *>(to)->MergeFrom(
      static_cast<const StructMessage &>(from));
}


void StructMessage::MergeFrom(const StructMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StructMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_struct_()) {
    _internal_mutable_struct_()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_struct_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructMessage::CopyFrom(const StructMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StructMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructMessage::IsInitialized() const {
  return true;
}

void StructMessage::InternalSwap(StructMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(struct__, other->struct__);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[2]);
}

// ===================================================================

class ValueMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Value& value(const ValueMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Value&
ValueMessage::_Internal::value(const ValueMessage* msg) {
  return *msg->value_;
}
void ValueMessage::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
ValueMessage::ValueMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.ValueMessage)
}
ValueMessage::ValueMessage(const ValueMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.ValueMessage)
}

inline void ValueMessage::SharedCtor() {
value_ = nullptr;
}

ValueMessage::~ValueMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.ValueMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void ValueMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValueMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.ValueMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.ValueMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Value value = 1;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.ValueMessage)
  return target;
}

size_t ValueMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.ValueMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Value value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValueMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueMessage::GetClassData() const { return &_class_data_; }

void ValueMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValueMessage *>(to)->MergeFrom(
      static_cast<const ValueMessage &>(from));
}


void ValueMessage::MergeFrom(const ValueMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.ValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueMessage::CopyFrom(const ValueMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.ValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueMessage::IsInitialized() const {
  return true;
}

void ValueMessage::InternalSwap(ValueMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[3]);
}

// ===================================================================

class ListValueMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::ListValue& shopping_list(const ListValueMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::ListValue&
ListValueMessage::_Internal::shopping_list(const ListValueMessage* msg) {
  return *msg->shopping_list_;
}
void ListValueMessage::clear_shopping_list() {
  if (GetArenaForAllocation() == nullptr && shopping_list_ != nullptr) {
    delete shopping_list_;
  }
  shopping_list_ = nullptr;
}
ListValueMessage::ListValueMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.ListValueMessage)
}
ListValueMessage::ListValueMessage(const ListValueMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shopping_list()) {
    shopping_list_ = new ::PROTOBUF_NAMESPACE_ID::ListValue(*from.shopping_list_);
  } else {
    shopping_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.ListValueMessage)
}

inline void ListValueMessage::SharedCtor() {
shopping_list_ = nullptr;
}

ListValueMessage::~ListValueMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.ListValueMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListValueMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shopping_list_;
}

void ListValueMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListValueMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.ListValueMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && shopping_list_ != nullptr) {
    delete shopping_list_;
  }
  shopping_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListValueMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.ListValue shopping_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shopping_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListValueMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.ListValueMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.ListValue shopping_list = 1;
  if (this->_internal_has_shopping_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shopping_list(this),
        _Internal::shopping_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.ListValueMessage)
  return target;
}

size_t ListValueMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.ListValueMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.ListValue shopping_list = 1;
  if (this->_internal_has_shopping_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shopping_list_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListValueMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListValueMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListValueMessage::GetClassData() const { return &_class_data_; }

void ListValueMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListValueMessage *>(to)->MergeFrom(
      static_cast<const ListValueMessage &>(from));
}


void ListValueMessage::MergeFrom(const ListValueMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.ListValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shopping_list()) {
    _internal_mutable_shopping_list()->::PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_shopping_list());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListValueMessage::CopyFrom(const ListValueMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.ListValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValueMessage::IsInitialized() const {
  return true;
}

void ListValueMessage::InternalSwap(ListValueMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(shopping_list_, other->shopping_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValueMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[4]);
}

// ===================================================================

class RequestMessage::_Internal {
 public:
};

RequestMessage::RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.RequestMessage)
}
RequestMessage::RequestMessage(const RequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.RequestMessage)
}

inline void RequestMessage::SharedCtor() {
content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.RequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.Destroy();
}

void RequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.RequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.RequestMessage.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.RequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.RequestMessage.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.RequestMessage)
  return target;
}

size_t RequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.RequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestMessage::GetClassData() const { return &_class_data_; }

void RequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestMessage *>(to)->MergeFrom(
      static_cast<const RequestMessage &>(from));
}


void RequestMessage::MergeFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.RequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {
  return true;
}

void RequestMessage::InternalSwap(RequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[5]);
}

// ===================================================================

class AnyMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& any(const AnyMessage* msg);
  static const ::proto_util_converter::testing::AnyData& data(const AnyMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
AnyMessage::_Internal::any(const AnyMessage* msg) {
  return *msg->any_;
}
const ::proto_util_converter::testing::AnyData&
AnyMessage::_Internal::data(const AnyMessage* msg) {
  return *msg->data_;
}
void AnyMessage::clear_any() {
  if (GetArenaForAllocation() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
}
AnyMessage::AnyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.AnyMessage)
}
AnyMessage::AnyMessage(const AnyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_any()) {
    any_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.any_);
  } else {
    any_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::proto_util_converter::testing::AnyData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyMessage)
}

inline void AnyMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&any_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&any_)) + sizeof(data_));
}

AnyMessage::~AnyMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete any_;
  if (this != internal_default_instance()) delete data_;
}

void AnyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any any = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->_internal_has_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::any(this),
        _Internal::any(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.AnyData data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyMessage)
  return target;
}

size_t AnyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->_internal_has_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_);
  }

  // .proto_util_converter.testing.AnyData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnyMessage::GetClassData() const { return &_class_data_; }

void AnyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnyMessage *>(to)->MergeFrom(
      static_cast<const AnyMessage &>(from));
}


void AnyMessage::MergeFrom(const AnyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_any()) {
    _internal_mutable_any()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_any());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::proto_util_converter::testing::AnyData::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnyMessage::CopyFrom(const AnyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyMessage::IsInitialized() const {
  return true;
}

void AnyMessage::InternalSwap(AnyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnyMessage, data_)
      + sizeof(AnyMessage::data_)
      - PROTOBUF_FIELD_OFFSET(AnyMessage, any_)>(
          reinterpret_cast<char*>(&any_),
          reinterpret_cast<char*>(&other->any_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[6]);
}

// ===================================================================

AnyData_MapDataEntry_DoNotUse::AnyData_MapDataEntry_DoNotUse() {}
AnyData_MapDataEntry_DoNotUse::AnyData_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AnyData_MapDataEntry_DoNotUse::MergeFrom(const AnyData_MapDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AnyData_MapDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[7]);
}

// ===================================================================

class AnyData::_Internal {
 public:
  static const ::proto_util_converter::testing::AnyData& nested_data(const AnyData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& struct_data(const AnyData* msg);
};

const ::proto_util_converter::testing::AnyData&
AnyData::_Internal::nested_data(const AnyData* msg) {
  return *msg->nested_data_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
AnyData::_Internal::struct_data(const AnyData* msg) {
  return *msg->struct_data_;
}
void AnyData::clear_struct_data() {
  if (GetArenaForAllocation() == nullptr && struct_data_ != nullptr) {
    delete struct_data_;
  }
  struct_data_ = nullptr;
}
AnyData::AnyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msgs_(arena),
  map_data_(arena),
  repeated_data_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AnyData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.AnyData)
}
AnyData::AnyData(const AnyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_),
      repeated_data_(from.repeated_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_data_.MergeFrom(from.map_data_);
  str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    str_.Set(from._internal_str(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_nested_data()) {
    nested_data_ = new ::proto_util_converter::testing::AnyData(*from.nested_data_);
  } else {
    nested_data_ = nullptr;
  }
  if (from._internal_has_struct_data()) {
    struct_data_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.struct_data_);
  } else {
    struct_data_ = nullptr;
  }
  attr_ = from.attr_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyData)
}

inline void AnyData::SharedCtor() {
str_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nested_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attr_) -
    reinterpret_cast<char*>(&nested_data_)) + sizeof(attr_));
}

AnyData::~AnyData() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AnyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_data_.Destruct();
  str_.Destroy();
  if (this != internal_default_instance()) delete nested_data_;
  if (this != internal_default_instance()) delete struct_data_;
}

void AnyData::ArenaDtor(void* object) {
  AnyData* _this = reinterpret_cast< AnyData* >(object);
  _this->map_data_.Destruct();
}
void AnyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  map_data_.Clear();
  repeated_data_.Clear();
  str_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && nested_data_ != nullptr) {
    delete nested_data_;
  }
  nested_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && struct_data_ != nullptr) {
    delete struct_data_;
  }
  struct_data_ = nullptr;
  attr_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.AnyData.str"));
        } else
          goto handle_unusual;
        continue;
      // repeated string msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.AnyData.msgs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyData nested_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> map_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct struct_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.AnyData repeated_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attr = 1;
  if (this->_internal_attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_attr(), target);
  }

  // string str = 2;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.AnyData.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  // repeated string msgs = 3;
  for (int i = 0, n = this->_internal_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_msgs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.AnyData.msgs");
    target = stream->WriteString(3, s, target);
  }

  // .proto_util_converter.testing.AnyData nested_data = 4;
  if (this->_internal_has_nested_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::nested_data(this),
        _Internal::nested_data(this).GetCachedSize(), target, stream);
  }

  // map<string, string> map_data = 7;
  if (!this->_internal_map_data().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AnyData_MapDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.AnyData.MapDataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.AnyData.MapDataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Struct struct_data = 8;
  if (this->_internal_has_struct_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::struct_data(this),
        _Internal::struct_data(this).GetCachedSize(), target, stream);
  }

  // repeated .proto_util_converter.testing.AnyData repeated_data = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyData)
  return target;
}

size_t AnyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string msgs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(msgs_.size());
  for (int i = 0, n = msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      msgs_.Get(i));
  }

  // map<string, string> map_data = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_data().begin();
      it != this->_internal_map_data().end(); ++it) {
    total_size += AnyData_MapDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .proto_util_converter.testing.AnyData repeated_data = 9;
  total_size += 1UL * this->_internal_repeated_data_size();
  for (const auto& msg : this->repeated_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string str = 2;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // .proto_util_converter.testing.AnyData nested_data = 4;
  if (this->_internal_has_nested_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_data_);
  }

  // .google.protobuf.Struct struct_data = 8;
  if (this->_internal_has_struct_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_data_);
  }

  // int32 attr = 1;
  if (this->_internal_attr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnyData::GetClassData() const { return &_class_data_; }

void AnyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnyData *>(to)->MergeFrom(
      static_cast<const AnyData &>(from));
}


void AnyData::MergeFrom(const AnyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  map_data_.MergeFrom(from.map_data_);
  repeated_data_.MergeFrom(from.repeated_data_);
  if (!from._internal_str().empty()) {
    _internal_set_str(from._internal_str());
  }
  if (from._internal_has_nested_data()) {
    _internal_mutable_nested_data()->::proto_util_converter::testing::AnyData::MergeFrom(from._internal_nested_data());
  }
  if (from._internal_has_struct_data()) {
    _internal_mutable_struct_data()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_struct_data());
  }
  if (from._internal_attr() != 0) {
    _internal_set_attr(from._internal_attr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnyData::CopyFrom(const AnyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyData::IsInitialized() const {
  return true;
}

void AnyData::InternalSwap(AnyData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  map_data_.InternalSwap(&other->map_data_);
  repeated_data_.InternalSwap(&other->repeated_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnyData, attr_)
      + sizeof(AnyData::attr_)
      - PROTOBUF_FIELD_OFFSET(AnyData, nested_data_)>(
          reinterpret_cast<char*>(&nested_data_),
          reinterpret_cast<char*>(&other->nested_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[8]);
}

// ===================================================================

StringtoIntMap_MapEntry_DoNotUse::StringtoIntMap_MapEntry_DoNotUse() {}
StringtoIntMap_MapEntry_DoNotUse::StringtoIntMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StringtoIntMap_MapEntry_DoNotUse::MergeFrom(const StringtoIntMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StringtoIntMap_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[9]);
}

// ===================================================================

class StringtoIntMap::_Internal {
 public:
};

StringtoIntMap::StringtoIntMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StringtoIntMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.StringtoIntMap)
}
StringtoIntMap::StringtoIntMap(const StringtoIntMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StringtoIntMap)
}

inline void StringtoIntMap::SharedCtor() {
}

StringtoIntMap::~StringtoIntMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StringtoIntMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StringtoIntMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void StringtoIntMap::ArenaDtor(void* object) {
  StringtoIntMap* _this = reinterpret_cast< StringtoIntMap* >(object);
  _this->map_.Destruct();
}
void StringtoIntMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringtoIntMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StringtoIntMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringtoIntMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int32> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringtoIntMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StringtoIntMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = StringtoIntMap_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.StringtoIntMap.MapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StringtoIntMap)
  return target;
}

size_t StringtoIntMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StringtoIntMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += StringtoIntMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringtoIntMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringtoIntMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringtoIntMap::GetClassData() const { return &_class_data_; }

void StringtoIntMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StringtoIntMap *>(to)->MergeFrom(
      static_cast<const StringtoIntMap &>(from));
}


void StringtoIntMap::MergeFrom(const StringtoIntMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StringtoIntMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringtoIntMap::CopyFrom(const StringtoIntMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StringtoIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringtoIntMap::IsInitialized() const {
  return true;
}

void StringtoIntMap::InternalSwap(StringtoIntMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringtoIntMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[10]);
}

// ===================================================================

IntToStringMap_MapEntry_DoNotUse::IntToStringMap_MapEntry_DoNotUse() {}
IntToStringMap_MapEntry_DoNotUse::IntToStringMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IntToStringMap_MapEntry_DoNotUse::MergeFrom(const IntToStringMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IntToStringMap_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[11]);
}

// ===================================================================

class IntToStringMap::_Internal {
 public:
};

IntToStringMap::IntToStringMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &IntToStringMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.IntToStringMap)
}
IntToStringMap::IntToStringMap(const IntToStringMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.IntToStringMap)
}

inline void IntToStringMap::SharedCtor() {
}

IntToStringMap::~IntToStringMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.IntToStringMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void IntToStringMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void IntToStringMap::ArenaDtor(void* object) {
  IntToStringMap* _this = reinterpret_cast< IntToStringMap* >(object);
  _this->map_.Destruct();
}
void IntToStringMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntToStringMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.IntToStringMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntToStringMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, string> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntToStringMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.IntToStringMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = IntToStringMap_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.IntToStringMap.MapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.IntToStringMap)
  return target;
}

size_t IntToStringMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.IntToStringMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += IntToStringMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntToStringMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntToStringMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntToStringMap::GetClassData() const { return &_class_data_; }

void IntToStringMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntToStringMap *>(to)->MergeFrom(
      static_cast<const IntToStringMap &>(from));
}


void IntToStringMap::MergeFrom(const IntToStringMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.IntToStringMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntToStringMap::CopyFrom(const IntToStringMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.IntToStringMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntToStringMap::IsInitialized() const {
  return true;
}

void IntToStringMap::InternalSwap(IntToStringMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntToStringMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[12]);
}

// ===================================================================

MixedMap_MapEntry_DoNotUse::MixedMap_MapEntry_DoNotUse() {}
MixedMap_MapEntry_DoNotUse::MixedMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MixedMap_MapEntry_DoNotUse::MergeFrom(const MixedMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MixedMap_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[13]);
}

// ===================================================================

class MixedMap::_Internal {
 public:
};

MixedMap::MixedMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MixedMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MixedMap)
}
MixedMap::MixedMap(const MixedMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  int_value_ = from.int_value_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MixedMap)
}

inline void MixedMap::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
int_value_ = 0;
}

MixedMap::~MixedMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MixedMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MixedMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
  msg_.Destroy();
}

void MixedMap::ArenaDtor(void* object) {
  MixedMap* _this = reinterpret_cast< MixedMap* >(object);
  _this->map_.Destruct();
}
void MixedMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixedMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MixedMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  msg_.ClearToEmpty();
  int_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixedMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MixedMap.msg"));
        } else
          goto handle_unusual;
        continue;
      // map<string, float> map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MixedMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MixedMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MixedMap.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // map<string, float> map = 2;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<std::string, float>;
    using WireHelper = MixedMap_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MixedMap.MapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // int32 int_value = 3;
  if (this->_internal_int_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MixedMap)
  return target;
}

size_t MixedMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MixedMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += MixedMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 int_value = 3;
  if (this->_internal_int_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MixedMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MixedMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MixedMap::GetClassData() const { return &_class_data_; }

void MixedMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MixedMap *>(to)->MergeFrom(
      static_cast<const MixedMap &>(from));
}


void MixedMap::MergeFrom(const MixedMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MixedMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_int_value() != 0) {
    _internal_set_int_value(from._internal_int_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MixedMap::CopyFrom(const MixedMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MixedMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixedMap::IsInitialized() const {
  return true;
}

void MixedMap::InternalSwap(MixedMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(int_value_, other->int_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixedMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[14]);
}

// ===================================================================

MixedMap2_MapEntry_DoNotUse::MixedMap2_MapEntry_DoNotUse() {}
MixedMap2_MapEntry_DoNotUse::MixedMap2_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MixedMap2_MapEntry_DoNotUse::MergeFrom(const MixedMap2_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MixedMap2_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[15]);
}

// ===================================================================

class MixedMap2::_Internal {
 public:
};

MixedMap2::MixedMap2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MixedMap2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MixedMap2)
}
MixedMap2::MixedMap2(const MixedMap2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  ee_ = from.ee_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MixedMap2)
}

inline void MixedMap2::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ee_ = 0;
}

MixedMap2::~MixedMap2() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MixedMap2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MixedMap2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
  msg_.Destroy();
}

void MixedMap2::ArenaDtor(void* object) {
  MixedMap2* _this = reinterpret_cast< MixedMap2* >(object);
  _this->map_.Destruct();
}
void MixedMap2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MixedMap2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MixedMap2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  msg_.ClearToEmpty();
  ee_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixedMap2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, bool> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MixedMap2.E ee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ee(static_cast<::proto_util_converter::testing::MixedMap2_E>(val));
        } else
          goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MixedMap2.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MixedMap2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MixedMap2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<int32_t, bool>;
    using WireHelper = MixedMap2_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // .proto_util_converter.testing.MixedMap2.E ee = 2;
  if (this->_internal_ee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ee(), target);
  }

  // string msg = 4;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MixedMap2.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MixedMap2)
  return target;
}

size_t MixedMap2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MixedMap2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += MixedMap2_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string msg = 4;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .proto_util_converter.testing.MixedMap2.E ee = 2;
  if (this->_internal_ee() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MixedMap2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MixedMap2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MixedMap2::GetClassData() const { return &_class_data_; }

void MixedMap2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MixedMap2 *>(to)->MergeFrom(
      static_cast<const MixedMap2 &>(from));
}


void MixedMap2::MergeFrom(const MixedMap2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MixedMap2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_ee() != 0) {
    _internal_set_ee(from._internal_ee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MixedMap2::CopyFrom(const MixedMap2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MixedMap2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixedMap2::IsInitialized() const {
  return true;
}

void MixedMap2::InternalSwap(MixedMap2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(ee_, other->ee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixedMap2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[16]);
}

// ===================================================================

class MessageMap_M::_Internal {
 public:
};

MessageMap_M::MessageMap_M(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MessageMap.M)
}
MessageMap_M::MessageMap_M(const MessageMap_M& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inner_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    inner_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inner_text().empty()) {
    inner_text_.Set(from._internal_inner_text(), 
      GetArenaForAllocation());
  }
  inner_int_ = from.inner_int_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MessageMap.M)
}

inline void MessageMap_M::SharedCtor() {
inner_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  inner_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
inner_int_ = 0;
}

MessageMap_M::~MessageMap_M() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MessageMap.M)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageMap_M::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  inner_text_.Destroy();
}

void MessageMap_M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageMap_M::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MessageMap.M)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_text_.ClearToEmpty();
  inner_int_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageMap_M::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 inner_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          inner_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string inner_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_inner_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MessageMap.M.inner_text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageMap_M::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MessageMap.M)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inner_int = 1;
  if (this->_internal_inner_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_inner_int(), target);
  }

  // string inner_text = 2;
  if (!this->_internal_inner_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inner_text().data(), static_cast<int>(this->_internal_inner_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MessageMap.M.inner_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_inner_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MessageMap.M)
  return target;
}

size_t MessageMap_M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MessageMap.M)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inner_text = 2;
  if (!this->_internal_inner_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inner_text());
  }

  // int32 inner_int = 1;
  if (this->_internal_inner_int() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inner_int());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageMap_M::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageMap_M::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageMap_M::GetClassData() const { return &_class_data_; }

void MessageMap_M::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageMap_M *>(to)->MergeFrom(
      static_cast<const MessageMap_M &>(from));
}


void MessageMap_M::MergeFrom(const MessageMap_M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MessageMap.M)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inner_text().empty()) {
    _internal_set_inner_text(from._internal_inner_text());
  }
  if (from._internal_inner_int() != 0) {
    _internal_set_inner_int(from._internal_inner_int());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageMap_M::CopyFrom(const MessageMap_M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MessageMap.M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMap_M::IsInitialized() const {
  return true;
}

void MessageMap_M::InternalSwap(MessageMap_M* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &inner_text_, lhs_arena,
      &other->inner_text_, rhs_arena
  );
  swap(inner_int_, other->inner_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMap_M::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[17]);
}

// ===================================================================

MessageMap_MapEntry_DoNotUse::MessageMap_MapEntry_DoNotUse() {}
MessageMap_MapEntry_DoNotUse::MessageMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MessageMap_MapEntry_DoNotUse::MergeFrom(const MessageMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MessageMap_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[18]);
}

// ===================================================================

class MessageMap::_Internal {
 public:
};

MessageMap::MessageMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MessageMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MessageMap)
}
MessageMap::MessageMap(const MessageMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MessageMap)
}

inline void MessageMap::SharedCtor() {
}

MessageMap::~MessageMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MessageMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MessageMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void MessageMap::ArenaDtor(void* object) {
  MessageMap* _this = reinterpret_cast< MessageMap* >(object);
  _this->map_.Destruct();
}
void MessageMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MessageMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .proto_util_converter.testing.MessageMap.M> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MessageMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MessageMap.M> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::proto_util_converter::testing::MessageMap_M>;
    using WireHelper = MessageMap_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MessageMap.MapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MessageMap)
  return target;
}

size_t MessageMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MessageMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MessageMap.M> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MessageMap_M >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += MessageMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageMap::GetClassData() const { return &_class_data_; }

void MessageMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageMap *>(to)->MergeFrom(
      static_cast<const MessageMap &>(from));
}


void MessageMap::MergeFrom(const MessageMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MessageMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageMap::CopyFrom(const MessageMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MessageMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMap::IsInitialized() const {
  return true;
}

void MessageMap::InternalSwap(MessageMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[19]);
}

// ===================================================================

class DoubleValueMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& double_(const DoubleValueMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
DoubleValueMessage::_Internal::double_(const DoubleValueMessage* msg) {
  return *msg->double__;
}
void DoubleValueMessage::clear_double_() {
  if (GetArenaForAllocation() == nullptr && double__ != nullptr) {
    delete double__;
  }
  double__ = nullptr;
}
DoubleValueMessage::DoubleValueMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.DoubleValueMessage)
}
DoubleValueMessage::DoubleValueMessage(const DoubleValueMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_double_()) {
    double__ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.double__);
  } else {
    double__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DoubleValueMessage)
}

inline void DoubleValueMessage::SharedCtor() {
double__ = nullptr;
}

DoubleValueMessage::~DoubleValueMessage() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.DoubleValueMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleValueMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete double__;
}

void DoubleValueMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoubleValueMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.DoubleValueMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && double__ != nullptr) {
    delete double__;
  }
  double__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleValueMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleValueMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.DoubleValueMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue double = 1;
  if (this->_internal_has_double_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::double_(this),
        _Internal::double_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.DoubleValueMessage)
  return target;
}

size_t DoubleValueMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.DoubleValueMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue double = 1;
  if (this->_internal_has_double_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *double__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleValueMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DoubleValueMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleValueMessage::GetClassData() const { return &_class_data_; }

void DoubleValueMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DoubleValueMessage *>(to)->MergeFrom(
      static_cast<const DoubleValueMessage &>(from));
}


void DoubleValueMessage::MergeFrom(const DoubleValueMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.DoubleValueMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_double_()) {
    _internal_mutable_double_()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_double_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleValueMessage::CopyFrom(const DoubleValueMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.DoubleValueMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleValueMessage::IsInitialized() const {
  return true;
}

void DoubleValueMessage::InternalSwap(DoubleValueMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(double__, other->double__);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleValueMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fdefault_5fvalue_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DefaultValueTestCases*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::DefaultValueTestCases >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::DefaultValueTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DoubleMessage*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::DoubleMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::DoubleMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StructMessage*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::StructMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::StructMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::ValueMessage*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::ValueMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::ValueMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::ListValueMessage*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::ListValueMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::ListValueMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::RequestMessage*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::RequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::RequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyMessage*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::AnyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::AnyData_MapDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyData*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::AnyData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::StringtoIntMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StringtoIntMap*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::StringtoIntMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::StringtoIntMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::IntToStringMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::IntToStringMap*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::IntToStringMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::IntToStringMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MixedMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MixedMap*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MixedMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MixedMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MixedMap2_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MixedMap2*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MixedMap2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MixedMap2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MessageMap_M*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MessageMap_M >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MessageMap_M >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MessageMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MessageMap*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MessageMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MessageMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DoubleValueMessage*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::DoubleValueMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::DoubleValueMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
