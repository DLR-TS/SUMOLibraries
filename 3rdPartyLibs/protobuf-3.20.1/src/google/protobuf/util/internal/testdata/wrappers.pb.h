// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/wrappers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
namespace proto_util_converter {
namespace testing {
class BoolWrapper;
struct BoolWrapperDefaultTypeInternal;
extern BoolWrapperDefaultTypeInternal _BoolWrapper_default_instance_;
class BytesWrapper;
struct BytesWrapperDefaultTypeInternal;
extern BytesWrapperDefaultTypeInternal _BytesWrapper_default_instance_;
class DoubleWrapper;
struct DoubleWrapperDefaultTypeInternal;
extern DoubleWrapperDefaultTypeInternal _DoubleWrapper_default_instance_;
class FloatWrapper;
struct FloatWrapperDefaultTypeInternal;
extern FloatWrapperDefaultTypeInternal _FloatWrapper_default_instance_;
class Int32Wrapper;
struct Int32WrapperDefaultTypeInternal;
extern Int32WrapperDefaultTypeInternal _Int32Wrapper_default_instance_;
class Int64Wrapper;
struct Int64WrapperDefaultTypeInternal;
extern Int64WrapperDefaultTypeInternal _Int64Wrapper_default_instance_;
class StringWrapper;
struct StringWrapperDefaultTypeInternal;
extern StringWrapperDefaultTypeInternal _StringWrapper_default_instance_;
class UInt32Wrapper;
struct UInt32WrapperDefaultTypeInternal;
extern UInt32WrapperDefaultTypeInternal _UInt32Wrapper_default_instance_;
class UInt64Wrapper;
struct UInt64WrapperDefaultTypeInternal;
extern UInt64WrapperDefaultTypeInternal _UInt64Wrapper_default_instance_;
class WrappersTestCases;
struct WrappersTestCasesDefaultTypeInternal;
extern WrappersTestCasesDefaultTypeInternal _WrappersTestCases_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_util_converter::testing::BoolWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::BoolWrapper>(Arena*);
template<> ::proto_util_converter::testing::BytesWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::BytesWrapper>(Arena*);
template<> ::proto_util_converter::testing::DoubleWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::DoubleWrapper>(Arena*);
template<> ::proto_util_converter::testing::FloatWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::FloatWrapper>(Arena*);
template<> ::proto_util_converter::testing::Int32Wrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::Int32Wrapper>(Arena*);
template<> ::proto_util_converter::testing::Int64Wrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::Int64Wrapper>(Arena*);
template<> ::proto_util_converter::testing::StringWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::StringWrapper>(Arena*);
template<> ::proto_util_converter::testing::UInt32Wrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::UInt32Wrapper>(Arena*);
template<> ::proto_util_converter::testing::UInt64Wrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::UInt64Wrapper>(Arena*);
template<> ::proto_util_converter::testing::WrappersTestCases* Arena::CreateMaybeMessage<::proto_util_converter::testing::WrappersTestCases>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_util_converter {
namespace testing {

// ===================================================================

class WrappersTestCases final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.WrappersTestCases) */ {
 public:
  inline WrappersTestCases() : WrappersTestCases(nullptr) {}
  ~WrappersTestCases() override;
  explicit PROTOBUF_CONSTEXPR WrappersTestCases(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrappersTestCases(const WrappersTestCases& from);
  WrappersTestCases(WrappersTestCases&& from) noexcept
    : WrappersTestCases() {
    *this = ::std::move(from);
  }

  inline WrappersTestCases& operator=(const WrappersTestCases& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappersTestCases& operator=(WrappersTestCases&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrappersTestCases& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrappersTestCases* internal_default_instance() {
    return reinterpret_cast<const WrappersTestCases*>(
               &_WrappersTestCases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WrappersTestCases& a, WrappersTestCases& b) {
    a.Swap(&b);
  }
  inline void Swap(WrappersTestCases* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrappersTestCases* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrappersTestCases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WrappersTestCases>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WrappersTestCases& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WrappersTestCases& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrappersTestCases* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.WrappersTestCases";
  }
  protected:
  explicit WrappersTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleWrapperFieldNumber = 1,
    kFloatWrapperFieldNumber = 2,
    kInt64WrapperFieldNumber = 3,
    kUint64WrapperFieldNumber = 4,
    kInt32WrapperFieldNumber = 5,
    kUint32WrapperFieldNumber = 6,
    kBoolWrapperFieldNumber = 7,
    kStringWrapperFieldNumber = 8,
    kBytesWrapperFieldNumber = 9,
    kDoubleWrapperDefaultFieldNumber = 10,
    kFloatWrapperDefaultFieldNumber = 11,
    kInt64WrapperDefaultFieldNumber = 12,
    kUint64WrapperDefaultFieldNumber = 13,
    kInt32WrapperDefaultFieldNumber = 14,
    kUint32WrapperDefaultFieldNumber = 15,
    kBoolWrapperDefaultFieldNumber = 16,
    kStringWrapperDefaultFieldNumber = 17,
    kBytesWrapperDefaultFieldNumber = 18,
  };
  // .proto_util_converter.testing.DoubleWrapper double_wrapper = 1;
  bool has_double_wrapper() const;
  private:
  bool _internal_has_double_wrapper() const;
  public:
  void clear_double_wrapper();
  const ::proto_util_converter::testing::DoubleWrapper& double_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::DoubleWrapper* release_double_wrapper();
  ::proto_util_converter::testing::DoubleWrapper* mutable_double_wrapper();
  void set_allocated_double_wrapper(::proto_util_converter::testing::DoubleWrapper* double_wrapper);
  private:
  const ::proto_util_converter::testing::DoubleWrapper& _internal_double_wrapper() const;
  ::proto_util_converter::testing::DoubleWrapper* _internal_mutable_double_wrapper();
  public:
  void unsafe_arena_set_allocated_double_wrapper(
      ::proto_util_converter::testing::DoubleWrapper* double_wrapper);
  ::proto_util_converter::testing::DoubleWrapper* unsafe_arena_release_double_wrapper();

  // .proto_util_converter.testing.FloatWrapper float_wrapper = 2;
  bool has_float_wrapper() const;
  private:
  bool _internal_has_float_wrapper() const;
  public:
  void clear_float_wrapper();
  const ::proto_util_converter::testing::FloatWrapper& float_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::FloatWrapper* release_float_wrapper();
  ::proto_util_converter::testing::FloatWrapper* mutable_float_wrapper();
  void set_allocated_float_wrapper(::proto_util_converter::testing::FloatWrapper* float_wrapper);
  private:
  const ::proto_util_converter::testing::FloatWrapper& _internal_float_wrapper() const;
  ::proto_util_converter::testing::FloatWrapper* _internal_mutable_float_wrapper();
  public:
  void unsafe_arena_set_allocated_float_wrapper(
      ::proto_util_converter::testing::FloatWrapper* float_wrapper);
  ::proto_util_converter::testing::FloatWrapper* unsafe_arena_release_float_wrapper();

  // .proto_util_converter.testing.Int64Wrapper int64_wrapper = 3;
  bool has_int64_wrapper() const;
  private:
  bool _internal_has_int64_wrapper() const;
  public:
  void clear_int64_wrapper();
  const ::proto_util_converter::testing::Int64Wrapper& int64_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Int64Wrapper* release_int64_wrapper();
  ::proto_util_converter::testing::Int64Wrapper* mutable_int64_wrapper();
  void set_allocated_int64_wrapper(::proto_util_converter::testing::Int64Wrapper* int64_wrapper);
  private:
  const ::proto_util_converter::testing::Int64Wrapper& _internal_int64_wrapper() const;
  ::proto_util_converter::testing::Int64Wrapper* _internal_mutable_int64_wrapper();
  public:
  void unsafe_arena_set_allocated_int64_wrapper(
      ::proto_util_converter::testing::Int64Wrapper* int64_wrapper);
  ::proto_util_converter::testing::Int64Wrapper* unsafe_arena_release_int64_wrapper();

  // .proto_util_converter.testing.UInt64Wrapper uint64_wrapper = 4;
  bool has_uint64_wrapper() const;
  private:
  bool _internal_has_uint64_wrapper() const;
  public:
  void clear_uint64_wrapper();
  const ::proto_util_converter::testing::UInt64Wrapper& uint64_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::UInt64Wrapper* release_uint64_wrapper();
  ::proto_util_converter::testing::UInt64Wrapper* mutable_uint64_wrapper();
  void set_allocated_uint64_wrapper(::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper);
  private:
  const ::proto_util_converter::testing::UInt64Wrapper& _internal_uint64_wrapper() const;
  ::proto_util_converter::testing::UInt64Wrapper* _internal_mutable_uint64_wrapper();
  public:
  void unsafe_arena_set_allocated_uint64_wrapper(
      ::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper);
  ::proto_util_converter::testing::UInt64Wrapper* unsafe_arena_release_uint64_wrapper();

  // .proto_util_converter.testing.Int32Wrapper int32_wrapper = 5;
  bool has_int32_wrapper() const;
  private:
  bool _internal_has_int32_wrapper() const;
  public:
  void clear_int32_wrapper();
  const ::proto_util_converter::testing::Int32Wrapper& int32_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Int32Wrapper* release_int32_wrapper();
  ::proto_util_converter::testing::Int32Wrapper* mutable_int32_wrapper();
  void set_allocated_int32_wrapper(::proto_util_converter::testing::Int32Wrapper* int32_wrapper);
  private:
  const ::proto_util_converter::testing::Int32Wrapper& _internal_int32_wrapper() const;
  ::proto_util_converter::testing::Int32Wrapper* _internal_mutable_int32_wrapper();
  public:
  void unsafe_arena_set_allocated_int32_wrapper(
      ::proto_util_converter::testing::Int32Wrapper* int32_wrapper);
  ::proto_util_converter::testing::Int32Wrapper* unsafe_arena_release_int32_wrapper();

  // .proto_util_converter.testing.UInt32Wrapper uint32_wrapper = 6;
  bool has_uint32_wrapper() const;
  private:
  bool _internal_has_uint32_wrapper() const;
  public:
  void clear_uint32_wrapper();
  const ::proto_util_converter::testing::UInt32Wrapper& uint32_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::UInt32Wrapper* release_uint32_wrapper();
  ::proto_util_converter::testing::UInt32Wrapper* mutable_uint32_wrapper();
  void set_allocated_uint32_wrapper(::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper);
  private:
  const ::proto_util_converter::testing::UInt32Wrapper& _internal_uint32_wrapper() const;
  ::proto_util_converter::testing::UInt32Wrapper* _internal_mutable_uint32_wrapper();
  public:
  void unsafe_arena_set_allocated_uint32_wrapper(
      ::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper);
  ::proto_util_converter::testing::UInt32Wrapper* unsafe_arena_release_uint32_wrapper();

  // .proto_util_converter.testing.BoolWrapper bool_wrapper = 7;
  bool has_bool_wrapper() const;
  private:
  bool _internal_has_bool_wrapper() const;
  public:
  void clear_bool_wrapper();
  const ::proto_util_converter::testing::BoolWrapper& bool_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::BoolWrapper* release_bool_wrapper();
  ::proto_util_converter::testing::BoolWrapper* mutable_bool_wrapper();
  void set_allocated_bool_wrapper(::proto_util_converter::testing::BoolWrapper* bool_wrapper);
  private:
  const ::proto_util_converter::testing::BoolWrapper& _internal_bool_wrapper() const;
  ::proto_util_converter::testing::BoolWrapper* _internal_mutable_bool_wrapper();
  public:
  void unsafe_arena_set_allocated_bool_wrapper(
      ::proto_util_converter::testing::BoolWrapper* bool_wrapper);
  ::proto_util_converter::testing::BoolWrapper* unsafe_arena_release_bool_wrapper();

  // .proto_util_converter.testing.StringWrapper string_wrapper = 8;
  bool has_string_wrapper() const;
  private:
  bool _internal_has_string_wrapper() const;
  public:
  void clear_string_wrapper();
  const ::proto_util_converter::testing::StringWrapper& string_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::StringWrapper* release_string_wrapper();
  ::proto_util_converter::testing::StringWrapper* mutable_string_wrapper();
  void set_allocated_string_wrapper(::proto_util_converter::testing::StringWrapper* string_wrapper);
  private:
  const ::proto_util_converter::testing::StringWrapper& _internal_string_wrapper() const;
  ::proto_util_converter::testing::StringWrapper* _internal_mutable_string_wrapper();
  public:
  void unsafe_arena_set_allocated_string_wrapper(
      ::proto_util_converter::testing::StringWrapper* string_wrapper);
  ::proto_util_converter::testing::StringWrapper* unsafe_arena_release_string_wrapper();

  // .proto_util_converter.testing.BytesWrapper bytes_wrapper = 9;
  bool has_bytes_wrapper() const;
  private:
  bool _internal_has_bytes_wrapper() const;
  public:
  void clear_bytes_wrapper();
  const ::proto_util_converter::testing::BytesWrapper& bytes_wrapper() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::BytesWrapper* release_bytes_wrapper();
  ::proto_util_converter::testing::BytesWrapper* mutable_bytes_wrapper();
  void set_allocated_bytes_wrapper(::proto_util_converter::testing::BytesWrapper* bytes_wrapper);
  private:
  const ::proto_util_converter::testing::BytesWrapper& _internal_bytes_wrapper() const;
  ::proto_util_converter::testing::BytesWrapper* _internal_mutable_bytes_wrapper();
  public:
  void unsafe_arena_set_allocated_bytes_wrapper(
      ::proto_util_converter::testing::BytesWrapper* bytes_wrapper);
  ::proto_util_converter::testing::BytesWrapper* unsafe_arena_release_bytes_wrapper();

  // .proto_util_converter.testing.DoubleWrapper double_wrapper_default = 10;
  bool has_double_wrapper_default() const;
  private:
  bool _internal_has_double_wrapper_default() const;
  public:
  void clear_double_wrapper_default();
  const ::proto_util_converter::testing::DoubleWrapper& double_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::DoubleWrapper* release_double_wrapper_default();
  ::proto_util_converter::testing::DoubleWrapper* mutable_double_wrapper_default();
  void set_allocated_double_wrapper_default(::proto_util_converter::testing::DoubleWrapper* double_wrapper_default);
  private:
  const ::proto_util_converter::testing::DoubleWrapper& _internal_double_wrapper_default() const;
  ::proto_util_converter::testing::DoubleWrapper* _internal_mutable_double_wrapper_default();
  public:
  void unsafe_arena_set_allocated_double_wrapper_default(
      ::proto_util_converter::testing::DoubleWrapper* double_wrapper_default);
  ::proto_util_converter::testing::DoubleWrapper* unsafe_arena_release_double_wrapper_default();

  // .proto_util_converter.testing.FloatWrapper float_wrapper_default = 11;
  bool has_float_wrapper_default() const;
  private:
  bool _internal_has_float_wrapper_default() const;
  public:
  void clear_float_wrapper_default();
  const ::proto_util_converter::testing::FloatWrapper& float_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::FloatWrapper* release_float_wrapper_default();
  ::proto_util_converter::testing::FloatWrapper* mutable_float_wrapper_default();
  void set_allocated_float_wrapper_default(::proto_util_converter::testing::FloatWrapper* float_wrapper_default);
  private:
  const ::proto_util_converter::testing::FloatWrapper& _internal_float_wrapper_default() const;
  ::proto_util_converter::testing::FloatWrapper* _internal_mutable_float_wrapper_default();
  public:
  void unsafe_arena_set_allocated_float_wrapper_default(
      ::proto_util_converter::testing::FloatWrapper* float_wrapper_default);
  ::proto_util_converter::testing::FloatWrapper* unsafe_arena_release_float_wrapper_default();

  // .proto_util_converter.testing.Int64Wrapper int64_wrapper_default = 12;
  bool has_int64_wrapper_default() const;
  private:
  bool _internal_has_int64_wrapper_default() const;
  public:
  void clear_int64_wrapper_default();
  const ::proto_util_converter::testing::Int64Wrapper& int64_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Int64Wrapper* release_int64_wrapper_default();
  ::proto_util_converter::testing::Int64Wrapper* mutable_int64_wrapper_default();
  void set_allocated_int64_wrapper_default(::proto_util_converter::testing::Int64Wrapper* int64_wrapper_default);
  private:
  const ::proto_util_converter::testing::Int64Wrapper& _internal_int64_wrapper_default() const;
  ::proto_util_converter::testing::Int64Wrapper* _internal_mutable_int64_wrapper_default();
  public:
  void unsafe_arena_set_allocated_int64_wrapper_default(
      ::proto_util_converter::testing::Int64Wrapper* int64_wrapper_default);
  ::proto_util_converter::testing::Int64Wrapper* unsafe_arena_release_int64_wrapper_default();

  // .proto_util_converter.testing.UInt64Wrapper uint64_wrapper_default = 13;
  bool has_uint64_wrapper_default() const;
  private:
  bool _internal_has_uint64_wrapper_default() const;
  public:
  void clear_uint64_wrapper_default();
  const ::proto_util_converter::testing::UInt64Wrapper& uint64_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::UInt64Wrapper* release_uint64_wrapper_default();
  ::proto_util_converter::testing::UInt64Wrapper* mutable_uint64_wrapper_default();
  void set_allocated_uint64_wrapper_default(::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper_default);
  private:
  const ::proto_util_converter::testing::UInt64Wrapper& _internal_uint64_wrapper_default() const;
  ::proto_util_converter::testing::UInt64Wrapper* _internal_mutable_uint64_wrapper_default();
  public:
  void unsafe_arena_set_allocated_uint64_wrapper_default(
      ::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper_default);
  ::proto_util_converter::testing::UInt64Wrapper* unsafe_arena_release_uint64_wrapper_default();

  // .proto_util_converter.testing.Int32Wrapper int32_wrapper_default = 14;
  bool has_int32_wrapper_default() const;
  private:
  bool _internal_has_int32_wrapper_default() const;
  public:
  void clear_int32_wrapper_default();
  const ::proto_util_converter::testing::Int32Wrapper& int32_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Int32Wrapper* release_int32_wrapper_default();
  ::proto_util_converter::testing::Int32Wrapper* mutable_int32_wrapper_default();
  void set_allocated_int32_wrapper_default(::proto_util_converter::testing::Int32Wrapper* int32_wrapper_default);
  private:
  const ::proto_util_converter::testing::Int32Wrapper& _internal_int32_wrapper_default() const;
  ::proto_util_converter::testing::Int32Wrapper* _internal_mutable_int32_wrapper_default();
  public:
  void unsafe_arena_set_allocated_int32_wrapper_default(
      ::proto_util_converter::testing::Int32Wrapper* int32_wrapper_default);
  ::proto_util_converter::testing::Int32Wrapper* unsafe_arena_release_int32_wrapper_default();

  // .proto_util_converter.testing.UInt32Wrapper uint32_wrapper_default = 15;
  bool has_uint32_wrapper_default() const;
  private:
  bool _internal_has_uint32_wrapper_default() const;
  public:
  void clear_uint32_wrapper_default();
  const ::proto_util_converter::testing::UInt32Wrapper& uint32_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::UInt32Wrapper* release_uint32_wrapper_default();
  ::proto_util_converter::testing::UInt32Wrapper* mutable_uint32_wrapper_default();
  void set_allocated_uint32_wrapper_default(::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper_default);
  private:
  const ::proto_util_converter::testing::UInt32Wrapper& _internal_uint32_wrapper_default() const;
  ::proto_util_converter::testing::UInt32Wrapper* _internal_mutable_uint32_wrapper_default();
  public:
  void unsafe_arena_set_allocated_uint32_wrapper_default(
      ::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper_default);
  ::proto_util_converter::testing::UInt32Wrapper* unsafe_arena_release_uint32_wrapper_default();

  // .proto_util_converter.testing.BoolWrapper bool_wrapper_default = 16;
  bool has_bool_wrapper_default() const;
  private:
  bool _internal_has_bool_wrapper_default() const;
  public:
  void clear_bool_wrapper_default();
  const ::proto_util_converter::testing::BoolWrapper& bool_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::BoolWrapper* release_bool_wrapper_default();
  ::proto_util_converter::testing::BoolWrapper* mutable_bool_wrapper_default();
  void set_allocated_bool_wrapper_default(::proto_util_converter::testing::BoolWrapper* bool_wrapper_default);
  private:
  const ::proto_util_converter::testing::BoolWrapper& _internal_bool_wrapper_default() const;
  ::proto_util_converter::testing::BoolWrapper* _internal_mutable_bool_wrapper_default();
  public:
  void unsafe_arena_set_allocated_bool_wrapper_default(
      ::proto_util_converter::testing::BoolWrapper* bool_wrapper_default);
  ::proto_util_converter::testing::BoolWrapper* unsafe_arena_release_bool_wrapper_default();

  // .proto_util_converter.testing.StringWrapper string_wrapper_default = 17;
  bool has_string_wrapper_default() const;
  private:
  bool _internal_has_string_wrapper_default() const;
  public:
  void clear_string_wrapper_default();
  const ::proto_util_converter::testing::StringWrapper& string_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::StringWrapper* release_string_wrapper_default();
  ::proto_util_converter::testing::StringWrapper* mutable_string_wrapper_default();
  void set_allocated_string_wrapper_default(::proto_util_converter::testing::StringWrapper* string_wrapper_default);
  private:
  const ::proto_util_converter::testing::StringWrapper& _internal_string_wrapper_default() const;
  ::proto_util_converter::testing::StringWrapper* _internal_mutable_string_wrapper_default();
  public:
  void unsafe_arena_set_allocated_string_wrapper_default(
      ::proto_util_converter::testing::StringWrapper* string_wrapper_default);
  ::proto_util_converter::testing::StringWrapper* unsafe_arena_release_string_wrapper_default();

  // .proto_util_converter.testing.BytesWrapper bytes_wrapper_default = 18;
  bool has_bytes_wrapper_default() const;
  private:
  bool _internal_has_bytes_wrapper_default() const;
  public:
  void clear_bytes_wrapper_default();
  const ::proto_util_converter::testing::BytesWrapper& bytes_wrapper_default() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::BytesWrapper* release_bytes_wrapper_default();
  ::proto_util_converter::testing::BytesWrapper* mutable_bytes_wrapper_default();
  void set_allocated_bytes_wrapper_default(::proto_util_converter::testing::BytesWrapper* bytes_wrapper_default);
  private:
  const ::proto_util_converter::testing::BytesWrapper& _internal_bytes_wrapper_default() const;
  ::proto_util_converter::testing::BytesWrapper* _internal_mutable_bytes_wrapper_default();
  public:
  void unsafe_arena_set_allocated_bytes_wrapper_default(
      ::proto_util_converter::testing::BytesWrapper* bytes_wrapper_default);
  ::proto_util_converter::testing::BytesWrapper* unsafe_arena_release_bytes_wrapper_default();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.WrappersTestCases)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto_util_converter::testing::DoubleWrapper* double_wrapper_;
  ::proto_util_converter::testing::FloatWrapper* float_wrapper_;
  ::proto_util_converter::testing::Int64Wrapper* int64_wrapper_;
  ::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper_;
  ::proto_util_converter::testing::Int32Wrapper* int32_wrapper_;
  ::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper_;
  ::proto_util_converter::testing::BoolWrapper* bool_wrapper_;
  ::proto_util_converter::testing::StringWrapper* string_wrapper_;
  ::proto_util_converter::testing::BytesWrapper* bytes_wrapper_;
  ::proto_util_converter::testing::DoubleWrapper* double_wrapper_default_;
  ::proto_util_converter::testing::FloatWrapper* float_wrapper_default_;
  ::proto_util_converter::testing::Int64Wrapper* int64_wrapper_default_;
  ::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper_default_;
  ::proto_util_converter::testing::Int32Wrapper* int32_wrapper_default_;
  ::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper_default_;
  ::proto_util_converter::testing::BoolWrapper* bool_wrapper_default_;
  ::proto_util_converter::testing::StringWrapper* string_wrapper_default_;
  ::proto_util_converter::testing::BytesWrapper* bytes_wrapper_default_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class DoubleWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.DoubleWrapper) */ {
 public:
  inline DoubleWrapper() : DoubleWrapper(nullptr) {}
  ~DoubleWrapper() override;
  explicit PROTOBUF_CONSTEXPR DoubleWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleWrapper(const DoubleWrapper& from);
  DoubleWrapper(DoubleWrapper&& from) noexcept
    : DoubleWrapper() {
    *this = ::std::move(from);
  }

  inline DoubleWrapper& operator=(const DoubleWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleWrapper& operator=(DoubleWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoubleWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleWrapper* internal_default_instance() {
    return reinterpret_cast<const DoubleWrapper*>(
               &_DoubleWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DoubleWrapper& a, DoubleWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoubleWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoubleWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoubleWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DoubleWrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.DoubleWrapper";
  }
  protected:
  explicit DoubleWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleFieldNumber = 1,
  };
  // .google.protobuf.DoubleValue double = 1;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& double_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_double_();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_double_();
  void set_allocated_double_(::PROTOBUF_NAMESPACE_ID::DoubleValue* double_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_double_() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_double_();
  public:
  void unsafe_arena_set_allocated_double_(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* double_);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_double_();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.DoubleWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* double__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class FloatWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.FloatWrapper) */ {
 public:
  inline FloatWrapper() : FloatWrapper(nullptr) {}
  ~FloatWrapper() override;
  explicit PROTOBUF_CONSTEXPR FloatWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatWrapper(const FloatWrapper& from);
  FloatWrapper(FloatWrapper&& from) noexcept
    : FloatWrapper() {
    *this = ::std::move(from);
  }

  inline FloatWrapper& operator=(const FloatWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatWrapper& operator=(FloatWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatWrapper* internal_default_instance() {
    return reinterpret_cast<const FloatWrapper*>(
               &_FloatWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FloatWrapper& a, FloatWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatWrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.FloatWrapper";
  }
  protected:
  explicit FloatWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatFieldNumber = 1,
  };
  // .google.protobuf.FloatValue float = 1;
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& float_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FloatValue* release_float_();
  ::PROTOBUF_NAMESPACE_ID::FloatValue* mutable_float_();
  void set_allocated_float_(::PROTOBUF_NAMESPACE_ID::FloatValue* float_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FloatValue& _internal_float_() const;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_float_();
  public:
  void unsafe_arena_set_allocated_float_(
      ::PROTOBUF_NAMESPACE_ID::FloatValue* float_);
  ::PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_float_();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.FloatWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::FloatValue* float__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class Int64Wrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Int64Wrapper) */ {
 public:
  inline Int64Wrapper() : Int64Wrapper(nullptr) {}
  ~Int64Wrapper() override;
  explicit PROTOBUF_CONSTEXPR Int64Wrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Wrapper(const Int64Wrapper& from);
  Int64Wrapper(Int64Wrapper&& from) noexcept
    : Int64Wrapper() {
    *this = ::std::move(from);
  }

  inline Int64Wrapper& operator=(const Int64Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Wrapper& operator=(Int64Wrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Wrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Wrapper* internal_default_instance() {
    return reinterpret_cast<const Int64Wrapper*>(
               &_Int64Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Int64Wrapper& a, Int64Wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Wrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Wrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int64Wrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int64Wrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Wrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Int64Wrapper";
  }
  protected:
  explicit Int64Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt64FieldNumber = 1,
  };
  // .google.protobuf.Int64Value int64 = 1;
  bool has_int64() const;
  private:
  bool _internal_has_int64() const;
  public:
  void clear_int64();
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& int64() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int64Value* release_int64();
  ::PROTOBUF_NAMESPACE_ID::Int64Value* mutable_int64();
  void set_allocated_int64(::PROTOBUF_NAMESPACE_ID::Int64Value* int64);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int64Value& _internal_int64() const;
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_int64();
  public:
  void unsafe_arena_set_allocated_int64(
      ::PROTOBUF_NAMESPACE_ID::Int64Value* int64);
  ::PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_int64();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Int64Wrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Int64Value* int64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class UInt64Wrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.UInt64Wrapper) */ {
 public:
  inline UInt64Wrapper() : UInt64Wrapper(nullptr) {}
  ~UInt64Wrapper() override;
  explicit PROTOBUF_CONSTEXPR UInt64Wrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UInt64Wrapper(const UInt64Wrapper& from);
  UInt64Wrapper(UInt64Wrapper&& from) noexcept
    : UInt64Wrapper() {
    *this = ::std::move(from);
  }

  inline UInt64Wrapper& operator=(const UInt64Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt64Wrapper& operator=(UInt64Wrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UInt64Wrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const UInt64Wrapper* internal_default_instance() {
    return reinterpret_cast<const UInt64Wrapper*>(
               &_UInt64Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UInt64Wrapper& a, UInt64Wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt64Wrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt64Wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UInt64Wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UInt64Wrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UInt64Wrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UInt64Wrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt64Wrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.UInt64Wrapper";
  }
  protected:
  explicit UInt64Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUint64FieldNumber = 1,
  };
  // .google.protobuf.UInt64Value uint64 = 1;
  bool has_uint64() const;
  private:
  bool _internal_has_uint64() const;
  public:
  void clear_uint64();
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& uint64() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt64Value* release_uint64();
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_uint64();
  void set_allocated_uint64(::PROTOBUF_NAMESPACE_ID::UInt64Value* uint64);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_uint64();
  public:
  void unsafe_arena_set_allocated_uint64(
      ::PROTOBUF_NAMESPACE_ID::UInt64Value* uint64);
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_uint64();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.UInt64Wrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* uint64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class Int32Wrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Int32Wrapper) */ {
 public:
  inline Int32Wrapper() : Int32Wrapper(nullptr) {}
  ~Int32Wrapper() override;
  explicit PROTOBUF_CONSTEXPR Int32Wrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int32Wrapper(const Int32Wrapper& from);
  Int32Wrapper(Int32Wrapper&& from) noexcept
    : Int32Wrapper() {
    *this = ::std::move(from);
  }

  inline Int32Wrapper& operator=(const Int32Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Wrapper& operator=(Int32Wrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int32Wrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int32Wrapper* internal_default_instance() {
    return reinterpret_cast<const Int32Wrapper*>(
               &_Int32Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Int32Wrapper& a, Int32Wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Wrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int32Wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int32Wrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int32Wrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int32Wrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Wrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Int32Wrapper";
  }
  protected:
  explicit Int32Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt32FieldNumber = 1,
  };
  // .google.protobuf.Int32Value int32 = 1;
  bool has_int32() const;
  private:
  bool _internal_has_int32() const;
  public:
  void clear_int32();
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& int32() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Int32Value* release_int32();
  ::PROTOBUF_NAMESPACE_ID::Int32Value* mutable_int32();
  void set_allocated_int32(::PROTOBUF_NAMESPACE_ID::Int32Value* int32);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Int32Value& _internal_int32() const;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_int32();
  public:
  void unsafe_arena_set_allocated_int32(
      ::PROTOBUF_NAMESPACE_ID::Int32Value* int32);
  ::PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_int32();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Int32Wrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Int32Value* int32_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class UInt32Wrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.UInt32Wrapper) */ {
 public:
  inline UInt32Wrapper() : UInt32Wrapper(nullptr) {}
  ~UInt32Wrapper() override;
  explicit PROTOBUF_CONSTEXPR UInt32Wrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UInt32Wrapper(const UInt32Wrapper& from);
  UInt32Wrapper(UInt32Wrapper&& from) noexcept
    : UInt32Wrapper() {
    *this = ::std::move(from);
  }

  inline UInt32Wrapper& operator=(const UInt32Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt32Wrapper& operator=(UInt32Wrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UInt32Wrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const UInt32Wrapper* internal_default_instance() {
    return reinterpret_cast<const UInt32Wrapper*>(
               &_UInt32Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UInt32Wrapper& a, UInt32Wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt32Wrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt32Wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UInt32Wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UInt32Wrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UInt32Wrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UInt32Wrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt32Wrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.UInt32Wrapper";
  }
  protected:
  explicit UInt32Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUint32FieldNumber = 1,
  };
  // .google.protobuf.UInt32Value uint32 = 1;
  bool has_uint32() const;
  private:
  bool _internal_has_uint32() const;
  public:
  void clear_uint32();
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& uint32() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::UInt32Value* release_uint32();
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_uint32();
  void set_allocated_uint32(::PROTOBUF_NAMESPACE_ID::UInt32Value* uint32);
  private:
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_uint32();
  public:
  void unsafe_arena_set_allocated_uint32(
      ::PROTOBUF_NAMESPACE_ID::UInt32Value* uint32);
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_uint32();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.UInt32Wrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* uint32_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class BoolWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.BoolWrapper) */ {
 public:
  inline BoolWrapper() : BoolWrapper(nullptr) {}
  ~BoolWrapper() override;
  explicit PROTOBUF_CONSTEXPR BoolWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolWrapper(const BoolWrapper& from);
  BoolWrapper(BoolWrapper&& from) noexcept
    : BoolWrapper() {
    *this = ::std::move(from);
  }

  inline BoolWrapper& operator=(const BoolWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolWrapper& operator=(BoolWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolWrapper* internal_default_instance() {
    return reinterpret_cast<const BoolWrapper*>(
               &_BoolWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BoolWrapper& a, BoolWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolWrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.BoolWrapper";
  }
  protected:
  explicit BoolWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolFieldNumber = 1,
  };
  // .google.protobuf.BoolValue bool = 1;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& bool_() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_bool_();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_bool_();
  void set_allocated_bool_(::PROTOBUF_NAMESPACE_ID::BoolValue* bool_);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_bool_() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_bool_();
  public:
  void unsafe_arena_set_allocated_bool_(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* bool_);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_bool_();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.BoolWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* bool__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class StringWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.StringWrapper) */ {
 public:
  inline StringWrapper() : StringWrapper(nullptr) {}
  ~StringWrapper() override;
  explicit PROTOBUF_CONSTEXPR StringWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringWrapper(const StringWrapper& from);
  StringWrapper(StringWrapper&& from) noexcept
    : StringWrapper() {
    *this = ::std::move(from);
  }

  inline StringWrapper& operator=(const StringWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringWrapper& operator=(StringWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringWrapper* internal_default_instance() {
    return reinterpret_cast<const StringWrapper*>(
               &_StringWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StringWrapper& a, StringWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(StringWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringWrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.StringWrapper";
  }
  protected:
  explicit StringWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 1,
  };
  // .google.protobuf.StringValue string = 1;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::PROTOBUF_NAMESPACE_ID::StringValue& string() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::StringValue* release_string();
  ::PROTOBUF_NAMESPACE_ID::StringValue* mutable_string();
  void set_allocated_string(::PROTOBUF_NAMESPACE_ID::StringValue* string);
  private:
  const ::PROTOBUF_NAMESPACE_ID::StringValue& _internal_string() const;
  ::PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::PROTOBUF_NAMESPACE_ID::StringValue* string);
  ::PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_string();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.StringWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::StringValue* string_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// -------------------------------------------------------------------

class BytesWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.BytesWrapper) */ {
 public:
  inline BytesWrapper() : BytesWrapper(nullptr) {}
  ~BytesWrapper() override;
  explicit PROTOBUF_CONSTEXPR BytesWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BytesWrapper(const BytesWrapper& from);
  BytesWrapper(BytesWrapper&& from) noexcept
    : BytesWrapper() {
    *this = ::std::move(from);
  }

  inline BytesWrapper& operator=(const BytesWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline BytesWrapper& operator=(BytesWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BytesWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const BytesWrapper* internal_default_instance() {
    return reinterpret_cast<const BytesWrapper*>(
               &_BytesWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BytesWrapper& a, BytesWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(BytesWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BytesWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BytesWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BytesWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BytesWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BytesWrapper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytesWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.BytesWrapper";
  }
  protected:
  explicit BytesWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 1,
  };
  // .google.protobuf.BytesValue bytes = 1;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const ::PROTOBUF_NAMESPACE_ID::BytesValue& bytes() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BytesValue* release_bytes();
  ::PROTOBUF_NAMESPACE_ID::BytesValue* mutable_bytes();
  void set_allocated_bytes(::PROTOBUF_NAMESPACE_ID::BytesValue* bytes);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BytesValue& _internal_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::BytesValue* _internal_mutable_bytes();
  public:
  void unsafe_arena_set_allocated_bytes(
      ::PROTOBUF_NAMESPACE_ID::BytesValue* bytes);
  ::PROTOBUF_NAMESPACE_ID::BytesValue* unsafe_arena_release_bytes();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.BytesWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BytesValue* bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WrappersTestCases

// .proto_util_converter.testing.DoubleWrapper double_wrapper = 1;
inline bool WrappersTestCases::_internal_has_double_wrapper() const {
  return this != internal_default_instance() && double_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_double_wrapper() const {
  return _internal_has_double_wrapper();
}
inline void WrappersTestCases::clear_double_wrapper() {
  if (GetArenaForAllocation() == nullptr && double_wrapper_ != nullptr) {
    delete double_wrapper_;
  }
  double_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleWrapper& WrappersTestCases::_internal_double_wrapper() const {
  const ::proto_util_converter::testing::DoubleWrapper* p = double_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::DoubleWrapper&>(
      ::proto_util_converter::testing::_DoubleWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleWrapper& WrappersTestCases::double_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.double_wrapper)
  return _internal_double_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_double_wrapper(
    ::proto_util_converter::testing::DoubleWrapper* double_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_wrapper_);
  }
  double_wrapper_ = double_wrapper;
  if (double_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.double_wrapper)
}
inline ::proto_util_converter::testing::DoubleWrapper* WrappersTestCases::release_double_wrapper() {
  
  ::proto_util_converter::testing::DoubleWrapper* temp = double_wrapper_;
  double_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::DoubleWrapper* WrappersTestCases::unsafe_arena_release_double_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.double_wrapper)
  
  ::proto_util_converter::testing::DoubleWrapper* temp = double_wrapper_;
  double_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleWrapper* WrappersTestCases::_internal_mutable_double_wrapper() {
  
  if (double_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleWrapper>(GetArenaForAllocation());
    double_wrapper_ = p;
  }
  return double_wrapper_;
}
inline ::proto_util_converter::testing::DoubleWrapper* WrappersTestCases::mutable_double_wrapper() {
  ::proto_util_converter::testing::DoubleWrapper* _msg = _internal_mutable_double_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.double_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_double_wrapper(::proto_util_converter::testing::DoubleWrapper* double_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete double_wrapper_;
  }
  if (double_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(double_wrapper);
    if (message_arena != submessage_arena) {
      double_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  double_wrapper_ = double_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.double_wrapper)
}

// .proto_util_converter.testing.FloatWrapper float_wrapper = 2;
inline bool WrappersTestCases::_internal_has_float_wrapper() const {
  return this != internal_default_instance() && float_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_float_wrapper() const {
  return _internal_has_float_wrapper();
}
inline void WrappersTestCases::clear_float_wrapper() {
  if (GetArenaForAllocation() == nullptr && float_wrapper_ != nullptr) {
    delete float_wrapper_;
  }
  float_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::FloatWrapper& WrappersTestCases::_internal_float_wrapper() const {
  const ::proto_util_converter::testing::FloatWrapper* p = float_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::FloatWrapper&>(
      ::proto_util_converter::testing::_FloatWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FloatWrapper& WrappersTestCases::float_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.float_wrapper)
  return _internal_float_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_float_wrapper(
    ::proto_util_converter::testing::FloatWrapper* float_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_wrapper_);
  }
  float_wrapper_ = float_wrapper;
  if (float_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.float_wrapper)
}
inline ::proto_util_converter::testing::FloatWrapper* WrappersTestCases::release_float_wrapper() {
  
  ::proto_util_converter::testing::FloatWrapper* temp = float_wrapper_;
  float_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::FloatWrapper* WrappersTestCases::unsafe_arena_release_float_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.float_wrapper)
  
  ::proto_util_converter::testing::FloatWrapper* temp = float_wrapper_;
  float_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FloatWrapper* WrappersTestCases::_internal_mutable_float_wrapper() {
  
  if (float_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FloatWrapper>(GetArenaForAllocation());
    float_wrapper_ = p;
  }
  return float_wrapper_;
}
inline ::proto_util_converter::testing::FloatWrapper* WrappersTestCases::mutable_float_wrapper() {
  ::proto_util_converter::testing::FloatWrapper* _msg = _internal_mutable_float_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.float_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_float_wrapper(::proto_util_converter::testing::FloatWrapper* float_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete float_wrapper_;
  }
  if (float_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(float_wrapper);
    if (message_arena != submessage_arena) {
      float_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  float_wrapper_ = float_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.float_wrapper)
}

// .proto_util_converter.testing.Int64Wrapper int64_wrapper = 3;
inline bool WrappersTestCases::_internal_has_int64_wrapper() const {
  return this != internal_default_instance() && int64_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_int64_wrapper() const {
  return _internal_has_int64_wrapper();
}
inline void WrappersTestCases::clear_int64_wrapper() {
  if (GetArenaForAllocation() == nullptr && int64_wrapper_ != nullptr) {
    delete int64_wrapper_;
  }
  int64_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::Int64Wrapper& WrappersTestCases::_internal_int64_wrapper() const {
  const ::proto_util_converter::testing::Int64Wrapper* p = int64_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Int64Wrapper&>(
      ::proto_util_converter::testing::_Int64Wrapper_default_instance_);
}
inline const ::proto_util_converter::testing::Int64Wrapper& WrappersTestCases::int64_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.int64_wrapper)
  return _internal_int64_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_int64_wrapper(
    ::proto_util_converter::testing::Int64Wrapper* int64_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int64_wrapper_);
  }
  int64_wrapper_ = int64_wrapper;
  if (int64_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.int64_wrapper)
}
inline ::proto_util_converter::testing::Int64Wrapper* WrappersTestCases::release_int64_wrapper() {
  
  ::proto_util_converter::testing::Int64Wrapper* temp = int64_wrapper_;
  int64_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Int64Wrapper* WrappersTestCases::unsafe_arena_release_int64_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.int64_wrapper)
  
  ::proto_util_converter::testing::Int64Wrapper* temp = int64_wrapper_;
  int64_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Int64Wrapper* WrappersTestCases::_internal_mutable_int64_wrapper() {
  
  if (int64_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Int64Wrapper>(GetArenaForAllocation());
    int64_wrapper_ = p;
  }
  return int64_wrapper_;
}
inline ::proto_util_converter::testing::Int64Wrapper* WrappersTestCases::mutable_int64_wrapper() {
  ::proto_util_converter::testing::Int64Wrapper* _msg = _internal_mutable_int64_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.int64_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_int64_wrapper(::proto_util_converter::testing::Int64Wrapper* int64_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete int64_wrapper_;
  }
  if (int64_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int64_wrapper);
    if (message_arena != submessage_arena) {
      int64_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  int64_wrapper_ = int64_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.int64_wrapper)
}

// .proto_util_converter.testing.UInt64Wrapper uint64_wrapper = 4;
inline bool WrappersTestCases::_internal_has_uint64_wrapper() const {
  return this != internal_default_instance() && uint64_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_uint64_wrapper() const {
  return _internal_has_uint64_wrapper();
}
inline void WrappersTestCases::clear_uint64_wrapper() {
  if (GetArenaForAllocation() == nullptr && uint64_wrapper_ != nullptr) {
    delete uint64_wrapper_;
  }
  uint64_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::UInt64Wrapper& WrappersTestCases::_internal_uint64_wrapper() const {
  const ::proto_util_converter::testing::UInt64Wrapper* p = uint64_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::UInt64Wrapper&>(
      ::proto_util_converter::testing::_UInt64Wrapper_default_instance_);
}
inline const ::proto_util_converter::testing::UInt64Wrapper& WrappersTestCases::uint64_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.uint64_wrapper)
  return _internal_uint64_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_uint64_wrapper(
    ::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint64_wrapper_);
  }
  uint64_wrapper_ = uint64_wrapper;
  if (uint64_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.uint64_wrapper)
}
inline ::proto_util_converter::testing::UInt64Wrapper* WrappersTestCases::release_uint64_wrapper() {
  
  ::proto_util_converter::testing::UInt64Wrapper* temp = uint64_wrapper_;
  uint64_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::UInt64Wrapper* WrappersTestCases::unsafe_arena_release_uint64_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.uint64_wrapper)
  
  ::proto_util_converter::testing::UInt64Wrapper* temp = uint64_wrapper_;
  uint64_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::UInt64Wrapper* WrappersTestCases::_internal_mutable_uint64_wrapper() {
  
  if (uint64_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::UInt64Wrapper>(GetArenaForAllocation());
    uint64_wrapper_ = p;
  }
  return uint64_wrapper_;
}
inline ::proto_util_converter::testing::UInt64Wrapper* WrappersTestCases::mutable_uint64_wrapper() {
  ::proto_util_converter::testing::UInt64Wrapper* _msg = _internal_mutable_uint64_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.uint64_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_uint64_wrapper(::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uint64_wrapper_;
  }
  if (uint64_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uint64_wrapper);
    if (message_arena != submessage_arena) {
      uint64_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint64_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  uint64_wrapper_ = uint64_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.uint64_wrapper)
}

// .proto_util_converter.testing.Int32Wrapper int32_wrapper = 5;
inline bool WrappersTestCases::_internal_has_int32_wrapper() const {
  return this != internal_default_instance() && int32_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_int32_wrapper() const {
  return _internal_has_int32_wrapper();
}
inline void WrappersTestCases::clear_int32_wrapper() {
  if (GetArenaForAllocation() == nullptr && int32_wrapper_ != nullptr) {
    delete int32_wrapper_;
  }
  int32_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::Int32Wrapper& WrappersTestCases::_internal_int32_wrapper() const {
  const ::proto_util_converter::testing::Int32Wrapper* p = int32_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Int32Wrapper&>(
      ::proto_util_converter::testing::_Int32Wrapper_default_instance_);
}
inline const ::proto_util_converter::testing::Int32Wrapper& WrappersTestCases::int32_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.int32_wrapper)
  return _internal_int32_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_int32_wrapper(
    ::proto_util_converter::testing::Int32Wrapper* int32_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int32_wrapper_);
  }
  int32_wrapper_ = int32_wrapper;
  if (int32_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.int32_wrapper)
}
inline ::proto_util_converter::testing::Int32Wrapper* WrappersTestCases::release_int32_wrapper() {
  
  ::proto_util_converter::testing::Int32Wrapper* temp = int32_wrapper_;
  int32_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Int32Wrapper* WrappersTestCases::unsafe_arena_release_int32_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.int32_wrapper)
  
  ::proto_util_converter::testing::Int32Wrapper* temp = int32_wrapper_;
  int32_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Int32Wrapper* WrappersTestCases::_internal_mutable_int32_wrapper() {
  
  if (int32_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Int32Wrapper>(GetArenaForAllocation());
    int32_wrapper_ = p;
  }
  return int32_wrapper_;
}
inline ::proto_util_converter::testing::Int32Wrapper* WrappersTestCases::mutable_int32_wrapper() {
  ::proto_util_converter::testing::Int32Wrapper* _msg = _internal_mutable_int32_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.int32_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_int32_wrapper(::proto_util_converter::testing::Int32Wrapper* int32_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete int32_wrapper_;
  }
  if (int32_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int32_wrapper);
    if (message_arena != submessage_arena) {
      int32_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int32_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  int32_wrapper_ = int32_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.int32_wrapper)
}

// .proto_util_converter.testing.UInt32Wrapper uint32_wrapper = 6;
inline bool WrappersTestCases::_internal_has_uint32_wrapper() const {
  return this != internal_default_instance() && uint32_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_uint32_wrapper() const {
  return _internal_has_uint32_wrapper();
}
inline void WrappersTestCases::clear_uint32_wrapper() {
  if (GetArenaForAllocation() == nullptr && uint32_wrapper_ != nullptr) {
    delete uint32_wrapper_;
  }
  uint32_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::UInt32Wrapper& WrappersTestCases::_internal_uint32_wrapper() const {
  const ::proto_util_converter::testing::UInt32Wrapper* p = uint32_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::UInt32Wrapper&>(
      ::proto_util_converter::testing::_UInt32Wrapper_default_instance_);
}
inline const ::proto_util_converter::testing::UInt32Wrapper& WrappersTestCases::uint32_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.uint32_wrapper)
  return _internal_uint32_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_uint32_wrapper(
    ::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint32_wrapper_);
  }
  uint32_wrapper_ = uint32_wrapper;
  if (uint32_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.uint32_wrapper)
}
inline ::proto_util_converter::testing::UInt32Wrapper* WrappersTestCases::release_uint32_wrapper() {
  
  ::proto_util_converter::testing::UInt32Wrapper* temp = uint32_wrapper_;
  uint32_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::UInt32Wrapper* WrappersTestCases::unsafe_arena_release_uint32_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.uint32_wrapper)
  
  ::proto_util_converter::testing::UInt32Wrapper* temp = uint32_wrapper_;
  uint32_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::UInt32Wrapper* WrappersTestCases::_internal_mutable_uint32_wrapper() {
  
  if (uint32_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::UInt32Wrapper>(GetArenaForAllocation());
    uint32_wrapper_ = p;
  }
  return uint32_wrapper_;
}
inline ::proto_util_converter::testing::UInt32Wrapper* WrappersTestCases::mutable_uint32_wrapper() {
  ::proto_util_converter::testing::UInt32Wrapper* _msg = _internal_mutable_uint32_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.uint32_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_uint32_wrapper(::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uint32_wrapper_;
  }
  if (uint32_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uint32_wrapper);
    if (message_arena != submessage_arena) {
      uint32_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint32_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  uint32_wrapper_ = uint32_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.uint32_wrapper)
}

// .proto_util_converter.testing.BoolWrapper bool_wrapper = 7;
inline bool WrappersTestCases::_internal_has_bool_wrapper() const {
  return this != internal_default_instance() && bool_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_bool_wrapper() const {
  return _internal_has_bool_wrapper();
}
inline void WrappersTestCases::clear_bool_wrapper() {
  if (GetArenaForAllocation() == nullptr && bool_wrapper_ != nullptr) {
    delete bool_wrapper_;
  }
  bool_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::BoolWrapper& WrappersTestCases::_internal_bool_wrapper() const {
  const ::proto_util_converter::testing::BoolWrapper* p = bool_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::BoolWrapper&>(
      ::proto_util_converter::testing::_BoolWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::BoolWrapper& WrappersTestCases::bool_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.bool_wrapper)
  return _internal_bool_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_bool_wrapper(
    ::proto_util_converter::testing::BoolWrapper* bool_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bool_wrapper_);
  }
  bool_wrapper_ = bool_wrapper;
  if (bool_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.bool_wrapper)
}
inline ::proto_util_converter::testing::BoolWrapper* WrappersTestCases::release_bool_wrapper() {
  
  ::proto_util_converter::testing::BoolWrapper* temp = bool_wrapper_;
  bool_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::BoolWrapper* WrappersTestCases::unsafe_arena_release_bool_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.bool_wrapper)
  
  ::proto_util_converter::testing::BoolWrapper* temp = bool_wrapper_;
  bool_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::BoolWrapper* WrappersTestCases::_internal_mutable_bool_wrapper() {
  
  if (bool_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::BoolWrapper>(GetArenaForAllocation());
    bool_wrapper_ = p;
  }
  return bool_wrapper_;
}
inline ::proto_util_converter::testing::BoolWrapper* WrappersTestCases::mutable_bool_wrapper() {
  ::proto_util_converter::testing::BoolWrapper* _msg = _internal_mutable_bool_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.bool_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_bool_wrapper(::proto_util_converter::testing::BoolWrapper* bool_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bool_wrapper_;
  }
  if (bool_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bool_wrapper);
    if (message_arena != submessage_arena) {
      bool_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  bool_wrapper_ = bool_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.bool_wrapper)
}

// .proto_util_converter.testing.StringWrapper string_wrapper = 8;
inline bool WrappersTestCases::_internal_has_string_wrapper() const {
  return this != internal_default_instance() && string_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_string_wrapper() const {
  return _internal_has_string_wrapper();
}
inline void WrappersTestCases::clear_string_wrapper() {
  if (GetArenaForAllocation() == nullptr && string_wrapper_ != nullptr) {
    delete string_wrapper_;
  }
  string_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::StringWrapper& WrappersTestCases::_internal_string_wrapper() const {
  const ::proto_util_converter::testing::StringWrapper* p = string_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::StringWrapper&>(
      ::proto_util_converter::testing::_StringWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::StringWrapper& WrappersTestCases::string_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.string_wrapper)
  return _internal_string_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_string_wrapper(
    ::proto_util_converter::testing::StringWrapper* string_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_wrapper_);
  }
  string_wrapper_ = string_wrapper;
  if (string_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.string_wrapper)
}
inline ::proto_util_converter::testing::StringWrapper* WrappersTestCases::release_string_wrapper() {
  
  ::proto_util_converter::testing::StringWrapper* temp = string_wrapper_;
  string_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::StringWrapper* WrappersTestCases::unsafe_arena_release_string_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.string_wrapper)
  
  ::proto_util_converter::testing::StringWrapper* temp = string_wrapper_;
  string_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StringWrapper* WrappersTestCases::_internal_mutable_string_wrapper() {
  
  if (string_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StringWrapper>(GetArenaForAllocation());
    string_wrapper_ = p;
  }
  return string_wrapper_;
}
inline ::proto_util_converter::testing::StringWrapper* WrappersTestCases::mutable_string_wrapper() {
  ::proto_util_converter::testing::StringWrapper* _msg = _internal_mutable_string_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.string_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_string_wrapper(::proto_util_converter::testing::StringWrapper* string_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete string_wrapper_;
  }
  if (string_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_wrapper);
    if (message_arena != submessage_arena) {
      string_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  string_wrapper_ = string_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.string_wrapper)
}

// .proto_util_converter.testing.BytesWrapper bytes_wrapper = 9;
inline bool WrappersTestCases::_internal_has_bytes_wrapper() const {
  return this != internal_default_instance() && bytes_wrapper_ != nullptr;
}
inline bool WrappersTestCases::has_bytes_wrapper() const {
  return _internal_has_bytes_wrapper();
}
inline void WrappersTestCases::clear_bytes_wrapper() {
  if (GetArenaForAllocation() == nullptr && bytes_wrapper_ != nullptr) {
    delete bytes_wrapper_;
  }
  bytes_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::BytesWrapper& WrappersTestCases::_internal_bytes_wrapper() const {
  const ::proto_util_converter::testing::BytesWrapper* p = bytes_wrapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::BytesWrapper&>(
      ::proto_util_converter::testing::_BytesWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::BytesWrapper& WrappersTestCases::bytes_wrapper() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.bytes_wrapper)
  return _internal_bytes_wrapper();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_bytes_wrapper(
    ::proto_util_converter::testing::BytesWrapper* bytes_wrapper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes_wrapper_);
  }
  bytes_wrapper_ = bytes_wrapper;
  if (bytes_wrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.bytes_wrapper)
}
inline ::proto_util_converter::testing::BytesWrapper* WrappersTestCases::release_bytes_wrapper() {
  
  ::proto_util_converter::testing::BytesWrapper* temp = bytes_wrapper_;
  bytes_wrapper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::BytesWrapper* WrappersTestCases::unsafe_arena_release_bytes_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.bytes_wrapper)
  
  ::proto_util_converter::testing::BytesWrapper* temp = bytes_wrapper_;
  bytes_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::BytesWrapper* WrappersTestCases::_internal_mutable_bytes_wrapper() {
  
  if (bytes_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::BytesWrapper>(GetArenaForAllocation());
    bytes_wrapper_ = p;
  }
  return bytes_wrapper_;
}
inline ::proto_util_converter::testing::BytesWrapper* WrappersTestCases::mutable_bytes_wrapper() {
  ::proto_util_converter::testing::BytesWrapper* _msg = _internal_mutable_bytes_wrapper();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.bytes_wrapper)
  return _msg;
}
inline void WrappersTestCases::set_allocated_bytes_wrapper(::proto_util_converter::testing::BytesWrapper* bytes_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bytes_wrapper_;
  }
  if (bytes_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bytes_wrapper);
    if (message_arena != submessage_arena) {
      bytes_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  bytes_wrapper_ = bytes_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.bytes_wrapper)
}

// .proto_util_converter.testing.DoubleWrapper double_wrapper_default = 10;
inline bool WrappersTestCases::_internal_has_double_wrapper_default() const {
  return this != internal_default_instance() && double_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_double_wrapper_default() const {
  return _internal_has_double_wrapper_default();
}
inline void WrappersTestCases::clear_double_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && double_wrapper_default_ != nullptr) {
    delete double_wrapper_default_;
  }
  double_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::DoubleWrapper& WrappersTestCases::_internal_double_wrapper_default() const {
  const ::proto_util_converter::testing::DoubleWrapper* p = double_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::DoubleWrapper&>(
      ::proto_util_converter::testing::_DoubleWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::DoubleWrapper& WrappersTestCases::double_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.double_wrapper_default)
  return _internal_double_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_double_wrapper_default(
    ::proto_util_converter::testing::DoubleWrapper* double_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_wrapper_default_);
  }
  double_wrapper_default_ = double_wrapper_default;
  if (double_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.double_wrapper_default)
}
inline ::proto_util_converter::testing::DoubleWrapper* WrappersTestCases::release_double_wrapper_default() {
  
  ::proto_util_converter::testing::DoubleWrapper* temp = double_wrapper_default_;
  double_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::DoubleWrapper* WrappersTestCases::unsafe_arena_release_double_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.double_wrapper_default)
  
  ::proto_util_converter::testing::DoubleWrapper* temp = double_wrapper_default_;
  double_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DoubleWrapper* WrappersTestCases::_internal_mutable_double_wrapper_default() {
  
  if (double_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DoubleWrapper>(GetArenaForAllocation());
    double_wrapper_default_ = p;
  }
  return double_wrapper_default_;
}
inline ::proto_util_converter::testing::DoubleWrapper* WrappersTestCases::mutable_double_wrapper_default() {
  ::proto_util_converter::testing::DoubleWrapper* _msg = _internal_mutable_double_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.double_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_double_wrapper_default(::proto_util_converter::testing::DoubleWrapper* double_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete double_wrapper_default_;
  }
  if (double_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(double_wrapper_default);
    if (message_arena != submessage_arena) {
      double_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  double_wrapper_default_ = double_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.double_wrapper_default)
}

// .proto_util_converter.testing.FloatWrapper float_wrapper_default = 11;
inline bool WrappersTestCases::_internal_has_float_wrapper_default() const {
  return this != internal_default_instance() && float_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_float_wrapper_default() const {
  return _internal_has_float_wrapper_default();
}
inline void WrappersTestCases::clear_float_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && float_wrapper_default_ != nullptr) {
    delete float_wrapper_default_;
  }
  float_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::FloatWrapper& WrappersTestCases::_internal_float_wrapper_default() const {
  const ::proto_util_converter::testing::FloatWrapper* p = float_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::FloatWrapper&>(
      ::proto_util_converter::testing::_FloatWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::FloatWrapper& WrappersTestCases::float_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.float_wrapper_default)
  return _internal_float_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_float_wrapper_default(
    ::proto_util_converter::testing::FloatWrapper* float_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_wrapper_default_);
  }
  float_wrapper_default_ = float_wrapper_default;
  if (float_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.float_wrapper_default)
}
inline ::proto_util_converter::testing::FloatWrapper* WrappersTestCases::release_float_wrapper_default() {
  
  ::proto_util_converter::testing::FloatWrapper* temp = float_wrapper_default_;
  float_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::FloatWrapper* WrappersTestCases::unsafe_arena_release_float_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.float_wrapper_default)
  
  ::proto_util_converter::testing::FloatWrapper* temp = float_wrapper_default_;
  float_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::FloatWrapper* WrappersTestCases::_internal_mutable_float_wrapper_default() {
  
  if (float_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::FloatWrapper>(GetArenaForAllocation());
    float_wrapper_default_ = p;
  }
  return float_wrapper_default_;
}
inline ::proto_util_converter::testing::FloatWrapper* WrappersTestCases::mutable_float_wrapper_default() {
  ::proto_util_converter::testing::FloatWrapper* _msg = _internal_mutable_float_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.float_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_float_wrapper_default(::proto_util_converter::testing::FloatWrapper* float_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete float_wrapper_default_;
  }
  if (float_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(float_wrapper_default);
    if (message_arena != submessage_arena) {
      float_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  float_wrapper_default_ = float_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.float_wrapper_default)
}

// .proto_util_converter.testing.Int64Wrapper int64_wrapper_default = 12;
inline bool WrappersTestCases::_internal_has_int64_wrapper_default() const {
  return this != internal_default_instance() && int64_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_int64_wrapper_default() const {
  return _internal_has_int64_wrapper_default();
}
inline void WrappersTestCases::clear_int64_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && int64_wrapper_default_ != nullptr) {
    delete int64_wrapper_default_;
  }
  int64_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::Int64Wrapper& WrappersTestCases::_internal_int64_wrapper_default() const {
  const ::proto_util_converter::testing::Int64Wrapper* p = int64_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Int64Wrapper&>(
      ::proto_util_converter::testing::_Int64Wrapper_default_instance_);
}
inline const ::proto_util_converter::testing::Int64Wrapper& WrappersTestCases::int64_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.int64_wrapper_default)
  return _internal_int64_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_int64_wrapper_default(
    ::proto_util_converter::testing::Int64Wrapper* int64_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int64_wrapper_default_);
  }
  int64_wrapper_default_ = int64_wrapper_default;
  if (int64_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.int64_wrapper_default)
}
inline ::proto_util_converter::testing::Int64Wrapper* WrappersTestCases::release_int64_wrapper_default() {
  
  ::proto_util_converter::testing::Int64Wrapper* temp = int64_wrapper_default_;
  int64_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Int64Wrapper* WrappersTestCases::unsafe_arena_release_int64_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.int64_wrapper_default)
  
  ::proto_util_converter::testing::Int64Wrapper* temp = int64_wrapper_default_;
  int64_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Int64Wrapper* WrappersTestCases::_internal_mutable_int64_wrapper_default() {
  
  if (int64_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Int64Wrapper>(GetArenaForAllocation());
    int64_wrapper_default_ = p;
  }
  return int64_wrapper_default_;
}
inline ::proto_util_converter::testing::Int64Wrapper* WrappersTestCases::mutable_int64_wrapper_default() {
  ::proto_util_converter::testing::Int64Wrapper* _msg = _internal_mutable_int64_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.int64_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_int64_wrapper_default(::proto_util_converter::testing::Int64Wrapper* int64_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete int64_wrapper_default_;
  }
  if (int64_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int64_wrapper_default);
    if (message_arena != submessage_arena) {
      int64_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  int64_wrapper_default_ = int64_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.int64_wrapper_default)
}

// .proto_util_converter.testing.UInt64Wrapper uint64_wrapper_default = 13;
inline bool WrappersTestCases::_internal_has_uint64_wrapper_default() const {
  return this != internal_default_instance() && uint64_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_uint64_wrapper_default() const {
  return _internal_has_uint64_wrapper_default();
}
inline void WrappersTestCases::clear_uint64_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && uint64_wrapper_default_ != nullptr) {
    delete uint64_wrapper_default_;
  }
  uint64_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::UInt64Wrapper& WrappersTestCases::_internal_uint64_wrapper_default() const {
  const ::proto_util_converter::testing::UInt64Wrapper* p = uint64_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::UInt64Wrapper&>(
      ::proto_util_converter::testing::_UInt64Wrapper_default_instance_);
}
inline const ::proto_util_converter::testing::UInt64Wrapper& WrappersTestCases::uint64_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.uint64_wrapper_default)
  return _internal_uint64_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_uint64_wrapper_default(
    ::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint64_wrapper_default_);
  }
  uint64_wrapper_default_ = uint64_wrapper_default;
  if (uint64_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.uint64_wrapper_default)
}
inline ::proto_util_converter::testing::UInt64Wrapper* WrappersTestCases::release_uint64_wrapper_default() {
  
  ::proto_util_converter::testing::UInt64Wrapper* temp = uint64_wrapper_default_;
  uint64_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::UInt64Wrapper* WrappersTestCases::unsafe_arena_release_uint64_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.uint64_wrapper_default)
  
  ::proto_util_converter::testing::UInt64Wrapper* temp = uint64_wrapper_default_;
  uint64_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::UInt64Wrapper* WrappersTestCases::_internal_mutable_uint64_wrapper_default() {
  
  if (uint64_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::UInt64Wrapper>(GetArenaForAllocation());
    uint64_wrapper_default_ = p;
  }
  return uint64_wrapper_default_;
}
inline ::proto_util_converter::testing::UInt64Wrapper* WrappersTestCases::mutable_uint64_wrapper_default() {
  ::proto_util_converter::testing::UInt64Wrapper* _msg = _internal_mutable_uint64_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.uint64_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_uint64_wrapper_default(::proto_util_converter::testing::UInt64Wrapper* uint64_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uint64_wrapper_default_;
  }
  if (uint64_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uint64_wrapper_default);
    if (message_arena != submessage_arena) {
      uint64_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint64_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  uint64_wrapper_default_ = uint64_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.uint64_wrapper_default)
}

// .proto_util_converter.testing.Int32Wrapper int32_wrapper_default = 14;
inline bool WrappersTestCases::_internal_has_int32_wrapper_default() const {
  return this != internal_default_instance() && int32_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_int32_wrapper_default() const {
  return _internal_has_int32_wrapper_default();
}
inline void WrappersTestCases::clear_int32_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && int32_wrapper_default_ != nullptr) {
    delete int32_wrapper_default_;
  }
  int32_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::Int32Wrapper& WrappersTestCases::_internal_int32_wrapper_default() const {
  const ::proto_util_converter::testing::Int32Wrapper* p = int32_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Int32Wrapper&>(
      ::proto_util_converter::testing::_Int32Wrapper_default_instance_);
}
inline const ::proto_util_converter::testing::Int32Wrapper& WrappersTestCases::int32_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.int32_wrapper_default)
  return _internal_int32_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_int32_wrapper_default(
    ::proto_util_converter::testing::Int32Wrapper* int32_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int32_wrapper_default_);
  }
  int32_wrapper_default_ = int32_wrapper_default;
  if (int32_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.int32_wrapper_default)
}
inline ::proto_util_converter::testing::Int32Wrapper* WrappersTestCases::release_int32_wrapper_default() {
  
  ::proto_util_converter::testing::Int32Wrapper* temp = int32_wrapper_default_;
  int32_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Int32Wrapper* WrappersTestCases::unsafe_arena_release_int32_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.int32_wrapper_default)
  
  ::proto_util_converter::testing::Int32Wrapper* temp = int32_wrapper_default_;
  int32_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Int32Wrapper* WrappersTestCases::_internal_mutable_int32_wrapper_default() {
  
  if (int32_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Int32Wrapper>(GetArenaForAllocation());
    int32_wrapper_default_ = p;
  }
  return int32_wrapper_default_;
}
inline ::proto_util_converter::testing::Int32Wrapper* WrappersTestCases::mutable_int32_wrapper_default() {
  ::proto_util_converter::testing::Int32Wrapper* _msg = _internal_mutable_int32_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.int32_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_int32_wrapper_default(::proto_util_converter::testing::Int32Wrapper* int32_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete int32_wrapper_default_;
  }
  if (int32_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int32_wrapper_default);
    if (message_arena != submessage_arena) {
      int32_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int32_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  int32_wrapper_default_ = int32_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.int32_wrapper_default)
}

// .proto_util_converter.testing.UInt32Wrapper uint32_wrapper_default = 15;
inline bool WrappersTestCases::_internal_has_uint32_wrapper_default() const {
  return this != internal_default_instance() && uint32_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_uint32_wrapper_default() const {
  return _internal_has_uint32_wrapper_default();
}
inline void WrappersTestCases::clear_uint32_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && uint32_wrapper_default_ != nullptr) {
    delete uint32_wrapper_default_;
  }
  uint32_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::UInt32Wrapper& WrappersTestCases::_internal_uint32_wrapper_default() const {
  const ::proto_util_converter::testing::UInt32Wrapper* p = uint32_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::UInt32Wrapper&>(
      ::proto_util_converter::testing::_UInt32Wrapper_default_instance_);
}
inline const ::proto_util_converter::testing::UInt32Wrapper& WrappersTestCases::uint32_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.uint32_wrapper_default)
  return _internal_uint32_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_uint32_wrapper_default(
    ::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint32_wrapper_default_);
  }
  uint32_wrapper_default_ = uint32_wrapper_default;
  if (uint32_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.uint32_wrapper_default)
}
inline ::proto_util_converter::testing::UInt32Wrapper* WrappersTestCases::release_uint32_wrapper_default() {
  
  ::proto_util_converter::testing::UInt32Wrapper* temp = uint32_wrapper_default_;
  uint32_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::UInt32Wrapper* WrappersTestCases::unsafe_arena_release_uint32_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.uint32_wrapper_default)
  
  ::proto_util_converter::testing::UInt32Wrapper* temp = uint32_wrapper_default_;
  uint32_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::UInt32Wrapper* WrappersTestCases::_internal_mutable_uint32_wrapper_default() {
  
  if (uint32_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::UInt32Wrapper>(GetArenaForAllocation());
    uint32_wrapper_default_ = p;
  }
  return uint32_wrapper_default_;
}
inline ::proto_util_converter::testing::UInt32Wrapper* WrappersTestCases::mutable_uint32_wrapper_default() {
  ::proto_util_converter::testing::UInt32Wrapper* _msg = _internal_mutable_uint32_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.uint32_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_uint32_wrapper_default(::proto_util_converter::testing::UInt32Wrapper* uint32_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete uint32_wrapper_default_;
  }
  if (uint32_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uint32_wrapper_default);
    if (message_arena != submessage_arena) {
      uint32_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint32_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  uint32_wrapper_default_ = uint32_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.uint32_wrapper_default)
}

// .proto_util_converter.testing.BoolWrapper bool_wrapper_default = 16;
inline bool WrappersTestCases::_internal_has_bool_wrapper_default() const {
  return this != internal_default_instance() && bool_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_bool_wrapper_default() const {
  return _internal_has_bool_wrapper_default();
}
inline void WrappersTestCases::clear_bool_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && bool_wrapper_default_ != nullptr) {
    delete bool_wrapper_default_;
  }
  bool_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::BoolWrapper& WrappersTestCases::_internal_bool_wrapper_default() const {
  const ::proto_util_converter::testing::BoolWrapper* p = bool_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::BoolWrapper&>(
      ::proto_util_converter::testing::_BoolWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::BoolWrapper& WrappersTestCases::bool_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.bool_wrapper_default)
  return _internal_bool_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_bool_wrapper_default(
    ::proto_util_converter::testing::BoolWrapper* bool_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bool_wrapper_default_);
  }
  bool_wrapper_default_ = bool_wrapper_default;
  if (bool_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.bool_wrapper_default)
}
inline ::proto_util_converter::testing::BoolWrapper* WrappersTestCases::release_bool_wrapper_default() {
  
  ::proto_util_converter::testing::BoolWrapper* temp = bool_wrapper_default_;
  bool_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::BoolWrapper* WrappersTestCases::unsafe_arena_release_bool_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.bool_wrapper_default)
  
  ::proto_util_converter::testing::BoolWrapper* temp = bool_wrapper_default_;
  bool_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::BoolWrapper* WrappersTestCases::_internal_mutable_bool_wrapper_default() {
  
  if (bool_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::BoolWrapper>(GetArenaForAllocation());
    bool_wrapper_default_ = p;
  }
  return bool_wrapper_default_;
}
inline ::proto_util_converter::testing::BoolWrapper* WrappersTestCases::mutable_bool_wrapper_default() {
  ::proto_util_converter::testing::BoolWrapper* _msg = _internal_mutable_bool_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.bool_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_bool_wrapper_default(::proto_util_converter::testing::BoolWrapper* bool_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bool_wrapper_default_;
  }
  if (bool_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bool_wrapper_default);
    if (message_arena != submessage_arena) {
      bool_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  bool_wrapper_default_ = bool_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.bool_wrapper_default)
}

// .proto_util_converter.testing.StringWrapper string_wrapper_default = 17;
inline bool WrappersTestCases::_internal_has_string_wrapper_default() const {
  return this != internal_default_instance() && string_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_string_wrapper_default() const {
  return _internal_has_string_wrapper_default();
}
inline void WrappersTestCases::clear_string_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && string_wrapper_default_ != nullptr) {
    delete string_wrapper_default_;
  }
  string_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::StringWrapper& WrappersTestCases::_internal_string_wrapper_default() const {
  const ::proto_util_converter::testing::StringWrapper* p = string_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::StringWrapper&>(
      ::proto_util_converter::testing::_StringWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::StringWrapper& WrappersTestCases::string_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.string_wrapper_default)
  return _internal_string_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_string_wrapper_default(
    ::proto_util_converter::testing::StringWrapper* string_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_wrapper_default_);
  }
  string_wrapper_default_ = string_wrapper_default;
  if (string_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.string_wrapper_default)
}
inline ::proto_util_converter::testing::StringWrapper* WrappersTestCases::release_string_wrapper_default() {
  
  ::proto_util_converter::testing::StringWrapper* temp = string_wrapper_default_;
  string_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::StringWrapper* WrappersTestCases::unsafe_arena_release_string_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.string_wrapper_default)
  
  ::proto_util_converter::testing::StringWrapper* temp = string_wrapper_default_;
  string_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StringWrapper* WrappersTestCases::_internal_mutable_string_wrapper_default() {
  
  if (string_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StringWrapper>(GetArenaForAllocation());
    string_wrapper_default_ = p;
  }
  return string_wrapper_default_;
}
inline ::proto_util_converter::testing::StringWrapper* WrappersTestCases::mutable_string_wrapper_default() {
  ::proto_util_converter::testing::StringWrapper* _msg = _internal_mutable_string_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.string_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_string_wrapper_default(::proto_util_converter::testing::StringWrapper* string_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete string_wrapper_default_;
  }
  if (string_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_wrapper_default);
    if (message_arena != submessage_arena) {
      string_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  string_wrapper_default_ = string_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.string_wrapper_default)
}

// .proto_util_converter.testing.BytesWrapper bytes_wrapper_default = 18;
inline bool WrappersTestCases::_internal_has_bytes_wrapper_default() const {
  return this != internal_default_instance() && bytes_wrapper_default_ != nullptr;
}
inline bool WrappersTestCases::has_bytes_wrapper_default() const {
  return _internal_has_bytes_wrapper_default();
}
inline void WrappersTestCases::clear_bytes_wrapper_default() {
  if (GetArenaForAllocation() == nullptr && bytes_wrapper_default_ != nullptr) {
    delete bytes_wrapper_default_;
  }
  bytes_wrapper_default_ = nullptr;
}
inline const ::proto_util_converter::testing::BytesWrapper& WrappersTestCases::_internal_bytes_wrapper_default() const {
  const ::proto_util_converter::testing::BytesWrapper* p = bytes_wrapper_default_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::BytesWrapper&>(
      ::proto_util_converter::testing::_BytesWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::BytesWrapper& WrappersTestCases::bytes_wrapper_default() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.WrappersTestCases.bytes_wrapper_default)
  return _internal_bytes_wrapper_default();
}
inline void WrappersTestCases::unsafe_arena_set_allocated_bytes_wrapper_default(
    ::proto_util_converter::testing::BytesWrapper* bytes_wrapper_default) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes_wrapper_default_);
  }
  bytes_wrapper_default_ = bytes_wrapper_default;
  if (bytes_wrapper_default) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.WrappersTestCases.bytes_wrapper_default)
}
inline ::proto_util_converter::testing::BytesWrapper* WrappersTestCases::release_bytes_wrapper_default() {
  
  ::proto_util_converter::testing::BytesWrapper* temp = bytes_wrapper_default_;
  bytes_wrapper_default_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::BytesWrapper* WrappersTestCases::unsafe_arena_release_bytes_wrapper_default() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.WrappersTestCases.bytes_wrapper_default)
  
  ::proto_util_converter::testing::BytesWrapper* temp = bytes_wrapper_default_;
  bytes_wrapper_default_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::BytesWrapper* WrappersTestCases::_internal_mutable_bytes_wrapper_default() {
  
  if (bytes_wrapper_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::BytesWrapper>(GetArenaForAllocation());
    bytes_wrapper_default_ = p;
  }
  return bytes_wrapper_default_;
}
inline ::proto_util_converter::testing::BytesWrapper* WrappersTestCases::mutable_bytes_wrapper_default() {
  ::proto_util_converter::testing::BytesWrapper* _msg = _internal_mutable_bytes_wrapper_default();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.WrappersTestCases.bytes_wrapper_default)
  return _msg;
}
inline void WrappersTestCases::set_allocated_bytes_wrapper_default(::proto_util_converter::testing::BytesWrapper* bytes_wrapper_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bytes_wrapper_default_;
  }
  if (bytes_wrapper_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bytes_wrapper_default);
    if (message_arena != submessage_arena) {
      bytes_wrapper_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_wrapper_default, submessage_arena);
    }
    
  } else {
    
  }
  bytes_wrapper_default_ = bytes_wrapper_default;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.WrappersTestCases.bytes_wrapper_default)
}

// -------------------------------------------------------------------

// DoubleWrapper

// .google.protobuf.DoubleValue double = 1;
inline bool DoubleWrapper::_internal_has_double_() const {
  return this != internal_default_instance() && double__ != nullptr;
}
inline bool DoubleWrapper::has_double_() const {
  return _internal_has_double_();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& DoubleWrapper::_internal_double_() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = double__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& DoubleWrapper::double_() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DoubleWrapper.double)
  return _internal_double_();
}
inline void DoubleWrapper::unsafe_arena_set_allocated_double_(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* double_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double__);
  }
  double__ = double_;
  if (double_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.DoubleWrapper.double)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleWrapper::release_double_() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = double__;
  double__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleWrapper::unsafe_arena_release_double_() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DoubleWrapper.double)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = double__;
  double__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleWrapper::_internal_mutable_double_() {
  
  if (double__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    double__ = p;
  }
  return double__;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* DoubleWrapper::mutable_double_() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_double_();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DoubleWrapper.double)
  return _msg;
}
inline void DoubleWrapper::set_allocated_double_(::PROTOBUF_NAMESPACE_ID::DoubleValue* double_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(double__);
  }
  if (double_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_));
    if (message_arena != submessage_arena) {
      double_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_, submessage_arena);
    }
    
  } else {
    
  }
  double__ = double_;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DoubleWrapper.double)
}

// -------------------------------------------------------------------

// FloatWrapper

// .google.protobuf.FloatValue float = 1;
inline bool FloatWrapper::_internal_has_float_() const {
  return this != internal_default_instance() && float__ != nullptr;
}
inline bool FloatWrapper::has_float_() const {
  return _internal_has_float_();
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& FloatWrapper::_internal_float_() const {
  const ::PROTOBUF_NAMESPACE_ID::FloatValue* p = float__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FloatValue&>(
      ::PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FloatValue& FloatWrapper::float_() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.FloatWrapper.float)
  return _internal_float_();
}
inline void FloatWrapper::unsafe_arena_set_allocated_float_(
    ::PROTOBUF_NAMESPACE_ID::FloatValue* float_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float__);
  }
  float__ = float_;
  if (float_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.FloatWrapper.float)
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* FloatWrapper::release_float_() {
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = float__;
  float__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* FloatWrapper::unsafe_arena_release_float_() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.FloatWrapper.float)
  
  ::PROTOBUF_NAMESPACE_ID::FloatValue* temp = float__;
  float__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* FloatWrapper::_internal_mutable_float_() {
  
  if (float__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FloatValue>(GetArenaForAllocation());
    float__ = p;
  }
  return float__;
}
inline ::PROTOBUF_NAMESPACE_ID::FloatValue* FloatWrapper::mutable_float_() {
  ::PROTOBUF_NAMESPACE_ID::FloatValue* _msg = _internal_mutable_float_();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.FloatWrapper.float)
  return _msg;
}
inline void FloatWrapper::set_allocated_float_(::PROTOBUF_NAMESPACE_ID::FloatValue* float_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(float__);
  }
  if (float_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float_));
    if (message_arena != submessage_arena) {
      float_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_, submessage_arena);
    }
    
  } else {
    
  }
  float__ = float_;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.FloatWrapper.float)
}

// -------------------------------------------------------------------

// Int64Wrapper

// .google.protobuf.Int64Value int64 = 1;
inline bool Int64Wrapper::_internal_has_int64() const {
  return this != internal_default_instance() && int64_ != nullptr;
}
inline bool Int64Wrapper::has_int64() const {
  return _internal_has_int64();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& Int64Wrapper::_internal_int64() const {
  const ::PROTOBUF_NAMESPACE_ID::Int64Value* p = int64_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int64Value& Int64Wrapper::int64() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Int64Wrapper.int64)
  return _internal_int64();
}
inline void Int64Wrapper::unsafe_arena_set_allocated_int64(
    ::PROTOBUF_NAMESPACE_ID::Int64Value* int64) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int64_);
  }
  int64_ = int64;
  if (int64) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.Int64Wrapper.int64)
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* Int64Wrapper::release_int64() {
  
  ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = int64_;
  int64_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* Int64Wrapper::unsafe_arena_release_int64() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Int64Wrapper.int64)
  
  ::PROTOBUF_NAMESPACE_ID::Int64Value* temp = int64_;
  int64_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* Int64Wrapper::_internal_mutable_int64() {
  
  if (int64_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int64Value>(GetArenaForAllocation());
    int64_ = p;
  }
  return int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int64Value* Int64Wrapper::mutable_int64() {
  ::PROTOBUF_NAMESPACE_ID::Int64Value* _msg = _internal_mutable_int64();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Int64Wrapper.int64)
  return _msg;
}
inline void Int64Wrapper::set_allocated_int64(::PROTOBUF_NAMESPACE_ID::Int64Value* int64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(int64_);
  }
  if (int64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int64));
    if (message_arena != submessage_arena) {
      int64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64, submessage_arena);
    }
    
  } else {
    
  }
  int64_ = int64;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Int64Wrapper.int64)
}

// -------------------------------------------------------------------

// UInt64Wrapper

// .google.protobuf.UInt64Value uint64 = 1;
inline bool UInt64Wrapper::_internal_has_uint64() const {
  return this != internal_default_instance() && uint64_ != nullptr;
}
inline bool UInt64Wrapper::has_uint64() const {
  return _internal_has_uint64();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& UInt64Wrapper::_internal_uint64() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt64Value* p = uint64_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt64Value& UInt64Wrapper::uint64() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.UInt64Wrapper.uint64)
  return _internal_uint64();
}
inline void UInt64Wrapper::unsafe_arena_set_allocated_uint64(
    ::PROTOBUF_NAMESPACE_ID::UInt64Value* uint64) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint64_);
  }
  uint64_ = uint64;
  if (uint64) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.UInt64Wrapper.uint64)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* UInt64Wrapper::release_uint64() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = uint64_;
  uint64_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* UInt64Wrapper::unsafe_arena_release_uint64() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.UInt64Wrapper.uint64)
  
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* temp = uint64_;
  uint64_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* UInt64Wrapper::_internal_mutable_uint64() {
  
  if (uint64_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    uint64_ = p;
  }
  return uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt64Value* UInt64Wrapper::mutable_uint64() {
  ::PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_uint64();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.UInt64Wrapper.uint64)
  return _msg;
}
inline void UInt64Wrapper::set_allocated_uint64(::PROTOBUF_NAMESPACE_ID::UInt64Value* uint64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint64_);
  }
  if (uint64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint64));
    if (message_arena != submessage_arena) {
      uint64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint64, submessage_arena);
    }
    
  } else {
    
  }
  uint64_ = uint64;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.UInt64Wrapper.uint64)
}

// -------------------------------------------------------------------

// Int32Wrapper

// .google.protobuf.Int32Value int32 = 1;
inline bool Int32Wrapper::_internal_has_int32() const {
  return this != internal_default_instance() && int32_ != nullptr;
}
inline bool Int32Wrapper::has_int32() const {
  return _internal_has_int32();
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Int32Wrapper::_internal_int32() const {
  const ::PROTOBUF_NAMESPACE_ID::Int32Value* p = int32_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Int32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Int32Value& Int32Wrapper::int32() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Int32Wrapper.int32)
  return _internal_int32();
}
inline void Int32Wrapper::unsafe_arena_set_allocated_int32(
    ::PROTOBUF_NAMESPACE_ID::Int32Value* int32) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int32_);
  }
  int32_ = int32;
  if (int32) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.Int32Wrapper.int32)
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Int32Wrapper::release_int32() {
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = int32_;
  int32_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Int32Wrapper::unsafe_arena_release_int32() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Int32Wrapper.int32)
  
  ::PROTOBUF_NAMESPACE_ID::Int32Value* temp = int32_;
  int32_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Int32Wrapper::_internal_mutable_int32() {
  
  if (int32_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Int32Value>(GetArenaForAllocation());
    int32_ = p;
  }
  return int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::Int32Value* Int32Wrapper::mutable_int32() {
  ::PROTOBUF_NAMESPACE_ID::Int32Value* _msg = _internal_mutable_int32();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Int32Wrapper.int32)
  return _msg;
}
inline void Int32Wrapper::set_allocated_int32(::PROTOBUF_NAMESPACE_ID::Int32Value* int32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(int32_);
  }
  if (int32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int32));
    if (message_arena != submessage_arena) {
      int32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int32, submessage_arena);
    }
    
  } else {
    
  }
  int32_ = int32;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Int32Wrapper.int32)
}

// -------------------------------------------------------------------

// UInt32Wrapper

// .google.protobuf.UInt32Value uint32 = 1;
inline bool UInt32Wrapper::_internal_has_uint32() const {
  return this != internal_default_instance() && uint32_ != nullptr;
}
inline bool UInt32Wrapper::has_uint32() const {
  return _internal_has_uint32();
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& UInt32Wrapper::_internal_uint32() const {
  const ::PROTOBUF_NAMESPACE_ID::UInt32Value* p = uint32_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      ::PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::UInt32Value& UInt32Wrapper::uint32() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.UInt32Wrapper.uint32)
  return _internal_uint32();
}
inline void UInt32Wrapper::unsafe_arena_set_allocated_uint32(
    ::PROTOBUF_NAMESPACE_ID::UInt32Value* uint32) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint32_);
  }
  uint32_ = uint32;
  if (uint32) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.UInt32Wrapper.uint32)
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* UInt32Wrapper::release_uint32() {
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = uint32_;
  uint32_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* UInt32Wrapper::unsafe_arena_release_uint32() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.UInt32Wrapper.uint32)
  
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* temp = uint32_;
  uint32_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* UInt32Wrapper::_internal_mutable_uint32() {
  
  if (uint32_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaForAllocation());
    uint32_ = p;
  }
  return uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::UInt32Value* UInt32Wrapper::mutable_uint32() {
  ::PROTOBUF_NAMESPACE_ID::UInt32Value* _msg = _internal_mutable_uint32();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.UInt32Wrapper.uint32)
  return _msg;
}
inline void UInt32Wrapper::set_allocated_uint32(::PROTOBUF_NAMESPACE_ID::UInt32Value* uint32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint32_);
  }
  if (uint32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uint32));
    if (message_arena != submessage_arena) {
      uint32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint32, submessage_arena);
    }
    
  } else {
    
  }
  uint32_ = uint32;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.UInt32Wrapper.uint32)
}

// -------------------------------------------------------------------

// BoolWrapper

// .google.protobuf.BoolValue bool = 1;
inline bool BoolWrapper::_internal_has_bool_() const {
  return this != internal_default_instance() && bool__ != nullptr;
}
inline bool BoolWrapper::has_bool_() const {
  return _internal_has_bool_();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& BoolWrapper::_internal_bool_() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = bool__;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& BoolWrapper::bool_() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.BoolWrapper.bool)
  return _internal_bool_();
}
inline void BoolWrapper::unsafe_arena_set_allocated_bool_(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* bool_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bool__);
  }
  bool__ = bool_;
  if (bool_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.BoolWrapper.bool)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* BoolWrapper::release_bool_() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = bool__;
  bool__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* BoolWrapper::unsafe_arena_release_bool_() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.BoolWrapper.bool)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = bool__;
  bool__ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* BoolWrapper::_internal_mutable_bool_() {
  
  if (bool__ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    bool__ = p;
  }
  return bool__;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* BoolWrapper::mutable_bool_() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_bool_();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.BoolWrapper.bool)
  return _msg;
}
inline void BoolWrapper::set_allocated_bool_(::PROTOBUF_NAMESPACE_ID::BoolValue* bool_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bool__);
  }
  if (bool_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bool_));
    if (message_arena != submessage_arena) {
      bool_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_, submessage_arena);
    }
    
  } else {
    
  }
  bool__ = bool_;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.BoolWrapper.bool)
}

// -------------------------------------------------------------------

// StringWrapper

// .google.protobuf.StringValue string = 1;
inline bool StringWrapper::_internal_has_string() const {
  return this != internal_default_instance() && string_ != nullptr;
}
inline bool StringWrapper::has_string() const {
  return _internal_has_string();
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& StringWrapper::_internal_string() const {
  const ::PROTOBUF_NAMESPACE_ID::StringValue* p = string_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::StringValue&>(
      ::PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::StringValue& StringWrapper::string() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StringWrapper.string)
  return _internal_string();
}
inline void StringWrapper::unsafe_arena_set_allocated_string(
    ::PROTOBUF_NAMESPACE_ID::StringValue* string) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_);
  }
  string_ = string;
  if (string) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.StringWrapper.string)
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* StringWrapper::release_string() {
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = string_;
  string_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* StringWrapper::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StringWrapper.string)
  
  ::PROTOBUF_NAMESPACE_ID::StringValue* temp = string_;
  string_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* StringWrapper::_internal_mutable_string() {
  
  if (string_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    string_ = p;
  }
  return string_;
}
inline ::PROTOBUF_NAMESPACE_ID::StringValue* StringWrapper::mutable_string() {
  ::PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StringWrapper.string)
  return _msg;
}
inline void StringWrapper::set_allocated_string(::PROTOBUF_NAMESPACE_ID::StringValue* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_);
  }
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string));
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    
  } else {
    
  }
  string_ = string;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StringWrapper.string)
}

// -------------------------------------------------------------------

// BytesWrapper

// .google.protobuf.BytesValue bytes = 1;
inline bool BytesWrapper::_internal_has_bytes() const {
  return this != internal_default_instance() && bytes_ != nullptr;
}
inline bool BytesWrapper::has_bytes() const {
  return _internal_has_bytes();
}
inline const ::PROTOBUF_NAMESPACE_ID::BytesValue& BytesWrapper::_internal_bytes() const {
  const ::PROTOBUF_NAMESPACE_ID::BytesValue* p = bytes_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BytesValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BytesValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BytesValue& BytesWrapper::bytes() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.BytesWrapper.bytes)
  return _internal_bytes();
}
inline void BytesWrapper::unsafe_arena_set_allocated_bytes(
    ::PROTOBUF_NAMESPACE_ID::BytesValue* bytes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes_);
  }
  bytes_ = bytes;
  if (bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.BytesWrapper.bytes)
}
inline ::PROTOBUF_NAMESPACE_ID::BytesValue* BytesWrapper::release_bytes() {
  
  ::PROTOBUF_NAMESPACE_ID::BytesValue* temp = bytes_;
  bytes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BytesValue* BytesWrapper::unsafe_arena_release_bytes() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.BytesWrapper.bytes)
  
  ::PROTOBUF_NAMESPACE_ID::BytesValue* temp = bytes_;
  bytes_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BytesValue* BytesWrapper::_internal_mutable_bytes() {
  
  if (bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BytesValue>(GetArenaForAllocation());
    bytes_ = p;
  }
  return bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::BytesValue* BytesWrapper::mutable_bytes() {
  ::PROTOBUF_NAMESPACE_ID::BytesValue* _msg = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.BytesWrapper.bytes)
  return _msg;
}
inline void BytesWrapper::set_allocated_bytes(::PROTOBUF_NAMESPACE_ID::BytesValue* bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes_);
  }
  if (bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes));
    if (message_arena != submessage_arena) {
      bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes, submessage_arena);
    }
    
  } else {
    
  }
  bytes_ = bytes;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.BytesWrapper.bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace proto_util_converter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fwrappers_2eproto
