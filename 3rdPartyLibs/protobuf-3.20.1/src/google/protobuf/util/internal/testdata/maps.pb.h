// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/maps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
namespace proto_util_converter {
namespace testing {
class BoolToString;
struct BoolToStringDefaultTypeInternal;
extern BoolToStringDefaultTypeInternal _BoolToString_default_instance_;
class BoolToString_MapEntry_DoNotUse;
struct BoolToString_MapEntry_DoNotUseDefaultTypeInternal;
extern BoolToString_MapEntry_DoNotUseDefaultTypeInternal _BoolToString_MapEntry_DoNotUse_default_instance_;
class DummyRequest;
struct DummyRequestDefaultTypeInternal;
extern DummyRequestDefaultTypeInternal _DummyRequest_default_instance_;
class EmptyMap;
struct EmptyMapDefaultTypeInternal;
extern EmptyMapDefaultTypeInternal _EmptyMap_default_instance_;
class EmptyMap_MapEntry_DoNotUse;
struct EmptyMap_MapEntry_DoNotUseDefaultTypeInternal;
extern EmptyMap_MapEntry_DoNotUseDefaultTypeInternal _EmptyMap_MapEntry_DoNotUse_default_instance_;
class IntToString;
struct IntToStringDefaultTypeInternal;
extern IntToStringDefaultTypeInternal _IntToString_default_instance_;
class IntToString_MapEntry_DoNotUse;
struct IntToString_MapEntry_DoNotUseDefaultTypeInternal;
extern IntToString_MapEntry_DoNotUseDefaultTypeInternal _IntToString_MapEntry_DoNotUse_default_instance_;
class MapIn;
struct MapInDefaultTypeInternal;
extern MapInDefaultTypeInternal _MapIn_default_instance_;
class MapIn_MapAnyEntry_DoNotUse;
struct MapIn_MapAnyEntry_DoNotUseDefaultTypeInternal;
extern MapIn_MapAnyEntry_DoNotUseDefaultTypeInternal _MapIn_MapAnyEntry_DoNotUse_default_instance_;
class MapIn_MapInputEntry_DoNotUse;
struct MapIn_MapInputEntry_DoNotUseDefaultTypeInternal;
extern MapIn_MapInputEntry_DoNotUseDefaultTypeInternal _MapIn_MapInputEntry_DoNotUse_default_instance_;
class MapM;
struct MapMDefaultTypeInternal;
extern MapMDefaultTypeInternal _MapM_default_instance_;
class MapOfObjects;
struct MapOfObjectsDefaultTypeInternal;
extern MapOfObjectsDefaultTypeInternal _MapOfObjects_default_instance_;
class MapOfObjects_M;
struct MapOfObjects_MDefaultTypeInternal;
extern MapOfObjects_MDefaultTypeInternal _MapOfObjects_M_default_instance_;
class MapOfObjects_MapEntry_DoNotUse;
struct MapOfObjects_MapEntry_DoNotUseDefaultTypeInternal;
extern MapOfObjects_MapEntry_DoNotUseDefaultTypeInternal _MapOfObjects_MapEntry_DoNotUse_default_instance_;
class MapOut;
struct MapOutDefaultTypeInternal;
extern MapOutDefaultTypeInternal _MapOut_default_instance_;
class MapOutWireFormat;
struct MapOutWireFormatDefaultTypeInternal;
extern MapOutWireFormatDefaultTypeInternal _MapOutWireFormat_default_instance_;
class MapOutWireFormat_Map1Entry;
struct MapOutWireFormat_Map1EntryDefaultTypeInternal;
extern MapOutWireFormat_Map1EntryDefaultTypeInternal _MapOutWireFormat_Map1Entry_default_instance_;
class MapOutWireFormat_Map2Entry;
struct MapOutWireFormat_Map2EntryDefaultTypeInternal;
extern MapOutWireFormat_Map2EntryDefaultTypeInternal _MapOutWireFormat_Map2Entry_default_instance_;
class MapOutWireFormat_Map3Entry;
struct MapOutWireFormat_Map3EntryDefaultTypeInternal;
extern MapOutWireFormat_Map3EntryDefaultTypeInternal _MapOutWireFormat_Map3Entry_default_instance_;
class MapOutWireFormat_Map4Entry;
struct MapOutWireFormat_Map4EntryDefaultTypeInternal;
extern MapOutWireFormat_Map4EntryDefaultTypeInternal _MapOutWireFormat_Map4Entry_default_instance_;
class MapOut_Map1Entry_DoNotUse;
struct MapOut_Map1Entry_DoNotUseDefaultTypeInternal;
extern MapOut_Map1Entry_DoNotUseDefaultTypeInternal _MapOut_Map1Entry_DoNotUse_default_instance_;
class MapOut_Map2Entry_DoNotUse;
struct MapOut_Map2Entry_DoNotUseDefaultTypeInternal;
extern MapOut_Map2Entry_DoNotUseDefaultTypeInternal _MapOut_Map2Entry_DoNotUse_default_instance_;
class MapOut_Map3Entry_DoNotUse;
struct MapOut_Map3Entry_DoNotUseDefaultTypeInternal;
extern MapOut_Map3Entry_DoNotUseDefaultTypeInternal _MapOut_Map3Entry_DoNotUse_default_instance_;
class MapOut_Map4Entry_DoNotUse;
struct MapOut_Map4Entry_DoNotUseDefaultTypeInternal;
extern MapOut_Map4Entry_DoNotUseDefaultTypeInternal _MapOut_Map4Entry_DoNotUse_default_instance_;
class MapsTestCases;
struct MapsTestCasesDefaultTypeInternal;
extern MapsTestCasesDefaultTypeInternal _MapsTestCases_default_instance_;
class Mixed1;
struct Mixed1DefaultTypeInternal;
extern Mixed1DefaultTypeInternal _Mixed1_default_instance_;
class Mixed1_MapEntry_DoNotUse;
struct Mixed1_MapEntry_DoNotUseDefaultTypeInternal;
extern Mixed1_MapEntry_DoNotUseDefaultTypeInternal _Mixed1_MapEntry_DoNotUse_default_instance_;
class Mixed2;
struct Mixed2DefaultTypeInternal;
extern Mixed2DefaultTypeInternal _Mixed2_default_instance_;
class Mixed2_MapEntry_DoNotUse;
struct Mixed2_MapEntry_DoNotUseDefaultTypeInternal;
extern Mixed2_MapEntry_DoNotUseDefaultTypeInternal _Mixed2_MapEntry_DoNotUse_default_instance_;
class StringtoInt;
struct StringtoIntDefaultTypeInternal;
extern StringtoIntDefaultTypeInternal _StringtoInt_default_instance_;
class StringtoInt_MapEntry_DoNotUse;
struct StringtoInt_MapEntry_DoNotUseDefaultTypeInternal;
extern StringtoInt_MapEntry_DoNotUseDefaultTypeInternal _StringtoInt_MapEntry_DoNotUse_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_util_converter::testing::BoolToString* Arena::CreateMaybeMessage<::proto_util_converter::testing::BoolToString>(Arena*);
template<> ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::DummyRequest* Arena::CreateMaybeMessage<::proto_util_converter::testing::DummyRequest>(Arena*);
template<> ::proto_util_converter::testing::EmptyMap* Arena::CreateMaybeMessage<::proto_util_converter::testing::EmptyMap>(Arena*);
template<> ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::IntToString* Arena::CreateMaybeMessage<::proto_util_converter::testing::IntToString>(Arena*);
template<> ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::IntToString_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapIn* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapIn>(Arena*);
template<> ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapM* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapM>(Arena*);
template<> ::proto_util_converter::testing::MapOfObjects* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOfObjects>(Arena*);
template<> ::proto_util_converter::testing::MapOfObjects_M* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOfObjects_M>(Arena*);
template<> ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapOut* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOut>(Arena*);
template<> ::proto_util_converter::testing::MapOutWireFormat* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOutWireFormat>(Arena*);
template<> ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOutWireFormat_Map1Entry>(Arena*);
template<> ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOutWireFormat_Map2Entry>(Arena*);
template<> ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOutWireFormat_Map3Entry>(Arena*);
template<> ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOutWireFormat_Map4Entry>(Arena*);
template<> ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapsTestCases* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapsTestCases>(Arena*);
template<> ::proto_util_converter::testing::Mixed1* Arena::CreateMaybeMessage<::proto_util_converter::testing::Mixed1>(Arena*);
template<> ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::Mixed2* Arena::CreateMaybeMessage<::proto_util_converter::testing::Mixed2>(Arena*);
template<> ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::StringtoInt* Arena::CreateMaybeMessage<::proto_util_converter::testing::StringtoInt>(Arena*);
template<> ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_util_converter {
namespace testing {

enum Mixed2_E : int {
  Mixed2_E_E0 = 0,
  Mixed2_E_E1 = 1,
  Mixed2_E_E2 = 2,
  Mixed2_E_E3 = 3,
  Mixed2_E_Mixed2_E_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Mixed2_E_Mixed2_E_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Mixed2_E_IsValid(int value);
constexpr Mixed2_E Mixed2_E_E_MIN = Mixed2_E_E0;
constexpr Mixed2_E Mixed2_E_E_MAX = Mixed2_E_E3;
constexpr int Mixed2_E_E_ARRAYSIZE = Mixed2_E_E_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mixed2_E_descriptor();
template<typename T>
inline const std::string& Mixed2_E_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mixed2_E>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mixed2_E_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mixed2_E_descriptor(), enum_t_value);
}
inline bool Mixed2_E_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Mixed2_E* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mixed2_E>(
    Mixed2_E_descriptor(), name, value);
}
// ===================================================================

class MapsTestCases final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapsTestCases) */ {
 public:
  inline MapsTestCases() : MapsTestCases(nullptr) {}
  ~MapsTestCases() override;
  explicit PROTOBUF_CONSTEXPR MapsTestCases(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapsTestCases(const MapsTestCases& from);
  MapsTestCases(MapsTestCases&& from) noexcept
    : MapsTestCases() {
    *this = ::std::move(from);
  }

  inline MapsTestCases& operator=(const MapsTestCases& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapsTestCases& operator=(MapsTestCases&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapsTestCases& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapsTestCases* internal_default_instance() {
    return reinterpret_cast<const MapsTestCases*>(
               &_MapsTestCases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapsTestCases& a, MapsTestCases& b) {
    a.Swap(&b);
  }
  inline void Swap(MapsTestCases* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapsTestCases* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapsTestCases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapsTestCases>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapsTestCases& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapsTestCases& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapsTestCases* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapsTestCases";
  }
  protected:
  explicit MapsTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyMapFieldNumber = 1,
    kStringToIntFieldNumber = 2,
    kIntToStringFieldNumber = 3,
    kMixed1FieldNumber = 4,
    kMixed2FieldNumber = 5,
    kMapOfObjectsFieldNumber = 6,
    kEmptyKeyStringToInt1FieldNumber = 7,
    kEmptyKeyStringToInt2FieldNumber = 8,
    kEmptyKeyStringToInt3FieldNumber = 9,
    kEmptyKeyBoolToStringFieldNumber = 10,
    kEmptyKeyIntToStringFieldNumber = 11,
    kEmptyKeyMixedFieldNumber = 12,
    kEmptyKeyMapObjectsFieldNumber = 13,
  };
  // .proto_util_converter.testing.EmptyMap empty_map = 1;
  bool has_empty_map() const;
  private:
  bool _internal_has_empty_map() const;
  public:
  void clear_empty_map();
  const ::proto_util_converter::testing::EmptyMap& empty_map() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::EmptyMap* release_empty_map();
  ::proto_util_converter::testing::EmptyMap* mutable_empty_map();
  void set_allocated_empty_map(::proto_util_converter::testing::EmptyMap* empty_map);
  private:
  const ::proto_util_converter::testing::EmptyMap& _internal_empty_map() const;
  ::proto_util_converter::testing::EmptyMap* _internal_mutable_empty_map();
  public:
  void unsafe_arena_set_allocated_empty_map(
      ::proto_util_converter::testing::EmptyMap* empty_map);
  ::proto_util_converter::testing::EmptyMap* unsafe_arena_release_empty_map();

  // .proto_util_converter.testing.StringtoInt string_to_int = 2;
  bool has_string_to_int() const;
  private:
  bool _internal_has_string_to_int() const;
  public:
  void clear_string_to_int();
  const ::proto_util_converter::testing::StringtoInt& string_to_int() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::StringtoInt* release_string_to_int();
  ::proto_util_converter::testing::StringtoInt* mutable_string_to_int();
  void set_allocated_string_to_int(::proto_util_converter::testing::StringtoInt* string_to_int);
  private:
  const ::proto_util_converter::testing::StringtoInt& _internal_string_to_int() const;
  ::proto_util_converter::testing::StringtoInt* _internal_mutable_string_to_int();
  public:
  void unsafe_arena_set_allocated_string_to_int(
      ::proto_util_converter::testing::StringtoInt* string_to_int);
  ::proto_util_converter::testing::StringtoInt* unsafe_arena_release_string_to_int();

  // .proto_util_converter.testing.IntToString int_to_string = 3;
  bool has_int_to_string() const;
  private:
  bool _internal_has_int_to_string() const;
  public:
  void clear_int_to_string();
  const ::proto_util_converter::testing::IntToString& int_to_string() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::IntToString* release_int_to_string();
  ::proto_util_converter::testing::IntToString* mutable_int_to_string();
  void set_allocated_int_to_string(::proto_util_converter::testing::IntToString* int_to_string);
  private:
  const ::proto_util_converter::testing::IntToString& _internal_int_to_string() const;
  ::proto_util_converter::testing::IntToString* _internal_mutable_int_to_string();
  public:
  void unsafe_arena_set_allocated_int_to_string(
      ::proto_util_converter::testing::IntToString* int_to_string);
  ::proto_util_converter::testing::IntToString* unsafe_arena_release_int_to_string();

  // .proto_util_converter.testing.Mixed1 mixed1 = 4;
  bool has_mixed1() const;
  private:
  bool _internal_has_mixed1() const;
  public:
  void clear_mixed1();
  const ::proto_util_converter::testing::Mixed1& mixed1() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Mixed1* release_mixed1();
  ::proto_util_converter::testing::Mixed1* mutable_mixed1();
  void set_allocated_mixed1(::proto_util_converter::testing::Mixed1* mixed1);
  private:
  const ::proto_util_converter::testing::Mixed1& _internal_mixed1() const;
  ::proto_util_converter::testing::Mixed1* _internal_mutable_mixed1();
  public:
  void unsafe_arena_set_allocated_mixed1(
      ::proto_util_converter::testing::Mixed1* mixed1);
  ::proto_util_converter::testing::Mixed1* unsafe_arena_release_mixed1();

  // .proto_util_converter.testing.Mixed2 mixed2 = 5;
  bool has_mixed2() const;
  private:
  bool _internal_has_mixed2() const;
  public:
  void clear_mixed2();
  const ::proto_util_converter::testing::Mixed2& mixed2() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Mixed2* release_mixed2();
  ::proto_util_converter::testing::Mixed2* mutable_mixed2();
  void set_allocated_mixed2(::proto_util_converter::testing::Mixed2* mixed2);
  private:
  const ::proto_util_converter::testing::Mixed2& _internal_mixed2() const;
  ::proto_util_converter::testing::Mixed2* _internal_mutable_mixed2();
  public:
  void unsafe_arena_set_allocated_mixed2(
      ::proto_util_converter::testing::Mixed2* mixed2);
  ::proto_util_converter::testing::Mixed2* unsafe_arena_release_mixed2();

  // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
  bool has_map_of_objects() const;
  private:
  bool _internal_has_map_of_objects() const;
  public:
  void clear_map_of_objects();
  const ::proto_util_converter::testing::MapOfObjects& map_of_objects() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::MapOfObjects* release_map_of_objects();
  ::proto_util_converter::testing::MapOfObjects* mutable_map_of_objects();
  void set_allocated_map_of_objects(::proto_util_converter::testing::MapOfObjects* map_of_objects);
  private:
  const ::proto_util_converter::testing::MapOfObjects& _internal_map_of_objects() const;
  ::proto_util_converter::testing::MapOfObjects* _internal_mutable_map_of_objects();
  public:
  void unsafe_arena_set_allocated_map_of_objects(
      ::proto_util_converter::testing::MapOfObjects* map_of_objects);
  ::proto_util_converter::testing::MapOfObjects* unsafe_arena_release_map_of_objects();

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
  bool has_empty_key_string_to_int1() const;
  private:
  bool _internal_has_empty_key_string_to_int1() const;
  public:
  void clear_empty_key_string_to_int1();
  const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int1() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::StringtoInt* release_empty_key_string_to_int1();
  ::proto_util_converter::testing::StringtoInt* mutable_empty_key_string_to_int1();
  void set_allocated_empty_key_string_to_int1(::proto_util_converter::testing::StringtoInt* empty_key_string_to_int1);
  private:
  const ::proto_util_converter::testing::StringtoInt& _internal_empty_key_string_to_int1() const;
  ::proto_util_converter::testing::StringtoInt* _internal_mutable_empty_key_string_to_int1();
  public:
  void unsafe_arena_set_allocated_empty_key_string_to_int1(
      ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int1);
  ::proto_util_converter::testing::StringtoInt* unsafe_arena_release_empty_key_string_to_int1();

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
  bool has_empty_key_string_to_int2() const;
  private:
  bool _internal_has_empty_key_string_to_int2() const;
  public:
  void clear_empty_key_string_to_int2();
  const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int2() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::StringtoInt* release_empty_key_string_to_int2();
  ::proto_util_converter::testing::StringtoInt* mutable_empty_key_string_to_int2();
  void set_allocated_empty_key_string_to_int2(::proto_util_converter::testing::StringtoInt* empty_key_string_to_int2);
  private:
  const ::proto_util_converter::testing::StringtoInt& _internal_empty_key_string_to_int2() const;
  ::proto_util_converter::testing::StringtoInt* _internal_mutable_empty_key_string_to_int2();
  public:
  void unsafe_arena_set_allocated_empty_key_string_to_int2(
      ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int2);
  ::proto_util_converter::testing::StringtoInt* unsafe_arena_release_empty_key_string_to_int2();

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
  bool has_empty_key_string_to_int3() const;
  private:
  bool _internal_has_empty_key_string_to_int3() const;
  public:
  void clear_empty_key_string_to_int3();
  const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int3() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::StringtoInt* release_empty_key_string_to_int3();
  ::proto_util_converter::testing::StringtoInt* mutable_empty_key_string_to_int3();
  void set_allocated_empty_key_string_to_int3(::proto_util_converter::testing::StringtoInt* empty_key_string_to_int3);
  private:
  const ::proto_util_converter::testing::StringtoInt& _internal_empty_key_string_to_int3() const;
  ::proto_util_converter::testing::StringtoInt* _internal_mutable_empty_key_string_to_int3();
  public:
  void unsafe_arena_set_allocated_empty_key_string_to_int3(
      ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int3);
  ::proto_util_converter::testing::StringtoInt* unsafe_arena_release_empty_key_string_to_int3();

  // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
  bool has_empty_key_bool_to_string() const;
  private:
  bool _internal_has_empty_key_bool_to_string() const;
  public:
  void clear_empty_key_bool_to_string();
  const ::proto_util_converter::testing::BoolToString& empty_key_bool_to_string() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::BoolToString* release_empty_key_bool_to_string();
  ::proto_util_converter::testing::BoolToString* mutable_empty_key_bool_to_string();
  void set_allocated_empty_key_bool_to_string(::proto_util_converter::testing::BoolToString* empty_key_bool_to_string);
  private:
  const ::proto_util_converter::testing::BoolToString& _internal_empty_key_bool_to_string() const;
  ::proto_util_converter::testing::BoolToString* _internal_mutable_empty_key_bool_to_string();
  public:
  void unsafe_arena_set_allocated_empty_key_bool_to_string(
      ::proto_util_converter::testing::BoolToString* empty_key_bool_to_string);
  ::proto_util_converter::testing::BoolToString* unsafe_arena_release_empty_key_bool_to_string();

  // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
  bool has_empty_key_int_to_string() const;
  private:
  bool _internal_has_empty_key_int_to_string() const;
  public:
  void clear_empty_key_int_to_string();
  const ::proto_util_converter::testing::IntToString& empty_key_int_to_string() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::IntToString* release_empty_key_int_to_string();
  ::proto_util_converter::testing::IntToString* mutable_empty_key_int_to_string();
  void set_allocated_empty_key_int_to_string(::proto_util_converter::testing::IntToString* empty_key_int_to_string);
  private:
  const ::proto_util_converter::testing::IntToString& _internal_empty_key_int_to_string() const;
  ::proto_util_converter::testing::IntToString* _internal_mutable_empty_key_int_to_string();
  public:
  void unsafe_arena_set_allocated_empty_key_int_to_string(
      ::proto_util_converter::testing::IntToString* empty_key_int_to_string);
  ::proto_util_converter::testing::IntToString* unsafe_arena_release_empty_key_int_to_string();

  // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
  bool has_empty_key_mixed() const;
  private:
  bool _internal_has_empty_key_mixed() const;
  public:
  void clear_empty_key_mixed();
  const ::proto_util_converter::testing::Mixed1& empty_key_mixed() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Mixed1* release_empty_key_mixed();
  ::proto_util_converter::testing::Mixed1* mutable_empty_key_mixed();
  void set_allocated_empty_key_mixed(::proto_util_converter::testing::Mixed1* empty_key_mixed);
  private:
  const ::proto_util_converter::testing::Mixed1& _internal_empty_key_mixed() const;
  ::proto_util_converter::testing::Mixed1* _internal_mutable_empty_key_mixed();
  public:
  void unsafe_arena_set_allocated_empty_key_mixed(
      ::proto_util_converter::testing::Mixed1* empty_key_mixed);
  ::proto_util_converter::testing::Mixed1* unsafe_arena_release_empty_key_mixed();

  // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
  bool has_empty_key_map_objects() const;
  private:
  bool _internal_has_empty_key_map_objects() const;
  public:
  void clear_empty_key_map_objects();
  const ::proto_util_converter::testing::MapOfObjects& empty_key_map_objects() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::MapOfObjects* release_empty_key_map_objects();
  ::proto_util_converter::testing::MapOfObjects* mutable_empty_key_map_objects();
  void set_allocated_empty_key_map_objects(::proto_util_converter::testing::MapOfObjects* empty_key_map_objects);
  private:
  const ::proto_util_converter::testing::MapOfObjects& _internal_empty_key_map_objects() const;
  ::proto_util_converter::testing::MapOfObjects* _internal_mutable_empty_key_map_objects();
  public:
  void unsafe_arena_set_allocated_empty_key_map_objects(
      ::proto_util_converter::testing::MapOfObjects* empty_key_map_objects);
  ::proto_util_converter::testing::MapOfObjects* unsafe_arena_release_empty_key_map_objects();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapsTestCases)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto_util_converter::testing::EmptyMap* empty_map_;
  ::proto_util_converter::testing::StringtoInt* string_to_int_;
  ::proto_util_converter::testing::IntToString* int_to_string_;
  ::proto_util_converter::testing::Mixed1* mixed1_;
  ::proto_util_converter::testing::Mixed2* mixed2_;
  ::proto_util_converter::testing::MapOfObjects* map_of_objects_;
  ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int1_;
  ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int2_;
  ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int3_;
  ::proto_util_converter::testing::BoolToString* empty_key_bool_to_string_;
  ::proto_util_converter::testing::IntToString* empty_key_int_to_string_;
  ::proto_util_converter::testing::Mixed1* empty_key_mixed_;
  ::proto_util_converter::testing::MapOfObjects* empty_key_map_objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class EmptyMap_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EmptyMap_MapEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EmptyMap_MapEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  EmptyMap_MapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR EmptyMap_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EmptyMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EmptyMap_MapEntry_DoNotUse& other);
  static const EmptyMap_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EmptyMap_MapEntry_DoNotUse*>(&_EmptyMap_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class EmptyMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.EmptyMap) */ {
 public:
  inline EmptyMap() : EmptyMap(nullptr) {}
  ~EmptyMap() override;
  explicit PROTOBUF_CONSTEXPR EmptyMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyMap(const EmptyMap& from);
  EmptyMap(EmptyMap&& from) noexcept
    : EmptyMap() {
    *this = ::std::move(from);
  }

  inline EmptyMap& operator=(const EmptyMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyMap& operator=(EmptyMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyMap* internal_default_instance() {
    return reinterpret_cast<const EmptyMap*>(
               &_EmptyMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmptyMap& a, EmptyMap& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptyMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmptyMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EmptyMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.EmptyMap";
  }
  protected:
  explicit EmptyMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<int32, int32> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.EmptyMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EmptyMap_MapEntry_DoNotUse,
      int32_t, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class StringtoInt_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StringtoInt_MapEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StringtoInt_MapEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  StringtoInt_MapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StringtoInt_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StringtoInt_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StringtoInt_MapEntry_DoNotUse& other);
  static const StringtoInt_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StringtoInt_MapEntry_DoNotUse*>(&_StringtoInt_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.StringtoInt.MapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class StringtoInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.StringtoInt) */ {
 public:
  inline StringtoInt() : StringtoInt(nullptr) {}
  ~StringtoInt() override;
  explicit PROTOBUF_CONSTEXPR StringtoInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringtoInt(const StringtoInt& from);
  StringtoInt(StringtoInt&& from) noexcept
    : StringtoInt() {
    *this = ::std::move(from);
  }

  inline StringtoInt& operator=(const StringtoInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringtoInt& operator=(StringtoInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringtoInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringtoInt* internal_default_instance() {
    return reinterpret_cast<const StringtoInt*>(
               &_StringtoInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringtoInt& a, StringtoInt& b) {
    a.Swap(&b);
  }
  inline void Swap(StringtoInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringtoInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringtoInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringtoInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringtoInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringtoInt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringtoInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.StringtoInt";
  }
  protected:
  explicit StringtoInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<string, int32> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.StringtoInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StringtoInt_MapEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class IntToString_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IntToString_MapEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IntToString_MapEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  IntToString_MapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR IntToString_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit IntToString_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const IntToString_MapEntry_DoNotUse& other);
  static const IntToString_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IntToString_MapEntry_DoNotUse*>(&_IntToString_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.IntToString.MapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class IntToString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.IntToString) */ {
 public:
  inline IntToString() : IntToString(nullptr) {}
  ~IntToString() override;
  explicit PROTOBUF_CONSTEXPR IntToString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntToString(const IntToString& from);
  IntToString(IntToString&& from) noexcept
    : IntToString() {
    *this = ::std::move(from);
  }

  inline IntToString& operator=(const IntToString& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntToString& operator=(IntToString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntToString& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntToString* internal_default_instance() {
    return reinterpret_cast<const IntToString*>(
               &_IntToString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IntToString& a, IntToString& b) {
    a.Swap(&b);
  }
  inline void Swap(IntToString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntToString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntToString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntToString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntToString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IntToString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntToString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.IntToString";
  }
  protected:
  explicit IntToString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<int32, string> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.IntToString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      IntToString_MapEntry_DoNotUse,
      int32_t, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class BoolToString_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BoolToString_MapEntry_DoNotUse, 
    bool, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BoolToString_MapEntry_DoNotUse, 
    bool, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  BoolToString_MapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR BoolToString_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BoolToString_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BoolToString_MapEntry_DoNotUse& other);
  static const BoolToString_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BoolToString_MapEntry_DoNotUse*>(&_BoolToString_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.BoolToString.MapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class BoolToString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.BoolToString) */ {
 public:
  inline BoolToString() : BoolToString(nullptr) {}
  ~BoolToString() override;
  explicit PROTOBUF_CONSTEXPR BoolToString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolToString(const BoolToString& from);
  BoolToString(BoolToString&& from) noexcept
    : BoolToString() {
    *this = ::std::move(from);
  }

  inline BoolToString& operator=(const BoolToString& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolToString& operator=(BoolToString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolToString& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolToString* internal_default_instance() {
    return reinterpret_cast<const BoolToString*>(
               &_BoolToString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BoolToString& a, BoolToString& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolToString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolToString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolToString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolToString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolToString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolToString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolToString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.BoolToString";
  }
  protected:
  explicit BoolToString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<bool, string> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.BoolToString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BoolToString_MapEntry_DoNotUse,
      bool, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class Mixed1_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Mixed1_MapEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Mixed1_MapEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  Mixed1_MapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Mixed1_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Mixed1_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Mixed1_MapEntry_DoNotUse& other);
  static const Mixed1_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Mixed1_MapEntry_DoNotUse*>(&_Mixed1_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.Mixed1.MapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class Mixed1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Mixed1) */ {
 public:
  inline Mixed1() : Mixed1(nullptr) {}
  ~Mixed1() override;
  explicit PROTOBUF_CONSTEXPR Mixed1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mixed1(const Mixed1& from);
  Mixed1(Mixed1&& from) noexcept
    : Mixed1() {
    *this = ::std::move(from);
  }

  inline Mixed1& operator=(const Mixed1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mixed1& operator=(Mixed1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mixed1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mixed1* internal_default_instance() {
    return reinterpret_cast<const Mixed1*>(
               &_Mixed1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Mixed1& a, Mixed1& b) {
    a.Swap(&b);
  }
  inline void Swap(Mixed1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mixed1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mixed1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mixed1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mixed1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mixed1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mixed1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Mixed1";
  }
  protected:
  explicit Mixed1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kMsgFieldNumber = 1,
  };
  // map<string, float> map = 2;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_map();

  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Mixed1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Mixed1_MapEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class Mixed2_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Mixed2_MapEntry_DoNotUse, 
    int32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Mixed2_MapEntry_DoNotUse, 
    int32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  Mixed2_MapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Mixed2_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Mixed2_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Mixed2_MapEntry_DoNotUse& other);
  static const Mixed2_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Mixed2_MapEntry_DoNotUse*>(&_Mixed2_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class Mixed2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Mixed2) */ {
 public:
  inline Mixed2() : Mixed2(nullptr) {}
  ~Mixed2() override;
  explicit PROTOBUF_CONSTEXPR Mixed2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mixed2(const Mixed2& from);
  Mixed2(Mixed2&& from) noexcept
    : Mixed2() {
    *this = ::std::move(from);
  }

  inline Mixed2& operator=(const Mixed2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mixed2& operator=(Mixed2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mixed2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mixed2* internal_default_instance() {
    return reinterpret_cast<const Mixed2*>(
               &_Mixed2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Mixed2& a, Mixed2& b) {
    a.Swap(&b);
  }
  inline void Swap(Mixed2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mixed2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mixed2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mixed2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mixed2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mixed2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mixed2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Mixed2";
  }
  protected:
  explicit Mixed2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Mixed2_E E;
  static constexpr E E0 =
    Mixed2_E_E0;
  static constexpr E E1 =
    Mixed2_E_E1;
  static constexpr E E2 =
    Mixed2_E_E2;
  static constexpr E E3 =
    Mixed2_E_E3;
  static inline bool E_IsValid(int value) {
    return Mixed2_E_IsValid(value);
  }
  static constexpr E E_MIN =
    Mixed2_E_E_MIN;
  static constexpr E E_MAX =
    Mixed2_E_E_MAX;
  static constexpr int E_ARRAYSIZE =
    Mixed2_E_E_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E_descriptor() {
    return Mixed2_E_descriptor();
  }
  template<typename T>
  static inline const std::string& E_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E_Name.");
    return Mixed2_E_Name(enum_t_value);
  }
  static inline bool E_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      E* value) {
    return Mixed2_E_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
    kEeFieldNumber = 2,
  };
  // map<int32, bool> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
      mutable_map();

  // .proto_util_converter.testing.Mixed2.E ee = 2;
  void clear_ee();
  ::proto_util_converter::testing::Mixed2_E ee() const;
  void set_ee(::proto_util_converter::testing::Mixed2_E value);
  private:
  ::proto_util_converter::testing::Mixed2_E _internal_ee() const;
  void _internal_set_ee(::proto_util_converter::testing::Mixed2_E value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Mixed2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Mixed2_MapEntry_DoNotUse,
      int32_t, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> map_;
  int ee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapOfObjects_M final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOfObjects.M) */ {
 public:
  inline MapOfObjects_M() : MapOfObjects_M(nullptr) {}
  ~MapOfObjects_M() override;
  explicit PROTOBUF_CONSTEXPR MapOfObjects_M(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapOfObjects_M(const MapOfObjects_M& from);
  MapOfObjects_M(MapOfObjects_M&& from) noexcept
    : MapOfObjects_M() {
    *this = ::std::move(from);
  }

  inline MapOfObjects_M& operator=(const MapOfObjects_M& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOfObjects_M& operator=(MapOfObjects_M&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapOfObjects_M& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapOfObjects_M* internal_default_instance() {
    return reinterpret_cast<const MapOfObjects_M*>(
               &_MapOfObjects_M_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MapOfObjects_M& a, MapOfObjects_M& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOfObjects_M* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapOfObjects_M* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapOfObjects_M* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapOfObjects_M>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapOfObjects_M& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapOfObjects_M& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOfObjects_M* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOfObjects.M";
  }
  protected:
  explicit MapOfObjects_M(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerTextFieldNumber = 1,
  };
  // string inner_text = 1;
  void clear_inner_text();
  const std::string& inner_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inner_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inner_text();
  PROTOBUF_NODISCARD std::string* release_inner_text();
  void set_allocated_inner_text(std::string* inner_text);
  private:
  const std::string& _internal_inner_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inner_text(const std::string& value);
  std::string* _internal_mutable_inner_text();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOfObjects.M)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapOfObjects_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOfObjects_MapEntry_DoNotUse, 
    std::string, ::proto_util_converter::testing::MapOfObjects_M,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOfObjects_MapEntry_DoNotUse, 
    std::string, ::proto_util_converter::testing::MapOfObjects_M,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MapOfObjects_MapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MapOfObjects_MapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapOfObjects_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapOfObjects_MapEntry_DoNotUse& other);
  static const MapOfObjects_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapOfObjects_MapEntry_DoNotUse*>(&_MapOfObjects_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapOfObjects.MapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class MapOfObjects final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOfObjects) */ {
 public:
  inline MapOfObjects() : MapOfObjects(nullptr) {}
  ~MapOfObjects() override;
  explicit PROTOBUF_CONSTEXPR MapOfObjects(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapOfObjects(const MapOfObjects& from);
  MapOfObjects(MapOfObjects&& from) noexcept
    : MapOfObjects() {
    *this = ::std::move(from);
  }

  inline MapOfObjects& operator=(const MapOfObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOfObjects& operator=(MapOfObjects&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapOfObjects& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapOfObjects* internal_default_instance() {
    return reinterpret_cast<const MapOfObjects*>(
               &_MapOfObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MapOfObjects& a, MapOfObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOfObjects* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapOfObjects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapOfObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapOfObjects>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapOfObjects& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapOfObjects& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOfObjects* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOfObjects";
  }
  protected:
  explicit MapOfObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MapOfObjects_M M;

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOfObjects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapOfObjects_MapEntry_DoNotUse,
      std::string, ::proto_util_converter::testing::MapOfObjects_M,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class DummyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.DummyRequest) */ {
 public:
  inline DummyRequest() : DummyRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DummyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DummyRequest(const DummyRequest& from);
  DummyRequest(DummyRequest&& from) noexcept
    : DummyRequest() {
    *this = ::std::move(from);
  }

  inline DummyRequest& operator=(const DummyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyRequest& operator=(DummyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DummyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DummyRequest* internal_default_instance() {
    return reinterpret_cast<const DummyRequest*>(
               &_DummyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DummyRequest& a, DummyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DummyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DummyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DummyRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DummyRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.DummyRequest";
  }
  protected:
  explicit DummyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.DummyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapIn_MapInputEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapIn_MapInputEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapIn_MapInputEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MapIn_MapInputEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MapIn_MapInputEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapIn_MapInputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapIn_MapInputEntry_DoNotUse& other);
  static const MapIn_MapInputEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapIn_MapInputEntry_DoNotUse*>(&_MapIn_MapInputEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapIn.MapInputEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapIn.MapInputEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class MapIn_MapAnyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapIn_MapAnyEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapIn_MapAnyEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MapIn_MapAnyEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MapIn_MapAnyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapIn_MapAnyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapIn_MapAnyEntry_DoNotUse& other);
  static const MapIn_MapAnyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapIn_MapAnyEntry_DoNotUse*>(&_MapIn_MapAnyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapIn.MapAnyEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class MapIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapIn) */ {
 public:
  inline MapIn() : MapIn(nullptr) {}
  ~MapIn() override;
  explicit PROTOBUF_CONSTEXPR MapIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapIn(const MapIn& from);
  MapIn(MapIn&& from) noexcept
    : MapIn() {
    *this = ::std::move(from);
  }

  inline MapIn& operator=(const MapIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapIn& operator=(MapIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapIn* internal_default_instance() {
    return reinterpret_cast<const MapIn*>(
               &_MapIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MapIn& a, MapIn& b) {
    a.Swap(&b);
  }
  inline void Swap(MapIn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapIn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapIn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapIn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapIn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapIn";
  }
  protected:
  explicit MapIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kThingsFieldNumber = 2,
    kMapInputFieldNumber = 3,
    kMapAnyFieldNumber = 4,
    kOtherFieldNumber = 1,
  };
  // repeated string things = 2;
  int things_size() const;
  private:
  int _internal_things_size() const;
  public:
  void clear_things();
  const std::string& things(int index) const;
  std::string* mutable_things(int index);
  void set_things(int index, const std::string& value);
  void set_things(int index, std::string&& value);
  void set_things(int index, const char* value);
  void set_things(int index, const char* value, size_t size);
  std::string* add_things();
  void add_things(const std::string& value);
  void add_things(std::string&& value);
  void add_things(const char* value);
  void add_things(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& things() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_things();
  private:
  const std::string& _internal_things(int index) const;
  std::string* _internal_add_things();
  public:

  // map<string, string> map_input = 3;
  int map_input_size() const;
  private:
  int _internal_map_input_size() const;
  public:
  void clear_map_input();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_map_input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_map_input();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_input();

  // map<string, .google.protobuf.Any> map_any = 4;
  int map_any_size() const;
  private:
  int _internal_map_any_size() const;
  public:
  void clear_map_any();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
      _internal_map_any() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_map_any();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
      map_any() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_map_any();

  // string other = 1;
  void clear_other();
  const std::string& other() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_other(ArgT0&& arg0, ArgT... args);
  std::string* mutable_other();
  PROTOBUF_NODISCARD std::string* release_other();
  void set_allocated_other(std::string* other);
  private:
  const std::string& _internal_other() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other(const std::string& value);
  std::string* _internal_mutable_other();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> things_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapIn_MapInputEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map_input_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapIn_MapAnyEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::Any,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map_any_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapOut_Map1Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOut_Map1Entry_DoNotUse, 
    std::string, ::proto_util_converter::testing::MapM,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOut_Map1Entry_DoNotUse, 
    std::string, ::proto_util_converter::testing::MapM,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MapOut_Map1Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MapOut_Map1Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapOut_Map1Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapOut_Map1Entry_DoNotUse& other);
  static const MapOut_Map1Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapOut_Map1Entry_DoNotUse*>(&_MapOut_Map1Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapOut.Map1Entry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class MapOut_Map2Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOut_Map2Entry_DoNotUse, 
    std::string, ::proto_util_converter::testing::MapOut,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOut_Map2Entry_DoNotUse, 
    std::string, ::proto_util_converter::testing::MapOut,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  MapOut_Map2Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MapOut_Map2Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapOut_Map2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapOut_Map2Entry_DoNotUse& other);
  static const MapOut_Map2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapOut_Map2Entry_DoNotUse*>(&_MapOut_Map2Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapOut.Map2Entry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class MapOut_Map3Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOut_Map3Entry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOut_Map3Entry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MapOut_Map3Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MapOut_Map3Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapOut_Map3Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapOut_Map3Entry_DoNotUse& other);
  static const MapOut_Map3Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapOut_Map3Entry_DoNotUse*>(&_MapOut_Map3Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapOut.Map3Entry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class MapOut_Map4Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOut_Map4Entry_DoNotUse, 
    bool, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOut_Map4Entry_DoNotUse, 
    bool, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MapOut_Map4Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MapOut_Map4Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MapOut_Map4Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapOut_Map4Entry_DoNotUse& other);
  static const MapOut_Map4Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapOut_Map4Entry_DoNotUse*>(&_MapOut_Map4Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapOut.Map4Entry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};

// -------------------------------------------------------------------

class MapOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOut) */ {
 public:
  inline MapOut() : MapOut(nullptr) {}
  ~MapOut() override;
  explicit PROTOBUF_CONSTEXPR MapOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapOut(const MapOut& from);
  MapOut(MapOut&& from) noexcept
    : MapOut() {
    *this = ::std::move(from);
  }

  inline MapOut& operator=(const MapOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOut& operator=(MapOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapOut* internal_default_instance() {
    return reinterpret_cast<const MapOut*>(
               &_MapOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MapOut& a, MapOut& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOut";
  }
  protected:
  explicit MapOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMap1FieldNumber = 1,
    kMap2FieldNumber = 2,
    kMap3FieldNumber = 3,
    kMap4FieldNumber = 5,
    kBarFieldNumber = 4,
  };
  // map<string, .proto_util_converter.testing.MapM> map1 = 1;
  int map1_size() const;
  private:
  int _internal_map1_size() const;
  public:
  void clear_map1();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >&
      _internal_map1() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >*
      _internal_mutable_map1();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >&
      map1() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >*
      mutable_map1();

  // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
  int map2_size() const;
  private:
  int _internal_map2_size() const;
  public:
  void clear_map2();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >&
      _internal_map2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >*
      _internal_mutable_map2();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >&
      map2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >*
      mutable_map2();

  // map<int32, string> map3 = 3;
  int map3_size() const;
  private:
  int _internal_map3_size() const;
  public:
  void clear_map3();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_map3() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_map3();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      map3() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_map3();

  // map<bool, string> map4 = 5;
  int map4_size() const;
  private:
  int _internal_map4_size() const;
  public:
  void clear_map4();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >&
      _internal_map4() const;
  ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >*
      _internal_mutable_map4();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >&
      map4() const;
  ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >*
      mutable_map4();

  // string bar = 4;
  void clear_bar();
  const std::string& bar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar();
  PROTOBUF_NODISCARD std::string* release_bar();
  void set_allocated_bar(std::string* bar);
  private:
  const std::string& _internal_bar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar(const std::string& value);
  std::string* _internal_mutable_bar();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapOut_Map1Entry_DoNotUse,
      std::string, ::proto_util_converter::testing::MapM,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map1_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapOut_Map2Entry_DoNotUse,
      std::string, ::proto_util_converter::testing::MapOut,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map2_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapOut_Map3Entry_DoNotUse,
      int32_t, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map3_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapOut_Map4Entry_DoNotUse,
      bool, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapOutWireFormat_Map1Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOutWireFormat.Map1Entry) */ {
 public:
  inline MapOutWireFormat_Map1Entry() : MapOutWireFormat_Map1Entry(nullptr) {}
  ~MapOutWireFormat_Map1Entry() override;
  explicit PROTOBUF_CONSTEXPR MapOutWireFormat_Map1Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapOutWireFormat_Map1Entry(const MapOutWireFormat_Map1Entry& from);
  MapOutWireFormat_Map1Entry(MapOutWireFormat_Map1Entry&& from) noexcept
    : MapOutWireFormat_Map1Entry() {
    *this = ::std::move(from);
  }

  inline MapOutWireFormat_Map1Entry& operator=(const MapOutWireFormat_Map1Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOutWireFormat_Map1Entry& operator=(MapOutWireFormat_Map1Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapOutWireFormat_Map1Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapOutWireFormat_Map1Entry* internal_default_instance() {
    return reinterpret_cast<const MapOutWireFormat_Map1Entry*>(
               &_MapOutWireFormat_Map1Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MapOutWireFormat_Map1Entry& a, MapOutWireFormat_Map1Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOutWireFormat_Map1Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapOutWireFormat_Map1Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapOutWireFormat_Map1Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapOutWireFormat_Map1Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapOutWireFormat_Map1Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapOutWireFormat_Map1Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOutWireFormat_Map1Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOutWireFormat.Map1Entry";
  }
  protected:
  explicit MapOutWireFormat_Map1Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .proto_util_converter.testing.MapM value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::proto_util_converter::testing::MapM& value() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::MapM* release_value();
  ::proto_util_converter::testing::MapM* mutable_value();
  void set_allocated_value(::proto_util_converter::testing::MapM* value);
  private:
  const ::proto_util_converter::testing::MapM& _internal_value() const;
  ::proto_util_converter::testing::MapM* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::proto_util_converter::testing::MapM* value);
  ::proto_util_converter::testing::MapM* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::proto_util_converter::testing::MapM* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapOutWireFormat_Map2Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOutWireFormat.Map2Entry) */ {
 public:
  inline MapOutWireFormat_Map2Entry() : MapOutWireFormat_Map2Entry(nullptr) {}
  ~MapOutWireFormat_Map2Entry() override;
  explicit PROTOBUF_CONSTEXPR MapOutWireFormat_Map2Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapOutWireFormat_Map2Entry(const MapOutWireFormat_Map2Entry& from);
  MapOutWireFormat_Map2Entry(MapOutWireFormat_Map2Entry&& from) noexcept
    : MapOutWireFormat_Map2Entry() {
    *this = ::std::move(from);
  }

  inline MapOutWireFormat_Map2Entry& operator=(const MapOutWireFormat_Map2Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOutWireFormat_Map2Entry& operator=(MapOutWireFormat_Map2Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapOutWireFormat_Map2Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapOutWireFormat_Map2Entry* internal_default_instance() {
    return reinterpret_cast<const MapOutWireFormat_Map2Entry*>(
               &_MapOutWireFormat_Map2Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MapOutWireFormat_Map2Entry& a, MapOutWireFormat_Map2Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOutWireFormat_Map2Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapOutWireFormat_Map2Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapOutWireFormat_Map2Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapOutWireFormat_Map2Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapOutWireFormat_Map2Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapOutWireFormat_Map2Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOutWireFormat_Map2Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOutWireFormat.Map2Entry";
  }
  protected:
  explicit MapOutWireFormat_Map2Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .proto_util_converter.testing.MapOut value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::proto_util_converter::testing::MapOut& value() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::MapOut* release_value();
  ::proto_util_converter::testing::MapOut* mutable_value();
  void set_allocated_value(::proto_util_converter::testing::MapOut* value);
  private:
  const ::proto_util_converter::testing::MapOut& _internal_value() const;
  ::proto_util_converter::testing::MapOut* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::proto_util_converter::testing::MapOut* value);
  ::proto_util_converter::testing::MapOut* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::proto_util_converter::testing::MapOut* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapOutWireFormat_Map3Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOutWireFormat.Map3Entry) */ {
 public:
  inline MapOutWireFormat_Map3Entry() : MapOutWireFormat_Map3Entry(nullptr) {}
  ~MapOutWireFormat_Map3Entry() override;
  explicit PROTOBUF_CONSTEXPR MapOutWireFormat_Map3Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapOutWireFormat_Map3Entry(const MapOutWireFormat_Map3Entry& from);
  MapOutWireFormat_Map3Entry(MapOutWireFormat_Map3Entry&& from) noexcept
    : MapOutWireFormat_Map3Entry() {
    *this = ::std::move(from);
  }

  inline MapOutWireFormat_Map3Entry& operator=(const MapOutWireFormat_Map3Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOutWireFormat_Map3Entry& operator=(MapOutWireFormat_Map3Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapOutWireFormat_Map3Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapOutWireFormat_Map3Entry* internal_default_instance() {
    return reinterpret_cast<const MapOutWireFormat_Map3Entry*>(
               &_MapOutWireFormat_Map3Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MapOutWireFormat_Map3Entry& a, MapOutWireFormat_Map3Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOutWireFormat_Map3Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapOutWireFormat_Map3Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapOutWireFormat_Map3Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapOutWireFormat_Map3Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapOutWireFormat_Map3Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapOutWireFormat_Map3Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOutWireFormat_Map3Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOutWireFormat.Map3Entry";
  }
  protected:
  explicit MapOutWireFormat_Map3Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 key = 1;
  void clear_key();
  int32_t key() const;
  void set_key(int32_t value);
  private:
  int32_t _internal_key() const;
  void _internal_set_key(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int32_t key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapOutWireFormat_Map4Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOutWireFormat.Map4Entry) */ {
 public:
  inline MapOutWireFormat_Map4Entry() : MapOutWireFormat_Map4Entry(nullptr) {}
  ~MapOutWireFormat_Map4Entry() override;
  explicit PROTOBUF_CONSTEXPR MapOutWireFormat_Map4Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapOutWireFormat_Map4Entry(const MapOutWireFormat_Map4Entry& from);
  MapOutWireFormat_Map4Entry(MapOutWireFormat_Map4Entry&& from) noexcept
    : MapOutWireFormat_Map4Entry() {
    *this = ::std::move(from);
  }

  inline MapOutWireFormat_Map4Entry& operator=(const MapOutWireFormat_Map4Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOutWireFormat_Map4Entry& operator=(MapOutWireFormat_Map4Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapOutWireFormat_Map4Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapOutWireFormat_Map4Entry* internal_default_instance() {
    return reinterpret_cast<const MapOutWireFormat_Map4Entry*>(
               &_MapOutWireFormat_Map4Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MapOutWireFormat_Map4Entry& a, MapOutWireFormat_Map4Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOutWireFormat_Map4Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapOutWireFormat_Map4Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapOutWireFormat_Map4Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapOutWireFormat_Map4Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapOutWireFormat_Map4Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapOutWireFormat_Map4Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOutWireFormat_Map4Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOutWireFormat.Map4Entry";
  }
  protected:
  explicit MapOutWireFormat_Map4Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool key = 1;
  void clear_key();
  bool key() const;
  void set_key(bool value);
  private:
  bool _internal_key() const;
  void _internal_set_key(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapOutWireFormat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOutWireFormat) */ {
 public:
  inline MapOutWireFormat() : MapOutWireFormat(nullptr) {}
  ~MapOutWireFormat() override;
  explicit PROTOBUF_CONSTEXPR MapOutWireFormat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapOutWireFormat(const MapOutWireFormat& from);
  MapOutWireFormat(MapOutWireFormat&& from) noexcept
    : MapOutWireFormat() {
    *this = ::std::move(from);
  }

  inline MapOutWireFormat& operator=(const MapOutWireFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOutWireFormat& operator=(MapOutWireFormat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapOutWireFormat& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapOutWireFormat* internal_default_instance() {
    return reinterpret_cast<const MapOutWireFormat*>(
               &_MapOutWireFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MapOutWireFormat& a, MapOutWireFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOutWireFormat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapOutWireFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapOutWireFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapOutWireFormat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapOutWireFormat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapOutWireFormat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOutWireFormat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOutWireFormat";
  }
  protected:
  explicit MapOutWireFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MapOutWireFormat_Map1Entry Map1Entry;
  typedef MapOutWireFormat_Map2Entry Map2Entry;
  typedef MapOutWireFormat_Map3Entry Map3Entry;
  typedef MapOutWireFormat_Map4Entry Map4Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kMap1FieldNumber = 1,
    kMap2FieldNumber = 2,
    kMap3FieldNumber = 3,
    kMap4FieldNumber = 5,
    kBarFieldNumber = 4,
  };
  // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
  int map1_size() const;
  private:
  int _internal_map1_size() const;
  public:
  void clear_map1();
  ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* mutable_map1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry >*
      mutable_map1();
  private:
  const ::proto_util_converter::testing::MapOutWireFormat_Map1Entry& _internal_map1(int index) const;
  ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* _internal_add_map1();
  public:
  const ::proto_util_converter::testing::MapOutWireFormat_Map1Entry& map1(int index) const;
  ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* add_map1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry >&
      map1() const;

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
  int map2_size() const;
  private:
  int _internal_map2_size() const;
  public:
  void clear_map2();
  ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* mutable_map2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry >*
      mutable_map2();
  private:
  const ::proto_util_converter::testing::MapOutWireFormat_Map2Entry& _internal_map2(int index) const;
  ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* _internal_add_map2();
  public:
  const ::proto_util_converter::testing::MapOutWireFormat_Map2Entry& map2(int index) const;
  ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* add_map2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry >&
      map2() const;

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
  int map3_size() const;
  private:
  int _internal_map3_size() const;
  public:
  void clear_map3();
  ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* mutable_map3(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry >*
      mutable_map3();
  private:
  const ::proto_util_converter::testing::MapOutWireFormat_Map3Entry& _internal_map3(int index) const;
  ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* _internal_add_map3();
  public:
  const ::proto_util_converter::testing::MapOutWireFormat_Map3Entry& map3(int index) const;
  ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* add_map3();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry >&
      map3() const;

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
  int map4_size() const;
  private:
  int _internal_map4_size() const;
  public:
  void clear_map4();
  ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* mutable_map4(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry >*
      mutable_map4();
  private:
  const ::proto_util_converter::testing::MapOutWireFormat_Map4Entry& _internal_map4(int index) const;
  ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* _internal_add_map4();
  public:
  const ::proto_util_converter::testing::MapOutWireFormat_Map4Entry& map4(int index) const;
  ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* add_map4();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry >&
      map4() const;

  // string bar = 4;
  void clear_bar();
  const std::string& bar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar();
  PROTOBUF_NODISCARD std::string* release_bar();
  void set_allocated_bar(std::string* bar);
  private:
  const std::string& _internal_bar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar(const std::string& value);
  std::string* _internal_mutable_bar();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOutWireFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry > map1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry > map2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry > map3_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry > map4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// -------------------------------------------------------------------

class MapM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapM) */ {
 public:
  inline MapM() : MapM(nullptr) {}
  ~MapM() override;
  explicit PROTOBUF_CONSTEXPR MapM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapM(const MapM& from);
  MapM(MapM&& from) noexcept
    : MapM() {
    *this = ::std::move(from);
  }

  inline MapM& operator=(const MapM& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapM& operator=(MapM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapM& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapM* internal_default_instance() {
    return reinterpret_cast<const MapM*>(
               &_MapM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MapM& a, MapM& b) {
    a.Swap(&b);
  }
  inline void Swap(MapM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapM";
  }
  protected:
  explicit MapM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFooFieldNumber = 1,
  };
  // string foo = 1;
  void clear_foo();
  const std::string& foo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foo();
  PROTOBUF_NODISCARD std::string* release_foo();
  void set_allocated_foo(std::string* foo);
  private:
  const std::string& _internal_foo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foo(const std::string& value);
  std::string* _internal_mutable_foo();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapsTestCases

// .proto_util_converter.testing.EmptyMap empty_map = 1;
inline bool MapsTestCases::_internal_has_empty_map() const {
  return this != internal_default_instance() && empty_map_ != nullptr;
}
inline bool MapsTestCases::has_empty_map() const {
  return _internal_has_empty_map();
}
inline void MapsTestCases::clear_empty_map() {
  if (GetArenaForAllocation() == nullptr && empty_map_ != nullptr) {
    delete empty_map_;
  }
  empty_map_ = nullptr;
}
inline const ::proto_util_converter::testing::EmptyMap& MapsTestCases::_internal_empty_map() const {
  const ::proto_util_converter::testing::EmptyMap* p = empty_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::EmptyMap&>(
      ::proto_util_converter::testing::_EmptyMap_default_instance_);
}
inline const ::proto_util_converter::testing::EmptyMap& MapsTestCases::empty_map() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.empty_map)
  return _internal_empty_map();
}
inline void MapsTestCases::unsafe_arena_set_allocated_empty_map(
    ::proto_util_converter::testing::EmptyMap* empty_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_map_);
  }
  empty_map_ = empty_map;
  if (empty_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.empty_map)
}
inline ::proto_util_converter::testing::EmptyMap* MapsTestCases::release_empty_map() {
  
  ::proto_util_converter::testing::EmptyMap* temp = empty_map_;
  empty_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::EmptyMap* MapsTestCases::unsafe_arena_release_empty_map() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.empty_map)
  
  ::proto_util_converter::testing::EmptyMap* temp = empty_map_;
  empty_map_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::EmptyMap* MapsTestCases::_internal_mutable_empty_map() {
  
  if (empty_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::EmptyMap>(GetArenaForAllocation());
    empty_map_ = p;
  }
  return empty_map_;
}
inline ::proto_util_converter::testing::EmptyMap* MapsTestCases::mutable_empty_map() {
  ::proto_util_converter::testing::EmptyMap* _msg = _internal_mutable_empty_map();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.empty_map)
  return _msg;
}
inline void MapsTestCases::set_allocated_empty_map(::proto_util_converter::testing::EmptyMap* empty_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete empty_map_;
  }
  if (empty_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_map);
    if (message_arena != submessage_arena) {
      empty_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_map, submessage_arena);
    }
    
  } else {
    
  }
  empty_map_ = empty_map;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.empty_map)
}

// .proto_util_converter.testing.StringtoInt string_to_int = 2;
inline bool MapsTestCases::_internal_has_string_to_int() const {
  return this != internal_default_instance() && string_to_int_ != nullptr;
}
inline bool MapsTestCases::has_string_to_int() const {
  return _internal_has_string_to_int();
}
inline void MapsTestCases::clear_string_to_int() {
  if (GetArenaForAllocation() == nullptr && string_to_int_ != nullptr) {
    delete string_to_int_;
  }
  string_to_int_ = nullptr;
}
inline const ::proto_util_converter::testing::StringtoInt& MapsTestCases::_internal_string_to_int() const {
  const ::proto_util_converter::testing::StringtoInt* p = string_to_int_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::StringtoInt&>(
      ::proto_util_converter::testing::_StringtoInt_default_instance_);
}
inline const ::proto_util_converter::testing::StringtoInt& MapsTestCases::string_to_int() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.string_to_int)
  return _internal_string_to_int();
}
inline void MapsTestCases::unsafe_arena_set_allocated_string_to_int(
    ::proto_util_converter::testing::StringtoInt* string_to_int) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_to_int_);
  }
  string_to_int_ = string_to_int;
  if (string_to_int) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.string_to_int)
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::release_string_to_int() {
  
  ::proto_util_converter::testing::StringtoInt* temp = string_to_int_;
  string_to_int_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::unsafe_arena_release_string_to_int() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.string_to_int)
  
  ::proto_util_converter::testing::StringtoInt* temp = string_to_int_;
  string_to_int_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::_internal_mutable_string_to_int() {
  
  if (string_to_int_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StringtoInt>(GetArenaForAllocation());
    string_to_int_ = p;
  }
  return string_to_int_;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::mutable_string_to_int() {
  ::proto_util_converter::testing::StringtoInt* _msg = _internal_mutable_string_to_int();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.string_to_int)
  return _msg;
}
inline void MapsTestCases::set_allocated_string_to_int(::proto_util_converter::testing::StringtoInt* string_to_int) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete string_to_int_;
  }
  if (string_to_int) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_to_int);
    if (message_arena != submessage_arena) {
      string_to_int = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_to_int, submessage_arena);
    }
    
  } else {
    
  }
  string_to_int_ = string_to_int;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.string_to_int)
}

// .proto_util_converter.testing.IntToString int_to_string = 3;
inline bool MapsTestCases::_internal_has_int_to_string() const {
  return this != internal_default_instance() && int_to_string_ != nullptr;
}
inline bool MapsTestCases::has_int_to_string() const {
  return _internal_has_int_to_string();
}
inline void MapsTestCases::clear_int_to_string() {
  if (GetArenaForAllocation() == nullptr && int_to_string_ != nullptr) {
    delete int_to_string_;
  }
  int_to_string_ = nullptr;
}
inline const ::proto_util_converter::testing::IntToString& MapsTestCases::_internal_int_to_string() const {
  const ::proto_util_converter::testing::IntToString* p = int_to_string_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::IntToString&>(
      ::proto_util_converter::testing::_IntToString_default_instance_);
}
inline const ::proto_util_converter::testing::IntToString& MapsTestCases::int_to_string() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.int_to_string)
  return _internal_int_to_string();
}
inline void MapsTestCases::unsafe_arena_set_allocated_int_to_string(
    ::proto_util_converter::testing::IntToString* int_to_string) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int_to_string_);
  }
  int_to_string_ = int_to_string;
  if (int_to_string) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.int_to_string)
}
inline ::proto_util_converter::testing::IntToString* MapsTestCases::release_int_to_string() {
  
  ::proto_util_converter::testing::IntToString* temp = int_to_string_;
  int_to_string_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::IntToString* MapsTestCases::unsafe_arena_release_int_to_string() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.int_to_string)
  
  ::proto_util_converter::testing::IntToString* temp = int_to_string_;
  int_to_string_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::IntToString* MapsTestCases::_internal_mutable_int_to_string() {
  
  if (int_to_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::IntToString>(GetArenaForAllocation());
    int_to_string_ = p;
  }
  return int_to_string_;
}
inline ::proto_util_converter::testing::IntToString* MapsTestCases::mutable_int_to_string() {
  ::proto_util_converter::testing::IntToString* _msg = _internal_mutable_int_to_string();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.int_to_string)
  return _msg;
}
inline void MapsTestCases::set_allocated_int_to_string(::proto_util_converter::testing::IntToString* int_to_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete int_to_string_;
  }
  if (int_to_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int_to_string);
    if (message_arena != submessage_arena) {
      int_to_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_to_string, submessage_arena);
    }
    
  } else {
    
  }
  int_to_string_ = int_to_string;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.int_to_string)
}

// .proto_util_converter.testing.Mixed1 mixed1 = 4;
inline bool MapsTestCases::_internal_has_mixed1() const {
  return this != internal_default_instance() && mixed1_ != nullptr;
}
inline bool MapsTestCases::has_mixed1() const {
  return _internal_has_mixed1();
}
inline void MapsTestCases::clear_mixed1() {
  if (GetArenaForAllocation() == nullptr && mixed1_ != nullptr) {
    delete mixed1_;
  }
  mixed1_ = nullptr;
}
inline const ::proto_util_converter::testing::Mixed1& MapsTestCases::_internal_mixed1() const {
  const ::proto_util_converter::testing::Mixed1* p = mixed1_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Mixed1&>(
      ::proto_util_converter::testing::_Mixed1_default_instance_);
}
inline const ::proto_util_converter::testing::Mixed1& MapsTestCases::mixed1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.mixed1)
  return _internal_mixed1();
}
inline void MapsTestCases::unsafe_arena_set_allocated_mixed1(
    ::proto_util_converter::testing::Mixed1* mixed1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixed1_);
  }
  mixed1_ = mixed1;
  if (mixed1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.mixed1)
}
inline ::proto_util_converter::testing::Mixed1* MapsTestCases::release_mixed1() {
  
  ::proto_util_converter::testing::Mixed1* temp = mixed1_;
  mixed1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Mixed1* MapsTestCases::unsafe_arena_release_mixed1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.mixed1)
  
  ::proto_util_converter::testing::Mixed1* temp = mixed1_;
  mixed1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Mixed1* MapsTestCases::_internal_mutable_mixed1() {
  
  if (mixed1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Mixed1>(GetArenaForAllocation());
    mixed1_ = p;
  }
  return mixed1_;
}
inline ::proto_util_converter::testing::Mixed1* MapsTestCases::mutable_mixed1() {
  ::proto_util_converter::testing::Mixed1* _msg = _internal_mutable_mixed1();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.mixed1)
  return _msg;
}
inline void MapsTestCases::set_allocated_mixed1(::proto_util_converter::testing::Mixed1* mixed1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mixed1_;
  }
  if (mixed1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mixed1);
    if (message_arena != submessage_arena) {
      mixed1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixed1, submessage_arena);
    }
    
  } else {
    
  }
  mixed1_ = mixed1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.mixed1)
}

// .proto_util_converter.testing.Mixed2 mixed2 = 5;
inline bool MapsTestCases::_internal_has_mixed2() const {
  return this != internal_default_instance() && mixed2_ != nullptr;
}
inline bool MapsTestCases::has_mixed2() const {
  return _internal_has_mixed2();
}
inline void MapsTestCases::clear_mixed2() {
  if (GetArenaForAllocation() == nullptr && mixed2_ != nullptr) {
    delete mixed2_;
  }
  mixed2_ = nullptr;
}
inline const ::proto_util_converter::testing::Mixed2& MapsTestCases::_internal_mixed2() const {
  const ::proto_util_converter::testing::Mixed2* p = mixed2_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Mixed2&>(
      ::proto_util_converter::testing::_Mixed2_default_instance_);
}
inline const ::proto_util_converter::testing::Mixed2& MapsTestCases::mixed2() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.mixed2)
  return _internal_mixed2();
}
inline void MapsTestCases::unsafe_arena_set_allocated_mixed2(
    ::proto_util_converter::testing::Mixed2* mixed2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mixed2_);
  }
  mixed2_ = mixed2;
  if (mixed2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.mixed2)
}
inline ::proto_util_converter::testing::Mixed2* MapsTestCases::release_mixed2() {
  
  ::proto_util_converter::testing::Mixed2* temp = mixed2_;
  mixed2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Mixed2* MapsTestCases::unsafe_arena_release_mixed2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.mixed2)
  
  ::proto_util_converter::testing::Mixed2* temp = mixed2_;
  mixed2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Mixed2* MapsTestCases::_internal_mutable_mixed2() {
  
  if (mixed2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Mixed2>(GetArenaForAllocation());
    mixed2_ = p;
  }
  return mixed2_;
}
inline ::proto_util_converter::testing::Mixed2* MapsTestCases::mutable_mixed2() {
  ::proto_util_converter::testing::Mixed2* _msg = _internal_mutable_mixed2();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.mixed2)
  return _msg;
}
inline void MapsTestCases::set_allocated_mixed2(::proto_util_converter::testing::Mixed2* mixed2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mixed2_;
  }
  if (mixed2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mixed2);
    if (message_arena != submessage_arena) {
      mixed2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mixed2, submessage_arena);
    }
    
  } else {
    
  }
  mixed2_ = mixed2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.mixed2)
}

// .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
inline bool MapsTestCases::_internal_has_map_of_objects() const {
  return this != internal_default_instance() && map_of_objects_ != nullptr;
}
inline bool MapsTestCases::has_map_of_objects() const {
  return _internal_has_map_of_objects();
}
inline void MapsTestCases::clear_map_of_objects() {
  if (GetArenaForAllocation() == nullptr && map_of_objects_ != nullptr) {
    delete map_of_objects_;
  }
  map_of_objects_ = nullptr;
}
inline const ::proto_util_converter::testing::MapOfObjects& MapsTestCases::_internal_map_of_objects() const {
  const ::proto_util_converter::testing::MapOfObjects* p = map_of_objects_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::MapOfObjects&>(
      ::proto_util_converter::testing::_MapOfObjects_default_instance_);
}
inline const ::proto_util_converter::testing::MapOfObjects& MapsTestCases::map_of_objects() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.map_of_objects)
  return _internal_map_of_objects();
}
inline void MapsTestCases::unsafe_arena_set_allocated_map_of_objects(
    ::proto_util_converter::testing::MapOfObjects* map_of_objects) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_of_objects_);
  }
  map_of_objects_ = map_of_objects;
  if (map_of_objects) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.map_of_objects)
}
inline ::proto_util_converter::testing::MapOfObjects* MapsTestCases::release_map_of_objects() {
  
  ::proto_util_converter::testing::MapOfObjects* temp = map_of_objects_;
  map_of_objects_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::MapOfObjects* MapsTestCases::unsafe_arena_release_map_of_objects() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.map_of_objects)
  
  ::proto_util_converter::testing::MapOfObjects* temp = map_of_objects_;
  map_of_objects_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MapOfObjects* MapsTestCases::_internal_mutable_map_of_objects() {
  
  if (map_of_objects_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MapOfObjects>(GetArenaForAllocation());
    map_of_objects_ = p;
  }
  return map_of_objects_;
}
inline ::proto_util_converter::testing::MapOfObjects* MapsTestCases::mutable_map_of_objects() {
  ::proto_util_converter::testing::MapOfObjects* _msg = _internal_mutable_map_of_objects();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.map_of_objects)
  return _msg;
}
inline void MapsTestCases::set_allocated_map_of_objects(::proto_util_converter::testing::MapOfObjects* map_of_objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete map_of_objects_;
  }
  if (map_of_objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_of_objects);
    if (message_arena != submessage_arena) {
      map_of_objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_of_objects, submessage_arena);
    }
    
  } else {
    
  }
  map_of_objects_ = map_of_objects;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.map_of_objects)
}

// .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
inline bool MapsTestCases::_internal_has_empty_key_string_to_int1() const {
  return this != internal_default_instance() && empty_key_string_to_int1_ != nullptr;
}
inline bool MapsTestCases::has_empty_key_string_to_int1() const {
  return _internal_has_empty_key_string_to_int1();
}
inline void MapsTestCases::clear_empty_key_string_to_int1() {
  if (GetArenaForAllocation() == nullptr && empty_key_string_to_int1_ != nullptr) {
    delete empty_key_string_to_int1_;
  }
  empty_key_string_to_int1_ = nullptr;
}
inline const ::proto_util_converter::testing::StringtoInt& MapsTestCases::_internal_empty_key_string_to_int1() const {
  const ::proto_util_converter::testing::StringtoInt* p = empty_key_string_to_int1_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::StringtoInt&>(
      ::proto_util_converter::testing::_StringtoInt_default_instance_);
}
inline const ::proto_util_converter::testing::StringtoInt& MapsTestCases::empty_key_string_to_int1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int1)
  return _internal_empty_key_string_to_int1();
}
inline void MapsTestCases::unsafe_arena_set_allocated_empty_key_string_to_int1(
    ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_key_string_to_int1_);
  }
  empty_key_string_to_int1_ = empty_key_string_to_int1;
  if (empty_key_string_to_int1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int1)
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::release_empty_key_string_to_int1() {
  
  ::proto_util_converter::testing::StringtoInt* temp = empty_key_string_to_int1_;
  empty_key_string_to_int1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::unsafe_arena_release_empty_key_string_to_int1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int1)
  
  ::proto_util_converter::testing::StringtoInt* temp = empty_key_string_to_int1_;
  empty_key_string_to_int1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::_internal_mutable_empty_key_string_to_int1() {
  
  if (empty_key_string_to_int1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StringtoInt>(GetArenaForAllocation());
    empty_key_string_to_int1_ = p;
  }
  return empty_key_string_to_int1_;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::mutable_empty_key_string_to_int1() {
  ::proto_util_converter::testing::StringtoInt* _msg = _internal_mutable_empty_key_string_to_int1();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int1)
  return _msg;
}
inline void MapsTestCases::set_allocated_empty_key_string_to_int1(::proto_util_converter::testing::StringtoInt* empty_key_string_to_int1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete empty_key_string_to_int1_;
  }
  if (empty_key_string_to_int1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_key_string_to_int1);
    if (message_arena != submessage_arena) {
      empty_key_string_to_int1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_key_string_to_int1, submessage_arena);
    }
    
  } else {
    
  }
  empty_key_string_to_int1_ = empty_key_string_to_int1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int1)
}

// .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
inline bool MapsTestCases::_internal_has_empty_key_string_to_int2() const {
  return this != internal_default_instance() && empty_key_string_to_int2_ != nullptr;
}
inline bool MapsTestCases::has_empty_key_string_to_int2() const {
  return _internal_has_empty_key_string_to_int2();
}
inline void MapsTestCases::clear_empty_key_string_to_int2() {
  if (GetArenaForAllocation() == nullptr && empty_key_string_to_int2_ != nullptr) {
    delete empty_key_string_to_int2_;
  }
  empty_key_string_to_int2_ = nullptr;
}
inline const ::proto_util_converter::testing::StringtoInt& MapsTestCases::_internal_empty_key_string_to_int2() const {
  const ::proto_util_converter::testing::StringtoInt* p = empty_key_string_to_int2_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::StringtoInt&>(
      ::proto_util_converter::testing::_StringtoInt_default_instance_);
}
inline const ::proto_util_converter::testing::StringtoInt& MapsTestCases::empty_key_string_to_int2() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int2)
  return _internal_empty_key_string_to_int2();
}
inline void MapsTestCases::unsafe_arena_set_allocated_empty_key_string_to_int2(
    ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_key_string_to_int2_);
  }
  empty_key_string_to_int2_ = empty_key_string_to_int2;
  if (empty_key_string_to_int2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int2)
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::release_empty_key_string_to_int2() {
  
  ::proto_util_converter::testing::StringtoInt* temp = empty_key_string_to_int2_;
  empty_key_string_to_int2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::unsafe_arena_release_empty_key_string_to_int2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int2)
  
  ::proto_util_converter::testing::StringtoInt* temp = empty_key_string_to_int2_;
  empty_key_string_to_int2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::_internal_mutable_empty_key_string_to_int2() {
  
  if (empty_key_string_to_int2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StringtoInt>(GetArenaForAllocation());
    empty_key_string_to_int2_ = p;
  }
  return empty_key_string_to_int2_;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::mutable_empty_key_string_to_int2() {
  ::proto_util_converter::testing::StringtoInt* _msg = _internal_mutable_empty_key_string_to_int2();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int2)
  return _msg;
}
inline void MapsTestCases::set_allocated_empty_key_string_to_int2(::proto_util_converter::testing::StringtoInt* empty_key_string_to_int2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete empty_key_string_to_int2_;
  }
  if (empty_key_string_to_int2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_key_string_to_int2);
    if (message_arena != submessage_arena) {
      empty_key_string_to_int2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_key_string_to_int2, submessage_arena);
    }
    
  } else {
    
  }
  empty_key_string_to_int2_ = empty_key_string_to_int2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int2)
}

// .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
inline bool MapsTestCases::_internal_has_empty_key_string_to_int3() const {
  return this != internal_default_instance() && empty_key_string_to_int3_ != nullptr;
}
inline bool MapsTestCases::has_empty_key_string_to_int3() const {
  return _internal_has_empty_key_string_to_int3();
}
inline void MapsTestCases::clear_empty_key_string_to_int3() {
  if (GetArenaForAllocation() == nullptr && empty_key_string_to_int3_ != nullptr) {
    delete empty_key_string_to_int3_;
  }
  empty_key_string_to_int3_ = nullptr;
}
inline const ::proto_util_converter::testing::StringtoInt& MapsTestCases::_internal_empty_key_string_to_int3() const {
  const ::proto_util_converter::testing::StringtoInt* p = empty_key_string_to_int3_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::StringtoInt&>(
      ::proto_util_converter::testing::_StringtoInt_default_instance_);
}
inline const ::proto_util_converter::testing::StringtoInt& MapsTestCases::empty_key_string_to_int3() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int3)
  return _internal_empty_key_string_to_int3();
}
inline void MapsTestCases::unsafe_arena_set_allocated_empty_key_string_to_int3(
    ::proto_util_converter::testing::StringtoInt* empty_key_string_to_int3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_key_string_to_int3_);
  }
  empty_key_string_to_int3_ = empty_key_string_to_int3;
  if (empty_key_string_to_int3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int3)
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::release_empty_key_string_to_int3() {
  
  ::proto_util_converter::testing::StringtoInt* temp = empty_key_string_to_int3_;
  empty_key_string_to_int3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::unsafe_arena_release_empty_key_string_to_int3() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int3)
  
  ::proto_util_converter::testing::StringtoInt* temp = empty_key_string_to_int3_;
  empty_key_string_to_int3_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::_internal_mutable_empty_key_string_to_int3() {
  
  if (empty_key_string_to_int3_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StringtoInt>(GetArenaForAllocation());
    empty_key_string_to_int3_ = p;
  }
  return empty_key_string_to_int3_;
}
inline ::proto_util_converter::testing::StringtoInt* MapsTestCases::mutable_empty_key_string_to_int3() {
  ::proto_util_converter::testing::StringtoInt* _msg = _internal_mutable_empty_key_string_to_int3();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int3)
  return _msg;
}
inline void MapsTestCases::set_allocated_empty_key_string_to_int3(::proto_util_converter::testing::StringtoInt* empty_key_string_to_int3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete empty_key_string_to_int3_;
  }
  if (empty_key_string_to_int3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_key_string_to_int3);
    if (message_arena != submessage_arena) {
      empty_key_string_to_int3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_key_string_to_int3, submessage_arena);
    }
    
  } else {
    
  }
  empty_key_string_to_int3_ = empty_key_string_to_int3;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_string_to_int3)
}

// .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
inline bool MapsTestCases::_internal_has_empty_key_bool_to_string() const {
  return this != internal_default_instance() && empty_key_bool_to_string_ != nullptr;
}
inline bool MapsTestCases::has_empty_key_bool_to_string() const {
  return _internal_has_empty_key_bool_to_string();
}
inline void MapsTestCases::clear_empty_key_bool_to_string() {
  if (GetArenaForAllocation() == nullptr && empty_key_bool_to_string_ != nullptr) {
    delete empty_key_bool_to_string_;
  }
  empty_key_bool_to_string_ = nullptr;
}
inline const ::proto_util_converter::testing::BoolToString& MapsTestCases::_internal_empty_key_bool_to_string() const {
  const ::proto_util_converter::testing::BoolToString* p = empty_key_bool_to_string_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::BoolToString&>(
      ::proto_util_converter::testing::_BoolToString_default_instance_);
}
inline const ::proto_util_converter::testing::BoolToString& MapsTestCases::empty_key_bool_to_string() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.empty_key_bool_to_string)
  return _internal_empty_key_bool_to_string();
}
inline void MapsTestCases::unsafe_arena_set_allocated_empty_key_bool_to_string(
    ::proto_util_converter::testing::BoolToString* empty_key_bool_to_string) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_key_bool_to_string_);
  }
  empty_key_bool_to_string_ = empty_key_bool_to_string;
  if (empty_key_bool_to_string) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_bool_to_string)
}
inline ::proto_util_converter::testing::BoolToString* MapsTestCases::release_empty_key_bool_to_string() {
  
  ::proto_util_converter::testing::BoolToString* temp = empty_key_bool_to_string_;
  empty_key_bool_to_string_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::BoolToString* MapsTestCases::unsafe_arena_release_empty_key_bool_to_string() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.empty_key_bool_to_string)
  
  ::proto_util_converter::testing::BoolToString* temp = empty_key_bool_to_string_;
  empty_key_bool_to_string_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::BoolToString* MapsTestCases::_internal_mutable_empty_key_bool_to_string() {
  
  if (empty_key_bool_to_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::BoolToString>(GetArenaForAllocation());
    empty_key_bool_to_string_ = p;
  }
  return empty_key_bool_to_string_;
}
inline ::proto_util_converter::testing::BoolToString* MapsTestCases::mutable_empty_key_bool_to_string() {
  ::proto_util_converter::testing::BoolToString* _msg = _internal_mutable_empty_key_bool_to_string();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.empty_key_bool_to_string)
  return _msg;
}
inline void MapsTestCases::set_allocated_empty_key_bool_to_string(::proto_util_converter::testing::BoolToString* empty_key_bool_to_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete empty_key_bool_to_string_;
  }
  if (empty_key_bool_to_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_key_bool_to_string);
    if (message_arena != submessage_arena) {
      empty_key_bool_to_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_key_bool_to_string, submessage_arena);
    }
    
  } else {
    
  }
  empty_key_bool_to_string_ = empty_key_bool_to_string;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_bool_to_string)
}

// .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
inline bool MapsTestCases::_internal_has_empty_key_int_to_string() const {
  return this != internal_default_instance() && empty_key_int_to_string_ != nullptr;
}
inline bool MapsTestCases::has_empty_key_int_to_string() const {
  return _internal_has_empty_key_int_to_string();
}
inline void MapsTestCases::clear_empty_key_int_to_string() {
  if (GetArenaForAllocation() == nullptr && empty_key_int_to_string_ != nullptr) {
    delete empty_key_int_to_string_;
  }
  empty_key_int_to_string_ = nullptr;
}
inline const ::proto_util_converter::testing::IntToString& MapsTestCases::_internal_empty_key_int_to_string() const {
  const ::proto_util_converter::testing::IntToString* p = empty_key_int_to_string_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::IntToString&>(
      ::proto_util_converter::testing::_IntToString_default_instance_);
}
inline const ::proto_util_converter::testing::IntToString& MapsTestCases::empty_key_int_to_string() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.empty_key_int_to_string)
  return _internal_empty_key_int_to_string();
}
inline void MapsTestCases::unsafe_arena_set_allocated_empty_key_int_to_string(
    ::proto_util_converter::testing::IntToString* empty_key_int_to_string) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_key_int_to_string_);
  }
  empty_key_int_to_string_ = empty_key_int_to_string;
  if (empty_key_int_to_string) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_int_to_string)
}
inline ::proto_util_converter::testing::IntToString* MapsTestCases::release_empty_key_int_to_string() {
  
  ::proto_util_converter::testing::IntToString* temp = empty_key_int_to_string_;
  empty_key_int_to_string_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::IntToString* MapsTestCases::unsafe_arena_release_empty_key_int_to_string() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.empty_key_int_to_string)
  
  ::proto_util_converter::testing::IntToString* temp = empty_key_int_to_string_;
  empty_key_int_to_string_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::IntToString* MapsTestCases::_internal_mutable_empty_key_int_to_string() {
  
  if (empty_key_int_to_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::IntToString>(GetArenaForAllocation());
    empty_key_int_to_string_ = p;
  }
  return empty_key_int_to_string_;
}
inline ::proto_util_converter::testing::IntToString* MapsTestCases::mutable_empty_key_int_to_string() {
  ::proto_util_converter::testing::IntToString* _msg = _internal_mutable_empty_key_int_to_string();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.empty_key_int_to_string)
  return _msg;
}
inline void MapsTestCases::set_allocated_empty_key_int_to_string(::proto_util_converter::testing::IntToString* empty_key_int_to_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete empty_key_int_to_string_;
  }
  if (empty_key_int_to_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_key_int_to_string);
    if (message_arena != submessage_arena) {
      empty_key_int_to_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_key_int_to_string, submessage_arena);
    }
    
  } else {
    
  }
  empty_key_int_to_string_ = empty_key_int_to_string;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_int_to_string)
}

// .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
inline bool MapsTestCases::_internal_has_empty_key_mixed() const {
  return this != internal_default_instance() && empty_key_mixed_ != nullptr;
}
inline bool MapsTestCases::has_empty_key_mixed() const {
  return _internal_has_empty_key_mixed();
}
inline void MapsTestCases::clear_empty_key_mixed() {
  if (GetArenaForAllocation() == nullptr && empty_key_mixed_ != nullptr) {
    delete empty_key_mixed_;
  }
  empty_key_mixed_ = nullptr;
}
inline const ::proto_util_converter::testing::Mixed1& MapsTestCases::_internal_empty_key_mixed() const {
  const ::proto_util_converter::testing::Mixed1* p = empty_key_mixed_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Mixed1&>(
      ::proto_util_converter::testing::_Mixed1_default_instance_);
}
inline const ::proto_util_converter::testing::Mixed1& MapsTestCases::empty_key_mixed() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.empty_key_mixed)
  return _internal_empty_key_mixed();
}
inline void MapsTestCases::unsafe_arena_set_allocated_empty_key_mixed(
    ::proto_util_converter::testing::Mixed1* empty_key_mixed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_key_mixed_);
  }
  empty_key_mixed_ = empty_key_mixed;
  if (empty_key_mixed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_mixed)
}
inline ::proto_util_converter::testing::Mixed1* MapsTestCases::release_empty_key_mixed() {
  
  ::proto_util_converter::testing::Mixed1* temp = empty_key_mixed_;
  empty_key_mixed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Mixed1* MapsTestCases::unsafe_arena_release_empty_key_mixed() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.empty_key_mixed)
  
  ::proto_util_converter::testing::Mixed1* temp = empty_key_mixed_;
  empty_key_mixed_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Mixed1* MapsTestCases::_internal_mutable_empty_key_mixed() {
  
  if (empty_key_mixed_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Mixed1>(GetArenaForAllocation());
    empty_key_mixed_ = p;
  }
  return empty_key_mixed_;
}
inline ::proto_util_converter::testing::Mixed1* MapsTestCases::mutable_empty_key_mixed() {
  ::proto_util_converter::testing::Mixed1* _msg = _internal_mutable_empty_key_mixed();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.empty_key_mixed)
  return _msg;
}
inline void MapsTestCases::set_allocated_empty_key_mixed(::proto_util_converter::testing::Mixed1* empty_key_mixed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete empty_key_mixed_;
  }
  if (empty_key_mixed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_key_mixed);
    if (message_arena != submessage_arena) {
      empty_key_mixed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_key_mixed, submessage_arena);
    }
    
  } else {
    
  }
  empty_key_mixed_ = empty_key_mixed;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_mixed)
}

// .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
inline bool MapsTestCases::_internal_has_empty_key_map_objects() const {
  return this != internal_default_instance() && empty_key_map_objects_ != nullptr;
}
inline bool MapsTestCases::has_empty_key_map_objects() const {
  return _internal_has_empty_key_map_objects();
}
inline void MapsTestCases::clear_empty_key_map_objects() {
  if (GetArenaForAllocation() == nullptr && empty_key_map_objects_ != nullptr) {
    delete empty_key_map_objects_;
  }
  empty_key_map_objects_ = nullptr;
}
inline const ::proto_util_converter::testing::MapOfObjects& MapsTestCases::_internal_empty_key_map_objects() const {
  const ::proto_util_converter::testing::MapOfObjects* p = empty_key_map_objects_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::MapOfObjects&>(
      ::proto_util_converter::testing::_MapOfObjects_default_instance_);
}
inline const ::proto_util_converter::testing::MapOfObjects& MapsTestCases::empty_key_map_objects() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapsTestCases.empty_key_map_objects)
  return _internal_empty_key_map_objects();
}
inline void MapsTestCases::unsafe_arena_set_allocated_empty_key_map_objects(
    ::proto_util_converter::testing::MapOfObjects* empty_key_map_objects) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty_key_map_objects_);
  }
  empty_key_map_objects_ = empty_key_map_objects;
  if (empty_key_map_objects) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_map_objects)
}
inline ::proto_util_converter::testing::MapOfObjects* MapsTestCases::release_empty_key_map_objects() {
  
  ::proto_util_converter::testing::MapOfObjects* temp = empty_key_map_objects_;
  empty_key_map_objects_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::MapOfObjects* MapsTestCases::unsafe_arena_release_empty_key_map_objects() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapsTestCases.empty_key_map_objects)
  
  ::proto_util_converter::testing::MapOfObjects* temp = empty_key_map_objects_;
  empty_key_map_objects_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MapOfObjects* MapsTestCases::_internal_mutable_empty_key_map_objects() {
  
  if (empty_key_map_objects_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MapOfObjects>(GetArenaForAllocation());
    empty_key_map_objects_ = p;
  }
  return empty_key_map_objects_;
}
inline ::proto_util_converter::testing::MapOfObjects* MapsTestCases::mutable_empty_key_map_objects() {
  ::proto_util_converter::testing::MapOfObjects* _msg = _internal_mutable_empty_key_map_objects();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapsTestCases.empty_key_map_objects)
  return _msg;
}
inline void MapsTestCases::set_allocated_empty_key_map_objects(::proto_util_converter::testing::MapOfObjects* empty_key_map_objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete empty_key_map_objects_;
  }
  if (empty_key_map_objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(empty_key_map_objects);
    if (message_arena != submessage_arena) {
      empty_key_map_objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_key_map_objects, submessage_arena);
    }
    
  } else {
    
  }
  empty_key_map_objects_ = empty_key_map_objects;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapsTestCases.empty_key_map_objects)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EmptyMap

// map<int32, int32> map = 1;
inline int EmptyMap::_internal_map_size() const {
  return map_.size();
}
inline int EmptyMap::map_size() const {
  return _internal_map_size();
}
inline void EmptyMap::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
EmptyMap::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
EmptyMap::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.EmptyMap.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
EmptyMap::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
EmptyMap::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.EmptyMap.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StringtoInt

// map<string, int32> map = 1;
inline int StringtoInt::_internal_map_size() const {
  return map_.size();
}
inline int StringtoInt::map_size() const {
  return _internal_map_size();
}
inline void StringtoInt::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
StringtoInt::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
StringtoInt::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.StringtoInt.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
StringtoInt::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
StringtoInt::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.StringtoInt.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IntToString

// map<int32, string> map = 1;
inline int IntToString::_internal_map_size() const {
  return map_.size();
}
inline int IntToString::map_size() const {
  return _internal_map_size();
}
inline void IntToString::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
IntToString::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
IntToString::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.IntToString.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
IntToString::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
IntToString::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.IntToString.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BoolToString

// map<bool, string> map = 1;
inline int BoolToString::_internal_map_size() const {
  return map_.size();
}
inline int BoolToString::map_size() const {
  return _internal_map_size();
}
inline void BoolToString::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >&
BoolToString::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >&
BoolToString::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.BoolToString.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >*
BoolToString::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >*
BoolToString::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.BoolToString.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Mixed1

// string msg = 1;
inline void Mixed1::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Mixed1::msg() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Mixed1.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mixed1::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Mixed1.msg)
}
inline std::string* Mixed1::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Mixed1.msg)
  return _s;
}
inline const std::string& Mixed1::_internal_msg() const {
  return msg_.Get();
}
inline void Mixed1::_internal_set_msg(const std::string& value) {
  
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* Mixed1::_internal_mutable_msg() {
  
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* Mixed1::release_msg() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Mixed1.msg)
  return msg_.Release();
}
inline void Mixed1::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Mixed1.msg)
}

// map<string, float> map = 2;
inline int Mixed1::_internal_map_size() const {
  return map_.size();
}
inline int Mixed1::map_size() const {
  return _internal_map_size();
}
inline void Mixed1::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
Mixed1::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
Mixed1::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.Mixed1.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
Mixed1::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
Mixed1::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.Mixed1.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Mixed2

// map<int32, bool> map = 1;
inline int Mixed2::_internal_map_size() const {
  return map_.size();
}
inline int Mixed2::map_size() const {
  return _internal_map_size();
}
inline void Mixed2::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
Mixed2::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
Mixed2::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.Mixed2.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
Mixed2::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
Mixed2::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.Mixed2.map)
  return _internal_mutable_map();
}

// .proto_util_converter.testing.Mixed2.E ee = 2;
inline void Mixed2::clear_ee() {
  ee_ = 0;
}
inline ::proto_util_converter::testing::Mixed2_E Mixed2::_internal_ee() const {
  return static_cast< ::proto_util_converter::testing::Mixed2_E >(ee_);
}
inline ::proto_util_converter::testing::Mixed2_E Mixed2::ee() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Mixed2.ee)
  return _internal_ee();
}
inline void Mixed2::_internal_set_ee(::proto_util_converter::testing::Mixed2_E value) {
  
  ee_ = value;
}
inline void Mixed2::set_ee(::proto_util_converter::testing::Mixed2_E value) {
  _internal_set_ee(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Mixed2.ee)
}

// -------------------------------------------------------------------

// MapOfObjects_M

// string inner_text = 1;
inline void MapOfObjects_M::clear_inner_text() {
  inner_text_.ClearToEmpty();
}
inline const std::string& MapOfObjects_M::inner_text() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOfObjects.M.inner_text)
  return _internal_inner_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapOfObjects_M::set_inner_text(ArgT0&& arg0, ArgT... args) {
 
 inner_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOfObjects.M.inner_text)
}
inline std::string* MapOfObjects_M::mutable_inner_text() {
  std::string* _s = _internal_mutable_inner_text();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOfObjects.M.inner_text)
  return _s;
}
inline const std::string& MapOfObjects_M::_internal_inner_text() const {
  return inner_text_.Get();
}
inline void MapOfObjects_M::_internal_set_inner_text(const std::string& value) {
  
  inner_text_.Set(value, GetArenaForAllocation());
}
inline std::string* MapOfObjects_M::_internal_mutable_inner_text() {
  
  return inner_text_.Mutable(GetArenaForAllocation());
}
inline std::string* MapOfObjects_M::release_inner_text() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOfObjects.M.inner_text)
  return inner_text_.Release();
}
inline void MapOfObjects_M::set_allocated_inner_text(std::string* inner_text) {
  if (inner_text != nullptr) {
    
  } else {
    
  }
  inner_text_.SetAllocated(inner_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inner_text_.IsDefault()) {
    inner_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOfObjects.M.inner_text)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapOfObjects

// map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
inline int MapOfObjects::_internal_map_size() const {
  return map_.size();
}
inline int MapOfObjects::map_size() const {
  return _internal_map_size();
}
inline void MapOfObjects::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >&
MapOfObjects::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >&
MapOfObjects::map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapOfObjects.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >*
MapOfObjects::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >*
MapOfObjects::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapOfObjects.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// DummyRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapIn

// string other = 1;
inline void MapIn::clear_other() {
  other_.ClearToEmpty();
}
inline const std::string& MapIn::other() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapIn.other)
  return _internal_other();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapIn::set_other(ArgT0&& arg0, ArgT... args) {
 
 other_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapIn.other)
}
inline std::string* MapIn::mutable_other() {
  std::string* _s = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapIn.other)
  return _s;
}
inline const std::string& MapIn::_internal_other() const {
  return other_.Get();
}
inline void MapIn::_internal_set_other(const std::string& value) {
  
  other_.Set(value, GetArenaForAllocation());
}
inline std::string* MapIn::_internal_mutable_other() {
  
  return other_.Mutable(GetArenaForAllocation());
}
inline std::string* MapIn::release_other() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapIn.other)
  return other_.Release();
}
inline void MapIn::set_allocated_other(std::string* other) {
  if (other != nullptr) {
    
  } else {
    
  }
  other_.SetAllocated(other, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (other_.IsDefault()) {
    other_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapIn.other)
}

// repeated string things = 2;
inline int MapIn::_internal_things_size() const {
  return things_.size();
}
inline int MapIn::things_size() const {
  return _internal_things_size();
}
inline void MapIn::clear_things() {
  things_.Clear();
}
inline std::string* MapIn::add_things() {
  std::string* _s = _internal_add_things();
  // @@protoc_insertion_point(field_add_mutable:proto_util_converter.testing.MapIn.things)
  return _s;
}
inline const std::string& MapIn::_internal_things(int index) const {
  return things_.Get(index);
}
inline const std::string& MapIn::things(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapIn.things)
  return _internal_things(index);
}
inline std::string* MapIn::mutable_things(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapIn.things)
  return things_.Mutable(index);
}
inline void MapIn::set_things(int index, const std::string& value) {
  things_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapIn.things)
}
inline void MapIn::set_things(int index, std::string&& value) {
  things_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapIn.things)
}
inline void MapIn::set_things(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  things_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.MapIn.things)
}
inline void MapIn::set_things(int index, const char* value, size_t size) {
  things_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.MapIn.things)
}
inline std::string* MapIn::_internal_add_things() {
  return things_.Add();
}
inline void MapIn::add_things(const std::string& value) {
  things_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.MapIn.things)
}
inline void MapIn::add_things(std::string&& value) {
  things_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.MapIn.things)
}
inline void MapIn::add_things(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  things_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto_util_converter.testing.MapIn.things)
}
inline void MapIn::add_things(const char* value, size_t size) {
  things_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto_util_converter.testing.MapIn.things)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapIn::things() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.MapIn.things)
  return things_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapIn::mutable_things() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.MapIn.things)
  return &things_;
}

// map<string, string> map_input = 3;
inline int MapIn::_internal_map_input_size() const {
  return map_input_.size();
}
inline int MapIn::map_input_size() const {
  return _internal_map_input_size();
}
inline void MapIn::clear_map_input() {
  map_input_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MapIn::_internal_map_input() const {
  return map_input_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MapIn::map_input() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapIn.map_input)
  return _internal_map_input();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MapIn::_internal_mutable_map_input() {
  return map_input_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MapIn::mutable_map_input() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapIn.map_input)
  return _internal_mutable_map_input();
}

// map<string, .google.protobuf.Any> map_any = 4;
inline int MapIn::_internal_map_any_size() const {
  return map_any_.size();
}
inline int MapIn::map_any_size() const {
  return _internal_map_any_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
MapIn::_internal_map_any() const {
  return map_any_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
MapIn::map_any() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapIn.map_any)
  return _internal_map_any();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
MapIn::_internal_mutable_map_any() {
  return map_any_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
MapIn::mutable_map_any() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapIn.map_any)
  return _internal_mutable_map_any();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapOut

// map<string, .proto_util_converter.testing.MapM> map1 = 1;
inline int MapOut::_internal_map1_size() const {
  return map1_.size();
}
inline int MapOut::map1_size() const {
  return _internal_map1_size();
}
inline void MapOut::clear_map1() {
  map1_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >&
MapOut::_internal_map1() const {
  return map1_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >&
MapOut::map1() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapOut.map1)
  return _internal_map1();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >*
MapOut::_internal_mutable_map1() {
  return map1_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >*
MapOut::mutable_map1() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapOut.map1)
  return _internal_mutable_map1();
}

// map<string, .proto_util_converter.testing.MapOut> map2 = 2;
inline int MapOut::_internal_map2_size() const {
  return map2_.size();
}
inline int MapOut::map2_size() const {
  return _internal_map2_size();
}
inline void MapOut::clear_map2() {
  map2_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >&
MapOut::_internal_map2() const {
  return map2_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >&
MapOut::map2() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapOut.map2)
  return _internal_map2();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >*
MapOut::_internal_mutable_map2() {
  return map2_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >*
MapOut::mutable_map2() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapOut.map2)
  return _internal_mutable_map2();
}

// map<int32, string> map3 = 3;
inline int MapOut::_internal_map3_size() const {
  return map3_.size();
}
inline int MapOut::map3_size() const {
  return _internal_map3_size();
}
inline void MapOut::clear_map3() {
  map3_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
MapOut::_internal_map3() const {
  return map3_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
MapOut::map3() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapOut.map3)
  return _internal_map3();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
MapOut::_internal_mutable_map3() {
  return map3_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
MapOut::mutable_map3() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapOut.map3)
  return _internal_mutable_map3();
}

// map<bool, string> map4 = 5;
inline int MapOut::_internal_map4_size() const {
  return map4_.size();
}
inline int MapOut::map4_size() const {
  return _internal_map4_size();
}
inline void MapOut::clear_map4() {
  map4_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >&
MapOut::_internal_map4() const {
  return map4_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >&
MapOut::map4() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapOut.map4)
  return _internal_map4();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >*
MapOut::_internal_mutable_map4() {
  return map4_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >*
MapOut::mutable_map4() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapOut.map4)
  return _internal_mutable_map4();
}

// string bar = 4;
inline void MapOut::clear_bar() {
  bar_.ClearToEmpty();
}
inline const std::string& MapOut::bar() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOut.bar)
  return _internal_bar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapOut::set_bar(ArgT0&& arg0, ArgT... args) {
 
 bar_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOut.bar)
}
inline std::string* MapOut::mutable_bar() {
  std::string* _s = _internal_mutable_bar();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOut.bar)
  return _s;
}
inline const std::string& MapOut::_internal_bar() const {
  return bar_.Get();
}
inline void MapOut::_internal_set_bar(const std::string& value) {
  
  bar_.Set(value, GetArenaForAllocation());
}
inline std::string* MapOut::_internal_mutable_bar() {
  
  return bar_.Mutable(GetArenaForAllocation());
}
inline std::string* MapOut::release_bar() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOut.bar)
  return bar_.Release();
}
inline void MapOut::set_allocated_bar(std::string* bar) {
  if (bar != nullptr) {
    
  } else {
    
  }
  bar_.SetAllocated(bar, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bar_.IsDefault()) {
    bar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOut.bar)
}

// -------------------------------------------------------------------

// MapOutWireFormat_Map1Entry

// string key = 1;
inline void MapOutWireFormat_Map1Entry::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& MapOutWireFormat_Map1Entry::key() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.Map1Entry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapOutWireFormat_Map1Entry::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOutWireFormat.Map1Entry.key)
}
inline std::string* MapOutWireFormat_Map1Entry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.Map1Entry.key)
  return _s;
}
inline const std::string& MapOutWireFormat_Map1Entry::_internal_key() const {
  return key_.Get();
}
inline void MapOutWireFormat_Map1Entry::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* MapOutWireFormat_Map1Entry::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* MapOutWireFormat_Map1Entry::release_key() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOutWireFormat.Map1Entry.key)
  return key_.Release();
}
inline void MapOutWireFormat_Map1Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOutWireFormat.Map1Entry.key)
}

// .proto_util_converter.testing.MapM value = 2;
inline bool MapOutWireFormat_Map1Entry::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool MapOutWireFormat_Map1Entry::has_value() const {
  return _internal_has_value();
}
inline void MapOutWireFormat_Map1Entry::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::proto_util_converter::testing::MapM& MapOutWireFormat_Map1Entry::_internal_value() const {
  const ::proto_util_converter::testing::MapM* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::MapM&>(
      ::proto_util_converter::testing::_MapM_default_instance_);
}
inline const ::proto_util_converter::testing::MapM& MapOutWireFormat_Map1Entry::value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.Map1Entry.value)
  return _internal_value();
}
inline void MapOutWireFormat_Map1Entry::unsafe_arena_set_allocated_value(
    ::proto_util_converter::testing::MapM* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapOutWireFormat.Map1Entry.value)
}
inline ::proto_util_converter::testing::MapM* MapOutWireFormat_Map1Entry::release_value() {
  
  ::proto_util_converter::testing::MapM* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::MapM* MapOutWireFormat_Map1Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOutWireFormat.Map1Entry.value)
  
  ::proto_util_converter::testing::MapM* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MapM* MapOutWireFormat_Map1Entry::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MapM>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::proto_util_converter::testing::MapM* MapOutWireFormat_Map1Entry::mutable_value() {
  ::proto_util_converter::testing::MapM* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.Map1Entry.value)
  return _msg;
}
inline void MapOutWireFormat_Map1Entry::set_allocated_value(::proto_util_converter::testing::MapM* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOutWireFormat.Map1Entry.value)
}

// -------------------------------------------------------------------

// MapOutWireFormat_Map2Entry

// string key = 1;
inline void MapOutWireFormat_Map2Entry::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& MapOutWireFormat_Map2Entry::key() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.Map2Entry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapOutWireFormat_Map2Entry::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOutWireFormat.Map2Entry.key)
}
inline std::string* MapOutWireFormat_Map2Entry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.Map2Entry.key)
  return _s;
}
inline const std::string& MapOutWireFormat_Map2Entry::_internal_key() const {
  return key_.Get();
}
inline void MapOutWireFormat_Map2Entry::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* MapOutWireFormat_Map2Entry::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* MapOutWireFormat_Map2Entry::release_key() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOutWireFormat.Map2Entry.key)
  return key_.Release();
}
inline void MapOutWireFormat_Map2Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOutWireFormat.Map2Entry.key)
}

// .proto_util_converter.testing.MapOut value = 2;
inline bool MapOutWireFormat_Map2Entry::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool MapOutWireFormat_Map2Entry::has_value() const {
  return _internal_has_value();
}
inline void MapOutWireFormat_Map2Entry::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::proto_util_converter::testing::MapOut& MapOutWireFormat_Map2Entry::_internal_value() const {
  const ::proto_util_converter::testing::MapOut* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::MapOut&>(
      ::proto_util_converter::testing::_MapOut_default_instance_);
}
inline const ::proto_util_converter::testing::MapOut& MapOutWireFormat_Map2Entry::value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.Map2Entry.value)
  return _internal_value();
}
inline void MapOutWireFormat_Map2Entry::unsafe_arena_set_allocated_value(
    ::proto_util_converter::testing::MapOut* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.MapOutWireFormat.Map2Entry.value)
}
inline ::proto_util_converter::testing::MapOut* MapOutWireFormat_Map2Entry::release_value() {
  
  ::proto_util_converter::testing::MapOut* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::MapOut* MapOutWireFormat_Map2Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOutWireFormat.Map2Entry.value)
  
  ::proto_util_converter::testing::MapOut* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MapOut* MapOutWireFormat_Map2Entry::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MapOut>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::proto_util_converter::testing::MapOut* MapOutWireFormat_Map2Entry::mutable_value() {
  ::proto_util_converter::testing::MapOut* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.Map2Entry.value)
  return _msg;
}
inline void MapOutWireFormat_Map2Entry::set_allocated_value(::proto_util_converter::testing::MapOut* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOutWireFormat.Map2Entry.value)
}

// -------------------------------------------------------------------

// MapOutWireFormat_Map3Entry

// int32 key = 1;
inline void MapOutWireFormat_Map3Entry::clear_key() {
  key_ = 0;
}
inline int32_t MapOutWireFormat_Map3Entry::_internal_key() const {
  return key_;
}
inline int32_t MapOutWireFormat_Map3Entry::key() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.Map3Entry.key)
  return _internal_key();
}
inline void MapOutWireFormat_Map3Entry::_internal_set_key(int32_t value) {
  
  key_ = value;
}
inline void MapOutWireFormat_Map3Entry::set_key(int32_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOutWireFormat.Map3Entry.key)
}

// string value = 2;
inline void MapOutWireFormat_Map3Entry::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& MapOutWireFormat_Map3Entry::value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.Map3Entry.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapOutWireFormat_Map3Entry::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOutWireFormat.Map3Entry.value)
}
inline std::string* MapOutWireFormat_Map3Entry::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.Map3Entry.value)
  return _s;
}
inline const std::string& MapOutWireFormat_Map3Entry::_internal_value() const {
  return value_.Get();
}
inline void MapOutWireFormat_Map3Entry::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* MapOutWireFormat_Map3Entry::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* MapOutWireFormat_Map3Entry::release_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOutWireFormat.Map3Entry.value)
  return value_.Release();
}
inline void MapOutWireFormat_Map3Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOutWireFormat.Map3Entry.value)
}

// -------------------------------------------------------------------

// MapOutWireFormat_Map4Entry

// bool key = 1;
inline void MapOutWireFormat_Map4Entry::clear_key() {
  key_ = false;
}
inline bool MapOutWireFormat_Map4Entry::_internal_key() const {
  return key_;
}
inline bool MapOutWireFormat_Map4Entry::key() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.Map4Entry.key)
  return _internal_key();
}
inline void MapOutWireFormat_Map4Entry::_internal_set_key(bool value) {
  
  key_ = value;
}
inline void MapOutWireFormat_Map4Entry::set_key(bool value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOutWireFormat.Map4Entry.key)
}

// string value = 2;
inline void MapOutWireFormat_Map4Entry::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& MapOutWireFormat_Map4Entry::value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.Map4Entry.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapOutWireFormat_Map4Entry::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOutWireFormat.Map4Entry.value)
}
inline std::string* MapOutWireFormat_Map4Entry::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.Map4Entry.value)
  return _s;
}
inline const std::string& MapOutWireFormat_Map4Entry::_internal_value() const {
  return value_.Get();
}
inline void MapOutWireFormat_Map4Entry::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* MapOutWireFormat_Map4Entry::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* MapOutWireFormat_Map4Entry::release_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOutWireFormat.Map4Entry.value)
  return value_.Release();
}
inline void MapOutWireFormat_Map4Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOutWireFormat.Map4Entry.value)
}

// -------------------------------------------------------------------

// MapOutWireFormat

// repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
inline int MapOutWireFormat::_internal_map1_size() const {
  return map1_.size();
}
inline int MapOutWireFormat::map1_size() const {
  return _internal_map1_size();
}
inline void MapOutWireFormat::clear_map1() {
  map1_.Clear();
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* MapOutWireFormat::mutable_map1(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.map1)
  return map1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry >*
MapOutWireFormat::mutable_map1() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.MapOutWireFormat.map1)
  return &map1_;
}
inline const ::proto_util_converter::testing::MapOutWireFormat_Map1Entry& MapOutWireFormat::_internal_map1(int index) const {
  return map1_.Get(index);
}
inline const ::proto_util_converter::testing::MapOutWireFormat_Map1Entry& MapOutWireFormat::map1(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.map1)
  return _internal_map1(index);
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* MapOutWireFormat::_internal_add_map1() {
  return map1_.Add();
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* MapOutWireFormat::add_map1() {
  ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* _add = _internal_add_map1();
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.MapOutWireFormat.map1)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry >&
MapOutWireFormat::map1() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.MapOutWireFormat.map1)
  return map1_;
}

// repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
inline int MapOutWireFormat::_internal_map2_size() const {
  return map2_.size();
}
inline int MapOutWireFormat::map2_size() const {
  return _internal_map2_size();
}
inline void MapOutWireFormat::clear_map2() {
  map2_.Clear();
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* MapOutWireFormat::mutable_map2(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.map2)
  return map2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry >*
MapOutWireFormat::mutable_map2() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.MapOutWireFormat.map2)
  return &map2_;
}
inline const ::proto_util_converter::testing::MapOutWireFormat_Map2Entry& MapOutWireFormat::_internal_map2(int index) const {
  return map2_.Get(index);
}
inline const ::proto_util_converter::testing::MapOutWireFormat_Map2Entry& MapOutWireFormat::map2(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.map2)
  return _internal_map2(index);
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* MapOutWireFormat::_internal_add_map2() {
  return map2_.Add();
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* MapOutWireFormat::add_map2() {
  ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* _add = _internal_add_map2();
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.MapOutWireFormat.map2)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry >&
MapOutWireFormat::map2() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.MapOutWireFormat.map2)
  return map2_;
}

// repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
inline int MapOutWireFormat::_internal_map3_size() const {
  return map3_.size();
}
inline int MapOutWireFormat::map3_size() const {
  return _internal_map3_size();
}
inline void MapOutWireFormat::clear_map3() {
  map3_.Clear();
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* MapOutWireFormat::mutable_map3(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.map3)
  return map3_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry >*
MapOutWireFormat::mutable_map3() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.MapOutWireFormat.map3)
  return &map3_;
}
inline const ::proto_util_converter::testing::MapOutWireFormat_Map3Entry& MapOutWireFormat::_internal_map3(int index) const {
  return map3_.Get(index);
}
inline const ::proto_util_converter::testing::MapOutWireFormat_Map3Entry& MapOutWireFormat::map3(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.map3)
  return _internal_map3(index);
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* MapOutWireFormat::_internal_add_map3() {
  return map3_.Add();
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* MapOutWireFormat::add_map3() {
  ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* _add = _internal_add_map3();
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.MapOutWireFormat.map3)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry >&
MapOutWireFormat::map3() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.MapOutWireFormat.map3)
  return map3_;
}

// repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
inline int MapOutWireFormat::_internal_map4_size() const {
  return map4_.size();
}
inline int MapOutWireFormat::map4_size() const {
  return _internal_map4_size();
}
inline void MapOutWireFormat::clear_map4() {
  map4_.Clear();
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* MapOutWireFormat::mutable_map4(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.map4)
  return map4_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry >*
MapOutWireFormat::mutable_map4() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.MapOutWireFormat.map4)
  return &map4_;
}
inline const ::proto_util_converter::testing::MapOutWireFormat_Map4Entry& MapOutWireFormat::_internal_map4(int index) const {
  return map4_.Get(index);
}
inline const ::proto_util_converter::testing::MapOutWireFormat_Map4Entry& MapOutWireFormat::map4(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.map4)
  return _internal_map4(index);
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* MapOutWireFormat::_internal_add_map4() {
  return map4_.Add();
}
inline ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* MapOutWireFormat::add_map4() {
  ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* _add = _internal_add_map4();
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.MapOutWireFormat.map4)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry >&
MapOutWireFormat::map4() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.MapOutWireFormat.map4)
  return map4_;
}

// string bar = 4;
inline void MapOutWireFormat::clear_bar() {
  bar_.ClearToEmpty();
}
inline const std::string& MapOutWireFormat::bar() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapOutWireFormat.bar)
  return _internal_bar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapOutWireFormat::set_bar(ArgT0&& arg0, ArgT... args) {
 
 bar_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapOutWireFormat.bar)
}
inline std::string* MapOutWireFormat::mutable_bar() {
  std::string* _s = _internal_mutable_bar();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapOutWireFormat.bar)
  return _s;
}
inline const std::string& MapOutWireFormat::_internal_bar() const {
  return bar_.Get();
}
inline void MapOutWireFormat::_internal_set_bar(const std::string& value) {
  
  bar_.Set(value, GetArenaForAllocation());
}
inline std::string* MapOutWireFormat::_internal_mutable_bar() {
  
  return bar_.Mutable(GetArenaForAllocation());
}
inline std::string* MapOutWireFormat::release_bar() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapOutWireFormat.bar)
  return bar_.Release();
}
inline void MapOutWireFormat::set_allocated_bar(std::string* bar) {
  if (bar != nullptr) {
    
  } else {
    
  }
  bar_.SetAllocated(bar, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bar_.IsDefault()) {
    bar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapOutWireFormat.bar)
}

// -------------------------------------------------------------------

// MapM

// string foo = 1;
inline void MapM::clear_foo() {
  foo_.ClearToEmpty();
}
inline const std::string& MapM::foo() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.MapM.foo)
  return _internal_foo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapM::set_foo(ArgT0&& arg0, ArgT... args) {
 
 foo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.MapM.foo)
}
inline std::string* MapM::mutable_foo() {
  std::string* _s = _internal_mutable_foo();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.MapM.foo)
  return _s;
}
inline const std::string& MapM::_internal_foo() const {
  return foo_.Get();
}
inline void MapM::_internal_set_foo(const std::string& value) {
  
  foo_.Set(value, GetArenaForAllocation());
}
inline std::string* MapM::_internal_mutable_foo() {
  
  return foo_.Mutable(GetArenaForAllocation());
}
inline std::string* MapM::release_foo() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.MapM.foo)
  return foo_.Release();
}
inline void MapM::set_allocated_foo(std::string* foo) {
  if (foo != nullptr) {
    
  } else {
    
  }
  foo_.SetAllocated(foo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (foo_.IsDefault()) {
    foo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.MapM.foo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace proto_util_converter

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto_util_converter::testing::Mixed2_E> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_util_converter::testing::Mixed2_E>() {
  return ::proto_util_converter::testing::Mixed2_E_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto
