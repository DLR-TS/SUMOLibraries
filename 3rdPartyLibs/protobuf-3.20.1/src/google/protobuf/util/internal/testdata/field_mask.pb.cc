// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/field_mask.proto

#include "google/protobuf/util/internal/testdata/field_mask.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_util_converter {
namespace testing {
PROTOBUF_CONSTEXPR NestedFieldMask::NestedFieldMask(
    ::_pbi::ConstantInitialized)
  : repeated_mask_()
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , single_mask_(nullptr){}
struct NestedFieldMaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NestedFieldMaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NestedFieldMaskDefaultTypeInternal() {}
  union {
    NestedFieldMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NestedFieldMaskDefaultTypeInternal _NestedFieldMask_default_instance_;
PROTOBUF_CONSTEXPR FieldMaskTest::FieldMaskTest(
    ::_pbi::ConstantInitialized)
  : repeated_mask_()
  , nested_mask_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , single_mask_(nullptr){}
struct FieldMaskTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldMaskTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldMaskTestDefaultTypeInternal() {}
  union {
    FieldMaskTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldMaskTestDefaultTypeInternal _FieldMaskTest_default_instance_;
PROTOBUF_CONSTEXPR FieldMaskTestCases::FieldMaskTestCases(
    ::_pbi::ConstantInitialized)
  : single_mask_(nullptr)
  , multiple_mask_(nullptr)
  , snake_camel_(nullptr)
  , empty_field_(nullptr)
  , apiary_format1_(nullptr)
  , apiary_format2_(nullptr)
  , apiary_format3_(nullptr)
  , map_key1_(nullptr)
  , map_key2_(nullptr)
  , map_key3_(nullptr)
  , map_key4_(nullptr)
  , map_key5_(nullptr){}
struct FieldMaskTestCasesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldMaskTestCasesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldMaskTestCasesDefaultTypeInternal() {}
  union {
    FieldMaskTestCases _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldMaskTestCasesDefaultTypeInternal _FieldMaskTestCases_default_instance_;
PROTOBUF_CONSTEXPR FieldMaskWrapper::FieldMaskWrapper(
    ::_pbi::ConstantInitialized)
  : mask_(nullptr){}
struct FieldMaskWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldMaskWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldMaskWrapperDefaultTypeInternal() {}
  union {
    FieldMaskWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldMaskWrapperDefaultTypeInternal _FieldMaskWrapper_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::NestedFieldMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::NestedFieldMask, data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::NestedFieldMask, single_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::NestedFieldMask, repeated_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, id_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, single_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, repeated_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, nested_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, single_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, multiple_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, snake_camel_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, empty_field_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, apiary_format1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, apiary_format2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, apiary_format3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key4_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskWrapper, mask_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_util_converter::testing::NestedFieldMask)},
  { 9, -1, -1, sizeof(::proto_util_converter::testing::FieldMaskTest)},
  { 19, -1, -1, sizeof(::proto_util_converter::testing::FieldMaskTestCases)},
  { 37, -1, -1, sizeof(::proto_util_converter::testing::FieldMaskWrapper)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_util_converter::testing::_NestedFieldMask_default_instance_._instance,
  &::proto_util_converter::testing::_FieldMaskTest_default_instance_._instance,
  &::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance,
  &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7google/protobuf/util/internal/testdata"
  "/field_mask.proto\022\034proto_util_converter."
  "testing\032 google/protobuf/field_mask.prot"
  "o\"\203\001\n\017NestedFieldMask\022\014\n\004data\030\001 \001(\t\022/\n\013s"
  "ingle_mask\030\002 \001(\0132\032.google.protobuf.Field"
  "Mask\0221\n\rrepeated_mask\030\003 \003(\0132\032.google.pro"
  "tobuf.FieldMask\"\303\001\n\rFieldMaskTest\022\n\n\002id\030"
  "\001 \001(\t\022/\n\013single_mask\030\002 \001(\0132\032.google.prot"
  "obuf.FieldMask\0221\n\rrepeated_mask\030\003 \003(\0132\032."
  "google.protobuf.FieldMask\022B\n\013nested_mask"
  "\030\004 \003(\0132-.proto_util_converter.testing.Ne"
  "stedFieldMask\"\314\006\n\022FieldMaskTestCases\022C\n\013"
  "single_mask\030\001 \001(\0132..proto_util_converter"
  ".testing.FieldMaskWrapper\022E\n\rmultiple_ma"
  "sk\030\002 \001(\0132..proto_util_converter.testing."
  "FieldMaskWrapper\022C\n\013snake_camel\030\003 \001(\0132.."
  "proto_util_converter.testing.FieldMaskWr"
  "apper\022C\n\013empty_field\030\004 \001(\0132..proto_util_"
  "converter.testing.FieldMaskWrapper\022F\n\016ap"
  "iary_format1\030\005 \001(\0132..proto_util_converte"
  "r.testing.FieldMaskWrapper\022F\n\016apiary_for"
  "mat2\030\006 \001(\0132..proto_util_converter.testin"
  "g.FieldMaskWrapper\022F\n\016apiary_format3\030\007 \001"
  "(\0132..proto_util_converter.testing.FieldM"
  "askWrapper\022@\n\010map_key1\030\010 \001(\0132..proto_uti"
  "l_converter.testing.FieldMaskWrapper\022@\n\010"
  "map_key2\030\t \001(\0132..proto_util_converter.te"
  "sting.FieldMaskWrapper\022@\n\010map_key3\030\n \001(\013"
  "2..proto_util_converter.testing.FieldMas"
  "kWrapper\022@\n\010map_key4\030\013 \001(\0132..proto_util_"
  "converter.testing.FieldMaskWrapper\022@\n\010ma"
  "p_key5\030\014 \001(\0132..proto_util_converter.test"
  "ing.FieldMaskWrapper\"<\n\020FieldMaskWrapper"
  "\022(\n\004mask\030\001 \001(\0132\032.google.protobuf.FieldMa"
  "sk2\202\001\n\024FieldMaskTestService\022j\n\004Call\0220.pr"
  "oto_util_converter.testing.FieldMaskTest"
  "Cases\0320.proto_util_converter.testing.Fie"
  "ldMaskTestCasesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto = {
    false, false, 1503, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto,
    "google/protobuf/util/internal/testdata/field_mask.proto",
    &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto);
namespace proto_util_converter {
namespace testing {

// ===================================================================

class NestedFieldMask::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& single_mask(const NestedFieldMask* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FieldMask&
NestedFieldMask::_Internal::single_mask(const NestedFieldMask* msg) {
  return *msg->single_mask_;
}
void NestedFieldMask::clear_single_mask() {
  if (GetArenaForAllocation() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
}
void NestedFieldMask::clear_repeated_mask() {
  repeated_mask_.Clear();
}
NestedFieldMask::NestedFieldMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_mask_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.NestedFieldMask)
}
NestedFieldMask::NestedFieldMask(const NestedFieldMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repeated_mask_(from.repeated_mask_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_single_mask()) {
    single_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from.single_mask_);
  } else {
    single_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.NestedFieldMask)
}

inline void NestedFieldMask::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
single_mask_ = nullptr;
}

NestedFieldMask::~NestedFieldMask() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.NestedFieldMask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NestedFieldMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
  if (this != internal_default_instance()) delete single_mask_;
}

void NestedFieldMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NestedFieldMask::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.NestedFieldMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_mask_.Clear();
  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NestedFieldMask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.NestedFieldMask.data"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask single_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.FieldMask repeated_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NestedFieldMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.NestedFieldMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.NestedFieldMask.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->_internal_has_single_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::single_mask(this),
        _Internal::single_mask(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_mask_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_mask(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.NestedFieldMask)
  return target;
}

size_t NestedFieldMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.NestedFieldMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  total_size += 1UL * this->_internal_repeated_mask_size();
  for (const auto& msg : this->repeated_mask_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->_internal_has_single_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NestedFieldMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NestedFieldMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NestedFieldMask::GetClassData() const { return &_class_data_; }

void NestedFieldMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NestedFieldMask *>(to)->MergeFrom(
      static_cast<const NestedFieldMask &>(from));
}


void NestedFieldMask::MergeFrom(const NestedFieldMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.NestedFieldMask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_mask_.MergeFrom(from.repeated_mask_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_has_single_mask()) {
    _internal_mutable_single_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_single_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NestedFieldMask::CopyFrom(const NestedFieldMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.NestedFieldMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedFieldMask::IsInitialized() const {
  return true;
}

void NestedFieldMask::InternalSwap(NestedFieldMask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_mask_.InternalSwap(&other->repeated_mask_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(single_mask_, other->single_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedFieldMask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto[0]);
}

// ===================================================================

class FieldMaskTest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& single_mask(const FieldMaskTest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FieldMask&
FieldMaskTest::_Internal::single_mask(const FieldMaskTest* msg) {
  return *msg->single_mask_;
}
void FieldMaskTest::clear_single_mask() {
  if (GetArenaForAllocation() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
}
void FieldMaskTest::clear_repeated_mask() {
  repeated_mask_.Clear();
}
FieldMaskTest::FieldMaskTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_mask_(arena),
  nested_mask_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.FieldMaskTest)
}
FieldMaskTest::FieldMaskTest(const FieldMaskTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      repeated_mask_(from.repeated_mask_),
      nested_mask_(from.nested_mask_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_single_mask()) {
    single_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from.single_mask_);
  } else {
    single_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.FieldMaskTest)
}

inline void FieldMaskTest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
single_mask_ = nullptr;
}

FieldMaskTest::~FieldMaskTest() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.FieldMaskTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldMaskTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  if (this != internal_default_instance()) delete single_mask_;
}

void FieldMaskTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMaskTest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.FieldMaskTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_mask_.Clear();
  nested_mask_.Clear();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMaskTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.FieldMaskTest.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask single_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.FieldMask repeated_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldMaskTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.FieldMaskTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.FieldMaskTest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->_internal_has_single_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::single_mask(this),
        _Internal::single_mask(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_mask_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_mask(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nested_mask_size()); i < n; i++) {
    const auto& repfield = this->_internal_nested_mask(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.FieldMaskTest)
  return target;
}

size_t FieldMaskTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.FieldMaskTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  total_size += 1UL * this->_internal_repeated_mask_size();
  for (const auto& msg : this->repeated_mask_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
  total_size += 1UL * this->_internal_nested_mask_size();
  for (const auto& msg : this->nested_mask_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->_internal_has_single_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMaskTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMaskTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMaskTest::GetClassData() const { return &_class_data_; }

void FieldMaskTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMaskTest *>(to)->MergeFrom(
      static_cast<const FieldMaskTest &>(from));
}


void FieldMaskTest::MergeFrom(const FieldMaskTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.FieldMaskTest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_mask_.MergeFrom(from.repeated_mask_);
  nested_mask_.MergeFrom(from.nested_mask_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_single_mask()) {
    _internal_mutable_single_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_single_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMaskTest::CopyFrom(const FieldMaskTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.FieldMaskTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMaskTest::IsInitialized() const {
  return true;
}

void FieldMaskTest::InternalSwap(FieldMaskTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_mask_.InternalSwap(&other->repeated_mask_);
  nested_mask_.InternalSwap(&other->nested_mask_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(single_mask_, other->single_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMaskTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto[1]);
}

// ===================================================================

class FieldMaskTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::FieldMaskWrapper& single_mask(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& multiple_mask(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& snake_camel(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& empty_field(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format1(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format2(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format3(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key1(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key2(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key3(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key4(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key5(const FieldMaskTestCases* msg);
};

const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::single_mask(const FieldMaskTestCases* msg) {
  return *msg->single_mask_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::multiple_mask(const FieldMaskTestCases* msg) {
  return *msg->multiple_mask_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::snake_camel(const FieldMaskTestCases* msg) {
  return *msg->snake_camel_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::empty_field(const FieldMaskTestCases* msg) {
  return *msg->empty_field_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::apiary_format1(const FieldMaskTestCases* msg) {
  return *msg->apiary_format1_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::apiary_format2(const FieldMaskTestCases* msg) {
  return *msg->apiary_format2_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::apiary_format3(const FieldMaskTestCases* msg) {
  return *msg->apiary_format3_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key1(const FieldMaskTestCases* msg) {
  return *msg->map_key1_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key2(const FieldMaskTestCases* msg) {
  return *msg->map_key2_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key3(const FieldMaskTestCases* msg) {
  return *msg->map_key3_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key4(const FieldMaskTestCases* msg) {
  return *msg->map_key4_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key5(const FieldMaskTestCases* msg) {
  return *msg->map_key5_;
}
FieldMaskTestCases::FieldMaskTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.FieldMaskTestCases)
}
FieldMaskTestCases::FieldMaskTestCases(const FieldMaskTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_single_mask()) {
    single_mask_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.single_mask_);
  } else {
    single_mask_ = nullptr;
  }
  if (from._internal_has_multiple_mask()) {
    multiple_mask_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.multiple_mask_);
  } else {
    multiple_mask_ = nullptr;
  }
  if (from._internal_has_snake_camel()) {
    snake_camel_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.snake_camel_);
  } else {
    snake_camel_ = nullptr;
  }
  if (from._internal_has_empty_field()) {
    empty_field_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.empty_field_);
  } else {
    empty_field_ = nullptr;
  }
  if (from._internal_has_apiary_format1()) {
    apiary_format1_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.apiary_format1_);
  } else {
    apiary_format1_ = nullptr;
  }
  if (from._internal_has_apiary_format2()) {
    apiary_format2_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.apiary_format2_);
  } else {
    apiary_format2_ = nullptr;
  }
  if (from._internal_has_apiary_format3()) {
    apiary_format3_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.apiary_format3_);
  } else {
    apiary_format3_ = nullptr;
  }
  if (from._internal_has_map_key1()) {
    map_key1_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key1_);
  } else {
    map_key1_ = nullptr;
  }
  if (from._internal_has_map_key2()) {
    map_key2_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key2_);
  } else {
    map_key2_ = nullptr;
  }
  if (from._internal_has_map_key3()) {
    map_key3_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key3_);
  } else {
    map_key3_ = nullptr;
  }
  if (from._internal_has_map_key4()) {
    map_key4_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key4_);
  } else {
    map_key4_ = nullptr;
  }
  if (from._internal_has_map_key5()) {
    map_key5_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key5_);
  } else {
    map_key5_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.FieldMaskTestCases)
}

inline void FieldMaskTestCases::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&single_mask_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_key5_) -
    reinterpret_cast<char*>(&single_mask_)) + sizeof(map_key5_));
}

FieldMaskTestCases::~FieldMaskTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.FieldMaskTestCases)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldMaskTestCases::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete single_mask_;
  if (this != internal_default_instance()) delete multiple_mask_;
  if (this != internal_default_instance()) delete snake_camel_;
  if (this != internal_default_instance()) delete empty_field_;
  if (this != internal_default_instance()) delete apiary_format1_;
  if (this != internal_default_instance()) delete apiary_format2_;
  if (this != internal_default_instance()) delete apiary_format3_;
  if (this != internal_default_instance()) delete map_key1_;
  if (this != internal_default_instance()) delete map_key2_;
  if (this != internal_default_instance()) delete map_key3_;
  if (this != internal_default_instance()) delete map_key4_;
  if (this != internal_default_instance()) delete map_key5_;
}

void FieldMaskTestCases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMaskTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.FieldMaskTestCases)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && multiple_mask_ != nullptr) {
    delete multiple_mask_;
  }
  multiple_mask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && snake_camel_ != nullptr) {
    delete snake_camel_;
  }
  snake_camel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_field_ != nullptr) {
    delete empty_field_;
  }
  empty_field_ = nullptr;
  if (GetArenaForAllocation() == nullptr && apiary_format1_ != nullptr) {
    delete apiary_format1_;
  }
  apiary_format1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && apiary_format2_ != nullptr) {
    delete apiary_format2_;
  }
  apiary_format2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && apiary_format3_ != nullptr) {
    delete apiary_format3_;
  }
  apiary_format3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && map_key1_ != nullptr) {
    delete map_key1_;
  }
  map_key1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && map_key2_ != nullptr) {
    delete map_key2_;
  }
  map_key2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && map_key3_ != nullptr) {
    delete map_key3_;
  }
  map_key3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && map_key4_ != nullptr) {
    delete map_key4_;
  }
  map_key4_ = nullptr;
  if (GetArenaForAllocation() == nullptr && map_key5_ != nullptr) {
    delete map_key5_;
  }
  map_key5_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMaskTestCases::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_snake_camel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_apiary_format1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_apiary_format2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_apiary_format3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_key5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldMaskTestCases::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.FieldMaskTestCases)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
  if (this->_internal_has_single_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::single_mask(this),
        _Internal::single_mask(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
  if (this->_internal_has_multiple_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::multiple_mask(this),
        _Internal::multiple_mask(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
  if (this->_internal_has_snake_camel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::snake_camel(this),
        _Internal::snake_camel(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
  if (this->_internal_has_empty_field()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::empty_field(this),
        _Internal::empty_field(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
  if (this->_internal_has_apiary_format1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::apiary_format1(this),
        _Internal::apiary_format1(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
  if (this->_internal_has_apiary_format2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::apiary_format2(this),
        _Internal::apiary_format2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
  if (this->_internal_has_apiary_format3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::apiary_format3(this),
        _Internal::apiary_format3(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
  if (this->_internal_has_map_key1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::map_key1(this),
        _Internal::map_key1(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
  if (this->_internal_has_map_key2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::map_key2(this),
        _Internal::map_key2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
  if (this->_internal_has_map_key3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::map_key3(this),
        _Internal::map_key3(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
  if (this->_internal_has_map_key4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::map_key4(this),
        _Internal::map_key4(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
  if (this->_internal_has_map_key5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::map_key5(this),
        _Internal::map_key5(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.FieldMaskTestCases)
  return target;
}

size_t FieldMaskTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.FieldMaskTestCases)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
  if (this->_internal_has_single_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_mask_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
  if (this->_internal_has_multiple_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiple_mask_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
  if (this->_internal_has_snake_camel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snake_camel_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
  if (this->_internal_has_empty_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_field_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
  if (this->_internal_has_apiary_format1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apiary_format1_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
  if (this->_internal_has_apiary_format2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apiary_format2_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
  if (this->_internal_has_apiary_format3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apiary_format3_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
  if (this->_internal_has_map_key1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key1_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
  if (this->_internal_has_map_key2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key2_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
  if (this->_internal_has_map_key3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key3_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
  if (this->_internal_has_map_key4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key4_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
  if (this->_internal_has_map_key5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key5_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMaskTestCases::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMaskTestCases::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMaskTestCases::GetClassData() const { return &_class_data_; }

void FieldMaskTestCases::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMaskTestCases *>(to)->MergeFrom(
      static_cast<const FieldMaskTestCases &>(from));
}


void FieldMaskTestCases::MergeFrom(const FieldMaskTestCases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.FieldMaskTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_single_mask()) {
    _internal_mutable_single_mask()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_single_mask());
  }
  if (from._internal_has_multiple_mask()) {
    _internal_mutable_multiple_mask()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_multiple_mask());
  }
  if (from._internal_has_snake_camel()) {
    _internal_mutable_snake_camel()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_snake_camel());
  }
  if (from._internal_has_empty_field()) {
    _internal_mutable_empty_field()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_empty_field());
  }
  if (from._internal_has_apiary_format1()) {
    _internal_mutable_apiary_format1()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_apiary_format1());
  }
  if (from._internal_has_apiary_format2()) {
    _internal_mutable_apiary_format2()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_apiary_format2());
  }
  if (from._internal_has_apiary_format3()) {
    _internal_mutable_apiary_format3()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_apiary_format3());
  }
  if (from._internal_has_map_key1()) {
    _internal_mutable_map_key1()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_map_key1());
  }
  if (from._internal_has_map_key2()) {
    _internal_mutable_map_key2()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_map_key2());
  }
  if (from._internal_has_map_key3()) {
    _internal_mutable_map_key3()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_map_key3());
  }
  if (from._internal_has_map_key4()) {
    _internal_mutable_map_key4()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_map_key4());
  }
  if (from._internal_has_map_key5()) {
    _internal_mutable_map_key5()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from._internal_map_key5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMaskTestCases::CopyFrom(const FieldMaskTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.FieldMaskTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMaskTestCases::IsInitialized() const {
  return true;
}

void FieldMaskTestCases::InternalSwap(FieldMaskTestCases* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldMaskTestCases, map_key5_)
      + sizeof(FieldMaskTestCases::map_key5_)
      - PROTOBUF_FIELD_OFFSET(FieldMaskTestCases, single_mask_)>(
          reinterpret_cast<char*>(&single_mask_),
          reinterpret_cast<char*>(&other->single_mask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMaskTestCases::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto[2]);
}

// ===================================================================

class FieldMaskWrapper::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask(const FieldMaskWrapper* msg);
};

const ::PROTOBUF_NAMESPACE_ID::FieldMask&
FieldMaskWrapper::_Internal::mask(const FieldMaskWrapper* msg) {
  return *msg->mask_;
}
void FieldMaskWrapper::clear_mask() {
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
FieldMaskWrapper::FieldMaskWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.FieldMaskWrapper)
}
FieldMaskWrapper::FieldMaskWrapper(const FieldMaskWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mask()) {
    mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.FieldMaskWrapper)
}

inline void FieldMaskWrapper::SharedCtor() {
mask_ = nullptr;
}

FieldMaskWrapper::~FieldMaskWrapper() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.FieldMaskWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldMaskWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mask_;
}

void FieldMaskWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldMaskWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.FieldMaskWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldMaskWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.FieldMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldMaskWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.FieldMaskWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FieldMask mask = 1;
  if (this->_internal_has_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.FieldMaskWrapper)
  return target;
}

size_t FieldMaskWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.FieldMaskWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FieldMask mask = 1;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldMaskWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldMaskWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldMaskWrapper::GetClassData() const { return &_class_data_; }

void FieldMaskWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldMaskWrapper *>(to)->MergeFrom(
      static_cast<const FieldMaskWrapper &>(from));
}


void FieldMaskWrapper::MergeFrom(const FieldMaskWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.FieldMaskWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mask()) {
    _internal_mutable_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldMaskWrapper::CopyFrom(const FieldMaskWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.FieldMaskWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMaskWrapper::IsInitialized() const {
  return true;
}

void FieldMaskWrapper::InternalSwap(FieldMaskWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mask_, other->mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMaskWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::NestedFieldMask*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::NestedFieldMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::NestedFieldMask >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::FieldMaskTest*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::FieldMaskTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::FieldMaskTest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::FieldMaskTestCases*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::FieldMaskTestCases >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::FieldMaskTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::FieldMaskWrapper*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::FieldMaskWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::FieldMaskWrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
