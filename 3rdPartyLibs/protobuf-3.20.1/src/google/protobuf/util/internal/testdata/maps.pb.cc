// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/maps.proto

#include "google/protobuf/util/internal/testdata/maps.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_util_converter {
namespace testing {
PROTOBUF_CONSTEXPR MapsTestCases::MapsTestCases(
    ::_pbi::ConstantInitialized)
  : empty_map_(nullptr)
  , string_to_int_(nullptr)
  , int_to_string_(nullptr)
  , mixed1_(nullptr)
  , mixed2_(nullptr)
  , map_of_objects_(nullptr)
  , empty_key_string_to_int1_(nullptr)
  , empty_key_string_to_int2_(nullptr)
  , empty_key_string_to_int3_(nullptr)
  , empty_key_bool_to_string_(nullptr)
  , empty_key_int_to_string_(nullptr)
  , empty_key_mixed_(nullptr)
  , empty_key_map_objects_(nullptr){}
struct MapsTestCasesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapsTestCasesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapsTestCasesDefaultTypeInternal() {}
  union {
    MapsTestCases _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapsTestCasesDefaultTypeInternal _MapsTestCases_default_instance_;
PROTOBUF_CONSTEXPR EmptyMap_MapEntry_DoNotUse::EmptyMap_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct EmptyMap_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyMap_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyMap_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EmptyMap_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyMap_MapEntry_DoNotUseDefaultTypeInternal _EmptyMap_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR EmptyMap::EmptyMap(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct EmptyMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyMapDefaultTypeInternal() {}
  union {
    EmptyMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyMapDefaultTypeInternal _EmptyMap_default_instance_;
PROTOBUF_CONSTEXPR StringtoInt_MapEntry_DoNotUse::StringtoInt_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct StringtoInt_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringtoInt_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringtoInt_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StringtoInt_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringtoInt_MapEntry_DoNotUseDefaultTypeInternal _StringtoInt_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StringtoInt::StringtoInt(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct StringtoIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringtoIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringtoIntDefaultTypeInternal() {}
  union {
    StringtoInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringtoIntDefaultTypeInternal _StringtoInt_default_instance_;
PROTOBUF_CONSTEXPR IntToString_MapEntry_DoNotUse::IntToString_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct IntToString_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntToString_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntToString_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    IntToString_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntToString_MapEntry_DoNotUseDefaultTypeInternal _IntToString_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR IntToString::IntToString(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct IntToStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntToStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntToStringDefaultTypeInternal() {}
  union {
    IntToString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntToStringDefaultTypeInternal _IntToString_default_instance_;
PROTOBUF_CONSTEXPR BoolToString_MapEntry_DoNotUse::BoolToString_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct BoolToString_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolToString_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolToString_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BoolToString_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolToString_MapEntry_DoNotUseDefaultTypeInternal _BoolToString_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BoolToString::BoolToString(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct BoolToStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolToStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolToStringDefaultTypeInternal() {}
  union {
    BoolToString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolToStringDefaultTypeInternal _BoolToString_default_instance_;
PROTOBUF_CONSTEXPR Mixed1_MapEntry_DoNotUse::Mixed1_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Mixed1_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mixed1_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mixed1_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Mixed1_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mixed1_MapEntry_DoNotUseDefaultTypeInternal _Mixed1_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Mixed1::Mixed1(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Mixed1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mixed1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mixed1DefaultTypeInternal() {}
  union {
    Mixed1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mixed1DefaultTypeInternal _Mixed1_default_instance_;
PROTOBUF_CONSTEXPR Mixed2_MapEntry_DoNotUse::Mixed2_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Mixed2_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mixed2_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mixed2_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Mixed2_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mixed2_MapEntry_DoNotUseDefaultTypeInternal _Mixed2_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Mixed2::Mixed2(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ee_(0)
{}
struct Mixed2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Mixed2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Mixed2DefaultTypeInternal() {}
  union {
    Mixed2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Mixed2DefaultTypeInternal _Mixed2_default_instance_;
PROTOBUF_CONSTEXPR MapOfObjects_M::MapOfObjects_M(
    ::_pbi::ConstantInitialized)
  : inner_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MapOfObjects_MDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOfObjects_MDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOfObjects_MDefaultTypeInternal() {}
  union {
    MapOfObjects_M _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOfObjects_MDefaultTypeInternal _MapOfObjects_M_default_instance_;
PROTOBUF_CONSTEXPR MapOfObjects_MapEntry_DoNotUse::MapOfObjects_MapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MapOfObjects_MapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOfObjects_MapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOfObjects_MapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapOfObjects_MapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOfObjects_MapEntry_DoNotUseDefaultTypeInternal _MapOfObjects_MapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapOfObjects::MapOfObjects(
    ::_pbi::ConstantInitialized)
  : map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct MapOfObjectsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOfObjectsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOfObjectsDefaultTypeInternal() {}
  union {
    MapOfObjects _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOfObjectsDefaultTypeInternal _MapOfObjects_default_instance_;
PROTOBUF_CONSTEXPR DummyRequest::DummyRequest(
    ::_pbi::ConstantInitialized){}
struct DummyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyRequestDefaultTypeInternal() {}
  union {
    DummyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyRequestDefaultTypeInternal _DummyRequest_default_instance_;
PROTOBUF_CONSTEXPR MapIn_MapInputEntry_DoNotUse::MapIn_MapInputEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MapIn_MapInputEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapIn_MapInputEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapIn_MapInputEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapIn_MapInputEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapIn_MapInputEntry_DoNotUseDefaultTypeInternal _MapIn_MapInputEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapIn_MapAnyEntry_DoNotUse::MapIn_MapAnyEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MapIn_MapAnyEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapIn_MapAnyEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapIn_MapAnyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapIn_MapAnyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapIn_MapAnyEntry_DoNotUseDefaultTypeInternal _MapIn_MapAnyEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapIn::MapIn(
    ::_pbi::ConstantInitialized)
  : things_()
  , map_input_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map_any_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , other_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MapInDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapInDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapInDefaultTypeInternal() {}
  union {
    MapIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapInDefaultTypeInternal _MapIn_default_instance_;
PROTOBUF_CONSTEXPR MapOut_Map1Entry_DoNotUse::MapOut_Map1Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MapOut_Map1Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOut_Map1Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOut_Map1Entry_DoNotUseDefaultTypeInternal() {}
  union {
    MapOut_Map1Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOut_Map1Entry_DoNotUseDefaultTypeInternal _MapOut_Map1Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapOut_Map2Entry_DoNotUse::MapOut_Map2Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MapOut_Map2Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOut_Map2Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOut_Map2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    MapOut_Map2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOut_Map2Entry_DoNotUseDefaultTypeInternal _MapOut_Map2Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapOut_Map3Entry_DoNotUse::MapOut_Map3Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MapOut_Map3Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOut_Map3Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOut_Map3Entry_DoNotUseDefaultTypeInternal() {}
  union {
    MapOut_Map3Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOut_Map3Entry_DoNotUseDefaultTypeInternal _MapOut_Map3Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapOut_Map4Entry_DoNotUse::MapOut_Map4Entry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct MapOut_Map4Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOut_Map4Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOut_Map4Entry_DoNotUseDefaultTypeInternal() {}
  union {
    MapOut_Map4Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOut_Map4Entry_DoNotUseDefaultTypeInternal _MapOut_Map4Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapOut::MapOut(
    ::_pbi::ConstantInitialized)
  : map1_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map2_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map3_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map4_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , bar_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MapOutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOutDefaultTypeInternal() {}
  union {
    MapOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOutDefaultTypeInternal _MapOut_default_instance_;
PROTOBUF_CONSTEXPR MapOutWireFormat_Map1Entry::MapOutWireFormat_Map1Entry(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(nullptr){}
struct MapOutWireFormat_Map1EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOutWireFormat_Map1EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOutWireFormat_Map1EntryDefaultTypeInternal() {}
  union {
    MapOutWireFormat_Map1Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOutWireFormat_Map1EntryDefaultTypeInternal _MapOutWireFormat_Map1Entry_default_instance_;
PROTOBUF_CONSTEXPR MapOutWireFormat_Map2Entry::MapOutWireFormat_Map2Entry(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(nullptr){}
struct MapOutWireFormat_Map2EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOutWireFormat_Map2EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOutWireFormat_Map2EntryDefaultTypeInternal() {}
  union {
    MapOutWireFormat_Map2Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOutWireFormat_Map2EntryDefaultTypeInternal _MapOutWireFormat_Map2Entry_default_instance_;
PROTOBUF_CONSTEXPR MapOutWireFormat_Map3Entry::MapOutWireFormat_Map3Entry(
    ::_pbi::ConstantInitialized)
  : value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_(0){}
struct MapOutWireFormat_Map3EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOutWireFormat_Map3EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOutWireFormat_Map3EntryDefaultTypeInternal() {}
  union {
    MapOutWireFormat_Map3Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOutWireFormat_Map3EntryDefaultTypeInternal _MapOutWireFormat_Map3Entry_default_instance_;
PROTOBUF_CONSTEXPR MapOutWireFormat_Map4Entry::MapOutWireFormat_Map4Entry(
    ::_pbi::ConstantInitialized)
  : value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , key_(false){}
struct MapOutWireFormat_Map4EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOutWireFormat_Map4EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOutWireFormat_Map4EntryDefaultTypeInternal() {}
  union {
    MapOutWireFormat_Map4Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOutWireFormat_Map4EntryDefaultTypeInternal _MapOutWireFormat_Map4Entry_default_instance_;
PROTOBUF_CONSTEXPR MapOutWireFormat::MapOutWireFormat(
    ::_pbi::ConstantInitialized)
  : map1_()
  , map2_()
  , map3_()
  , map4_()
  , bar_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MapOutWireFormatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOutWireFormatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOutWireFormatDefaultTypeInternal() {}
  union {
    MapOutWireFormat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOutWireFormatDefaultTypeInternal _MapOutWireFormat_default_instance_;
PROTOBUF_CONSTEXPR MapM::MapM(
    ::_pbi::ConstantInitialized)
  : foo_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MapMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapMDefaultTypeInternal() {}
  union {
    MapM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapMDefaultTypeInternal _MapM_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[31];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, string_to_int_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, int_to_string_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, mixed1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, mixed2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, map_of_objects_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_string_to_int1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_string_to_int2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_string_to_int3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_bool_to_string_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_int_to_string_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_mixed_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_map_objects_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1, msg_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2, ee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_M, inner_text_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DummyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, other_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, things_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, map_input_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, map_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, map1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, map2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, map3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, map4_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, bar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map1Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map1Entry, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map1Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map2Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map2Entry, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map2Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map3Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map3Entry, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map3Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map4Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map4Entry, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map4Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, map1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, map2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, map3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, map4_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, bar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapM, foo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_util_converter::testing::MapsTestCases)},
  { 19, 27, -1, sizeof(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse)},
  { 29, -1, -1, sizeof(::proto_util_converter::testing::EmptyMap)},
  { 36, 44, -1, sizeof(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse)},
  { 46, -1, -1, sizeof(::proto_util_converter::testing::StringtoInt)},
  { 53, 61, -1, sizeof(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse)},
  { 63, -1, -1, sizeof(::proto_util_converter::testing::IntToString)},
  { 70, 78, -1, sizeof(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse)},
  { 80, -1, -1, sizeof(::proto_util_converter::testing::BoolToString)},
  { 87, 95, -1, sizeof(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse)},
  { 97, -1, -1, sizeof(::proto_util_converter::testing::Mixed1)},
  { 105, 113, -1, sizeof(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse)},
  { 115, -1, -1, sizeof(::proto_util_converter::testing::Mixed2)},
  { 123, -1, -1, sizeof(::proto_util_converter::testing::MapOfObjects_M)},
  { 130, 138, -1, sizeof(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse)},
  { 140, -1, -1, sizeof(::proto_util_converter::testing::MapOfObjects)},
  { 147, -1, -1, sizeof(::proto_util_converter::testing::DummyRequest)},
  { 153, 161, -1, sizeof(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse)},
  { 163, 171, -1, sizeof(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse)},
  { 173, -1, -1, sizeof(::proto_util_converter::testing::MapIn)},
  { 183, 191, -1, sizeof(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse)},
  { 193, 201, -1, sizeof(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse)},
  { 203, 211, -1, sizeof(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse)},
  { 213, 221, -1, sizeof(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse)},
  { 223, -1, -1, sizeof(::proto_util_converter::testing::MapOut)},
  { 234, -1, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat_Map1Entry)},
  { 242, -1, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat_Map2Entry)},
  { 250, -1, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat_Map3Entry)},
  { 258, -1, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat_Map4Entry)},
  { 266, -1, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat)},
  { 277, -1, -1, sizeof(::proto_util_converter::testing::MapM)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_util_converter::testing::_MapsTestCases_default_instance_._instance,
  &::proto_util_converter::testing::_EmptyMap_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_EmptyMap_default_instance_._instance,
  &::proto_util_converter::testing::_StringtoInt_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_StringtoInt_default_instance_._instance,
  &::proto_util_converter::testing::_IntToString_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_IntToString_default_instance_._instance,
  &::proto_util_converter::testing::_BoolToString_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_BoolToString_default_instance_._instance,
  &::proto_util_converter::testing::_Mixed1_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_Mixed1_default_instance_._instance,
  &::proto_util_converter::testing::_Mixed2_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_Mixed2_default_instance_._instance,
  &::proto_util_converter::testing::_MapOfObjects_M_default_instance_._instance,
  &::proto_util_converter::testing::_MapOfObjects_MapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapOfObjects_default_instance_._instance,
  &::proto_util_converter::testing::_DummyRequest_default_instance_._instance,
  &::proto_util_converter::testing::_MapIn_MapInputEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapIn_MapAnyEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapIn_default_instance_._instance,
  &::proto_util_converter::testing::_MapOut_Map1Entry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapOut_Map2Entry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapOut_Map3Entry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapOut_Map4Entry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapOut_default_instance_._instance,
  &::proto_util_converter::testing::_MapOutWireFormat_Map1Entry_default_instance_._instance,
  &::proto_util_converter::testing::_MapOutWireFormat_Map2Entry_default_instance_._instance,
  &::proto_util_converter::testing::_MapOutWireFormat_Map3Entry_default_instance_._instance,
  &::proto_util_converter::testing::_MapOutWireFormat_Map4Entry_default_instance_._instance,
  &::proto_util_converter::testing::_MapOutWireFormat_default_instance_._instance,
  &::proto_util_converter::testing::_MapM_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1google/protobuf/util/internal/testdata"
  "/maps.proto\022\034proto_util_converter.testin"
  "g\032\031google/protobuf/any.proto\"\211\007\n\rMapsTes"
  "tCases\0229\n\tempty_map\030\001 \001(\0132&.proto_util_c"
  "onverter.testing.EmptyMap\022@\n\rstring_to_i"
  "nt\030\002 \001(\0132).proto_util_converter.testing."
  "StringtoInt\022@\n\rint_to_string\030\003 \001(\0132).pro"
  "to_util_converter.testing.IntToString\0224\n"
  "\006mixed1\030\004 \001(\0132$.proto_util_converter.tes"
  "ting.Mixed1\0224\n\006mixed2\030\005 \001(\0132$.proto_util"
  "_converter.testing.Mixed2\022B\n\016map_of_obje"
  "cts\030\006 \001(\0132*.proto_util_converter.testing"
  ".MapOfObjects\022K\n\030empty_key_string_to_int"
  "1\030\007 \001(\0132).proto_util_converter.testing.S"
  "tringtoInt\022K\n\030empty_key_string_to_int2\030\010"
  " \001(\0132).proto_util_converter.testing.Stri"
  "ngtoInt\022K\n\030empty_key_string_to_int3\030\t \001("
  "\0132).proto_util_converter.testing.Stringt"
  "oInt\022L\n\030empty_key_bool_to_string\030\n \001(\0132*"
  ".proto_util_converter.testing.BoolToStri"
  "ng\022J\n\027empty_key_int_to_string\030\013 \001(\0132).pr"
  "oto_util_converter.testing.IntToString\022="
  "\n\017empty_key_mixed\030\014 \001(\0132$.proto_util_con"
  "verter.testing.Mixed1\022I\n\025empty_key_map_o"
  "bjects\030\r \001(\0132*.proto_util_converter.test"
  "ing.MapOfObjects\"t\n\010EmptyMap\022<\n\003map\030\001 \003("
  "\0132/.proto_util_converter.testing.EmptyMa"
  "p.MapEntry\032*\n\010MapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
  "alue\030\002 \001(\005:\0028\001\"z\n\013StringtoInt\022\?\n\003map\030\001 \003"
  "(\01322.proto_util_converter.testing.String"
  "toInt.MapEntry\032*\n\010MapEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\005:\0028\001\"z\n\013IntToString\022\?\n\003map"
  "\030\001 \003(\01322.proto_util_converter.testing.In"
  "tToString.MapEntry\032*\n\010MapEntry\022\013\n\003key\030\001 "
  "\001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\"|\n\014BoolToString\022@"
  "\n\003map\030\001 \003(\01323.proto_util_converter.testi"
  "ng.BoolToString.MapEntry\032*\n\010MapEntry\022\013\n\003"
  "key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t:\0028\001\"}\n\006Mixed1\022\013"
  "\n\003msg\030\001 \001(\t\022:\n\003map\030\002 \003(\0132-.proto_util_co"
  "nverter.testing.Mixed1.MapEntry\032*\n\010MapEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\311\001\n\006"
  "Mixed2\022:\n\003map\030\001 \003(\0132-.proto_util_convert"
  "er.testing.Mixed2.MapEntry\0222\n\002ee\030\002 \001(\0162&"
  ".proto_util_converter.testing.Mixed2.E\032*"
  "\n\010MapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\002"
  "8\001\"#\n\001E\022\006\n\002E0\020\000\022\006\n\002E1\020\001\022\006\n\002E2\020\002\022\006\n\002E3\020\003\""
  "\303\001\n\014MapOfObjects\022@\n\003map\030\001 \003(\01323.proto_ut"
  "il_converter.testing.MapOfObjects.MapEnt"
  "ry\032\027\n\001M\022\022\n\ninner_text\030\001 \001(\t\032X\n\010MapEntry\022"
  "\013\n\003key\030\001 \001(\t\022;\n\005value\030\002 \001(\0132,.proto_util"
  "_converter.testing.MapOfObjects.M:\0028\001\"\016\n"
  "\014DummyRequest\"\244\002\n\005MapIn\022\r\n\005other\030\001 \001(\t\022\016"
  "\n\006things\030\002 \003(\t\022D\n\tmap_input\030\003 \003(\01321.prot"
  "o_util_converter.testing.MapIn.MapInputE"
  "ntry\022@\n\007map_any\030\004 \003(\0132/.proto_util_conve"
  "rter.testing.MapIn.MapAnyEntry\032/\n\rMapInp"
  "utEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032"
  "C\n\013MapAnyEntry\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001"
  "(\0132\024.google.protobuf.Any:\0028\001\"\213\004\n\006MapOut\022"
  "<\n\004map1\030\001 \003(\0132..proto_util_converter.tes"
  "ting.MapOut.Map1Entry\022<\n\004map2\030\002 \003(\0132..pr"
  "oto_util_converter.testing.MapOut.Map2En"
  "try\022<\n\004map3\030\003 \003(\0132..proto_util_converter"
  ".testing.MapOut.Map3Entry\022<\n\004map4\030\005 \003(\0132"
  "..proto_util_converter.testing.MapOut.Ma"
  "p4Entry\022\013\n\003bar\030\004 \001(\t\032O\n\tMap1Entry\022\013\n\003key"
  "\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".proto_util_conve"
  "rter.testing.MapM:\0028\001\032Q\n\tMap2Entry\022\013\n\003ke"
  "y\030\001 \001(\t\0223\n\005value\030\002 \001(\0132$.proto_util_conv"
  "erter.testing.MapOut:\0028\001\032+\n\tMap3Entry\022\013\n"
  "\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\032+\n\tMap4Ent"
  "ry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t:\0028\001\"\255\004\n\020M"
  "apOutWireFormat\022F\n\004map1\030\001 \003(\01328.proto_ut"
  "il_converter.testing.MapOutWireFormat.Ma"
  "p1Entry\022F\n\004map2\030\002 \003(\01328.proto_util_conve"
  "rter.testing.MapOutWireFormat.Map2Entry\022"
  "F\n\004map3\030\003 \003(\01328.proto_util_converter.tes"
  "ting.MapOutWireFormat.Map3Entry\022F\n\004map4\030"
  "\005 \003(\01328.proto_util_converter.testing.Map"
  "OutWireFormat.Map4Entry\022\013\n\003bar\030\004 \001(\t\032K\n\t"
  "Map1Entry\022\013\n\003key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\"."
  "proto_util_converter.testing.MapM\032M\n\tMap"
  "2Entry\022\013\n\003key\030\001 \001(\t\0223\n\005value\030\002 \001(\0132$.pro"
  "to_util_converter.testing.MapOut\032\'\n\tMap3"
  "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t\032\'\n\tMap"
  "4Entry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t\"\023\n\004Ma"
  "pM\022\013\n\003foo\030\001 \001(\t2r\n\017MapsTestService\022_\n\004Ca"
  "ll\022*.proto_util_converter.testing.DummyR"
  "equest\032+.proto_util_converter.testing.Ma"
  "psTestCasesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto = {
    false, false, 3579, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto,
    "google/protobuf/util/internal/testdata/maps.proto",
    &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_deps, 1, 31,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto);
namespace proto_util_converter {
namespace testing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mixed2_E_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[0];
}
bool Mixed2_E_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Mixed2_E Mixed2::E0;
constexpr Mixed2_E Mixed2::E1;
constexpr Mixed2_E Mixed2::E2;
constexpr Mixed2_E Mixed2::E3;
constexpr Mixed2_E Mixed2::E_MIN;
constexpr Mixed2_E Mixed2::E_MAX;
constexpr int Mixed2::E_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MapsTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::EmptyMap& empty_map(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::StringtoInt& string_to_int(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::IntToString& int_to_string(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::Mixed1& mixed1(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::Mixed2& mixed2(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::MapOfObjects& map_of_objects(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int1(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int2(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int3(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::BoolToString& empty_key_bool_to_string(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::IntToString& empty_key_int_to_string(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::Mixed1& empty_key_mixed(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::MapOfObjects& empty_key_map_objects(const MapsTestCases* msg);
};

const ::proto_util_converter::testing::EmptyMap&
MapsTestCases::_Internal::empty_map(const MapsTestCases* msg) {
  return *msg->empty_map_;
}
const ::proto_util_converter::testing::StringtoInt&
MapsTestCases::_Internal::string_to_int(const MapsTestCases* msg) {
  return *msg->string_to_int_;
}
const ::proto_util_converter::testing::IntToString&
MapsTestCases::_Internal::int_to_string(const MapsTestCases* msg) {
  return *msg->int_to_string_;
}
const ::proto_util_converter::testing::Mixed1&
MapsTestCases::_Internal::mixed1(const MapsTestCases* msg) {
  return *msg->mixed1_;
}
const ::proto_util_converter::testing::Mixed2&
MapsTestCases::_Internal::mixed2(const MapsTestCases* msg) {
  return *msg->mixed2_;
}
const ::proto_util_converter::testing::MapOfObjects&
MapsTestCases::_Internal::map_of_objects(const MapsTestCases* msg) {
  return *msg->map_of_objects_;
}
const ::proto_util_converter::testing::StringtoInt&
MapsTestCases::_Internal::empty_key_string_to_int1(const MapsTestCases* msg) {
  return *msg->empty_key_string_to_int1_;
}
const ::proto_util_converter::testing::StringtoInt&
MapsTestCases::_Internal::empty_key_string_to_int2(const MapsTestCases* msg) {
  return *msg->empty_key_string_to_int2_;
}
const ::proto_util_converter::testing::StringtoInt&
MapsTestCases::_Internal::empty_key_string_to_int3(const MapsTestCases* msg) {
  return *msg->empty_key_string_to_int3_;
}
const ::proto_util_converter::testing::BoolToString&
MapsTestCases::_Internal::empty_key_bool_to_string(const MapsTestCases* msg) {
  return *msg->empty_key_bool_to_string_;
}
const ::proto_util_converter::testing::IntToString&
MapsTestCases::_Internal::empty_key_int_to_string(const MapsTestCases* msg) {
  return *msg->empty_key_int_to_string_;
}
const ::proto_util_converter::testing::Mixed1&
MapsTestCases::_Internal::empty_key_mixed(const MapsTestCases* msg) {
  return *msg->empty_key_mixed_;
}
const ::proto_util_converter::testing::MapOfObjects&
MapsTestCases::_Internal::empty_key_map_objects(const MapsTestCases* msg) {
  return *msg->empty_key_map_objects_;
}
MapsTestCases::MapsTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapsTestCases)
}
MapsTestCases::MapsTestCases(const MapsTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_empty_map()) {
    empty_map_ = new ::proto_util_converter::testing::EmptyMap(*from.empty_map_);
  } else {
    empty_map_ = nullptr;
  }
  if (from._internal_has_string_to_int()) {
    string_to_int_ = new ::proto_util_converter::testing::StringtoInt(*from.string_to_int_);
  } else {
    string_to_int_ = nullptr;
  }
  if (from._internal_has_int_to_string()) {
    int_to_string_ = new ::proto_util_converter::testing::IntToString(*from.int_to_string_);
  } else {
    int_to_string_ = nullptr;
  }
  if (from._internal_has_mixed1()) {
    mixed1_ = new ::proto_util_converter::testing::Mixed1(*from.mixed1_);
  } else {
    mixed1_ = nullptr;
  }
  if (from._internal_has_mixed2()) {
    mixed2_ = new ::proto_util_converter::testing::Mixed2(*from.mixed2_);
  } else {
    mixed2_ = nullptr;
  }
  if (from._internal_has_map_of_objects()) {
    map_of_objects_ = new ::proto_util_converter::testing::MapOfObjects(*from.map_of_objects_);
  } else {
    map_of_objects_ = nullptr;
  }
  if (from._internal_has_empty_key_string_to_int1()) {
    empty_key_string_to_int1_ = new ::proto_util_converter::testing::StringtoInt(*from.empty_key_string_to_int1_);
  } else {
    empty_key_string_to_int1_ = nullptr;
  }
  if (from._internal_has_empty_key_string_to_int2()) {
    empty_key_string_to_int2_ = new ::proto_util_converter::testing::StringtoInt(*from.empty_key_string_to_int2_);
  } else {
    empty_key_string_to_int2_ = nullptr;
  }
  if (from._internal_has_empty_key_string_to_int3()) {
    empty_key_string_to_int3_ = new ::proto_util_converter::testing::StringtoInt(*from.empty_key_string_to_int3_);
  } else {
    empty_key_string_to_int3_ = nullptr;
  }
  if (from._internal_has_empty_key_bool_to_string()) {
    empty_key_bool_to_string_ = new ::proto_util_converter::testing::BoolToString(*from.empty_key_bool_to_string_);
  } else {
    empty_key_bool_to_string_ = nullptr;
  }
  if (from._internal_has_empty_key_int_to_string()) {
    empty_key_int_to_string_ = new ::proto_util_converter::testing::IntToString(*from.empty_key_int_to_string_);
  } else {
    empty_key_int_to_string_ = nullptr;
  }
  if (from._internal_has_empty_key_mixed()) {
    empty_key_mixed_ = new ::proto_util_converter::testing::Mixed1(*from.empty_key_mixed_);
  } else {
    empty_key_mixed_ = nullptr;
  }
  if (from._internal_has_empty_key_map_objects()) {
    empty_key_map_objects_ = new ::proto_util_converter::testing::MapOfObjects(*from.empty_key_map_objects_);
  } else {
    empty_key_map_objects_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapsTestCases)
}

inline void MapsTestCases::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&empty_map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&empty_key_map_objects_) -
    reinterpret_cast<char*>(&empty_map_)) + sizeof(empty_key_map_objects_));
}

MapsTestCases::~MapsTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapsTestCases)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapsTestCases::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete empty_map_;
  if (this != internal_default_instance()) delete string_to_int_;
  if (this != internal_default_instance()) delete int_to_string_;
  if (this != internal_default_instance()) delete mixed1_;
  if (this != internal_default_instance()) delete mixed2_;
  if (this != internal_default_instance()) delete map_of_objects_;
  if (this != internal_default_instance()) delete empty_key_string_to_int1_;
  if (this != internal_default_instance()) delete empty_key_string_to_int2_;
  if (this != internal_default_instance()) delete empty_key_string_to_int3_;
  if (this != internal_default_instance()) delete empty_key_bool_to_string_;
  if (this != internal_default_instance()) delete empty_key_int_to_string_;
  if (this != internal_default_instance()) delete empty_key_mixed_;
  if (this != internal_default_instance()) delete empty_key_map_objects_;
}

void MapsTestCases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapsTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapsTestCases)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && empty_map_ != nullptr) {
    delete empty_map_;
  }
  empty_map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && string_to_int_ != nullptr) {
    delete string_to_int_;
  }
  string_to_int_ = nullptr;
  if (GetArenaForAllocation() == nullptr && int_to_string_ != nullptr) {
    delete int_to_string_;
  }
  int_to_string_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mixed1_ != nullptr) {
    delete mixed1_;
  }
  mixed1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mixed2_ != nullptr) {
    delete mixed2_;
  }
  mixed2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && map_of_objects_ != nullptr) {
    delete map_of_objects_;
  }
  map_of_objects_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_key_string_to_int1_ != nullptr) {
    delete empty_key_string_to_int1_;
  }
  empty_key_string_to_int1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_key_string_to_int2_ != nullptr) {
    delete empty_key_string_to_int2_;
  }
  empty_key_string_to_int2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_key_string_to_int3_ != nullptr) {
    delete empty_key_string_to_int3_;
  }
  empty_key_string_to_int3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_key_bool_to_string_ != nullptr) {
    delete empty_key_bool_to_string_;
  }
  empty_key_bool_to_string_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_key_int_to_string_ != nullptr) {
    delete empty_key_int_to_string_;
  }
  empty_key_int_to_string_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_key_mixed_ != nullptr) {
    delete empty_key_mixed_;
  }
  empty_key_mixed_ = nullptr;
  if (GetArenaForAllocation() == nullptr && empty_key_map_objects_ != nullptr) {
    delete empty_key_map_objects_;
  }
  empty_key_map_objects_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapsTestCases::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_util_converter.testing.EmptyMap empty_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoInt string_to_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_to_int(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.IntToString int_to_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_to_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Mixed1 mixed1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Mixed2 mixed2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mixed2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_of_objects(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_key_string_to_int1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_key_string_to_int2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_key_string_to_int3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_key_bool_to_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_key_int_to_string(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_key_mixed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_key_map_objects(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapsTestCases::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapsTestCases)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.EmptyMap empty_map = 1;
  if (this->_internal_has_empty_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::empty_map(this),
        _Internal::empty_map(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StringtoInt string_to_int = 2;
  if (this->_internal_has_string_to_int()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::string_to_int(this),
        _Internal::string_to_int(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.IntToString int_to_string = 3;
  if (this->_internal_has_int_to_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::int_to_string(this),
        _Internal::int_to_string(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.Mixed1 mixed1 = 4;
  if (this->_internal_has_mixed1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mixed1(this),
        _Internal::mixed1(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.Mixed2 mixed2 = 5;
  if (this->_internal_has_mixed2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mixed2(this),
        _Internal::mixed2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
  if (this->_internal_has_map_of_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::map_of_objects(this),
        _Internal::map_of_objects(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
  if (this->_internal_has_empty_key_string_to_int1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::empty_key_string_to_int1(this),
        _Internal::empty_key_string_to_int1(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
  if (this->_internal_has_empty_key_string_to_int2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::empty_key_string_to_int2(this),
        _Internal::empty_key_string_to_int2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
  if (this->_internal_has_empty_key_string_to_int3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::empty_key_string_to_int3(this),
        _Internal::empty_key_string_to_int3(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
  if (this->_internal_has_empty_key_bool_to_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::empty_key_bool_to_string(this),
        _Internal::empty_key_bool_to_string(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
  if (this->_internal_has_empty_key_int_to_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::empty_key_int_to_string(this),
        _Internal::empty_key_int_to_string(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
  if (this->_internal_has_empty_key_mixed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::empty_key_mixed(this),
        _Internal::empty_key_mixed(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
  if (this->_internal_has_empty_key_map_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::empty_key_map_objects(this),
        _Internal::empty_key_map_objects(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapsTestCases)
  return target;
}

size_t MapsTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapsTestCases)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.EmptyMap empty_map = 1;
  if (this->_internal_has_empty_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_map_);
  }

  // .proto_util_converter.testing.StringtoInt string_to_int = 2;
  if (this->_internal_has_string_to_int()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *string_to_int_);
  }

  // .proto_util_converter.testing.IntToString int_to_string = 3;
  if (this->_internal_has_int_to_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *int_to_string_);
  }

  // .proto_util_converter.testing.Mixed1 mixed1 = 4;
  if (this->_internal_has_mixed1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed1_);
  }

  // .proto_util_converter.testing.Mixed2 mixed2 = 5;
  if (this->_internal_has_mixed2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed2_);
  }

  // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
  if (this->_internal_has_map_of_objects()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_of_objects_);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
  if (this->_internal_has_empty_key_string_to_int1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_string_to_int1_);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
  if (this->_internal_has_empty_key_string_to_int2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_string_to_int2_);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
  if (this->_internal_has_empty_key_string_to_int3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_string_to_int3_);
  }

  // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
  if (this->_internal_has_empty_key_bool_to_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_bool_to_string_);
  }

  // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
  if (this->_internal_has_empty_key_int_to_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_int_to_string_);
  }

  // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
  if (this->_internal_has_empty_key_mixed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_mixed_);
  }

  // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
  if (this->_internal_has_empty_key_map_objects()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_map_objects_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapsTestCases::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapsTestCases::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapsTestCases::GetClassData() const { return &_class_data_; }

void MapsTestCases::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapsTestCases *>(to)->MergeFrom(
      static_cast<const MapsTestCases &>(from));
}


void MapsTestCases::MergeFrom(const MapsTestCases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapsTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_empty_map()) {
    _internal_mutable_empty_map()->::proto_util_converter::testing::EmptyMap::MergeFrom(from._internal_empty_map());
  }
  if (from._internal_has_string_to_int()) {
    _internal_mutable_string_to_int()->::proto_util_converter::testing::StringtoInt::MergeFrom(from._internal_string_to_int());
  }
  if (from._internal_has_int_to_string()) {
    _internal_mutable_int_to_string()->::proto_util_converter::testing::IntToString::MergeFrom(from._internal_int_to_string());
  }
  if (from._internal_has_mixed1()) {
    _internal_mutable_mixed1()->::proto_util_converter::testing::Mixed1::MergeFrom(from._internal_mixed1());
  }
  if (from._internal_has_mixed2()) {
    _internal_mutable_mixed2()->::proto_util_converter::testing::Mixed2::MergeFrom(from._internal_mixed2());
  }
  if (from._internal_has_map_of_objects()) {
    _internal_mutable_map_of_objects()->::proto_util_converter::testing::MapOfObjects::MergeFrom(from._internal_map_of_objects());
  }
  if (from._internal_has_empty_key_string_to_int1()) {
    _internal_mutable_empty_key_string_to_int1()->::proto_util_converter::testing::StringtoInt::MergeFrom(from._internal_empty_key_string_to_int1());
  }
  if (from._internal_has_empty_key_string_to_int2()) {
    _internal_mutable_empty_key_string_to_int2()->::proto_util_converter::testing::StringtoInt::MergeFrom(from._internal_empty_key_string_to_int2());
  }
  if (from._internal_has_empty_key_string_to_int3()) {
    _internal_mutable_empty_key_string_to_int3()->::proto_util_converter::testing::StringtoInt::MergeFrom(from._internal_empty_key_string_to_int3());
  }
  if (from._internal_has_empty_key_bool_to_string()) {
    _internal_mutable_empty_key_bool_to_string()->::proto_util_converter::testing::BoolToString::MergeFrom(from._internal_empty_key_bool_to_string());
  }
  if (from._internal_has_empty_key_int_to_string()) {
    _internal_mutable_empty_key_int_to_string()->::proto_util_converter::testing::IntToString::MergeFrom(from._internal_empty_key_int_to_string());
  }
  if (from._internal_has_empty_key_mixed()) {
    _internal_mutable_empty_key_mixed()->::proto_util_converter::testing::Mixed1::MergeFrom(from._internal_empty_key_mixed());
  }
  if (from._internal_has_empty_key_map_objects()) {
    _internal_mutable_empty_key_map_objects()->::proto_util_converter::testing::MapOfObjects::MergeFrom(from._internal_empty_key_map_objects());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapsTestCases::CopyFrom(const MapsTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapsTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapsTestCases::IsInitialized() const {
  return true;
}

void MapsTestCases::InternalSwap(MapsTestCases* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapsTestCases, empty_key_map_objects_)
      + sizeof(MapsTestCases::empty_key_map_objects_)
      - PROTOBUF_FIELD_OFFSET(MapsTestCases, empty_map_)>(
          reinterpret_cast<char*>(&empty_map_),
          reinterpret_cast<char*>(&other->empty_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapsTestCases::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[0]);
}

// ===================================================================

EmptyMap_MapEntry_DoNotUse::EmptyMap_MapEntry_DoNotUse() {}
EmptyMap_MapEntry_DoNotUse::EmptyMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EmptyMap_MapEntry_DoNotUse::MergeFrom(const EmptyMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EmptyMap_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[1]);
}

// ===================================================================

class EmptyMap::_Internal {
 public:
};

EmptyMap::EmptyMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &EmptyMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.EmptyMap)
}
EmptyMap::EmptyMap(const EmptyMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.EmptyMap)
}

inline void EmptyMap::SharedCtor() {
}

EmptyMap::~EmptyMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.EmptyMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void EmptyMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void EmptyMap::ArenaDtor(void* object) {
  EmptyMap* _this = reinterpret_cast< EmptyMap* >(object);
  _this->map_.Destruct();
}
void EmptyMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmptyMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.EmptyMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, int32> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmptyMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.EmptyMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = EmptyMap_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.EmptyMap)
  return target;
}

size_t EmptyMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.EmptyMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += EmptyMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmptyMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyMap::GetClassData() const { return &_class_data_; }

void EmptyMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EmptyMap *>(to)->MergeFrom(
      static_cast<const EmptyMap &>(from));
}


void EmptyMap::MergeFrom(const EmptyMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.EmptyMap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyMap::CopyFrom(const EmptyMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.EmptyMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMap::IsInitialized() const {
  return true;
}

void EmptyMap::InternalSwap(EmptyMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[2]);
}

// ===================================================================

StringtoInt_MapEntry_DoNotUse::StringtoInt_MapEntry_DoNotUse() {}
StringtoInt_MapEntry_DoNotUse::StringtoInt_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StringtoInt_MapEntry_DoNotUse::MergeFrom(const StringtoInt_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StringtoInt_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[3]);
}

// ===================================================================

class StringtoInt::_Internal {
 public:
};

StringtoInt::StringtoInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StringtoInt::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.StringtoInt)
}
StringtoInt::StringtoInt(const StringtoInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StringtoInt)
}

inline void StringtoInt::SharedCtor() {
}

StringtoInt::~StringtoInt() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StringtoInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StringtoInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void StringtoInt::ArenaDtor(void* object) {
  StringtoInt* _this = reinterpret_cast< StringtoInt* >(object);
  _this->map_.Destruct();
}
void StringtoInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringtoInt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StringtoInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringtoInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int32> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringtoInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StringtoInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = StringtoInt_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.StringtoInt.MapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StringtoInt)
  return target;
}

size_t StringtoInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StringtoInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += StringtoInt_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringtoInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringtoInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringtoInt::GetClassData() const { return &_class_data_; }

void StringtoInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StringtoInt *>(to)->MergeFrom(
      static_cast<const StringtoInt &>(from));
}


void StringtoInt::MergeFrom(const StringtoInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StringtoInt)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringtoInt::CopyFrom(const StringtoInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StringtoInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringtoInt::IsInitialized() const {
  return true;
}

void StringtoInt::InternalSwap(StringtoInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringtoInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[4]);
}

// ===================================================================

IntToString_MapEntry_DoNotUse::IntToString_MapEntry_DoNotUse() {}
IntToString_MapEntry_DoNotUse::IntToString_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IntToString_MapEntry_DoNotUse::MergeFrom(const IntToString_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IntToString_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[5]);
}

// ===================================================================

class IntToString::_Internal {
 public:
};

IntToString::IntToString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &IntToString::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.IntToString)
}
IntToString::IntToString(const IntToString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.IntToString)
}

inline void IntToString::SharedCtor() {
}

IntToString::~IntToString() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.IntToString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void IntToString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void IntToString::ArenaDtor(void* object) {
  IntToString* _this = reinterpret_cast< IntToString* >(object);
  _this->map_.Destruct();
}
void IntToString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntToString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.IntToString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntToString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, string> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntToString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.IntToString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = IntToString_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.IntToString.MapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.IntToString)
  return target;
}

size_t IntToString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.IntToString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += IntToString_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntToString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntToString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntToString::GetClassData() const { return &_class_data_; }

void IntToString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntToString *>(to)->MergeFrom(
      static_cast<const IntToString &>(from));
}


void IntToString::MergeFrom(const IntToString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.IntToString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntToString::CopyFrom(const IntToString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.IntToString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntToString::IsInitialized() const {
  return true;
}

void IntToString::InternalSwap(IntToString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntToString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[6]);
}

// ===================================================================

BoolToString_MapEntry_DoNotUse::BoolToString_MapEntry_DoNotUse() {}
BoolToString_MapEntry_DoNotUse::BoolToString_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BoolToString_MapEntry_DoNotUse::MergeFrom(const BoolToString_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BoolToString_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[7]);
}

// ===================================================================

class BoolToString::_Internal {
 public:
};

BoolToString::BoolToString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &BoolToString::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.BoolToString)
}
BoolToString::BoolToString(const BoolToString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.BoolToString)
}

inline void BoolToString::SharedCtor() {
}

BoolToString::~BoolToString() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.BoolToString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void BoolToString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void BoolToString::ArenaDtor(void* object) {
  BoolToString* _this = reinterpret_cast< BoolToString* >(object);
  _this->map_.Destruct();
}
void BoolToString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoolToString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.BoolToString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolToString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<bool, string> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoolToString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.BoolToString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<bool, string> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<bool, std::string>;
    using WireHelper = BoolToString_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.BoolToString.MapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.BoolToString)
  return target;
}

size_t BoolToString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.BoolToString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<bool, string> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += BoolToString_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolToString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoolToString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoolToString::GetClassData() const { return &_class_data_; }

void BoolToString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoolToString *>(to)->MergeFrom(
      static_cast<const BoolToString &>(from));
}


void BoolToString::MergeFrom(const BoolToString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.BoolToString)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoolToString::CopyFrom(const BoolToString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.BoolToString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolToString::IsInitialized() const {
  return true;
}

void BoolToString::InternalSwap(BoolToString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolToString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[8]);
}

// ===================================================================

Mixed1_MapEntry_DoNotUse::Mixed1_MapEntry_DoNotUse() {}
Mixed1_MapEntry_DoNotUse::Mixed1_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Mixed1_MapEntry_DoNotUse::MergeFrom(const Mixed1_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Mixed1_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[9]);
}

// ===================================================================

class Mixed1::_Internal {
 public:
};

Mixed1::Mixed1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Mixed1::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.Mixed1)
}
Mixed1::Mixed1(const Mixed1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.Mixed1)
}

inline void Mixed1::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Mixed1::~Mixed1() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.Mixed1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Mixed1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
  msg_.Destroy();
}

void Mixed1::ArenaDtor(void* object) {
  Mixed1* _this = reinterpret_cast< Mixed1* >(object);
  _this->map_.Destruct();
}
void Mixed1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mixed1::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.Mixed1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mixed1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.Mixed1.msg"));
        } else
          goto handle_unusual;
        continue;
      // map<string, float> map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mixed1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.Mixed1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.Mixed1.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // map<string, float> map = 2;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<std::string, float>;
    using WireHelper = Mixed1_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.Mixed1.MapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.Mixed1)
  return target;
}

size_t Mixed1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.Mixed1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += Mixed1_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mixed1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mixed1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mixed1::GetClassData() const { return &_class_data_; }

void Mixed1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mixed1 *>(to)->MergeFrom(
      static_cast<const Mixed1 &>(from));
}


void Mixed1::MergeFrom(const Mixed1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.Mixed1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mixed1::CopyFrom(const Mixed1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.Mixed1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mixed1::IsInitialized() const {
  return true;
}

void Mixed1::InternalSwap(Mixed1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Mixed1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[10]);
}

// ===================================================================

Mixed2_MapEntry_DoNotUse::Mixed2_MapEntry_DoNotUse() {}
Mixed2_MapEntry_DoNotUse::Mixed2_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Mixed2_MapEntry_DoNotUse::MergeFrom(const Mixed2_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Mixed2_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[11]);
}

// ===================================================================

class Mixed2::_Internal {
 public:
};

Mixed2::Mixed2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Mixed2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.Mixed2)
}
Mixed2::Mixed2(const Mixed2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  ee_ = from.ee_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.Mixed2)
}

inline void Mixed2::SharedCtor() {
ee_ = 0;
}

Mixed2::~Mixed2() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.Mixed2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Mixed2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void Mixed2::ArenaDtor(void* object) {
  Mixed2* _this = reinterpret_cast< Mixed2* >(object);
  _this->map_.Destruct();
}
void Mixed2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mixed2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.Mixed2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  ee_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mixed2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, bool> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Mixed2.E ee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ee(static_cast<::proto_util_converter::testing::Mixed2_E>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mixed2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.Mixed2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<int32_t, bool>;
    using WireHelper = Mixed2_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // .proto_util_converter.testing.Mixed2.E ee = 2;
  if (this->_internal_ee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.Mixed2)
  return target;
}

size_t Mixed2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.Mixed2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += Mixed2_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .proto_util_converter.testing.Mixed2.E ee = 2;
  if (this->_internal_ee() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mixed2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mixed2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mixed2::GetClassData() const { return &_class_data_; }

void Mixed2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mixed2 *>(to)->MergeFrom(
      static_cast<const Mixed2 &>(from));
}


void Mixed2::MergeFrom(const Mixed2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.Mixed2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (from._internal_ee() != 0) {
    _internal_set_ee(from._internal_ee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mixed2::CopyFrom(const Mixed2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.Mixed2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mixed2::IsInitialized() const {
  return true;
}

void Mixed2::InternalSwap(Mixed2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
  swap(ee_, other->ee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mixed2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[12]);
}

// ===================================================================

class MapOfObjects_M::_Internal {
 public:
};

MapOfObjects_M::MapOfObjects_M(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOfObjects.M)
}
MapOfObjects_M::MapOfObjects_M(const MapOfObjects_M& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inner_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    inner_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inner_text().empty()) {
    inner_text_.Set(from._internal_inner_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOfObjects.M)
}

inline void MapOfObjects_M::SharedCtor() {
inner_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  inner_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapOfObjects_M::~MapOfObjects_M() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOfObjects.M)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapOfObjects_M::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  inner_text_.Destroy();
}

void MapOfObjects_M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOfObjects_M::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOfObjects.M)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOfObjects_M::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string inner_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inner_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapOfObjects.M.inner_text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOfObjects_M::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOfObjects.M)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_text = 1;
  if (!this->_internal_inner_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inner_text().data(), static_cast<int>(this->_internal_inner_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOfObjects.M.inner_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inner_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOfObjects.M)
  return target;
}

size_t MapOfObjects_M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOfObjects.M)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inner_text = 1;
  if (!this->_internal_inner_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inner_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOfObjects_M::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOfObjects_M::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOfObjects_M::GetClassData() const { return &_class_data_; }

void MapOfObjects_M::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOfObjects_M *>(to)->MergeFrom(
      static_cast<const MapOfObjects_M &>(from));
}


void MapOfObjects_M::MergeFrom(const MapOfObjects_M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOfObjects.M)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inner_text().empty()) {
    _internal_set_inner_text(from._internal_inner_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOfObjects_M::CopyFrom(const MapOfObjects_M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOfObjects.M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOfObjects_M::IsInitialized() const {
  return true;
}

void MapOfObjects_M::InternalSwap(MapOfObjects_M* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &inner_text_, lhs_arena,
      &other->inner_text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOfObjects_M::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[13]);
}

// ===================================================================

MapOfObjects_MapEntry_DoNotUse::MapOfObjects_MapEntry_DoNotUse() {}
MapOfObjects_MapEntry_DoNotUse::MapOfObjects_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOfObjects_MapEntry_DoNotUse::MergeFrom(const MapOfObjects_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOfObjects_MapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[14]);
}

// ===================================================================

class MapOfObjects::_Internal {
 public:
};

MapOfObjects::MapOfObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MapOfObjects::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOfObjects)
}
MapOfObjects::MapOfObjects(const MapOfObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOfObjects)
}

inline void MapOfObjects::SharedCtor() {
}

MapOfObjects::~MapOfObjects() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOfObjects)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MapOfObjects::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destruct();
}

void MapOfObjects::ArenaDtor(void* object) {
  MapOfObjects* _this = reinterpret_cast< MapOfObjects* >(object);
  _this->map_.Destruct();
}
void MapOfObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOfObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOfObjects)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOfObjects::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOfObjects::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOfObjects)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
  if (!this->_internal_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::proto_util_converter::testing::MapOfObjects_M>;
    using WireHelper = MapOfObjects_MapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapOfObjects.MapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOfObjects)
  return target;
}

size_t MapOfObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOfObjects)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += MapOfObjects_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOfObjects::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOfObjects::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOfObjects::GetClassData() const { return &_class_data_; }

void MapOfObjects::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOfObjects *>(to)->MergeFrom(
      static_cast<const MapOfObjects &>(from));
}


void MapOfObjects::MergeFrom(const MapOfObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOfObjects)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOfObjects::CopyFrom(const MapOfObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOfObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOfObjects::IsInitialized() const {
  return true;
}

void MapOfObjects::InternalSwap(MapOfObjects* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOfObjects::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[15]);
}

// ===================================================================

class DummyRequest::_Internal {
 public:
};

DummyRequest::DummyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.DummyRequest)
}
DummyRequest::DummyRequest(const DummyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DummyRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DummyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DummyRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DummyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[16]);
}

// ===================================================================

MapIn_MapInputEntry_DoNotUse::MapIn_MapInputEntry_DoNotUse() {}
MapIn_MapInputEntry_DoNotUse::MapIn_MapInputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapIn_MapInputEntry_DoNotUse::MergeFrom(const MapIn_MapInputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapIn_MapInputEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[17]);
}

// ===================================================================

MapIn_MapAnyEntry_DoNotUse::MapIn_MapAnyEntry_DoNotUse() {}
MapIn_MapAnyEntry_DoNotUse::MapIn_MapAnyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapIn_MapAnyEntry_DoNotUse::MergeFrom(const MapIn_MapAnyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapIn_MapAnyEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[18]);
}

// ===================================================================

class MapIn::_Internal {
 public:
};

void MapIn::clear_map_any() {
  map_any_.Clear();
}
MapIn::MapIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  things_(arena),
  map_input_(arena),
  map_any_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MapIn::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapIn)
}
MapIn::MapIn(const MapIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      things_(from.things_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_input_.MergeFrom(from.map_input_);
  map_any_.MergeFrom(from.map_any_);
  other_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    other_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_other().empty()) {
    other_.Set(from._internal_other(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapIn)
}

inline void MapIn::SharedCtor() {
other_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  other_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapIn::~MapIn() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapIn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MapIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_input_.Destruct();
  map_any_.Destruct();
  other_.Destroy();
}

void MapIn::ArenaDtor(void* object) {
  MapIn* _this = reinterpret_cast< MapIn* >(object);
  _this->map_input_.Destruct();
  _this->map_any_.Destruct();
}
void MapIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapIn::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapIn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  things_.Clear();
  map_input_.Clear();
  map_any_.Clear();
  other_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapIn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string other = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_other();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapIn.other"));
        } else
          goto handle_unusual;
        continue;
      // repeated string things = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_things();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapIn.things"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> map_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> map_any = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_any_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapIn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapIn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string other = 1;
  if (!this->_internal_other().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_other().data(), static_cast<int>(this->_internal_other().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapIn.other");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_other(), target);
  }

  // repeated string things = 2;
  for (int i = 0, n = this->_internal_things_size(); i < n; i++) {
    const auto& s = this->_internal_things(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapIn.things");
    target = stream->WriteString(2, s, target);
  }

  // map<string, string> map_input = 3;
  if (!this->_internal_map_input().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = MapIn_MapInputEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_input();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapIn.MapInputEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapIn.MapInputEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .google.protobuf.Any> map_any = 4;
  if (!this->_internal_map_any().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = MapIn_MapAnyEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_any();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapIn.MapAnyEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapIn)
  return target;
}

size_t MapIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapIn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string things = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(things_.size());
  for (int i = 0, n = things_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      things_.Get(i));
  }

  // map<string, string> map_input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_input().begin();
      it != this->_internal_map_input().end(); ++it) {
    total_size += MapIn_MapInputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .google.protobuf.Any> map_any = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_any_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_map_any().begin();
      it != this->_internal_map_any().end(); ++it) {
    total_size += MapIn_MapAnyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string other = 1;
  if (!this->_internal_other().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_other());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapIn::GetClassData() const { return &_class_data_; }

void MapIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapIn *>(to)->MergeFrom(
      static_cast<const MapIn &>(from));
}


void MapIn::MergeFrom(const MapIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapIn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  things_.MergeFrom(from.things_);
  map_input_.MergeFrom(from.map_input_);
  map_any_.MergeFrom(from.map_any_);
  if (!from._internal_other().empty()) {
    _internal_set_other(from._internal_other());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapIn::CopyFrom(const MapIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapIn::IsInitialized() const {
  return true;
}

void MapIn::InternalSwap(MapIn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  things_.InternalSwap(&other->things_);
  map_input_.InternalSwap(&other->map_input_);
  map_any_.InternalSwap(&other->map_any_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &other_, lhs_arena,
      &other->other_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MapIn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[19]);
}

// ===================================================================

MapOut_Map1Entry_DoNotUse::MapOut_Map1Entry_DoNotUse() {}
MapOut_Map1Entry_DoNotUse::MapOut_Map1Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOut_Map1Entry_DoNotUse::MergeFrom(const MapOut_Map1Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOut_Map1Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[20]);
}

// ===================================================================

MapOut_Map2Entry_DoNotUse::MapOut_Map2Entry_DoNotUse() {}
MapOut_Map2Entry_DoNotUse::MapOut_Map2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOut_Map2Entry_DoNotUse::MergeFrom(const MapOut_Map2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOut_Map2Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[21]);
}

// ===================================================================

MapOut_Map3Entry_DoNotUse::MapOut_Map3Entry_DoNotUse() {}
MapOut_Map3Entry_DoNotUse::MapOut_Map3Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOut_Map3Entry_DoNotUse::MergeFrom(const MapOut_Map3Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOut_Map3Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[22]);
}

// ===================================================================

MapOut_Map4Entry_DoNotUse::MapOut_Map4Entry_DoNotUse() {}
MapOut_Map4Entry_DoNotUse::MapOut_Map4Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOut_Map4Entry_DoNotUse::MergeFrom(const MapOut_Map4Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOut_Map4Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[23]);
}

// ===================================================================

class MapOut::_Internal {
 public:
};

MapOut::MapOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map1_(arena),
  map2_(arena),
  map3_(arena),
  map4_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MapOut::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOut)
}
MapOut::MapOut(const MapOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  map3_.MergeFrom(from.map3_);
  map4_.MergeFrom(from.map4_);
  bar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bar().empty()) {
    bar_.Set(from._internal_bar(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOut)
}

inline void MapOut::SharedCtor() {
bar_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bar_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapOut::~MapOut() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOut)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MapOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map1_.Destruct();
  map2_.Destruct();
  map3_.Destruct();
  map4_.Destruct();
  bar_.Destroy();
}

void MapOut::ArenaDtor(void* object) {
  MapOut* _this = reinterpret_cast< MapOut* >(object);
  _this->map1_.Destruct();
  _this->map2_.Destruct();
  _this->map3_.Destruct();
  _this->map4_.Destruct();
}
void MapOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOut::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map1_.Clear();
  map2_.Clear();
  map3_.Clear();
  map4_.Clear();
  bar_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOut::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .proto_util_converter.testing.MapM> map1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map1_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> map3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map3_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string bar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapOut.bar"));
        } else
          goto handle_unusual;
        continue;
      // map<bool, string> map4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map4_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapM> map1 = 1;
  if (!this->_internal_map1().empty()) {
    using MapType = ::_pb::Map<std::string, ::proto_util_converter::testing::MapM>;
    using WireHelper = MapOut_Map1Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map1();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapOut.Map1Entry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
  if (!this->_internal_map2().empty()) {
    using MapType = ::_pb::Map<std::string, ::proto_util_converter::testing::MapOut>;
    using WireHelper = MapOut_Map2Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map2();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapOut.Map2Entry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<int32, string> map3 = 3;
  if (!this->_internal_map3().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = MapOut_Map3Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map3();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapOut.Map3Entry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string bar = 4;
  if (!this->_internal_bar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bar().data(), static_cast<int>(this->_internal_bar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOut.bar");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bar(), target);
  }

  // map<bool, string> map4 = 5;
  if (!this->_internal_map4().empty()) {
    using MapType = ::_pb::Map<bool, std::string>;
    using WireHelper = MapOut_Map4Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map4();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapOut.Map4Entry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOut)
  return target;
}

size_t MapOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapM> map1 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map1_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::const_iterator
      it = this->_internal_map1().begin();
      it != this->_internal_map1().end(); ++it) {
    total_size += MapOut_Map1Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::const_iterator
      it = this->_internal_map2().begin();
      it != this->_internal_map2().end(); ++it) {
    total_size += MapOut_Map2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> map3 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map3_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_map3().begin();
      it != this->_internal_map3().end(); ++it) {
    total_size += MapOut_Map3Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, string> map4 = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map4_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
      it = this->_internal_map4().begin();
      it != this->_internal_map4().end(); ++it) {
    total_size += MapOut_Map4Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string bar = 4;
  if (!this->_internal_bar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bar());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOut::GetClassData() const { return &_class_data_; }

void MapOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOut *>(to)->MergeFrom(
      static_cast<const MapOut &>(from));
}


void MapOut::MergeFrom(const MapOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOut)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  map3_.MergeFrom(from.map3_);
  map4_.MergeFrom(from.map4_);
  if (!from._internal_bar().empty()) {
    _internal_set_bar(from._internal_bar());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOut::CopyFrom(const MapOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOut::IsInitialized() const {
  return true;
}

void MapOut::InternalSwap(MapOut* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map1_.InternalSwap(&other->map1_);
  map2_.InternalSwap(&other->map2_);
  map3_.InternalSwap(&other->map3_);
  map4_.InternalSwap(&other->map4_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bar_, lhs_arena,
      &other->bar_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOut::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[24]);
}

// ===================================================================

class MapOutWireFormat_Map1Entry::_Internal {
 public:
  static const ::proto_util_converter::testing::MapM& value(const MapOutWireFormat_Map1Entry* msg);
};

const ::proto_util_converter::testing::MapM&
MapOutWireFormat_Map1Entry::_Internal::value(const MapOutWireFormat_Map1Entry* msg) {
  return *msg->value_;
}
MapOutWireFormat_Map1Entry::MapOutWireFormat_Map1Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
}
MapOutWireFormat_Map1Entry::MapOutWireFormat_Map1Entry(const MapOutWireFormat_Map1Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::proto_util_converter::testing::MapM(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
}

inline void MapOutWireFormat_Map1Entry::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = nullptr;
}

MapOutWireFormat_Map1Entry::~MapOutWireFormat_Map1Entry() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapOutWireFormat_Map1Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  if (this != internal_default_instance()) delete value_;
}

void MapOutWireFormat_Map1Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOutWireFormat_Map1Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOutWireFormat_Map1Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapOutWireFormat.Map1Entry.key"));
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapM value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOutWireFormat_Map1Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map1Entry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .proto_util_converter.testing.MapM value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  return target;
}

size_t MapOutWireFormat_Map1Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .proto_util_converter.testing.MapM value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOutWireFormat_Map1Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOutWireFormat_Map1Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOutWireFormat_Map1Entry::GetClassData() const { return &_class_data_; }

void MapOutWireFormat_Map1Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOutWireFormat_Map1Entry *>(to)->MergeFrom(
      static_cast<const MapOutWireFormat_Map1Entry &>(from));
}


void MapOutWireFormat_Map1Entry::MergeFrom(const MapOutWireFormat_Map1Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::proto_util_converter::testing::MapM::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOutWireFormat_Map1Entry::CopyFrom(const MapOutWireFormat_Map1Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map1Entry::IsInitialized() const {
  return true;
}

void MapOutWireFormat_Map1Entry::InternalSwap(MapOutWireFormat_Map1Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat_Map1Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[25]);
}

// ===================================================================

class MapOutWireFormat_Map2Entry::_Internal {
 public:
  static const ::proto_util_converter::testing::MapOut& value(const MapOutWireFormat_Map2Entry* msg);
};

const ::proto_util_converter::testing::MapOut&
MapOutWireFormat_Map2Entry::_Internal::value(const MapOutWireFormat_Map2Entry* msg) {
  return *msg->value_;
}
MapOutWireFormat_Map2Entry::MapOutWireFormat_Map2Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
}
MapOutWireFormat_Map2Entry::MapOutWireFormat_Map2Entry(const MapOutWireFormat_Map2Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::proto_util_converter::testing::MapOut(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
}

inline void MapOutWireFormat_Map2Entry::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = nullptr;
}

MapOutWireFormat_Map2Entry::~MapOutWireFormat_Map2Entry() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapOutWireFormat_Map2Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  if (this != internal_default_instance()) delete value_;
}

void MapOutWireFormat_Map2Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOutWireFormat_Map2Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOutWireFormat_Map2Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapOutWireFormat.Map2Entry.key"));
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOut value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOutWireFormat_Map2Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map2Entry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .proto_util_converter.testing.MapOut value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  return target;
}

size_t MapOutWireFormat_Map2Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .proto_util_converter.testing.MapOut value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOutWireFormat_Map2Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOutWireFormat_Map2Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOutWireFormat_Map2Entry::GetClassData() const { return &_class_data_; }

void MapOutWireFormat_Map2Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOutWireFormat_Map2Entry *>(to)->MergeFrom(
      static_cast<const MapOutWireFormat_Map2Entry &>(from));
}


void MapOutWireFormat_Map2Entry::MergeFrom(const MapOutWireFormat_Map2Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::proto_util_converter::testing::MapOut::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOutWireFormat_Map2Entry::CopyFrom(const MapOutWireFormat_Map2Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map2Entry::IsInitialized() const {
  return true;
}

void MapOutWireFormat_Map2Entry::InternalSwap(MapOutWireFormat_Map2Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat_Map2Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[26]);
}

// ===================================================================

class MapOutWireFormat_Map3Entry::_Internal {
 public:
};

MapOutWireFormat_Map3Entry::MapOutWireFormat_Map3Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
}
MapOutWireFormat_Map3Entry::MapOutWireFormat_Map3Entry(const MapOutWireFormat_Map3Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
}

inline void MapOutWireFormat_Map3Entry::SharedCtor() {
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_ = 0;
}

MapOutWireFormat_Map3Entry::~MapOutWireFormat_Map3Entry() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapOutWireFormat_Map3Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.Destroy();
}

void MapOutWireFormat_Map3Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOutWireFormat_Map3Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOutWireFormat_Map3Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapOutWireFormat.Map3Entry.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOutWireFormat_Map3Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map3Entry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  return target;
}

size_t MapOutWireFormat_Map3Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOutWireFormat_Map3Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOutWireFormat_Map3Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOutWireFormat_Map3Entry::GetClassData() const { return &_class_data_; }

void MapOutWireFormat_Map3Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOutWireFormat_Map3Entry *>(to)->MergeFrom(
      static_cast<const MapOutWireFormat_Map3Entry &>(from));
}


void MapOutWireFormat_Map3Entry::MergeFrom(const MapOutWireFormat_Map3Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOutWireFormat_Map3Entry::CopyFrom(const MapOutWireFormat_Map3Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map3Entry::IsInitialized() const {
  return true;
}

void MapOutWireFormat_Map3Entry::InternalSwap(MapOutWireFormat_Map3Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat_Map3Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[27]);
}

// ===================================================================

class MapOutWireFormat_Map4Entry::_Internal {
 public:
};

MapOutWireFormat_Map4Entry::MapOutWireFormat_Map4Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
}
MapOutWireFormat_Map4Entry::MapOutWireFormat_Map4Entry(const MapOutWireFormat_Map4Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
}

inline void MapOutWireFormat_Map4Entry::SharedCtor() {
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_ = false;
}

MapOutWireFormat_Map4Entry::~MapOutWireFormat_Map4Entry() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapOutWireFormat_Map4Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.Destroy();
}

void MapOutWireFormat_Map4Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOutWireFormat_Map4Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  key_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOutWireFormat_Map4Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapOutWireFormat.Map4Entry.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOutWireFormat_Map4Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map4Entry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  return target;
}

size_t MapOutWireFormat_Map4Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bool key = 1;
  if (this->_internal_key() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOutWireFormat_Map4Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOutWireFormat_Map4Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOutWireFormat_Map4Entry::GetClassData() const { return &_class_data_; }

void MapOutWireFormat_Map4Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOutWireFormat_Map4Entry *>(to)->MergeFrom(
      static_cast<const MapOutWireFormat_Map4Entry &>(from));
}


void MapOutWireFormat_Map4Entry::MergeFrom(const MapOutWireFormat_Map4Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOutWireFormat_Map4Entry::CopyFrom(const MapOutWireFormat_Map4Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map4Entry::IsInitialized() const {
  return true;
}

void MapOutWireFormat_Map4Entry::InternalSwap(MapOutWireFormat_Map4Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat_Map4Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[28]);
}

// ===================================================================

class MapOutWireFormat::_Internal {
 public:
};

MapOutWireFormat::MapOutWireFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map1_(arena),
  map2_(arena),
  map3_(arena),
  map4_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOutWireFormat)
}
MapOutWireFormat::MapOutWireFormat(const MapOutWireFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      map1_(from.map1_),
      map2_(from.map2_),
      map3_(from.map3_),
      map4_(from.map4_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bar().empty()) {
    bar_.Set(from._internal_bar(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat)
}

inline void MapOutWireFormat::SharedCtor() {
bar_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bar_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapOutWireFormat::~MapOutWireFormat() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapOutWireFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bar_.Destroy();
}

void MapOutWireFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapOutWireFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map1_.Clear();
  map2_.Clear();
  map3_.Clear();
  map4_.Clear();
  bar_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOutWireFormat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string bar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapOutWireFormat.bar"));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map4(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOutWireFormat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map1_size()); i < n; i++) {
    const auto& repfield = this->_internal_map1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map2_size()); i < n; i++) {
    const auto& repfield = this->_internal_map2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map3_size()); i < n; i++) {
    const auto& repfield = this->_internal_map3(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string bar = 4;
  if (!this->_internal_bar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bar().data(), static_cast<int>(this->_internal_bar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.bar");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bar(), target);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map4_size()); i < n; i++) {
    const auto& repfield = this->_internal_map4(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat)
  return target;
}

size_t MapOutWireFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
  total_size += 1UL * this->_internal_map1_size();
  for (const auto& msg : this->map1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
  total_size += 1UL * this->_internal_map2_size();
  for (const auto& msg : this->map2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
  total_size += 1UL * this->_internal_map3_size();
  for (const auto& msg : this->map3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
  total_size += 1UL * this->_internal_map4_size();
  for (const auto& msg : this->map4_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string bar = 4;
  if (!this->_internal_bar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bar());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOutWireFormat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapOutWireFormat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOutWireFormat::GetClassData() const { return &_class_data_; }

void MapOutWireFormat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapOutWireFormat *>(to)->MergeFrom(
      static_cast<const MapOutWireFormat &>(from));
}


void MapOutWireFormat::MergeFrom(const MapOutWireFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  map3_.MergeFrom(from.map3_);
  map4_.MergeFrom(from.map4_);
  if (!from._internal_bar().empty()) {
    _internal_set_bar(from._internal_bar());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOutWireFormat::CopyFrom(const MapOutWireFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat::IsInitialized() const {
  return true;
}

void MapOutWireFormat::InternalSwap(MapOutWireFormat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map1_.InternalSwap(&other->map1_);
  map2_.InternalSwap(&other->map2_);
  map3_.InternalSwap(&other->map3_);
  map4_.InternalSwap(&other->map4_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bar_, lhs_arena,
      &other->bar_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[29]);
}

// ===================================================================

class MapM::_Internal {
 public:
};

MapM::MapM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapM)
}
MapM::MapM(const MapM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  foo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    foo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_foo().empty()) {
    foo_.Set(from._internal_foo(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapM)
}

inline void MapM::SharedCtor() {
foo_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  foo_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapM::~MapM() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  foo_.Destroy();
}

void MapM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapM::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foo_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string foo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_foo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.MapM.foo"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string foo = 1;
  if (!this->_internal_foo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_foo().data(), static_cast<int>(this->_internal_foo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapM.foo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_foo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapM)
  return target;
}

size_t MapM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string foo = 1;
  if (!this->_internal_foo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_foo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapM::GetClassData() const { return &_class_data_; }

void MapM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapM *>(to)->MergeFrom(
      static_cast<const MapM &>(from));
}


void MapM::MergeFrom(const MapM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_foo().empty()) {
    _internal_set_foo(from._internal_foo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapM::CopyFrom(const MapM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapM::IsInitialized() const {
  return true;
}

void MapM::InternalSwap(MapM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &foo_, lhs_arena,
      &other->foo_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MapM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[30]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapsTestCases*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapsTestCases >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapsTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::EmptyMap*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::EmptyMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::EmptyMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StringtoInt*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::StringtoInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::StringtoInt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::IntToString*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::IntToString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::IntToString >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::BoolToString*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::BoolToString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::BoolToString >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Mixed1*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::Mixed1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::Mixed1 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Mixed2*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::Mixed2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::Mixed2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfObjects_M*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfObjects_M >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOfObjects_M >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfObjects*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfObjects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOfObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DummyRequest*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::DummyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::DummyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapIn*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapIn >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOut >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat_Map1Entry*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat_Map2Entry*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat_Map3Entry*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat_Map4Entry*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOutWireFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapM*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
