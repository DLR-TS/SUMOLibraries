// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/message_differencer_unittest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto;
namespace protobuf_unittest {
class TestDiffMessage;
struct TestDiffMessageDefaultTypeInternal;
extern TestDiffMessageDefaultTypeInternal _TestDiffMessage_default_instance_;
class TestDiffMessage_Item;
struct TestDiffMessage_ItemDefaultTypeInternal;
extern TestDiffMessage_ItemDefaultTypeInternal _TestDiffMessage_Item_default_instance_;
class TestDiffMessage_Item_MpEntry_DoNotUse;
struct TestDiffMessage_Item_MpEntry_DoNotUseDefaultTypeInternal;
extern TestDiffMessage_Item_MpEntry_DoNotUseDefaultTypeInternal _TestDiffMessage_Item_MpEntry_DoNotUse_default_instance_;
class TestField;
struct TestFieldDefaultTypeInternal;
extern TestFieldDefaultTypeInternal _TestField_default_instance_;
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf_unittest::TestDiffMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestDiffMessage>(Arena*);
template<> ::protobuf_unittest::TestDiffMessage_Item* Arena::CreateMaybeMessage<::protobuf_unittest::TestDiffMessage_Item>(Arena*);
template<> ::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse>(Arena*);
template<> ::protobuf_unittest::TestField* Arena::CreateMaybeMessage<::protobuf_unittest::TestField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf_unittest {

// ===================================================================

class TestField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestField) */ {
 public:
  inline TestField() : TestField(nullptr) {}
  ~TestField() override;
  explicit PROTOBUF_CONSTEXPR TestField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestField(const TestField& from);
  TestField(TestField&& from) noexcept
    : TestField() {
    *this = ::std::move(from);
  }

  inline TestField& operator=(const TestField& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestField& operator=(TestField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestField& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestField* internal_default_instance() {
    return reinterpret_cast<const TestField*>(
               &_TestField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestField& a, TestField& b) {
    a.Swap(&b);
  }
  inline void Swap(TestField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestField& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestField";
  }
  protected:
  explicit TestField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcFieldNumber = 2,
    kMFieldNumber = 5,
    kCFieldNumber = 1,
    kAFieldNumber = 3,
    kBFieldNumber = 4,
  };
  // repeated int32 rc = 2;
  int rc_size() const;
  private:
  int _internal_rc_size() const;
  public:
  void clear_rc();
  private:
  int32_t _internal_rc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rc() const;
  void _internal_add_rc(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rc();
  public:
  int32_t rc(int index) const;
  void set_rc(int index, int32_t value);
  void add_rc(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rc();

  // optional .protobuf_unittest.TestField m = 5;
  bool has_m() const;
  private:
  bool _internal_has_m() const;
  public:
  void clear_m();
  const ::protobuf_unittest::TestField& m() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestField* release_m();
  ::protobuf_unittest::TestField* mutable_m();
  void set_allocated_m(::protobuf_unittest::TestField* m);
  private:
  const ::protobuf_unittest::TestField& _internal_m() const;
  ::protobuf_unittest::TestField* _internal_mutable_m();
  public:
  void unsafe_arena_set_allocated_m(
      ::protobuf_unittest::TestField* m);
  ::protobuf_unittest::TestField* unsafe_arena_release_m();

  // optional int32 c = 1;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  int32_t c() const;
  void set_c(int32_t value);
  private:
  int32_t _internal_c() const;
  void _internal_set_c(int32_t value);
  public:

  // optional int32 a = 3;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // optional int32 b = 4;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  int32_t b() const;
  void set_b(int32_t value);
  private:
  int32_t _internal_b() const;
  void _internal_set_b(int32_t value);
  public:

  static const int kTfFieldNumber = 100;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestDiffMessage,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestField >, 11, false >
    tf;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rc_;
  ::protobuf_unittest::TestField* m_;
  int32_t c_;
  int32_t a_;
  int32_t b_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDiffMessage_Item_MpEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestDiffMessage_Item_MpEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestDiffMessage_Item_MpEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  TestDiffMessage_Item_MpEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestDiffMessage_Item_MpEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestDiffMessage_Item_MpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestDiffMessage_Item_MpEntry_DoNotUse& other);
  static const TestDiffMessage_Item_MpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestDiffMessage_Item_MpEntry_DoNotUse*>(&_TestDiffMessage_Item_MpEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_unittest.TestDiffMessage.Item.MpEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto;
};

// -------------------------------------------------------------------

class TestDiffMessage_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDiffMessage.Item) */ {
 public:
  inline TestDiffMessage_Item() : TestDiffMessage_Item(nullptr) {}
  ~TestDiffMessage_Item() override;
  explicit PROTOBUF_CONSTEXPR TestDiffMessage_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDiffMessage_Item(const TestDiffMessage_Item& from);
  TestDiffMessage_Item(TestDiffMessage_Item&& from) noexcept
    : TestDiffMessage_Item() {
    *this = ::std::move(from);
  }

  inline TestDiffMessage_Item& operator=(const TestDiffMessage_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDiffMessage_Item& operator=(TestDiffMessage_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDiffMessage_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDiffMessage_Item* internal_default_instance() {
    return reinterpret_cast<const TestDiffMessage_Item*>(
               &_TestDiffMessage_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestDiffMessage_Item& a, TestDiffMessage_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDiffMessage_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDiffMessage_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDiffMessage_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDiffMessage_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestDiffMessage_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestDiffMessage_Item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDiffMessage_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDiffMessage.Item";
  }
  protected:
  explicit TestDiffMessage_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRaFieldNumber = 3,
    kRbFieldNumber = 5,
    kRmFieldNumber = 7,
    kMpFieldNumber = 8,
    kBFieldNumber = 4,
    kMFieldNumber = 6,
    kAFieldNumber = 2,
  };
  // repeated int32 ra = 3;
  int ra_size() const;
  private:
  int _internal_ra_size() const;
  public:
  void clear_ra();
  private:
  int32_t _internal_ra(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ra() const;
  void _internal_add_ra(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ra();
  public:
  int32_t ra(int index) const;
  void set_ra(int index, int32_t value);
  void add_ra(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ra() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ra();

  // repeated string rb = 5;
  int rb_size() const;
  private:
  int _internal_rb_size() const;
  public:
  void clear_rb();
  const std::string& rb(int index) const;
  std::string* mutable_rb(int index);
  void set_rb(int index, const std::string& value);
  void set_rb(int index, std::string&& value);
  void set_rb(int index, const char* value);
  void set_rb(int index, const char* value, size_t size);
  std::string* add_rb();
  void add_rb(const std::string& value);
  void add_rb(std::string&& value);
  void add_rb(const char* value);
  void add_rb(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rb();
  private:
  const std::string& _internal_rb(int index) const;
  std::string* _internal_add_rb();
  public:

  // repeated .protobuf_unittest.TestField rm = 7;
  int rm_size() const;
  private:
  int _internal_rm_size() const;
  public:
  void clear_rm();
  ::protobuf_unittest::TestField* mutable_rm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField >*
      mutable_rm();
  private:
  const ::protobuf_unittest::TestField& _internal_rm(int index) const;
  ::protobuf_unittest::TestField* _internal_add_rm();
  public:
  const ::protobuf_unittest::TestField& rm(int index) const;
  ::protobuf_unittest::TestField* add_rm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField >&
      rm() const;

  // map<string, int32> mp = 8;
  int mp_size() const;
  private:
  int _internal_mp_size() const;
  public:
  void clear_mp();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_mp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_mp();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      mp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_mp();

  // optional string b = 4;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // optional .protobuf_unittest.TestField m = 6;
  bool has_m() const;
  private:
  bool _internal_has_m() const;
  public:
  void clear_m();
  const ::protobuf_unittest::TestField& m() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestField* release_m();
  ::protobuf_unittest::TestField* mutable_m();
  void set_allocated_m(::protobuf_unittest::TestField* m);
  private:
  const ::protobuf_unittest::TestField& _internal_m() const;
  ::protobuf_unittest::TestField* _internal_mutable_m();
  public:
  void unsafe_arena_set_allocated_m(
      ::protobuf_unittest::TestField* m);
  ::protobuf_unittest::TestField* unsafe_arena_release_m();

  // optional int32 a = 2;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDiffMessage.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ra_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField > rm_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TestDiffMessage_Item_MpEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> mp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  ::protobuf_unittest::TestField* m_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDiffMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDiffMessage) */ {
 public:
  inline TestDiffMessage() : TestDiffMessage(nullptr) {}
  ~TestDiffMessage() override;
  explicit PROTOBUF_CONSTEXPR TestDiffMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDiffMessage(const TestDiffMessage& from);
  TestDiffMessage(TestDiffMessage&& from) noexcept
    : TestDiffMessage() {
    *this = ::std::move(from);
  }

  inline TestDiffMessage& operator=(const TestDiffMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDiffMessage& operator=(TestDiffMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDiffMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDiffMessage* internal_default_instance() {
    return reinterpret_cast<const TestDiffMessage*>(
               &_TestDiffMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestDiffMessage& a, TestDiffMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDiffMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDiffMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDiffMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDiffMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestDiffMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestDiffMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDiffMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDiffMessage";
  }
  protected:
  explicit TestDiffMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestDiffMessage_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kRwFieldNumber = 10,
    kRvFieldNumber = 11,
    kRmFieldNumber = 12,
    kRanyFieldNumber = 16,
    kWFieldNumber = 14,
    kMFieldNumber = 15,
    kVFieldNumber = 13,
  };
  // repeated group Item = 1 { ... };
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::protobuf_unittest::TestDiffMessage_Item* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestDiffMessage_Item >*
      mutable_item();
  private:
  const ::protobuf_unittest::TestDiffMessage_Item& _internal_item(int index) const;
  ::protobuf_unittest::TestDiffMessage_Item* _internal_add_item();
  public:
  const ::protobuf_unittest::TestDiffMessage_Item& item(int index) const;
  ::protobuf_unittest::TestDiffMessage_Item* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestDiffMessage_Item >&
      item() const;

  // repeated string rw = 10;
  int rw_size() const;
  private:
  int _internal_rw_size() const;
  public:
  void clear_rw();
  const std::string& rw(int index) const;
  std::string* mutable_rw(int index);
  void set_rw(int index, const std::string& value);
  void set_rw(int index, std::string&& value);
  void set_rw(int index, const char* value);
  void set_rw(int index, const char* value, size_t size);
  std::string* add_rw();
  void add_rw(const std::string& value);
  void add_rw(std::string&& value);
  void add_rw(const char* value);
  void add_rw(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rw() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rw();
  private:
  const std::string& _internal_rw(int index) const;
  std::string* _internal_add_rw();
  public:

  // repeated int32 rv = 11;
  int rv_size() const;
  private:
  int _internal_rv_size() const;
  public:
  void clear_rv();
  private:
  int32_t _internal_rv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rv() const;
  void _internal_add_rv(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rv();
  public:
  int32_t rv(int index) const;
  void set_rv(int index, int32_t value);
  void add_rv(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rv();

  // repeated .protobuf_unittest.TestField rm = 12 [deprecated = true];
  PROTOBUF_DEPRECATED int rm_size() const;
  private:
  int _internal_rm_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_rm();
  PROTOBUF_DEPRECATED ::protobuf_unittest::TestField* mutable_rm(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField >*
      mutable_rm();
  private:
  const ::protobuf_unittest::TestField& _internal_rm(int index) const;
  ::protobuf_unittest::TestField* _internal_add_rm();
  public:
  PROTOBUF_DEPRECATED const ::protobuf_unittest::TestField& rm(int index) const;
  PROTOBUF_DEPRECATED ::protobuf_unittest::TestField* add_rm();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField >&
      rm() const;

  // repeated .google.protobuf.Any rany = 16;
  int rany_size() const;
  private:
  int _internal_rany_size() const;
  public:
  void clear_rany();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_rany(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_rany();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_rany(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_rany();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& rany(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_rany();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      rany() const;

  // optional string w = 14;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  const std::string& w() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_w(ArgT0&& arg0, ArgT... args);
  std::string* mutable_w();
  PROTOBUF_NODISCARD std::string* release_w();
  void set_allocated_w(std::string* w);
  private:
  const std::string& _internal_w() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_w(const std::string& value);
  std::string* _internal_mutable_w();
  public:

  // optional .protobuf_unittest.TestField m = 15;
  bool has_m() const;
  private:
  bool _internal_has_m() const;
  public:
  void clear_m();
  const ::protobuf_unittest::TestField& m() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestField* release_m();
  ::protobuf_unittest::TestField* mutable_m();
  void set_allocated_m(::protobuf_unittest::TestField* m);
  private:
  const ::protobuf_unittest::TestField& _internal_m() const;
  ::protobuf_unittest::TestField* _internal_mutable_m();
  public:
  void unsafe_arena_set_allocated_m(
      ::protobuf_unittest::TestField* m);
  ::protobuf_unittest::TestField* unsafe_arena_release_m();

  // optional int32 v = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  PROTOBUF_DEPRECATED void clear_v();
  PROTOBUF_DEPRECATED int32_t v() const;
  PROTOBUF_DEPRECATED void set_v(int32_t value);
  private:
  int32_t _internal_v() const;
  void _internal_set_v(int32_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestDiffMessage, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDiffMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestDiffMessage_Item > item_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rw_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField > rm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > rany_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr w_;
  ::protobuf_unittest::TestField* m_;
  int32_t v_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestField

// optional int32 a = 3;
inline bool TestField::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestField::has_a() const {
  return _internal_has_a();
}
inline void TestField::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestField::_internal_a() const {
  return a_;
}
inline int32_t TestField::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestField.a)
  return _internal_a();
}
inline void TestField::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  a_ = value;
}
inline void TestField::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestField.a)
}

// optional int32 b = 4;
inline bool TestField::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestField::has_b() const {
  return _internal_has_b();
}
inline void TestField::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TestField::_internal_b() const {
  return b_;
}
inline int32_t TestField::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestField.b)
  return _internal_b();
}
inline void TestField::_internal_set_b(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  b_ = value;
}
inline void TestField::set_b(int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestField.b)
}

// optional int32 c = 1;
inline bool TestField::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestField::has_c() const {
  return _internal_has_c();
}
inline void TestField::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestField::_internal_c() const {
  return c_;
}
inline int32_t TestField::c() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestField.c)
  return _internal_c();
}
inline void TestField::_internal_set_c(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  c_ = value;
}
inline void TestField::set_c(int32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestField.c)
}

// repeated int32 rc = 2;
inline int TestField::_internal_rc_size() const {
  return rc_.size();
}
inline int TestField::rc_size() const {
  return _internal_rc_size();
}
inline void TestField::clear_rc() {
  rc_.Clear();
}
inline int32_t TestField::_internal_rc(int index) const {
  return rc_.Get(index);
}
inline int32_t TestField::rc(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestField.rc)
  return _internal_rc(index);
}
inline void TestField::set_rc(int index, int32_t value) {
  rc_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestField.rc)
}
inline void TestField::_internal_add_rc(int32_t value) {
  rc_.Add(value);
}
inline void TestField::add_rc(int32_t value) {
  _internal_add_rc(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestField.rc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestField::_internal_rc() const {
  return rc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestField::rc() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestField.rc)
  return _internal_rc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestField::_internal_mutable_rc() {
  return &rc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestField::mutable_rc() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestField.rc)
  return _internal_mutable_rc();
}

// optional .protobuf_unittest.TestField m = 5;
inline bool TestField::_internal_has_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || m_ != nullptr);
  return value;
}
inline bool TestField::has_m() const {
  return _internal_has_m();
}
inline void TestField::clear_m() {
  if (m_ != nullptr) m_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestField& TestField::_internal_m() const {
  const ::protobuf_unittest::TestField* p = m_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestField&>(
      ::protobuf_unittest::_TestField_default_instance_);
}
inline const ::protobuf_unittest::TestField& TestField::m() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestField.m)
  return _internal_m();
}
inline void TestField::unsafe_arena_set_allocated_m(
    ::protobuf_unittest::TestField* m) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_);
  }
  m_ = m;
  if (m) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestField.m)
}
inline ::protobuf_unittest::TestField* TestField::release_m() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestField* temp = m_;
  m_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestField* TestField::unsafe_arena_release_m() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestField.m)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestField* temp = m_;
  m_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestField* TestField::_internal_mutable_m() {
  _has_bits_[0] |= 0x00000001u;
  if (m_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestField>(GetArenaForAllocation());
    m_ = p;
  }
  return m_;
}
inline ::protobuf_unittest::TestField* TestField::mutable_m() {
  ::protobuf_unittest::TestField* _msg = _internal_mutable_m();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestField.m)
  return _msg;
}
inline void TestField::set_allocated_m(::protobuf_unittest::TestField* m) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete m_;
  }
  if (m) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m);
    if (message_arena != submessage_arena) {
      m = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_ = m;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestField.m)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestDiffMessage_Item

// optional int32 a = 2;
inline bool TestDiffMessage_Item::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestDiffMessage_Item::has_a() const {
  return _internal_has_a();
}
inline void TestDiffMessage_Item::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestDiffMessage_Item::_internal_a() const {
  return a_;
}
inline int32_t TestDiffMessage_Item::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.Item.a)
  return _internal_a();
}
inline void TestDiffMessage_Item::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  a_ = value;
}
inline void TestDiffMessage_Item::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.Item.a)
}

// optional string b = 4;
inline bool TestDiffMessage_Item::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestDiffMessage_Item::has_b() const {
  return _internal_has_b();
}
inline void TestDiffMessage_Item::clear_b() {
  b_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestDiffMessage_Item::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.Item.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestDiffMessage_Item::set_b(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.Item.b)
}
inline std::string* TestDiffMessage_Item::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.Item.b)
  return _s;
}
inline const std::string& TestDiffMessage_Item::_internal_b() const {
  return b_.Get();
}
inline void TestDiffMessage_Item::_internal_set_b(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  b_.Set(value, GetArenaForAllocation());
}
inline std::string* TestDiffMessage_Item::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000001u;
  return b_.Mutable(GetArenaForAllocation());
}
inline std::string* TestDiffMessage_Item::release_b() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestDiffMessage.Item.b)
  if (!_internal_has_b()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = b_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestDiffMessage_Item::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_.SetAllocated(b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestDiffMessage.Item.b)
}

// repeated int32 ra = 3;
inline int TestDiffMessage_Item::_internal_ra_size() const {
  return ra_.size();
}
inline int TestDiffMessage_Item::ra_size() const {
  return _internal_ra_size();
}
inline void TestDiffMessage_Item::clear_ra() {
  ra_.Clear();
}
inline int32_t TestDiffMessage_Item::_internal_ra(int index) const {
  return ra_.Get(index);
}
inline int32_t TestDiffMessage_Item::ra(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.Item.ra)
  return _internal_ra(index);
}
inline void TestDiffMessage_Item::set_ra(int index, int32_t value) {
  ra_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.Item.ra)
}
inline void TestDiffMessage_Item::_internal_add_ra(int32_t value) {
  ra_.Add(value);
}
inline void TestDiffMessage_Item::add_ra(int32_t value) {
  _internal_add_ra(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.Item.ra)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestDiffMessage_Item::_internal_ra() const {
  return ra_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestDiffMessage_Item::ra() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDiffMessage.Item.ra)
  return _internal_ra();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestDiffMessage_Item::_internal_mutable_ra() {
  return &ra_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestDiffMessage_Item::mutable_ra() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDiffMessage.Item.ra)
  return _internal_mutable_ra();
}

// repeated string rb = 5;
inline int TestDiffMessage_Item::_internal_rb_size() const {
  return rb_.size();
}
inline int TestDiffMessage_Item::rb_size() const {
  return _internal_rb_size();
}
inline void TestDiffMessage_Item::clear_rb() {
  rb_.Clear();
}
inline std::string* TestDiffMessage_Item::add_rb() {
  std::string* _s = _internal_add_rb();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestDiffMessage.Item.rb)
  return _s;
}
inline const std::string& TestDiffMessage_Item::_internal_rb(int index) const {
  return rb_.Get(index);
}
inline const std::string& TestDiffMessage_Item::rb(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.Item.rb)
  return _internal_rb(index);
}
inline std::string* TestDiffMessage_Item::mutable_rb(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.Item.rb)
  return rb_.Mutable(index);
}
inline void TestDiffMessage_Item::set_rb(int index, const std::string& value) {
  rb_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.Item.rb)
}
inline void TestDiffMessage_Item::set_rb(int index, std::string&& value) {
  rb_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.Item.rb)
}
inline void TestDiffMessage_Item::set_rb(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rb_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestDiffMessage.Item.rb)
}
inline void TestDiffMessage_Item::set_rb(int index, const char* value, size_t size) {
  rb_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestDiffMessage.Item.rb)
}
inline std::string* TestDiffMessage_Item::_internal_add_rb() {
  return rb_.Add();
}
inline void TestDiffMessage_Item::add_rb(const std::string& value) {
  rb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.Item.rb)
}
inline void TestDiffMessage_Item::add_rb(std::string&& value) {
  rb_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.Item.rb)
}
inline void TestDiffMessage_Item::add_rb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestDiffMessage.Item.rb)
}
inline void TestDiffMessage_Item::add_rb(const char* value, size_t size) {
  rb_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestDiffMessage.Item.rb)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestDiffMessage_Item::rb() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDiffMessage.Item.rb)
  return rb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestDiffMessage_Item::mutable_rb() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDiffMessage.Item.rb)
  return &rb_;
}

// optional .protobuf_unittest.TestField m = 6;
inline bool TestDiffMessage_Item::_internal_has_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || m_ != nullptr);
  return value;
}
inline bool TestDiffMessage_Item::has_m() const {
  return _internal_has_m();
}
inline void TestDiffMessage_Item::clear_m() {
  if (m_ != nullptr) m_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestField& TestDiffMessage_Item::_internal_m() const {
  const ::protobuf_unittest::TestField* p = m_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestField&>(
      ::protobuf_unittest::_TestField_default_instance_);
}
inline const ::protobuf_unittest::TestField& TestDiffMessage_Item::m() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.Item.m)
  return _internal_m();
}
inline void TestDiffMessage_Item::unsafe_arena_set_allocated_m(
    ::protobuf_unittest::TestField* m) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_);
  }
  m_ = m;
  if (m) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDiffMessage.Item.m)
}
inline ::protobuf_unittest::TestField* TestDiffMessage_Item::release_m() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestField* temp = m_;
  m_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestField* TestDiffMessage_Item::unsafe_arena_release_m() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestDiffMessage.Item.m)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestField* temp = m_;
  m_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestField* TestDiffMessage_Item::_internal_mutable_m() {
  _has_bits_[0] |= 0x00000002u;
  if (m_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestField>(GetArenaForAllocation());
    m_ = p;
  }
  return m_;
}
inline ::protobuf_unittest::TestField* TestDiffMessage_Item::mutable_m() {
  ::protobuf_unittest::TestField* _msg = _internal_mutable_m();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.Item.m)
  return _msg;
}
inline void TestDiffMessage_Item::set_allocated_m(::protobuf_unittest::TestField* m) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete m_;
  }
  if (m) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m);
    if (message_arena != submessage_arena) {
      m = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_ = m;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestDiffMessage.Item.m)
}

// repeated .protobuf_unittest.TestField rm = 7;
inline int TestDiffMessage_Item::_internal_rm_size() const {
  return rm_.size();
}
inline int TestDiffMessage_Item::rm_size() const {
  return _internal_rm_size();
}
inline void TestDiffMessage_Item::clear_rm() {
  rm_.Clear();
}
inline ::protobuf_unittest::TestField* TestDiffMessage_Item::mutable_rm(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.Item.rm)
  return rm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField >*
TestDiffMessage_Item::mutable_rm() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDiffMessage.Item.rm)
  return &rm_;
}
inline const ::protobuf_unittest::TestField& TestDiffMessage_Item::_internal_rm(int index) const {
  return rm_.Get(index);
}
inline const ::protobuf_unittest::TestField& TestDiffMessage_Item::rm(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.Item.rm)
  return _internal_rm(index);
}
inline ::protobuf_unittest::TestField* TestDiffMessage_Item::_internal_add_rm() {
  return rm_.Add();
}
inline ::protobuf_unittest::TestField* TestDiffMessage_Item::add_rm() {
  ::protobuf_unittest::TestField* _add = _internal_add_rm();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.Item.rm)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField >&
TestDiffMessage_Item::rm() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDiffMessage.Item.rm)
  return rm_;
}

// map<string, int32> mp = 8;
inline int TestDiffMessage_Item::_internal_mp_size() const {
  return mp_.size();
}
inline int TestDiffMessage_Item::mp_size() const {
  return _internal_mp_size();
}
inline void TestDiffMessage_Item::clear_mp() {
  mp_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TestDiffMessage_Item::_internal_mp() const {
  return mp_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
TestDiffMessage_Item::mp() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestDiffMessage.Item.mp)
  return _internal_mp();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TestDiffMessage_Item::_internal_mutable_mp() {
  return mp_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
TestDiffMessage_Item::mutable_mp() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestDiffMessage.Item.mp)
  return _internal_mutable_mp();
}

// -------------------------------------------------------------------

// TestDiffMessage

// repeated group Item = 1 { ... };
inline int TestDiffMessage::_internal_item_size() const {
  return item_.size();
}
inline int TestDiffMessage::item_size() const {
  return _internal_item_size();
}
inline void TestDiffMessage::clear_item() {
  item_.Clear();
}
inline ::protobuf_unittest::TestDiffMessage_Item* TestDiffMessage::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestDiffMessage_Item >*
TestDiffMessage::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDiffMessage.item)
  return &item_;
}
inline const ::protobuf_unittest::TestDiffMessage_Item& TestDiffMessage::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::protobuf_unittest::TestDiffMessage_Item& TestDiffMessage::item(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.item)
  return _internal_item(index);
}
inline ::protobuf_unittest::TestDiffMessage_Item* TestDiffMessage::_internal_add_item() {
  return item_.Add();
}
inline ::protobuf_unittest::TestDiffMessage_Item* TestDiffMessage::add_item() {
  ::protobuf_unittest::TestDiffMessage_Item* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestDiffMessage_Item >&
TestDiffMessage::item() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDiffMessage.item)
  return item_;
}

// optional int32 v = 13 [deprecated = true];
inline bool TestDiffMessage::_internal_has_v() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestDiffMessage::has_v() const {
  return _internal_has_v();
}
inline void TestDiffMessage::clear_v() {
  v_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestDiffMessage::_internal_v() const {
  return v_;
}
inline int32_t TestDiffMessage::v() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.v)
  return _internal_v();
}
inline void TestDiffMessage::_internal_set_v(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  v_ = value;
}
inline void TestDiffMessage::set_v(int32_t value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.v)
}

// optional string w = 14;
inline bool TestDiffMessage::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestDiffMessage::has_w() const {
  return _internal_has_w();
}
inline void TestDiffMessage::clear_w() {
  w_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestDiffMessage::w() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.w)
  return _internal_w();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestDiffMessage::set_w(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 w_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.w)
}
inline std::string* TestDiffMessage::mutable_w() {
  std::string* _s = _internal_mutable_w();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.w)
  return _s;
}
inline const std::string& TestDiffMessage::_internal_w() const {
  return w_.Get();
}
inline void TestDiffMessage::_internal_set_w(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  w_.Set(value, GetArenaForAllocation());
}
inline std::string* TestDiffMessage::_internal_mutable_w() {
  _has_bits_[0] |= 0x00000001u;
  return w_.Mutable(GetArenaForAllocation());
}
inline std::string* TestDiffMessage::release_w() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestDiffMessage.w)
  if (!_internal_has_w()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = w_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (w_.IsDefault()) {
    w_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestDiffMessage::set_allocated_w(std::string* w) {
  if (w != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  w_.SetAllocated(w, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (w_.IsDefault()) {
    w_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestDiffMessage.w)
}

// optional .protobuf_unittest.TestField m = 15;
inline bool TestDiffMessage::_internal_has_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || m_ != nullptr);
  return value;
}
inline bool TestDiffMessage::has_m() const {
  return _internal_has_m();
}
inline void TestDiffMessage::clear_m() {
  if (m_ != nullptr) m_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestField& TestDiffMessage::_internal_m() const {
  const ::protobuf_unittest::TestField* p = m_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestField&>(
      ::protobuf_unittest::_TestField_default_instance_);
}
inline const ::protobuf_unittest::TestField& TestDiffMessage::m() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.m)
  return _internal_m();
}
inline void TestDiffMessage::unsafe_arena_set_allocated_m(
    ::protobuf_unittest::TestField* m) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_);
  }
  m_ = m;
  if (m) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDiffMessage.m)
}
inline ::protobuf_unittest::TestField* TestDiffMessage::release_m() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestField* temp = m_;
  m_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestField* TestDiffMessage::unsafe_arena_release_m() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestDiffMessage.m)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestField* temp = m_;
  m_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestField* TestDiffMessage::_internal_mutable_m() {
  _has_bits_[0] |= 0x00000002u;
  if (m_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestField>(GetArenaForAllocation());
    m_ = p;
  }
  return m_;
}
inline ::protobuf_unittest::TestField* TestDiffMessage::mutable_m() {
  ::protobuf_unittest::TestField* _msg = _internal_mutable_m();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.m)
  return _msg;
}
inline void TestDiffMessage::set_allocated_m(::protobuf_unittest::TestField* m) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete m_;
  }
  if (m) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m);
    if (message_arena != submessage_arena) {
      m = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_ = m;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestDiffMessage.m)
}

// repeated int32 rv = 11;
inline int TestDiffMessage::_internal_rv_size() const {
  return rv_.size();
}
inline int TestDiffMessage::rv_size() const {
  return _internal_rv_size();
}
inline void TestDiffMessage::clear_rv() {
  rv_.Clear();
}
inline int32_t TestDiffMessage::_internal_rv(int index) const {
  return rv_.Get(index);
}
inline int32_t TestDiffMessage::rv(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.rv)
  return _internal_rv(index);
}
inline void TestDiffMessage::set_rv(int index, int32_t value) {
  rv_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.rv)
}
inline void TestDiffMessage::_internal_add_rv(int32_t value) {
  rv_.Add(value);
}
inline void TestDiffMessage::add_rv(int32_t value) {
  _internal_add_rv(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.rv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestDiffMessage::_internal_rv() const {
  return rv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestDiffMessage::rv() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDiffMessage.rv)
  return _internal_rv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestDiffMessage::_internal_mutable_rv() {
  return &rv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestDiffMessage::mutable_rv() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDiffMessage.rv)
  return _internal_mutable_rv();
}

// repeated string rw = 10;
inline int TestDiffMessage::_internal_rw_size() const {
  return rw_.size();
}
inline int TestDiffMessage::rw_size() const {
  return _internal_rw_size();
}
inline void TestDiffMessage::clear_rw() {
  rw_.Clear();
}
inline std::string* TestDiffMessage::add_rw() {
  std::string* _s = _internal_add_rw();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestDiffMessage.rw)
  return _s;
}
inline const std::string& TestDiffMessage::_internal_rw(int index) const {
  return rw_.Get(index);
}
inline const std::string& TestDiffMessage::rw(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.rw)
  return _internal_rw(index);
}
inline std::string* TestDiffMessage::mutable_rw(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.rw)
  return rw_.Mutable(index);
}
inline void TestDiffMessage::set_rw(int index, const std::string& value) {
  rw_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.rw)
}
inline void TestDiffMessage::set_rw(int index, std::string&& value) {
  rw_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDiffMessage.rw)
}
inline void TestDiffMessage::set_rw(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rw_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestDiffMessage.rw)
}
inline void TestDiffMessage::set_rw(int index, const char* value, size_t size) {
  rw_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestDiffMessage.rw)
}
inline std::string* TestDiffMessage::_internal_add_rw() {
  return rw_.Add();
}
inline void TestDiffMessage::add_rw(const std::string& value) {
  rw_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.rw)
}
inline void TestDiffMessage::add_rw(std::string&& value) {
  rw_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.rw)
}
inline void TestDiffMessage::add_rw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rw_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestDiffMessage.rw)
}
inline void TestDiffMessage::add_rw(const char* value, size_t size) {
  rw_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestDiffMessage.rw)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestDiffMessage::rw() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDiffMessage.rw)
  return rw_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestDiffMessage::mutable_rw() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDiffMessage.rw)
  return &rw_;
}

// repeated .protobuf_unittest.TestField rm = 12 [deprecated = true];
inline int TestDiffMessage::_internal_rm_size() const {
  return rm_.size();
}
inline int TestDiffMessage::rm_size() const {
  return _internal_rm_size();
}
inline void TestDiffMessage::clear_rm() {
  rm_.Clear();
}
inline ::protobuf_unittest::TestField* TestDiffMessage::mutable_rm(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.rm)
  return rm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField >*
TestDiffMessage::mutable_rm() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDiffMessage.rm)
  return &rm_;
}
inline const ::protobuf_unittest::TestField& TestDiffMessage::_internal_rm(int index) const {
  return rm_.Get(index);
}
inline const ::protobuf_unittest::TestField& TestDiffMessage::rm(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.rm)
  return _internal_rm(index);
}
inline ::protobuf_unittest::TestField* TestDiffMessage::_internal_add_rm() {
  return rm_.Add();
}
inline ::protobuf_unittest::TestField* TestDiffMessage::add_rm() {
  ::protobuf_unittest::TestField* _add = _internal_add_rm();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.rm)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestField >&
TestDiffMessage::rm() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDiffMessage.rm)
  return rm_;
}

// repeated .google.protobuf.Any rany = 16;
inline int TestDiffMessage::_internal_rany_size() const {
  return rany_.size();
}
inline int TestDiffMessage::rany_size() const {
  return _internal_rany_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestDiffMessage::mutable_rany(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDiffMessage.rany)
  return rany_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
TestDiffMessage::mutable_rany() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDiffMessage.rany)
  return &rany_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TestDiffMessage::_internal_rany(int index) const {
  return rany_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TestDiffMessage::rany(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDiffMessage.rany)
  return _internal_rany(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestDiffMessage::_internal_add_rany() {
  return rany_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestDiffMessage::add_rany() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_rany();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDiffMessage.rany)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
TestDiffMessage::rany() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDiffMessage.rany)
  return rany_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto
