// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/message_differencer_unittest.proto

#include "google/protobuf/util/message_differencer_unittest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf_unittest {
PROTOBUF_CONSTEXPR TestField::TestField(
    ::_pbi::ConstantInitialized)
  : rc_()
  , m_(nullptr)
  , c_(0)
  , a_(0)
  , b_(0){}
struct TestFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestFieldDefaultTypeInternal() {}
  union {
    TestField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestFieldDefaultTypeInternal _TestField_default_instance_;
PROTOBUF_CONSTEXPR TestDiffMessage_Item_MpEntry_DoNotUse::TestDiffMessage_Item_MpEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestDiffMessage_Item_MpEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDiffMessage_Item_MpEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDiffMessage_Item_MpEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestDiffMessage_Item_MpEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDiffMessage_Item_MpEntry_DoNotUseDefaultTypeInternal _TestDiffMessage_Item_MpEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestDiffMessage_Item::TestDiffMessage_Item(
    ::_pbi::ConstantInitialized)
  : ra_()
  , rb_()
  , rm_()
  , mp_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , b_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , m_(nullptr)
  , a_(0){}
struct TestDiffMessage_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDiffMessage_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDiffMessage_ItemDefaultTypeInternal() {}
  union {
    TestDiffMessage_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDiffMessage_ItemDefaultTypeInternal _TestDiffMessage_Item_default_instance_;
PROTOBUF_CONSTEXPR TestDiffMessage::TestDiffMessage(
    ::_pbi::ConstantInitialized)
  : item_()
  , rw_()
  , rv_()
  , rm_()
  , rany_()
  , w_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , m_(nullptr)
  , v_(0){}
struct TestDiffMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDiffMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDiffMessageDefaultTypeInternal() {}
  union {
    TestDiffMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDiffMessageDefaultTypeInternal _TestDiffMessage_default_instance_;
}  // namespace protobuf_unittest
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestField, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestField, b_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestField, c_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestField, rc_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestField, m_),
  2,
  3,
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, b_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, ra_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, rb_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, m_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, rm_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage_Item, mp_),
  2,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, item_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, v_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, w_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, m_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, rv_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, rw_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, rm_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestDiffMessage, rany_),
  ~0u,
  2,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::protobuf_unittest::TestField)},
  { 16, 24, -1, sizeof(::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse)},
  { 26, 39, -1, sizeof(::protobuf_unittest::TestDiffMessage_Item)},
  { 46, 60, -1, sizeof(::protobuf_unittest::TestDiffMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf_unittest::_TestField_default_instance_._instance,
  &::protobuf_unittest::_TestDiffMessage_Item_MpEntry_DoNotUse_default_instance_._instance,
  &::protobuf_unittest::_TestDiffMessage_Item_default_instance_._instance,
  &::protobuf_unittest::_TestDiffMessage_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7google/protobuf/util/message_differenc"
  "er_unittest.proto\022\021protobuf_unittest\032\031go"
  "ogle/protobuf/any.proto\"\257\001\n\tTestField\022\t\n"
  "\001a\030\003 \001(\005\022\t\n\001b\030\004 \001(\005\022\t\n\001c\030\001 \001(\005\022\n\n\002rc\030\002 \003"
  "(\005\022\'\n\001m\030\005 \001(\0132\034.protobuf_unittest.TestFi"
  "eld2L\n\002tf\022\".protobuf_unittest.TestDiffMe"
  "ssage\030d \001(\0132\034.protobuf_unittest.TestFiel"
  "d\"\356\003\n\017TestDiffMessage\0225\n\004item\030\001 \003(\n2\'.pr"
  "otobuf_unittest.TestDiffMessage.Item\022\r\n\001"
  "v\030\r \001(\005B\002\030\001\022\t\n\001w\030\016 \001(\t\022\'\n\001m\030\017 \001(\0132\034.prot"
  "obuf_unittest.TestField\022\n\n\002rv\030\013 \003(\005\022\n\n\002r"
  "w\030\n \003(\t\022,\n\002rm\030\014 \003(\0132\034.protobuf_unittest."
  "TestFieldB\002\030\001\022\"\n\004rany\030\020 \003(\0132\024.google.pro"
  "tobuf.Any\032\357\001\n\004Item\022\t\n\001a\030\002 \001(\005\022\t\n\001b\030\004 \001(\t"
  "\022\n\n\002ra\030\003 \003(\005\022\n\n\002rb\030\005 \003(\t\022\'\n\001m\030\006 \001(\0132\034.pr"
  "otobuf_unittest.TestField\022(\n\002rm\030\007 \003(\0132\034."
  "protobuf_unittest.TestField\022;\n\002mp\030\010 \003(\0132"
  "/.protobuf_unittest.TestDiffMessage.Item"
  ".MpEntry\032)\n\007MpEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\005:\0028\001*\005\010d\020\310\001B\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto = {
    false, false, 782, descriptor_table_protodef_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto,
    "google/protobuf/util/message_differencer_unittest.proto",
    &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto, file_level_enum_descriptors_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto(&descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto);
namespace protobuf_unittest {

// ===================================================================

class TestField::_Internal {
 public:
  using HasBits = decltype(std::declval<TestField>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestField& m(const TestField* msg);
  static void set_has_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestField&
TestField::_Internal::m(const TestField* msg) {
  return *msg->m_;
}
TestField::TestField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rc_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestField)
}
TestField::TestField(const TestField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rc_(from.rc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m()) {
    m_ = new ::protobuf_unittest::TestField(*from.m_);
  } else {
    m_ = nullptr;
  }
  ::memcpy(&c_, &from.c_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&c_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestField)
}

inline void TestField::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&m_)) + sizeof(b_));
}

TestField::~TestField() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete m_;
}

void TestField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestField::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(m_ != nullptr);
    m_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&c_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&c_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 rc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rc(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestField m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_m(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 c = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  // repeated int32 rc = 2;
  for (int i = 0, n = this->_internal_rc_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rc(i), target);
  }

  // optional int32 a = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_a(), target);
  }

  // optional int32 b = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_b(), target);
  }

  // optional .protobuf_unittest.TestField m = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::m(this),
        _Internal::m(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestField)
  return target;
}

size_t TestField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 rc = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->rc_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_rc_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .protobuf_unittest.TestField m = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_);
    }

    // optional int32 c = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_c());
    }

    // optional int32 a = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

    // optional int32 b = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestField::GetClassData() const { return &_class_data_; }

void TestField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestField *>(to)->MergeFrom(
      static_cast<const TestField &>(from));
}


void TestField::MergeFrom(const TestField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rc_.MergeFrom(from.rc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_m()->::protobuf_unittest::TestField::MergeFrom(from._internal_m());
    }
    if (cached_has_bits & 0x00000002u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000008u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestField::CopyFrom(const TestField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestField::IsInitialized() const {
  return true;
}

void TestField::InternalSwap(TestField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rc_.InternalSwap(&other->rc_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestField, b_)
      + sizeof(TestField::b_)
      - PROTOBUF_FIELD_OFFSET(TestField, m_)>(
          reinterpret_cast<char*>(&m_),
          reinterpret_cast<char*>(&other->m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto[0]);
}

// ===================================================================

TestDiffMessage_Item_MpEntry_DoNotUse::TestDiffMessage_Item_MpEntry_DoNotUse() {}
TestDiffMessage_Item_MpEntry_DoNotUse::TestDiffMessage_Item_MpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestDiffMessage_Item_MpEntry_DoNotUse::MergeFrom(const TestDiffMessage_Item_MpEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestDiffMessage_Item_MpEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto[1]);
}

// ===================================================================

class TestDiffMessage_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDiffMessage_Item>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestField& m(const TestDiffMessage_Item* msg);
  static void set_has_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestField&
TestDiffMessage_Item::_Internal::m(const TestDiffMessage_Item* msg) {
  return *msg->m_;
}
TestDiffMessage_Item::TestDiffMessage_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ra_(arena),
  rb_(arena),
  rm_(arena),
  mp_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestDiffMessage_Item::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDiffMessage.Item)
}
TestDiffMessage_Item::TestDiffMessage_Item(const TestDiffMessage_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ra_(from.ra_),
      rb_(from.rb_),
      rm_(from.rm_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mp_.MergeFrom(from.mp_);
  b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_b()) {
    b_.Set(from._internal_b(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_m()) {
    m_ = new ::protobuf_unittest::TestField(*from.m_);
  } else {
    m_ = nullptr;
  }
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDiffMessage.Item)
}

inline void TestDiffMessage_Item::SharedCtor() {
b_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  b_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&m_)) + sizeof(a_));
}

TestDiffMessage_Item::~TestDiffMessage_Item() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDiffMessage.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestDiffMessage_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mp_.Destruct();
  b_.Destroy();
  if (this != internal_default_instance()) delete m_;
}

void TestDiffMessage_Item::ArenaDtor(void* object) {
  TestDiffMessage_Item* _this = reinterpret_cast< TestDiffMessage_Item* >(object);
  _this->mp_.Destruct();
}
void TestDiffMessage_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDiffMessage_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDiffMessage.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ra_.Clear();
  rb_.Clear();
  rm_.Clear();
  mp_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      b_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(m_ != nullptr);
      m_->Clear();
    }
  }
  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDiffMessage_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ra(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ra(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestDiffMessage.Item.b");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string rb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rb();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestDiffMessage.Item.rb");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestField m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_m(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestField rm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> mp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mp_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDiffMessage_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDiffMessage.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_a(), target);
  }

  // repeated int32 ra = 3;
  for (int i = 0, n = this->_internal_ra_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ra(i), target);
  }

  // optional string b = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestDiffMessage.Item.b");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_b(), target);
  }

  // repeated string rb = 5;
  for (int i = 0, n = this->_internal_rb_size(); i < n; i++) {
    const auto& s = this->_internal_rb(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestDiffMessage.Item.rb");
    target = stream->WriteString(5, s, target);
  }

  // optional .protobuf_unittest.TestField m = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::m(this),
        _Internal::m(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestField rm = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rm_size()); i < n; i++) {
    const auto& repfield = this->_internal_rm(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, int32> mp = 8;
  if (!this->_internal_mp().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = TestDiffMessage_Item_MpEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mp();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_unittest.TestDiffMessage.Item.MpEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDiffMessage.Item)
  return target;
}

size_t TestDiffMessage_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDiffMessage.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ra = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->ra_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ra_size());
    total_size += data_size;
  }

  // repeated string rb = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rb_.size());
  for (int i = 0, n = rb_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rb_.Get(i));
  }

  // repeated .protobuf_unittest.TestField rm = 7;
  total_size += 1UL * this->_internal_rm_size();
  for (const auto& msg : this->rm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, int32> mp = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mp_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_mp().begin();
      it != this->_internal_mp().end(); ++it) {
    total_size += TestDiffMessage_Item_MpEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string b = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_b());
    }

    // optional .protobuf_unittest.TestField m = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_);
    }

    // optional int32 a = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDiffMessage_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDiffMessage_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDiffMessage_Item::GetClassData() const { return &_class_data_; }

void TestDiffMessage_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDiffMessage_Item *>(to)->MergeFrom(
      static_cast<const TestDiffMessage_Item &>(from));
}


void TestDiffMessage_Item::MergeFrom(const TestDiffMessage_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDiffMessage.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ra_.MergeFrom(from.ra_);
  rb_.MergeFrom(from.rb_);
  rm_.MergeFrom(from.rm_);
  mp_.MergeFrom(from.mp_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_b(from._internal_b());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_m()->::protobuf_unittest::TestField::MergeFrom(from._internal_m());
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDiffMessage_Item::CopyFrom(const TestDiffMessage_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDiffMessage.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDiffMessage_Item::IsInitialized() const {
  return true;
}

void TestDiffMessage_Item::InternalSwap(TestDiffMessage_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ra_.InternalSwap(&other->ra_);
  rb_.InternalSwap(&other->rb_);
  rm_.InternalSwap(&other->rm_);
  mp_.InternalSwap(&other->mp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &b_, lhs_arena,
      &other->b_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDiffMessage_Item, a_)
      + sizeof(TestDiffMessage_Item::a_)
      - PROTOBUF_FIELD_OFFSET(TestDiffMessage_Item, m_)>(
          reinterpret_cast<char*>(&m_),
          reinterpret_cast<char*>(&other->m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDiffMessage_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto[2]);
}

// ===================================================================

class TestDiffMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDiffMessage>()._has_bits_);
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestField& m(const TestDiffMessage* msg);
  static void set_has_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf_unittest::TestField&
TestDiffMessage::_Internal::m(const TestDiffMessage* msg) {
  return *msg->m_;
}
void TestDiffMessage::clear_rany() {
  rany_.Clear();
}
TestDiffMessage::TestDiffMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  item_(arena),
  rw_(arena),
  rv_(arena),
  rm_(arena),
  rany_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDiffMessage)
}
TestDiffMessage::TestDiffMessage(const TestDiffMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_(from.item_),
      rw_(from.rw_),
      rv_(from.rv_),
      rm_(from.rm_),
      rany_(from.rany_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  w_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    w_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_w()) {
    w_.Set(from._internal_w(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_m()) {
    m_ = new ::protobuf_unittest::TestField(*from.m_);
  } else {
    m_ = nullptr;
  }
  v_ = from.v_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDiffMessage)
}

inline void TestDiffMessage::SharedCtor() {
w_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  w_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&m_)) + sizeof(v_));
}

TestDiffMessage::~TestDiffMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDiffMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDiffMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  w_.Destroy();
  if (this != internal_default_instance()) delete m_;
}

void TestDiffMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDiffMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDiffMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  item_.Clear();
  rw_.Clear();
  rv_.Clear();
  rm_.Clear();
  rany_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      w_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(m_ != nullptr);
      m_->Clear();
    }
  }
  v_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDiffMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated group Item = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 11)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_item(), ptr, 11);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<11>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string rw = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rw();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestDiffMessage.rw");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 rv = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rv(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rv(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestField rm = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 v = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string w = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_w();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestDiffMessage.w");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestField m = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_m(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any rany = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rany(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((800u <= tag && tag < 1600u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDiffMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDiffMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group Item = 1 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(1, this->_internal_item(i), target, stream);
  }

  // repeated string rw = 10;
  for (int i = 0, n = this->_internal_rw_size(); i < n; i++) {
    const auto& s = this->_internal_rw(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestDiffMessage.rw");
    target = stream->WriteString(10, s, target);
  }

  // repeated int32 rv = 11;
  for (int i = 0, n = this->_internal_rv_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_rv(i), target);
  }

  // repeated .protobuf_unittest.TestField rm = 12 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rm_size()); i < n; i++) {
    const auto& repfield = this->_internal_rm(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 v = 13 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_v(), target);
  }

  // optional string w = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_w().data(), static_cast<int>(this->_internal_w().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestDiffMessage.w");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_w(), target);
  }

  // optional .protobuf_unittest.TestField m = 15;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::m(this),
        _Internal::m(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any rany = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rany_size()); i < n; i++) {
    const auto& repfield = this->_internal_rany(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // Extension range [100, 200)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 100, 200, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDiffMessage)
  return target;
}

size_t TestDiffMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDiffMessage)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Item = 1 { ... };
  total_size += 2UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated string rw = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rw_.size());
  for (int i = 0, n = rw_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rw_.Get(i));
  }

  // repeated int32 rv = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->rv_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_rv_size());
    total_size += data_size;
  }

  // repeated .protobuf_unittest.TestField rm = 12 [deprecated = true];
  total_size += 1UL * this->_internal_rm_size();
  for (const auto& msg : this->rm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any rany = 16;
  total_size += 2UL * this->_internal_rany_size();
  for (const auto& msg : this->rany_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string w = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_w());
    }

    // optional .protobuf_unittest.TestField m = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_);
    }

    // optional int32 v = 13 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_v());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDiffMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDiffMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDiffMessage::GetClassData() const { return &_class_data_; }

void TestDiffMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDiffMessage *>(to)->MergeFrom(
      static_cast<const TestDiffMessage &>(from));
}


void TestDiffMessage::MergeFrom(const TestDiffMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDiffMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  rw_.MergeFrom(from.rw_);
  rv_.MergeFrom(from.rv_);
  rm_.MergeFrom(from.rm_);
  rany_.MergeFrom(from.rany_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_w(from._internal_w());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_m()->::protobuf_unittest::TestField::MergeFrom(from._internal_m());
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDiffMessage::CopyFrom(const TestDiffMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDiffMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDiffMessage::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestDiffMessage::InternalSwap(TestDiffMessage* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
  rw_.InternalSwap(&other->rw_);
  rv_.InternalSwap(&other->rv_);
  rm_.InternalSwap(&other->rm_);
  rany_.InternalSwap(&other->rany_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &w_, lhs_arena,
      &other->w_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDiffMessage, v_)
      + sizeof(TestDiffMessage::v_)
      - PROTOBUF_FIELD_OFFSET(TestDiffMessage, m_)>(
          reinterpret_cast<char*>(&m_),
          reinterpret_cast<char*>(&other->m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDiffMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2fmessage_5fdifferencer_5funittest_2eproto[3]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestField::kTfFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestDiffMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestField >, 11, false>
  TestField::tf(kTfFieldNumber, ::protobuf_unittest::TestField::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestField*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestField >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDiffMessage_Item_MpEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDiffMessage_Item*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDiffMessage_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDiffMessage_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDiffMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDiffMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDiffMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
