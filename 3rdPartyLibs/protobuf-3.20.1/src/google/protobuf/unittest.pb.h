// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/unittest_import.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2funittest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2funittest_2eproto;
namespace protobuf_unittest {
class BarRequest;
struct BarRequestDefaultTypeInternal;
extern BarRequestDefaultTypeInternal _BarRequest_default_instance_;
class BarResponse;
struct BarResponseDefaultTypeInternal;
extern BarResponseDefaultTypeInternal _BarResponse_default_instance_;
class BoolMessage;
struct BoolMessageDefaultTypeInternal;
extern BoolMessageDefaultTypeInternal _BoolMessage_default_instance_;
class FooClientMessage;
struct FooClientMessageDefaultTypeInternal;
extern FooClientMessageDefaultTypeInternal _FooClientMessage_default_instance_;
class FooRequest;
struct FooRequestDefaultTypeInternal;
extern FooRequestDefaultTypeInternal _FooRequest_default_instance_;
class FooResponse;
struct FooResponseDefaultTypeInternal;
extern FooResponseDefaultTypeInternal _FooResponse_default_instance_;
class FooServerMessage;
struct FooServerMessageDefaultTypeInternal;
extern FooServerMessageDefaultTypeInternal _FooServerMessage_default_instance_;
class ForeignMessage;
struct ForeignMessageDefaultTypeInternal;
extern ForeignMessageDefaultTypeInternal _ForeignMessage_default_instance_;
class Int32Message;
struct Int32MessageDefaultTypeInternal;
extern Int32MessageDefaultTypeInternal _Int32Message_default_instance_;
class Int64Message;
struct Int64MessageDefaultTypeInternal;
extern Int64MessageDefaultTypeInternal _Int64Message_default_instance_;
class ManyOptionalString;
struct ManyOptionalStringDefaultTypeInternal;
extern ManyOptionalStringDefaultTypeInternal _ManyOptionalString_default_instance_;
class MoreBytes;
struct MoreBytesDefaultTypeInternal;
extern MoreBytesDefaultTypeInternal _MoreBytes_default_instance_;
class MoreString;
struct MoreStringDefaultTypeInternal;
extern MoreStringDefaultTypeInternal _MoreString_default_instance_;
class NestedTestAllTypes;
struct NestedTestAllTypesDefaultTypeInternal;
extern NestedTestAllTypesDefaultTypeInternal _NestedTestAllTypes_default_instance_;
class OneBytes;
struct OneBytesDefaultTypeInternal;
extern OneBytesDefaultTypeInternal _OneBytes_default_instance_;
class OneString;
struct OneStringDefaultTypeInternal;
extern OneStringDefaultTypeInternal _OneString_default_instance_;
class OptionalGroup_extension;
struct OptionalGroup_extensionDefaultTypeInternal;
extern OptionalGroup_extensionDefaultTypeInternal _OptionalGroup_extension_default_instance_;
class RepeatedGroup_extension;
struct RepeatedGroup_extensionDefaultTypeInternal;
extern RepeatedGroup_extensionDefaultTypeInternal _RepeatedGroup_extension_default_instance_;
class SparseEnumMessage;
struct SparseEnumMessageDefaultTypeInternal;
extern SparseEnumMessageDefaultTypeInternal _SparseEnumMessage_default_instance_;
class TestAllExtensions;
struct TestAllExtensionsDefaultTypeInternal;
extern TestAllExtensionsDefaultTypeInternal _TestAllExtensions_default_instance_;
class TestAllTypes;
struct TestAllTypesDefaultTypeInternal;
extern TestAllTypesDefaultTypeInternal _TestAllTypes_default_instance_;
class TestAllTypes_NestedMessage;
struct TestAllTypes_NestedMessageDefaultTypeInternal;
extern TestAllTypes_NestedMessageDefaultTypeInternal _TestAllTypes_NestedMessage_default_instance_;
class TestAllTypes_OptionalGroup;
struct TestAllTypes_OptionalGroupDefaultTypeInternal;
extern TestAllTypes_OptionalGroupDefaultTypeInternal _TestAllTypes_OptionalGroup_default_instance_;
class TestAllTypes_RepeatedGroup;
struct TestAllTypes_RepeatedGroupDefaultTypeInternal;
extern TestAllTypes_RepeatedGroupDefaultTypeInternal _TestAllTypes_RepeatedGroup_default_instance_;
class TestCamelCaseFieldNames;
struct TestCamelCaseFieldNamesDefaultTypeInternal;
extern TestCamelCaseFieldNamesDefaultTypeInternal _TestCamelCaseFieldNames_default_instance_;
class TestChildExtension;
struct TestChildExtensionDefaultTypeInternal;
extern TestChildExtensionDefaultTypeInternal _TestChildExtension_default_instance_;
class TestChildExtensionData;
struct TestChildExtensionDataDefaultTypeInternal;
extern TestChildExtensionDataDefaultTypeInternal _TestChildExtensionData_default_instance_;
class TestChildExtensionData_NestedTestAllExtensionsData;
struct TestChildExtensionData_NestedTestAllExtensionsDataDefaultTypeInternal;
extern TestChildExtensionData_NestedTestAllExtensionsDataDefaultTypeInternal _TestChildExtensionData_NestedTestAllExtensionsData_default_instance_;
class TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions;
struct TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsDefaultTypeInternal;
extern TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsDefaultTypeInternal _TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions_default_instance_;
class TestCommentInjectionMessage;
struct TestCommentInjectionMessageDefaultTypeInternal;
extern TestCommentInjectionMessageDefaultTypeInternal _TestCommentInjectionMessage_default_instance_;
class TestDeprecatedFields;
struct TestDeprecatedFieldsDefaultTypeInternal;
extern TestDeprecatedFieldsDefaultTypeInternal _TestDeprecatedFields_default_instance_;
class TestDeprecatedMessage;
struct TestDeprecatedMessageDefaultTypeInternal;
extern TestDeprecatedMessageDefaultTypeInternal _TestDeprecatedMessage_default_instance_;
class TestDupFieldNumber;
struct TestDupFieldNumberDefaultTypeInternal;
extern TestDupFieldNumberDefaultTypeInternal _TestDupFieldNumber_default_instance_;
class TestDupFieldNumber_Bar;
struct TestDupFieldNumber_BarDefaultTypeInternal;
extern TestDupFieldNumber_BarDefaultTypeInternal _TestDupFieldNumber_Bar_default_instance_;
class TestDupFieldNumber_Foo;
struct TestDupFieldNumber_FooDefaultTypeInternal;
extern TestDupFieldNumber_FooDefaultTypeInternal _TestDupFieldNumber_Foo_default_instance_;
class TestDynamicExtensions;
struct TestDynamicExtensionsDefaultTypeInternal;
extern TestDynamicExtensionsDefaultTypeInternal _TestDynamicExtensions_default_instance_;
class TestDynamicExtensions_DynamicMessageType;
struct TestDynamicExtensions_DynamicMessageTypeDefaultTypeInternal;
extern TestDynamicExtensions_DynamicMessageTypeDefaultTypeInternal _TestDynamicExtensions_DynamicMessageType_default_instance_;
class TestEagerMaybeLazy;
struct TestEagerMaybeLazyDefaultTypeInternal;
extern TestEagerMaybeLazyDefaultTypeInternal _TestEagerMaybeLazy_default_instance_;
class TestEagerMaybeLazy_NestedMessage;
struct TestEagerMaybeLazy_NestedMessageDefaultTypeInternal;
extern TestEagerMaybeLazy_NestedMessageDefaultTypeInternal _TestEagerMaybeLazy_NestedMessage_default_instance_;
class TestEagerMessage;
struct TestEagerMessageDefaultTypeInternal;
extern TestEagerMessageDefaultTypeInternal _TestEagerMessage_default_instance_;
class TestEmptyMessage;
struct TestEmptyMessageDefaultTypeInternal;
extern TestEmptyMessageDefaultTypeInternal _TestEmptyMessage_default_instance_;
class TestEmptyMessageWithExtensions;
struct TestEmptyMessageWithExtensionsDefaultTypeInternal;
extern TestEmptyMessageWithExtensionsDefaultTypeInternal _TestEmptyMessageWithExtensions_default_instance_;
class TestExtensionInsideTable;
struct TestExtensionInsideTableDefaultTypeInternal;
extern TestExtensionInsideTableDefaultTypeInternal _TestExtensionInsideTable_default_instance_;
class TestExtensionOrderings1;
struct TestExtensionOrderings1DefaultTypeInternal;
extern TestExtensionOrderings1DefaultTypeInternal _TestExtensionOrderings1_default_instance_;
class TestExtensionOrderings2;
struct TestExtensionOrderings2DefaultTypeInternal;
extern TestExtensionOrderings2DefaultTypeInternal _TestExtensionOrderings2_default_instance_;
class TestExtensionOrderings2_TestExtensionOrderings3;
struct TestExtensionOrderings2_TestExtensionOrderings3DefaultTypeInternal;
extern TestExtensionOrderings2_TestExtensionOrderings3DefaultTypeInternal _TestExtensionOrderings2_TestExtensionOrderings3_default_instance_;
class TestExtensionRangeSerialize;
struct TestExtensionRangeSerializeDefaultTypeInternal;
extern TestExtensionRangeSerializeDefaultTypeInternal _TestExtensionRangeSerialize_default_instance_;
class TestExtremeDefaultValues;
struct TestExtremeDefaultValuesDefaultTypeInternal;
extern TestExtremeDefaultValuesDefaultTypeInternal _TestExtremeDefaultValues_default_instance_;
class TestFieldOrderings;
struct TestFieldOrderingsDefaultTypeInternal;
extern TestFieldOrderingsDefaultTypeInternal _TestFieldOrderings_default_instance_;
class TestFieldOrderings_NestedMessage;
struct TestFieldOrderings_NestedMessageDefaultTypeInternal;
extern TestFieldOrderings_NestedMessageDefaultTypeInternal _TestFieldOrderings_NestedMessage_default_instance_;
class TestForeignNested;
struct TestForeignNestedDefaultTypeInternal;
extern TestForeignNestedDefaultTypeInternal _TestForeignNested_default_instance_;
class TestGroup;
struct TestGroupDefaultTypeInternal;
extern TestGroupDefaultTypeInternal _TestGroup_default_instance_;
class TestGroupExtension;
struct TestGroupExtensionDefaultTypeInternal;
extern TestGroupExtensionDefaultTypeInternal _TestGroupExtension_default_instance_;
class TestGroup_OptionalGroup;
struct TestGroup_OptionalGroupDefaultTypeInternal;
extern TestGroup_OptionalGroupDefaultTypeInternal _TestGroup_OptionalGroup_default_instance_;
class TestHugeFieldNumbers;
struct TestHugeFieldNumbersDefaultTypeInternal;
extern TestHugeFieldNumbersDefaultTypeInternal _TestHugeFieldNumbers_default_instance_;
class TestHugeFieldNumbers_OptionalGroup;
struct TestHugeFieldNumbers_OptionalGroupDefaultTypeInternal;
extern TestHugeFieldNumbers_OptionalGroupDefaultTypeInternal _TestHugeFieldNumbers_OptionalGroup_default_instance_;
class TestHugeFieldNumbers_StringStringMapEntry_DoNotUse;
struct TestHugeFieldNumbers_StringStringMapEntry_DoNotUseDefaultTypeInternal;
extern TestHugeFieldNumbers_StringStringMapEntry_DoNotUseDefaultTypeInternal _TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_default_instance_;
class TestIsInitialized;
struct TestIsInitializedDefaultTypeInternal;
extern TestIsInitializedDefaultTypeInternal _TestIsInitialized_default_instance_;
class TestIsInitialized_SubMessage;
struct TestIsInitialized_SubMessageDefaultTypeInternal;
extern TestIsInitialized_SubMessageDefaultTypeInternal _TestIsInitialized_SubMessage_default_instance_;
class TestIsInitialized_SubMessage_SubGroup;
struct TestIsInitialized_SubMessage_SubGroupDefaultTypeInternal;
extern TestIsInitialized_SubMessage_SubGroupDefaultTypeInternal _TestIsInitialized_SubMessage_SubGroup_default_instance_;
class TestJsonName;
struct TestJsonNameDefaultTypeInternal;
extern TestJsonNameDefaultTypeInternal _TestJsonName_default_instance_;
class TestLazyMessage;
struct TestLazyMessageDefaultTypeInternal;
extern TestLazyMessageDefaultTypeInternal _TestLazyMessage_default_instance_;
class TestMergeException;
struct TestMergeExceptionDefaultTypeInternal;
extern TestMergeExceptionDefaultTypeInternal _TestMergeException_default_instance_;
class TestMultipleExtensionRanges;
struct TestMultipleExtensionRangesDefaultTypeInternal;
extern TestMultipleExtensionRangesDefaultTypeInternal _TestMultipleExtensionRanges_default_instance_;
class TestMutualRecursionA;
struct TestMutualRecursionADefaultTypeInternal;
extern TestMutualRecursionADefaultTypeInternal _TestMutualRecursionA_default_instance_;
class TestMutualRecursionA_SubGroup;
struct TestMutualRecursionA_SubGroupDefaultTypeInternal;
extern TestMutualRecursionA_SubGroupDefaultTypeInternal _TestMutualRecursionA_SubGroup_default_instance_;
class TestMutualRecursionA_SubMessage;
struct TestMutualRecursionA_SubMessageDefaultTypeInternal;
extern TestMutualRecursionA_SubMessageDefaultTypeInternal _TestMutualRecursionA_SubMessage_default_instance_;
class TestMutualRecursionB;
struct TestMutualRecursionBDefaultTypeInternal;
extern TestMutualRecursionBDefaultTypeInternal _TestMutualRecursionB_default_instance_;
class TestNestedChildExtension;
struct TestNestedChildExtensionDefaultTypeInternal;
extern TestNestedChildExtensionDefaultTypeInternal _TestNestedChildExtension_default_instance_;
class TestNestedChildExtensionData;
struct TestNestedChildExtensionDataDefaultTypeInternal;
extern TestNestedChildExtensionDataDefaultTypeInternal _TestNestedChildExtensionData_default_instance_;
class TestNestedExtension;
struct TestNestedExtensionDefaultTypeInternal;
extern TestNestedExtensionDefaultTypeInternal _TestNestedExtension_default_instance_;
class TestNestedExtension_OptionalGroup_extension;
struct TestNestedExtension_OptionalGroup_extensionDefaultTypeInternal;
extern TestNestedExtension_OptionalGroup_extensionDefaultTypeInternal _TestNestedExtension_OptionalGroup_extension_default_instance_;
class TestNestedGroupExtensionInnerExtension;
struct TestNestedGroupExtensionInnerExtensionDefaultTypeInternal;
extern TestNestedGroupExtensionInnerExtensionDefaultTypeInternal _TestNestedGroupExtensionInnerExtension_default_instance_;
class TestNestedGroupExtensionOuter;
struct TestNestedGroupExtensionOuterDefaultTypeInternal;
extern TestNestedGroupExtensionOuterDefaultTypeInternal _TestNestedGroupExtensionOuter_default_instance_;
class TestNestedGroupExtensionOuter_Layer1OptionalGroup;
struct TestNestedGroupExtensionOuter_Layer1OptionalGroupDefaultTypeInternal;
extern TestNestedGroupExtensionOuter_Layer1OptionalGroupDefaultTypeInternal _TestNestedGroupExtensionOuter_Layer1OptionalGroup_default_instance_;
class TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup;
struct TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupDefaultTypeInternal;
extern TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupDefaultTypeInternal _TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup_default_instance_;
class TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup;
struct TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupDefaultTypeInternal;
extern TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupDefaultTypeInternal _TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup_default_instance_;
class TestNestedMessageHasBits;
struct TestNestedMessageHasBitsDefaultTypeInternal;
extern TestNestedMessageHasBitsDefaultTypeInternal _TestNestedMessageHasBits_default_instance_;
class TestNestedMessageHasBits_NestedMessage;
struct TestNestedMessageHasBits_NestedMessageDefaultTypeInternal;
extern TestNestedMessageHasBits_NestedMessageDefaultTypeInternal _TestNestedMessageHasBits_NestedMessage_default_instance_;
class TestNestedRequiredForeign;
struct TestNestedRequiredForeignDefaultTypeInternal;
extern TestNestedRequiredForeignDefaultTypeInternal _TestNestedRequiredForeign_default_instance_;
class TestOneof;
struct TestOneofDefaultTypeInternal;
extern TestOneofDefaultTypeInternal _TestOneof_default_instance_;
class TestOneof2;
struct TestOneof2DefaultTypeInternal;
extern TestOneof2DefaultTypeInternal _TestOneof2_default_instance_;
class TestOneof2_FooGroup;
struct TestOneof2_FooGroupDefaultTypeInternal;
extern TestOneof2_FooGroupDefaultTypeInternal _TestOneof2_FooGroup_default_instance_;
class TestOneof2_NestedMessage;
struct TestOneof2_NestedMessageDefaultTypeInternal;
extern TestOneof2_NestedMessageDefaultTypeInternal _TestOneof2_NestedMessage_default_instance_;
class TestOneofBackwardsCompatible;
struct TestOneofBackwardsCompatibleDefaultTypeInternal;
extern TestOneofBackwardsCompatibleDefaultTypeInternal _TestOneofBackwardsCompatible_default_instance_;
class TestOneofBackwardsCompatible_FooGroup;
struct TestOneofBackwardsCompatible_FooGroupDefaultTypeInternal;
extern TestOneofBackwardsCompatible_FooGroupDefaultTypeInternal _TestOneofBackwardsCompatible_FooGroup_default_instance_;
class TestOneof_FooGroup;
struct TestOneof_FooGroupDefaultTypeInternal;
extern TestOneof_FooGroupDefaultTypeInternal _TestOneof_FooGroup_default_instance_;
class TestPackedExtensions;
struct TestPackedExtensionsDefaultTypeInternal;
extern TestPackedExtensionsDefaultTypeInternal _TestPackedExtensions_default_instance_;
class TestPackedTypes;
struct TestPackedTypesDefaultTypeInternal;
extern TestPackedTypesDefaultTypeInternal _TestPackedTypes_default_instance_;
class TestParsingMerge;
struct TestParsingMergeDefaultTypeInternal;
extern TestParsingMergeDefaultTypeInternal _TestParsingMerge_default_instance_;
class TestParsingMerge_OptionalGroup;
struct TestParsingMerge_OptionalGroupDefaultTypeInternal;
extern TestParsingMerge_OptionalGroupDefaultTypeInternal _TestParsingMerge_OptionalGroup_default_instance_;
class TestParsingMerge_RepeatedFieldsGenerator;
struct TestParsingMerge_RepeatedFieldsGeneratorDefaultTypeInternal;
extern TestParsingMerge_RepeatedFieldsGeneratorDefaultTypeInternal _TestParsingMerge_RepeatedFieldsGenerator_default_instance_;
class TestParsingMerge_RepeatedFieldsGenerator_Group1;
struct TestParsingMerge_RepeatedFieldsGenerator_Group1DefaultTypeInternal;
extern TestParsingMerge_RepeatedFieldsGenerator_Group1DefaultTypeInternal _TestParsingMerge_RepeatedFieldsGenerator_Group1_default_instance_;
class TestParsingMerge_RepeatedFieldsGenerator_Group2;
struct TestParsingMerge_RepeatedFieldsGenerator_Group2DefaultTypeInternal;
extern TestParsingMerge_RepeatedFieldsGenerator_Group2DefaultTypeInternal _TestParsingMerge_RepeatedFieldsGenerator_Group2_default_instance_;
class TestParsingMerge_RepeatedGroup;
struct TestParsingMerge_RepeatedGroupDefaultTypeInternal;
extern TestParsingMerge_RepeatedGroupDefaultTypeInternal _TestParsingMerge_RepeatedGroup_default_instance_;
class TestPickleNestedMessage;
struct TestPickleNestedMessageDefaultTypeInternal;
extern TestPickleNestedMessageDefaultTypeInternal _TestPickleNestedMessage_default_instance_;
class TestPickleNestedMessage_NestedMessage;
struct TestPickleNestedMessage_NestedMessageDefaultTypeInternal;
extern TestPickleNestedMessage_NestedMessageDefaultTypeInternal _TestPickleNestedMessage_NestedMessage_default_instance_;
class TestPickleNestedMessage_NestedMessage_NestedNestedMessage;
struct TestPickleNestedMessage_NestedMessage_NestedNestedMessageDefaultTypeInternal;
extern TestPickleNestedMessage_NestedMessage_NestedNestedMessageDefaultTypeInternal _TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_;
class TestReallyLargeTagNumber;
struct TestReallyLargeTagNumberDefaultTypeInternal;
extern TestReallyLargeTagNumberDefaultTypeInternal _TestReallyLargeTagNumber_default_instance_;
class TestRecursiveMessage;
struct TestRecursiveMessageDefaultTypeInternal;
extern TestRecursiveMessageDefaultTypeInternal _TestRecursiveMessage_default_instance_;
class TestRepeatedScalarDifferentTagSizes;
struct TestRepeatedScalarDifferentTagSizesDefaultTypeInternal;
extern TestRepeatedScalarDifferentTagSizesDefaultTypeInternal _TestRepeatedScalarDifferentTagSizes_default_instance_;
class TestRequired;
struct TestRequiredDefaultTypeInternal;
extern TestRequiredDefaultTypeInternal _TestRequired_default_instance_;
class TestRequiredForeign;
struct TestRequiredForeignDefaultTypeInternal;
extern TestRequiredForeignDefaultTypeInternal _TestRequiredForeign_default_instance_;
class TestRequiredMessage;
struct TestRequiredMessageDefaultTypeInternal;
extern TestRequiredMessageDefaultTypeInternal _TestRequiredMessage_default_instance_;
class TestRequiredOneof;
struct TestRequiredOneofDefaultTypeInternal;
extern TestRequiredOneofDefaultTypeInternal _TestRequiredOneof_default_instance_;
class TestRequiredOneof_NestedMessage;
struct TestRequiredOneof_NestedMessageDefaultTypeInternal;
extern TestRequiredOneof_NestedMessageDefaultTypeInternal _TestRequiredOneof_NestedMessage_default_instance_;
class TestReservedFields;
struct TestReservedFieldsDefaultTypeInternal;
extern TestReservedFieldsDefaultTypeInternal _TestReservedFields_default_instance_;
class TestUnpackedExtensions;
struct TestUnpackedExtensionsDefaultTypeInternal;
extern TestUnpackedExtensionsDefaultTypeInternal _TestUnpackedExtensions_default_instance_;
class TestUnpackedTypes;
struct TestUnpackedTypesDefaultTypeInternal;
extern TestUnpackedTypesDefaultTypeInternal _TestUnpackedTypes_default_instance_;
class Uint32Message;
struct Uint32MessageDefaultTypeInternal;
extern Uint32MessageDefaultTypeInternal _Uint32Message_default_instance_;
class Uint64Message;
struct Uint64MessageDefaultTypeInternal;
extern Uint64MessageDefaultTypeInternal _Uint64Message_default_instance_;
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf_unittest::BarRequest* Arena::CreateMaybeMessage<::protobuf_unittest::BarRequest>(Arena*);
template<> ::protobuf_unittest::BarResponse* Arena::CreateMaybeMessage<::protobuf_unittest::BarResponse>(Arena*);
template<> ::protobuf_unittest::BoolMessage* Arena::CreateMaybeMessage<::protobuf_unittest::BoolMessage>(Arena*);
template<> ::protobuf_unittest::FooClientMessage* Arena::CreateMaybeMessage<::protobuf_unittest::FooClientMessage>(Arena*);
template<> ::protobuf_unittest::FooRequest* Arena::CreateMaybeMessage<::protobuf_unittest::FooRequest>(Arena*);
template<> ::protobuf_unittest::FooResponse* Arena::CreateMaybeMessage<::protobuf_unittest::FooResponse>(Arena*);
template<> ::protobuf_unittest::FooServerMessage* Arena::CreateMaybeMessage<::protobuf_unittest::FooServerMessage>(Arena*);
template<> ::protobuf_unittest::ForeignMessage* Arena::CreateMaybeMessage<::protobuf_unittest::ForeignMessage>(Arena*);
template<> ::protobuf_unittest::Int32Message* Arena::CreateMaybeMessage<::protobuf_unittest::Int32Message>(Arena*);
template<> ::protobuf_unittest::Int64Message* Arena::CreateMaybeMessage<::protobuf_unittest::Int64Message>(Arena*);
template<> ::protobuf_unittest::ManyOptionalString* Arena::CreateMaybeMessage<::protobuf_unittest::ManyOptionalString>(Arena*);
template<> ::protobuf_unittest::MoreBytes* Arena::CreateMaybeMessage<::protobuf_unittest::MoreBytes>(Arena*);
template<> ::protobuf_unittest::MoreString* Arena::CreateMaybeMessage<::protobuf_unittest::MoreString>(Arena*);
template<> ::protobuf_unittest::NestedTestAllTypes* Arena::CreateMaybeMessage<::protobuf_unittest::NestedTestAllTypes>(Arena*);
template<> ::protobuf_unittest::OneBytes* Arena::CreateMaybeMessage<::protobuf_unittest::OneBytes>(Arena*);
template<> ::protobuf_unittest::OneString* Arena::CreateMaybeMessage<::protobuf_unittest::OneString>(Arena*);
template<> ::protobuf_unittest::OptionalGroup_extension* Arena::CreateMaybeMessage<::protobuf_unittest::OptionalGroup_extension>(Arena*);
template<> ::protobuf_unittest::RepeatedGroup_extension* Arena::CreateMaybeMessage<::protobuf_unittest::RepeatedGroup_extension>(Arena*);
template<> ::protobuf_unittest::SparseEnumMessage* Arena::CreateMaybeMessage<::protobuf_unittest::SparseEnumMessage>(Arena*);
template<> ::protobuf_unittest::TestAllExtensions* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllExtensions>(Arena*);
template<> ::protobuf_unittest::TestAllTypes* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(Arena*);
template<> ::protobuf_unittest::TestAllTypes_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllTypes_NestedMessage>(Arena*);
template<> ::protobuf_unittest::TestAllTypes_OptionalGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllTypes_OptionalGroup>(Arena*);
template<> ::protobuf_unittest::TestAllTypes_RepeatedGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllTypes_RepeatedGroup>(Arena*);
template<> ::protobuf_unittest::TestCamelCaseFieldNames* Arena::CreateMaybeMessage<::protobuf_unittest::TestCamelCaseFieldNames>(Arena*);
template<> ::protobuf_unittest::TestChildExtension* Arena::CreateMaybeMessage<::protobuf_unittest::TestChildExtension>(Arena*);
template<> ::protobuf_unittest::TestChildExtensionData* Arena::CreateMaybeMessage<::protobuf_unittest::TestChildExtensionData>(Arena*);
template<> ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* Arena::CreateMaybeMessage<::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData>(Arena*);
template<> ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* Arena::CreateMaybeMessage<::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions>(Arena*);
template<> ::protobuf_unittest::TestCommentInjectionMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestCommentInjectionMessage>(Arena*);
template<> ::protobuf_unittest::TestDeprecatedFields* Arena::CreateMaybeMessage<::protobuf_unittest::TestDeprecatedFields>(Arena*);
template<> ::protobuf_unittest::TestDeprecatedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestDeprecatedMessage>(Arena*);
template<> ::protobuf_unittest::TestDupFieldNumber* Arena::CreateMaybeMessage<::protobuf_unittest::TestDupFieldNumber>(Arena*);
template<> ::protobuf_unittest::TestDupFieldNumber_Bar* Arena::CreateMaybeMessage<::protobuf_unittest::TestDupFieldNumber_Bar>(Arena*);
template<> ::protobuf_unittest::TestDupFieldNumber_Foo* Arena::CreateMaybeMessage<::protobuf_unittest::TestDupFieldNumber_Foo>(Arena*);
template<> ::protobuf_unittest::TestDynamicExtensions* Arena::CreateMaybeMessage<::protobuf_unittest::TestDynamicExtensions>(Arena*);
template<> ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* Arena::CreateMaybeMessage<::protobuf_unittest::TestDynamicExtensions_DynamicMessageType>(Arena*);
template<> ::protobuf_unittest::TestEagerMaybeLazy* Arena::CreateMaybeMessage<::protobuf_unittest::TestEagerMaybeLazy>(Arena*);
template<> ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestEagerMaybeLazy_NestedMessage>(Arena*);
template<> ::protobuf_unittest::TestEagerMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestEagerMessage>(Arena*);
template<> ::protobuf_unittest::TestEmptyMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestEmptyMessage>(Arena*);
template<> ::protobuf_unittest::TestEmptyMessageWithExtensions* Arena::CreateMaybeMessage<::protobuf_unittest::TestEmptyMessageWithExtensions>(Arena*);
template<> ::protobuf_unittest::TestExtensionInsideTable* Arena::CreateMaybeMessage<::protobuf_unittest::TestExtensionInsideTable>(Arena*);
template<> ::protobuf_unittest::TestExtensionOrderings1* Arena::CreateMaybeMessage<::protobuf_unittest::TestExtensionOrderings1>(Arena*);
template<> ::protobuf_unittest::TestExtensionOrderings2* Arena::CreateMaybeMessage<::protobuf_unittest::TestExtensionOrderings2>(Arena*);
template<> ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3* Arena::CreateMaybeMessage<::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3>(Arena*);
template<> ::protobuf_unittest::TestExtensionRangeSerialize* Arena::CreateMaybeMessage<::protobuf_unittest::TestExtensionRangeSerialize>(Arena*);
template<> ::protobuf_unittest::TestExtremeDefaultValues* Arena::CreateMaybeMessage<::protobuf_unittest::TestExtremeDefaultValues>(Arena*);
template<> ::protobuf_unittest::TestFieldOrderings* Arena::CreateMaybeMessage<::protobuf_unittest::TestFieldOrderings>(Arena*);
template<> ::protobuf_unittest::TestFieldOrderings_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestFieldOrderings_NestedMessage>(Arena*);
template<> ::protobuf_unittest::TestForeignNested* Arena::CreateMaybeMessage<::protobuf_unittest::TestForeignNested>(Arena*);
template<> ::protobuf_unittest::TestGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestGroup>(Arena*);
template<> ::protobuf_unittest::TestGroupExtension* Arena::CreateMaybeMessage<::protobuf_unittest::TestGroupExtension>(Arena*);
template<> ::protobuf_unittest::TestGroup_OptionalGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestGroup_OptionalGroup>(Arena*);
template<> ::protobuf_unittest::TestHugeFieldNumbers* Arena::CreateMaybeMessage<::protobuf_unittest::TestHugeFieldNumbers>(Arena*);
template<> ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup>(Arena*);
template<> ::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_unittest::TestHugeFieldNumbers_StringStringMapEntry_DoNotUse>(Arena*);
template<> ::protobuf_unittest::TestIsInitialized* Arena::CreateMaybeMessage<::protobuf_unittest::TestIsInitialized>(Arena*);
template<> ::protobuf_unittest::TestIsInitialized_SubMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestIsInitialized_SubMessage>(Arena*);
template<> ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup>(Arena*);
template<> ::protobuf_unittest::TestJsonName* Arena::CreateMaybeMessage<::protobuf_unittest::TestJsonName>(Arena*);
template<> ::protobuf_unittest::TestLazyMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestLazyMessage>(Arena*);
template<> ::protobuf_unittest::TestMergeException* Arena::CreateMaybeMessage<::protobuf_unittest::TestMergeException>(Arena*);
template<> ::protobuf_unittest::TestMultipleExtensionRanges* Arena::CreateMaybeMessage<::protobuf_unittest::TestMultipleExtensionRanges>(Arena*);
template<> ::protobuf_unittest::TestMutualRecursionA* Arena::CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionA>(Arena*);
template<> ::protobuf_unittest::TestMutualRecursionA_SubGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionA_SubGroup>(Arena*);
template<> ::protobuf_unittest::TestMutualRecursionA_SubMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionA_SubMessage>(Arena*);
template<> ::protobuf_unittest::TestMutualRecursionB* Arena::CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionB>(Arena*);
template<> ::protobuf_unittest::TestNestedChildExtension* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedChildExtension>(Arena*);
template<> ::protobuf_unittest::TestNestedChildExtensionData* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedChildExtensionData>(Arena*);
template<> ::protobuf_unittest::TestNestedExtension* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedExtension>(Arena*);
template<> ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedExtension_OptionalGroup_extension>(Arena*);
template<> ::protobuf_unittest::TestNestedGroupExtensionInnerExtension* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedGroupExtensionInnerExtension>(Arena*);
template<> ::protobuf_unittest::TestNestedGroupExtensionOuter* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedGroupExtensionOuter>(Arena*);
template<> ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup>(Arena*);
template<> ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup>(Arena*);
template<> ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup>(Arena*);
template<> ::protobuf_unittest::TestNestedMessageHasBits* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedMessageHasBits>(Arena*);
template<> ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedMessageHasBits_NestedMessage>(Arena*);
template<> ::protobuf_unittest::TestNestedRequiredForeign* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedRequiredForeign>(Arena*);
template<> ::protobuf_unittest::TestOneof* Arena::CreateMaybeMessage<::protobuf_unittest::TestOneof>(Arena*);
template<> ::protobuf_unittest::TestOneof2* Arena::CreateMaybeMessage<::protobuf_unittest::TestOneof2>(Arena*);
template<> ::protobuf_unittest::TestOneof2_FooGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestOneof2_FooGroup>(Arena*);
template<> ::protobuf_unittest::TestOneof2_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestOneof2_NestedMessage>(Arena*);
template<> ::protobuf_unittest::TestOneofBackwardsCompatible* Arena::CreateMaybeMessage<::protobuf_unittest::TestOneofBackwardsCompatible>(Arena*);
template<> ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup>(Arena*);
template<> ::protobuf_unittest::TestOneof_FooGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestOneof_FooGroup>(Arena*);
template<> ::protobuf_unittest::TestPackedExtensions* Arena::CreateMaybeMessage<::protobuf_unittest::TestPackedExtensions>(Arena*);
template<> ::protobuf_unittest::TestPackedTypes* Arena::CreateMaybeMessage<::protobuf_unittest::TestPackedTypes>(Arena*);
template<> ::protobuf_unittest::TestParsingMerge* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMerge>(Arena*);
template<> ::protobuf_unittest::TestParsingMerge_OptionalGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMerge_OptionalGroup>(Arena*);
template<> ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator>(Arena*);
template<> ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1>(Arena*);
template<> ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2>(Arena*);
template<> ::protobuf_unittest::TestParsingMerge_RepeatedGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMerge_RepeatedGroup>(Arena*);
template<> ::protobuf_unittest::TestPickleNestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestPickleNestedMessage>(Arena*);
template<> ::protobuf_unittest::TestPickleNestedMessage_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestPickleNestedMessage_NestedMessage>(Arena*);
template<> ::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestPickleNestedMessage_NestedMessage_NestedNestedMessage>(Arena*);
template<> ::protobuf_unittest::TestReallyLargeTagNumber* Arena::CreateMaybeMessage<::protobuf_unittest::TestReallyLargeTagNumber>(Arena*);
template<> ::protobuf_unittest::TestRecursiveMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestRecursiveMessage>(Arena*);
template<> ::protobuf_unittest::TestRepeatedScalarDifferentTagSizes* Arena::CreateMaybeMessage<::protobuf_unittest::TestRepeatedScalarDifferentTagSizes>(Arena*);
template<> ::protobuf_unittest::TestRequired* Arena::CreateMaybeMessage<::protobuf_unittest::TestRequired>(Arena*);
template<> ::protobuf_unittest::TestRequiredForeign* Arena::CreateMaybeMessage<::protobuf_unittest::TestRequiredForeign>(Arena*);
template<> ::protobuf_unittest::TestRequiredMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestRequiredMessage>(Arena*);
template<> ::protobuf_unittest::TestRequiredOneof* Arena::CreateMaybeMessage<::protobuf_unittest::TestRequiredOneof>(Arena*);
template<> ::protobuf_unittest::TestRequiredOneof_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestRequiredOneof_NestedMessage>(Arena*);
template<> ::protobuf_unittest::TestReservedFields* Arena::CreateMaybeMessage<::protobuf_unittest::TestReservedFields>(Arena*);
template<> ::protobuf_unittest::TestUnpackedExtensions* Arena::CreateMaybeMessage<::protobuf_unittest::TestUnpackedExtensions>(Arena*);
template<> ::protobuf_unittest::TestUnpackedTypes* Arena::CreateMaybeMessage<::protobuf_unittest::TestUnpackedTypes>(Arena*);
template<> ::protobuf_unittest::Uint32Message* Arena::CreateMaybeMessage<::protobuf_unittest::Uint32Message>(Arena*);
template<> ::protobuf_unittest::Uint64Message* Arena::CreateMaybeMessage<::protobuf_unittest::Uint64Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf_unittest {

enum TestAllTypes_NestedEnum : int {
  TestAllTypes_NestedEnum_FOO = 1,
  TestAllTypes_NestedEnum_BAR = 2,
  TestAllTypes_NestedEnum_BAZ = 3,
  TestAllTypes_NestedEnum_NEG = -1
};
bool TestAllTypes_NestedEnum_IsValid(int value);
constexpr TestAllTypes_NestedEnum TestAllTypes_NestedEnum_NestedEnum_MIN = TestAllTypes_NestedEnum_NEG;
constexpr TestAllTypes_NestedEnum TestAllTypes_NestedEnum_NestedEnum_MAX = TestAllTypes_NestedEnum_BAZ;
constexpr int TestAllTypes_NestedEnum_NestedEnum_ARRAYSIZE = TestAllTypes_NestedEnum_NestedEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypes_NestedEnum_descriptor();
template<typename T>
inline const std::string& TestAllTypes_NestedEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestAllTypes_NestedEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestAllTypes_NestedEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestAllTypes_NestedEnum_descriptor(), enum_t_value);
}
inline bool TestAllTypes_NestedEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestAllTypes_NestedEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestAllTypes_NestedEnum>(
    TestAllTypes_NestedEnum_descriptor(), name, value);
}
enum TestOneof2_NestedEnum : int {
  TestOneof2_NestedEnum_FOO = 1,
  TestOneof2_NestedEnum_BAR = 2,
  TestOneof2_NestedEnum_BAZ = 3
};
bool TestOneof2_NestedEnum_IsValid(int value);
constexpr TestOneof2_NestedEnum TestOneof2_NestedEnum_NestedEnum_MIN = TestOneof2_NestedEnum_FOO;
constexpr TestOneof2_NestedEnum TestOneof2_NestedEnum_NestedEnum_MAX = TestOneof2_NestedEnum_BAZ;
constexpr int TestOneof2_NestedEnum_NestedEnum_ARRAYSIZE = TestOneof2_NestedEnum_NestedEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestOneof2_NestedEnum_descriptor();
template<typename T>
inline const std::string& TestOneof2_NestedEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestOneof2_NestedEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestOneof2_NestedEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestOneof2_NestedEnum_descriptor(), enum_t_value);
}
inline bool TestOneof2_NestedEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestOneof2_NestedEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestOneof2_NestedEnum>(
    TestOneof2_NestedEnum_descriptor(), name, value);
}
enum TestDynamicExtensions_DynamicEnumType : int {
  TestDynamicExtensions_DynamicEnumType_DYNAMIC_FOO = 2200,
  TestDynamicExtensions_DynamicEnumType_DYNAMIC_BAR = 2201,
  TestDynamicExtensions_DynamicEnumType_DYNAMIC_BAZ = 2202
};
bool TestDynamicExtensions_DynamicEnumType_IsValid(int value);
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions_DynamicEnumType_DynamicEnumType_MIN = TestDynamicExtensions_DynamicEnumType_DYNAMIC_FOO;
constexpr TestDynamicExtensions_DynamicEnumType TestDynamicExtensions_DynamicEnumType_DynamicEnumType_MAX = TestDynamicExtensions_DynamicEnumType_DYNAMIC_BAZ;
constexpr int TestDynamicExtensions_DynamicEnumType_DynamicEnumType_ARRAYSIZE = TestDynamicExtensions_DynamicEnumType_DynamicEnumType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestDynamicExtensions_DynamicEnumType_descriptor();
template<typename T>
inline const std::string& TestDynamicExtensions_DynamicEnumType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestDynamicExtensions_DynamicEnumType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestDynamicExtensions_DynamicEnumType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestDynamicExtensions_DynamicEnumType_descriptor(), enum_t_value);
}
inline bool TestDynamicExtensions_DynamicEnumType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestDynamicExtensions_DynamicEnumType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestDynamicExtensions_DynamicEnumType>(
    TestDynamicExtensions_DynamicEnumType_descriptor(), name, value);
}
enum ForeignEnum : int {
  FOREIGN_FOO = 4,
  FOREIGN_BAR = 5,
  FOREIGN_BAZ = 6
};
bool ForeignEnum_IsValid(int value);
constexpr ForeignEnum ForeignEnum_MIN = FOREIGN_FOO;
constexpr ForeignEnum ForeignEnum_MAX = FOREIGN_BAZ;
constexpr int ForeignEnum_ARRAYSIZE = ForeignEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForeignEnum_descriptor();
template<typename T>
inline const std::string& ForeignEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ForeignEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ForeignEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ForeignEnum_descriptor(), enum_t_value);
}
inline bool ForeignEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ForeignEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ForeignEnum>(
    ForeignEnum_descriptor(), name, value);
}
enum TestEnumWithDupValue : int {
  FOO1 = 1,
  BAR1 = 2,
  BAZ = 3,
  FOO2 = 1,
  BAR2 = 2
};
bool TestEnumWithDupValue_IsValid(int value);
constexpr TestEnumWithDupValue TestEnumWithDupValue_MIN = FOO1;
constexpr TestEnumWithDupValue TestEnumWithDupValue_MAX = BAZ;
constexpr int TestEnumWithDupValue_ARRAYSIZE = TestEnumWithDupValue_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnumWithDupValue_descriptor();
template<typename T>
inline const std::string& TestEnumWithDupValue_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestEnumWithDupValue>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestEnumWithDupValue_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestEnumWithDupValue_descriptor(), enum_t_value);
}
inline bool TestEnumWithDupValue_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestEnumWithDupValue* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestEnumWithDupValue>(
    TestEnumWithDupValue_descriptor(), name, value);
}
enum TestSparseEnum : int {
  SPARSE_A = 123,
  SPARSE_B = 62374,
  SPARSE_C = 12589234,
  SPARSE_D = -15,
  SPARSE_E = -53452,
  SPARSE_F = 0,
  SPARSE_G = 2
};
bool TestSparseEnum_IsValid(int value);
constexpr TestSparseEnum TestSparseEnum_MIN = SPARSE_E;
constexpr TestSparseEnum TestSparseEnum_MAX = SPARSE_C;
constexpr int TestSparseEnum_ARRAYSIZE = TestSparseEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestSparseEnum_descriptor();
template<typename T>
inline const std::string& TestSparseEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestSparseEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestSparseEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestSparseEnum_descriptor(), enum_t_value);
}
inline bool TestSparseEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestSparseEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestSparseEnum>(
    TestSparseEnum_descriptor(), name, value);
}
enum VeryLargeEnum : int {
  ENUM_LABEL_DEFAULT = 0,
  ENUM_LABEL_1 = 1,
  ENUM_LABEL_2 = 2,
  ENUM_LABEL_3 = 3,
  ENUM_LABEL_4 = 4,
  ENUM_LABEL_5 = 5,
  ENUM_LABEL_6 = 6,
  ENUM_LABEL_7 = 7,
  ENUM_LABEL_8 = 8,
  ENUM_LABEL_9 = 9,
  ENUM_LABEL_10 = 10,
  ENUM_LABEL_11 = 11,
  ENUM_LABEL_12 = 12,
  ENUM_LABEL_13 = 13,
  ENUM_LABEL_14 = 14,
  ENUM_LABEL_15 = 15,
  ENUM_LABEL_16 = 16,
  ENUM_LABEL_17 = 17,
  ENUM_LABEL_18 = 18,
  ENUM_LABEL_19 = 19,
  ENUM_LABEL_20 = 20,
  ENUM_LABEL_21 = 21,
  ENUM_LABEL_22 = 22,
  ENUM_LABEL_23 = 23,
  ENUM_LABEL_24 = 24,
  ENUM_LABEL_25 = 25,
  ENUM_LABEL_26 = 26,
  ENUM_LABEL_27 = 27,
  ENUM_LABEL_28 = 28,
  ENUM_LABEL_29 = 29,
  ENUM_LABEL_30 = 30,
  ENUM_LABEL_31 = 31,
  ENUM_LABEL_32 = 32,
  ENUM_LABEL_33 = 33,
  ENUM_LABEL_34 = 34,
  ENUM_LABEL_35 = 35,
  ENUM_LABEL_36 = 36,
  ENUM_LABEL_37 = 37,
  ENUM_LABEL_38 = 38,
  ENUM_LABEL_39 = 39,
  ENUM_LABEL_40 = 40,
  ENUM_LABEL_41 = 41,
  ENUM_LABEL_42 = 42,
  ENUM_LABEL_43 = 43,
  ENUM_LABEL_44 = 44,
  ENUM_LABEL_45 = 45,
  ENUM_LABEL_46 = 46,
  ENUM_LABEL_47 = 47,
  ENUM_LABEL_48 = 48,
  ENUM_LABEL_49 = 49,
  ENUM_LABEL_50 = 50,
  ENUM_LABEL_51 = 51,
  ENUM_LABEL_52 = 52,
  ENUM_LABEL_53 = 53,
  ENUM_LABEL_54 = 54,
  ENUM_LABEL_55 = 55,
  ENUM_LABEL_56 = 56,
  ENUM_LABEL_57 = 57,
  ENUM_LABEL_58 = 58,
  ENUM_LABEL_59 = 59,
  ENUM_LABEL_60 = 60,
  ENUM_LABEL_61 = 61,
  ENUM_LABEL_62 = 62,
  ENUM_LABEL_63 = 63,
  ENUM_LABEL_64 = 64,
  ENUM_LABEL_65 = 65,
  ENUM_LABEL_66 = 66,
  ENUM_LABEL_67 = 67,
  ENUM_LABEL_68 = 68,
  ENUM_LABEL_69 = 69,
  ENUM_LABEL_70 = 70,
  ENUM_LABEL_71 = 71,
  ENUM_LABEL_72 = 72,
  ENUM_LABEL_73 = 73,
  ENUM_LABEL_74 = 74,
  ENUM_LABEL_75 = 75,
  ENUM_LABEL_76 = 76,
  ENUM_LABEL_77 = 77,
  ENUM_LABEL_78 = 78,
  ENUM_LABEL_79 = 79,
  ENUM_LABEL_80 = 80,
  ENUM_LABEL_81 = 81,
  ENUM_LABEL_82 = 82,
  ENUM_LABEL_83 = 83,
  ENUM_LABEL_84 = 84,
  ENUM_LABEL_85 = 85,
  ENUM_LABEL_86 = 86,
  ENUM_LABEL_87 = 87,
  ENUM_LABEL_88 = 88,
  ENUM_LABEL_89 = 89,
  ENUM_LABEL_90 = 90,
  ENUM_LABEL_91 = 91,
  ENUM_LABEL_92 = 92,
  ENUM_LABEL_93 = 93,
  ENUM_LABEL_94 = 94,
  ENUM_LABEL_95 = 95,
  ENUM_LABEL_96 = 96,
  ENUM_LABEL_97 = 97,
  ENUM_LABEL_98 = 98,
  ENUM_LABEL_99 = 99,
  ENUM_LABEL_100 = 100
};
bool VeryLargeEnum_IsValid(int value);
constexpr VeryLargeEnum VeryLargeEnum_MIN = ENUM_LABEL_DEFAULT;
constexpr VeryLargeEnum VeryLargeEnum_MAX = ENUM_LABEL_100;
constexpr int VeryLargeEnum_ARRAYSIZE = VeryLargeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VeryLargeEnum_descriptor();
template<typename T>
inline const std::string& VeryLargeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VeryLargeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VeryLargeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VeryLargeEnum_descriptor(), enum_t_value);
}
inline bool VeryLargeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VeryLargeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VeryLargeEnum>(
    VeryLargeEnum_descriptor(), name, value);
}
// ===================================================================

class TestAllTypes_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllTypes.NestedMessage) */ {
 public:
  inline TestAllTypes_NestedMessage() : TestAllTypes_NestedMessage(nullptr) {}
  ~TestAllTypes_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypes_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypes_NestedMessage(const TestAllTypes_NestedMessage& from);
  TestAllTypes_NestedMessage(TestAllTypes_NestedMessage&& from) noexcept
    : TestAllTypes_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestAllTypes_NestedMessage& operator=(const TestAllTypes_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypes_NestedMessage& operator=(TestAllTypes_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypes_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllTypes_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestAllTypes_NestedMessage*>(
               &_TestAllTypes_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestAllTypes_NestedMessage& a, TestAllTypes_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypes_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypes_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypes_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypes_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypes_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestAllTypes_NestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypes_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllTypes.NestedMessage";
  }
  protected:
  explicit TestAllTypes_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBbFieldNumber = 1,
  };
  // optional int32 bb = 1;
  bool has_bb() const;
  private:
  bool _internal_has_bb() const;
  public:
  void clear_bb();
  int32_t bb() const;
  void set_bb(int32_t value);
  private:
  int32_t _internal_bb() const;
  void _internal_set_bb(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllTypes.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t bb_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypes_OptionalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllTypes.OptionalGroup) */ {
 public:
  inline TestAllTypes_OptionalGroup() : TestAllTypes_OptionalGroup(nullptr) {}
  ~TestAllTypes_OptionalGroup() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypes_OptionalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypes_OptionalGroup(const TestAllTypes_OptionalGroup& from);
  TestAllTypes_OptionalGroup(TestAllTypes_OptionalGroup&& from) noexcept
    : TestAllTypes_OptionalGroup() {
    *this = ::std::move(from);
  }

  inline TestAllTypes_OptionalGroup& operator=(const TestAllTypes_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypes_OptionalGroup& operator=(TestAllTypes_OptionalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypes_OptionalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllTypes_OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const TestAllTypes_OptionalGroup*>(
               &_TestAllTypes_OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestAllTypes_OptionalGroup& a, TestAllTypes_OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypes_OptionalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypes_OptionalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypes_OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypes_OptionalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypes_OptionalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestAllTypes_OptionalGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypes_OptionalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllTypes.OptionalGroup";
  }
  protected:
  explicit TestAllTypes_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 17,
  };
  // optional int32 a = 17;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllTypes.OptionalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypes_RepeatedGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllTypes.RepeatedGroup) */ {
 public:
  inline TestAllTypes_RepeatedGroup() : TestAllTypes_RepeatedGroup(nullptr) {}
  ~TestAllTypes_RepeatedGroup() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypes_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypes_RepeatedGroup(const TestAllTypes_RepeatedGroup& from);
  TestAllTypes_RepeatedGroup(TestAllTypes_RepeatedGroup&& from) noexcept
    : TestAllTypes_RepeatedGroup() {
    *this = ::std::move(from);
  }

  inline TestAllTypes_RepeatedGroup& operator=(const TestAllTypes_RepeatedGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypes_RepeatedGroup& operator=(TestAllTypes_RepeatedGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypes_RepeatedGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllTypes_RepeatedGroup* internal_default_instance() {
    return reinterpret_cast<const TestAllTypes_RepeatedGroup*>(
               &_TestAllTypes_RepeatedGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestAllTypes_RepeatedGroup& a, TestAllTypes_RepeatedGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypes_RepeatedGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypes_RepeatedGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypes_RepeatedGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypes_RepeatedGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypes_RepeatedGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestAllTypes_RepeatedGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypes_RepeatedGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllTypes.RepeatedGroup";
  }
  protected:
  explicit TestAllTypes_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 47,
  };
  // optional int32 a = 47;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllTypes.RepeatedGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllTypes) */ {
 public:
  inline TestAllTypes() : TestAllTypes(nullptr) {}
  ~TestAllTypes() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypes(const TestAllTypes& from);
  TestAllTypes(TestAllTypes&& from) noexcept
    : TestAllTypes() {
    *this = ::std::move(from);
  }

  inline TestAllTypes& operator=(const TestAllTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypes& operator=(TestAllTypes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypes& default_instance() {
    return *internal_default_instance();
  }
  enum OneofFieldCase {
    kOneofUint32 = 111,
    kOneofNestedMessage = 112,
    kOneofString = 113,
    kOneofBytes = 114,
    ONEOF_FIELD_NOT_SET = 0,
  };

  static inline const TestAllTypes* internal_default_instance() {
    return reinterpret_cast<const TestAllTypes*>(
               &_TestAllTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestAllTypes& a, TestAllTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestAllTypes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllTypes";
  }
  protected:
  explicit TestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestAllTypes_NestedMessage NestedMessage;
  typedef TestAllTypes_OptionalGroup OptionalGroup;
  typedef TestAllTypes_RepeatedGroup RepeatedGroup;

  typedef TestAllTypes_NestedEnum NestedEnum;
  static constexpr NestedEnum FOO =
    TestAllTypes_NestedEnum_FOO;
  static constexpr NestedEnum BAR =
    TestAllTypes_NestedEnum_BAR;
  static constexpr NestedEnum BAZ =
    TestAllTypes_NestedEnum_BAZ;
  static constexpr NestedEnum NEG =
    TestAllTypes_NestedEnum_NEG;
  static inline bool NestedEnum_IsValid(int value) {
    return TestAllTypes_NestedEnum_IsValid(value);
  }
  static constexpr NestedEnum NestedEnum_MIN =
    TestAllTypes_NestedEnum_NestedEnum_MIN;
  static constexpr NestedEnum NestedEnum_MAX =
    TestAllTypes_NestedEnum_NestedEnum_MAX;
  static constexpr int NestedEnum_ARRAYSIZE =
    TestAllTypes_NestedEnum_NestedEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NestedEnum_descriptor() {
    return TestAllTypes_NestedEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& NestedEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NestedEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NestedEnum_Name.");
    return TestAllTypes_NestedEnum_Name(enum_t_value);
  }
  static inline bool NestedEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NestedEnum* value) {
    return TestAllTypes_NestedEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 31,
    kRepeatedInt64FieldNumber = 32,
    kRepeatedUint32FieldNumber = 33,
    kRepeatedUint64FieldNumber = 34,
    kRepeatedSint32FieldNumber = 35,
    kRepeatedSint64FieldNumber = 36,
    kRepeatedFixed32FieldNumber = 37,
    kRepeatedFixed64FieldNumber = 38,
    kRepeatedSfixed32FieldNumber = 39,
    kRepeatedSfixed64FieldNumber = 40,
    kRepeatedFloatFieldNumber = 41,
    kRepeatedDoubleFieldNumber = 42,
    kRepeatedBoolFieldNumber = 43,
    kRepeatedStringFieldNumber = 44,
    kRepeatedBytesFieldNumber = 45,
    kRepeatedgroupFieldNumber = 46,
    kRepeatedNestedMessageFieldNumber = 48,
    kRepeatedForeignMessageFieldNumber = 49,
    kRepeatedImportMessageFieldNumber = 50,
    kRepeatedNestedEnumFieldNumber = 51,
    kRepeatedForeignEnumFieldNumber = 52,
    kRepeatedImportEnumFieldNumber = 53,
    kRepeatedStringPieceFieldNumber = 54,
    kRepeatedCordFieldNumber = 55,
    kRepeatedLazyMessageFieldNumber = 57,
    kOptionalStringFieldNumber = 14,
    kOptionalBytesFieldNumber = 15,
    kOptionalStringPieceFieldNumber = 24,
    kOptionalCordFieldNumber = 25,
    kDefaultStringFieldNumber = 74,
    kDefaultBytesFieldNumber = 75,
    kDefaultStringPieceFieldNumber = 84,
    kDefaultCordFieldNumber = 85,
    kOptionalgroupFieldNumber = 16,
    kOptionalNestedMessageFieldNumber = 18,
    kOptionalForeignMessageFieldNumber = 19,
    kOptionalImportMessageFieldNumber = 20,
    kOptionalPublicImportMessageFieldNumber = 26,
    kOptionalLazyMessageFieldNumber = 27,
    kOptionalInt64FieldNumber = 2,
    kOptionalInt32FieldNumber = 1,
    kOptionalUint32FieldNumber = 3,
    kOptionalUint64FieldNumber = 4,
    kOptionalSint64FieldNumber = 6,
    kOptionalSint32FieldNumber = 5,
    kOptionalFixed32FieldNumber = 7,
    kOptionalFixed64FieldNumber = 8,
    kOptionalSfixed64FieldNumber = 10,
    kOptionalSfixed32FieldNumber = 9,
    kOptionalFloatFieldNumber = 11,
    kOptionalDoubleFieldNumber = 12,
    kOptionalBoolFieldNumber = 13,
    kDefaultImportEnumFieldNumber = 83,
    kOptionalNestedEnumFieldNumber = 21,
    kOptionalForeignEnumFieldNumber = 22,
    kOptionalImportEnumFieldNumber = 23,
    kDefaultInt32FieldNumber = 61,
    kDefaultInt64FieldNumber = 62,
    kDefaultUint64FieldNumber = 64,
    kDefaultUint32FieldNumber = 63,
    kDefaultSint32FieldNumber = 65,
    kDefaultSint64FieldNumber = 66,
    kDefaultFixed64FieldNumber = 68,
    kDefaultFixed32FieldNumber = 67,
    kDefaultSfixed32FieldNumber = 69,
    kDefaultSfixed64FieldNumber = 70,
    kDefaultDoubleFieldNumber = 72,
    kDefaultFloatFieldNumber = 71,
    kDefaultBoolFieldNumber = 73,
    kDefaultNestedEnumFieldNumber = 81,
    kDefaultForeignEnumFieldNumber = 82,
    kOneofUint32FieldNumber = 111,
    kOneofNestedMessageFieldNumber = 112,
    kOneofStringFieldNumber = 113,
    kOneofBytesFieldNumber = 114,
  };
  // repeated int32 repeated_int32 = 31;
  int repeated_int32_size() const;
  private:
  int _internal_repeated_int32_size() const;
  public:
  void clear_repeated_int32();
  private:
  int32_t _internal_repeated_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_int32() const;
  void _internal_add_repeated_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_int32();
  public:
  int32_t repeated_int32(int index) const;
  void set_repeated_int32(int index, int32_t value);
  void add_repeated_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_int32();

  // repeated int64 repeated_int64 = 32;
  int repeated_int64_size() const;
  private:
  int _internal_repeated_int64_size() const;
  public:
  void clear_repeated_int64();
  private:
  int64_t _internal_repeated_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_repeated_int64() const;
  void _internal_add_repeated_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_repeated_int64();
  public:
  int64_t repeated_int64(int index) const;
  void set_repeated_int64(int index, int64_t value);
  void add_repeated_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      repeated_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_repeated_int64();

  // repeated uint32 repeated_uint32 = 33;
  int repeated_uint32_size() const;
  private:
  int _internal_repeated_uint32_size() const;
  public:
  void clear_repeated_uint32();
  private:
  uint32_t _internal_repeated_uint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_repeated_uint32() const;
  void _internal_add_repeated_uint32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_repeated_uint32();
  public:
  uint32_t repeated_uint32(int index) const;
  void set_repeated_uint32(int index, uint32_t value);
  void add_repeated_uint32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      repeated_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_repeated_uint32();

  // repeated uint64 repeated_uint64 = 34;
  int repeated_uint64_size() const;
  private:
  int _internal_repeated_uint64_size() const;
  public:
  void clear_repeated_uint64();
  private:
  uint64_t _internal_repeated_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_repeated_uint64() const;
  void _internal_add_repeated_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_repeated_uint64();
  public:
  uint64_t repeated_uint64(int index) const;
  void set_repeated_uint64(int index, uint64_t value);
  void add_repeated_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      repeated_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_repeated_uint64();

  // repeated sint32 repeated_sint32 = 35;
  int repeated_sint32_size() const;
  private:
  int _internal_repeated_sint32_size() const;
  public:
  void clear_repeated_sint32();
  private:
  int32_t _internal_repeated_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_sint32() const;
  void _internal_add_repeated_sint32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_sint32();
  public:
  int32_t repeated_sint32(int index) const;
  void set_repeated_sint32(int index, int32_t value);
  void add_repeated_sint32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_sint32();

  // repeated sint64 repeated_sint64 = 36;
  int repeated_sint64_size() const;
  private:
  int _internal_repeated_sint64_size() const;
  public:
  void clear_repeated_sint64();
  private:
  int64_t _internal_repeated_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_repeated_sint64() const;
  void _internal_add_repeated_sint64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_repeated_sint64();
  public:
  int64_t repeated_sint64(int index) const;
  void set_repeated_sint64(int index, int64_t value);
  void add_repeated_sint64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      repeated_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_repeated_sint64();

  // repeated fixed32 repeated_fixed32 = 37;
  int repeated_fixed32_size() const;
  private:
  int _internal_repeated_fixed32_size() const;
  public:
  void clear_repeated_fixed32();
  private:
  uint32_t _internal_repeated_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_repeated_fixed32() const;
  void _internal_add_repeated_fixed32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_repeated_fixed32();
  public:
  uint32_t repeated_fixed32(int index) const;
  void set_repeated_fixed32(int index, uint32_t value);
  void add_repeated_fixed32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      repeated_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_repeated_fixed32();

  // repeated fixed64 repeated_fixed64 = 38;
  int repeated_fixed64_size() const;
  private:
  int _internal_repeated_fixed64_size() const;
  public:
  void clear_repeated_fixed64();
  private:
  uint64_t _internal_repeated_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_repeated_fixed64() const;
  void _internal_add_repeated_fixed64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_repeated_fixed64();
  public:
  uint64_t repeated_fixed64(int index) const;
  void set_repeated_fixed64(int index, uint64_t value);
  void add_repeated_fixed64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      repeated_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_repeated_fixed64();

  // repeated sfixed32 repeated_sfixed32 = 39;
  int repeated_sfixed32_size() const;
  private:
  int _internal_repeated_sfixed32_size() const;
  public:
  void clear_repeated_sfixed32();
  private:
  int32_t _internal_repeated_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_sfixed32() const;
  void _internal_add_repeated_sfixed32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_sfixed32();
  public:
  int32_t repeated_sfixed32(int index) const;
  void set_repeated_sfixed32(int index, int32_t value);
  void add_repeated_sfixed32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_sfixed32();

  // repeated sfixed64 repeated_sfixed64 = 40;
  int repeated_sfixed64_size() const;
  private:
  int _internal_repeated_sfixed64_size() const;
  public:
  void clear_repeated_sfixed64();
  private:
  int64_t _internal_repeated_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_repeated_sfixed64() const;
  void _internal_add_repeated_sfixed64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_repeated_sfixed64();
  public:
  int64_t repeated_sfixed64(int index) const;
  void set_repeated_sfixed64(int index, int64_t value);
  void add_repeated_sfixed64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      repeated_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_repeated_sfixed64();

  // repeated float repeated_float = 41;
  int repeated_float_size() const;
  private:
  int _internal_repeated_float_size() const;
  public:
  void clear_repeated_float();
  private:
  float _internal_repeated_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_repeated_float() const;
  void _internal_add_repeated_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_repeated_float();
  public:
  float repeated_float(int index) const;
  void set_repeated_float(int index, float value);
  void add_repeated_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      repeated_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_repeated_float();

  // repeated double repeated_double = 42;
  int repeated_double_size() const;
  private:
  int _internal_repeated_double_size() const;
  public:
  void clear_repeated_double();
  private:
  double _internal_repeated_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_repeated_double() const;
  void _internal_add_repeated_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_repeated_double();
  public:
  double repeated_double(int index) const;
  void set_repeated_double(int index, double value);
  void add_repeated_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      repeated_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_repeated_double();

  // repeated bool repeated_bool = 43;
  int repeated_bool_size() const;
  private:
  int _internal_repeated_bool_size() const;
  public:
  void clear_repeated_bool();
  private:
  bool _internal_repeated_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_repeated_bool() const;
  void _internal_add_repeated_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_repeated_bool();
  public:
  bool repeated_bool(int index) const;
  void set_repeated_bool(int index, bool value);
  void add_repeated_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      repeated_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_repeated_bool();

  // repeated string repeated_string = 44;
  int repeated_string_size() const;
  private:
  int _internal_repeated_string_size() const;
  public:
  void clear_repeated_string();
  const std::string& repeated_string(int index) const;
  std::string* mutable_repeated_string(int index);
  void set_repeated_string(int index, const std::string& value);
  void set_repeated_string(int index, std::string&& value);
  void set_repeated_string(int index, const char* value);
  void set_repeated_string(int index, const char* value, size_t size);
  std::string* add_repeated_string();
  void add_repeated_string(const std::string& value);
  void add_repeated_string(std::string&& value);
  void add_repeated_string(const char* value);
  void add_repeated_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string();
  private:
  const std::string& _internal_repeated_string(int index) const;
  std::string* _internal_add_repeated_string();
  public:

  // repeated bytes repeated_bytes = 45;
  int repeated_bytes_size() const;
  private:
  int _internal_repeated_bytes_size() const;
  public:
  void clear_repeated_bytes();
  const std::string& repeated_bytes(int index) const;
  std::string* mutable_repeated_bytes(int index);
  void set_repeated_bytes(int index, const std::string& value);
  void set_repeated_bytes(int index, std::string&& value);
  void set_repeated_bytes(int index, const char* value);
  void set_repeated_bytes(int index, const void* value, size_t size);
  std::string* add_repeated_bytes();
  void add_repeated_bytes(const std::string& value);
  void add_repeated_bytes(std::string&& value);
  void add_repeated_bytes(const char* value);
  void add_repeated_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_bytes();
  private:
  const std::string& _internal_repeated_bytes(int index) const;
  std::string* _internal_add_repeated_bytes();
  public:

  // repeated group RepeatedGroup = 46 { ... };
  int repeatedgroup_size() const;
  private:
  int _internal_repeatedgroup_size() const;
  public:
  void clear_repeatedgroup();
  ::protobuf_unittest::TestAllTypes_RepeatedGroup* mutable_repeatedgroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_RepeatedGroup >*
      mutable_repeatedgroup();
  private:
  const ::protobuf_unittest::TestAllTypes_RepeatedGroup& _internal_repeatedgroup(int index) const;
  ::protobuf_unittest::TestAllTypes_RepeatedGroup* _internal_add_repeatedgroup();
  public:
  const ::protobuf_unittest::TestAllTypes_RepeatedGroup& repeatedgroup(int index) const;
  ::protobuf_unittest::TestAllTypes_RepeatedGroup* add_repeatedgroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_RepeatedGroup >&
      repeatedgroup() const;

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
  int repeated_nested_message_size() const;
  private:
  int _internal_repeated_nested_message_size() const;
  public:
  void clear_repeated_nested_message();
  ::protobuf_unittest::TestAllTypes_NestedMessage* mutable_repeated_nested_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage >*
      mutable_repeated_nested_message();
  private:
  const ::protobuf_unittest::TestAllTypes_NestedMessage& _internal_repeated_nested_message(int index) const;
  ::protobuf_unittest::TestAllTypes_NestedMessage* _internal_add_repeated_nested_message();
  public:
  const ::protobuf_unittest::TestAllTypes_NestedMessage& repeated_nested_message(int index) const;
  ::protobuf_unittest::TestAllTypes_NestedMessage* add_repeated_nested_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage >&
      repeated_nested_message() const;

  // repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
  int repeated_foreign_message_size() const;
  private:
  int _internal_repeated_foreign_message_size() const;
  public:
  void clear_repeated_foreign_message();
  ::protobuf_unittest::ForeignMessage* mutable_repeated_foreign_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >*
      mutable_repeated_foreign_message();
  private:
  const ::protobuf_unittest::ForeignMessage& _internal_repeated_foreign_message(int index) const;
  ::protobuf_unittest::ForeignMessage* _internal_add_repeated_foreign_message();
  public:
  const ::protobuf_unittest::ForeignMessage& repeated_foreign_message(int index) const;
  ::protobuf_unittest::ForeignMessage* add_repeated_foreign_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >&
      repeated_foreign_message() const;

  // repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
  int repeated_import_message_size() const;
  private:
  int _internal_repeated_import_message_size() const;
  public:
  void clear_repeated_import_message();
  ::protobuf_unittest_import::ImportMessage* mutable_repeated_import_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessage >*
      mutable_repeated_import_message();
  private:
  const ::protobuf_unittest_import::ImportMessage& _internal_repeated_import_message(int index) const;
  ::protobuf_unittest_import::ImportMessage* _internal_add_repeated_import_message();
  public:
  const ::protobuf_unittest_import::ImportMessage& repeated_import_message(int index) const;
  ::protobuf_unittest_import::ImportMessage* add_repeated_import_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessage >&
      repeated_import_message() const;

  // repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
  int repeated_nested_enum_size() const;
  private:
  int _internal_repeated_nested_enum_size() const;
  public:
  void clear_repeated_nested_enum();
  private:
  ::protobuf_unittest::TestAllTypes_NestedEnum _internal_repeated_nested_enum(int index) const;
  void _internal_add_repeated_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_repeated_nested_enum();
  public:
  ::protobuf_unittest::TestAllTypes_NestedEnum repeated_nested_enum(int index) const;
  void set_repeated_nested_enum(int index, ::protobuf_unittest::TestAllTypes_NestedEnum value);
  void add_repeated_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_nested_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_nested_enum();

  // repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
  int repeated_foreign_enum_size() const;
  private:
  int _internal_repeated_foreign_enum_size() const;
  public:
  void clear_repeated_foreign_enum();
  private:
  ::protobuf_unittest::ForeignEnum _internal_repeated_foreign_enum(int index) const;
  void _internal_add_repeated_foreign_enum(::protobuf_unittest::ForeignEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_repeated_foreign_enum();
  public:
  ::protobuf_unittest::ForeignEnum repeated_foreign_enum(int index) const;
  void set_repeated_foreign_enum(int index, ::protobuf_unittest::ForeignEnum value);
  void add_repeated_foreign_enum(::protobuf_unittest::ForeignEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_foreign_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_foreign_enum();

  // repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
  int repeated_import_enum_size() const;
  private:
  int _internal_repeated_import_enum_size() const;
  public:
  void clear_repeated_import_enum();
  private:
  ::protobuf_unittest_import::ImportEnum _internal_repeated_import_enum(int index) const;
  void _internal_add_repeated_import_enum(::protobuf_unittest_import::ImportEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_repeated_import_enum();
  public:
  ::protobuf_unittest_import::ImportEnum repeated_import_enum(int index) const;
  void set_repeated_import_enum(int index, ::protobuf_unittest_import::ImportEnum value);
  void add_repeated_import_enum(::protobuf_unittest_import::ImportEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_import_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_import_enum();

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  int repeated_string_piece_size() const;
  private:
  int _internal_repeated_string_piece_size() const;
  public:
  void clear_repeated_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& repeated_string_piece(int index) const;
  std::string* mutable_repeated_string_piece(int index);
  void set_repeated_string_piece(int index, const std::string& value);
  void set_repeated_string_piece(int index, std::string&& value);
  void set_repeated_string_piece(int index, const char* value);
  void set_repeated_string_piece(int index, const char* value, size_t size);
  std::string* add_repeated_string_piece();
  void add_repeated_string_piece(const std::string& value);
  void add_repeated_string_piece(std::string&& value);
  void add_repeated_string_piece(const char* value);
  void add_repeated_string_piece(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string_piece() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string_piece();
  private:
  const std::string& _internal_repeated_string_piece(int index) const;
  std::string* _internal_add_repeated_string_piece();
  public:
 public:

  // repeated string repeated_cord = 55 [ctype = CORD];
  int repeated_cord_size() const;
  private:
  int _internal_repeated_cord_size() const;
  public:
  void clear_repeated_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& repeated_cord(int index) const;
  std::string* mutable_repeated_cord(int index);
  void set_repeated_cord(int index, const std::string& value);
  void set_repeated_cord(int index, std::string&& value);
  void set_repeated_cord(int index, const char* value);
  void set_repeated_cord(int index, const char* value, size_t size);
  std::string* add_repeated_cord();
  void add_repeated_cord(const std::string& value);
  void add_repeated_cord(std::string&& value);
  void add_repeated_cord(const char* value);
  void add_repeated_cord(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_cord() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_cord();
  private:
  const std::string& _internal_repeated_cord(int index) const;
  std::string* _internal_add_repeated_cord();
  public:
 public:

  // repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
  int repeated_lazy_message_size() const;
  private:
  int _internal_repeated_lazy_message_size() const;
  public:
  void clear_repeated_lazy_message();
  ::protobuf_unittest::TestAllTypes_NestedMessage* mutable_repeated_lazy_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage >*
      mutable_repeated_lazy_message();
  private:
  const ::protobuf_unittest::TestAllTypes_NestedMessage& _internal_repeated_lazy_message(int index) const;
  ::protobuf_unittest::TestAllTypes_NestedMessage* _internal_add_repeated_lazy_message();
  public:
  const ::protobuf_unittest::TestAllTypes_NestedMessage& repeated_lazy_message(int index) const;
  ::protobuf_unittest::TestAllTypes_NestedMessage* add_repeated_lazy_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage >&
      repeated_lazy_message() const;

  // optional string optional_string = 14;
  bool has_optional_string() const;
  private:
  bool _internal_has_optional_string() const;
  public:
  void clear_optional_string();
  const std::string& optional_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_string();
  PROTOBUF_NODISCARD std::string* release_optional_string();
  void set_allocated_optional_string(std::string* optional_string);
  private:
  const std::string& _internal_optional_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_string(const std::string& value);
  std::string* _internal_mutable_optional_string();
  public:

  // optional bytes optional_bytes = 15;
  bool has_optional_bytes() const;
  private:
  bool _internal_has_optional_bytes() const;
  public:
  void clear_optional_bytes();
  const std::string& optional_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_bytes();
  PROTOBUF_NODISCARD std::string* release_optional_bytes();
  void set_allocated_optional_bytes(std::string* optional_bytes);
  private:
  const std::string& _internal_optional_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_bytes(const std::string& value);
  std::string* _internal_mutable_optional_bytes();
  public:

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  bool has_optional_string_piece() const;
  private:
  bool _internal_has_optional_string_piece() const;
  public:
  void clear_optional_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& optional_string_piece() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_string_piece(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_string_piece();
  PROTOBUF_NODISCARD std::string* release_optional_string_piece();
  void set_allocated_optional_string_piece(std::string* optional_string_piece);
  private:
  const std::string& _internal_optional_string_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_string_piece(const std::string& value);
  std::string* _internal_mutable_optional_string_piece();
  public:
 public:

  // optional string optional_cord = 25 [ctype = CORD];
  bool has_optional_cord() const;
  private:
  bool _internal_has_optional_cord() const;
  public:
  void clear_optional_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& optional_cord() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_cord(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_cord();
  PROTOBUF_NODISCARD std::string* release_optional_cord();
  void set_allocated_optional_cord(std::string* optional_cord);
  private:
  const std::string& _internal_optional_cord() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_cord(const std::string& value);
  std::string* _internal_mutable_optional_cord();
  public:
 public:

  // optional string default_string = 74 [default = "hello"];
  bool has_default_string() const;
  private:
  bool _internal_has_default_string() const;
  public:
  void clear_default_string();
  const std::string& default_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_string();
  PROTOBUF_NODISCARD std::string* release_default_string();
  void set_allocated_default_string(std::string* default_string);
  private:
  const std::string& _internal_default_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_string(const std::string& value);
  std::string* _internal_mutable_default_string();
  public:

  // optional bytes default_bytes = 75 [default = "world"];
  bool has_default_bytes() const;
  private:
  bool _internal_has_default_bytes() const;
  public:
  void clear_default_bytes();
  const std::string& default_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_bytes();
  PROTOBUF_NODISCARD std::string* release_default_bytes();
  void set_allocated_default_bytes(std::string* default_bytes);
  private:
  const std::string& _internal_default_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_bytes(const std::string& value);
  std::string* _internal_mutable_default_bytes();
  public:

  // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
  bool has_default_string_piece() const;
  private:
  bool _internal_has_default_string_piece() const;
  public:
  void clear_default_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& default_string_piece() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_string_piece(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_string_piece();
  PROTOBUF_NODISCARD std::string* release_default_string_piece();
  void set_allocated_default_string_piece(std::string* default_string_piece);
  private:
  const std::string& _internal_default_string_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_string_piece(const std::string& value);
  std::string* _internal_mutable_default_string_piece();
  public:
 public:

  // optional string default_cord = 85 [default = "123", ctype = CORD];
  bool has_default_cord() const;
  private:
  bool _internal_has_default_cord() const;
  public:
  void clear_default_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& default_cord() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_cord(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_cord();
  PROTOBUF_NODISCARD std::string* release_default_cord();
  void set_allocated_default_cord(std::string* default_cord);
  private:
  const std::string& _internal_default_cord() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_cord(const std::string& value);
  std::string* _internal_mutable_default_cord();
  public:
 public:

  // optional group OptionalGroup = 16 { ... };
  bool has_optionalgroup() const;
  private:
  bool _internal_has_optionalgroup() const;
  public:
  void clear_optionalgroup();
  const ::protobuf_unittest::TestAllTypes_OptionalGroup& optionalgroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes_OptionalGroup* release_optionalgroup();
  ::protobuf_unittest::TestAllTypes_OptionalGroup* mutable_optionalgroup();
  void set_allocated_optionalgroup(::protobuf_unittest::TestAllTypes_OptionalGroup* optionalgroup);
  private:
  const ::protobuf_unittest::TestAllTypes_OptionalGroup& _internal_optionalgroup() const;
  ::protobuf_unittest::TestAllTypes_OptionalGroup* _internal_mutable_optionalgroup();
  public:
  void unsafe_arena_set_allocated_optionalgroup(
      ::protobuf_unittest::TestAllTypes_OptionalGroup* optionalgroup);
  ::protobuf_unittest::TestAllTypes_OptionalGroup* unsafe_arena_release_optionalgroup();

  // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
  bool has_optional_nested_message() const;
  private:
  bool _internal_has_optional_nested_message() const;
  public:
  void clear_optional_nested_message();
  const ::protobuf_unittest::TestAllTypes_NestedMessage& optional_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes_NestedMessage* release_optional_nested_message();
  ::protobuf_unittest::TestAllTypes_NestedMessage* mutable_optional_nested_message();
  void set_allocated_optional_nested_message(::protobuf_unittest::TestAllTypes_NestedMessage* optional_nested_message);
  private:
  const ::protobuf_unittest::TestAllTypes_NestedMessage& _internal_optional_nested_message() const;
  ::protobuf_unittest::TestAllTypes_NestedMessage* _internal_mutable_optional_nested_message();
  public:
  void unsafe_arena_set_allocated_optional_nested_message(
      ::protobuf_unittest::TestAllTypes_NestedMessage* optional_nested_message);
  ::protobuf_unittest::TestAllTypes_NestedMessage* unsafe_arena_release_optional_nested_message();

  // optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
  bool has_optional_foreign_message() const;
  private:
  bool _internal_has_optional_foreign_message() const;
  public:
  void clear_optional_foreign_message();
  const ::protobuf_unittest::ForeignMessage& optional_foreign_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::ForeignMessage* release_optional_foreign_message();
  ::protobuf_unittest::ForeignMessage* mutable_optional_foreign_message();
  void set_allocated_optional_foreign_message(::protobuf_unittest::ForeignMessage* optional_foreign_message);
  private:
  const ::protobuf_unittest::ForeignMessage& _internal_optional_foreign_message() const;
  ::protobuf_unittest::ForeignMessage* _internal_mutable_optional_foreign_message();
  public:
  void unsafe_arena_set_allocated_optional_foreign_message(
      ::protobuf_unittest::ForeignMessage* optional_foreign_message);
  ::protobuf_unittest::ForeignMessage* unsafe_arena_release_optional_foreign_message();

  // optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
  bool has_optional_import_message() const;
  private:
  bool _internal_has_optional_import_message() const;
  public:
  void clear_optional_import_message();
  const ::protobuf_unittest_import::ImportMessage& optional_import_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest_import::ImportMessage* release_optional_import_message();
  ::protobuf_unittest_import::ImportMessage* mutable_optional_import_message();
  void set_allocated_optional_import_message(::protobuf_unittest_import::ImportMessage* optional_import_message);
  private:
  const ::protobuf_unittest_import::ImportMessage& _internal_optional_import_message() const;
  ::protobuf_unittest_import::ImportMessage* _internal_mutable_optional_import_message();
  public:
  void unsafe_arena_set_allocated_optional_import_message(
      ::protobuf_unittest_import::ImportMessage* optional_import_message);
  ::protobuf_unittest_import::ImportMessage* unsafe_arena_release_optional_import_message();

  // optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
  bool has_optional_public_import_message() const;
  private:
  bool _internal_has_optional_public_import_message() const;
  public:
  void clear_optional_public_import_message();
  const ::protobuf_unittest_import::PublicImportMessage& optional_public_import_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest_import::PublicImportMessage* release_optional_public_import_message();
  ::protobuf_unittest_import::PublicImportMessage* mutable_optional_public_import_message();
  void set_allocated_optional_public_import_message(::protobuf_unittest_import::PublicImportMessage* optional_public_import_message);
  private:
  const ::protobuf_unittest_import::PublicImportMessage& _internal_optional_public_import_message() const;
  ::protobuf_unittest_import::PublicImportMessage* _internal_mutable_optional_public_import_message();
  public:
  void unsafe_arena_set_allocated_optional_public_import_message(
      ::protobuf_unittest_import::PublicImportMessage* optional_public_import_message);
  ::protobuf_unittest_import::PublicImportMessage* unsafe_arena_release_optional_public_import_message();

  // optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
  bool has_optional_lazy_message() const;
  private:
  bool _internal_has_optional_lazy_message() const;
  public:
  void clear_optional_lazy_message();
  const ::protobuf_unittest::TestAllTypes_NestedMessage& optional_lazy_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes_NestedMessage* release_optional_lazy_message();
  ::protobuf_unittest::TestAllTypes_NestedMessage* mutable_optional_lazy_message();
  void set_allocated_optional_lazy_message(::protobuf_unittest::TestAllTypes_NestedMessage* optional_lazy_message);
  private:
  const ::protobuf_unittest::TestAllTypes_NestedMessage& _internal_optional_lazy_message() const;
  ::protobuf_unittest::TestAllTypes_NestedMessage* _internal_mutable_optional_lazy_message();
  public:
  void unsafe_arena_set_allocated_optional_lazy_message(
      ::protobuf_unittest::TestAllTypes_NestedMessage* optional_lazy_message);
  ::protobuf_unittest::TestAllTypes_NestedMessage* unsafe_arena_release_optional_lazy_message();

  // optional int64 optional_int64 = 2;
  bool has_optional_int64() const;
  private:
  bool _internal_has_optional_int64() const;
  public:
  void clear_optional_int64();
  int64_t optional_int64() const;
  void set_optional_int64(int64_t value);
  private:
  int64_t _internal_optional_int64() const;
  void _internal_set_optional_int64(int64_t value);
  public:

  // optional int32 optional_int32 = 1;
  bool has_optional_int32() const;
  private:
  bool _internal_has_optional_int32() const;
  public:
  void clear_optional_int32();
  int32_t optional_int32() const;
  void set_optional_int32(int32_t value);
  private:
  int32_t _internal_optional_int32() const;
  void _internal_set_optional_int32(int32_t value);
  public:

  // optional uint32 optional_uint32 = 3;
  bool has_optional_uint32() const;
  private:
  bool _internal_has_optional_uint32() const;
  public:
  void clear_optional_uint32();
  uint32_t optional_uint32() const;
  void set_optional_uint32(uint32_t value);
  private:
  uint32_t _internal_optional_uint32() const;
  void _internal_set_optional_uint32(uint32_t value);
  public:

  // optional uint64 optional_uint64 = 4;
  bool has_optional_uint64() const;
  private:
  bool _internal_has_optional_uint64() const;
  public:
  void clear_optional_uint64();
  uint64_t optional_uint64() const;
  void set_optional_uint64(uint64_t value);
  private:
  uint64_t _internal_optional_uint64() const;
  void _internal_set_optional_uint64(uint64_t value);
  public:

  // optional sint64 optional_sint64 = 6;
  bool has_optional_sint64() const;
  private:
  bool _internal_has_optional_sint64() const;
  public:
  void clear_optional_sint64();
  int64_t optional_sint64() const;
  void set_optional_sint64(int64_t value);
  private:
  int64_t _internal_optional_sint64() const;
  void _internal_set_optional_sint64(int64_t value);
  public:

  // optional sint32 optional_sint32 = 5;
  bool has_optional_sint32() const;
  private:
  bool _internal_has_optional_sint32() const;
  public:
  void clear_optional_sint32();
  int32_t optional_sint32() const;
  void set_optional_sint32(int32_t value);
  private:
  int32_t _internal_optional_sint32() const;
  void _internal_set_optional_sint32(int32_t value);
  public:

  // optional fixed32 optional_fixed32 = 7;
  bool has_optional_fixed32() const;
  private:
  bool _internal_has_optional_fixed32() const;
  public:
  void clear_optional_fixed32();
  uint32_t optional_fixed32() const;
  void set_optional_fixed32(uint32_t value);
  private:
  uint32_t _internal_optional_fixed32() const;
  void _internal_set_optional_fixed32(uint32_t value);
  public:

  // optional fixed64 optional_fixed64 = 8;
  bool has_optional_fixed64() const;
  private:
  bool _internal_has_optional_fixed64() const;
  public:
  void clear_optional_fixed64();
  uint64_t optional_fixed64() const;
  void set_optional_fixed64(uint64_t value);
  private:
  uint64_t _internal_optional_fixed64() const;
  void _internal_set_optional_fixed64(uint64_t value);
  public:

  // optional sfixed64 optional_sfixed64 = 10;
  bool has_optional_sfixed64() const;
  private:
  bool _internal_has_optional_sfixed64() const;
  public:
  void clear_optional_sfixed64();
  int64_t optional_sfixed64() const;
  void set_optional_sfixed64(int64_t value);
  private:
  int64_t _internal_optional_sfixed64() const;
  void _internal_set_optional_sfixed64(int64_t value);
  public:

  // optional sfixed32 optional_sfixed32 = 9;
  bool has_optional_sfixed32() const;
  private:
  bool _internal_has_optional_sfixed32() const;
  public:
  void clear_optional_sfixed32();
  int32_t optional_sfixed32() const;
  void set_optional_sfixed32(int32_t value);
  private:
  int32_t _internal_optional_sfixed32() const;
  void _internal_set_optional_sfixed32(int32_t value);
  public:

  // optional float optional_float = 11;
  bool has_optional_float() const;
  private:
  bool _internal_has_optional_float() const;
  public:
  void clear_optional_float();
  float optional_float() const;
  void set_optional_float(float value);
  private:
  float _internal_optional_float() const;
  void _internal_set_optional_float(float value);
  public:

  // optional double optional_double = 12;
  bool has_optional_double() const;
  private:
  bool _internal_has_optional_double() const;
  public:
  void clear_optional_double();
  double optional_double() const;
  void set_optional_double(double value);
  private:
  double _internal_optional_double() const;
  void _internal_set_optional_double(double value);
  public:

  // optional bool optional_bool = 13;
  bool has_optional_bool() const;
  private:
  bool _internal_has_optional_bool() const;
  public:
  void clear_optional_bool();
  bool optional_bool() const;
  void set_optional_bool(bool value);
  private:
  bool _internal_optional_bool() const;
  void _internal_set_optional_bool(bool value);
  public:

  // optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
  bool has_default_import_enum() const;
  private:
  bool _internal_has_default_import_enum() const;
  public:
  void clear_default_import_enum();
  ::protobuf_unittest_import::ImportEnum default_import_enum() const;
  void set_default_import_enum(::protobuf_unittest_import::ImportEnum value);
  private:
  ::protobuf_unittest_import::ImportEnum _internal_default_import_enum() const;
  void _internal_set_default_import_enum(::protobuf_unittest_import::ImportEnum value);
  public:

  // optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
  bool has_optional_nested_enum() const;
  private:
  bool _internal_has_optional_nested_enum() const;
  public:
  void clear_optional_nested_enum();
  ::protobuf_unittest::TestAllTypes_NestedEnum optional_nested_enum() const;
  void set_optional_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value);
  private:
  ::protobuf_unittest::TestAllTypes_NestedEnum _internal_optional_nested_enum() const;
  void _internal_set_optional_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value);
  public:

  // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
  bool has_optional_foreign_enum() const;
  private:
  bool _internal_has_optional_foreign_enum() const;
  public:
  void clear_optional_foreign_enum();
  ::protobuf_unittest::ForeignEnum optional_foreign_enum() const;
  void set_optional_foreign_enum(::protobuf_unittest::ForeignEnum value);
  private:
  ::protobuf_unittest::ForeignEnum _internal_optional_foreign_enum() const;
  void _internal_set_optional_foreign_enum(::protobuf_unittest::ForeignEnum value);
  public:

  // optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
  bool has_optional_import_enum() const;
  private:
  bool _internal_has_optional_import_enum() const;
  public:
  void clear_optional_import_enum();
  ::protobuf_unittest_import::ImportEnum optional_import_enum() const;
  void set_optional_import_enum(::protobuf_unittest_import::ImportEnum value);
  private:
  ::protobuf_unittest_import::ImportEnum _internal_optional_import_enum() const;
  void _internal_set_optional_import_enum(::protobuf_unittest_import::ImportEnum value);
  public:

  // optional int32 default_int32 = 61 [default = 41];
  bool has_default_int32() const;
  private:
  bool _internal_has_default_int32() const;
  public:
  void clear_default_int32();
  int32_t default_int32() const;
  void set_default_int32(int32_t value);
  private:
  int32_t _internal_default_int32() const;
  void _internal_set_default_int32(int32_t value);
  public:

  // optional int64 default_int64 = 62 [default = 42];
  bool has_default_int64() const;
  private:
  bool _internal_has_default_int64() const;
  public:
  void clear_default_int64();
  int64_t default_int64() const;
  void set_default_int64(int64_t value);
  private:
  int64_t _internal_default_int64() const;
  void _internal_set_default_int64(int64_t value);
  public:

  // optional uint64 default_uint64 = 64 [default = 44];
  bool has_default_uint64() const;
  private:
  bool _internal_has_default_uint64() const;
  public:
  void clear_default_uint64();
  uint64_t default_uint64() const;
  void set_default_uint64(uint64_t value);
  private:
  uint64_t _internal_default_uint64() const;
  void _internal_set_default_uint64(uint64_t value);
  public:

  // optional uint32 default_uint32 = 63 [default = 43];
  bool has_default_uint32() const;
  private:
  bool _internal_has_default_uint32() const;
  public:
  void clear_default_uint32();
  uint32_t default_uint32() const;
  void set_default_uint32(uint32_t value);
  private:
  uint32_t _internal_default_uint32() const;
  void _internal_set_default_uint32(uint32_t value);
  public:

  // optional sint32 default_sint32 = 65 [default = -45];
  bool has_default_sint32() const;
  private:
  bool _internal_has_default_sint32() const;
  public:
  void clear_default_sint32();
  int32_t default_sint32() const;
  void set_default_sint32(int32_t value);
  private:
  int32_t _internal_default_sint32() const;
  void _internal_set_default_sint32(int32_t value);
  public:

  // optional sint64 default_sint64 = 66 [default = 46];
  bool has_default_sint64() const;
  private:
  bool _internal_has_default_sint64() const;
  public:
  void clear_default_sint64();
  int64_t default_sint64() const;
  void set_default_sint64(int64_t value);
  private:
  int64_t _internal_default_sint64() const;
  void _internal_set_default_sint64(int64_t value);
  public:

  // optional fixed64 default_fixed64 = 68 [default = 48];
  bool has_default_fixed64() const;
  private:
  bool _internal_has_default_fixed64() const;
  public:
  void clear_default_fixed64();
  uint64_t default_fixed64() const;
  void set_default_fixed64(uint64_t value);
  private:
  uint64_t _internal_default_fixed64() const;
  void _internal_set_default_fixed64(uint64_t value);
  public:

  // optional fixed32 default_fixed32 = 67 [default = 47];
  bool has_default_fixed32() const;
  private:
  bool _internal_has_default_fixed32() const;
  public:
  void clear_default_fixed32();
  uint32_t default_fixed32() const;
  void set_default_fixed32(uint32_t value);
  private:
  uint32_t _internal_default_fixed32() const;
  void _internal_set_default_fixed32(uint32_t value);
  public:

  // optional sfixed32 default_sfixed32 = 69 [default = 49];
  bool has_default_sfixed32() const;
  private:
  bool _internal_has_default_sfixed32() const;
  public:
  void clear_default_sfixed32();
  int32_t default_sfixed32() const;
  void set_default_sfixed32(int32_t value);
  private:
  int32_t _internal_default_sfixed32() const;
  void _internal_set_default_sfixed32(int32_t value);
  public:

  // optional sfixed64 default_sfixed64 = 70 [default = -50];
  bool has_default_sfixed64() const;
  private:
  bool _internal_has_default_sfixed64() const;
  public:
  void clear_default_sfixed64();
  int64_t default_sfixed64() const;
  void set_default_sfixed64(int64_t value);
  private:
  int64_t _internal_default_sfixed64() const;
  void _internal_set_default_sfixed64(int64_t value);
  public:

  // optional double default_double = 72 [default = 52000];
  bool has_default_double() const;
  private:
  bool _internal_has_default_double() const;
  public:
  void clear_default_double();
  double default_double() const;
  void set_default_double(double value);
  private:
  double _internal_default_double() const;
  void _internal_set_default_double(double value);
  public:

  // optional float default_float = 71 [default = 51.5];
  bool has_default_float() const;
  private:
  bool _internal_has_default_float() const;
  public:
  void clear_default_float();
  float default_float() const;
  void set_default_float(float value);
  private:
  float _internal_default_float() const;
  void _internal_set_default_float(float value);
  public:

  // optional bool default_bool = 73 [default = true];
  bool has_default_bool() const;
  private:
  bool _internal_has_default_bool() const;
  public:
  void clear_default_bool();
  bool default_bool() const;
  void set_default_bool(bool value);
  private:
  bool _internal_default_bool() const;
  void _internal_set_default_bool(bool value);
  public:

  // optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
  bool has_default_nested_enum() const;
  private:
  bool _internal_has_default_nested_enum() const;
  public:
  void clear_default_nested_enum();
  ::protobuf_unittest::TestAllTypes_NestedEnum default_nested_enum() const;
  void set_default_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value);
  private:
  ::protobuf_unittest::TestAllTypes_NestedEnum _internal_default_nested_enum() const;
  void _internal_set_default_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value);
  public:

  // optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
  bool has_default_foreign_enum() const;
  private:
  bool _internal_has_default_foreign_enum() const;
  public:
  void clear_default_foreign_enum();
  ::protobuf_unittest::ForeignEnum default_foreign_enum() const;
  void set_default_foreign_enum(::protobuf_unittest::ForeignEnum value);
  private:
  ::protobuf_unittest::ForeignEnum _internal_default_foreign_enum() const;
  void _internal_set_default_foreign_enum(::protobuf_unittest::ForeignEnum value);
  public:

  // uint32 oneof_uint32 = 111;
  bool has_oneof_uint32() const;
  private:
  bool _internal_has_oneof_uint32() const;
  public:
  void clear_oneof_uint32();
  uint32_t oneof_uint32() const;
  void set_oneof_uint32(uint32_t value);
  private:
  uint32_t _internal_oneof_uint32() const;
  void _internal_set_oneof_uint32(uint32_t value);
  public:

  // .protobuf_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
  bool has_oneof_nested_message() const;
  private:
  bool _internal_has_oneof_nested_message() const;
  public:
  void clear_oneof_nested_message();
  const ::protobuf_unittest::TestAllTypes_NestedMessage& oneof_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes_NestedMessage* release_oneof_nested_message();
  ::protobuf_unittest::TestAllTypes_NestedMessage* mutable_oneof_nested_message();
  void set_allocated_oneof_nested_message(::protobuf_unittest::TestAllTypes_NestedMessage* oneof_nested_message);
  private:
  const ::protobuf_unittest::TestAllTypes_NestedMessage& _internal_oneof_nested_message() const;
  ::protobuf_unittest::TestAllTypes_NestedMessage* _internal_mutable_oneof_nested_message();
  public:
  void unsafe_arena_set_allocated_oneof_nested_message(
      ::protobuf_unittest::TestAllTypes_NestedMessage* oneof_nested_message);
  ::protobuf_unittest::TestAllTypes_NestedMessage* unsafe_arena_release_oneof_nested_message();

  // string oneof_string = 113;
  bool has_oneof_string() const;
  private:
  bool _internal_has_oneof_string() const;
  public:
  void clear_oneof_string();
  const std::string& oneof_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oneof_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oneof_string();
  PROTOBUF_NODISCARD std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* oneof_string);
  private:
  const std::string& _internal_oneof_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_string(const std::string& value);
  std::string* _internal_mutable_oneof_string();
  public:

  // bytes oneof_bytes = 114;
  bool has_oneof_bytes() const;
  private:
  bool _internal_has_oneof_bytes() const;
  public:
  void clear_oneof_bytes();
  const std::string& oneof_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oneof_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oneof_bytes();
  PROTOBUF_NODISCARD std::string* release_oneof_bytes();
  void set_allocated_oneof_bytes(std::string* oneof_bytes);
  private:
  const std::string& _internal_oneof_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_bytes(const std::string& value);
  std::string* _internal_mutable_oneof_bytes();
  public:

  void clear_oneof_field();
  OneofFieldCase oneof_field_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllTypes)
 private:
  class _Internal;
  void set_has_oneof_uint32();
  void set_has_oneof_nested_message();
  void set_has_oneof_string();
  void set_has_oneof_bytes();

  inline bool has_oneof_field() const;
  inline void clear_has_oneof_field();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_int32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > repeated_int64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > repeated_uint32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > repeated_uint64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_sint32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > repeated_sint64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > repeated_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > repeated_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > repeated_sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > repeated_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > repeated_double_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > repeated_bool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_bytes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_RepeatedGroup > repeatedgroup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage > repeated_nested_message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage > repeated_foreign_message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessage > repeated_import_message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_nested_enum_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_foreign_enum_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_import_enum_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_piece_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_cord_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage > repeated_lazy_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_piece_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_cord_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_default_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_string_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_default_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_bytes_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_default_string_piece_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_string_piece_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_default_cord_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_cord_;
  ::protobuf_unittest::TestAllTypes_OptionalGroup* optionalgroup_;
  ::protobuf_unittest::TestAllTypes_NestedMessage* optional_nested_message_;
  ::protobuf_unittest::ForeignMessage* optional_foreign_message_;
  ::protobuf_unittest_import::ImportMessage* optional_import_message_;
  ::protobuf_unittest_import::PublicImportMessage* optional_public_import_message_;
  ::protobuf_unittest::TestAllTypes_NestedMessage* optional_lazy_message_;
  int64_t optional_int64_;
  int32_t optional_int32_;
  uint32_t optional_uint32_;
  uint64_t optional_uint64_;
  int64_t optional_sint64_;
  int32_t optional_sint32_;
  uint32_t optional_fixed32_;
  uint64_t optional_fixed64_;
  int64_t optional_sfixed64_;
  int32_t optional_sfixed32_;
  float optional_float_;
  double optional_double_;
  bool optional_bool_;
  int default_import_enum_;
  int optional_nested_enum_;
  int optional_foreign_enum_;
  int optional_import_enum_;
  int32_t default_int32_;
  int64_t default_int64_;
  uint64_t default_uint64_;
  uint32_t default_uint32_;
  int32_t default_sint32_;
  int64_t default_sint64_;
  uint64_t default_fixed64_;
  uint32_t default_fixed32_;
  int32_t default_sfixed32_;
  int64_t default_sfixed64_;
  double default_double_;
  float default_float_;
  bool default_bool_;
  int default_nested_enum_;
  int default_foreign_enum_;
  union OneofFieldUnion {
    constexpr OneofFieldUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t oneof_uint32_;
    ::protobuf_unittest::TestAllTypes_NestedMessage* oneof_nested_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
  } oneof_field_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class NestedTestAllTypes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.NestedTestAllTypes) */ {
 public:
  inline NestedTestAllTypes() : NestedTestAllTypes(nullptr) {}
  ~NestedTestAllTypes() override;
  explicit PROTOBUF_CONSTEXPR NestedTestAllTypes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NestedTestAllTypes(const NestedTestAllTypes& from);
  NestedTestAllTypes(NestedTestAllTypes&& from) noexcept
    : NestedTestAllTypes() {
    *this = ::std::move(from);
  }

  inline NestedTestAllTypes& operator=(const NestedTestAllTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedTestAllTypes& operator=(NestedTestAllTypes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NestedTestAllTypes& default_instance() {
    return *internal_default_instance();
  }
  static inline const NestedTestAllTypes* internal_default_instance() {
    return reinterpret_cast<const NestedTestAllTypes*>(
               &_NestedTestAllTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NestedTestAllTypes& a, NestedTestAllTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedTestAllTypes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedTestAllTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NestedTestAllTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NestedTestAllTypes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NestedTestAllTypes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NestedTestAllTypes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedTestAllTypes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.NestedTestAllTypes";
  }
  protected:
  explicit NestedTestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedChildFieldNumber = 3,
    kChildFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kLazyChildFieldNumber = 4,
    kEagerChildFieldNumber = 5,
  };
  // repeated .protobuf_unittest.NestedTestAllTypes repeated_child = 3;
  int repeated_child_size() const;
  private:
  int _internal_repeated_child_size() const;
  public:
  void clear_repeated_child();
  ::protobuf_unittest::NestedTestAllTypes* mutable_repeated_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::NestedTestAllTypes >*
      mutable_repeated_child();
  private:
  const ::protobuf_unittest::NestedTestAllTypes& _internal_repeated_child(int index) const;
  ::protobuf_unittest::NestedTestAllTypes* _internal_add_repeated_child();
  public:
  const ::protobuf_unittest::NestedTestAllTypes& repeated_child(int index) const;
  ::protobuf_unittest::NestedTestAllTypes* add_repeated_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::NestedTestAllTypes >&
      repeated_child() const;

  // optional .protobuf_unittest.NestedTestAllTypes child = 1;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::protobuf_unittest::NestedTestAllTypes& child() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::NestedTestAllTypes* release_child();
  ::protobuf_unittest::NestedTestAllTypes* mutable_child();
  void set_allocated_child(::protobuf_unittest::NestedTestAllTypes* child);
  private:
  const ::protobuf_unittest::NestedTestAllTypes& _internal_child() const;
  ::protobuf_unittest::NestedTestAllTypes* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::protobuf_unittest::NestedTestAllTypes* child);
  ::protobuf_unittest::NestedTestAllTypes* unsafe_arena_release_child();

  // optional .protobuf_unittest.TestAllTypes payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::protobuf_unittest::TestAllTypes& payload() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_payload();
  ::protobuf_unittest::TestAllTypes* mutable_payload();
  void set_allocated_payload(::protobuf_unittest::TestAllTypes* payload);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_payload() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::protobuf_unittest::TestAllTypes* payload);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_payload();

  // optional .protobuf_unittest.NestedTestAllTypes lazy_child = 4 [lazy = true];
  bool has_lazy_child() const;
  private:
  bool _internal_has_lazy_child() const;
  public:
  void clear_lazy_child();
  const ::protobuf_unittest::NestedTestAllTypes& lazy_child() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::NestedTestAllTypes* release_lazy_child();
  ::protobuf_unittest::NestedTestAllTypes* mutable_lazy_child();
  void set_allocated_lazy_child(::protobuf_unittest::NestedTestAllTypes* lazy_child);
  private:
  const ::protobuf_unittest::NestedTestAllTypes& _internal_lazy_child() const;
  ::protobuf_unittest::NestedTestAllTypes* _internal_mutable_lazy_child();
  public:
  void unsafe_arena_set_allocated_lazy_child(
      ::protobuf_unittest::NestedTestAllTypes* lazy_child);
  ::protobuf_unittest::NestedTestAllTypes* unsafe_arena_release_lazy_child();

  // optional .protobuf_unittest.TestAllTypes eager_child = 5 [lazy = false];
  bool has_eager_child() const;
  private:
  bool _internal_has_eager_child() const;
  public:
  void clear_eager_child();
  const ::protobuf_unittest::TestAllTypes& eager_child() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_eager_child();
  ::protobuf_unittest::TestAllTypes* mutable_eager_child();
  void set_allocated_eager_child(::protobuf_unittest::TestAllTypes* eager_child);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_eager_child() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_eager_child();
  public:
  void unsafe_arena_set_allocated_eager_child(
      ::protobuf_unittest::TestAllTypes* eager_child);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_eager_child();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.NestedTestAllTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::NestedTestAllTypes > repeated_child_;
  ::protobuf_unittest::NestedTestAllTypes* child_;
  ::protobuf_unittest::TestAllTypes* payload_;
  ::protobuf_unittest::NestedTestAllTypes* lazy_child_;
  ::protobuf_unittest::TestAllTypes* eager_child_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDeprecatedFields final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDeprecatedFields) */ {
 public:
  inline TestDeprecatedFields() : TestDeprecatedFields(nullptr) {}
  ~TestDeprecatedFields() override;
  explicit PROTOBUF_CONSTEXPR TestDeprecatedFields(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDeprecatedFields(const TestDeprecatedFields& from);
  TestDeprecatedFields(TestDeprecatedFields&& from) noexcept
    : TestDeprecatedFields() {
    *this = ::std::move(from);
  }

  inline TestDeprecatedFields& operator=(const TestDeprecatedFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDeprecatedFields& operator=(TestDeprecatedFields&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDeprecatedFields& default_instance() {
    return *internal_default_instance();
  }
  enum OneofFieldsCase {
    kDeprecatedInt32InOneof = 2,
    ONEOF_FIELDS_NOT_SET = 0,
  };

  static inline const TestDeprecatedFields* internal_default_instance() {
    return reinterpret_cast<const TestDeprecatedFields*>(
               &_TestDeprecatedFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TestDeprecatedFields& a, TestDeprecatedFields& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDeprecatedFields* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDeprecatedFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDeprecatedFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDeprecatedFields>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestDeprecatedFields& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestDeprecatedFields& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDeprecatedFields* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDeprecatedFields";
  }
  protected:
  explicit TestDeprecatedFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedInt32FieldNumber = 1,
    kDeprecatedInt32InOneofFieldNumber = 2,
  };
  // optional int32 deprecated_int32 = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_int32() const;
  private:
  bool _internal_has_deprecated_int32() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_int32();
  PROTOBUF_DEPRECATED int32_t deprecated_int32() const;
  PROTOBUF_DEPRECATED void set_deprecated_int32(int32_t value);
  private:
  int32_t _internal_deprecated_int32() const;
  void _internal_set_deprecated_int32(int32_t value);
  public:

  // int32 deprecated_int32_in_oneof = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_int32_in_oneof() const;
  private:
  bool _internal_has_deprecated_int32_in_oneof() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_int32_in_oneof();
  PROTOBUF_DEPRECATED int32_t deprecated_int32_in_oneof() const;
  PROTOBUF_DEPRECATED void set_deprecated_int32_in_oneof(int32_t value);
  private:
  int32_t _internal_deprecated_int32_in_oneof() const;
  void _internal_set_deprecated_int32_in_oneof(int32_t value);
  public:

  void clear_oneof_fields();
  OneofFieldsCase oneof_fields_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDeprecatedFields)
 private:
  class _Internal;
  void set_has_deprecated_int32_in_oneof();

  inline bool has_oneof_fields() const;
  inline void clear_has_oneof_fields();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t deprecated_int32_;
  union OneofFieldsUnion {
    constexpr OneofFieldsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t deprecated_int32_in_oneof_;
  } oneof_fields_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDeprecatedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDeprecatedMessage) */ {
 public:
  inline TestDeprecatedMessage() : TestDeprecatedMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TestDeprecatedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDeprecatedMessage(const TestDeprecatedMessage& from);
  TestDeprecatedMessage(TestDeprecatedMessage&& from) noexcept
    : TestDeprecatedMessage() {
    *this = ::std::move(from);
  }

  inline TestDeprecatedMessage& operator=(const TestDeprecatedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDeprecatedMessage& operator=(TestDeprecatedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDeprecatedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDeprecatedMessage* internal_default_instance() {
    return reinterpret_cast<const TestDeprecatedMessage*>(
               &_TestDeprecatedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TestDeprecatedMessage& a, TestDeprecatedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDeprecatedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDeprecatedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDeprecatedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDeprecatedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestDeprecatedMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestDeprecatedMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDeprecatedMessage";
  }
  protected:
  explicit TestDeprecatedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDeprecatedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class ForeignMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.ForeignMessage) */ {
 public:
  inline ForeignMessage() : ForeignMessage(nullptr) {}
  ~ForeignMessage() override;
  explicit PROTOBUF_CONSTEXPR ForeignMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForeignMessage(const ForeignMessage& from);
  ForeignMessage(ForeignMessage&& from) noexcept
    : ForeignMessage() {
    *this = ::std::move(from);
  }

  inline ForeignMessage& operator=(const ForeignMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForeignMessage& operator=(ForeignMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForeignMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForeignMessage* internal_default_instance() {
    return reinterpret_cast<const ForeignMessage*>(
               &_ForeignMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ForeignMessage& a, ForeignMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ForeignMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForeignMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForeignMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForeignMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForeignMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ForeignMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForeignMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.ForeignMessage";
  }
  protected:
  explicit ForeignMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 1,
    kDFieldNumber = 2,
  };
  // optional int32 c = 1;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  int32_t c() const;
  void set_c(int32_t value);
  private:
  int32_t _internal_c() const;
  void _internal_set_c(int32_t value);
  public:

  // optional int32 d = 2;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  int32_t d() const;
  void set_d(int32_t value);
  private:
  int32_t _internal_d() const;
  void _internal_set_d(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.ForeignMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t c_;
  int32_t d_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestReservedFields final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestReservedFields) */ {
 public:
  inline TestReservedFields() : TestReservedFields(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TestReservedFields(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestReservedFields(const TestReservedFields& from);
  TestReservedFields(TestReservedFields&& from) noexcept
    : TestReservedFields() {
    *this = ::std::move(from);
  }

  inline TestReservedFields& operator=(const TestReservedFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestReservedFields& operator=(TestReservedFields&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestReservedFields& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestReservedFields* internal_default_instance() {
    return reinterpret_cast<const TestReservedFields*>(
               &_TestReservedFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TestReservedFields& a, TestReservedFields& b) {
    a.Swap(&b);
  }
  inline void Swap(TestReservedFields* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestReservedFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestReservedFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestReservedFields>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestReservedFields& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestReservedFields& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestReservedFields";
  }
  protected:
  explicit TestReservedFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestReservedFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestAllExtensions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllExtensions) */ {
 public:
  inline TestAllExtensions() : TestAllExtensions(nullptr) {}
  ~TestAllExtensions() override;
  explicit PROTOBUF_CONSTEXPR TestAllExtensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllExtensions(const TestAllExtensions& from);
  TestAllExtensions(TestAllExtensions&& from) noexcept
    : TestAllExtensions() {
    *this = ::std::move(from);
  }

  inline TestAllExtensions& operator=(const TestAllExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllExtensions& operator=(TestAllExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllExtensions* internal_default_instance() {
    return reinterpret_cast<const TestAllExtensions*>(
               &_TestAllExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TestAllExtensions& a, TestAllExtensions& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllExtensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllExtensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllExtensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllExtensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllExtensions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestAllExtensions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllExtensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllExtensions";
  }
  protected:
  explicit TestAllExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllExtensions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class OptionalGroup_extension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.OptionalGroup_extension) */ {
 public:
  inline OptionalGroup_extension() : OptionalGroup_extension(nullptr) {}
  ~OptionalGroup_extension() override;
  explicit PROTOBUF_CONSTEXPR OptionalGroup_extension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionalGroup_extension(const OptionalGroup_extension& from);
  OptionalGroup_extension(OptionalGroup_extension&& from) noexcept
    : OptionalGroup_extension() {
    *this = ::std::move(from);
  }

  inline OptionalGroup_extension& operator=(const OptionalGroup_extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalGroup_extension& operator=(OptionalGroup_extension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalGroup_extension& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionalGroup_extension* internal_default_instance() {
    return reinterpret_cast<const OptionalGroup_extension*>(
               &_OptionalGroup_extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OptionalGroup_extension& a, OptionalGroup_extension& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalGroup_extension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalGroup_extension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalGroup_extension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalGroup_extension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionalGroup_extension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptionalGroup_extension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalGroup_extension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.OptionalGroup_extension";
  }
  protected:
  explicit OptionalGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 17,
  };
  // optional int32 a = 17;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.OptionalGroup_extension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class RepeatedGroup_extension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.RepeatedGroup_extension) */ {
 public:
  inline RepeatedGroup_extension() : RepeatedGroup_extension(nullptr) {}
  ~RepeatedGroup_extension() override;
  explicit PROTOBUF_CONSTEXPR RepeatedGroup_extension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatedGroup_extension(const RepeatedGroup_extension& from);
  RepeatedGroup_extension(RepeatedGroup_extension&& from) noexcept
    : RepeatedGroup_extension() {
    *this = ::std::move(from);
  }

  inline RepeatedGroup_extension& operator=(const RepeatedGroup_extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedGroup_extension& operator=(RepeatedGroup_extension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedGroup_extension& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedGroup_extension* internal_default_instance() {
    return reinterpret_cast<const RepeatedGroup_extension*>(
               &_RepeatedGroup_extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RepeatedGroup_extension& a, RepeatedGroup_extension& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedGroup_extension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedGroup_extension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatedGroup_extension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepeatedGroup_extension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatedGroup_extension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepeatedGroup_extension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedGroup_extension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.RepeatedGroup_extension";
  }
  protected:
  explicit RepeatedGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 47,
  };
  // optional int32 a = 47;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.RepeatedGroup_extension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestGroup_OptionalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestGroup.OptionalGroup) */ {
 public:
  inline TestGroup_OptionalGroup() : TestGroup_OptionalGroup(nullptr) {}
  ~TestGroup_OptionalGroup() override;
  explicit PROTOBUF_CONSTEXPR TestGroup_OptionalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestGroup_OptionalGroup(const TestGroup_OptionalGroup& from);
  TestGroup_OptionalGroup(TestGroup_OptionalGroup&& from) noexcept
    : TestGroup_OptionalGroup() {
    *this = ::std::move(from);
  }

  inline TestGroup_OptionalGroup& operator=(const TestGroup_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGroup_OptionalGroup& operator=(TestGroup_OptionalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestGroup_OptionalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestGroup_OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const TestGroup_OptionalGroup*>(
               &_TestGroup_OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TestGroup_OptionalGroup& a, TestGroup_OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGroup_OptionalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGroup_OptionalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestGroup_OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestGroup_OptionalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestGroup_OptionalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestGroup_OptionalGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGroup_OptionalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestGroup.OptionalGroup";
  }
  protected:
  explicit TestGroup_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 17,
  };
  // optional int32 a = 17;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestGroup.OptionalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestGroup) */ {
 public:
  inline TestGroup() : TestGroup(nullptr) {}
  ~TestGroup() override;
  explicit PROTOBUF_CONSTEXPR TestGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestGroup(const TestGroup& from);
  TestGroup(TestGroup&& from) noexcept
    : TestGroup() {
    *this = ::std::move(from);
  }

  inline TestGroup& operator=(const TestGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGroup& operator=(TestGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestGroup* internal_default_instance() {
    return reinterpret_cast<const TestGroup*>(
               &_TestGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TestGroup& a, TestGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestGroup";
  }
  protected:
  explicit TestGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestGroup_OptionalGroup OptionalGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalgroupFieldNumber = 16,
    kOptionalForeignEnumFieldNumber = 22,
  };
  // optional group OptionalGroup = 16 { ... };
  bool has_optionalgroup() const;
  private:
  bool _internal_has_optionalgroup() const;
  public:
  void clear_optionalgroup();
  const ::protobuf_unittest::TestGroup_OptionalGroup& optionalgroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestGroup_OptionalGroup* release_optionalgroup();
  ::protobuf_unittest::TestGroup_OptionalGroup* mutable_optionalgroup();
  void set_allocated_optionalgroup(::protobuf_unittest::TestGroup_OptionalGroup* optionalgroup);
  private:
  const ::protobuf_unittest::TestGroup_OptionalGroup& _internal_optionalgroup() const;
  ::protobuf_unittest::TestGroup_OptionalGroup* _internal_mutable_optionalgroup();
  public:
  void unsafe_arena_set_allocated_optionalgroup(
      ::protobuf_unittest::TestGroup_OptionalGroup* optionalgroup);
  ::protobuf_unittest::TestGroup_OptionalGroup* unsafe_arena_release_optionalgroup();

  // optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
  bool has_optional_foreign_enum() const;
  private:
  bool _internal_has_optional_foreign_enum() const;
  public:
  void clear_optional_foreign_enum();
  ::protobuf_unittest::ForeignEnum optional_foreign_enum() const;
  void set_optional_foreign_enum(::protobuf_unittest::ForeignEnum value);
  private:
  ::protobuf_unittest::ForeignEnum _internal_optional_foreign_enum() const;
  void _internal_set_optional_foreign_enum(::protobuf_unittest::ForeignEnum value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestGroup_OptionalGroup* optionalgroup_;
  int optional_foreign_enum_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestGroupExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestGroupExtension) */ {
 public:
  inline TestGroupExtension() : TestGroupExtension(nullptr) {}
  ~TestGroupExtension() override;
  explicit PROTOBUF_CONSTEXPR TestGroupExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestGroupExtension(const TestGroupExtension& from);
  TestGroupExtension(TestGroupExtension&& from) noexcept
    : TestGroupExtension() {
    *this = ::std::move(from);
  }

  inline TestGroupExtension& operator=(const TestGroupExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGroupExtension& operator=(TestGroupExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestGroupExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestGroupExtension* internal_default_instance() {
    return reinterpret_cast<const TestGroupExtension*>(
               &_TestGroupExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TestGroupExtension& a, TestGroupExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGroupExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGroupExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestGroupExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestGroupExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestGroupExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestGroupExtension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGroupExtension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestGroupExtension";
  }
  protected:
  explicit TestGroupExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestGroupExtension, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestGroupExtension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedExtension_OptionalGroup_extension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedExtension.OptionalGroup_extension) */ {
 public:
  inline TestNestedExtension_OptionalGroup_extension() : TestNestedExtension_OptionalGroup_extension(nullptr) {}
  ~TestNestedExtension_OptionalGroup_extension() override;
  explicit PROTOBUF_CONSTEXPR TestNestedExtension_OptionalGroup_extension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedExtension_OptionalGroup_extension(const TestNestedExtension_OptionalGroup_extension& from);
  TestNestedExtension_OptionalGroup_extension(TestNestedExtension_OptionalGroup_extension&& from) noexcept
    : TestNestedExtension_OptionalGroup_extension() {
    *this = ::std::move(from);
  }

  inline TestNestedExtension_OptionalGroup_extension& operator=(const TestNestedExtension_OptionalGroup_extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedExtension_OptionalGroup_extension& operator=(TestNestedExtension_OptionalGroup_extension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedExtension_OptionalGroup_extension& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedExtension_OptionalGroup_extension* internal_default_instance() {
    return reinterpret_cast<const TestNestedExtension_OptionalGroup_extension*>(
               &_TestNestedExtension_OptionalGroup_extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TestNestedExtension_OptionalGroup_extension& a, TestNestedExtension_OptionalGroup_extension& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedExtension_OptionalGroup_extension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedExtension_OptionalGroup_extension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedExtension_OptionalGroup_extension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedExtension_OptionalGroup_extension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedExtension_OptionalGroup_extension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedExtension_OptionalGroup_extension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedExtension_OptionalGroup_extension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedExtension.OptionalGroup_extension";
  }
  protected:
  explicit TestNestedExtension_OptionalGroup_extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 17,
  };
  // optional int32 a = 17;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedExtension.OptionalGroup_extension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedExtension final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedExtension) */ {
 public:
  inline TestNestedExtension() : TestNestedExtension(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TestNestedExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedExtension(const TestNestedExtension& from);
  TestNestedExtension(TestNestedExtension&& from) noexcept
    : TestNestedExtension() {
    *this = ::std::move(from);
  }

  inline TestNestedExtension& operator=(const TestNestedExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedExtension& operator=(TestNestedExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedExtension* internal_default_instance() {
    return reinterpret_cast<const TestNestedExtension*>(
               &_TestNestedExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TestNestedExtension& a, TestNestedExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestNestedExtension& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestNestedExtension& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedExtension";
  }
  protected:
  explicit TestNestedExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestNestedExtension_OptionalGroup_extension OptionalGroup_extension;

  // accessors -------------------------------------------------------

  static const int kTestFieldNumber = 1002;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    test;
  static const int kNestedStringExtensionFieldNumber = 1003;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    nested_string_extension;
  static const int kOptionalgroupExtensionFieldNumber = 16;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestGroupExtension,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestNestedExtension_OptionalGroup_extension >, 10, false >
    optionalgroup_extension;
  static const int kOptionalForeignEnumExtensionFieldNumber = 22;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestGroupExtension,
      ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
    optional_foreign_enum_extension;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestChildExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestChildExtension) */ {
 public:
  inline TestChildExtension() : TestChildExtension(nullptr) {}
  ~TestChildExtension() override;
  explicit PROTOBUF_CONSTEXPR TestChildExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestChildExtension(const TestChildExtension& from);
  TestChildExtension(TestChildExtension&& from) noexcept
    : TestChildExtension() {
    *this = ::std::move(from);
  }

  inline TestChildExtension& operator=(const TestChildExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestChildExtension& operator=(TestChildExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestChildExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestChildExtension* internal_default_instance() {
    return reinterpret_cast<const TestChildExtension*>(
               &_TestChildExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TestChildExtension& a, TestChildExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(TestChildExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestChildExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestChildExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestChildExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestChildExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestChildExtension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestChildExtension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestChildExtension";
  }
  protected:
  explicit TestChildExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kOptionalExtensionFieldNumber = 3,
  };
  // optional string a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // optional string b = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // optional .protobuf_unittest.TestAllExtensions optional_extension = 3;
  bool has_optional_extension() const;
  private:
  bool _internal_has_optional_extension() const;
  public:
  void clear_optional_extension();
  const ::protobuf_unittest::TestAllExtensions& optional_extension() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllExtensions* release_optional_extension();
  ::protobuf_unittest::TestAllExtensions* mutable_optional_extension();
  void set_allocated_optional_extension(::protobuf_unittest::TestAllExtensions* optional_extension);
  private:
  const ::protobuf_unittest::TestAllExtensions& _internal_optional_extension() const;
  ::protobuf_unittest::TestAllExtensions* _internal_mutable_optional_extension();
  public:
  void unsafe_arena_set_allocated_optional_extension(
      ::protobuf_unittest::TestAllExtensions* optional_extension);
  ::protobuf_unittest::TestAllExtensions* unsafe_arena_release_optional_extension();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestChildExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  ::protobuf_unittest::TestAllExtensions* optional_extension_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions) */ {
 public:
  inline TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions() : TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(nullptr) {}
  ~TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions() override;
  explicit PROTOBUF_CONSTEXPR TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& from);
  TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions&& from) noexcept
    : TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions() {
    *this = ::std::move(from);
  }

  inline TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& operator=(const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& operator=(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* internal_default_instance() {
    return reinterpret_cast<const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions*>(
               &_TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& a, TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& b) {
    a.Swap(&b);
  }
  inline void Swap(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions";
  }
  protected:
  explicit TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // optional int32 b = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  int32_t b() const;
  void set_b(int32_t value);
  private:
  int32_t _internal_b() const;
  void _internal_set_b(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  int32_t b_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestChildExtensionData_NestedTestAllExtensionsData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData) */ {
 public:
  inline TestChildExtensionData_NestedTestAllExtensionsData() : TestChildExtensionData_NestedTestAllExtensionsData(nullptr) {}
  ~TestChildExtensionData_NestedTestAllExtensionsData() override;
  explicit PROTOBUF_CONSTEXPR TestChildExtensionData_NestedTestAllExtensionsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestChildExtensionData_NestedTestAllExtensionsData(const TestChildExtensionData_NestedTestAllExtensionsData& from);
  TestChildExtensionData_NestedTestAllExtensionsData(TestChildExtensionData_NestedTestAllExtensionsData&& from) noexcept
    : TestChildExtensionData_NestedTestAllExtensionsData() {
    *this = ::std::move(from);
  }

  inline TestChildExtensionData_NestedTestAllExtensionsData& operator=(const TestChildExtensionData_NestedTestAllExtensionsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestChildExtensionData_NestedTestAllExtensionsData& operator=(TestChildExtensionData_NestedTestAllExtensionsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestChildExtensionData_NestedTestAllExtensionsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestChildExtensionData_NestedTestAllExtensionsData* internal_default_instance() {
    return reinterpret_cast<const TestChildExtensionData_NestedTestAllExtensionsData*>(
               &_TestChildExtensionData_NestedTestAllExtensionsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TestChildExtensionData_NestedTestAllExtensionsData& a, TestChildExtensionData_NestedTestAllExtensionsData& b) {
    a.Swap(&b);
  }
  inline void Swap(TestChildExtensionData_NestedTestAllExtensionsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestChildExtensionData_NestedTestAllExtensionsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestChildExtensionData_NestedTestAllExtensionsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestChildExtensionData_NestedTestAllExtensionsData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestChildExtensionData_NestedTestAllExtensionsData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestChildExtensionData_NestedTestAllExtensionsData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestChildExtensionData_NestedTestAllExtensionsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData";
  }
  protected:
  explicit TestChildExtensionData_NestedTestAllExtensionsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions NestedDynamicExtensions;

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicFieldNumber = 409707008,
  };
  // optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions dynamic = 409707008;
  bool has_dynamic() const;
  private:
  bool _internal_has_dynamic() const;
  public:
  void clear_dynamic();
  const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& dynamic() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* release_dynamic();
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* mutable_dynamic();
  void set_allocated_dynamic(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* dynamic);
  private:
  const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& _internal_dynamic() const;
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* _internal_mutable_dynamic();
  public:
  void unsafe_arena_set_allocated_dynamic(
      ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* dynamic);
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* unsafe_arena_release_dynamic();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* dynamic_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestChildExtensionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestChildExtensionData) */ {
 public:
  inline TestChildExtensionData() : TestChildExtensionData(nullptr) {}
  ~TestChildExtensionData() override;
  explicit PROTOBUF_CONSTEXPR TestChildExtensionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestChildExtensionData(const TestChildExtensionData& from);
  TestChildExtensionData(TestChildExtensionData&& from) noexcept
    : TestChildExtensionData() {
    *this = ::std::move(from);
  }

  inline TestChildExtensionData& operator=(const TestChildExtensionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestChildExtensionData& operator=(TestChildExtensionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestChildExtensionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestChildExtensionData* internal_default_instance() {
    return reinterpret_cast<const TestChildExtensionData*>(
               &_TestChildExtensionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TestChildExtensionData& a, TestChildExtensionData& b) {
    a.Swap(&b);
  }
  inline void Swap(TestChildExtensionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestChildExtensionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestChildExtensionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestChildExtensionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestChildExtensionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestChildExtensionData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestChildExtensionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestChildExtensionData";
  }
  protected:
  explicit TestChildExtensionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestChildExtensionData_NestedTestAllExtensionsData NestedTestAllExtensionsData;

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kOptionalExtensionFieldNumber = 3,
  };
  // optional string a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // optional string b = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData optional_extension = 3;
  bool has_optional_extension() const;
  private:
  bool _internal_has_optional_extension() const;
  public:
  void clear_optional_extension();
  const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData& optional_extension() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* release_optional_extension();
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* mutable_optional_extension();
  void set_allocated_optional_extension(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* optional_extension);
  private:
  const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData& _internal_optional_extension() const;
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* _internal_mutable_optional_extension();
  public:
  void unsafe_arena_set_allocated_optional_extension(
      ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* optional_extension);
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* unsafe_arena_release_optional_extension();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestChildExtensionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* optional_extension_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedChildExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedChildExtension) */ {
 public:
  inline TestNestedChildExtension() : TestNestedChildExtension(nullptr) {}
  ~TestNestedChildExtension() override;
  explicit PROTOBUF_CONSTEXPR TestNestedChildExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedChildExtension(const TestNestedChildExtension& from);
  TestNestedChildExtension(TestNestedChildExtension&& from) noexcept
    : TestNestedChildExtension() {
    *this = ::std::move(from);
  }

  inline TestNestedChildExtension& operator=(const TestNestedChildExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedChildExtension& operator=(TestNestedChildExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedChildExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedChildExtension* internal_default_instance() {
    return reinterpret_cast<const TestNestedChildExtension*>(
               &_TestNestedChildExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TestNestedChildExtension& a, TestNestedChildExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedChildExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedChildExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedChildExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedChildExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedChildExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedChildExtension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedChildExtension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedChildExtension";
  }
  protected:
  explicit TestNestedChildExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 2,
    kAFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestChildExtension child = 2;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::protobuf_unittest::TestChildExtension& child() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestChildExtension* release_child();
  ::protobuf_unittest::TestChildExtension* mutable_child();
  void set_allocated_child(::protobuf_unittest::TestChildExtension* child);
  private:
  const ::protobuf_unittest::TestChildExtension& _internal_child() const;
  ::protobuf_unittest::TestChildExtension* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::protobuf_unittest::TestChildExtension* child);
  ::protobuf_unittest::TestChildExtension* unsafe_arena_release_child();

  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedChildExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestChildExtension* child_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedChildExtensionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedChildExtensionData) */ {
 public:
  inline TestNestedChildExtensionData() : TestNestedChildExtensionData(nullptr) {}
  ~TestNestedChildExtensionData() override;
  explicit PROTOBUF_CONSTEXPR TestNestedChildExtensionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedChildExtensionData(const TestNestedChildExtensionData& from);
  TestNestedChildExtensionData(TestNestedChildExtensionData&& from) noexcept
    : TestNestedChildExtensionData() {
    *this = ::std::move(from);
  }

  inline TestNestedChildExtensionData& operator=(const TestNestedChildExtensionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedChildExtensionData& operator=(TestNestedChildExtensionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedChildExtensionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedChildExtensionData* internal_default_instance() {
    return reinterpret_cast<const TestNestedChildExtensionData*>(
               &_TestNestedChildExtensionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TestNestedChildExtensionData& a, TestNestedChildExtensionData& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedChildExtensionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedChildExtensionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedChildExtensionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedChildExtensionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedChildExtensionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedChildExtensionData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedChildExtensionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedChildExtensionData";
  }
  protected:
  explicit TestNestedChildExtensionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 2,
    kAFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestChildExtensionData child = 2;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::protobuf_unittest::TestChildExtensionData& child() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestChildExtensionData* release_child();
  ::protobuf_unittest::TestChildExtensionData* mutable_child();
  void set_allocated_child(::protobuf_unittest::TestChildExtensionData* child);
  private:
  const ::protobuf_unittest::TestChildExtensionData& _internal_child() const;
  ::protobuf_unittest::TestChildExtensionData* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::protobuf_unittest::TestChildExtensionData* child);
  ::protobuf_unittest::TestChildExtensionData* unsafe_arena_release_child();

  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedChildExtensionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestChildExtensionData* child_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestRequired final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestRequired) */ {
 public:
  inline TestRequired() : TestRequired(nullptr) {}
  ~TestRequired() override;
  explicit PROTOBUF_CONSTEXPR TestRequired(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRequired(const TestRequired& from);
  TestRequired(TestRequired&& from) noexcept
    : TestRequired() {
    *this = ::std::move(from);
  }

  inline TestRequired& operator=(const TestRequired& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequired& operator=(TestRequired&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequired& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRequired* internal_default_instance() {
    return reinterpret_cast<const TestRequired*>(
               &_TestRequired_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TestRequired& a, TestRequired& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequired* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequired* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRequired* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRequired>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRequired& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRequired& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequired* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestRequired";
  }
  protected:
  explicit TestRequired(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalForeignFieldNumber = 34,
    kAFieldNumber = 1,
    kDummy2FieldNumber = 2,
    kBFieldNumber = 3,
    kDummy4FieldNumber = 4,
    kDummy5FieldNumber = 5,
    kDummy6FieldNumber = 6,
    kDummy7FieldNumber = 7,
    kDummy8FieldNumber = 8,
    kDummy9FieldNumber = 9,
    kDummy10FieldNumber = 10,
    kDummy11FieldNumber = 11,
    kDummy12FieldNumber = 12,
    kDummy13FieldNumber = 13,
    kDummy14FieldNumber = 14,
    kDummy15FieldNumber = 15,
    kDummy16FieldNumber = 16,
    kDummy17FieldNumber = 17,
    kDummy18FieldNumber = 18,
    kDummy19FieldNumber = 19,
    kDummy20FieldNumber = 20,
    kDummy21FieldNumber = 21,
    kDummy22FieldNumber = 22,
    kDummy23FieldNumber = 23,
    kDummy24FieldNumber = 24,
    kDummy25FieldNumber = 25,
    kDummy26FieldNumber = 26,
    kDummy27FieldNumber = 27,
    kDummy28FieldNumber = 28,
    kDummy29FieldNumber = 29,
    kDummy30FieldNumber = 30,
    kDummy31FieldNumber = 31,
    kDummy32FieldNumber = 32,
    kCFieldNumber = 33,
  };
  // optional .protobuf_unittest.ForeignMessage optional_foreign = 34;
  bool has_optional_foreign() const;
  private:
  bool _internal_has_optional_foreign() const;
  public:
  void clear_optional_foreign();
  const ::protobuf_unittest::ForeignMessage& optional_foreign() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::ForeignMessage* release_optional_foreign();
  ::protobuf_unittest::ForeignMessage* mutable_optional_foreign();
  void set_allocated_optional_foreign(::protobuf_unittest::ForeignMessage* optional_foreign);
  private:
  const ::protobuf_unittest::ForeignMessage& _internal_optional_foreign() const;
  ::protobuf_unittest::ForeignMessage* _internal_mutable_optional_foreign();
  public:
  void unsafe_arena_set_allocated_optional_foreign(
      ::protobuf_unittest::ForeignMessage* optional_foreign);
  ::protobuf_unittest::ForeignMessage* unsafe_arena_release_optional_foreign();

  // required int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // optional int32 dummy2 = 2;
  bool has_dummy2() const;
  private:
  bool _internal_has_dummy2() const;
  public:
  void clear_dummy2();
  int32_t dummy2() const;
  void set_dummy2(int32_t value);
  private:
  int32_t _internal_dummy2() const;
  void _internal_set_dummy2(int32_t value);
  public:

  // required int32 b = 3;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  int32_t b() const;
  void set_b(int32_t value);
  private:
  int32_t _internal_b() const;
  void _internal_set_b(int32_t value);
  public:

  // optional int32 dummy4 = 4;
  bool has_dummy4() const;
  private:
  bool _internal_has_dummy4() const;
  public:
  void clear_dummy4();
  int32_t dummy4() const;
  void set_dummy4(int32_t value);
  private:
  int32_t _internal_dummy4() const;
  void _internal_set_dummy4(int32_t value);
  public:

  // optional int32 dummy5 = 5;
  bool has_dummy5() const;
  private:
  bool _internal_has_dummy5() const;
  public:
  void clear_dummy5();
  int32_t dummy5() const;
  void set_dummy5(int32_t value);
  private:
  int32_t _internal_dummy5() const;
  void _internal_set_dummy5(int32_t value);
  public:

  // optional int32 dummy6 = 6;
  bool has_dummy6() const;
  private:
  bool _internal_has_dummy6() const;
  public:
  void clear_dummy6();
  int32_t dummy6() const;
  void set_dummy6(int32_t value);
  private:
  int32_t _internal_dummy6() const;
  void _internal_set_dummy6(int32_t value);
  public:

  // optional int32 dummy7 = 7;
  bool has_dummy7() const;
  private:
  bool _internal_has_dummy7() const;
  public:
  void clear_dummy7();
  int32_t dummy7() const;
  void set_dummy7(int32_t value);
  private:
  int32_t _internal_dummy7() const;
  void _internal_set_dummy7(int32_t value);
  public:

  // optional int32 dummy8 = 8;
  bool has_dummy8() const;
  private:
  bool _internal_has_dummy8() const;
  public:
  void clear_dummy8();
  int32_t dummy8() const;
  void set_dummy8(int32_t value);
  private:
  int32_t _internal_dummy8() const;
  void _internal_set_dummy8(int32_t value);
  public:

  // optional int32 dummy9 = 9;
  bool has_dummy9() const;
  private:
  bool _internal_has_dummy9() const;
  public:
  void clear_dummy9();
  int32_t dummy9() const;
  void set_dummy9(int32_t value);
  private:
  int32_t _internal_dummy9() const;
  void _internal_set_dummy9(int32_t value);
  public:

  // optional int32 dummy10 = 10;
  bool has_dummy10() const;
  private:
  bool _internal_has_dummy10() const;
  public:
  void clear_dummy10();
  int32_t dummy10() const;
  void set_dummy10(int32_t value);
  private:
  int32_t _internal_dummy10() const;
  void _internal_set_dummy10(int32_t value);
  public:

  // optional int32 dummy11 = 11;
  bool has_dummy11() const;
  private:
  bool _internal_has_dummy11() const;
  public:
  void clear_dummy11();
  int32_t dummy11() const;
  void set_dummy11(int32_t value);
  private:
  int32_t _internal_dummy11() const;
  void _internal_set_dummy11(int32_t value);
  public:

  // optional int32 dummy12 = 12;
  bool has_dummy12() const;
  private:
  bool _internal_has_dummy12() const;
  public:
  void clear_dummy12();
  int32_t dummy12() const;
  void set_dummy12(int32_t value);
  private:
  int32_t _internal_dummy12() const;
  void _internal_set_dummy12(int32_t value);
  public:

  // optional int32 dummy13 = 13;
  bool has_dummy13() const;
  private:
  bool _internal_has_dummy13() const;
  public:
  void clear_dummy13();
  int32_t dummy13() const;
  void set_dummy13(int32_t value);
  private:
  int32_t _internal_dummy13() const;
  void _internal_set_dummy13(int32_t value);
  public:

  // optional int32 dummy14 = 14;
  bool has_dummy14() const;
  private:
  bool _internal_has_dummy14() const;
  public:
  void clear_dummy14();
  int32_t dummy14() const;
  void set_dummy14(int32_t value);
  private:
  int32_t _internal_dummy14() const;
  void _internal_set_dummy14(int32_t value);
  public:

  // optional int32 dummy15 = 15;
  bool has_dummy15() const;
  private:
  bool _internal_has_dummy15() const;
  public:
  void clear_dummy15();
  int32_t dummy15() const;
  void set_dummy15(int32_t value);
  private:
  int32_t _internal_dummy15() const;
  void _internal_set_dummy15(int32_t value);
  public:

  // optional int32 dummy16 = 16;
  bool has_dummy16() const;
  private:
  bool _internal_has_dummy16() const;
  public:
  void clear_dummy16();
  int32_t dummy16() const;
  void set_dummy16(int32_t value);
  private:
  int32_t _internal_dummy16() const;
  void _internal_set_dummy16(int32_t value);
  public:

  // optional int32 dummy17 = 17;
  bool has_dummy17() const;
  private:
  bool _internal_has_dummy17() const;
  public:
  void clear_dummy17();
  int32_t dummy17() const;
  void set_dummy17(int32_t value);
  private:
  int32_t _internal_dummy17() const;
  void _internal_set_dummy17(int32_t value);
  public:

  // optional int32 dummy18 = 18;
  bool has_dummy18() const;
  private:
  bool _internal_has_dummy18() const;
  public:
  void clear_dummy18();
  int32_t dummy18() const;
  void set_dummy18(int32_t value);
  private:
  int32_t _internal_dummy18() const;
  void _internal_set_dummy18(int32_t value);
  public:

  // optional int32 dummy19 = 19;
  bool has_dummy19() const;
  private:
  bool _internal_has_dummy19() const;
  public:
  void clear_dummy19();
  int32_t dummy19() const;
  void set_dummy19(int32_t value);
  private:
  int32_t _internal_dummy19() const;
  void _internal_set_dummy19(int32_t value);
  public:

  // optional int32 dummy20 = 20;
  bool has_dummy20() const;
  private:
  bool _internal_has_dummy20() const;
  public:
  void clear_dummy20();
  int32_t dummy20() const;
  void set_dummy20(int32_t value);
  private:
  int32_t _internal_dummy20() const;
  void _internal_set_dummy20(int32_t value);
  public:

  // optional int32 dummy21 = 21;
  bool has_dummy21() const;
  private:
  bool _internal_has_dummy21() const;
  public:
  void clear_dummy21();
  int32_t dummy21() const;
  void set_dummy21(int32_t value);
  private:
  int32_t _internal_dummy21() const;
  void _internal_set_dummy21(int32_t value);
  public:

  // optional int32 dummy22 = 22;
  bool has_dummy22() const;
  private:
  bool _internal_has_dummy22() const;
  public:
  void clear_dummy22();
  int32_t dummy22() const;
  void set_dummy22(int32_t value);
  private:
  int32_t _internal_dummy22() const;
  void _internal_set_dummy22(int32_t value);
  public:

  // optional int32 dummy23 = 23;
  bool has_dummy23() const;
  private:
  bool _internal_has_dummy23() const;
  public:
  void clear_dummy23();
  int32_t dummy23() const;
  void set_dummy23(int32_t value);
  private:
  int32_t _internal_dummy23() const;
  void _internal_set_dummy23(int32_t value);
  public:

  // optional int32 dummy24 = 24;
  bool has_dummy24() const;
  private:
  bool _internal_has_dummy24() const;
  public:
  void clear_dummy24();
  int32_t dummy24() const;
  void set_dummy24(int32_t value);
  private:
  int32_t _internal_dummy24() const;
  void _internal_set_dummy24(int32_t value);
  public:

  // optional int32 dummy25 = 25;
  bool has_dummy25() const;
  private:
  bool _internal_has_dummy25() const;
  public:
  void clear_dummy25();
  int32_t dummy25() const;
  void set_dummy25(int32_t value);
  private:
  int32_t _internal_dummy25() const;
  void _internal_set_dummy25(int32_t value);
  public:

  // optional int32 dummy26 = 26;
  bool has_dummy26() const;
  private:
  bool _internal_has_dummy26() const;
  public:
  void clear_dummy26();
  int32_t dummy26() const;
  void set_dummy26(int32_t value);
  private:
  int32_t _internal_dummy26() const;
  void _internal_set_dummy26(int32_t value);
  public:

  // optional int32 dummy27 = 27;
  bool has_dummy27() const;
  private:
  bool _internal_has_dummy27() const;
  public:
  void clear_dummy27();
  int32_t dummy27() const;
  void set_dummy27(int32_t value);
  private:
  int32_t _internal_dummy27() const;
  void _internal_set_dummy27(int32_t value);
  public:

  // optional int32 dummy28 = 28;
  bool has_dummy28() const;
  private:
  bool _internal_has_dummy28() const;
  public:
  void clear_dummy28();
  int32_t dummy28() const;
  void set_dummy28(int32_t value);
  private:
  int32_t _internal_dummy28() const;
  void _internal_set_dummy28(int32_t value);
  public:

  // optional int32 dummy29 = 29;
  bool has_dummy29() const;
  private:
  bool _internal_has_dummy29() const;
  public:
  void clear_dummy29();
  int32_t dummy29() const;
  void set_dummy29(int32_t value);
  private:
  int32_t _internal_dummy29() const;
  void _internal_set_dummy29(int32_t value);
  public:

  // optional int32 dummy30 = 30;
  bool has_dummy30() const;
  private:
  bool _internal_has_dummy30() const;
  public:
  void clear_dummy30();
  int32_t dummy30() const;
  void set_dummy30(int32_t value);
  private:
  int32_t _internal_dummy30() const;
  void _internal_set_dummy30(int32_t value);
  public:

  // optional int32 dummy31 = 31;
  bool has_dummy31() const;
  private:
  bool _internal_has_dummy31() const;
  public:
  void clear_dummy31();
  int32_t dummy31() const;
  void set_dummy31(int32_t value);
  private:
  int32_t _internal_dummy31() const;
  void _internal_set_dummy31(int32_t value);
  public:

  // optional int32 dummy32 = 32;
  bool has_dummy32() const;
  private:
  bool _internal_has_dummy32() const;
  public:
  void clear_dummy32();
  int32_t dummy32() const;
  void set_dummy32(int32_t value);
  private:
  int32_t _internal_dummy32() const;
  void _internal_set_dummy32(int32_t value);
  public:

  // required int32 c = 33;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  int32_t c() const;
  void set_c(int32_t value);
  private:
  int32_t _internal_c() const;
  void _internal_set_c(int32_t value);
  public:

  static const int kSingleFieldNumber = 1000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestRequired >, 11, false >
    single;
  static const int kMultiFieldNumber = 1001;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestRequired >, 11, false >
    multi;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRequired)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::ForeignMessage* optional_foreign_;
  int32_t a_;
  int32_t dummy2_;
  int32_t b_;
  int32_t dummy4_;
  int32_t dummy5_;
  int32_t dummy6_;
  int32_t dummy7_;
  int32_t dummy8_;
  int32_t dummy9_;
  int32_t dummy10_;
  int32_t dummy11_;
  int32_t dummy12_;
  int32_t dummy13_;
  int32_t dummy14_;
  int32_t dummy15_;
  int32_t dummy16_;
  int32_t dummy17_;
  int32_t dummy18_;
  int32_t dummy19_;
  int32_t dummy20_;
  int32_t dummy21_;
  int32_t dummy22_;
  int32_t dummy23_;
  int32_t dummy24_;
  int32_t dummy25_;
  int32_t dummy26_;
  int32_t dummy27_;
  int32_t dummy28_;
  int32_t dummy29_;
  int32_t dummy30_;
  int32_t dummy31_;
  int32_t dummy32_;
  int32_t c_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestRequiredForeign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestRequiredForeign) */ {
 public:
  inline TestRequiredForeign() : TestRequiredForeign(nullptr) {}
  ~TestRequiredForeign() override;
  explicit PROTOBUF_CONSTEXPR TestRequiredForeign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRequiredForeign(const TestRequiredForeign& from);
  TestRequiredForeign(TestRequiredForeign&& from) noexcept
    : TestRequiredForeign() {
    *this = ::std::move(from);
  }

  inline TestRequiredForeign& operator=(const TestRequiredForeign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequiredForeign& operator=(TestRequiredForeign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequiredForeign& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRequiredForeign* internal_default_instance() {
    return reinterpret_cast<const TestRequiredForeign*>(
               &_TestRequiredForeign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TestRequiredForeign& a, TestRequiredForeign& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequiredForeign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequiredForeign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRequiredForeign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRequiredForeign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRequiredForeign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRequiredForeign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequiredForeign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestRequiredForeign";
  }
  protected:
  explicit TestRequiredForeign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedMessageFieldNumber = 2,
    kOptionalMessageFieldNumber = 1,
    kDummyFieldNumber = 3,
  };
  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  int repeated_message_size() const;
  private:
  int _internal_repeated_message_size() const;
  public:
  void clear_repeated_message();
  ::protobuf_unittest::TestRequired* mutable_repeated_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired >*
      mutable_repeated_message();
  private:
  const ::protobuf_unittest::TestRequired& _internal_repeated_message(int index) const;
  ::protobuf_unittest::TestRequired* _internal_add_repeated_message();
  public:
  const ::protobuf_unittest::TestRequired& repeated_message(int index) const;
  ::protobuf_unittest::TestRequired* add_repeated_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired >&
      repeated_message() const;

  // optional .protobuf_unittest.TestRequired optional_message = 1;
  bool has_optional_message() const;
  private:
  bool _internal_has_optional_message() const;
  public:
  void clear_optional_message();
  const ::protobuf_unittest::TestRequired& optional_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestRequired* release_optional_message();
  ::protobuf_unittest::TestRequired* mutable_optional_message();
  void set_allocated_optional_message(::protobuf_unittest::TestRequired* optional_message);
  private:
  const ::protobuf_unittest::TestRequired& _internal_optional_message() const;
  ::protobuf_unittest::TestRequired* _internal_mutable_optional_message();
  public:
  void unsafe_arena_set_allocated_optional_message(
      ::protobuf_unittest::TestRequired* optional_message);
  ::protobuf_unittest::TestRequired* unsafe_arena_release_optional_message();

  // optional int32 dummy = 3;
  bool has_dummy() const;
  private:
  bool _internal_has_dummy() const;
  public:
  void clear_dummy();
  int32_t dummy() const;
  void set_dummy(int32_t value);
  private:
  int32_t _internal_dummy() const;
  void _internal_set_dummy(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRequiredForeign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired > repeated_message_;
  ::protobuf_unittest::TestRequired* optional_message_;
  int32_t dummy_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestRequiredMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestRequiredMessage) */ {
 public:
  inline TestRequiredMessage() : TestRequiredMessage(nullptr) {}
  ~TestRequiredMessage() override;
  explicit PROTOBUF_CONSTEXPR TestRequiredMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRequiredMessage(const TestRequiredMessage& from);
  TestRequiredMessage(TestRequiredMessage&& from) noexcept
    : TestRequiredMessage() {
    *this = ::std::move(from);
  }

  inline TestRequiredMessage& operator=(const TestRequiredMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequiredMessage& operator=(TestRequiredMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequiredMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRequiredMessage* internal_default_instance() {
    return reinterpret_cast<const TestRequiredMessage*>(
               &_TestRequiredMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TestRequiredMessage& a, TestRequiredMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequiredMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequiredMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRequiredMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRequiredMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRequiredMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRequiredMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequiredMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestRequiredMessage";
  }
  protected:
  explicit TestRequiredMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedMessageFieldNumber = 2,
    kOptionalMessageFieldNumber = 1,
    kRequiredMessageFieldNumber = 3,
  };
  // repeated .protobuf_unittest.TestRequired repeated_message = 2;
  int repeated_message_size() const;
  private:
  int _internal_repeated_message_size() const;
  public:
  void clear_repeated_message();
  ::protobuf_unittest::TestRequired* mutable_repeated_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired >*
      mutable_repeated_message();
  private:
  const ::protobuf_unittest::TestRequired& _internal_repeated_message(int index) const;
  ::protobuf_unittest::TestRequired* _internal_add_repeated_message();
  public:
  const ::protobuf_unittest::TestRequired& repeated_message(int index) const;
  ::protobuf_unittest::TestRequired* add_repeated_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired >&
      repeated_message() const;

  // optional .protobuf_unittest.TestRequired optional_message = 1;
  bool has_optional_message() const;
  private:
  bool _internal_has_optional_message() const;
  public:
  void clear_optional_message();
  const ::protobuf_unittest::TestRequired& optional_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestRequired* release_optional_message();
  ::protobuf_unittest::TestRequired* mutable_optional_message();
  void set_allocated_optional_message(::protobuf_unittest::TestRequired* optional_message);
  private:
  const ::protobuf_unittest::TestRequired& _internal_optional_message() const;
  ::protobuf_unittest::TestRequired* _internal_mutable_optional_message();
  public:
  void unsafe_arena_set_allocated_optional_message(
      ::protobuf_unittest::TestRequired* optional_message);
  ::protobuf_unittest::TestRequired* unsafe_arena_release_optional_message();

  // required .protobuf_unittest.TestRequired required_message = 3;
  bool has_required_message() const;
  private:
  bool _internal_has_required_message() const;
  public:
  void clear_required_message();
  const ::protobuf_unittest::TestRequired& required_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestRequired* release_required_message();
  ::protobuf_unittest::TestRequired* mutable_required_message();
  void set_allocated_required_message(::protobuf_unittest::TestRequired* required_message);
  private:
  const ::protobuf_unittest::TestRequired& _internal_required_message() const;
  ::protobuf_unittest::TestRequired* _internal_mutable_required_message();
  public:
  void unsafe_arena_set_allocated_required_message(
      ::protobuf_unittest::TestRequired* required_message);
  ::protobuf_unittest::TestRequired* unsafe_arena_release_required_message();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRequiredMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired > repeated_message_;
  ::protobuf_unittest::TestRequired* optional_message_;
  ::protobuf_unittest::TestRequired* required_message_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedRequiredForeign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedRequiredForeign) */ {
 public:
  inline TestNestedRequiredForeign() : TestNestedRequiredForeign(nullptr) {}
  ~TestNestedRequiredForeign() override;
  explicit PROTOBUF_CONSTEXPR TestNestedRequiredForeign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedRequiredForeign(const TestNestedRequiredForeign& from);
  TestNestedRequiredForeign(TestNestedRequiredForeign&& from) noexcept
    : TestNestedRequiredForeign() {
    *this = ::std::move(from);
  }

  inline TestNestedRequiredForeign& operator=(const TestNestedRequiredForeign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedRequiredForeign& operator=(TestNestedRequiredForeign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedRequiredForeign& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedRequiredForeign* internal_default_instance() {
    return reinterpret_cast<const TestNestedRequiredForeign*>(
               &_TestNestedRequiredForeign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(TestNestedRequiredForeign& a, TestNestedRequiredForeign& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedRequiredForeign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedRequiredForeign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedRequiredForeign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedRequiredForeign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedRequiredForeign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedRequiredForeign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedRequiredForeign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedRequiredForeign";
  }
  protected:
  explicit TestNestedRequiredForeign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kDummyFieldNumber = 3,
  };
  // optional .protobuf_unittest.TestNestedRequiredForeign child = 1;
  bool has_child() const;
  private:
  bool _internal_has_child() const;
  public:
  void clear_child();
  const ::protobuf_unittest::TestNestedRequiredForeign& child() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestNestedRequiredForeign* release_child();
  ::protobuf_unittest::TestNestedRequiredForeign* mutable_child();
  void set_allocated_child(::protobuf_unittest::TestNestedRequiredForeign* child);
  private:
  const ::protobuf_unittest::TestNestedRequiredForeign& _internal_child() const;
  ::protobuf_unittest::TestNestedRequiredForeign* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::protobuf_unittest::TestNestedRequiredForeign* child);
  ::protobuf_unittest::TestNestedRequiredForeign* unsafe_arena_release_child();

  // optional .protobuf_unittest.TestRequiredForeign payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::protobuf_unittest::TestRequiredForeign& payload() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestRequiredForeign* release_payload();
  ::protobuf_unittest::TestRequiredForeign* mutable_payload();
  void set_allocated_payload(::protobuf_unittest::TestRequiredForeign* payload);
  private:
  const ::protobuf_unittest::TestRequiredForeign& _internal_payload() const;
  ::protobuf_unittest::TestRequiredForeign* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::protobuf_unittest::TestRequiredForeign* payload);
  ::protobuf_unittest::TestRequiredForeign* unsafe_arena_release_payload();

  // optional int32 dummy = 3;
  bool has_dummy() const;
  private:
  bool _internal_has_dummy() const;
  public:
  void clear_dummy();
  int32_t dummy() const;
  void set_dummy(int32_t value);
  private:
  int32_t _internal_dummy() const;
  void _internal_set_dummy(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedRequiredForeign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestNestedRequiredForeign* child_;
  ::protobuf_unittest::TestRequiredForeign* payload_;
  int32_t dummy_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestForeignNested final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestForeignNested) */ {
 public:
  inline TestForeignNested() : TestForeignNested(nullptr) {}
  ~TestForeignNested() override;
  explicit PROTOBUF_CONSTEXPR TestForeignNested(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestForeignNested(const TestForeignNested& from);
  TestForeignNested(TestForeignNested&& from) noexcept
    : TestForeignNested() {
    *this = ::std::move(from);
  }

  inline TestForeignNested& operator=(const TestForeignNested& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestForeignNested& operator=(TestForeignNested&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestForeignNested& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestForeignNested* internal_default_instance() {
    return reinterpret_cast<const TestForeignNested*>(
               &_TestForeignNested_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(TestForeignNested& a, TestForeignNested& b) {
    a.Swap(&b);
  }
  inline void Swap(TestForeignNested* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestForeignNested* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestForeignNested* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestForeignNested>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestForeignNested& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestForeignNested& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestForeignNested* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestForeignNested";
  }
  protected:
  explicit TestForeignNested(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForeignNestedFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
  bool has_foreign_nested() const;
  private:
  bool _internal_has_foreign_nested() const;
  public:
  void clear_foreign_nested();
  const ::protobuf_unittest::TestAllTypes_NestedMessage& foreign_nested() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes_NestedMessage* release_foreign_nested();
  ::protobuf_unittest::TestAllTypes_NestedMessage* mutable_foreign_nested();
  void set_allocated_foreign_nested(::protobuf_unittest::TestAllTypes_NestedMessage* foreign_nested);
  private:
  const ::protobuf_unittest::TestAllTypes_NestedMessage& _internal_foreign_nested() const;
  ::protobuf_unittest::TestAllTypes_NestedMessage* _internal_mutable_foreign_nested();
  public:
  void unsafe_arena_set_allocated_foreign_nested(
      ::protobuf_unittest::TestAllTypes_NestedMessage* foreign_nested);
  ::protobuf_unittest::TestAllTypes_NestedMessage* unsafe_arena_release_foreign_nested();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestForeignNested)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypes_NestedMessage* foreign_nested_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestEmptyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestEmptyMessage) */ {
 public:
  inline TestEmptyMessage() : TestEmptyMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TestEmptyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestEmptyMessage(const TestEmptyMessage& from);
  TestEmptyMessage(TestEmptyMessage&& from) noexcept
    : TestEmptyMessage() {
    *this = ::std::move(from);
  }

  inline TestEmptyMessage& operator=(const TestEmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEmptyMessage& operator=(TestEmptyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestEmptyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestEmptyMessage* internal_default_instance() {
    return reinterpret_cast<const TestEmptyMessage*>(
               &_TestEmptyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TestEmptyMessage& a, TestEmptyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEmptyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestEmptyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestEmptyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestEmptyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestEmptyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestEmptyMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestEmptyMessage";
  }
  protected:
  explicit TestEmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEmptyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestEmptyMessageWithExtensions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestEmptyMessageWithExtensions) */ {
 public:
  inline TestEmptyMessageWithExtensions() : TestEmptyMessageWithExtensions(nullptr) {}
  ~TestEmptyMessageWithExtensions() override;
  explicit PROTOBUF_CONSTEXPR TestEmptyMessageWithExtensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestEmptyMessageWithExtensions(const TestEmptyMessageWithExtensions& from);
  TestEmptyMessageWithExtensions(TestEmptyMessageWithExtensions&& from) noexcept
    : TestEmptyMessageWithExtensions() {
    *this = ::std::move(from);
  }

  inline TestEmptyMessageWithExtensions& operator=(const TestEmptyMessageWithExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEmptyMessageWithExtensions& operator=(TestEmptyMessageWithExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestEmptyMessageWithExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestEmptyMessageWithExtensions* internal_default_instance() {
    return reinterpret_cast<const TestEmptyMessageWithExtensions*>(
               &_TestEmptyMessageWithExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(TestEmptyMessageWithExtensions& a, TestEmptyMessageWithExtensions& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEmptyMessageWithExtensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestEmptyMessageWithExtensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestEmptyMessageWithExtensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestEmptyMessageWithExtensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestEmptyMessageWithExtensions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestEmptyMessageWithExtensions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestEmptyMessageWithExtensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestEmptyMessageWithExtensions";
  }
  protected:
  explicit TestEmptyMessageWithExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestEmptyMessageWithExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEmptyMessageWithExtensions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestPickleNestedMessage_NestedMessage_NestedNestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage) */ {
 public:
  inline TestPickleNestedMessage_NestedMessage_NestedNestedMessage() : TestPickleNestedMessage_NestedMessage_NestedNestedMessage(nullptr) {}
  ~TestPickleNestedMessage_NestedMessage_NestedNestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestPickleNestedMessage_NestedMessage_NestedNestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestPickleNestedMessage_NestedMessage_NestedNestedMessage(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from);
  TestPickleNestedMessage_NestedMessage_NestedNestedMessage(TestPickleNestedMessage_NestedMessage_NestedNestedMessage&& from) noexcept
    : TestPickleNestedMessage_NestedMessage_NestedNestedMessage() {
    *this = ::std::move(from);
  }

  inline TestPickleNestedMessage_NestedMessage_NestedNestedMessage& operator=(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPickleNestedMessage_NestedMessage_NestedNestedMessage& operator=(TestPickleNestedMessage_NestedMessage_NestedNestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestPickleNestedMessage_NestedMessage_NestedNestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestPickleNestedMessage_NestedMessage_NestedNestedMessage*>(
               &_TestPickleNestedMessage_NestedMessage_NestedNestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TestPickleNestedMessage_NestedMessage_NestedNestedMessage& a, TestPickleNestedMessage_NestedMessage_NestedNestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPickleNestedMessage_NestedMessage_NestedNestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPickleNestedMessage_NestedMessage_NestedNestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestPickleNestedMessage_NestedMessage_NestedNestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestPickleNestedMessage_NestedMessage_NestedNestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestPickleNestedMessage_NestedMessage_NestedNestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPickleNestedMessage_NestedMessage_NestedNestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage";
  }
  protected:
  explicit TestPickleNestedMessage_NestedMessage_NestedNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 1,
  };
  // optional int32 cc = 1;
  bool has_cc() const;
  private:
  bool _internal_has_cc() const;
  public:
  void clear_cc();
  int32_t cc() const;
  void set_cc(int32_t value);
  private:
  int32_t _internal_cc() const;
  void _internal_set_cc(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t cc_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestPickleNestedMessage_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestPickleNestedMessage.NestedMessage) */ {
 public:
  inline TestPickleNestedMessage_NestedMessage() : TestPickleNestedMessage_NestedMessage(nullptr) {}
  ~TestPickleNestedMessage_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestPickleNestedMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestPickleNestedMessage_NestedMessage(const TestPickleNestedMessage_NestedMessage& from);
  TestPickleNestedMessage_NestedMessage(TestPickleNestedMessage_NestedMessage&& from) noexcept
    : TestPickleNestedMessage_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestPickleNestedMessage_NestedMessage& operator=(const TestPickleNestedMessage_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPickleNestedMessage_NestedMessage& operator=(TestPickleNestedMessage_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestPickleNestedMessage_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestPickleNestedMessage_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestPickleNestedMessage_NestedMessage*>(
               &_TestPickleNestedMessage_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TestPickleNestedMessage_NestedMessage& a, TestPickleNestedMessage_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPickleNestedMessage_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPickleNestedMessage_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestPickleNestedMessage_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestPickleNestedMessage_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestPickleNestedMessage_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestPickleNestedMessage_NestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPickleNestedMessage_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestPickleNestedMessage.NestedMessage";
  }
  protected:
  explicit TestPickleNestedMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestPickleNestedMessage_NestedMessage_NestedNestedMessage NestedNestedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kBbFieldNumber = 1,
  };
  // optional int32 bb = 1;
  bool has_bb() const;
  private:
  bool _internal_has_bb() const;
  public:
  void clear_bb();
  int32_t bb() const;
  void set_bb(int32_t value);
  private:
  int32_t _internal_bb() const;
  void _internal_set_bb(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestPickleNestedMessage.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t bb_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestPickleNestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestPickleNestedMessage) */ {
 public:
  inline TestPickleNestedMessage() : TestPickleNestedMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TestPickleNestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestPickleNestedMessage(const TestPickleNestedMessage& from);
  TestPickleNestedMessage(TestPickleNestedMessage&& from) noexcept
    : TestPickleNestedMessage() {
    *this = ::std::move(from);
  }

  inline TestPickleNestedMessage& operator=(const TestPickleNestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPickleNestedMessage& operator=(TestPickleNestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestPickleNestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestPickleNestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestPickleNestedMessage*>(
               &_TestPickleNestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TestPickleNestedMessage& a, TestPickleNestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPickleNestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPickleNestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestPickleNestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestPickleNestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TestPickleNestedMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TestPickleNestedMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestPickleNestedMessage";
  }
  protected:
  explicit TestPickleNestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestPickleNestedMessage_NestedMessage NestedMessage;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestPickleNestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestMultipleExtensionRanges final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestMultipleExtensionRanges) */ {
 public:
  inline TestMultipleExtensionRanges() : TestMultipleExtensionRanges(nullptr) {}
  ~TestMultipleExtensionRanges() override;
  explicit PROTOBUF_CONSTEXPR TestMultipleExtensionRanges(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMultipleExtensionRanges(const TestMultipleExtensionRanges& from);
  TestMultipleExtensionRanges(TestMultipleExtensionRanges&& from) noexcept
    : TestMultipleExtensionRanges() {
    *this = ::std::move(from);
  }

  inline TestMultipleExtensionRanges& operator=(const TestMultipleExtensionRanges& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMultipleExtensionRanges& operator=(TestMultipleExtensionRanges&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMultipleExtensionRanges& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMultipleExtensionRanges* internal_default_instance() {
    return reinterpret_cast<const TestMultipleExtensionRanges*>(
               &_TestMultipleExtensionRanges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TestMultipleExtensionRanges& a, TestMultipleExtensionRanges& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMultipleExtensionRanges* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMultipleExtensionRanges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMultipleExtensionRanges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMultipleExtensionRanges>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMultipleExtensionRanges& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMultipleExtensionRanges& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMultipleExtensionRanges* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestMultipleExtensionRanges";
  }
  protected:
  explicit TestMultipleExtensionRanges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestMultipleExtensionRanges, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestMultipleExtensionRanges)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestReallyLargeTagNumber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestReallyLargeTagNumber) */ {
 public:
  inline TestReallyLargeTagNumber() : TestReallyLargeTagNumber(nullptr) {}
  ~TestReallyLargeTagNumber() override;
  explicit PROTOBUF_CONSTEXPR TestReallyLargeTagNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestReallyLargeTagNumber(const TestReallyLargeTagNumber& from);
  TestReallyLargeTagNumber(TestReallyLargeTagNumber&& from) noexcept
    : TestReallyLargeTagNumber() {
    *this = ::std::move(from);
  }

  inline TestReallyLargeTagNumber& operator=(const TestReallyLargeTagNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestReallyLargeTagNumber& operator=(TestReallyLargeTagNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestReallyLargeTagNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestReallyLargeTagNumber* internal_default_instance() {
    return reinterpret_cast<const TestReallyLargeTagNumber*>(
               &_TestReallyLargeTagNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TestReallyLargeTagNumber& a, TestReallyLargeTagNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(TestReallyLargeTagNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestReallyLargeTagNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestReallyLargeTagNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestReallyLargeTagNumber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestReallyLargeTagNumber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestReallyLargeTagNumber& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestReallyLargeTagNumber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestReallyLargeTagNumber";
  }
  protected:
  explicit TestReallyLargeTagNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBbFieldNumber = 268435455,
  };
  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // optional int32 bb = 268435455;
  bool has_bb() const;
  private:
  bool _internal_has_bb() const;
  public:
  void clear_bb();
  int32_t bb() const;
  void set_bb(int32_t value);
  private:
  int32_t _internal_bb() const;
  void _internal_set_bb(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestReallyLargeTagNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  int32_t bb_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestRecursiveMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestRecursiveMessage) */ {
 public:
  inline TestRecursiveMessage() : TestRecursiveMessage(nullptr) {}
  ~TestRecursiveMessage() override;
  explicit PROTOBUF_CONSTEXPR TestRecursiveMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRecursiveMessage(const TestRecursiveMessage& from);
  TestRecursiveMessage(TestRecursiveMessage&& from) noexcept
    : TestRecursiveMessage() {
    *this = ::std::move(from);
  }

  inline TestRecursiveMessage& operator=(const TestRecursiveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRecursiveMessage& operator=(TestRecursiveMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRecursiveMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRecursiveMessage* internal_default_instance() {
    return reinterpret_cast<const TestRecursiveMessage*>(
               &_TestRecursiveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TestRecursiveMessage& a, TestRecursiveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRecursiveMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRecursiveMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRecursiveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRecursiveMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRecursiveMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRecursiveMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRecursiveMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestRecursiveMessage";
  }
  protected:
  explicit TestRecursiveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kIFieldNumber = 2,
  };
  // optional .protobuf_unittest.TestRecursiveMessage a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::protobuf_unittest::TestRecursiveMessage& a() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestRecursiveMessage* release_a();
  ::protobuf_unittest::TestRecursiveMessage* mutable_a();
  void set_allocated_a(::protobuf_unittest::TestRecursiveMessage* a);
  private:
  const ::protobuf_unittest::TestRecursiveMessage& _internal_a() const;
  ::protobuf_unittest::TestRecursiveMessage* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::protobuf_unittest::TestRecursiveMessage* a);
  ::protobuf_unittest::TestRecursiveMessage* unsafe_arena_release_a();

  // optional int32 i = 2;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  int32_t i() const;
  void set_i(int32_t value);
  private:
  int32_t _internal_i() const;
  void _internal_set_i(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRecursiveMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestRecursiveMessage* a_;
  int32_t i_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestMutualRecursionA_SubMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestMutualRecursionA.SubMessage) */ {
 public:
  inline TestMutualRecursionA_SubMessage() : TestMutualRecursionA_SubMessage(nullptr) {}
  ~TestMutualRecursionA_SubMessage() override;
  explicit PROTOBUF_CONSTEXPR TestMutualRecursionA_SubMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMutualRecursionA_SubMessage(const TestMutualRecursionA_SubMessage& from);
  TestMutualRecursionA_SubMessage(TestMutualRecursionA_SubMessage&& from) noexcept
    : TestMutualRecursionA_SubMessage() {
    *this = ::std::move(from);
  }

  inline TestMutualRecursionA_SubMessage& operator=(const TestMutualRecursionA_SubMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMutualRecursionA_SubMessage& operator=(TestMutualRecursionA_SubMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMutualRecursionA_SubMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMutualRecursionA_SubMessage* internal_default_instance() {
    return reinterpret_cast<const TestMutualRecursionA_SubMessage*>(
               &_TestMutualRecursionA_SubMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TestMutualRecursionA_SubMessage& a, TestMutualRecursionA_SubMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMutualRecursionA_SubMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMutualRecursionA_SubMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMutualRecursionA_SubMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMutualRecursionA_SubMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMutualRecursionA_SubMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMutualRecursionA_SubMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMutualRecursionA_SubMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestMutualRecursionA.SubMessage";
  }
  protected:
  explicit TestMutualRecursionA_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestMutualRecursionB b = 1;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::protobuf_unittest::TestMutualRecursionB& b() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestMutualRecursionB* release_b();
  ::protobuf_unittest::TestMutualRecursionB* mutable_b();
  void set_allocated_b(::protobuf_unittest::TestMutualRecursionB* b);
  private:
  const ::protobuf_unittest::TestMutualRecursionB& _internal_b() const;
  ::protobuf_unittest::TestMutualRecursionB* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::protobuf_unittest::TestMutualRecursionB* b);
  ::protobuf_unittest::TestMutualRecursionB* unsafe_arena_release_b();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestMutualRecursionA.SubMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestMutualRecursionB* b_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestMutualRecursionA_SubGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestMutualRecursionA.SubGroup) */ {
 public:
  inline TestMutualRecursionA_SubGroup() : TestMutualRecursionA_SubGroup(nullptr) {}
  ~TestMutualRecursionA_SubGroup() override;
  explicit PROTOBUF_CONSTEXPR TestMutualRecursionA_SubGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMutualRecursionA_SubGroup(const TestMutualRecursionA_SubGroup& from);
  TestMutualRecursionA_SubGroup(TestMutualRecursionA_SubGroup&& from) noexcept
    : TestMutualRecursionA_SubGroup() {
    *this = ::std::move(from);
  }

  inline TestMutualRecursionA_SubGroup& operator=(const TestMutualRecursionA_SubGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMutualRecursionA_SubGroup& operator=(TestMutualRecursionA_SubGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMutualRecursionA_SubGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMutualRecursionA_SubGroup* internal_default_instance() {
    return reinterpret_cast<const TestMutualRecursionA_SubGroup*>(
               &_TestMutualRecursionA_SubGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TestMutualRecursionA_SubGroup& a, TestMutualRecursionA_SubGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMutualRecursionA_SubGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMutualRecursionA_SubGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMutualRecursionA_SubGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMutualRecursionA_SubGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMutualRecursionA_SubGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMutualRecursionA_SubGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMutualRecursionA_SubGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestMutualRecursionA.SubGroup";
  }
  protected:
  explicit TestMutualRecursionA_SubGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubMessageFieldNumber = 3,
    kNotInThisSccFieldNumber = 4,
  };
  // optional .protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
  bool has_sub_message() const;
  private:
  bool _internal_has_sub_message() const;
  public:
  void clear_sub_message();
  const ::protobuf_unittest::TestMutualRecursionA_SubMessage& sub_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestMutualRecursionA_SubMessage* release_sub_message();
  ::protobuf_unittest::TestMutualRecursionA_SubMessage* mutable_sub_message();
  void set_allocated_sub_message(::protobuf_unittest::TestMutualRecursionA_SubMessage* sub_message);
  private:
  const ::protobuf_unittest::TestMutualRecursionA_SubMessage& _internal_sub_message() const;
  ::protobuf_unittest::TestMutualRecursionA_SubMessage* _internal_mutable_sub_message();
  public:
  void unsafe_arena_set_allocated_sub_message(
      ::protobuf_unittest::TestMutualRecursionA_SubMessage* sub_message);
  ::protobuf_unittest::TestMutualRecursionA_SubMessage* unsafe_arena_release_sub_message();

  // optional .protobuf_unittest.TestAllTypes not_in_this_scc = 4;
  bool has_not_in_this_scc() const;
  private:
  bool _internal_has_not_in_this_scc() const;
  public:
  void clear_not_in_this_scc();
  const ::protobuf_unittest::TestAllTypes& not_in_this_scc() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_not_in_this_scc();
  ::protobuf_unittest::TestAllTypes* mutable_not_in_this_scc();
  void set_allocated_not_in_this_scc(::protobuf_unittest::TestAllTypes* not_in_this_scc);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_not_in_this_scc() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_not_in_this_scc();
  public:
  void unsafe_arena_set_allocated_not_in_this_scc(
      ::protobuf_unittest::TestAllTypes* not_in_this_scc);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_not_in_this_scc();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestMutualRecursionA.SubGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestMutualRecursionA_SubMessage* sub_message_;
  ::protobuf_unittest::TestAllTypes* not_in_this_scc_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestMutualRecursionA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestMutualRecursionA) */ {
 public:
  inline TestMutualRecursionA() : TestMutualRecursionA(nullptr) {}
  ~TestMutualRecursionA() override;
  explicit PROTOBUF_CONSTEXPR TestMutualRecursionA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMutualRecursionA(const TestMutualRecursionA& from);
  TestMutualRecursionA(TestMutualRecursionA&& from) noexcept
    : TestMutualRecursionA() {
    *this = ::std::move(from);
  }

  inline TestMutualRecursionA& operator=(const TestMutualRecursionA& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMutualRecursionA& operator=(TestMutualRecursionA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMutualRecursionA& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMutualRecursionA* internal_default_instance() {
    return reinterpret_cast<const TestMutualRecursionA*>(
               &_TestMutualRecursionA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TestMutualRecursionA& a, TestMutualRecursionA& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMutualRecursionA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMutualRecursionA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMutualRecursionA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMutualRecursionA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMutualRecursionA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMutualRecursionA& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMutualRecursionA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestMutualRecursionA";
  }
  protected:
  explicit TestMutualRecursionA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestMutualRecursionA_SubMessage SubMessage;
  typedef TestMutualRecursionA_SubGroup SubGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kBbFieldNumber = 1,
    kSubgroupFieldNumber = 2,
  };
  // optional .protobuf_unittest.TestMutualRecursionB bb = 1;
  bool has_bb() const;
  private:
  bool _internal_has_bb() const;
  public:
  void clear_bb();
  const ::protobuf_unittest::TestMutualRecursionB& bb() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestMutualRecursionB* release_bb();
  ::protobuf_unittest::TestMutualRecursionB* mutable_bb();
  void set_allocated_bb(::protobuf_unittest::TestMutualRecursionB* bb);
  private:
  const ::protobuf_unittest::TestMutualRecursionB& _internal_bb() const;
  ::protobuf_unittest::TestMutualRecursionB* _internal_mutable_bb();
  public:
  void unsafe_arena_set_allocated_bb(
      ::protobuf_unittest::TestMutualRecursionB* bb);
  ::protobuf_unittest::TestMutualRecursionB* unsafe_arena_release_bb();

  // optional group SubGroup = 2 { ... };
  bool has_subgroup() const;
  private:
  bool _internal_has_subgroup() const;
  public:
  void clear_subgroup();
  const ::protobuf_unittest::TestMutualRecursionA_SubGroup& subgroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestMutualRecursionA_SubGroup* release_subgroup();
  ::protobuf_unittest::TestMutualRecursionA_SubGroup* mutable_subgroup();
  void set_allocated_subgroup(::protobuf_unittest::TestMutualRecursionA_SubGroup* subgroup);
  private:
  const ::protobuf_unittest::TestMutualRecursionA_SubGroup& _internal_subgroup() const;
  ::protobuf_unittest::TestMutualRecursionA_SubGroup* _internal_mutable_subgroup();
  public:
  void unsafe_arena_set_allocated_subgroup(
      ::protobuf_unittest::TestMutualRecursionA_SubGroup* subgroup);
  ::protobuf_unittest::TestMutualRecursionA_SubGroup* unsafe_arena_release_subgroup();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestMutualRecursionA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestMutualRecursionB* bb_;
  ::protobuf_unittest::TestMutualRecursionA_SubGroup* subgroup_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestMutualRecursionB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestMutualRecursionB) */ {
 public:
  inline TestMutualRecursionB() : TestMutualRecursionB(nullptr) {}
  ~TestMutualRecursionB() override;
  explicit PROTOBUF_CONSTEXPR TestMutualRecursionB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMutualRecursionB(const TestMutualRecursionB& from);
  TestMutualRecursionB(TestMutualRecursionB&& from) noexcept
    : TestMutualRecursionB() {
    *this = ::std::move(from);
  }

  inline TestMutualRecursionB& operator=(const TestMutualRecursionB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMutualRecursionB& operator=(TestMutualRecursionB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMutualRecursionB& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMutualRecursionB* internal_default_instance() {
    return reinterpret_cast<const TestMutualRecursionB*>(
               &_TestMutualRecursionB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TestMutualRecursionB& a, TestMutualRecursionB& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMutualRecursionB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMutualRecursionB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMutualRecursionB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMutualRecursionB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMutualRecursionB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMutualRecursionB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMutualRecursionB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestMutualRecursionB";
  }
  protected:
  explicit TestMutualRecursionB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kOptionalInt32FieldNumber = 2,
  };
  // optional .protobuf_unittest.TestMutualRecursionA a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::protobuf_unittest::TestMutualRecursionA& a() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestMutualRecursionA* release_a();
  ::protobuf_unittest::TestMutualRecursionA* mutable_a();
  void set_allocated_a(::protobuf_unittest::TestMutualRecursionA* a);
  private:
  const ::protobuf_unittest::TestMutualRecursionA& _internal_a() const;
  ::protobuf_unittest::TestMutualRecursionA* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::protobuf_unittest::TestMutualRecursionA* a);
  ::protobuf_unittest::TestMutualRecursionA* unsafe_arena_release_a();

  // optional int32 optional_int32 = 2;
  bool has_optional_int32() const;
  private:
  bool _internal_has_optional_int32() const;
  public:
  void clear_optional_int32();
  int32_t optional_int32() const;
  void set_optional_int32(int32_t value);
  private:
  int32_t _internal_optional_int32() const;
  void _internal_set_optional_int32(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestMutualRecursionB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestMutualRecursionA* a_;
  int32_t optional_int32_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestIsInitialized_SubMessage_SubGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup) */ {
 public:
  inline TestIsInitialized_SubMessage_SubGroup() : TestIsInitialized_SubMessage_SubGroup(nullptr) {}
  ~TestIsInitialized_SubMessage_SubGroup() override;
  explicit PROTOBUF_CONSTEXPR TestIsInitialized_SubMessage_SubGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestIsInitialized_SubMessage_SubGroup(const TestIsInitialized_SubMessage_SubGroup& from);
  TestIsInitialized_SubMessage_SubGroup(TestIsInitialized_SubMessage_SubGroup&& from) noexcept
    : TestIsInitialized_SubMessage_SubGroup() {
    *this = ::std::move(from);
  }

  inline TestIsInitialized_SubMessage_SubGroup& operator=(const TestIsInitialized_SubMessage_SubGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestIsInitialized_SubMessage_SubGroup& operator=(TestIsInitialized_SubMessage_SubGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestIsInitialized_SubMessage_SubGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestIsInitialized_SubMessage_SubGroup* internal_default_instance() {
    return reinterpret_cast<const TestIsInitialized_SubMessage_SubGroup*>(
               &_TestIsInitialized_SubMessage_SubGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TestIsInitialized_SubMessage_SubGroup& a, TestIsInitialized_SubMessage_SubGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestIsInitialized_SubMessage_SubGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestIsInitialized_SubMessage_SubGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestIsInitialized_SubMessage_SubGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestIsInitialized_SubMessage_SubGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestIsInitialized_SubMessage_SubGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestIsInitialized_SubMessage_SubGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestIsInitialized_SubMessage_SubGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestIsInitialized.SubMessage.SubGroup";
  }
  protected:
  explicit TestIsInitialized_SubMessage_SubGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 2,
  };
  // required int32 i = 2;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  int32_t i() const;
  void set_i(int32_t value);
  private:
  int32_t _internal_i() const;
  void _internal_set_i(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t i_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestIsInitialized_SubMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestIsInitialized.SubMessage) */ {
 public:
  inline TestIsInitialized_SubMessage() : TestIsInitialized_SubMessage(nullptr) {}
  ~TestIsInitialized_SubMessage() override;
  explicit PROTOBUF_CONSTEXPR TestIsInitialized_SubMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestIsInitialized_SubMessage(const TestIsInitialized_SubMessage& from);
  TestIsInitialized_SubMessage(TestIsInitialized_SubMessage&& from) noexcept
    : TestIsInitialized_SubMessage() {
    *this = ::std::move(from);
  }

  inline TestIsInitialized_SubMessage& operator=(const TestIsInitialized_SubMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestIsInitialized_SubMessage& operator=(TestIsInitialized_SubMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestIsInitialized_SubMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestIsInitialized_SubMessage* internal_default_instance() {
    return reinterpret_cast<const TestIsInitialized_SubMessage*>(
               &_TestIsInitialized_SubMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TestIsInitialized_SubMessage& a, TestIsInitialized_SubMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestIsInitialized_SubMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestIsInitialized_SubMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestIsInitialized_SubMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestIsInitialized_SubMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestIsInitialized_SubMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestIsInitialized_SubMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestIsInitialized_SubMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestIsInitialized.SubMessage";
  }
  protected:
  explicit TestIsInitialized_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestIsInitialized_SubMessage_SubGroup SubGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kSubgroupFieldNumber = 1,
  };
  // optional group SubGroup = 1 { ... };
  bool has_subgroup() const;
  private:
  bool _internal_has_subgroup() const;
  public:
  void clear_subgroup();
  const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup& subgroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* release_subgroup();
  ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* mutable_subgroup();
  void set_allocated_subgroup(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* subgroup);
  private:
  const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup& _internal_subgroup() const;
  ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* _internal_mutable_subgroup();
  public:
  void unsafe_arena_set_allocated_subgroup(
      ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* subgroup);
  ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* unsafe_arena_release_subgroup();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestIsInitialized.SubMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* subgroup_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestIsInitialized final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestIsInitialized) */ {
 public:
  inline TestIsInitialized() : TestIsInitialized(nullptr) {}
  ~TestIsInitialized() override;
  explicit PROTOBUF_CONSTEXPR TestIsInitialized(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestIsInitialized(const TestIsInitialized& from);
  TestIsInitialized(TestIsInitialized&& from) noexcept
    : TestIsInitialized() {
    *this = ::std::move(from);
  }

  inline TestIsInitialized& operator=(const TestIsInitialized& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestIsInitialized& operator=(TestIsInitialized&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestIsInitialized& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestIsInitialized* internal_default_instance() {
    return reinterpret_cast<const TestIsInitialized*>(
               &_TestIsInitialized_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TestIsInitialized& a, TestIsInitialized& b) {
    a.Swap(&b);
  }
  inline void Swap(TestIsInitialized* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestIsInitialized* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestIsInitialized* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestIsInitialized>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestIsInitialized& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestIsInitialized& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestIsInitialized* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestIsInitialized";
  }
  protected:
  explicit TestIsInitialized(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestIsInitialized_SubMessage SubMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kSubMessageFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
  bool has_sub_message() const;
  private:
  bool _internal_has_sub_message() const;
  public:
  void clear_sub_message();
  const ::protobuf_unittest::TestIsInitialized_SubMessage& sub_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestIsInitialized_SubMessage* release_sub_message();
  ::protobuf_unittest::TestIsInitialized_SubMessage* mutable_sub_message();
  void set_allocated_sub_message(::protobuf_unittest::TestIsInitialized_SubMessage* sub_message);
  private:
  const ::protobuf_unittest::TestIsInitialized_SubMessage& _internal_sub_message() const;
  ::protobuf_unittest::TestIsInitialized_SubMessage* _internal_mutable_sub_message();
  public:
  void unsafe_arena_set_allocated_sub_message(
      ::protobuf_unittest::TestIsInitialized_SubMessage* sub_message);
  ::protobuf_unittest::TestIsInitialized_SubMessage* unsafe_arena_release_sub_message();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestIsInitialized)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestIsInitialized_SubMessage* sub_message_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDupFieldNumber_Foo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDupFieldNumber.Foo) */ {
 public:
  inline TestDupFieldNumber_Foo() : TestDupFieldNumber_Foo(nullptr) {}
  ~TestDupFieldNumber_Foo() override;
  explicit PROTOBUF_CONSTEXPR TestDupFieldNumber_Foo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDupFieldNumber_Foo(const TestDupFieldNumber_Foo& from);
  TestDupFieldNumber_Foo(TestDupFieldNumber_Foo&& from) noexcept
    : TestDupFieldNumber_Foo() {
    *this = ::std::move(from);
  }

  inline TestDupFieldNumber_Foo& operator=(const TestDupFieldNumber_Foo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDupFieldNumber_Foo& operator=(TestDupFieldNumber_Foo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDupFieldNumber_Foo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDupFieldNumber_Foo* internal_default_instance() {
    return reinterpret_cast<const TestDupFieldNumber_Foo*>(
               &_TestDupFieldNumber_Foo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TestDupFieldNumber_Foo& a, TestDupFieldNumber_Foo& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDupFieldNumber_Foo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDupFieldNumber_Foo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDupFieldNumber_Foo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDupFieldNumber_Foo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestDupFieldNumber_Foo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestDupFieldNumber_Foo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDupFieldNumber_Foo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDupFieldNumber.Foo";
  }
  protected:
  explicit TestDupFieldNumber_Foo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
  };
  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDupFieldNumber.Foo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDupFieldNumber_Bar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDupFieldNumber.Bar) */ {
 public:
  inline TestDupFieldNumber_Bar() : TestDupFieldNumber_Bar(nullptr) {}
  ~TestDupFieldNumber_Bar() override;
  explicit PROTOBUF_CONSTEXPR TestDupFieldNumber_Bar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDupFieldNumber_Bar(const TestDupFieldNumber_Bar& from);
  TestDupFieldNumber_Bar(TestDupFieldNumber_Bar&& from) noexcept
    : TestDupFieldNumber_Bar() {
    *this = ::std::move(from);
  }

  inline TestDupFieldNumber_Bar& operator=(const TestDupFieldNumber_Bar& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDupFieldNumber_Bar& operator=(TestDupFieldNumber_Bar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDupFieldNumber_Bar& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDupFieldNumber_Bar* internal_default_instance() {
    return reinterpret_cast<const TestDupFieldNumber_Bar*>(
               &_TestDupFieldNumber_Bar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TestDupFieldNumber_Bar& a, TestDupFieldNumber_Bar& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDupFieldNumber_Bar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDupFieldNumber_Bar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDupFieldNumber_Bar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDupFieldNumber_Bar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestDupFieldNumber_Bar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestDupFieldNumber_Bar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDupFieldNumber_Bar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDupFieldNumber.Bar";
  }
  protected:
  explicit TestDupFieldNumber_Bar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
  };
  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDupFieldNumber.Bar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDupFieldNumber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDupFieldNumber) */ {
 public:
  inline TestDupFieldNumber() : TestDupFieldNumber(nullptr) {}
  ~TestDupFieldNumber() override;
  explicit PROTOBUF_CONSTEXPR TestDupFieldNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDupFieldNumber(const TestDupFieldNumber& from);
  TestDupFieldNumber(TestDupFieldNumber&& from) noexcept
    : TestDupFieldNumber() {
    *this = ::std::move(from);
  }

  inline TestDupFieldNumber& operator=(const TestDupFieldNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDupFieldNumber& operator=(TestDupFieldNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDupFieldNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDupFieldNumber* internal_default_instance() {
    return reinterpret_cast<const TestDupFieldNumber*>(
               &_TestDupFieldNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TestDupFieldNumber& a, TestDupFieldNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDupFieldNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDupFieldNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDupFieldNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDupFieldNumber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestDupFieldNumber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestDupFieldNumber& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDupFieldNumber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDupFieldNumber";
  }
  protected:
  explicit TestDupFieldNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestDupFieldNumber_Foo Foo;
  typedef TestDupFieldNumber_Bar Bar;

  // accessors -------------------------------------------------------

  enum : int {
    kFooFieldNumber = 2,
    kBarFieldNumber = 3,
    kAFieldNumber = 1,
  };
  // optional group Foo = 2 { ... };
  bool has_foo() const;
  private:
  bool _internal_has_foo() const;
  public:
  void clear_foo();
  const ::protobuf_unittest::TestDupFieldNumber_Foo& foo() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestDupFieldNumber_Foo* release_foo();
  ::protobuf_unittest::TestDupFieldNumber_Foo* mutable_foo();
  void set_allocated_foo(::protobuf_unittest::TestDupFieldNumber_Foo* foo);
  private:
  const ::protobuf_unittest::TestDupFieldNumber_Foo& _internal_foo() const;
  ::protobuf_unittest::TestDupFieldNumber_Foo* _internal_mutable_foo();
  public:
  void unsafe_arena_set_allocated_foo(
      ::protobuf_unittest::TestDupFieldNumber_Foo* foo);
  ::protobuf_unittest::TestDupFieldNumber_Foo* unsafe_arena_release_foo();

  // optional group Bar = 3 { ... };
  bool has_bar() const;
  private:
  bool _internal_has_bar() const;
  public:
  void clear_bar();
  const ::protobuf_unittest::TestDupFieldNumber_Bar& bar() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestDupFieldNumber_Bar* release_bar();
  ::protobuf_unittest::TestDupFieldNumber_Bar* mutable_bar();
  void set_allocated_bar(::protobuf_unittest::TestDupFieldNumber_Bar* bar);
  private:
  const ::protobuf_unittest::TestDupFieldNumber_Bar& _internal_bar() const;
  ::protobuf_unittest::TestDupFieldNumber_Bar* _internal_mutable_bar();
  public:
  void unsafe_arena_set_allocated_bar(
      ::protobuf_unittest::TestDupFieldNumber_Bar* bar);
  ::protobuf_unittest::TestDupFieldNumber_Bar* unsafe_arena_release_bar();

  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDupFieldNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestDupFieldNumber_Foo* foo_;
  ::protobuf_unittest::TestDupFieldNumber_Bar* bar_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestEagerMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestEagerMessage) */ {
 public:
  inline TestEagerMessage() : TestEagerMessage(nullptr) {}
  ~TestEagerMessage() override;
  explicit PROTOBUF_CONSTEXPR TestEagerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestEagerMessage(const TestEagerMessage& from);
  TestEagerMessage(TestEagerMessage&& from) noexcept
    : TestEagerMessage() {
    *this = ::std::move(from);
  }

  inline TestEagerMessage& operator=(const TestEagerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEagerMessage& operator=(TestEagerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestEagerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestEagerMessage* internal_default_instance() {
    return reinterpret_cast<const TestEagerMessage*>(
               &_TestEagerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TestEagerMessage& a, TestEagerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEagerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestEagerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestEagerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestEagerMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestEagerMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestEagerMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestEagerMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestEagerMessage";
  }
  protected:
  explicit TestEagerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubMessageFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = false];
  bool has_sub_message() const;
  private:
  bool _internal_has_sub_message() const;
  public:
  void clear_sub_message();
  const ::protobuf_unittest::TestAllTypes& sub_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_sub_message();
  ::protobuf_unittest::TestAllTypes* mutable_sub_message();
  void set_allocated_sub_message(::protobuf_unittest::TestAllTypes* sub_message);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_sub_message() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_sub_message();
  public:
  void unsafe_arena_set_allocated_sub_message(
      ::protobuf_unittest::TestAllTypes* sub_message);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_sub_message();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEagerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypes* sub_message_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestLazyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestLazyMessage) */ {
 public:
  inline TestLazyMessage() : TestLazyMessage(nullptr) {}
  ~TestLazyMessage() override;
  explicit PROTOBUF_CONSTEXPR TestLazyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestLazyMessage(const TestLazyMessage& from);
  TestLazyMessage(TestLazyMessage&& from) noexcept
    : TestLazyMessage() {
    *this = ::std::move(from);
  }

  inline TestLazyMessage& operator=(const TestLazyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestLazyMessage& operator=(TestLazyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestLazyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestLazyMessage* internal_default_instance() {
    return reinterpret_cast<const TestLazyMessage*>(
               &_TestLazyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TestLazyMessage& a, TestLazyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestLazyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestLazyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestLazyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestLazyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestLazyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestLazyMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestLazyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestLazyMessage";
  }
  protected:
  explicit TestLazyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubMessageFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = true];
  bool has_sub_message() const;
  private:
  bool _internal_has_sub_message() const;
  public:
  void clear_sub_message();
  const ::protobuf_unittest::TestAllTypes& sub_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_sub_message();
  ::protobuf_unittest::TestAllTypes* mutable_sub_message();
  void set_allocated_sub_message(::protobuf_unittest::TestAllTypes* sub_message);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_sub_message() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_sub_message();
  public:
  void unsafe_arena_set_allocated_sub_message(
      ::protobuf_unittest::TestAllTypes* sub_message);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_sub_message();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestLazyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypes* sub_message_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestEagerMaybeLazy_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestEagerMaybeLazy.NestedMessage) */ {
 public:
  inline TestEagerMaybeLazy_NestedMessage() : TestEagerMaybeLazy_NestedMessage(nullptr) {}
  ~TestEagerMaybeLazy_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestEagerMaybeLazy_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestEagerMaybeLazy_NestedMessage(const TestEagerMaybeLazy_NestedMessage& from);
  TestEagerMaybeLazy_NestedMessage(TestEagerMaybeLazy_NestedMessage&& from) noexcept
    : TestEagerMaybeLazy_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestEagerMaybeLazy_NestedMessage& operator=(const TestEagerMaybeLazy_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEagerMaybeLazy_NestedMessage& operator=(TestEagerMaybeLazy_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestEagerMaybeLazy_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestEagerMaybeLazy_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestEagerMaybeLazy_NestedMessage*>(
               &_TestEagerMaybeLazy_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(TestEagerMaybeLazy_NestedMessage& a, TestEagerMaybeLazy_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEagerMaybeLazy_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestEagerMaybeLazy_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestEagerMaybeLazy_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestEagerMaybeLazy_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestEagerMaybeLazy_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestEagerMaybeLazy_NestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestEagerMaybeLazy_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestEagerMaybeLazy.NestedMessage";
  }
  protected:
  explicit TestEagerMaybeLazy_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestPackedTypes packed = 1;
  bool has_packed() const;
  private:
  bool _internal_has_packed() const;
  public:
  void clear_packed();
  const ::protobuf_unittest::TestPackedTypes& packed() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestPackedTypes* release_packed();
  ::protobuf_unittest::TestPackedTypes* mutable_packed();
  void set_allocated_packed(::protobuf_unittest::TestPackedTypes* packed);
  private:
  const ::protobuf_unittest::TestPackedTypes& _internal_packed() const;
  ::protobuf_unittest::TestPackedTypes* _internal_mutable_packed();
  public:
  void unsafe_arena_set_allocated_packed(
      ::protobuf_unittest::TestPackedTypes* packed);
  ::protobuf_unittest::TestPackedTypes* unsafe_arena_release_packed();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEagerMaybeLazy.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestPackedTypes* packed_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestEagerMaybeLazy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestEagerMaybeLazy) */ {
 public:
  inline TestEagerMaybeLazy() : TestEagerMaybeLazy(nullptr) {}
  ~TestEagerMaybeLazy() override;
  explicit PROTOBUF_CONSTEXPR TestEagerMaybeLazy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestEagerMaybeLazy(const TestEagerMaybeLazy& from);
  TestEagerMaybeLazy(TestEagerMaybeLazy&& from) noexcept
    : TestEagerMaybeLazy() {
    *this = ::std::move(from);
  }

  inline TestEagerMaybeLazy& operator=(const TestEagerMaybeLazy& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEagerMaybeLazy& operator=(TestEagerMaybeLazy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestEagerMaybeLazy& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestEagerMaybeLazy* internal_default_instance() {
    return reinterpret_cast<const TestEagerMaybeLazy*>(
               &_TestEagerMaybeLazy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(TestEagerMaybeLazy& a, TestEagerMaybeLazy& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEagerMaybeLazy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestEagerMaybeLazy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestEagerMaybeLazy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestEagerMaybeLazy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestEagerMaybeLazy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestEagerMaybeLazy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestEagerMaybeLazy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestEagerMaybeLazy";
  }
  protected:
  explicit TestEagerMaybeLazy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestEagerMaybeLazy_NestedMessage NestedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFooFieldNumber = 1,
    kMessageBarFieldNumber = 2,
    kMessageBazFieldNumber = 3,
  };
  // optional .protobuf_unittest.TestAllTypes message_foo = 1;
  bool has_message_foo() const;
  private:
  bool _internal_has_message_foo() const;
  public:
  void clear_message_foo();
  const ::protobuf_unittest::TestAllTypes& message_foo() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_message_foo();
  ::protobuf_unittest::TestAllTypes* mutable_message_foo();
  void set_allocated_message_foo(::protobuf_unittest::TestAllTypes* message_foo);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_message_foo() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_message_foo();
  public:
  void unsafe_arena_set_allocated_message_foo(
      ::protobuf_unittest::TestAllTypes* message_foo);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_message_foo();

  // optional .protobuf_unittest.TestAllTypes message_bar = 2;
  bool has_message_bar() const;
  private:
  bool _internal_has_message_bar() const;
  public:
  void clear_message_bar();
  const ::protobuf_unittest::TestAllTypes& message_bar() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_message_bar();
  ::protobuf_unittest::TestAllTypes* mutable_message_bar();
  void set_allocated_message_bar(::protobuf_unittest::TestAllTypes* message_bar);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_message_bar() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_message_bar();
  public:
  void unsafe_arena_set_allocated_message_bar(
      ::protobuf_unittest::TestAllTypes* message_bar);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_message_bar();

  // optional .protobuf_unittest.TestEagerMaybeLazy.NestedMessage message_baz = 3;
  bool has_message_baz() const;
  private:
  bool _internal_has_message_baz() const;
  public:
  void clear_message_baz();
  const ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage& message_baz() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* release_message_baz();
  ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* mutable_message_baz();
  void set_allocated_message_baz(::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* message_baz);
  private:
  const ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage& _internal_message_baz() const;
  ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* _internal_mutable_message_baz();
  public:
  void unsafe_arena_set_allocated_message_baz(
      ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* message_baz);
  ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* unsafe_arena_release_message_baz();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEagerMaybeLazy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypes* message_foo_;
  ::protobuf_unittest::TestAllTypes* message_bar_;
  ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* message_baz_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedMessageHasBits_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedMessageHasBits.NestedMessage) */ {
 public:
  inline TestNestedMessageHasBits_NestedMessage() : TestNestedMessageHasBits_NestedMessage(nullptr) {}
  ~TestNestedMessageHasBits_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestNestedMessageHasBits_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedMessageHasBits_NestedMessage(const TestNestedMessageHasBits_NestedMessage& from);
  TestNestedMessageHasBits_NestedMessage(TestNestedMessageHasBits_NestedMessage&& from) noexcept
    : TestNestedMessageHasBits_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestNestedMessageHasBits_NestedMessage& operator=(const TestNestedMessageHasBits_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedMessageHasBits_NestedMessage& operator=(TestNestedMessageHasBits_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedMessageHasBits_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedMessageHasBits_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestNestedMessageHasBits_NestedMessage*>(
               &_TestNestedMessageHasBits_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(TestNestedMessageHasBits_NestedMessage& a, TestNestedMessageHasBits_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedMessageHasBits_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedMessageHasBits_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedMessageHasBits_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedMessageHasBits_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedMessageHasBits_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedMessageHasBits_NestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedMessageHasBits_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedMessageHasBits.NestedMessage";
  }
  protected:
  explicit TestNestedMessageHasBits_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNestedmessageRepeatedInt32FieldNumber = 1,
    kNestedmessageRepeatedForeignmessageFieldNumber = 2,
  };
  // repeated int32 nestedmessage_repeated_int32 = 1;
  int nestedmessage_repeated_int32_size() const;
  private:
  int _internal_nestedmessage_repeated_int32_size() const;
  public:
  void clear_nestedmessage_repeated_int32();
  private:
  int32_t _internal_nestedmessage_repeated_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_nestedmessage_repeated_int32() const;
  void _internal_add_nestedmessage_repeated_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_nestedmessage_repeated_int32();
  public:
  int32_t nestedmessage_repeated_int32(int index) const;
  void set_nestedmessage_repeated_int32(int index, int32_t value);
  void add_nestedmessage_repeated_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      nestedmessage_repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_nestedmessage_repeated_int32();

  // repeated .protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
  int nestedmessage_repeated_foreignmessage_size() const;
  private:
  int _internal_nestedmessage_repeated_foreignmessage_size() const;
  public:
  void clear_nestedmessage_repeated_foreignmessage();
  ::protobuf_unittest::ForeignMessage* mutable_nestedmessage_repeated_foreignmessage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >*
      mutable_nestedmessage_repeated_foreignmessage();
  private:
  const ::protobuf_unittest::ForeignMessage& _internal_nestedmessage_repeated_foreignmessage(int index) const;
  ::protobuf_unittest::ForeignMessage* _internal_add_nestedmessage_repeated_foreignmessage();
  public:
  const ::protobuf_unittest::ForeignMessage& nestedmessage_repeated_foreignmessage(int index) const;
  ::protobuf_unittest::ForeignMessage* add_nestedmessage_repeated_foreignmessage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >&
      nestedmessage_repeated_foreignmessage() const;

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedMessageHasBits.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > nestedmessage_repeated_int32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage > nestedmessage_repeated_foreignmessage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedMessageHasBits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedMessageHasBits) */ {
 public:
  inline TestNestedMessageHasBits() : TestNestedMessageHasBits(nullptr) {}
  ~TestNestedMessageHasBits() override;
  explicit PROTOBUF_CONSTEXPR TestNestedMessageHasBits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedMessageHasBits(const TestNestedMessageHasBits& from);
  TestNestedMessageHasBits(TestNestedMessageHasBits&& from) noexcept
    : TestNestedMessageHasBits() {
    *this = ::std::move(from);
  }

  inline TestNestedMessageHasBits& operator=(const TestNestedMessageHasBits& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedMessageHasBits& operator=(TestNestedMessageHasBits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedMessageHasBits& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedMessageHasBits* internal_default_instance() {
    return reinterpret_cast<const TestNestedMessageHasBits*>(
               &_TestNestedMessageHasBits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(TestNestedMessageHasBits& a, TestNestedMessageHasBits& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedMessageHasBits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedMessageHasBits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedMessageHasBits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedMessageHasBits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedMessageHasBits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedMessageHasBits& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedMessageHasBits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedMessageHasBits";
  }
  protected:
  explicit TestNestedMessageHasBits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestNestedMessageHasBits_NestedMessage NestedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalNestedMessageFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
  bool has_optional_nested_message() const;
  private:
  bool _internal_has_optional_nested_message() const;
  public:
  void clear_optional_nested_message();
  const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage& optional_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* release_optional_nested_message();
  ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* mutable_optional_nested_message();
  void set_allocated_optional_nested_message(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* optional_nested_message);
  private:
  const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage& _internal_optional_nested_message() const;
  ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* _internal_mutable_optional_nested_message();
  public:
  void unsafe_arena_set_allocated_optional_nested_message(
      ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* optional_nested_message);
  ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* unsafe_arena_release_optional_nested_message();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedMessageHasBits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* optional_nested_message_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestCamelCaseFieldNames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestCamelCaseFieldNames) */ {
 public:
  inline TestCamelCaseFieldNames() : TestCamelCaseFieldNames(nullptr) {}
  ~TestCamelCaseFieldNames() override;
  explicit PROTOBUF_CONSTEXPR TestCamelCaseFieldNames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestCamelCaseFieldNames(const TestCamelCaseFieldNames& from);
  TestCamelCaseFieldNames(TestCamelCaseFieldNames&& from) noexcept
    : TestCamelCaseFieldNames() {
    *this = ::std::move(from);
  }

  inline TestCamelCaseFieldNames& operator=(const TestCamelCaseFieldNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCamelCaseFieldNames& operator=(TestCamelCaseFieldNames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestCamelCaseFieldNames& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestCamelCaseFieldNames* internal_default_instance() {
    return reinterpret_cast<const TestCamelCaseFieldNames*>(
               &_TestCamelCaseFieldNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(TestCamelCaseFieldNames& a, TestCamelCaseFieldNames& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCamelCaseFieldNames* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCamelCaseFieldNames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestCamelCaseFieldNames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestCamelCaseFieldNames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestCamelCaseFieldNames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestCamelCaseFieldNames& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCamelCaseFieldNames* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestCamelCaseFieldNames";
  }
  protected:
  explicit TestCamelCaseFieldNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedPrimitiveFieldFieldNumber = 7,
    kRepeatedStringFieldFieldNumber = 8,
    kRepeatedEnumFieldFieldNumber = 9,
    kRepeatedMessageFieldFieldNumber = 10,
    kRepeatedStringPieceFieldFieldNumber = 11,
    kRepeatedCordFieldFieldNumber = 12,
    kStringFieldFieldNumber = 2,
    kStringPieceFieldFieldNumber = 5,
    kCordFieldFieldNumber = 6,
    kMessageFieldFieldNumber = 4,
    kPrimitiveFieldFieldNumber = 1,
    kEnumFieldFieldNumber = 3,
  };
  // repeated int32 RepeatedPrimitiveField = 7;
  int repeatedprimitivefield_size() const;
  private:
  int _internal_repeatedprimitivefield_size() const;
  public:
  void clear_repeatedprimitivefield();
  private:
  int32_t _internal_repeatedprimitivefield(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeatedprimitivefield() const;
  void _internal_add_repeatedprimitivefield(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeatedprimitivefield();
  public:
  int32_t repeatedprimitivefield(int index) const;
  void set_repeatedprimitivefield(int index, int32_t value);
  void add_repeatedprimitivefield(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeatedprimitivefield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeatedprimitivefield();

  // repeated string RepeatedStringField = 8;
  int repeatedstringfield_size() const;
  private:
  int _internal_repeatedstringfield_size() const;
  public:
  void clear_repeatedstringfield();
  const std::string& repeatedstringfield(int index) const;
  std::string* mutable_repeatedstringfield(int index);
  void set_repeatedstringfield(int index, const std::string& value);
  void set_repeatedstringfield(int index, std::string&& value);
  void set_repeatedstringfield(int index, const char* value);
  void set_repeatedstringfield(int index, const char* value, size_t size);
  std::string* add_repeatedstringfield();
  void add_repeatedstringfield(const std::string& value);
  void add_repeatedstringfield(std::string&& value);
  void add_repeatedstringfield(const char* value);
  void add_repeatedstringfield(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeatedstringfield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeatedstringfield();
  private:
  const std::string& _internal_repeatedstringfield(int index) const;
  std::string* _internal_add_repeatedstringfield();
  public:

  // repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
  int repeatedenumfield_size() const;
  private:
  int _internal_repeatedenumfield_size() const;
  public:
  void clear_repeatedenumfield();
  private:
  ::protobuf_unittest::ForeignEnum _internal_repeatedenumfield(int index) const;
  void _internal_add_repeatedenumfield(::protobuf_unittest::ForeignEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_repeatedenumfield();
  public:
  ::protobuf_unittest::ForeignEnum repeatedenumfield(int index) const;
  void set_repeatedenumfield(int index, ::protobuf_unittest::ForeignEnum value);
  void add_repeatedenumfield(::protobuf_unittest::ForeignEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeatedenumfield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeatedenumfield();

  // repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
  int repeatedmessagefield_size() const;
  private:
  int _internal_repeatedmessagefield_size() const;
  public:
  void clear_repeatedmessagefield();
  ::protobuf_unittest::ForeignMessage* mutable_repeatedmessagefield(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >*
      mutable_repeatedmessagefield();
  private:
  const ::protobuf_unittest::ForeignMessage& _internal_repeatedmessagefield(int index) const;
  ::protobuf_unittest::ForeignMessage* _internal_add_repeatedmessagefield();
  public:
  const ::protobuf_unittest::ForeignMessage& repeatedmessagefield(int index) const;
  ::protobuf_unittest::ForeignMessage* add_repeatedmessagefield();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >&
      repeatedmessagefield() const;

  // repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
  int repeatedstringpiecefield_size() const;
  private:
  int _internal_repeatedstringpiecefield_size() const;
  public:
  void clear_repeatedstringpiecefield();
 private:
  // Hidden due to unknown ctype option.
  const std::string& repeatedstringpiecefield(int index) const;
  std::string* mutable_repeatedstringpiecefield(int index);
  void set_repeatedstringpiecefield(int index, const std::string& value);
  void set_repeatedstringpiecefield(int index, std::string&& value);
  void set_repeatedstringpiecefield(int index, const char* value);
  void set_repeatedstringpiecefield(int index, const char* value, size_t size);
  std::string* add_repeatedstringpiecefield();
  void add_repeatedstringpiecefield(const std::string& value);
  void add_repeatedstringpiecefield(std::string&& value);
  void add_repeatedstringpiecefield(const char* value);
  void add_repeatedstringpiecefield(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeatedstringpiecefield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeatedstringpiecefield();
  private:
  const std::string& _internal_repeatedstringpiecefield(int index) const;
  std::string* _internal_add_repeatedstringpiecefield();
  public:
 public:

  // repeated string RepeatedCordField = 12 [ctype = CORD];
  int repeatedcordfield_size() const;
  private:
  int _internal_repeatedcordfield_size() const;
  public:
  void clear_repeatedcordfield();
 private:
  // Hidden due to unknown ctype option.
  const std::string& repeatedcordfield(int index) const;
  std::string* mutable_repeatedcordfield(int index);
  void set_repeatedcordfield(int index, const std::string& value);
  void set_repeatedcordfield(int index, std::string&& value);
  void set_repeatedcordfield(int index, const char* value);
  void set_repeatedcordfield(int index, const char* value, size_t size);
  std::string* add_repeatedcordfield();
  void add_repeatedcordfield(const std::string& value);
  void add_repeatedcordfield(std::string&& value);
  void add_repeatedcordfield(const char* value);
  void add_repeatedcordfield(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeatedcordfield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeatedcordfield();
  private:
  const std::string& _internal_repeatedcordfield(int index) const;
  std::string* _internal_add_repeatedcordfield();
  public:
 public:

  // optional string StringField = 2;
  bool has_stringfield() const;
  private:
  bool _internal_has_stringfield() const;
  public:
  void clear_stringfield();
  const std::string& stringfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringfield();
  PROTOBUF_NODISCARD std::string* release_stringfield();
  void set_allocated_stringfield(std::string* stringfield);
  private:
  const std::string& _internal_stringfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringfield(const std::string& value);
  std::string* _internal_mutable_stringfield();
  public:

  // optional string StringPieceField = 5 [ctype = STRING_PIECE];
  bool has_stringpiecefield() const;
  private:
  bool _internal_has_stringpiecefield() const;
  public:
  void clear_stringpiecefield();
 private:
  // Hidden due to unknown ctype option.
  const std::string& stringpiecefield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringpiecefield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringpiecefield();
  PROTOBUF_NODISCARD std::string* release_stringpiecefield();
  void set_allocated_stringpiecefield(std::string* stringpiecefield);
  private:
  const std::string& _internal_stringpiecefield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringpiecefield(const std::string& value);
  std::string* _internal_mutable_stringpiecefield();
  public:
 public:

  // optional string CordField = 6 [ctype = CORD];
  bool has_cordfield() const;
  private:
  bool _internal_has_cordfield() const;
  public:
  void clear_cordfield();
 private:
  // Hidden due to unknown ctype option.
  const std::string& cordfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cordfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cordfield();
  PROTOBUF_NODISCARD std::string* release_cordfield();
  void set_allocated_cordfield(std::string* cordfield);
  private:
  const std::string& _internal_cordfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cordfield(const std::string& value);
  std::string* _internal_mutable_cordfield();
  public:
 public:

  // optional .protobuf_unittest.ForeignMessage MessageField = 4;
  bool has_messagefield() const;
  private:
  bool _internal_has_messagefield() const;
  public:
  void clear_messagefield();
  const ::protobuf_unittest::ForeignMessage& messagefield() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::ForeignMessage* release_messagefield();
  ::protobuf_unittest::ForeignMessage* mutable_messagefield();
  void set_allocated_messagefield(::protobuf_unittest::ForeignMessage* messagefield);
  private:
  const ::protobuf_unittest::ForeignMessage& _internal_messagefield() const;
  ::protobuf_unittest::ForeignMessage* _internal_mutable_messagefield();
  public:
  void unsafe_arena_set_allocated_messagefield(
      ::protobuf_unittest::ForeignMessage* messagefield);
  ::protobuf_unittest::ForeignMessage* unsafe_arena_release_messagefield();

  // optional int32 PrimitiveField = 1;
  bool has_primitivefield() const;
  private:
  bool _internal_has_primitivefield() const;
  public:
  void clear_primitivefield();
  int32_t primitivefield() const;
  void set_primitivefield(int32_t value);
  private:
  int32_t _internal_primitivefield() const;
  void _internal_set_primitivefield(int32_t value);
  public:

  // optional .protobuf_unittest.ForeignEnum EnumField = 3;
  bool has_enumfield() const;
  private:
  bool _internal_has_enumfield() const;
  public:
  void clear_enumfield();
  ::protobuf_unittest::ForeignEnum enumfield() const;
  void set_enumfield(::protobuf_unittest::ForeignEnum value);
  private:
  ::protobuf_unittest::ForeignEnum _internal_enumfield() const;
  void _internal_set_enumfield(::protobuf_unittest::ForeignEnum value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestCamelCaseFieldNames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeatedprimitivefield_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeatedstringfield_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeatedenumfield_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage > repeatedmessagefield_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeatedstringpiecefield_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeatedcordfield_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringfield_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringpiecefield_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cordfield_;
  ::protobuf_unittest::ForeignMessage* messagefield_;
  int32_t primitivefield_;
  int enumfield_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestFieldOrderings_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestFieldOrderings.NestedMessage) */ {
 public:
  inline TestFieldOrderings_NestedMessage() : TestFieldOrderings_NestedMessage(nullptr) {}
  ~TestFieldOrderings_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestFieldOrderings_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestFieldOrderings_NestedMessage(const TestFieldOrderings_NestedMessage& from);
  TestFieldOrderings_NestedMessage(TestFieldOrderings_NestedMessage&& from) noexcept
    : TestFieldOrderings_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestFieldOrderings_NestedMessage& operator=(const TestFieldOrderings_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestFieldOrderings_NestedMessage& operator=(TestFieldOrderings_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestFieldOrderings_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestFieldOrderings_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestFieldOrderings_NestedMessage*>(
               &_TestFieldOrderings_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TestFieldOrderings_NestedMessage& a, TestFieldOrderings_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestFieldOrderings_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestFieldOrderings_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestFieldOrderings_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestFieldOrderings_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestFieldOrderings_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestFieldOrderings_NestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestFieldOrderings_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestFieldOrderings.NestedMessage";
  }
  protected:
  explicit TestFieldOrderings_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOoFieldNumber = 2,
    kBbFieldNumber = 1,
  };
  // optional int64 oo = 2;
  bool has_oo() const;
  private:
  bool _internal_has_oo() const;
  public:
  void clear_oo();
  int64_t oo() const;
  void set_oo(int64_t value);
  private:
  int64_t _internal_oo() const;
  void _internal_set_oo(int64_t value);
  public:

  // optional int32 bb = 1;
  bool has_bb() const;
  private:
  bool _internal_has_bb() const;
  public:
  void clear_bb();
  int32_t bb() const;
  void set_bb(int32_t value);
  private:
  int32_t _internal_bb() const;
  void _internal_set_bb(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestFieldOrderings.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t oo_;
  int32_t bb_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestFieldOrderings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestFieldOrderings) */ {
 public:
  inline TestFieldOrderings() : TestFieldOrderings(nullptr) {}
  ~TestFieldOrderings() override;
  explicit PROTOBUF_CONSTEXPR TestFieldOrderings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestFieldOrderings(const TestFieldOrderings& from);
  TestFieldOrderings(TestFieldOrderings&& from) noexcept
    : TestFieldOrderings() {
    *this = ::std::move(from);
  }

  inline TestFieldOrderings& operator=(const TestFieldOrderings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestFieldOrderings& operator=(TestFieldOrderings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestFieldOrderings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestFieldOrderings* internal_default_instance() {
    return reinterpret_cast<const TestFieldOrderings*>(
               &_TestFieldOrderings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(TestFieldOrderings& a, TestFieldOrderings& b) {
    a.Swap(&b);
  }
  inline void Swap(TestFieldOrderings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestFieldOrderings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestFieldOrderings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestFieldOrderings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestFieldOrderings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestFieldOrderings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestFieldOrderings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestFieldOrderings";
  }
  protected:
  explicit TestFieldOrderings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestFieldOrderings_NestedMessage NestedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kMyStringFieldNumber = 11,
    kOptionalNestedMessageFieldNumber = 200,
    kMyIntFieldNumber = 1,
    kMyFloatFieldNumber = 101,
  };
  // optional string my_string = 11;
  bool has_my_string() const;
  private:
  bool _internal_has_my_string() const;
  public:
  void clear_my_string();
  const std::string& my_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_my_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_my_string();
  PROTOBUF_NODISCARD std::string* release_my_string();
  void set_allocated_my_string(std::string* my_string);
  private:
  const std::string& _internal_my_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_string(const std::string& value);
  std::string* _internal_mutable_my_string();
  public:

  // optional .protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
  bool has_optional_nested_message() const;
  private:
  bool _internal_has_optional_nested_message() const;
  public:
  void clear_optional_nested_message();
  const ::protobuf_unittest::TestFieldOrderings_NestedMessage& optional_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestFieldOrderings_NestedMessage* release_optional_nested_message();
  ::protobuf_unittest::TestFieldOrderings_NestedMessage* mutable_optional_nested_message();
  void set_allocated_optional_nested_message(::protobuf_unittest::TestFieldOrderings_NestedMessage* optional_nested_message);
  private:
  const ::protobuf_unittest::TestFieldOrderings_NestedMessage& _internal_optional_nested_message() const;
  ::protobuf_unittest::TestFieldOrderings_NestedMessage* _internal_mutable_optional_nested_message();
  public:
  void unsafe_arena_set_allocated_optional_nested_message(
      ::protobuf_unittest::TestFieldOrderings_NestedMessage* optional_nested_message);
  ::protobuf_unittest::TestFieldOrderings_NestedMessage* unsafe_arena_release_optional_nested_message();

  // optional int64 my_int = 1;
  bool has_my_int() const;
  private:
  bool _internal_has_my_int() const;
  public:
  void clear_my_int();
  int64_t my_int() const;
  void set_my_int(int64_t value);
  private:
  int64_t _internal_my_int() const;
  void _internal_set_my_int(int64_t value);
  public:

  // optional float my_float = 101;
  bool has_my_float() const;
  private:
  bool _internal_has_my_float() const;
  public:
  void clear_my_float();
  float my_float() const;
  void set_my_float(float value);
  private:
  float _internal_my_float() const;
  void _internal_set_my_float(float value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestFieldOrderings, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestFieldOrderings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_string_;
  ::protobuf_unittest::TestFieldOrderings_NestedMessage* optional_nested_message_;
  int64_t my_int_;
  float my_float_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestExtensionOrderings1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestExtensionOrderings1) */ {
 public:
  inline TestExtensionOrderings1() : TestExtensionOrderings1(nullptr) {}
  ~TestExtensionOrderings1() override;
  explicit PROTOBUF_CONSTEXPR TestExtensionOrderings1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestExtensionOrderings1(const TestExtensionOrderings1& from);
  TestExtensionOrderings1(TestExtensionOrderings1&& from) noexcept
    : TestExtensionOrderings1() {
    *this = ::std::move(from);
  }

  inline TestExtensionOrderings1& operator=(const TestExtensionOrderings1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestExtensionOrderings1& operator=(TestExtensionOrderings1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestExtensionOrderings1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestExtensionOrderings1* internal_default_instance() {
    return reinterpret_cast<const TestExtensionOrderings1*>(
               &_TestExtensionOrderings1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(TestExtensionOrderings1& a, TestExtensionOrderings1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestExtensionOrderings1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestExtensionOrderings1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestExtensionOrderings1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestExtensionOrderings1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestExtensionOrderings1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestExtensionOrderings1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestExtensionOrderings1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestExtensionOrderings1";
  }
  protected:
  explicit TestExtensionOrderings1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyStringFieldNumber = 1,
  };
  // optional string my_string = 1;
  bool has_my_string() const;
  private:
  bool _internal_has_my_string() const;
  public:
  void clear_my_string();
  const std::string& my_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_my_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_my_string();
  PROTOBUF_NODISCARD std::string* release_my_string();
  void set_allocated_my_string(std::string* my_string);
  private:
  const std::string& _internal_my_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_string(const std::string& value);
  std::string* _internal_mutable_my_string();
  public:

  static const int kTestExtOrderings1FieldNumber = 13;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings1 >, 11, false >
    test_ext_orderings1;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestExtensionOrderings1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_string_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestExtensionOrderings2_TestExtensionOrderings3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3) */ {
 public:
  inline TestExtensionOrderings2_TestExtensionOrderings3() : TestExtensionOrderings2_TestExtensionOrderings3(nullptr) {}
  ~TestExtensionOrderings2_TestExtensionOrderings3() override;
  explicit PROTOBUF_CONSTEXPR TestExtensionOrderings2_TestExtensionOrderings3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestExtensionOrderings2_TestExtensionOrderings3(const TestExtensionOrderings2_TestExtensionOrderings3& from);
  TestExtensionOrderings2_TestExtensionOrderings3(TestExtensionOrderings2_TestExtensionOrderings3&& from) noexcept
    : TestExtensionOrderings2_TestExtensionOrderings3() {
    *this = ::std::move(from);
  }

  inline TestExtensionOrderings2_TestExtensionOrderings3& operator=(const TestExtensionOrderings2_TestExtensionOrderings3& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestExtensionOrderings2_TestExtensionOrderings3& operator=(TestExtensionOrderings2_TestExtensionOrderings3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestExtensionOrderings2_TestExtensionOrderings3& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestExtensionOrderings2_TestExtensionOrderings3* internal_default_instance() {
    return reinterpret_cast<const TestExtensionOrderings2_TestExtensionOrderings3*>(
               &_TestExtensionOrderings2_TestExtensionOrderings3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TestExtensionOrderings2_TestExtensionOrderings3& a, TestExtensionOrderings2_TestExtensionOrderings3& b) {
    a.Swap(&b);
  }
  inline void Swap(TestExtensionOrderings2_TestExtensionOrderings3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestExtensionOrderings2_TestExtensionOrderings3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestExtensionOrderings2_TestExtensionOrderings3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestExtensionOrderings2_TestExtensionOrderings3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestExtensionOrderings2_TestExtensionOrderings3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestExtensionOrderings2_TestExtensionOrderings3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestExtensionOrderings2_TestExtensionOrderings3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3";
  }
  protected:
  explicit TestExtensionOrderings2_TestExtensionOrderings3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyStringFieldNumber = 1,
  };
  // optional string my_string = 1;
  bool has_my_string() const;
  private:
  bool _internal_has_my_string() const;
  public:
  void clear_my_string();
  const std::string& my_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_my_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_my_string();
  PROTOBUF_NODISCARD std::string* release_my_string();
  void set_allocated_my_string(std::string* my_string);
  private:
  const std::string& _internal_my_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_string(const std::string& value);
  std::string* _internal_mutable_my_string();
  public:

  static const int kTestExtOrderings3FieldNumber = 14;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings2_TestExtensionOrderings3 >, 11, false >
    test_ext_orderings3;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_string_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestExtensionOrderings2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestExtensionOrderings2) */ {
 public:
  inline TestExtensionOrderings2() : TestExtensionOrderings2(nullptr) {}
  ~TestExtensionOrderings2() override;
  explicit PROTOBUF_CONSTEXPR TestExtensionOrderings2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestExtensionOrderings2(const TestExtensionOrderings2& from);
  TestExtensionOrderings2(TestExtensionOrderings2&& from) noexcept
    : TestExtensionOrderings2() {
    *this = ::std::move(from);
  }

  inline TestExtensionOrderings2& operator=(const TestExtensionOrderings2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestExtensionOrderings2& operator=(TestExtensionOrderings2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestExtensionOrderings2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestExtensionOrderings2* internal_default_instance() {
    return reinterpret_cast<const TestExtensionOrderings2*>(
               &_TestExtensionOrderings2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TestExtensionOrderings2& a, TestExtensionOrderings2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestExtensionOrderings2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestExtensionOrderings2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestExtensionOrderings2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestExtensionOrderings2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestExtensionOrderings2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestExtensionOrderings2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestExtensionOrderings2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestExtensionOrderings2";
  }
  protected:
  explicit TestExtensionOrderings2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestExtensionOrderings2_TestExtensionOrderings3 TestExtensionOrderings3;

  // accessors -------------------------------------------------------

  enum : int {
    kMyStringFieldNumber = 1,
  };
  // optional string my_string = 1;
  bool has_my_string() const;
  private:
  bool _internal_has_my_string() const;
  public:
  void clear_my_string();
  const std::string& my_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_my_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_my_string();
  PROTOBUF_NODISCARD std::string* release_my_string();
  void set_allocated_my_string(std::string* my_string);
  private:
  const std::string& _internal_my_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_string(const std::string& value);
  std::string* _internal_mutable_my_string();
  public:

  static const int kTestExtOrderings2FieldNumber = 12;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestExtensionOrderings2 >, 11, false >
    test_ext_orderings2;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestExtensionOrderings2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_string_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestExtremeDefaultValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestExtremeDefaultValues) */ {
 public:
  inline TestExtremeDefaultValues() : TestExtremeDefaultValues(nullptr) {}
  ~TestExtremeDefaultValues() override;
  explicit PROTOBUF_CONSTEXPR TestExtremeDefaultValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestExtremeDefaultValues(const TestExtremeDefaultValues& from);
  TestExtremeDefaultValues(TestExtremeDefaultValues&& from) noexcept
    : TestExtremeDefaultValues() {
    *this = ::std::move(from);
  }

  inline TestExtremeDefaultValues& operator=(const TestExtremeDefaultValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestExtremeDefaultValues& operator=(TestExtremeDefaultValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestExtremeDefaultValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestExtremeDefaultValues* internal_default_instance() {
    return reinterpret_cast<const TestExtremeDefaultValues*>(
               &_TestExtremeDefaultValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TestExtremeDefaultValues& a, TestExtremeDefaultValues& b) {
    a.Swap(&b);
  }
  inline void Swap(TestExtremeDefaultValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestExtremeDefaultValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestExtremeDefaultValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestExtremeDefaultValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestExtremeDefaultValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestExtremeDefaultValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestExtremeDefaultValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestExtremeDefaultValues";
  }
  protected:
  explicit TestExtremeDefaultValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEscapedBytesFieldNumber = 1,
    kUtf8StringFieldNumber = 6,
    kCppTrigraphFieldNumber = 20,
    kStringWithZeroFieldNumber = 23,
    kBytesWithZeroFieldNumber = 24,
    kStringPieceWithZeroFieldNumber = 25,
    kCordWithZeroFieldNumber = 26,
    kReplacementStringFieldNumber = 27,
    kZeroFloatFieldNumber = 7,
    kLargeUint64FieldNumber = 3,
    kLargeUint32FieldNumber = 2,
    kSmallInt32FieldNumber = 4,
    kSmallInt64FieldNumber = 5,
    kOneFloatFieldNumber = 8,
    kSmallFloatFieldNumber = 9,
    kNegativeOneFloatFieldNumber = 10,
    kNegativeFloatFieldNumber = 11,
    kLargeFloatFieldNumber = 12,
    kSmallNegativeFloatFieldNumber = 13,
    kInfDoubleFieldNumber = 14,
    kNegInfDoubleFieldNumber = 15,
    kNanDoubleFieldNumber = 16,
    kInfFloatFieldNumber = 17,
    kNegInfFloatFieldNumber = 18,
    kNanFloatFieldNumber = 19,
    kReallySmallInt32FieldNumber = 21,
    kReallySmallInt64FieldNumber = 22,
  };
  // optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\"\376"];
  bool has_escaped_bytes() const;
  private:
  bool _internal_has_escaped_bytes() const;
  public:
  void clear_escaped_bytes();
  const std::string& escaped_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_escaped_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_escaped_bytes();
  PROTOBUF_NODISCARD std::string* release_escaped_bytes();
  void set_allocated_escaped_bytes(std::string* escaped_bytes);
  private:
  const std::string& _internal_escaped_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escaped_bytes(const std::string& value);
  std::string* _internal_mutable_escaped_bytes();
  public:

  // optional string utf8_string = 6 [default = "\341\210\264"];
  bool has_utf8_string() const;
  private:
  bool _internal_has_utf8_string() const;
  public:
  void clear_utf8_string();
  const std::string& utf8_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utf8_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utf8_string();
  PROTOBUF_NODISCARD std::string* release_utf8_string();
  void set_allocated_utf8_string(std::string* utf8_string);
  private:
  const std::string& _internal_utf8_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utf8_string(const std::string& value);
  std::string* _internal_mutable_utf8_string();
  public:

  // optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
  bool has_cpp_trigraph() const;
  private:
  bool _internal_has_cpp_trigraph() const;
  public:
  void clear_cpp_trigraph();
  const std::string& cpp_trigraph() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpp_trigraph(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpp_trigraph();
  PROTOBUF_NODISCARD std::string* release_cpp_trigraph();
  void set_allocated_cpp_trigraph(std::string* cpp_trigraph);
  private:
  const std::string& _internal_cpp_trigraph() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpp_trigraph(const std::string& value);
  std::string* _internal_mutable_cpp_trigraph();
  public:

  // optional string string_with_zero = 23 [default = "hel\000lo"];
  bool has_string_with_zero() const;
  private:
  bool _internal_has_string_with_zero() const;
  public:
  void clear_string_with_zero();
  const std::string& string_with_zero() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_with_zero(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_with_zero();
  PROTOBUF_NODISCARD std::string* release_string_with_zero();
  void set_allocated_string_with_zero(std::string* string_with_zero);
  private:
  const std::string& _internal_string_with_zero() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_with_zero(const std::string& value);
  std::string* _internal_mutable_string_with_zero();
  public:

  // optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
  bool has_bytes_with_zero() const;
  private:
  bool _internal_has_bytes_with_zero() const;
  public:
  void clear_bytes_with_zero();
  const std::string& bytes_with_zero() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_with_zero(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_with_zero();
  PROTOBUF_NODISCARD std::string* release_bytes_with_zero();
  void set_allocated_bytes_with_zero(std::string* bytes_with_zero);
  private:
  const std::string& _internal_bytes_with_zero() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_with_zero(const std::string& value);
  std::string* _internal_mutable_bytes_with_zero();
  public:

  // optional string string_piece_with_zero = 25 [default = "ab\000c", ctype = STRING_PIECE];
  bool has_string_piece_with_zero() const;
  private:
  bool _internal_has_string_piece_with_zero() const;
  public:
  void clear_string_piece_with_zero();
 private:
  // Hidden due to unknown ctype option.
  const std::string& string_piece_with_zero() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_piece_with_zero(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_piece_with_zero();
  PROTOBUF_NODISCARD std::string* release_string_piece_with_zero();
  void set_allocated_string_piece_with_zero(std::string* string_piece_with_zero);
  private:
  const std::string& _internal_string_piece_with_zero() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_piece_with_zero(const std::string& value);
  std::string* _internal_mutable_string_piece_with_zero();
  public:
 public:

  // optional string cord_with_zero = 26 [default = "12\0003", ctype = CORD];
  bool has_cord_with_zero() const;
  private:
  bool _internal_has_cord_with_zero() const;
  public:
  void clear_cord_with_zero();
 private:
  // Hidden due to unknown ctype option.
  const std::string& cord_with_zero() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cord_with_zero(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cord_with_zero();
  PROTOBUF_NODISCARD std::string* release_cord_with_zero();
  void set_allocated_cord_with_zero(std::string* cord_with_zero);
  private:
  const std::string& _internal_cord_with_zero() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cord_with_zero(const std::string& value);
  std::string* _internal_mutable_cord_with_zero();
  public:
 public:

  // optional string replacement_string = 27 [default = "${unknown}"];
  bool has_replacement_string() const;
  private:
  bool _internal_has_replacement_string() const;
  public:
  void clear_replacement_string();
  const std::string& replacement_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_replacement_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_replacement_string();
  PROTOBUF_NODISCARD std::string* release_replacement_string();
  void set_allocated_replacement_string(std::string* replacement_string);
  private:
  const std::string& _internal_replacement_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_replacement_string(const std::string& value);
  std::string* _internal_mutable_replacement_string();
  public:

  // optional float zero_float = 7 [default = 0];
  bool has_zero_float() const;
  private:
  bool _internal_has_zero_float() const;
  public:
  void clear_zero_float();
  float zero_float() const;
  void set_zero_float(float value);
  private:
  float _internal_zero_float() const;
  void _internal_set_zero_float(float value);
  public:

  // optional uint64 large_uint64 = 3 [default = 18446744073709551615];
  bool has_large_uint64() const;
  private:
  bool _internal_has_large_uint64() const;
  public:
  void clear_large_uint64();
  uint64_t large_uint64() const;
  void set_large_uint64(uint64_t value);
  private:
  uint64_t _internal_large_uint64() const;
  void _internal_set_large_uint64(uint64_t value);
  public:

  // optional uint32 large_uint32 = 2 [default = 4294967295];
  bool has_large_uint32() const;
  private:
  bool _internal_has_large_uint32() const;
  public:
  void clear_large_uint32();
  uint32_t large_uint32() const;
  void set_large_uint32(uint32_t value);
  private:
  uint32_t _internal_large_uint32() const;
  void _internal_set_large_uint32(uint32_t value);
  public:

  // optional int32 small_int32 = 4 [default = -2147483647];
  bool has_small_int32() const;
  private:
  bool _internal_has_small_int32() const;
  public:
  void clear_small_int32();
  int32_t small_int32() const;
  void set_small_int32(int32_t value);
  private:
  int32_t _internal_small_int32() const;
  void _internal_set_small_int32(int32_t value);
  public:

  // optional int64 small_int64 = 5 [default = -9223372036854775807];
  bool has_small_int64() const;
  private:
  bool _internal_has_small_int64() const;
  public:
  void clear_small_int64();
  int64_t small_int64() const;
  void set_small_int64(int64_t value);
  private:
  int64_t _internal_small_int64() const;
  void _internal_set_small_int64(int64_t value);
  public:

  // optional float one_float = 8 [default = 1];
  bool has_one_float() const;
  private:
  bool _internal_has_one_float() const;
  public:
  void clear_one_float();
  float one_float() const;
  void set_one_float(float value);
  private:
  float _internal_one_float() const;
  void _internal_set_one_float(float value);
  public:

  // optional float small_float = 9 [default = 1.5];
  bool has_small_float() const;
  private:
  bool _internal_has_small_float() const;
  public:
  void clear_small_float();
  float small_float() const;
  void set_small_float(float value);
  private:
  float _internal_small_float() const;
  void _internal_set_small_float(float value);
  public:

  // optional float negative_one_float = 10 [default = -1];
  bool has_negative_one_float() const;
  private:
  bool _internal_has_negative_one_float() const;
  public:
  void clear_negative_one_float();
  float negative_one_float() const;
  void set_negative_one_float(float value);
  private:
  float _internal_negative_one_float() const;
  void _internal_set_negative_one_float(float value);
  public:

  // optional float negative_float = 11 [default = -1.5];
  bool has_negative_float() const;
  private:
  bool _internal_has_negative_float() const;
  public:
  void clear_negative_float();
  float negative_float() const;
  void set_negative_float(float value);
  private:
  float _internal_negative_float() const;
  void _internal_set_negative_float(float value);
  public:

  // optional float large_float = 12 [default = 2e+08];
  bool has_large_float() const;
  private:
  bool _internal_has_large_float() const;
  public:
  void clear_large_float();
  float large_float() const;
  void set_large_float(float value);
  private:
  float _internal_large_float() const;
  void _internal_set_large_float(float value);
  public:

  // optional float small_negative_float = 13 [default = -8e-28];
  bool has_small_negative_float() const;
  private:
  bool _internal_has_small_negative_float() const;
  public:
  void clear_small_negative_float();
  float small_negative_float() const;
  void set_small_negative_float(float value);
  private:
  float _internal_small_negative_float() const;
  void _internal_set_small_negative_float(float value);
  public:

  // optional double inf_double = 14 [default = inf];
  bool has_inf_double() const;
  private:
  bool _internal_has_inf_double() const;
  public:
  void clear_inf_double();
  double inf_double() const;
  void set_inf_double(double value);
  private:
  double _internal_inf_double() const;
  void _internal_set_inf_double(double value);
  public:

  // optional double neg_inf_double = 15 [default = -inf];
  bool has_neg_inf_double() const;
  private:
  bool _internal_has_neg_inf_double() const;
  public:
  void clear_neg_inf_double();
  double neg_inf_double() const;
  void set_neg_inf_double(double value);
  private:
  double _internal_neg_inf_double() const;
  void _internal_set_neg_inf_double(double value);
  public:

  // optional double nan_double = 16 [default = nan];
  bool has_nan_double() const;
  private:
  bool _internal_has_nan_double() const;
  public:
  void clear_nan_double();
  double nan_double() const;
  void set_nan_double(double value);
  private:
  double _internal_nan_double() const;
  void _internal_set_nan_double(double value);
  public:

  // optional float inf_float = 17 [default = inf];
  bool has_inf_float() const;
  private:
  bool _internal_has_inf_float() const;
  public:
  void clear_inf_float();
  float inf_float() const;
  void set_inf_float(float value);
  private:
  float _internal_inf_float() const;
  void _internal_set_inf_float(float value);
  public:

  // optional float neg_inf_float = 18 [default = -inf];
  bool has_neg_inf_float() const;
  private:
  bool _internal_has_neg_inf_float() const;
  public:
  void clear_neg_inf_float();
  float neg_inf_float() const;
  void set_neg_inf_float(float value);
  private:
  float _internal_neg_inf_float() const;
  void _internal_set_neg_inf_float(float value);
  public:

  // optional float nan_float = 19 [default = nan];
  bool has_nan_float() const;
  private:
  bool _internal_has_nan_float() const;
  public:
  void clear_nan_float();
  float nan_float() const;
  void set_nan_float(float value);
  private:
  float _internal_nan_float() const;
  void _internal_set_nan_float(float value);
  public:

  // optional int32 really_small_int32 = 21 [default = -2147483648];
  bool has_really_small_int32() const;
  private:
  bool _internal_has_really_small_int32() const;
  public:
  void clear_really_small_int32();
  int32_t really_small_int32() const;
  void set_really_small_int32(int32_t value);
  private:
  int32_t _internal_really_small_int32() const;
  void _internal_set_really_small_int32(int32_t value);
  public:

  // optional int64 really_small_int64 = 22 [default = -9223372036854775808];
  bool has_really_small_int64() const;
  private:
  bool _internal_has_really_small_int64() const;
  public:
  void clear_really_small_int64();
  int64_t really_small_int64() const;
  void set_really_small_int64(int64_t value);
  private:
  int64_t _internal_really_small_int64() const;
  void _internal_set_really_small_int64(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestExtremeDefaultValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_escaped_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr escaped_bytes_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_utf8_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utf8_string_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_cpp_trigraph_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpp_trigraph_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_string_with_zero_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_with_zero_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_bytes_with_zero_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_with_zero_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_string_piece_with_zero_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_piece_with_zero_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_cord_with_zero_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cord_with_zero_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_replacement_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replacement_string_;
  float zero_float_;
  uint64_t large_uint64_;
  uint32_t large_uint32_;
  int32_t small_int32_;
  int64_t small_int64_;
  float one_float_;
  float small_float_;
  float negative_one_float_;
  float negative_float_;
  float large_float_;
  float small_negative_float_;
  double inf_double_;
  double neg_inf_double_;
  double nan_double_;
  float inf_float_;
  float neg_inf_float_;
  float nan_float_;
  int32_t really_small_int32_;
  int64_t really_small_int64_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class SparseEnumMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.SparseEnumMessage) */ {
 public:
  inline SparseEnumMessage() : SparseEnumMessage(nullptr) {}
  ~SparseEnumMessage() override;
  explicit PROTOBUF_CONSTEXPR SparseEnumMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SparseEnumMessage(const SparseEnumMessage& from);
  SparseEnumMessage(SparseEnumMessage&& from) noexcept
    : SparseEnumMessage() {
    *this = ::std::move(from);
  }

  inline SparseEnumMessage& operator=(const SparseEnumMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseEnumMessage& operator=(SparseEnumMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparseEnumMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparseEnumMessage* internal_default_instance() {
    return reinterpret_cast<const SparseEnumMessage*>(
               &_SparseEnumMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SparseEnumMessage& a, SparseEnumMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseEnumMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseEnumMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparseEnumMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparseEnumMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SparseEnumMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SparseEnumMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseEnumMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.SparseEnumMessage";
  }
  protected:
  explicit SparseEnumMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSparseEnumFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestSparseEnum sparse_enum = 1;
  bool has_sparse_enum() const;
  private:
  bool _internal_has_sparse_enum() const;
  public:
  void clear_sparse_enum();
  ::protobuf_unittest::TestSparseEnum sparse_enum() const;
  void set_sparse_enum(::protobuf_unittest::TestSparseEnum value);
  private:
  ::protobuf_unittest::TestSparseEnum _internal_sparse_enum() const;
  void _internal_set_sparse_enum(::protobuf_unittest::TestSparseEnum value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.SparseEnumMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int sparse_enum_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class OneString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.OneString) */ {
 public:
  inline OneString() : OneString(nullptr) {}
  ~OneString() override;
  explicit PROTOBUF_CONSTEXPR OneString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneString(const OneString& from);
  OneString(OneString&& from) noexcept
    : OneString() {
    *this = ::std::move(from);
  }

  inline OneString& operator=(const OneString& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneString& operator=(OneString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneString& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneString* internal_default_instance() {
    return reinterpret_cast<const OneString*>(
               &_OneString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(OneString& a, OneString& b) {
    a.Swap(&b);
  }
  inline void Swap(OneString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OneString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.OneString";
  }
  protected:
  explicit OneString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional string data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.OneString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class MoreString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.MoreString) */ {
 public:
  inline MoreString() : MoreString(nullptr) {}
  ~MoreString() override;
  explicit PROTOBUF_CONSTEXPR MoreString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoreString(const MoreString& from);
  MoreString(MoreString&& from) noexcept
    : MoreString() {
    *this = ::std::move(from);
  }

  inline MoreString& operator=(const MoreString& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoreString& operator=(MoreString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoreString& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoreString* internal_default_instance() {
    return reinterpret_cast<const MoreString*>(
               &_MoreString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(MoreString& a, MoreString& b) {
    a.Swap(&b);
  }
  inline void Swap(MoreString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoreString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoreString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoreString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoreString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoreString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoreString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.MoreString";
  }
  protected:
  explicit MoreString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.MoreString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class OneBytes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.OneBytes) */ {
 public:
  inline OneBytes() : OneBytes(nullptr) {}
  ~OneBytes() override;
  explicit PROTOBUF_CONSTEXPR OneBytes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneBytes(const OneBytes& from);
  OneBytes(OneBytes&& from) noexcept
    : OneBytes() {
    *this = ::std::move(from);
  }

  inline OneBytes& operator=(const OneBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneBytes& operator=(OneBytes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneBytes& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneBytes* internal_default_instance() {
    return reinterpret_cast<const OneBytes*>(
               &_OneBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(OneBytes& a, OneBytes& b) {
    a.Swap(&b);
  }
  inline void Swap(OneBytes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneBytes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneBytes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneBytes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OneBytes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneBytes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.OneBytes";
  }
  protected:
  explicit OneBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.OneBytes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class MoreBytes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.MoreBytes) */ {
 public:
  inline MoreBytes() : MoreBytes(nullptr) {}
  ~MoreBytes() override;
  explicit PROTOBUF_CONSTEXPR MoreBytes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoreBytes(const MoreBytes& from);
  MoreBytes(MoreBytes&& from) noexcept
    : MoreBytes() {
    *this = ::std::move(from);
  }

  inline MoreBytes& operator=(const MoreBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoreBytes& operator=(MoreBytes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoreBytes& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoreBytes* internal_default_instance() {
    return reinterpret_cast<const MoreBytes*>(
               &_MoreBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(MoreBytes& a, MoreBytes& b) {
    a.Swap(&b);
  }
  inline void Swap(MoreBytes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoreBytes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoreBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoreBytes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoreBytes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoreBytes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoreBytes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.MoreBytes";
  }
  protected:
  explicit MoreBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated bytes data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.MoreBytes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class ManyOptionalString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.ManyOptionalString) */ {
 public:
  inline ManyOptionalString() : ManyOptionalString(nullptr) {}
  ~ManyOptionalString() override;
  explicit PROTOBUF_CONSTEXPR ManyOptionalString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManyOptionalString(const ManyOptionalString& from);
  ManyOptionalString(ManyOptionalString&& from) noexcept
    : ManyOptionalString() {
    *this = ::std::move(from);
  }

  inline ManyOptionalString& operator=(const ManyOptionalString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManyOptionalString& operator=(ManyOptionalString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManyOptionalString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManyOptionalString* internal_default_instance() {
    return reinterpret_cast<const ManyOptionalString*>(
               &_ManyOptionalString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ManyOptionalString& a, ManyOptionalString& b) {
    a.Swap(&b);
  }
  inline void Swap(ManyOptionalString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManyOptionalString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManyOptionalString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ManyOptionalString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManyOptionalString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ManyOptionalString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManyOptionalString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.ManyOptionalString";
  }
  protected:
  explicit ManyOptionalString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStr1FieldNumber = 1,
    kStr2FieldNumber = 2,
    kStr3FieldNumber = 3,
    kStr4FieldNumber = 4,
    kStr5FieldNumber = 5,
    kStr6FieldNumber = 6,
    kStr7FieldNumber = 7,
    kStr8FieldNumber = 8,
    kStr9FieldNumber = 9,
    kStr10FieldNumber = 10,
    kStr11FieldNumber = 11,
    kStr12FieldNumber = 12,
    kStr13FieldNumber = 13,
    kStr14FieldNumber = 14,
    kStr15FieldNumber = 15,
    kStr16FieldNumber = 16,
    kStr17FieldNumber = 17,
    kStr18FieldNumber = 18,
    kStr19FieldNumber = 19,
    kStr20FieldNumber = 20,
    kStr21FieldNumber = 21,
    kStr22FieldNumber = 22,
    kStr23FieldNumber = 23,
    kStr24FieldNumber = 24,
    kStr25FieldNumber = 25,
    kStr26FieldNumber = 26,
    kStr27FieldNumber = 27,
    kStr28FieldNumber = 28,
    kStr29FieldNumber = 29,
    kStr30FieldNumber = 30,
    kStr31FieldNumber = 31,
    kStr32FieldNumber = 32,
  };
  // optional string str1 = 1;
  bool has_str1() const;
  private:
  bool _internal_has_str1() const;
  public:
  void clear_str1();
  const std::string& str1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str1();
  PROTOBUF_NODISCARD std::string* release_str1();
  void set_allocated_str1(std::string* str1);
  private:
  const std::string& _internal_str1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str1(const std::string& value);
  std::string* _internal_mutable_str1();
  public:

  // optional string str2 = 2;
  bool has_str2() const;
  private:
  bool _internal_has_str2() const;
  public:
  void clear_str2();
  const std::string& str2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str2();
  PROTOBUF_NODISCARD std::string* release_str2();
  void set_allocated_str2(std::string* str2);
  private:
  const std::string& _internal_str2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str2(const std::string& value);
  std::string* _internal_mutable_str2();
  public:

  // optional string str3 = 3;
  bool has_str3() const;
  private:
  bool _internal_has_str3() const;
  public:
  void clear_str3();
  const std::string& str3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str3();
  PROTOBUF_NODISCARD std::string* release_str3();
  void set_allocated_str3(std::string* str3);
  private:
  const std::string& _internal_str3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str3(const std::string& value);
  std::string* _internal_mutable_str3();
  public:

  // optional string str4 = 4;
  bool has_str4() const;
  private:
  bool _internal_has_str4() const;
  public:
  void clear_str4();
  const std::string& str4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str4();
  PROTOBUF_NODISCARD std::string* release_str4();
  void set_allocated_str4(std::string* str4);
  private:
  const std::string& _internal_str4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str4(const std::string& value);
  std::string* _internal_mutable_str4();
  public:

  // optional string str5 = 5;
  bool has_str5() const;
  private:
  bool _internal_has_str5() const;
  public:
  void clear_str5();
  const std::string& str5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str5();
  PROTOBUF_NODISCARD std::string* release_str5();
  void set_allocated_str5(std::string* str5);
  private:
  const std::string& _internal_str5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str5(const std::string& value);
  std::string* _internal_mutable_str5();
  public:

  // optional string str6 = 6;
  bool has_str6() const;
  private:
  bool _internal_has_str6() const;
  public:
  void clear_str6();
  const std::string& str6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str6();
  PROTOBUF_NODISCARD std::string* release_str6();
  void set_allocated_str6(std::string* str6);
  private:
  const std::string& _internal_str6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str6(const std::string& value);
  std::string* _internal_mutable_str6();
  public:

  // optional string str7 = 7;
  bool has_str7() const;
  private:
  bool _internal_has_str7() const;
  public:
  void clear_str7();
  const std::string& str7() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str7(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str7();
  PROTOBUF_NODISCARD std::string* release_str7();
  void set_allocated_str7(std::string* str7);
  private:
  const std::string& _internal_str7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str7(const std::string& value);
  std::string* _internal_mutable_str7();
  public:

  // optional string str8 = 8;
  bool has_str8() const;
  private:
  bool _internal_has_str8() const;
  public:
  void clear_str8();
  const std::string& str8() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str8(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str8();
  PROTOBUF_NODISCARD std::string* release_str8();
  void set_allocated_str8(std::string* str8);
  private:
  const std::string& _internal_str8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str8(const std::string& value);
  std::string* _internal_mutable_str8();
  public:

  // optional string str9 = 9;
  bool has_str9() const;
  private:
  bool _internal_has_str9() const;
  public:
  void clear_str9();
  const std::string& str9() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str9(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str9();
  PROTOBUF_NODISCARD std::string* release_str9();
  void set_allocated_str9(std::string* str9);
  private:
  const std::string& _internal_str9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str9(const std::string& value);
  std::string* _internal_mutable_str9();
  public:

  // optional string str10 = 10;
  bool has_str10() const;
  private:
  bool _internal_has_str10() const;
  public:
  void clear_str10();
  const std::string& str10() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str10(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str10();
  PROTOBUF_NODISCARD std::string* release_str10();
  void set_allocated_str10(std::string* str10);
  private:
  const std::string& _internal_str10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str10(const std::string& value);
  std::string* _internal_mutable_str10();
  public:

  // optional string str11 = 11;
  bool has_str11() const;
  private:
  bool _internal_has_str11() const;
  public:
  void clear_str11();
  const std::string& str11() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str11(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str11();
  PROTOBUF_NODISCARD std::string* release_str11();
  void set_allocated_str11(std::string* str11);
  private:
  const std::string& _internal_str11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str11(const std::string& value);
  std::string* _internal_mutable_str11();
  public:

  // optional string str12 = 12;
  bool has_str12() const;
  private:
  bool _internal_has_str12() const;
  public:
  void clear_str12();
  const std::string& str12() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str12(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str12();
  PROTOBUF_NODISCARD std::string* release_str12();
  void set_allocated_str12(std::string* str12);
  private:
  const std::string& _internal_str12() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str12(const std::string& value);
  std::string* _internal_mutable_str12();
  public:

  // optional string str13 = 13;
  bool has_str13() const;
  private:
  bool _internal_has_str13() const;
  public:
  void clear_str13();
  const std::string& str13() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str13(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str13();
  PROTOBUF_NODISCARD std::string* release_str13();
  void set_allocated_str13(std::string* str13);
  private:
  const std::string& _internal_str13() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str13(const std::string& value);
  std::string* _internal_mutable_str13();
  public:

  // optional string str14 = 14;
  bool has_str14() const;
  private:
  bool _internal_has_str14() const;
  public:
  void clear_str14();
  const std::string& str14() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str14(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str14();
  PROTOBUF_NODISCARD std::string* release_str14();
  void set_allocated_str14(std::string* str14);
  private:
  const std::string& _internal_str14() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str14(const std::string& value);
  std::string* _internal_mutable_str14();
  public:

  // optional string str15 = 15;
  bool has_str15() const;
  private:
  bool _internal_has_str15() const;
  public:
  void clear_str15();
  const std::string& str15() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str15(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str15();
  PROTOBUF_NODISCARD std::string* release_str15();
  void set_allocated_str15(std::string* str15);
  private:
  const std::string& _internal_str15() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str15(const std::string& value);
  std::string* _internal_mutable_str15();
  public:

  // optional string str16 = 16;
  bool has_str16() const;
  private:
  bool _internal_has_str16() const;
  public:
  void clear_str16();
  const std::string& str16() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str16(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str16();
  PROTOBUF_NODISCARD std::string* release_str16();
  void set_allocated_str16(std::string* str16);
  private:
  const std::string& _internal_str16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str16(const std::string& value);
  std::string* _internal_mutable_str16();
  public:

  // optional string str17 = 17;
  bool has_str17() const;
  private:
  bool _internal_has_str17() const;
  public:
  void clear_str17();
  const std::string& str17() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str17(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str17();
  PROTOBUF_NODISCARD std::string* release_str17();
  void set_allocated_str17(std::string* str17);
  private:
  const std::string& _internal_str17() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str17(const std::string& value);
  std::string* _internal_mutable_str17();
  public:

  // optional string str18 = 18;
  bool has_str18() const;
  private:
  bool _internal_has_str18() const;
  public:
  void clear_str18();
  const std::string& str18() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str18(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str18();
  PROTOBUF_NODISCARD std::string* release_str18();
  void set_allocated_str18(std::string* str18);
  private:
  const std::string& _internal_str18() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str18(const std::string& value);
  std::string* _internal_mutable_str18();
  public:

  // optional string str19 = 19;
  bool has_str19() const;
  private:
  bool _internal_has_str19() const;
  public:
  void clear_str19();
  const std::string& str19() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str19(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str19();
  PROTOBUF_NODISCARD std::string* release_str19();
  void set_allocated_str19(std::string* str19);
  private:
  const std::string& _internal_str19() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str19(const std::string& value);
  std::string* _internal_mutable_str19();
  public:

  // optional string str20 = 20;
  bool has_str20() const;
  private:
  bool _internal_has_str20() const;
  public:
  void clear_str20();
  const std::string& str20() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str20(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str20();
  PROTOBUF_NODISCARD std::string* release_str20();
  void set_allocated_str20(std::string* str20);
  private:
  const std::string& _internal_str20() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str20(const std::string& value);
  std::string* _internal_mutable_str20();
  public:

  // optional string str21 = 21;
  bool has_str21() const;
  private:
  bool _internal_has_str21() const;
  public:
  void clear_str21();
  const std::string& str21() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str21(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str21();
  PROTOBUF_NODISCARD std::string* release_str21();
  void set_allocated_str21(std::string* str21);
  private:
  const std::string& _internal_str21() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str21(const std::string& value);
  std::string* _internal_mutable_str21();
  public:

  // optional string str22 = 22;
  bool has_str22() const;
  private:
  bool _internal_has_str22() const;
  public:
  void clear_str22();
  const std::string& str22() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str22(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str22();
  PROTOBUF_NODISCARD std::string* release_str22();
  void set_allocated_str22(std::string* str22);
  private:
  const std::string& _internal_str22() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str22(const std::string& value);
  std::string* _internal_mutable_str22();
  public:

  // optional string str23 = 23;
  bool has_str23() const;
  private:
  bool _internal_has_str23() const;
  public:
  void clear_str23();
  const std::string& str23() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str23(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str23();
  PROTOBUF_NODISCARD std::string* release_str23();
  void set_allocated_str23(std::string* str23);
  private:
  const std::string& _internal_str23() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str23(const std::string& value);
  std::string* _internal_mutable_str23();
  public:

  // optional string str24 = 24;
  bool has_str24() const;
  private:
  bool _internal_has_str24() const;
  public:
  void clear_str24();
  const std::string& str24() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str24(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str24();
  PROTOBUF_NODISCARD std::string* release_str24();
  void set_allocated_str24(std::string* str24);
  private:
  const std::string& _internal_str24() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str24(const std::string& value);
  std::string* _internal_mutable_str24();
  public:

  // optional string str25 = 25;
  bool has_str25() const;
  private:
  bool _internal_has_str25() const;
  public:
  void clear_str25();
  const std::string& str25() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str25(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str25();
  PROTOBUF_NODISCARD std::string* release_str25();
  void set_allocated_str25(std::string* str25);
  private:
  const std::string& _internal_str25() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str25(const std::string& value);
  std::string* _internal_mutable_str25();
  public:

  // optional string str26 = 26;
  bool has_str26() const;
  private:
  bool _internal_has_str26() const;
  public:
  void clear_str26();
  const std::string& str26() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str26(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str26();
  PROTOBUF_NODISCARD std::string* release_str26();
  void set_allocated_str26(std::string* str26);
  private:
  const std::string& _internal_str26() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str26(const std::string& value);
  std::string* _internal_mutable_str26();
  public:

  // optional string str27 = 27;
  bool has_str27() const;
  private:
  bool _internal_has_str27() const;
  public:
  void clear_str27();
  const std::string& str27() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str27(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str27();
  PROTOBUF_NODISCARD std::string* release_str27();
  void set_allocated_str27(std::string* str27);
  private:
  const std::string& _internal_str27() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str27(const std::string& value);
  std::string* _internal_mutable_str27();
  public:

  // optional string str28 = 28;
  bool has_str28() const;
  private:
  bool _internal_has_str28() const;
  public:
  void clear_str28();
  const std::string& str28() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str28(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str28();
  PROTOBUF_NODISCARD std::string* release_str28();
  void set_allocated_str28(std::string* str28);
  private:
  const std::string& _internal_str28() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str28(const std::string& value);
  std::string* _internal_mutable_str28();
  public:

  // optional string str29 = 29;
  bool has_str29() const;
  private:
  bool _internal_has_str29() const;
  public:
  void clear_str29();
  const std::string& str29() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str29(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str29();
  PROTOBUF_NODISCARD std::string* release_str29();
  void set_allocated_str29(std::string* str29);
  private:
  const std::string& _internal_str29() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str29(const std::string& value);
  std::string* _internal_mutable_str29();
  public:

  // optional string str30 = 30;
  bool has_str30() const;
  private:
  bool _internal_has_str30() const;
  public:
  void clear_str30();
  const std::string& str30() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str30(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str30();
  PROTOBUF_NODISCARD std::string* release_str30();
  void set_allocated_str30(std::string* str30);
  private:
  const std::string& _internal_str30() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str30(const std::string& value);
  std::string* _internal_mutable_str30();
  public:

  // optional string str31 = 31;
  bool has_str31() const;
  private:
  bool _internal_has_str31() const;
  public:
  void clear_str31();
  const std::string& str31() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str31(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str31();
  PROTOBUF_NODISCARD std::string* release_str31();
  void set_allocated_str31(std::string* str31);
  private:
  const std::string& _internal_str31() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str31(const std::string& value);
  std::string* _internal_mutable_str31();
  public:

  // optional string str32 = 32;
  bool has_str32() const;
  private:
  bool _internal_has_str32() const;
  public:
  void clear_str32();
  const std::string& str32() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str32(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str32();
  PROTOBUF_NODISCARD std::string* release_str32();
  void set_allocated_str32(std::string* str32);
  private:
  const std::string& _internal_str32() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str32(const std::string& value);
  std::string* _internal_mutable_str32();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.ManyOptionalString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str10_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str11_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str12_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str13_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str14_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str15_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str16_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str17_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str18_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str19_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str20_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str21_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str22_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str23_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str24_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str25_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str26_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str27_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str28_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str29_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str30_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str31_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str32_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class Int32Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.Int32Message) */ {
 public:
  inline Int32Message() : Int32Message(nullptr) {}
  ~Int32Message() override;
  explicit PROTOBUF_CONSTEXPR Int32Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int32Message(const Int32Message& from);
  Int32Message(Int32Message&& from) noexcept
    : Int32Message() {
    *this = ::std::move(from);
  }

  inline Int32Message& operator=(const Int32Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Message& operator=(Int32Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int32Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int32Message* internal_default_instance() {
    return reinterpret_cast<const Int32Message*>(
               &_Int32Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(Int32Message& a, Int32Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int32Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int32Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int32Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int32Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.Int32Message";
  }
  protected:
  explicit Int32Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional int32 data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  int32_t data() const;
  void set_data(int32_t value);
  private:
  int32_t _internal_data() const;
  void _internal_set_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.Int32Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t data_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class Uint32Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.Uint32Message) */ {
 public:
  inline Uint32Message() : Uint32Message(nullptr) {}
  ~Uint32Message() override;
  explicit PROTOBUF_CONSTEXPR Uint32Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint32Message(const Uint32Message& from);
  Uint32Message(Uint32Message&& from) noexcept
    : Uint32Message() {
    *this = ::std::move(from);
  }

  inline Uint32Message& operator=(const Uint32Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint32Message& operator=(Uint32Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uint32Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint32Message* internal_default_instance() {
    return reinterpret_cast<const Uint32Message*>(
               &_Uint32Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(Uint32Message& a, Uint32Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint32Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint32Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uint32Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uint32Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uint32Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Uint32Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint32Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.Uint32Message";
  }
  protected:
  explicit Uint32Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional uint32 data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  uint32_t data() const;
  void set_data(uint32_t value);
  private:
  uint32_t _internal_data() const;
  void _internal_set_data(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.Uint32Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t data_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class Int64Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.Int64Message) */ {
 public:
  inline Int64Message() : Int64Message(nullptr) {}
  ~Int64Message() override;
  explicit PROTOBUF_CONSTEXPR Int64Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Int64Message(const Int64Message& from);
  Int64Message(Int64Message&& from) noexcept
    : Int64Message() {
    *this = ::std::move(from);
  }

  inline Int64Message& operator=(const Int64Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Message& operator=(Int64Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Int64Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Int64Message* internal_default_instance() {
    return reinterpret_cast<const Int64Message*>(
               &_Int64Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Int64Message& a, Int64Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Int64Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Int64Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Int64Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Int64Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.Int64Message";
  }
  protected:
  explicit Int64Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional int64 data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  int64_t data() const;
  void set_data(int64_t value);
  private:
  int64_t _internal_data() const;
  void _internal_set_data(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.Int64Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t data_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class Uint64Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.Uint64Message) */ {
 public:
  inline Uint64Message() : Uint64Message(nullptr) {}
  ~Uint64Message() override;
  explicit PROTOBUF_CONSTEXPR Uint64Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint64Message(const Uint64Message& from);
  Uint64Message(Uint64Message&& from) noexcept
    : Uint64Message() {
    *this = ::std::move(from);
  }

  inline Uint64Message& operator=(const Uint64Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint64Message& operator=(Uint64Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Uint64Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint64Message* internal_default_instance() {
    return reinterpret_cast<const Uint64Message*>(
               &_Uint64Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(Uint64Message& a, Uint64Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint64Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint64Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uint64Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uint64Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Uint64Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Uint64Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint64Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.Uint64Message";
  }
  protected:
  explicit Uint64Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional uint64 data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  uint64_t data() const;
  void set_data(uint64_t value);
  private:
  uint64_t _internal_data() const;
  void _internal_set_data(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.Uint64Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t data_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class BoolMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.BoolMessage) */ {
 public:
  inline BoolMessage() : BoolMessage(nullptr) {}
  ~BoolMessage() override;
  explicit PROTOBUF_CONSTEXPR BoolMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolMessage(const BoolMessage& from);
  BoolMessage(BoolMessage&& from) noexcept
    : BoolMessage() {
    *this = ::std::move(from);
  }

  inline BoolMessage& operator=(const BoolMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolMessage& operator=(BoolMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolMessage* internal_default_instance() {
    return reinterpret_cast<const BoolMessage*>(
               &_BoolMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(BoolMessage& a, BoolMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.BoolMessage";
  }
  protected:
  explicit BoolMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bool data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  bool data() const;
  void set_data(bool value);
  private:
  bool _internal_data() const;
  void _internal_set_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.BoolMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool data_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestOneof_FooGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestOneof.FooGroup) */ {
 public:
  inline TestOneof_FooGroup() : TestOneof_FooGroup(nullptr) {}
  ~TestOneof_FooGroup() override;
  explicit PROTOBUF_CONSTEXPR TestOneof_FooGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestOneof_FooGroup(const TestOneof_FooGroup& from);
  TestOneof_FooGroup(TestOneof_FooGroup&& from) noexcept
    : TestOneof_FooGroup() {
    *this = ::std::move(from);
  }

  inline TestOneof_FooGroup& operator=(const TestOneof_FooGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOneof_FooGroup& operator=(TestOneof_FooGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestOneof_FooGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestOneof_FooGroup* internal_default_instance() {
    return reinterpret_cast<const TestOneof_FooGroup*>(
               &_TestOneof_FooGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(TestOneof_FooGroup& a, TestOneof_FooGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOneof_FooGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestOneof_FooGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestOneof_FooGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestOneof_FooGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestOneof_FooGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestOneof_FooGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestOneof_FooGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestOneof.FooGroup";
  }
  protected:
  explicit TestOneof_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 6,
    kAFieldNumber = 5,
  };
  // optional string b = 6;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // optional int32 a = 5;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestOneof.FooGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestOneof final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestOneof) */ {
 public:
  inline TestOneof() : TestOneof(nullptr) {}
  ~TestOneof() override;
  explicit PROTOBUF_CONSTEXPR TestOneof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestOneof(const TestOneof& from);
  TestOneof(TestOneof&& from) noexcept
    : TestOneof() {
    *this = ::std::move(from);
  }

  inline TestOneof& operator=(const TestOneof& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOneof& operator=(TestOneof&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestOneof& default_instance() {
    return *internal_default_instance();
  }
  enum FooCase {
    kFooInt = 1,
    kFooString = 2,
    kFooMessage = 3,
    kFoogroup = 4,
    FOO_NOT_SET = 0,
  };

  static inline const TestOneof* internal_default_instance() {
    return reinterpret_cast<const TestOneof*>(
               &_TestOneof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(TestOneof& a, TestOneof& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOneof* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestOneof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestOneof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestOneof>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestOneof& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestOneof& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestOneof* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestOneof";
  }
  protected:
  explicit TestOneof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestOneof_FooGroup FooGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kFooIntFieldNumber = 1,
    kFooStringFieldNumber = 2,
    kFooMessageFieldNumber = 3,
    kFoogroupFieldNumber = 4,
  };
  // int32 foo_int = 1;
  bool has_foo_int() const;
  private:
  bool _internal_has_foo_int() const;
  public:
  void clear_foo_int();
  int32_t foo_int() const;
  void set_foo_int(int32_t value);
  private:
  int32_t _internal_foo_int() const;
  void _internal_set_foo_int(int32_t value);
  public:

  // string foo_string = 2;
  bool has_foo_string() const;
  private:
  bool _internal_has_foo_string() const;
  public:
  void clear_foo_string();
  const std::string& foo_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foo_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foo_string();
  PROTOBUF_NODISCARD std::string* release_foo_string();
  void set_allocated_foo_string(std::string* foo_string);
  private:
  const std::string& _internal_foo_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foo_string(const std::string& value);
  std::string* _internal_mutable_foo_string();
  public:

  // .protobuf_unittest.TestAllTypes foo_message = 3;
  bool has_foo_message() const;
  private:
  bool _internal_has_foo_message() const;
  public:
  void clear_foo_message();
  const ::protobuf_unittest::TestAllTypes& foo_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_foo_message();
  ::protobuf_unittest::TestAllTypes* mutable_foo_message();
  void set_allocated_foo_message(::protobuf_unittest::TestAllTypes* foo_message);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_foo_message() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_foo_message();
  public:
  void unsafe_arena_set_allocated_foo_message(
      ::protobuf_unittest::TestAllTypes* foo_message);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_foo_message();

  // group FooGroup = 4 { ... };
  bool has_foogroup() const;
  private:
  bool _internal_has_foogroup() const;
  public:
  void clear_foogroup();
  const ::protobuf_unittest::TestOneof_FooGroup& foogroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestOneof_FooGroup* release_foogroup();
  ::protobuf_unittest::TestOneof_FooGroup* mutable_foogroup();
  void set_allocated_foogroup(::protobuf_unittest::TestOneof_FooGroup* foogroup);
  private:
  const ::protobuf_unittest::TestOneof_FooGroup& _internal_foogroup() const;
  ::protobuf_unittest::TestOneof_FooGroup* _internal_mutable_foogroup();
  public:
  void unsafe_arena_set_allocated_foogroup(
      ::protobuf_unittest::TestOneof_FooGroup* foogroup);
  ::protobuf_unittest::TestOneof_FooGroup* unsafe_arena_release_foogroup();

  void clear_foo();
  FooCase foo_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestOneof)
 private:
  class _Internal;
  void set_has_foo_int();
  void set_has_foo_string();
  void set_has_foo_message();
  void set_has_foogroup();

  inline bool has_foo() const;
  inline void clear_has_foo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FooUnion {
    constexpr FooUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t foo_int_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_;
    ::protobuf_unittest::TestAllTypes* foo_message_;
    ::protobuf_unittest::TestOneof_FooGroup* foogroup_;
  } foo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestOneofBackwardsCompatible_FooGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup) */ {
 public:
  inline TestOneofBackwardsCompatible_FooGroup() : TestOneofBackwardsCompatible_FooGroup(nullptr) {}
  ~TestOneofBackwardsCompatible_FooGroup() override;
  explicit PROTOBUF_CONSTEXPR TestOneofBackwardsCompatible_FooGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestOneofBackwardsCompatible_FooGroup(const TestOneofBackwardsCompatible_FooGroup& from);
  TestOneofBackwardsCompatible_FooGroup(TestOneofBackwardsCompatible_FooGroup&& from) noexcept
    : TestOneofBackwardsCompatible_FooGroup() {
    *this = ::std::move(from);
  }

  inline TestOneofBackwardsCompatible_FooGroup& operator=(const TestOneofBackwardsCompatible_FooGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOneofBackwardsCompatible_FooGroup& operator=(TestOneofBackwardsCompatible_FooGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestOneofBackwardsCompatible_FooGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestOneofBackwardsCompatible_FooGroup* internal_default_instance() {
    return reinterpret_cast<const TestOneofBackwardsCompatible_FooGroup*>(
               &_TestOneofBackwardsCompatible_FooGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(TestOneofBackwardsCompatible_FooGroup& a, TestOneofBackwardsCompatible_FooGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOneofBackwardsCompatible_FooGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestOneofBackwardsCompatible_FooGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestOneofBackwardsCompatible_FooGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestOneofBackwardsCompatible_FooGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestOneofBackwardsCompatible_FooGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestOneofBackwardsCompatible_FooGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestOneofBackwardsCompatible_FooGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestOneofBackwardsCompatible.FooGroup";
  }
  protected:
  explicit TestOneofBackwardsCompatible_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 6,
    kAFieldNumber = 5,
  };
  // optional string b = 6;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // optional int32 a = 5;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestOneofBackwardsCompatible final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestOneofBackwardsCompatible) */ {
 public:
  inline TestOneofBackwardsCompatible() : TestOneofBackwardsCompatible(nullptr) {}
  ~TestOneofBackwardsCompatible() override;
  explicit PROTOBUF_CONSTEXPR TestOneofBackwardsCompatible(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestOneofBackwardsCompatible(const TestOneofBackwardsCompatible& from);
  TestOneofBackwardsCompatible(TestOneofBackwardsCompatible&& from) noexcept
    : TestOneofBackwardsCompatible() {
    *this = ::std::move(from);
  }

  inline TestOneofBackwardsCompatible& operator=(const TestOneofBackwardsCompatible& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOneofBackwardsCompatible& operator=(TestOneofBackwardsCompatible&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestOneofBackwardsCompatible& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestOneofBackwardsCompatible* internal_default_instance() {
    return reinterpret_cast<const TestOneofBackwardsCompatible*>(
               &_TestOneofBackwardsCompatible_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(TestOneofBackwardsCompatible& a, TestOneofBackwardsCompatible& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOneofBackwardsCompatible* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestOneofBackwardsCompatible* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestOneofBackwardsCompatible* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestOneofBackwardsCompatible>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestOneofBackwardsCompatible& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestOneofBackwardsCompatible& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestOneofBackwardsCompatible* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestOneofBackwardsCompatible";
  }
  protected:
  explicit TestOneofBackwardsCompatible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestOneofBackwardsCompatible_FooGroup FooGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kFooStringFieldNumber = 2,
    kFooMessageFieldNumber = 3,
    kFoogroupFieldNumber = 4,
    kFooIntFieldNumber = 1,
  };
  // optional string foo_string = 2;
  bool has_foo_string() const;
  private:
  bool _internal_has_foo_string() const;
  public:
  void clear_foo_string();
  const std::string& foo_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foo_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foo_string();
  PROTOBUF_NODISCARD std::string* release_foo_string();
  void set_allocated_foo_string(std::string* foo_string);
  private:
  const std::string& _internal_foo_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foo_string(const std::string& value);
  std::string* _internal_mutable_foo_string();
  public:

  // optional .protobuf_unittest.TestAllTypes foo_message = 3;
  bool has_foo_message() const;
  private:
  bool _internal_has_foo_message() const;
  public:
  void clear_foo_message();
  const ::protobuf_unittest::TestAllTypes& foo_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_foo_message();
  ::protobuf_unittest::TestAllTypes* mutable_foo_message();
  void set_allocated_foo_message(::protobuf_unittest::TestAllTypes* foo_message);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_foo_message() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_foo_message();
  public:
  void unsafe_arena_set_allocated_foo_message(
      ::protobuf_unittest::TestAllTypes* foo_message);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_foo_message();

  // optional group FooGroup = 4 { ... };
  bool has_foogroup() const;
  private:
  bool _internal_has_foogroup() const;
  public:
  void clear_foogroup();
  const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup& foogroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* release_foogroup();
  ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* mutable_foogroup();
  void set_allocated_foogroup(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* foogroup);
  private:
  const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup& _internal_foogroup() const;
  ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* _internal_mutable_foogroup();
  public:
  void unsafe_arena_set_allocated_foogroup(
      ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* foogroup);
  ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* unsafe_arena_release_foogroup();

  // optional int32 foo_int = 1;
  bool has_foo_int() const;
  private:
  bool _internal_has_foo_int() const;
  public:
  void clear_foo_int();
  int32_t foo_int() const;
  void set_foo_int(int32_t value);
  private:
  int32_t _internal_foo_int() const;
  void _internal_set_foo_int(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestOneofBackwardsCompatible)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_;
  ::protobuf_unittest::TestAllTypes* foo_message_;
  ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* foogroup_;
  int32_t foo_int_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestOneof2_FooGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestOneof2.FooGroup) */ {
 public:
  inline TestOneof2_FooGroup() : TestOneof2_FooGroup(nullptr) {}
  ~TestOneof2_FooGroup() override;
  explicit PROTOBUF_CONSTEXPR TestOneof2_FooGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestOneof2_FooGroup(const TestOneof2_FooGroup& from);
  TestOneof2_FooGroup(TestOneof2_FooGroup&& from) noexcept
    : TestOneof2_FooGroup() {
    *this = ::std::move(from);
  }

  inline TestOneof2_FooGroup& operator=(const TestOneof2_FooGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOneof2_FooGroup& operator=(TestOneof2_FooGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestOneof2_FooGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestOneof2_FooGroup* internal_default_instance() {
    return reinterpret_cast<const TestOneof2_FooGroup*>(
               &_TestOneof2_FooGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(TestOneof2_FooGroup& a, TestOneof2_FooGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOneof2_FooGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestOneof2_FooGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestOneof2_FooGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestOneof2_FooGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestOneof2_FooGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestOneof2_FooGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestOneof2_FooGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestOneof2.FooGroup";
  }
  protected:
  explicit TestOneof2_FooGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 10,
    kAFieldNumber = 9,
  };
  // optional string b = 10;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const std::string& b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b();
  PROTOBUF_NODISCARD std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // optional int32 a = 9;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestOneof2.FooGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  int32_t a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestOneof2_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestOneof2.NestedMessage) */ {
 public:
  inline TestOneof2_NestedMessage() : TestOneof2_NestedMessage(nullptr) {}
  ~TestOneof2_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestOneof2_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestOneof2_NestedMessage(const TestOneof2_NestedMessage& from);
  TestOneof2_NestedMessage(TestOneof2_NestedMessage&& from) noexcept
    : TestOneof2_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestOneof2_NestedMessage& operator=(const TestOneof2_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOneof2_NestedMessage& operator=(TestOneof2_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestOneof2_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestOneof2_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestOneof2_NestedMessage*>(
               &_TestOneof2_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(TestOneof2_NestedMessage& a, TestOneof2_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOneof2_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestOneof2_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestOneof2_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestOneof2_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestOneof2_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestOneof2_NestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestOneof2_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestOneof2.NestedMessage";
  }
  protected:
  explicit TestOneof2_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorgeIntFieldNumber = 2,
    kQuxIntFieldNumber = 1,
  };
  // repeated int32 corge_int = 2;
  int corge_int_size() const;
  private:
  int _internal_corge_int_size() const;
  public:
  void clear_corge_int();
  private:
  int32_t _internal_corge_int(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_corge_int() const;
  void _internal_add_corge_int(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_corge_int();
  public:
  int32_t corge_int(int index) const;
  void set_corge_int(int index, int32_t value);
  void add_corge_int(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      corge_int() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_corge_int();

  // optional int64 qux_int = 1;
  bool has_qux_int() const;
  private:
  bool _internal_has_qux_int() const;
  public:
  void clear_qux_int();
  int64_t qux_int() const;
  void set_qux_int(int64_t value);
  private:
  int64_t _internal_qux_int() const;
  void _internal_set_qux_int(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestOneof2.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > corge_int_;
  int64_t qux_int_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestOneof2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestOneof2) */ {
 public:
  inline TestOneof2() : TestOneof2(nullptr) {}
  ~TestOneof2() override;
  explicit PROTOBUF_CONSTEXPR TestOneof2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestOneof2(const TestOneof2& from);
  TestOneof2(TestOneof2&& from) noexcept
    : TestOneof2() {
    *this = ::std::move(from);
  }

  inline TestOneof2& operator=(const TestOneof2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOneof2& operator=(TestOneof2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestOneof2& default_instance() {
    return *internal_default_instance();
  }
  enum FooCase {
    kFooInt = 1,
    kFooString = 2,
    kFooCord = 3,
    kFooStringPiece = 4,
    kFooBytes = 5,
    kFooEnum = 6,
    kFooMessage = 7,
    kFoogroup = 8,
    kFooLazyMessage = 11,
    FOO_NOT_SET = 0,
  };

  enum BarCase {
    kBarInt = 12,
    kBarString = 13,
    kBarCord = 14,
    kBarStringPiece = 15,
    kBarBytes = 16,
    kBarEnum = 17,
    kBarStringWithEmptyDefault = 20,
    kBarCordWithEmptyDefault = 21,
    kBarStringPieceWithEmptyDefault = 22,
    kBarBytesWithEmptyDefault = 23,
    BAR_NOT_SET = 0,
  };

  static inline const TestOneof2* internal_default_instance() {
    return reinterpret_cast<const TestOneof2*>(
               &_TestOneof2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(TestOneof2& a, TestOneof2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOneof2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestOneof2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestOneof2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestOneof2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestOneof2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestOneof2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestOneof2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestOneof2";
  }
  protected:
  explicit TestOneof2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestOneof2_FooGroup FooGroup;
  typedef TestOneof2_NestedMessage NestedMessage;

  typedef TestOneof2_NestedEnum NestedEnum;
  static constexpr NestedEnum FOO =
    TestOneof2_NestedEnum_FOO;
  static constexpr NestedEnum BAR =
    TestOneof2_NestedEnum_BAR;
  static constexpr NestedEnum BAZ =
    TestOneof2_NestedEnum_BAZ;
  static inline bool NestedEnum_IsValid(int value) {
    return TestOneof2_NestedEnum_IsValid(value);
  }
  static constexpr NestedEnum NestedEnum_MIN =
    TestOneof2_NestedEnum_NestedEnum_MIN;
  static constexpr NestedEnum NestedEnum_MAX =
    TestOneof2_NestedEnum_NestedEnum_MAX;
  static constexpr int NestedEnum_ARRAYSIZE =
    TestOneof2_NestedEnum_NestedEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NestedEnum_descriptor() {
    return TestOneof2_NestedEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& NestedEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NestedEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NestedEnum_Name.");
    return TestOneof2_NestedEnum_Name(enum_t_value);
  }
  static inline bool NestedEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NestedEnum* value) {
    return TestOneof2_NestedEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBazStringFieldNumber = 19,
    kBazIntFieldNumber = 18,
    kFooIntFieldNumber = 1,
    kFooStringFieldNumber = 2,
    kFooCordFieldNumber = 3,
    kFooStringPieceFieldNumber = 4,
    kFooBytesFieldNumber = 5,
    kFooEnumFieldNumber = 6,
    kFooMessageFieldNumber = 7,
    kFoogroupFieldNumber = 8,
    kFooLazyMessageFieldNumber = 11,
    kBarIntFieldNumber = 12,
    kBarStringFieldNumber = 13,
    kBarCordFieldNumber = 14,
    kBarStringPieceFieldNumber = 15,
    kBarBytesFieldNumber = 16,
    kBarEnumFieldNumber = 17,
    kBarStringWithEmptyDefaultFieldNumber = 20,
    kBarCordWithEmptyDefaultFieldNumber = 21,
    kBarStringPieceWithEmptyDefaultFieldNumber = 22,
    kBarBytesWithEmptyDefaultFieldNumber = 23,
  };
  // optional string baz_string = 19 [default = "BAZ"];
  bool has_baz_string() const;
  private:
  bool _internal_has_baz_string() const;
  public:
  void clear_baz_string();
  const std::string& baz_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_baz_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_baz_string();
  PROTOBUF_NODISCARD std::string* release_baz_string();
  void set_allocated_baz_string(std::string* baz_string);
  private:
  const std::string& _internal_baz_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_baz_string(const std::string& value);
  std::string* _internal_mutable_baz_string();
  public:

  // optional int32 baz_int = 18;
  bool has_baz_int() const;
  private:
  bool _internal_has_baz_int() const;
  public:
  void clear_baz_int();
  int32_t baz_int() const;
  void set_baz_int(int32_t value);
  private:
  int32_t _internal_baz_int() const;
  void _internal_set_baz_int(int32_t value);
  public:

  // int32 foo_int = 1;
  bool has_foo_int() const;
  private:
  bool _internal_has_foo_int() const;
  public:
  void clear_foo_int();
  int32_t foo_int() const;
  void set_foo_int(int32_t value);
  private:
  int32_t _internal_foo_int() const;
  void _internal_set_foo_int(int32_t value);
  public:

  // string foo_string = 2;
  bool has_foo_string() const;
  private:
  bool _internal_has_foo_string() const;
  public:
  void clear_foo_string();
  const std::string& foo_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foo_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foo_string();
  PROTOBUF_NODISCARD std::string* release_foo_string();
  void set_allocated_foo_string(std::string* foo_string);
  private:
  const std::string& _internal_foo_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foo_string(const std::string& value);
  std::string* _internal_mutable_foo_string();
  public:

  // string foo_cord = 3 [ctype = CORD];
  bool has_foo_cord() const;
  private:
  bool _internal_has_foo_cord() const;
  public:
  void clear_foo_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& foo_cord() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foo_cord(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foo_cord();
  PROTOBUF_NODISCARD std::string* release_foo_cord();
  void set_allocated_foo_cord(std::string* foo_cord);
  private:
  const std::string& _internal_foo_cord() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foo_cord(const std::string& value);
  std::string* _internal_mutable_foo_cord();
  public:
 public:

  // string foo_string_piece = 4 [ctype = STRING_PIECE];
  bool has_foo_string_piece() const;
  private:
  bool _internal_has_foo_string_piece() const;
  public:
  void clear_foo_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& foo_string_piece() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foo_string_piece(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foo_string_piece();
  PROTOBUF_NODISCARD std::string* release_foo_string_piece();
  void set_allocated_foo_string_piece(std::string* foo_string_piece);
  private:
  const std::string& _internal_foo_string_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foo_string_piece(const std::string& value);
  std::string* _internal_mutable_foo_string_piece();
  public:
 public:

  // bytes foo_bytes = 5;
  bool has_foo_bytes() const;
  private:
  bool _internal_has_foo_bytes() const;
  public:
  void clear_foo_bytes();
  const std::string& foo_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foo_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foo_bytes();
  PROTOBUF_NODISCARD std::string* release_foo_bytes();
  void set_allocated_foo_bytes(std::string* foo_bytes);
  private:
  const std::string& _internal_foo_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foo_bytes(const std::string& value);
  std::string* _internal_mutable_foo_bytes();
  public:

  // .protobuf_unittest.TestOneof2.NestedEnum foo_enum = 6;
  bool has_foo_enum() const;
  private:
  bool _internal_has_foo_enum() const;
  public:
  void clear_foo_enum();
  ::protobuf_unittest::TestOneof2_NestedEnum foo_enum() const;
  void set_foo_enum(::protobuf_unittest::TestOneof2_NestedEnum value);
  private:
  ::protobuf_unittest::TestOneof2_NestedEnum _internal_foo_enum() const;
  void _internal_set_foo_enum(::protobuf_unittest::TestOneof2_NestedEnum value);
  public:

  // .protobuf_unittest.TestOneof2.NestedMessage foo_message = 7;
  bool has_foo_message() const;
  private:
  bool _internal_has_foo_message() const;
  public:
  void clear_foo_message();
  const ::protobuf_unittest::TestOneof2_NestedMessage& foo_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestOneof2_NestedMessage* release_foo_message();
  ::protobuf_unittest::TestOneof2_NestedMessage* mutable_foo_message();
  void set_allocated_foo_message(::protobuf_unittest::TestOneof2_NestedMessage* foo_message);
  private:
  const ::protobuf_unittest::TestOneof2_NestedMessage& _internal_foo_message() const;
  ::protobuf_unittest::TestOneof2_NestedMessage* _internal_mutable_foo_message();
  public:
  void unsafe_arena_set_allocated_foo_message(
      ::protobuf_unittest::TestOneof2_NestedMessage* foo_message);
  ::protobuf_unittest::TestOneof2_NestedMessage* unsafe_arena_release_foo_message();

  // group FooGroup = 8 { ... };
  bool has_foogroup() const;
  private:
  bool _internal_has_foogroup() const;
  public:
  void clear_foogroup();
  const ::protobuf_unittest::TestOneof2_FooGroup& foogroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestOneof2_FooGroup* release_foogroup();
  ::protobuf_unittest::TestOneof2_FooGroup* mutable_foogroup();
  void set_allocated_foogroup(::protobuf_unittest::TestOneof2_FooGroup* foogroup);
  private:
  const ::protobuf_unittest::TestOneof2_FooGroup& _internal_foogroup() const;
  ::protobuf_unittest::TestOneof2_FooGroup* _internal_mutable_foogroup();
  public:
  void unsafe_arena_set_allocated_foogroup(
      ::protobuf_unittest::TestOneof2_FooGroup* foogroup);
  ::protobuf_unittest::TestOneof2_FooGroup* unsafe_arena_release_foogroup();

  // .protobuf_unittest.TestOneof2.NestedMessage foo_lazy_message = 11 [lazy = true];
  bool has_foo_lazy_message() const;
  private:
  bool _internal_has_foo_lazy_message() const;
  public:
  void clear_foo_lazy_message();
  const ::protobuf_unittest::TestOneof2_NestedMessage& foo_lazy_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestOneof2_NestedMessage* release_foo_lazy_message();
  ::protobuf_unittest::TestOneof2_NestedMessage* mutable_foo_lazy_message();
  void set_allocated_foo_lazy_message(::protobuf_unittest::TestOneof2_NestedMessage* foo_lazy_message);
  private:
  const ::protobuf_unittest::TestOneof2_NestedMessage& _internal_foo_lazy_message() const;
  ::protobuf_unittest::TestOneof2_NestedMessage* _internal_mutable_foo_lazy_message();
  public:
  void unsafe_arena_set_allocated_foo_lazy_message(
      ::protobuf_unittest::TestOneof2_NestedMessage* foo_lazy_message);
  ::protobuf_unittest::TestOneof2_NestedMessage* unsafe_arena_release_foo_lazy_message();

  // int32 bar_int = 12 [default = 5];
  bool has_bar_int() const;
  private:
  bool _internal_has_bar_int() const;
  public:
  void clear_bar_int();
  int32_t bar_int() const;
  void set_bar_int(int32_t value);
  private:
  int32_t _internal_bar_int() const;
  void _internal_set_bar_int(int32_t value);
  public:

  // string bar_string = 13 [default = "STRING"];
  bool has_bar_string() const;
  private:
  bool _internal_has_bar_string() const;
  public:
  void clear_bar_string();
  const std::string& bar_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar_string();
  PROTOBUF_NODISCARD std::string* release_bar_string();
  void set_allocated_bar_string(std::string* bar_string);
  private:
  const std::string& _internal_bar_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar_string(const std::string& value);
  std::string* _internal_mutable_bar_string();
  public:

  // string bar_cord = 14 [default = "CORD", ctype = CORD];
  bool has_bar_cord() const;
  private:
  bool _internal_has_bar_cord() const;
  public:
  void clear_bar_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& bar_cord() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar_cord(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar_cord();
  PROTOBUF_NODISCARD std::string* release_bar_cord();
  void set_allocated_bar_cord(std::string* bar_cord);
  private:
  const std::string& _internal_bar_cord() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar_cord(const std::string& value);
  std::string* _internal_mutable_bar_cord();
  public:
 public:

  // string bar_string_piece = 15 [default = "SPIECE", ctype = STRING_PIECE];
  bool has_bar_string_piece() const;
  private:
  bool _internal_has_bar_string_piece() const;
  public:
  void clear_bar_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& bar_string_piece() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar_string_piece(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar_string_piece();
  PROTOBUF_NODISCARD std::string* release_bar_string_piece();
  void set_allocated_bar_string_piece(std::string* bar_string_piece);
  private:
  const std::string& _internal_bar_string_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar_string_piece(const std::string& value);
  std::string* _internal_mutable_bar_string_piece();
  public:
 public:

  // bytes bar_bytes = 16 [default = "BYTES"];
  bool has_bar_bytes() const;
  private:
  bool _internal_has_bar_bytes() const;
  public:
  void clear_bar_bytes();
  const std::string& bar_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar_bytes();
  PROTOBUF_NODISCARD std::string* release_bar_bytes();
  void set_allocated_bar_bytes(std::string* bar_bytes);
  private:
  const std::string& _internal_bar_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar_bytes(const std::string& value);
  std::string* _internal_mutable_bar_bytes();
  public:

  // .protobuf_unittest.TestOneof2.NestedEnum bar_enum = 17 [default = BAR];
  bool has_bar_enum() const;
  private:
  bool _internal_has_bar_enum() const;
  public:
  void clear_bar_enum();
  ::protobuf_unittest::TestOneof2_NestedEnum bar_enum() const;
  void set_bar_enum(::protobuf_unittest::TestOneof2_NestedEnum value);
  private:
  ::protobuf_unittest::TestOneof2_NestedEnum _internal_bar_enum() const;
  void _internal_set_bar_enum(::protobuf_unittest::TestOneof2_NestedEnum value);
  public:

  // string bar_string_with_empty_default = 20 [default = ""];
  bool has_bar_string_with_empty_default() const;
  private:
  bool _internal_has_bar_string_with_empty_default() const;
  public:
  void clear_bar_string_with_empty_default();
  const std::string& bar_string_with_empty_default() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar_string_with_empty_default(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar_string_with_empty_default();
  PROTOBUF_NODISCARD std::string* release_bar_string_with_empty_default();
  void set_allocated_bar_string_with_empty_default(std::string* bar_string_with_empty_default);
  private:
  const std::string& _internal_bar_string_with_empty_default() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar_string_with_empty_default(const std::string& value);
  std::string* _internal_mutable_bar_string_with_empty_default();
  public:

  // string bar_cord_with_empty_default = 21 [default = "", ctype = CORD];
  bool has_bar_cord_with_empty_default() const;
  private:
  bool _internal_has_bar_cord_with_empty_default() const;
  public:
  void clear_bar_cord_with_empty_default();
 private:
  // Hidden due to unknown ctype option.
  const std::string& bar_cord_with_empty_default() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar_cord_with_empty_default(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar_cord_with_empty_default();
  PROTOBUF_NODISCARD std::string* release_bar_cord_with_empty_default();
  void set_allocated_bar_cord_with_empty_default(std::string* bar_cord_with_empty_default);
  private:
  const std::string& _internal_bar_cord_with_empty_default() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar_cord_with_empty_default(const std::string& value);
  std::string* _internal_mutable_bar_cord_with_empty_default();
  public:
 public:

  // string bar_string_piece_with_empty_default = 22 [default = "", ctype = STRING_PIECE];
  bool has_bar_string_piece_with_empty_default() const;
  private:
  bool _internal_has_bar_string_piece_with_empty_default() const;
  public:
  void clear_bar_string_piece_with_empty_default();
 private:
  // Hidden due to unknown ctype option.
  const std::string& bar_string_piece_with_empty_default() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar_string_piece_with_empty_default(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar_string_piece_with_empty_default();
  PROTOBUF_NODISCARD std::string* release_bar_string_piece_with_empty_default();
  void set_allocated_bar_string_piece_with_empty_default(std::string* bar_string_piece_with_empty_default);
  private:
  const std::string& _internal_bar_string_piece_with_empty_default() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar_string_piece_with_empty_default(const std::string& value);
  std::string* _internal_mutable_bar_string_piece_with_empty_default();
  public:
 public:

  // bytes bar_bytes_with_empty_default = 23 [default = ""];
  bool has_bar_bytes_with_empty_default() const;
  private:
  bool _internal_has_bar_bytes_with_empty_default() const;
  public:
  void clear_bar_bytes_with_empty_default();
  const std::string& bar_bytes_with_empty_default() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bar_bytes_with_empty_default(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bar_bytes_with_empty_default();
  PROTOBUF_NODISCARD std::string* release_bar_bytes_with_empty_default();
  void set_allocated_bar_bytes_with_empty_default(std::string* bar_bytes_with_empty_default);
  private:
  const std::string& _internal_bar_bytes_with_empty_default() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bar_bytes_with_empty_default(const std::string& value);
  std::string* _internal_mutable_bar_bytes_with_empty_default();
  public:

  void clear_foo();
  FooCase foo_case() const;
  void clear_bar();
  BarCase bar_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestOneof2)
 private:
  class _Internal;
  void set_has_foo_int();
  void set_has_foo_string();
  void set_has_foo_cord();
  void set_has_foo_string_piece();
  void set_has_foo_bytes();
  void set_has_foo_enum();
  void set_has_foo_message();
  void set_has_foogroup();
  void set_has_foo_lazy_message();
  void set_has_bar_int();
  void set_has_bar_string();
  void set_has_bar_cord();
  void set_has_bar_string_piece();
  void set_has_bar_bytes();
  void set_has_bar_enum();
  void set_has_bar_string_with_empty_default();
  void set_has_bar_cord_with_empty_default();
  void set_has_bar_string_piece_with_empty_default();
  void set_has_bar_bytes_with_empty_default();

  inline bool has_foo() const;
  inline void clear_has_foo();

  inline bool has_bar() const;
  inline void clear_has_bar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_baz_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baz_string_;
  int32_t baz_int_;
  union FooUnion {
    constexpr FooUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t foo_int_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_cord_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_bytes_;
    int foo_enum_;
    ::protobuf_unittest::TestOneof2_NestedMessage* foo_message_;
    ::protobuf_unittest::TestOneof2_FooGroup* foogroup_;
    ::protobuf_unittest::TestOneof2_NestedMessage* foo_lazy_message_;
  } foo_;
  union BarUnion {
    constexpr BarUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t bar_int_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_cord_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_string_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_bytes_;
    int bar_enum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_string_with_empty_default_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_cord_with_empty_default_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_string_piece_with_empty_default_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bar_bytes_with_empty_default_;
  } bar_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_bar_string_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_bar_cord_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_bar_string_piece_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_bar_bytes_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestRequiredOneof_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestRequiredOneof.NestedMessage) */ {
 public:
  inline TestRequiredOneof_NestedMessage() : TestRequiredOneof_NestedMessage(nullptr) {}
  ~TestRequiredOneof_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestRequiredOneof_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRequiredOneof_NestedMessage(const TestRequiredOneof_NestedMessage& from);
  TestRequiredOneof_NestedMessage(TestRequiredOneof_NestedMessage&& from) noexcept
    : TestRequiredOneof_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestRequiredOneof_NestedMessage& operator=(const TestRequiredOneof_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequiredOneof_NestedMessage& operator=(TestRequiredOneof_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequiredOneof_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRequiredOneof_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestRequiredOneof_NestedMessage*>(
               &_TestRequiredOneof_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(TestRequiredOneof_NestedMessage& a, TestRequiredOneof_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequiredOneof_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequiredOneof_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRequiredOneof_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRequiredOneof_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRequiredOneof_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRequiredOneof_NestedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequiredOneof_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestRequiredOneof.NestedMessage";
  }
  protected:
  explicit TestRequiredOneof_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredDoubleFieldNumber = 1,
  };
  // required double required_double = 1;
  bool has_required_double() const;
  private:
  bool _internal_has_required_double() const;
  public:
  void clear_required_double();
  double required_double() const;
  void set_required_double(double value);
  private:
  double _internal_required_double() const;
  void _internal_set_required_double(double value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRequiredOneof.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double required_double_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestRequiredOneof final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestRequiredOneof) */ {
 public:
  inline TestRequiredOneof() : TestRequiredOneof(nullptr) {}
  ~TestRequiredOneof() override;
  explicit PROTOBUF_CONSTEXPR TestRequiredOneof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRequiredOneof(const TestRequiredOneof& from);
  TestRequiredOneof(TestRequiredOneof&& from) noexcept
    : TestRequiredOneof() {
    *this = ::std::move(from);
  }

  inline TestRequiredOneof& operator=(const TestRequiredOneof& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequiredOneof& operator=(TestRequiredOneof&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRequiredOneof& default_instance() {
    return *internal_default_instance();
  }
  enum FooCase {
    kFooInt = 1,
    kFooString = 2,
    kFooMessage = 3,
    FOO_NOT_SET = 0,
  };

  static inline const TestRequiredOneof* internal_default_instance() {
    return reinterpret_cast<const TestRequiredOneof*>(
               &_TestRequiredOneof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(TestRequiredOneof& a, TestRequiredOneof& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequiredOneof* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequiredOneof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRequiredOneof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRequiredOneof>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRequiredOneof& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRequiredOneof& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequiredOneof* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestRequiredOneof";
  }
  protected:
  explicit TestRequiredOneof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestRequiredOneof_NestedMessage NestedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kFooIntFieldNumber = 1,
    kFooStringFieldNumber = 2,
    kFooMessageFieldNumber = 3,
  };
  // int32 foo_int = 1;
  bool has_foo_int() const;
  private:
  bool _internal_has_foo_int() const;
  public:
  void clear_foo_int();
  int32_t foo_int() const;
  void set_foo_int(int32_t value);
  private:
  int32_t _internal_foo_int() const;
  void _internal_set_foo_int(int32_t value);
  public:

  // string foo_string = 2;
  bool has_foo_string() const;
  private:
  bool _internal_has_foo_string() const;
  public:
  void clear_foo_string();
  const std::string& foo_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_foo_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_foo_string();
  PROTOBUF_NODISCARD std::string* release_foo_string();
  void set_allocated_foo_string(std::string* foo_string);
  private:
  const std::string& _internal_foo_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_foo_string(const std::string& value);
  std::string* _internal_mutable_foo_string();
  public:

  // .protobuf_unittest.TestRequiredOneof.NestedMessage foo_message = 3;
  bool has_foo_message() const;
  private:
  bool _internal_has_foo_message() const;
  public:
  void clear_foo_message();
  const ::protobuf_unittest::TestRequiredOneof_NestedMessage& foo_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestRequiredOneof_NestedMessage* release_foo_message();
  ::protobuf_unittest::TestRequiredOneof_NestedMessage* mutable_foo_message();
  void set_allocated_foo_message(::protobuf_unittest::TestRequiredOneof_NestedMessage* foo_message);
  private:
  const ::protobuf_unittest::TestRequiredOneof_NestedMessage& _internal_foo_message() const;
  ::protobuf_unittest::TestRequiredOneof_NestedMessage* _internal_mutable_foo_message();
  public:
  void unsafe_arena_set_allocated_foo_message(
      ::protobuf_unittest::TestRequiredOneof_NestedMessage* foo_message);
  ::protobuf_unittest::TestRequiredOneof_NestedMessage* unsafe_arena_release_foo_message();

  void clear_foo();
  FooCase foo_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRequiredOneof)
 private:
  class _Internal;
  void set_has_foo_int();
  void set_has_foo_string();
  void set_has_foo_message();

  inline bool has_foo() const;
  inline void clear_has_foo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FooUnion {
    constexpr FooUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int32_t foo_int_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_string_;
    ::protobuf_unittest::TestRequiredOneof_NestedMessage* foo_message_;
  } foo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestPackedTypes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestPackedTypes) */ {
 public:
  inline TestPackedTypes() : TestPackedTypes(nullptr) {}
  ~TestPackedTypes() override;
  explicit PROTOBUF_CONSTEXPR TestPackedTypes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestPackedTypes(const TestPackedTypes& from);
  TestPackedTypes(TestPackedTypes&& from) noexcept
    : TestPackedTypes() {
    *this = ::std::move(from);
  }

  inline TestPackedTypes& operator=(const TestPackedTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPackedTypes& operator=(TestPackedTypes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestPackedTypes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestPackedTypes* internal_default_instance() {
    return reinterpret_cast<const TestPackedTypes*>(
               &_TestPackedTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TestPackedTypes& a, TestPackedTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPackedTypes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPackedTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestPackedTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestPackedTypes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestPackedTypes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestPackedTypes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPackedTypes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestPackedTypes";
  }
  protected:
  explicit TestPackedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedInt32FieldNumber = 90,
    kPackedInt64FieldNumber = 91,
    kPackedUint32FieldNumber = 92,
    kPackedUint64FieldNumber = 93,
    kPackedSint32FieldNumber = 94,
    kPackedSint64FieldNumber = 95,
    kPackedFixed32FieldNumber = 96,
    kPackedFixed64FieldNumber = 97,
    kPackedSfixed32FieldNumber = 98,
    kPackedSfixed64FieldNumber = 99,
    kPackedFloatFieldNumber = 100,
    kPackedDoubleFieldNumber = 101,
    kPackedBoolFieldNumber = 102,
    kPackedEnumFieldNumber = 103,
  };
  // repeated int32 packed_int32 = 90 [packed = true];
  int packed_int32_size() const;
  private:
  int _internal_packed_int32_size() const;
  public:
  void clear_packed_int32();
  private:
  int32_t _internal_packed_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_packed_int32() const;
  void _internal_add_packed_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_packed_int32();
  public:
  int32_t packed_int32(int index) const;
  void set_packed_int32(int index, int32_t value);
  void add_packed_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      packed_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_packed_int32();

  // repeated int64 packed_int64 = 91 [packed = true];
  int packed_int64_size() const;
  private:
  int _internal_packed_int64_size() const;
  public:
  void clear_packed_int64();
  private:
  int64_t _internal_packed_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_packed_int64() const;
  void _internal_add_packed_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_packed_int64();
  public:
  int64_t packed_int64(int index) const;
  void set_packed_int64(int index, int64_t value);
  void add_packed_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      packed_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_packed_int64();

  // repeated uint32 packed_uint32 = 92 [packed = true];
  int packed_uint32_size() const;
  private:
  int _internal_packed_uint32_size() const;
  public:
  void clear_packed_uint32();
  private:
  uint32_t _internal_packed_uint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_packed_uint32() const;
  void _internal_add_packed_uint32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_packed_uint32();
  public:
  uint32_t packed_uint32(int index) const;
  void set_packed_uint32(int index, uint32_t value);
  void add_packed_uint32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      packed_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_packed_uint32();

  // repeated uint64 packed_uint64 = 93 [packed = true];
  int packed_uint64_size() const;
  private:
  int _internal_packed_uint64_size() const;
  public:
  void clear_packed_uint64();
  private:
  uint64_t _internal_packed_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_packed_uint64() const;
  void _internal_add_packed_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_packed_uint64();
  public:
  uint64_t packed_uint64(int index) const;
  void set_packed_uint64(int index, uint64_t value);
  void add_packed_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      packed_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_packed_uint64();

  // repeated sint32 packed_sint32 = 94 [packed = true];
  int packed_sint32_size() const;
  private:
  int _internal_packed_sint32_size() const;
  public:
  void clear_packed_sint32();
  private:
  int32_t _internal_packed_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_packed_sint32() const;
  void _internal_add_packed_sint32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_packed_sint32();
  public:
  int32_t packed_sint32(int index) const;
  void set_packed_sint32(int index, int32_t value);
  void add_packed_sint32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      packed_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_packed_sint32();

  // repeated sint64 packed_sint64 = 95 [packed = true];
  int packed_sint64_size() const;
  private:
  int _internal_packed_sint64_size() const;
  public:
  void clear_packed_sint64();
  private:
  int64_t _internal_packed_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_packed_sint64() const;
  void _internal_add_packed_sint64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_packed_sint64();
  public:
  int64_t packed_sint64(int index) const;
  void set_packed_sint64(int index, int64_t value);
  void add_packed_sint64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      packed_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_packed_sint64();

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  int packed_fixed32_size() const;
  private:
  int _internal_packed_fixed32_size() const;
  public:
  void clear_packed_fixed32();
  private:
  uint32_t _internal_packed_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_packed_fixed32() const;
  void _internal_add_packed_fixed32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_packed_fixed32();
  public:
  uint32_t packed_fixed32(int index) const;
  void set_packed_fixed32(int index, uint32_t value);
  void add_packed_fixed32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      packed_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_packed_fixed32();

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  int packed_fixed64_size() const;
  private:
  int _internal_packed_fixed64_size() const;
  public:
  void clear_packed_fixed64();
  private:
  uint64_t _internal_packed_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_packed_fixed64() const;
  void _internal_add_packed_fixed64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_packed_fixed64();
  public:
  uint64_t packed_fixed64(int index) const;
  void set_packed_fixed64(int index, uint64_t value);
  void add_packed_fixed64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      packed_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_packed_fixed64();

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  int packed_sfixed32_size() const;
  private:
  int _internal_packed_sfixed32_size() const;
  public:
  void clear_packed_sfixed32();
  private:
  int32_t _internal_packed_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_packed_sfixed32() const;
  void _internal_add_packed_sfixed32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_packed_sfixed32();
  public:
  int32_t packed_sfixed32(int index) const;
  void set_packed_sfixed32(int index, int32_t value);
  void add_packed_sfixed32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      packed_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_packed_sfixed32();

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  int packed_sfixed64_size() const;
  private:
  int _internal_packed_sfixed64_size() const;
  public:
  void clear_packed_sfixed64();
  private:
  int64_t _internal_packed_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_packed_sfixed64() const;
  void _internal_add_packed_sfixed64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_packed_sfixed64();
  public:
  int64_t packed_sfixed64(int index) const;
  void set_packed_sfixed64(int index, int64_t value);
  void add_packed_sfixed64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      packed_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_packed_sfixed64();

  // repeated float packed_float = 100 [packed = true];
  int packed_float_size() const;
  private:
  int _internal_packed_float_size() const;
  public:
  void clear_packed_float();
  private:
  float _internal_packed_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_packed_float() const;
  void _internal_add_packed_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_packed_float();
  public:
  float packed_float(int index) const;
  void set_packed_float(int index, float value);
  void add_packed_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      packed_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_packed_float();

  // repeated double packed_double = 101 [packed = true];
  int packed_double_size() const;
  private:
  int _internal_packed_double_size() const;
  public:
  void clear_packed_double();
  private:
  double _internal_packed_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_packed_double() const;
  void _internal_add_packed_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_packed_double();
  public:
  double packed_double(int index) const;
  void set_packed_double(int index, double value);
  void add_packed_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      packed_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_packed_double();

  // repeated bool packed_bool = 102 [packed = true];
  int packed_bool_size() const;
  private:
  int _internal_packed_bool_size() const;
  public:
  void clear_packed_bool();
  private:
  bool _internal_packed_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_packed_bool() const;
  void _internal_add_packed_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_packed_bool();
  public:
  bool packed_bool(int index) const;
  void set_packed_bool(int index, bool value);
  void add_packed_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      packed_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_packed_bool();

  // repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
  int packed_enum_size() const;
  private:
  int _internal_packed_enum_size() const;
  public:
  void clear_packed_enum();
  private:
  ::protobuf_unittest::ForeignEnum _internal_packed_enum(int index) const;
  void _internal_add_packed_enum(::protobuf_unittest::ForeignEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_packed_enum();
  public:
  ::protobuf_unittest::ForeignEnum packed_enum(int index) const;
  void set_packed_enum(int index, ::protobuf_unittest::ForeignEnum value);
  void add_packed_enum(::protobuf_unittest::ForeignEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& packed_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_packed_enum();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestPackedTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > packed_int32_;
  mutable std::atomic<int> _packed_int32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > packed_int64_;
  mutable std::atomic<int> _packed_int64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > packed_uint32_;
  mutable std::atomic<int> _packed_uint32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > packed_uint64_;
  mutable std::atomic<int> _packed_uint64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > packed_sint32_;
  mutable std::atomic<int> _packed_sint32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > packed_sint64_;
  mutable std::atomic<int> _packed_sint64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > packed_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > packed_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > packed_sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > packed_sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > packed_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > packed_double_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > packed_bool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> packed_enum_;
  mutable std::atomic<int> _packed_enum_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestUnpackedTypes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestUnpackedTypes) */ {
 public:
  inline TestUnpackedTypes() : TestUnpackedTypes(nullptr) {}
  ~TestUnpackedTypes() override;
  explicit PROTOBUF_CONSTEXPR TestUnpackedTypes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestUnpackedTypes(const TestUnpackedTypes& from);
  TestUnpackedTypes(TestUnpackedTypes&& from) noexcept
    : TestUnpackedTypes() {
    *this = ::std::move(from);
  }

  inline TestUnpackedTypes& operator=(const TestUnpackedTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestUnpackedTypes& operator=(TestUnpackedTypes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestUnpackedTypes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestUnpackedTypes* internal_default_instance() {
    return reinterpret_cast<const TestUnpackedTypes*>(
               &_TestUnpackedTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TestUnpackedTypes& a, TestUnpackedTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(TestUnpackedTypes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestUnpackedTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestUnpackedTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestUnpackedTypes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestUnpackedTypes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestUnpackedTypes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestUnpackedTypes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestUnpackedTypes";
  }
  protected:
  explicit TestUnpackedTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnpackedInt32FieldNumber = 90,
    kUnpackedInt64FieldNumber = 91,
    kUnpackedUint32FieldNumber = 92,
    kUnpackedUint64FieldNumber = 93,
    kUnpackedSint32FieldNumber = 94,
    kUnpackedSint64FieldNumber = 95,
    kUnpackedFixed32FieldNumber = 96,
    kUnpackedFixed64FieldNumber = 97,
    kUnpackedSfixed32FieldNumber = 98,
    kUnpackedSfixed64FieldNumber = 99,
    kUnpackedFloatFieldNumber = 100,
    kUnpackedDoubleFieldNumber = 101,
    kUnpackedBoolFieldNumber = 102,
    kUnpackedEnumFieldNumber = 103,
  };
  // repeated int32 unpacked_int32 = 90 [packed = false];
  int unpacked_int32_size() const;
  private:
  int _internal_unpacked_int32_size() const;
  public:
  void clear_unpacked_int32();
  private:
  int32_t _internal_unpacked_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unpacked_int32() const;
  void _internal_add_unpacked_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unpacked_int32();
  public:
  int32_t unpacked_int32(int index) const;
  void set_unpacked_int32(int index, int32_t value);
  void add_unpacked_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unpacked_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unpacked_int32();

  // repeated int64 unpacked_int64 = 91 [packed = false];
  int unpacked_int64_size() const;
  private:
  int _internal_unpacked_int64_size() const;
  public:
  void clear_unpacked_int64();
  private:
  int64_t _internal_unpacked_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_unpacked_int64() const;
  void _internal_add_unpacked_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_unpacked_int64();
  public:
  int64_t unpacked_int64(int index) const;
  void set_unpacked_int64(int index, int64_t value);
  void add_unpacked_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      unpacked_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_unpacked_int64();

  // repeated uint32 unpacked_uint32 = 92 [packed = false];
  int unpacked_uint32_size() const;
  private:
  int _internal_unpacked_uint32_size() const;
  public:
  void clear_unpacked_uint32();
  private:
  uint32_t _internal_unpacked_uint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_unpacked_uint32() const;
  void _internal_add_unpacked_uint32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_unpacked_uint32();
  public:
  uint32_t unpacked_uint32(int index) const;
  void set_unpacked_uint32(int index, uint32_t value);
  void add_unpacked_uint32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      unpacked_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_unpacked_uint32();

  // repeated uint64 unpacked_uint64 = 93 [packed = false];
  int unpacked_uint64_size() const;
  private:
  int _internal_unpacked_uint64_size() const;
  public:
  void clear_unpacked_uint64();
  private:
  uint64_t _internal_unpacked_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_unpacked_uint64() const;
  void _internal_add_unpacked_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_unpacked_uint64();
  public:
  uint64_t unpacked_uint64(int index) const;
  void set_unpacked_uint64(int index, uint64_t value);
  void add_unpacked_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      unpacked_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_unpacked_uint64();

  // repeated sint32 unpacked_sint32 = 94 [packed = false];
  int unpacked_sint32_size() const;
  private:
  int _internal_unpacked_sint32_size() const;
  public:
  void clear_unpacked_sint32();
  private:
  int32_t _internal_unpacked_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unpacked_sint32() const;
  void _internal_add_unpacked_sint32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unpacked_sint32();
  public:
  int32_t unpacked_sint32(int index) const;
  void set_unpacked_sint32(int index, int32_t value);
  void add_unpacked_sint32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unpacked_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unpacked_sint32();

  // repeated sint64 unpacked_sint64 = 95 [packed = false];
  int unpacked_sint64_size() const;
  private:
  int _internal_unpacked_sint64_size() const;
  public:
  void clear_unpacked_sint64();
  private:
  int64_t _internal_unpacked_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_unpacked_sint64() const;
  void _internal_add_unpacked_sint64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_unpacked_sint64();
  public:
  int64_t unpacked_sint64(int index) const;
  void set_unpacked_sint64(int index, int64_t value);
  void add_unpacked_sint64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      unpacked_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_unpacked_sint64();

  // repeated fixed32 unpacked_fixed32 = 96 [packed = false];
  int unpacked_fixed32_size() const;
  private:
  int _internal_unpacked_fixed32_size() const;
  public:
  void clear_unpacked_fixed32();
  private:
  uint32_t _internal_unpacked_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_unpacked_fixed32() const;
  void _internal_add_unpacked_fixed32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_unpacked_fixed32();
  public:
  uint32_t unpacked_fixed32(int index) const;
  void set_unpacked_fixed32(int index, uint32_t value);
  void add_unpacked_fixed32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      unpacked_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_unpacked_fixed32();

  // repeated fixed64 unpacked_fixed64 = 97 [packed = false];
  int unpacked_fixed64_size() const;
  private:
  int _internal_unpacked_fixed64_size() const;
  public:
  void clear_unpacked_fixed64();
  private:
  uint64_t _internal_unpacked_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_unpacked_fixed64() const;
  void _internal_add_unpacked_fixed64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_unpacked_fixed64();
  public:
  uint64_t unpacked_fixed64(int index) const;
  void set_unpacked_fixed64(int index, uint64_t value);
  void add_unpacked_fixed64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      unpacked_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_unpacked_fixed64();

  // repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
  int unpacked_sfixed32_size() const;
  private:
  int _internal_unpacked_sfixed32_size() const;
  public:
  void clear_unpacked_sfixed32();
  private:
  int32_t _internal_unpacked_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unpacked_sfixed32() const;
  void _internal_add_unpacked_sfixed32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unpacked_sfixed32();
  public:
  int32_t unpacked_sfixed32(int index) const;
  void set_unpacked_sfixed32(int index, int32_t value);
  void add_unpacked_sfixed32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unpacked_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unpacked_sfixed32();

  // repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
  int unpacked_sfixed64_size() const;
  private:
  int _internal_unpacked_sfixed64_size() const;
  public:
  void clear_unpacked_sfixed64();
  private:
  int64_t _internal_unpacked_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_unpacked_sfixed64() const;
  void _internal_add_unpacked_sfixed64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_unpacked_sfixed64();
  public:
  int64_t unpacked_sfixed64(int index) const;
  void set_unpacked_sfixed64(int index, int64_t value);
  void add_unpacked_sfixed64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      unpacked_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_unpacked_sfixed64();

  // repeated float unpacked_float = 100 [packed = false];
  int unpacked_float_size() const;
  private:
  int _internal_unpacked_float_size() const;
  public:
  void clear_unpacked_float();
  private:
  float _internal_unpacked_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_unpacked_float() const;
  void _internal_add_unpacked_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_unpacked_float();
  public:
  float unpacked_float(int index) const;
  void set_unpacked_float(int index, float value);
  void add_unpacked_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      unpacked_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_unpacked_float();

  // repeated double unpacked_double = 101 [packed = false];
  int unpacked_double_size() const;
  private:
  int _internal_unpacked_double_size() const;
  public:
  void clear_unpacked_double();
  private:
  double _internal_unpacked_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_unpacked_double() const;
  void _internal_add_unpacked_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_unpacked_double();
  public:
  double unpacked_double(int index) const;
  void set_unpacked_double(int index, double value);
  void add_unpacked_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      unpacked_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_unpacked_double();

  // repeated bool unpacked_bool = 102 [packed = false];
  int unpacked_bool_size() const;
  private:
  int _internal_unpacked_bool_size() const;
  public:
  void clear_unpacked_bool();
  private:
  bool _internal_unpacked_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_unpacked_bool() const;
  void _internal_add_unpacked_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_unpacked_bool();
  public:
  bool unpacked_bool(int index) const;
  void set_unpacked_bool(int index, bool value);
  void add_unpacked_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      unpacked_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_unpacked_bool();

  // repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
  int unpacked_enum_size() const;
  private:
  int _internal_unpacked_enum_size() const;
  public:
  void clear_unpacked_enum();
  private:
  ::protobuf_unittest::ForeignEnum _internal_unpacked_enum(int index) const;
  void _internal_add_unpacked_enum(::protobuf_unittest::ForeignEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_unpacked_enum();
  public:
  ::protobuf_unittest::ForeignEnum unpacked_enum(int index) const;
  void set_unpacked_enum(int index, ::protobuf_unittest::ForeignEnum value);
  void add_unpacked_enum(::protobuf_unittest::ForeignEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& unpacked_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_unpacked_enum();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestUnpackedTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unpacked_int32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > unpacked_int64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > unpacked_uint32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > unpacked_uint64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unpacked_sint32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > unpacked_sint64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > unpacked_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > unpacked_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unpacked_sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > unpacked_sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > unpacked_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > unpacked_double_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > unpacked_bool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> unpacked_enum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestPackedExtensions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestPackedExtensions) */ {
 public:
  inline TestPackedExtensions() : TestPackedExtensions(nullptr) {}
  ~TestPackedExtensions() override;
  explicit PROTOBUF_CONSTEXPR TestPackedExtensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestPackedExtensions(const TestPackedExtensions& from);
  TestPackedExtensions(TestPackedExtensions&& from) noexcept
    : TestPackedExtensions() {
    *this = ::std::move(from);
  }

  inline TestPackedExtensions& operator=(const TestPackedExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPackedExtensions& operator=(TestPackedExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestPackedExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestPackedExtensions* internal_default_instance() {
    return reinterpret_cast<const TestPackedExtensions*>(
               &_TestPackedExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(TestPackedExtensions& a, TestPackedExtensions& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPackedExtensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPackedExtensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestPackedExtensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestPackedExtensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestPackedExtensions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestPackedExtensions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPackedExtensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestPackedExtensions";
  }
  protected:
  explicit TestPackedExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestPackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestPackedExtensions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestUnpackedExtensions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestUnpackedExtensions) */ {
 public:
  inline TestUnpackedExtensions() : TestUnpackedExtensions(nullptr) {}
  ~TestUnpackedExtensions() override;
  explicit PROTOBUF_CONSTEXPR TestUnpackedExtensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestUnpackedExtensions(const TestUnpackedExtensions& from);
  TestUnpackedExtensions(TestUnpackedExtensions&& from) noexcept
    : TestUnpackedExtensions() {
    *this = ::std::move(from);
  }

  inline TestUnpackedExtensions& operator=(const TestUnpackedExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestUnpackedExtensions& operator=(TestUnpackedExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestUnpackedExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestUnpackedExtensions* internal_default_instance() {
    return reinterpret_cast<const TestUnpackedExtensions*>(
               &_TestUnpackedExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(TestUnpackedExtensions& a, TestUnpackedExtensions& b) {
    a.Swap(&b);
  }
  inline void Swap(TestUnpackedExtensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestUnpackedExtensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestUnpackedExtensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestUnpackedExtensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestUnpackedExtensions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestUnpackedExtensions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestUnpackedExtensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestUnpackedExtensions";
  }
  protected:
  explicit TestUnpackedExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestUnpackedExtensions, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestUnpackedExtensions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDynamicExtensions_DynamicMessageType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDynamicExtensions.DynamicMessageType) */ {
 public:
  inline TestDynamicExtensions_DynamicMessageType() : TestDynamicExtensions_DynamicMessageType(nullptr) {}
  ~TestDynamicExtensions_DynamicMessageType() override;
  explicit PROTOBUF_CONSTEXPR TestDynamicExtensions_DynamicMessageType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDynamicExtensions_DynamicMessageType(const TestDynamicExtensions_DynamicMessageType& from);
  TestDynamicExtensions_DynamicMessageType(TestDynamicExtensions_DynamicMessageType&& from) noexcept
    : TestDynamicExtensions_DynamicMessageType() {
    *this = ::std::move(from);
  }

  inline TestDynamicExtensions_DynamicMessageType& operator=(const TestDynamicExtensions_DynamicMessageType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDynamicExtensions_DynamicMessageType& operator=(TestDynamicExtensions_DynamicMessageType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDynamicExtensions_DynamicMessageType& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDynamicExtensions_DynamicMessageType* internal_default_instance() {
    return reinterpret_cast<const TestDynamicExtensions_DynamicMessageType*>(
               &_TestDynamicExtensions_DynamicMessageType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(TestDynamicExtensions_DynamicMessageType& a, TestDynamicExtensions_DynamicMessageType& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDynamicExtensions_DynamicMessageType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDynamicExtensions_DynamicMessageType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDynamicExtensions_DynamicMessageType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDynamicExtensions_DynamicMessageType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestDynamicExtensions_DynamicMessageType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestDynamicExtensions_DynamicMessageType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDynamicExtensions_DynamicMessageType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDynamicExtensions.DynamicMessageType";
  }
  protected:
  explicit TestDynamicExtensions_DynamicMessageType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicFieldFieldNumber = 2100,
  };
  // optional int32 dynamic_field = 2100;
  bool has_dynamic_field() const;
  private:
  bool _internal_has_dynamic_field() const;
  public:
  void clear_dynamic_field();
  int32_t dynamic_field() const;
  void set_dynamic_field(int32_t value);
  private:
  int32_t _internal_dynamic_field() const;
  void _internal_set_dynamic_field(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDynamicExtensions.DynamicMessageType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t dynamic_field_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestDynamicExtensions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDynamicExtensions) */ {
 public:
  inline TestDynamicExtensions() : TestDynamicExtensions(nullptr) {}
  ~TestDynamicExtensions() override;
  explicit PROTOBUF_CONSTEXPR TestDynamicExtensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestDynamicExtensions(const TestDynamicExtensions& from);
  TestDynamicExtensions(TestDynamicExtensions&& from) noexcept
    : TestDynamicExtensions() {
    *this = ::std::move(from);
  }

  inline TestDynamicExtensions& operator=(const TestDynamicExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDynamicExtensions& operator=(TestDynamicExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestDynamicExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestDynamicExtensions* internal_default_instance() {
    return reinterpret_cast<const TestDynamicExtensions*>(
               &_TestDynamicExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(TestDynamicExtensions& a, TestDynamicExtensions& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDynamicExtensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestDynamicExtensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestDynamicExtensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestDynamicExtensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestDynamicExtensions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestDynamicExtensions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestDynamicExtensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDynamicExtensions";
  }
  protected:
  explicit TestDynamicExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestDynamicExtensions_DynamicMessageType DynamicMessageType;

  typedef TestDynamicExtensions_DynamicEnumType DynamicEnumType;
  static constexpr DynamicEnumType DYNAMIC_FOO =
    TestDynamicExtensions_DynamicEnumType_DYNAMIC_FOO;
  static constexpr DynamicEnumType DYNAMIC_BAR =
    TestDynamicExtensions_DynamicEnumType_DYNAMIC_BAR;
  static constexpr DynamicEnumType DYNAMIC_BAZ =
    TestDynamicExtensions_DynamicEnumType_DYNAMIC_BAZ;
  static inline bool DynamicEnumType_IsValid(int value) {
    return TestDynamicExtensions_DynamicEnumType_IsValid(value);
  }
  static constexpr DynamicEnumType DynamicEnumType_MIN =
    TestDynamicExtensions_DynamicEnumType_DynamicEnumType_MIN;
  static constexpr DynamicEnumType DynamicEnumType_MAX =
    TestDynamicExtensions_DynamicEnumType_DynamicEnumType_MAX;
  static constexpr int DynamicEnumType_ARRAYSIZE =
    TestDynamicExtensions_DynamicEnumType_DynamicEnumType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DynamicEnumType_descriptor() {
    return TestDynamicExtensions_DynamicEnumType_descriptor();
  }
  template<typename T>
  static inline const std::string& DynamicEnumType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DynamicEnumType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DynamicEnumType_Name.");
    return TestDynamicExtensions_DynamicEnumType_Name(enum_t_value);
  }
  static inline bool DynamicEnumType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DynamicEnumType* value) {
    return TestDynamicExtensions_DynamicEnumType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedExtensionFieldNumber = 2005,
    kPackedExtensionFieldNumber = 2006,
    kMessageExtensionFieldNumber = 2003,
    kDynamicMessageExtensionFieldNumber = 2004,
    kScalarExtensionFieldNumber = 2000,
    kEnumExtensionFieldNumber = 2001,
    kDynamicEnumExtensionFieldNumber = 2002,
  };
  // repeated string repeated_extension = 2005;
  int repeated_extension_size() const;
  private:
  int _internal_repeated_extension_size() const;
  public:
  void clear_repeated_extension();
  const std::string& repeated_extension(int index) const;
  std::string* mutable_repeated_extension(int index);
  void set_repeated_extension(int index, const std::string& value);
  void set_repeated_extension(int index, std::string&& value);
  void set_repeated_extension(int index, const char* value);
  void set_repeated_extension(int index, const char* value, size_t size);
  std::string* add_repeated_extension();
  void add_repeated_extension(const std::string& value);
  void add_repeated_extension(std::string&& value);
  void add_repeated_extension(const char* value);
  void add_repeated_extension(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_extension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_extension();
  private:
  const std::string& _internal_repeated_extension(int index) const;
  std::string* _internal_add_repeated_extension();
  public:

  // repeated sint32 packed_extension = 2006 [packed = true];
  int packed_extension_size() const;
  private:
  int _internal_packed_extension_size() const;
  public:
  void clear_packed_extension();
  private:
  int32_t _internal_packed_extension(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_packed_extension() const;
  void _internal_add_packed_extension(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_packed_extension();
  public:
  int32_t packed_extension(int index) const;
  void set_packed_extension(int index, int32_t value);
  void add_packed_extension(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      packed_extension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_packed_extension();

  // optional .protobuf_unittest.ForeignMessage message_extension = 2003;
  bool has_message_extension() const;
  private:
  bool _internal_has_message_extension() const;
  public:
  void clear_message_extension();
  const ::protobuf_unittest::ForeignMessage& message_extension() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::ForeignMessage* release_message_extension();
  ::protobuf_unittest::ForeignMessage* mutable_message_extension();
  void set_allocated_message_extension(::protobuf_unittest::ForeignMessage* message_extension);
  private:
  const ::protobuf_unittest::ForeignMessage& _internal_message_extension() const;
  ::protobuf_unittest::ForeignMessage* _internal_mutable_message_extension();
  public:
  void unsafe_arena_set_allocated_message_extension(
      ::protobuf_unittest::ForeignMessage* message_extension);
  ::protobuf_unittest::ForeignMessage* unsafe_arena_release_message_extension();

  // optional .protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
  bool has_dynamic_message_extension() const;
  private:
  bool _internal_has_dynamic_message_extension() const;
  public:
  void clear_dynamic_message_extension();
  const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType& dynamic_message_extension() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* release_dynamic_message_extension();
  ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* mutable_dynamic_message_extension();
  void set_allocated_dynamic_message_extension(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* dynamic_message_extension);
  private:
  const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType& _internal_dynamic_message_extension() const;
  ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* _internal_mutable_dynamic_message_extension();
  public:
  void unsafe_arena_set_allocated_dynamic_message_extension(
      ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* dynamic_message_extension);
  ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* unsafe_arena_release_dynamic_message_extension();

  // optional fixed32 scalar_extension = 2000;
  bool has_scalar_extension() const;
  private:
  bool _internal_has_scalar_extension() const;
  public:
  void clear_scalar_extension();
  uint32_t scalar_extension() const;
  void set_scalar_extension(uint32_t value);
  private:
  uint32_t _internal_scalar_extension() const;
  void _internal_set_scalar_extension(uint32_t value);
  public:

  // optional .protobuf_unittest.ForeignEnum enum_extension = 2001;
  bool has_enum_extension() const;
  private:
  bool _internal_has_enum_extension() const;
  public:
  void clear_enum_extension();
  ::protobuf_unittest::ForeignEnum enum_extension() const;
  void set_enum_extension(::protobuf_unittest::ForeignEnum value);
  private:
  ::protobuf_unittest::ForeignEnum _internal_enum_extension() const;
  void _internal_set_enum_extension(::protobuf_unittest::ForeignEnum value);
  public:

  // optional .protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
  bool has_dynamic_enum_extension() const;
  private:
  bool _internal_has_dynamic_enum_extension() const;
  public:
  void clear_dynamic_enum_extension();
  ::protobuf_unittest::TestDynamicExtensions_DynamicEnumType dynamic_enum_extension() const;
  void set_dynamic_enum_extension(::protobuf_unittest::TestDynamicExtensions_DynamicEnumType value);
  private:
  ::protobuf_unittest::TestDynamicExtensions_DynamicEnumType _internal_dynamic_enum_extension() const;
  void _internal_set_dynamic_enum_extension(::protobuf_unittest::TestDynamicExtensions_DynamicEnumType value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDynamicExtensions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_extension_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > packed_extension_;
  mutable std::atomic<int> _packed_extension_cached_byte_size_;
  ::protobuf_unittest::ForeignMessage* message_extension_;
  ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* dynamic_message_extension_;
  uint32_t scalar_extension_;
  int enum_extension_;
  int dynamic_enum_extension_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestRepeatedScalarDifferentTagSizes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestRepeatedScalarDifferentTagSizes) */ {
 public:
  inline TestRepeatedScalarDifferentTagSizes() : TestRepeatedScalarDifferentTagSizes(nullptr) {}
  ~TestRepeatedScalarDifferentTagSizes() override;
  explicit PROTOBUF_CONSTEXPR TestRepeatedScalarDifferentTagSizes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRepeatedScalarDifferentTagSizes(const TestRepeatedScalarDifferentTagSizes& from);
  TestRepeatedScalarDifferentTagSizes(TestRepeatedScalarDifferentTagSizes&& from) noexcept
    : TestRepeatedScalarDifferentTagSizes() {
    *this = ::std::move(from);
  }

  inline TestRepeatedScalarDifferentTagSizes& operator=(const TestRepeatedScalarDifferentTagSizes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRepeatedScalarDifferentTagSizes& operator=(TestRepeatedScalarDifferentTagSizes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRepeatedScalarDifferentTagSizes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRepeatedScalarDifferentTagSizes* internal_default_instance() {
    return reinterpret_cast<const TestRepeatedScalarDifferentTagSizes*>(
               &_TestRepeatedScalarDifferentTagSizes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(TestRepeatedScalarDifferentTagSizes& a, TestRepeatedScalarDifferentTagSizes& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRepeatedScalarDifferentTagSizes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRepeatedScalarDifferentTagSizes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRepeatedScalarDifferentTagSizes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRepeatedScalarDifferentTagSizes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRepeatedScalarDifferentTagSizes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestRepeatedScalarDifferentTagSizes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRepeatedScalarDifferentTagSizes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestRepeatedScalarDifferentTagSizes";
  }
  protected:
  explicit TestRepeatedScalarDifferentTagSizes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedFixed32FieldNumber = 12,
    kRepeatedInt32FieldNumber = 13,
    kRepeatedFixed64FieldNumber = 2046,
    kRepeatedInt64FieldNumber = 2047,
    kRepeatedFloatFieldNumber = 262142,
    kRepeatedUint64FieldNumber = 262143,
  };
  // repeated fixed32 repeated_fixed32 = 12;
  int repeated_fixed32_size() const;
  private:
  int _internal_repeated_fixed32_size() const;
  public:
  void clear_repeated_fixed32();
  private:
  uint32_t _internal_repeated_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_repeated_fixed32() const;
  void _internal_add_repeated_fixed32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_repeated_fixed32();
  public:
  uint32_t repeated_fixed32(int index) const;
  void set_repeated_fixed32(int index, uint32_t value);
  void add_repeated_fixed32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      repeated_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_repeated_fixed32();

  // repeated int32 repeated_int32 = 13;
  int repeated_int32_size() const;
  private:
  int _internal_repeated_int32_size() const;
  public:
  void clear_repeated_int32();
  private:
  int32_t _internal_repeated_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_int32() const;
  void _internal_add_repeated_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_int32();
  public:
  int32_t repeated_int32(int index) const;
  void set_repeated_int32(int index, int32_t value);
  void add_repeated_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_int32();

  // repeated fixed64 repeated_fixed64 = 2046;
  int repeated_fixed64_size() const;
  private:
  int _internal_repeated_fixed64_size() const;
  public:
  void clear_repeated_fixed64();
  private:
  uint64_t _internal_repeated_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_repeated_fixed64() const;
  void _internal_add_repeated_fixed64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_repeated_fixed64();
  public:
  uint64_t repeated_fixed64(int index) const;
  void set_repeated_fixed64(int index, uint64_t value);
  void add_repeated_fixed64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      repeated_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_repeated_fixed64();

  // repeated int64 repeated_int64 = 2047;
  int repeated_int64_size() const;
  private:
  int _internal_repeated_int64_size() const;
  public:
  void clear_repeated_int64();
  private:
  int64_t _internal_repeated_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_repeated_int64() const;
  void _internal_add_repeated_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_repeated_int64();
  public:
  int64_t repeated_int64(int index) const;
  void set_repeated_int64(int index, int64_t value);
  void add_repeated_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      repeated_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_repeated_int64();

  // repeated float repeated_float = 262142;
  int repeated_float_size() const;
  private:
  int _internal_repeated_float_size() const;
  public:
  void clear_repeated_float();
  private:
  float _internal_repeated_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_repeated_float() const;
  void _internal_add_repeated_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_repeated_float();
  public:
  float repeated_float(int index) const;
  void set_repeated_float(int index, float value);
  void add_repeated_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      repeated_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_repeated_float();

  // repeated uint64 repeated_uint64 = 262143;
  int repeated_uint64_size() const;
  private:
  int _internal_repeated_uint64_size() const;
  public:
  void clear_repeated_uint64();
  private:
  uint64_t _internal_repeated_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_repeated_uint64() const;
  void _internal_add_repeated_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_repeated_uint64();
  public:
  uint64_t repeated_uint64(int index) const;
  void set_repeated_uint64(int index, uint64_t value);
  void add_repeated_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      repeated_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_repeated_uint64();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestRepeatedScalarDifferentTagSizes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > repeated_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_int32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > repeated_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > repeated_int64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > repeated_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > repeated_uint64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMerge_RepeatedFieldsGenerator_Group1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1) */ {
 public:
  inline TestParsingMerge_RepeatedFieldsGenerator_Group1() : TestParsingMerge_RepeatedFieldsGenerator_Group1(nullptr) {}
  ~TestParsingMerge_RepeatedFieldsGenerator_Group1() override;
  explicit PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGenerator_Group1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestParsingMerge_RepeatedFieldsGenerator_Group1(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from);
  TestParsingMerge_RepeatedFieldsGenerator_Group1(TestParsingMerge_RepeatedFieldsGenerator_Group1&& from) noexcept
    : TestParsingMerge_RepeatedFieldsGenerator_Group1() {
    *this = ::std::move(from);
  }

  inline TestParsingMerge_RepeatedFieldsGenerator_Group1& operator=(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMerge_RepeatedFieldsGenerator_Group1& operator=(TestParsingMerge_RepeatedFieldsGenerator_Group1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestParsingMerge_RepeatedFieldsGenerator_Group1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestParsingMerge_RepeatedFieldsGenerator_Group1* internal_default_instance() {
    return reinterpret_cast<const TestParsingMerge_RepeatedFieldsGenerator_Group1*>(
               &_TestParsingMerge_RepeatedFieldsGenerator_Group1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(TestParsingMerge_RepeatedFieldsGenerator_Group1& a, TestParsingMerge_RepeatedFieldsGenerator_Group1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMerge_RepeatedFieldsGenerator_Group1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestParsingMerge_RepeatedFieldsGenerator_Group1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestParsingMerge_RepeatedFieldsGenerator_Group1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestParsingMerge_RepeatedFieldsGenerator_Group1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestParsingMerge_RepeatedFieldsGenerator_Group1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1";
  }
  protected:
  explicit TestParsingMerge_RepeatedFieldsGenerator_Group1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField1FieldNumber = 11,
  };
  // optional .protobuf_unittest.TestAllTypes field1 = 11;
  bool has_field1() const;
  private:
  bool _internal_has_field1() const;
  public:
  void clear_field1();
  const ::protobuf_unittest::TestAllTypes& field1() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_field1();
  ::protobuf_unittest::TestAllTypes* mutable_field1();
  void set_allocated_field1(::protobuf_unittest::TestAllTypes* field1);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_field1() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_field1();
  public:
  void unsafe_arena_set_allocated_field1(
      ::protobuf_unittest::TestAllTypes* field1);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_field1();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypes* field1_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMerge_RepeatedFieldsGenerator_Group2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2) */ {
 public:
  inline TestParsingMerge_RepeatedFieldsGenerator_Group2() : TestParsingMerge_RepeatedFieldsGenerator_Group2(nullptr) {}
  ~TestParsingMerge_RepeatedFieldsGenerator_Group2() override;
  explicit PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGenerator_Group2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestParsingMerge_RepeatedFieldsGenerator_Group2(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from);
  TestParsingMerge_RepeatedFieldsGenerator_Group2(TestParsingMerge_RepeatedFieldsGenerator_Group2&& from) noexcept
    : TestParsingMerge_RepeatedFieldsGenerator_Group2() {
    *this = ::std::move(from);
  }

  inline TestParsingMerge_RepeatedFieldsGenerator_Group2& operator=(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMerge_RepeatedFieldsGenerator_Group2& operator=(TestParsingMerge_RepeatedFieldsGenerator_Group2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestParsingMerge_RepeatedFieldsGenerator_Group2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestParsingMerge_RepeatedFieldsGenerator_Group2* internal_default_instance() {
    return reinterpret_cast<const TestParsingMerge_RepeatedFieldsGenerator_Group2*>(
               &_TestParsingMerge_RepeatedFieldsGenerator_Group2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(TestParsingMerge_RepeatedFieldsGenerator_Group2& a, TestParsingMerge_RepeatedFieldsGenerator_Group2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMerge_RepeatedFieldsGenerator_Group2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestParsingMerge_RepeatedFieldsGenerator_Group2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestParsingMerge_RepeatedFieldsGenerator_Group2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestParsingMerge_RepeatedFieldsGenerator_Group2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator_Group2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestParsingMerge_RepeatedFieldsGenerator_Group2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2";
  }
  protected:
  explicit TestParsingMerge_RepeatedFieldsGenerator_Group2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField1FieldNumber = 21,
  };
  // optional .protobuf_unittest.TestAllTypes field1 = 21;
  bool has_field1() const;
  private:
  bool _internal_has_field1() const;
  public:
  void clear_field1();
  const ::protobuf_unittest::TestAllTypes& field1() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_field1();
  ::protobuf_unittest::TestAllTypes* mutable_field1();
  void set_allocated_field1(::protobuf_unittest::TestAllTypes* field1);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_field1() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_field1();
  public:
  void unsafe_arena_set_allocated_field1(
      ::protobuf_unittest::TestAllTypes* field1);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_field1();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypes* field1_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMerge_RepeatedFieldsGenerator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator) */ {
 public:
  inline TestParsingMerge_RepeatedFieldsGenerator() : TestParsingMerge_RepeatedFieldsGenerator(nullptr) {}
  ~TestParsingMerge_RepeatedFieldsGenerator() override;
  explicit PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedFieldsGenerator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestParsingMerge_RepeatedFieldsGenerator(const TestParsingMerge_RepeatedFieldsGenerator& from);
  TestParsingMerge_RepeatedFieldsGenerator(TestParsingMerge_RepeatedFieldsGenerator&& from) noexcept
    : TestParsingMerge_RepeatedFieldsGenerator() {
    *this = ::std::move(from);
  }

  inline TestParsingMerge_RepeatedFieldsGenerator& operator=(const TestParsingMerge_RepeatedFieldsGenerator& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMerge_RepeatedFieldsGenerator& operator=(TestParsingMerge_RepeatedFieldsGenerator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestParsingMerge_RepeatedFieldsGenerator& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestParsingMerge_RepeatedFieldsGenerator* internal_default_instance() {
    return reinterpret_cast<const TestParsingMerge_RepeatedFieldsGenerator*>(
               &_TestParsingMerge_RepeatedFieldsGenerator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(TestParsingMerge_RepeatedFieldsGenerator& a, TestParsingMerge_RepeatedFieldsGenerator& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMerge_RepeatedFieldsGenerator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestParsingMerge_RepeatedFieldsGenerator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestParsingMerge_RepeatedFieldsGenerator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestParsingMerge_RepeatedFieldsGenerator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestParsingMerge_RepeatedFieldsGenerator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestParsingMerge_RepeatedFieldsGenerator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestParsingMerge_RepeatedFieldsGenerator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator";
  }
  protected:
  explicit TestParsingMerge_RepeatedFieldsGenerator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestParsingMerge_RepeatedFieldsGenerator_Group1 Group1;
  typedef TestParsingMerge_RepeatedFieldsGenerator_Group2 Group2;

  // accessors -------------------------------------------------------

  enum : int {
    kField1FieldNumber = 1,
    kField2FieldNumber = 2,
    kField3FieldNumber = 3,
    kGroup1FieldNumber = 10,
    kGroup2FieldNumber = 20,
    kExt1FieldNumber = 1000,
    kExt2FieldNumber = 1001,
  };
  // repeated .protobuf_unittest.TestAllTypes field1 = 1;
  int field1_size() const;
  private:
  int _internal_field1_size() const;
  public:
  void clear_field1();
  ::protobuf_unittest::TestAllTypes* mutable_field1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
      mutable_field1();
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_field1(int index) const;
  ::protobuf_unittest::TestAllTypes* _internal_add_field1();
  public:
  const ::protobuf_unittest::TestAllTypes& field1(int index) const;
  ::protobuf_unittest::TestAllTypes* add_field1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
      field1() const;

  // repeated .protobuf_unittest.TestAllTypes field2 = 2;
  int field2_size() const;
  private:
  int _internal_field2_size() const;
  public:
  void clear_field2();
  ::protobuf_unittest::TestAllTypes* mutable_field2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
      mutable_field2();
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_field2(int index) const;
  ::protobuf_unittest::TestAllTypes* _internal_add_field2();
  public:
  const ::protobuf_unittest::TestAllTypes& field2(int index) const;
  ::protobuf_unittest::TestAllTypes* add_field2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
      field2() const;

  // repeated .protobuf_unittest.TestAllTypes field3 = 3;
  int field3_size() const;
  private:
  int _internal_field3_size() const;
  public:
  void clear_field3();
  ::protobuf_unittest::TestAllTypes* mutable_field3(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
      mutable_field3();
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_field3(int index) const;
  ::protobuf_unittest::TestAllTypes* _internal_add_field3();
  public:
  const ::protobuf_unittest::TestAllTypes& field3(int index) const;
  ::protobuf_unittest::TestAllTypes* add_field3();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
      field3() const;

  // repeated group Group1 = 10 { ... };
  int group1_size() const;
  private:
  int _internal_group1_size() const;
  public:
  void clear_group1();
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* mutable_group1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 >*
      mutable_group1();
  private:
  const ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1& _internal_group1(int index) const;
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* _internal_add_group1();
  public:
  const ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1& group1(int index) const;
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* add_group1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 >&
      group1() const;

  // repeated group Group2 = 20 { ... };
  int group2_size() const;
  private:
  int _internal_group2_size() const;
  public:
  void clear_group2();
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* mutable_group2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 >*
      mutable_group2();
  private:
  const ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2& _internal_group2(int index) const;
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* _internal_add_group2();
  public:
  const ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2& group2(int index) const;
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* add_group2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 >&
      group2() const;

  // repeated .protobuf_unittest.TestAllTypes ext1 = 1000;
  int ext1_size() const;
  private:
  int _internal_ext1_size() const;
  public:
  void clear_ext1();
  ::protobuf_unittest::TestAllTypes* mutable_ext1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
      mutable_ext1();
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_ext1(int index) const;
  ::protobuf_unittest::TestAllTypes* _internal_add_ext1();
  public:
  const ::protobuf_unittest::TestAllTypes& ext1(int index) const;
  ::protobuf_unittest::TestAllTypes* add_ext1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
      ext1() const;

  // repeated .protobuf_unittest.TestAllTypes ext2 = 1001;
  int ext2_size() const;
  private:
  int _internal_ext2_size() const;
  public:
  void clear_ext2();
  ::protobuf_unittest::TestAllTypes* mutable_ext2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
      mutable_ext2();
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_ext2(int index) const;
  ::protobuf_unittest::TestAllTypes* _internal_add_ext2();
  public:
  const ::protobuf_unittest::TestAllTypes& ext2(int index) const;
  ::protobuf_unittest::TestAllTypes* add_ext2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
      ext2() const;

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes > field1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes > field2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes > field3_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 > group1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 > group2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes > ext1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes > ext2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMerge_OptionalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMerge.OptionalGroup) */ {
 public:
  inline TestParsingMerge_OptionalGroup() : TestParsingMerge_OptionalGroup(nullptr) {}
  ~TestParsingMerge_OptionalGroup() override;
  explicit PROTOBUF_CONSTEXPR TestParsingMerge_OptionalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestParsingMerge_OptionalGroup(const TestParsingMerge_OptionalGroup& from);
  TestParsingMerge_OptionalGroup(TestParsingMerge_OptionalGroup&& from) noexcept
    : TestParsingMerge_OptionalGroup() {
    *this = ::std::move(from);
  }

  inline TestParsingMerge_OptionalGroup& operator=(const TestParsingMerge_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMerge_OptionalGroup& operator=(TestParsingMerge_OptionalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestParsingMerge_OptionalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestParsingMerge_OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const TestParsingMerge_OptionalGroup*>(
               &_TestParsingMerge_OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(TestParsingMerge_OptionalGroup& a, TestParsingMerge_OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMerge_OptionalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestParsingMerge_OptionalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestParsingMerge_OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestParsingMerge_OptionalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestParsingMerge_OptionalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestParsingMerge_OptionalGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestParsingMerge_OptionalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMerge.OptionalGroup";
  }
  protected:
  explicit TestParsingMerge_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalGroupAllTypesFieldNumber = 11,
  };
  // optional .protobuf_unittest.TestAllTypes optional_group_all_types = 11;
  bool has_optional_group_all_types() const;
  private:
  bool _internal_has_optional_group_all_types() const;
  public:
  void clear_optional_group_all_types();
  const ::protobuf_unittest::TestAllTypes& optional_group_all_types() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_optional_group_all_types();
  ::protobuf_unittest::TestAllTypes* mutable_optional_group_all_types();
  void set_allocated_optional_group_all_types(::protobuf_unittest::TestAllTypes* optional_group_all_types);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_optional_group_all_types() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_optional_group_all_types();
  public:
  void unsafe_arena_set_allocated_optional_group_all_types(
      ::protobuf_unittest::TestAllTypes* optional_group_all_types);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_optional_group_all_types();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMerge.OptionalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypes* optional_group_all_types_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMerge_RepeatedGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMerge.RepeatedGroup) */ {
 public:
  inline TestParsingMerge_RepeatedGroup() : TestParsingMerge_RepeatedGroup(nullptr) {}
  ~TestParsingMerge_RepeatedGroup() override;
  explicit PROTOBUF_CONSTEXPR TestParsingMerge_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestParsingMerge_RepeatedGroup(const TestParsingMerge_RepeatedGroup& from);
  TestParsingMerge_RepeatedGroup(TestParsingMerge_RepeatedGroup&& from) noexcept
    : TestParsingMerge_RepeatedGroup() {
    *this = ::std::move(from);
  }

  inline TestParsingMerge_RepeatedGroup& operator=(const TestParsingMerge_RepeatedGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMerge_RepeatedGroup& operator=(TestParsingMerge_RepeatedGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestParsingMerge_RepeatedGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestParsingMerge_RepeatedGroup* internal_default_instance() {
    return reinterpret_cast<const TestParsingMerge_RepeatedGroup*>(
               &_TestParsingMerge_RepeatedGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(TestParsingMerge_RepeatedGroup& a, TestParsingMerge_RepeatedGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMerge_RepeatedGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestParsingMerge_RepeatedGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestParsingMerge_RepeatedGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestParsingMerge_RepeatedGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestParsingMerge_RepeatedGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestParsingMerge_RepeatedGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestParsingMerge_RepeatedGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMerge.RepeatedGroup";
  }
  protected:
  explicit TestParsingMerge_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedGroupAllTypesFieldNumber = 21,
  };
  // optional .protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
  bool has_repeated_group_all_types() const;
  private:
  bool _internal_has_repeated_group_all_types() const;
  public:
  void clear_repeated_group_all_types();
  const ::protobuf_unittest::TestAllTypes& repeated_group_all_types() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_repeated_group_all_types();
  ::protobuf_unittest::TestAllTypes* mutable_repeated_group_all_types();
  void set_allocated_repeated_group_all_types(::protobuf_unittest::TestAllTypes* repeated_group_all_types);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_repeated_group_all_types() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_repeated_group_all_types();
  public:
  void unsafe_arena_set_allocated_repeated_group_all_types(
      ::protobuf_unittest::TestAllTypes* repeated_group_all_types);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_repeated_group_all_types();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMerge.RepeatedGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypes* repeated_group_all_types_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMerge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMerge) */ {
 public:
  inline TestParsingMerge() : TestParsingMerge(nullptr) {}
  ~TestParsingMerge() override;
  explicit PROTOBUF_CONSTEXPR TestParsingMerge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestParsingMerge(const TestParsingMerge& from);
  TestParsingMerge(TestParsingMerge&& from) noexcept
    : TestParsingMerge() {
    *this = ::std::move(from);
  }

  inline TestParsingMerge& operator=(const TestParsingMerge& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMerge& operator=(TestParsingMerge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestParsingMerge& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestParsingMerge* internal_default_instance() {
    return reinterpret_cast<const TestParsingMerge*>(
               &_TestParsingMerge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(TestParsingMerge& a, TestParsingMerge& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMerge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestParsingMerge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestParsingMerge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestParsingMerge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestParsingMerge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestParsingMerge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestParsingMerge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMerge";
  }
  protected:
  explicit TestParsingMerge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestParsingMerge_RepeatedFieldsGenerator RepeatedFieldsGenerator;
  typedef TestParsingMerge_OptionalGroup OptionalGroup;
  typedef TestParsingMerge_RepeatedGroup RepeatedGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedAllTypesFieldNumber = 3,
    kRepeatedgroupFieldNumber = 20,
    kRequiredAllTypesFieldNumber = 1,
    kOptionalAllTypesFieldNumber = 2,
    kOptionalgroupFieldNumber = 10,
  };
  // repeated .protobuf_unittest.TestAllTypes repeated_all_types = 3;
  int repeated_all_types_size() const;
  private:
  int _internal_repeated_all_types_size() const;
  public:
  void clear_repeated_all_types();
  ::protobuf_unittest::TestAllTypes* mutable_repeated_all_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
      mutable_repeated_all_types();
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_repeated_all_types(int index) const;
  ::protobuf_unittest::TestAllTypes* _internal_add_repeated_all_types();
  public:
  const ::protobuf_unittest::TestAllTypes& repeated_all_types(int index) const;
  ::protobuf_unittest::TestAllTypes* add_repeated_all_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
      repeated_all_types() const;

  // repeated group RepeatedGroup = 20 { ... };
  int repeatedgroup_size() const;
  private:
  int _internal_repeatedgroup_size() const;
  public:
  void clear_repeatedgroup();
  ::protobuf_unittest::TestParsingMerge_RepeatedGroup* mutable_repeatedgroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedGroup >*
      mutable_repeatedgroup();
  private:
  const ::protobuf_unittest::TestParsingMerge_RepeatedGroup& _internal_repeatedgroup(int index) const;
  ::protobuf_unittest::TestParsingMerge_RepeatedGroup* _internal_add_repeatedgroup();
  public:
  const ::protobuf_unittest::TestParsingMerge_RepeatedGroup& repeatedgroup(int index) const;
  ::protobuf_unittest::TestParsingMerge_RepeatedGroup* add_repeatedgroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedGroup >&
      repeatedgroup() const;

  // required .protobuf_unittest.TestAllTypes required_all_types = 1;
  bool has_required_all_types() const;
  private:
  bool _internal_has_required_all_types() const;
  public:
  void clear_required_all_types();
  const ::protobuf_unittest::TestAllTypes& required_all_types() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_required_all_types();
  ::protobuf_unittest::TestAllTypes* mutable_required_all_types();
  void set_allocated_required_all_types(::protobuf_unittest::TestAllTypes* required_all_types);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_required_all_types() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_required_all_types();
  public:
  void unsafe_arena_set_allocated_required_all_types(
      ::protobuf_unittest::TestAllTypes* required_all_types);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_required_all_types();

  // optional .protobuf_unittest.TestAllTypes optional_all_types = 2;
  bool has_optional_all_types() const;
  private:
  bool _internal_has_optional_all_types() const;
  public:
  void clear_optional_all_types();
  const ::protobuf_unittest::TestAllTypes& optional_all_types() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_optional_all_types();
  ::protobuf_unittest::TestAllTypes* mutable_optional_all_types();
  void set_allocated_optional_all_types(::protobuf_unittest::TestAllTypes* optional_all_types);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_optional_all_types() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_optional_all_types();
  public:
  void unsafe_arena_set_allocated_optional_all_types(
      ::protobuf_unittest::TestAllTypes* optional_all_types);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_optional_all_types();

  // optional group OptionalGroup = 10 { ... };
  bool has_optionalgroup() const;
  private:
  bool _internal_has_optionalgroup() const;
  public:
  void clear_optionalgroup();
  const ::protobuf_unittest::TestParsingMerge_OptionalGroup& optionalgroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestParsingMerge_OptionalGroup* release_optionalgroup();
  ::protobuf_unittest::TestParsingMerge_OptionalGroup* mutable_optionalgroup();
  void set_allocated_optionalgroup(::protobuf_unittest::TestParsingMerge_OptionalGroup* optionalgroup);
  private:
  const ::protobuf_unittest::TestParsingMerge_OptionalGroup& _internal_optionalgroup() const;
  ::protobuf_unittest::TestParsingMerge_OptionalGroup* _internal_mutable_optionalgroup();
  public:
  void unsafe_arena_set_allocated_optionalgroup(
      ::protobuf_unittest::TestParsingMerge_OptionalGroup* optionalgroup);
  ::protobuf_unittest::TestParsingMerge_OptionalGroup* unsafe_arena_release_optionalgroup();


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestParsingMerge, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  static const int kOptionalExtFieldNumber = 1000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMerge,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false >
    optional_ext;
  static const int kRepeatedExtFieldNumber = 1001;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMerge,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false >
    repeated_ext;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMerge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes > repeated_all_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedGroup > repeatedgroup_;
  ::protobuf_unittest::TestAllTypes* required_all_types_;
  ::protobuf_unittest::TestAllTypes* optional_all_types_;
  ::protobuf_unittest::TestParsingMerge_OptionalGroup* optionalgroup_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestMergeException final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestMergeException) */ {
 public:
  inline TestMergeException() : TestMergeException(nullptr) {}
  ~TestMergeException() override;
  explicit PROTOBUF_CONSTEXPR TestMergeException(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMergeException(const TestMergeException& from);
  TestMergeException(TestMergeException&& from) noexcept
    : TestMergeException() {
    *this = ::std::move(from);
  }

  inline TestMergeException& operator=(const TestMergeException& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMergeException& operator=(TestMergeException&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMergeException& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMergeException* internal_default_instance() {
    return reinterpret_cast<const TestMergeException*>(
               &_TestMergeException_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(TestMergeException& a, TestMergeException& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMergeException* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMergeException* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMergeException* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMergeException>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMergeException& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestMergeException& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMergeException* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestMergeException";
  }
  protected:
  explicit TestMergeException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllExtensionsFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestAllExtensions all_extensions = 1;
  bool has_all_extensions() const;
  private:
  bool _internal_has_all_extensions() const;
  public:
  void clear_all_extensions();
  const ::protobuf_unittest::TestAllExtensions& all_extensions() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllExtensions* release_all_extensions();
  ::protobuf_unittest::TestAllExtensions* mutable_all_extensions();
  void set_allocated_all_extensions(::protobuf_unittest::TestAllExtensions* all_extensions);
  private:
  const ::protobuf_unittest::TestAllExtensions& _internal_all_extensions() const;
  ::protobuf_unittest::TestAllExtensions* _internal_mutable_all_extensions();
  public:
  void unsafe_arena_set_allocated_all_extensions(
      ::protobuf_unittest::TestAllExtensions* all_extensions);
  ::protobuf_unittest::TestAllExtensions* unsafe_arena_release_all_extensions();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestMergeException)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllExtensions* all_extensions_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestCommentInjectionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestCommentInjectionMessage) */ {
 public:
  inline TestCommentInjectionMessage() : TestCommentInjectionMessage(nullptr) {}
  ~TestCommentInjectionMessage() override;
  explicit PROTOBUF_CONSTEXPR TestCommentInjectionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestCommentInjectionMessage(const TestCommentInjectionMessage& from);
  TestCommentInjectionMessage(TestCommentInjectionMessage&& from) noexcept
    : TestCommentInjectionMessage() {
    *this = ::std::move(from);
  }

  inline TestCommentInjectionMessage& operator=(const TestCommentInjectionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCommentInjectionMessage& operator=(TestCommentInjectionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestCommentInjectionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestCommentInjectionMessage* internal_default_instance() {
    return reinterpret_cast<const TestCommentInjectionMessage*>(
               &_TestCommentInjectionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(TestCommentInjectionMessage& a, TestCommentInjectionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCommentInjectionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCommentInjectionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestCommentInjectionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestCommentInjectionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestCommentInjectionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestCommentInjectionMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCommentInjectionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestCommentInjectionMessage";
  }
  protected:
  explicit TestCommentInjectionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
  };
  // optional string a = 1 [default = "*/ <- Neither should this."];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestCommentInjectionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class FooRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.FooRequest) */ {
 public:
  inline FooRequest() : FooRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FooRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FooRequest(const FooRequest& from);
  FooRequest(FooRequest&& from) noexcept
    : FooRequest() {
    *this = ::std::move(from);
  }

  inline FooRequest& operator=(const FooRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FooRequest& operator=(FooRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FooRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FooRequest* internal_default_instance() {
    return reinterpret_cast<const FooRequest*>(
               &_FooRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(FooRequest& a, FooRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FooRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FooRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FooRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FooRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FooRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FooRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.FooRequest";
  }
  protected:
  explicit FooRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.FooRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class FooResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.FooResponse) */ {
 public:
  inline FooResponse() : FooResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FooResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FooResponse(const FooResponse& from);
  FooResponse(FooResponse&& from) noexcept
    : FooResponse() {
    *this = ::std::move(from);
  }

  inline FooResponse& operator=(const FooResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FooResponse& operator=(FooResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FooResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FooResponse* internal_default_instance() {
    return reinterpret_cast<const FooResponse*>(
               &_FooResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(FooResponse& a, FooResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FooResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FooResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FooResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FooResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FooResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FooResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.FooResponse";
  }
  protected:
  explicit FooResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.FooResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class FooClientMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.FooClientMessage) */ {
 public:
  inline FooClientMessage() : FooClientMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FooClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FooClientMessage(const FooClientMessage& from);
  FooClientMessage(FooClientMessage&& from) noexcept
    : FooClientMessage() {
    *this = ::std::move(from);
  }

  inline FooClientMessage& operator=(const FooClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FooClientMessage& operator=(FooClientMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FooClientMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FooClientMessage* internal_default_instance() {
    return reinterpret_cast<const FooClientMessage*>(
               &_FooClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(FooClientMessage& a, FooClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FooClientMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FooClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FooClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FooClientMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FooClientMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FooClientMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.FooClientMessage";
  }
  protected:
  explicit FooClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.FooClientMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class FooServerMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.FooServerMessage) */ {
 public:
  inline FooServerMessage() : FooServerMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FooServerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FooServerMessage(const FooServerMessage& from);
  FooServerMessage(FooServerMessage&& from) noexcept
    : FooServerMessage() {
    *this = ::std::move(from);
  }

  inline FooServerMessage& operator=(const FooServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FooServerMessage& operator=(FooServerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FooServerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FooServerMessage* internal_default_instance() {
    return reinterpret_cast<const FooServerMessage*>(
               &_FooServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(FooServerMessage& a, FooServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FooServerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FooServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FooServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FooServerMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FooServerMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FooServerMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.FooServerMessage";
  }
  protected:
  explicit FooServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.FooServerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class BarRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.BarRequest) */ {
 public:
  inline BarRequest() : BarRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BarRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BarRequest(const BarRequest& from);
  BarRequest(BarRequest&& from) noexcept
    : BarRequest() {
    *this = ::std::move(from);
  }

  inline BarRequest& operator=(const BarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarRequest& operator=(BarRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BarRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BarRequest* internal_default_instance() {
    return reinterpret_cast<const BarRequest*>(
               &_BarRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(BarRequest& a, BarRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BarRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BarRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BarRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BarRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BarRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BarRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.BarRequest";
  }
  protected:
  explicit BarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.BarRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class BarResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.BarResponse) */ {
 public:
  inline BarResponse() : BarResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BarResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BarResponse(const BarResponse& from);
  BarResponse(BarResponse&& from) noexcept
    : BarResponse() {
    *this = ::std::move(from);
  }

  inline BarResponse& operator=(const BarResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarResponse& operator=(BarResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BarResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BarResponse* internal_default_instance() {
    return reinterpret_cast<const BarResponse*>(
               &_BarResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(BarResponse& a, BarResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BarResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BarResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BarResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BarResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BarResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BarResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.BarResponse";
  }
  protected:
  explicit BarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.BarResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestJsonName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestJsonName) */ {
 public:
  inline TestJsonName() : TestJsonName(nullptr) {}
  ~TestJsonName() override;
  explicit PROTOBUF_CONSTEXPR TestJsonName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestJsonName(const TestJsonName& from);
  TestJsonName(TestJsonName&& from) noexcept
    : TestJsonName() {
    *this = ::std::move(from);
  }

  inline TestJsonName& operator=(const TestJsonName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestJsonName& operator=(TestJsonName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestJsonName& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestJsonName* internal_default_instance() {
    return reinterpret_cast<const TestJsonName*>(
               &_TestJsonName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(TestJsonName& a, TestJsonName& b) {
    a.Swap(&b);
  }
  inline void Swap(TestJsonName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestJsonName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestJsonName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestJsonName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestJsonName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestJsonName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestJsonName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestJsonName";
  }
  protected:
  explicit TestJsonName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldName1FieldNumber = 1,
    kFieldName2FieldNumber = 2,
    kFieldName3FieldNumber = 3,
    kFieldName4FieldNumber = 4,
    kFIELDNAME5FieldNumber = 5,
    kFieldName6FieldNumber = 6,
    kFieldname7FieldNumber = 7,
  };
  // optional int32 field_name1 = 1;
  bool has_field_name1() const;
  private:
  bool _internal_has_field_name1() const;
  public:
  void clear_field_name1();
  int32_t field_name1() const;
  void set_field_name1(int32_t value);
  private:
  int32_t _internal_field_name1() const;
  void _internal_set_field_name1(int32_t value);
  public:

  // optional int32 fieldName2 = 2;
  bool has_fieldname2() const;
  private:
  bool _internal_has_fieldname2() const;
  public:
  void clear_fieldname2();
  int32_t fieldname2() const;
  void set_fieldname2(int32_t value);
  private:
  int32_t _internal_fieldname2() const;
  void _internal_set_fieldname2(int32_t value);
  public:

  // optional int32 FieldName3 = 3;
  bool has_fieldname3() const;
  private:
  bool _internal_has_fieldname3() const;
  public:
  void clear_fieldname3();
  int32_t fieldname3() const;
  void set_fieldname3(int32_t value);
  private:
  int32_t _internal_fieldname3() const;
  void _internal_set_fieldname3(int32_t value);
  public:

  // optional int32 _field_name4 = 4;
  bool has__field_name4() const;
  private:
  bool _internal_has__field_name4() const;
  public:
  void clear__field_name4();
  int32_t _field_name4() const;
  void set__field_name4(int32_t value);
  private:
  int32_t _internal__field_name4() const;
  void _internal_set__field_name4(int32_t value);
  public:

  // optional int32 FIELD_NAME5 = 5;
  bool has_field_name5() const;
  private:
  bool _internal_has_field_name5() const;
  public:
  void clear_field_name5();
  int32_t field_name5() const;
  void set_field_name5(int32_t value);
  private:
  int32_t _internal_field_name5() const;
  void _internal_set_field_name5(int32_t value);
  public:

  // optional int32 field_name6 = 6 [json_name = "@type"];
  bool has_field_name6() const;
  private:
  bool _internal_has_field_name6() const;
  public:
  void clear_field_name6();
  int32_t field_name6() const;
  void set_field_name6(int32_t value);
  private:
  int32_t _internal_field_name6() const;
  void _internal_set_field_name6(int32_t value);
  public:

  // optional int32 fieldname7 = 7;
  bool has_fieldname7() const;
  private:
  bool _internal_has_fieldname7() const;
  public:
  void clear_fieldname7();
  int32_t fieldname7() const;
  void set_fieldname7(int32_t value);
  private:
  int32_t _internal_fieldname7() const;
  void _internal_set_fieldname7(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestJsonName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t field_name1_;
  int32_t fieldname2_;
  int32_t fieldname3_;
  int32_t _field_name4_;
  int32_t field_name5_;
  int32_t field_name6_;
  int32_t fieldname7_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestHugeFieldNumbers_OptionalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup) */ {
 public:
  inline TestHugeFieldNumbers_OptionalGroup() : TestHugeFieldNumbers_OptionalGroup(nullptr) {}
  ~TestHugeFieldNumbers_OptionalGroup() override;
  explicit PROTOBUF_CONSTEXPR TestHugeFieldNumbers_OptionalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestHugeFieldNumbers_OptionalGroup(const TestHugeFieldNumbers_OptionalGroup& from);
  TestHugeFieldNumbers_OptionalGroup(TestHugeFieldNumbers_OptionalGroup&& from) noexcept
    : TestHugeFieldNumbers_OptionalGroup() {
    *this = ::std::move(from);
  }

  inline TestHugeFieldNumbers_OptionalGroup& operator=(const TestHugeFieldNumbers_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestHugeFieldNumbers_OptionalGroup& operator=(TestHugeFieldNumbers_OptionalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestHugeFieldNumbers_OptionalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestHugeFieldNumbers_OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const TestHugeFieldNumbers_OptionalGroup*>(
               &_TestHugeFieldNumbers_OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(TestHugeFieldNumbers_OptionalGroup& a, TestHugeFieldNumbers_OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestHugeFieldNumbers_OptionalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestHugeFieldNumbers_OptionalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestHugeFieldNumbers_OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestHugeFieldNumbers_OptionalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestHugeFieldNumbers_OptionalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestHugeFieldNumbers_OptionalGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestHugeFieldNumbers_OptionalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestHugeFieldNumbers.OptionalGroup";
  }
  protected:
  explicit TestHugeFieldNumbers_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupAFieldNumber = 536870009,
  };
  // optional int32 group_a = 536870009;
  bool has_group_a() const;
  private:
  bool _internal_has_group_a() const;
  public:
  void clear_group_a();
  int32_t group_a() const;
  void set_group_a(int32_t value);
  private:
  int32_t _internal_group_a() const;
  void _internal_set_group_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t group_a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestHugeFieldNumbers_StringStringMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestHugeFieldNumbers_StringStringMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TestHugeFieldNumbers_StringStringMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestHugeFieldNumbers_StringStringMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestHugeFieldNumbers_StringStringMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestHugeFieldNumbers_StringStringMapEntry_DoNotUse& other);
  static const TestHugeFieldNumbers_StringStringMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestHugeFieldNumbers_StringStringMapEntry_DoNotUse*>(&_TestHugeFieldNumbers_StringStringMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_unittest.TestHugeFieldNumbers.StringStringMapEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_unittest.TestHugeFieldNumbers.StringStringMapEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};

// -------------------------------------------------------------------

class TestHugeFieldNumbers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestHugeFieldNumbers) */ {
 public:
  inline TestHugeFieldNumbers() : TestHugeFieldNumbers(nullptr) {}
  ~TestHugeFieldNumbers() override;
  explicit PROTOBUF_CONSTEXPR TestHugeFieldNumbers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestHugeFieldNumbers(const TestHugeFieldNumbers& from);
  TestHugeFieldNumbers(TestHugeFieldNumbers&& from) noexcept
    : TestHugeFieldNumbers() {
    *this = ::std::move(from);
  }

  inline TestHugeFieldNumbers& operator=(const TestHugeFieldNumbers& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestHugeFieldNumbers& operator=(TestHugeFieldNumbers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestHugeFieldNumbers& default_instance() {
    return *internal_default_instance();
  }
  enum OneofFieldCase {
    kOneofUint32 = 536870011,
    kOneofTestAllTypes = 536870012,
    kOneofString = 536870013,
    kOneofBytes = 536870014,
    ONEOF_FIELD_NOT_SET = 0,
  };

  static inline const TestHugeFieldNumbers* internal_default_instance() {
    return reinterpret_cast<const TestHugeFieldNumbers*>(
               &_TestHugeFieldNumbers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(TestHugeFieldNumbers& a, TestHugeFieldNumbers& b) {
    a.Swap(&b);
  }
  inline void Swap(TestHugeFieldNumbers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestHugeFieldNumbers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestHugeFieldNumbers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestHugeFieldNumbers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestHugeFieldNumbers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestHugeFieldNumbers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestHugeFieldNumbers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestHugeFieldNumbers";
  }
  protected:
  explicit TestHugeFieldNumbers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestHugeFieldNumbers_OptionalGroup OptionalGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 536870002,
    kPackedInt32FieldNumber = 536870003,
    kStringStringMapFieldNumber = 536870010,
    kOptionalStringFieldNumber = 536870005,
    kOptionalBytesFieldNumber = 536870006,
    kOptionalMessageFieldNumber = 536870007,
    kOptionalgroupFieldNumber = 536870008,
    kOptionalInt32FieldNumber = 536870000,
    kFixed32FieldNumber = 536870001,
    kOptionalEnumFieldNumber = 536870004,
    kOneofUint32FieldNumber = 536870011,
    kOneofTestAllTypesFieldNumber = 536870012,
    kOneofStringFieldNumber = 536870013,
    kOneofBytesFieldNumber = 536870014,
  };
  // repeated int32 repeated_int32 = 536870002 [packed = false];
  int repeated_int32_size() const;
  private:
  int _internal_repeated_int32_size() const;
  public:
  void clear_repeated_int32();
  private:
  int32_t _internal_repeated_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_int32() const;
  void _internal_add_repeated_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_int32();
  public:
  int32_t repeated_int32(int index) const;
  void set_repeated_int32(int index, int32_t value);
  void add_repeated_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_int32();

  // repeated int32 packed_int32 = 536870003 [packed = true];
  int packed_int32_size() const;
  private:
  int _internal_packed_int32_size() const;
  public:
  void clear_packed_int32();
  private:
  int32_t _internal_packed_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_packed_int32() const;
  void _internal_add_packed_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_packed_int32();
  public:
  int32_t packed_int32(int index) const;
  void set_packed_int32(int index, int32_t value);
  void add_packed_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      packed_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_packed_int32();

  // map<string, string> string_string_map = 536870010;
  int string_string_map_size() const;
  private:
  int _internal_string_string_map_size() const;
  public:
  void clear_string_string_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_string_string_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_string_string_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      string_string_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_string_string_map();

  // optional string optional_string = 536870005;
  bool has_optional_string() const;
  private:
  bool _internal_has_optional_string() const;
  public:
  void clear_optional_string();
  const std::string& optional_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_string();
  PROTOBUF_NODISCARD std::string* release_optional_string();
  void set_allocated_optional_string(std::string* optional_string);
  private:
  const std::string& _internal_optional_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_string(const std::string& value);
  std::string* _internal_mutable_optional_string();
  public:

  // optional bytes optional_bytes = 536870006;
  bool has_optional_bytes() const;
  private:
  bool _internal_has_optional_bytes() const;
  public:
  void clear_optional_bytes();
  const std::string& optional_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_bytes();
  PROTOBUF_NODISCARD std::string* release_optional_bytes();
  void set_allocated_optional_bytes(std::string* optional_bytes);
  private:
  const std::string& _internal_optional_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_bytes(const std::string& value);
  std::string* _internal_mutable_optional_bytes();
  public:

  // optional .protobuf_unittest.ForeignMessage optional_message = 536870007;
  bool has_optional_message() const;
  private:
  bool _internal_has_optional_message() const;
  public:
  void clear_optional_message();
  const ::protobuf_unittest::ForeignMessage& optional_message() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::ForeignMessage* release_optional_message();
  ::protobuf_unittest::ForeignMessage* mutable_optional_message();
  void set_allocated_optional_message(::protobuf_unittest::ForeignMessage* optional_message);
  private:
  const ::protobuf_unittest::ForeignMessage& _internal_optional_message() const;
  ::protobuf_unittest::ForeignMessage* _internal_mutable_optional_message();
  public:
  void unsafe_arena_set_allocated_optional_message(
      ::protobuf_unittest::ForeignMessage* optional_message);
  ::protobuf_unittest::ForeignMessage* unsafe_arena_release_optional_message();

  // optional group OptionalGroup = 536870008 { ... };
  bool has_optionalgroup() const;
  private:
  bool _internal_has_optionalgroup() const;
  public:
  void clear_optionalgroup();
  const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup& optionalgroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* release_optionalgroup();
  ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* mutable_optionalgroup();
  void set_allocated_optionalgroup(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* optionalgroup);
  private:
  const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup& _internal_optionalgroup() const;
  ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* _internal_mutable_optionalgroup();
  public:
  void unsafe_arena_set_allocated_optionalgroup(
      ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* optionalgroup);
  ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* unsafe_arena_release_optionalgroup();

  // optional int32 optional_int32 = 536870000;
  bool has_optional_int32() const;
  private:
  bool _internal_has_optional_int32() const;
  public:
  void clear_optional_int32();
  int32_t optional_int32() const;
  void set_optional_int32(int32_t value);
  private:
  int32_t _internal_optional_int32() const;
  void _internal_set_optional_int32(int32_t value);
  public:

  // optional int32 fixed_32 = 536870001;
  bool has_fixed_32() const;
  private:
  bool _internal_has_fixed_32() const;
  public:
  void clear_fixed_32();
  int32_t fixed_32() const;
  void set_fixed_32(int32_t value);
  private:
  int32_t _internal_fixed_32() const;
  void _internal_set_fixed_32(int32_t value);
  public:

  // optional .protobuf_unittest.ForeignEnum optional_enum = 536870004;
  bool has_optional_enum() const;
  private:
  bool _internal_has_optional_enum() const;
  public:
  void clear_optional_enum();
  ::protobuf_unittest::ForeignEnum optional_enum() const;
  void set_optional_enum(::protobuf_unittest::ForeignEnum value);
  private:
  ::protobuf_unittest::ForeignEnum _internal_optional_enum() const;
  void _internal_set_optional_enum(::protobuf_unittest::ForeignEnum value);
  public:

  // uint32 oneof_uint32 = 536870011;
  bool has_oneof_uint32() const;
  private:
  bool _internal_has_oneof_uint32() const;
  public:
  void clear_oneof_uint32();
  uint32_t oneof_uint32() const;
  void set_oneof_uint32(uint32_t value);
  private:
  uint32_t _internal_oneof_uint32() const;
  void _internal_set_oneof_uint32(uint32_t value);
  public:

  // .protobuf_unittest.TestAllTypes oneof_test_all_types = 536870012;
  bool has_oneof_test_all_types() const;
  private:
  bool _internal_has_oneof_test_all_types() const;
  public:
  void clear_oneof_test_all_types();
  const ::protobuf_unittest::TestAllTypes& oneof_test_all_types() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestAllTypes* release_oneof_test_all_types();
  ::protobuf_unittest::TestAllTypes* mutable_oneof_test_all_types();
  void set_allocated_oneof_test_all_types(::protobuf_unittest::TestAllTypes* oneof_test_all_types);
  private:
  const ::protobuf_unittest::TestAllTypes& _internal_oneof_test_all_types() const;
  ::protobuf_unittest::TestAllTypes* _internal_mutable_oneof_test_all_types();
  public:
  void unsafe_arena_set_allocated_oneof_test_all_types(
      ::protobuf_unittest::TestAllTypes* oneof_test_all_types);
  ::protobuf_unittest::TestAllTypes* unsafe_arena_release_oneof_test_all_types();

  // string oneof_string = 536870013;
  bool has_oneof_string() const;
  private:
  bool _internal_has_oneof_string() const;
  public:
  void clear_oneof_string();
  const std::string& oneof_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oneof_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oneof_string();
  PROTOBUF_NODISCARD std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* oneof_string);
  private:
  const std::string& _internal_oneof_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_string(const std::string& value);
  std::string* _internal_mutable_oneof_string();
  public:

  // bytes oneof_bytes = 536870014;
  bool has_oneof_bytes() const;
  private:
  bool _internal_has_oneof_bytes() const;
  public:
  void clear_oneof_bytes();
  const std::string& oneof_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oneof_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oneof_bytes();
  PROTOBUF_NODISCARD std::string* release_oneof_bytes();
  void set_allocated_oneof_bytes(std::string* oneof_bytes);
  private:
  const std::string& _internal_oneof_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_bytes(const std::string& value);
  std::string* _internal_mutable_oneof_bytes();
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestHugeFieldNumbers, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  void clear_oneof_field();
  OneofFieldCase oneof_field_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestHugeFieldNumbers)
 private:
  class _Internal;
  void set_has_oneof_uint32();
  void set_has_oneof_test_all_types();
  void set_has_oneof_string();
  void set_has_oneof_bytes();

  inline bool has_oneof_field() const;
  inline void clear_has_oneof_field();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_int32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > packed_int32_;
  mutable std::atomic<int> _packed_int32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TestHugeFieldNumbers_StringStringMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> string_string_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_bytes_;
  ::protobuf_unittest::ForeignMessage* optional_message_;
  ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* optionalgroup_;
  int32_t optional_int32_;
  int32_t fixed_32_;
  int optional_enum_;
  union OneofFieldUnion {
    constexpr OneofFieldUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t oneof_uint32_;
    ::protobuf_unittest::TestAllTypes* oneof_test_all_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
  } oneof_field_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestExtensionInsideTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestExtensionInsideTable) */ {
 public:
  inline TestExtensionInsideTable() : TestExtensionInsideTable(nullptr) {}
  ~TestExtensionInsideTable() override;
  explicit PROTOBUF_CONSTEXPR TestExtensionInsideTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestExtensionInsideTable(const TestExtensionInsideTable& from);
  TestExtensionInsideTable(TestExtensionInsideTable&& from) noexcept
    : TestExtensionInsideTable() {
    *this = ::std::move(from);
  }

  inline TestExtensionInsideTable& operator=(const TestExtensionInsideTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestExtensionInsideTable& operator=(TestExtensionInsideTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestExtensionInsideTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestExtensionInsideTable* internal_default_instance() {
    return reinterpret_cast<const TestExtensionInsideTable*>(
               &_TestExtensionInsideTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(TestExtensionInsideTable& a, TestExtensionInsideTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TestExtensionInsideTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestExtensionInsideTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestExtensionInsideTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestExtensionInsideTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestExtensionInsideTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestExtensionInsideTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestExtensionInsideTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestExtensionInsideTable";
  }
  protected:
  explicit TestExtensionInsideTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField1FieldNumber = 1,
    kField2FieldNumber = 2,
    kField3FieldNumber = 3,
    kField4FieldNumber = 4,
    kField6FieldNumber = 6,
    kField7FieldNumber = 7,
    kField8FieldNumber = 8,
    kField9FieldNumber = 9,
    kField10FieldNumber = 10,
  };
  // optional int32 field1 = 1;
  bool has_field1() const;
  private:
  bool _internal_has_field1() const;
  public:
  void clear_field1();
  int32_t field1() const;
  void set_field1(int32_t value);
  private:
  int32_t _internal_field1() const;
  void _internal_set_field1(int32_t value);
  public:

  // optional int32 field2 = 2;
  bool has_field2() const;
  private:
  bool _internal_has_field2() const;
  public:
  void clear_field2();
  int32_t field2() const;
  void set_field2(int32_t value);
  private:
  int32_t _internal_field2() const;
  void _internal_set_field2(int32_t value);
  public:

  // optional int32 field3 = 3;
  bool has_field3() const;
  private:
  bool _internal_has_field3() const;
  public:
  void clear_field3();
  int32_t field3() const;
  void set_field3(int32_t value);
  private:
  int32_t _internal_field3() const;
  void _internal_set_field3(int32_t value);
  public:

  // optional int32 field4 = 4;
  bool has_field4() const;
  private:
  bool _internal_has_field4() const;
  public:
  void clear_field4();
  int32_t field4() const;
  void set_field4(int32_t value);
  private:
  int32_t _internal_field4() const;
  void _internal_set_field4(int32_t value);
  public:

  // optional int32 field6 = 6;
  bool has_field6() const;
  private:
  bool _internal_has_field6() const;
  public:
  void clear_field6();
  int32_t field6() const;
  void set_field6(int32_t value);
  private:
  int32_t _internal_field6() const;
  void _internal_set_field6(int32_t value);
  public:

  // optional int32 field7 = 7;
  bool has_field7() const;
  private:
  bool _internal_has_field7() const;
  public:
  void clear_field7();
  int32_t field7() const;
  void set_field7(int32_t value);
  private:
  int32_t _internal_field7() const;
  void _internal_set_field7(int32_t value);
  public:

  // optional int32 field8 = 8;
  bool has_field8() const;
  private:
  bool _internal_has_field8() const;
  public:
  void clear_field8();
  int32_t field8() const;
  void set_field8(int32_t value);
  private:
  int32_t _internal_field8() const;
  void _internal_set_field8(int32_t value);
  public:

  // optional int32 field9 = 9;
  bool has_field9() const;
  private:
  bool _internal_has_field9() const;
  public:
  void clear_field9();
  int32_t field9() const;
  void set_field9(int32_t value);
  private:
  int32_t _internal_field9() const;
  void _internal_set_field9(int32_t value);
  public:

  // optional int32 field10 = 10;
  bool has_field10() const;
  private:
  bool _internal_has_field10() const;
  public:
  void clear_field10();
  int32_t field10() const;
  void set_field10(int32_t value);
  private:
  int32_t _internal_field10() const;
  void _internal_set_field10(int32_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionInsideTable, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestExtensionInsideTable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t field1_;
  int32_t field2_;
  int32_t field3_;
  int32_t field4_;
  int32_t field6_;
  int32_t field7_;
  int32_t field8_;
  int32_t field9_;
  int32_t field10_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup) */ {
 public:
  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup() : TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup(nullptr) {}
  ~TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup() override;
  explicit PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& from);
  TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup&& from) noexcept
    : TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup() {
    *this = ::std::move(from);
  }

  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& operator=(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& operator=(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* internal_default_instance() {
    return reinterpret_cast<const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup*>(
               &_TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& a, TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup";
  }
  protected:
  explicit TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnotherFieldFieldNumber = 6,
  };
  // optional string another_field = 6;
  bool has_another_field() const;
  private:
  bool _internal_has_another_field() const;
  public:
  void clear_another_field();
  const std::string& another_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_another_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_another_field();
  PROTOBUF_NODISCARD std::string* release_another_field();
  void set_allocated_another_field(std::string* another_field);
  private:
  const std::string& _internal_another_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_another_field(const std::string& value);
  std::string* _internal_mutable_another_field();
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr another_field_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup) */ {
 public:
  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup() : TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup(nullptr) {}
  ~TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup() override;
  explicit PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& from);
  TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup&& from) noexcept
    : TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup() {
    *this = ::std::move(from);
  }

  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& operator=(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& operator=(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* internal_default_instance() {
    return reinterpret_cast<const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup*>(
               &_TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& a, TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup";
  }
  protected:
  explicit TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButWhyThoFieldNumber = 5,
  };
  // optional string but_why_tho = 5;
  bool has_but_why_tho() const;
  private:
  bool _internal_has_but_why_tho() const;
  public:
  void clear_but_why_tho();
  const std::string& but_why_tho() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_but_why_tho(ArgT0&& arg0, ArgT... args);
  std::string* mutable_but_why_tho();
  PROTOBUF_NODISCARD std::string* release_but_why_tho();
  void set_allocated_but_why_tho(std::string* but_why_tho);
  private:
  const std::string& _internal_but_why_tho() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_but_why_tho(const std::string& value);
  std::string* _internal_mutable_but_why_tho();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr but_why_tho_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedGroupExtensionOuter_Layer1OptionalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup) */ {
 public:
  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup() : TestNestedGroupExtensionOuter_Layer1OptionalGroup(nullptr) {}
  ~TestNestedGroupExtensionOuter_Layer1OptionalGroup() override;
  explicit PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter_Layer1OptionalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedGroupExtensionOuter_Layer1OptionalGroup(const TestNestedGroupExtensionOuter_Layer1OptionalGroup& from);
  TestNestedGroupExtensionOuter_Layer1OptionalGroup(TestNestedGroupExtensionOuter_Layer1OptionalGroup&& from) noexcept
    : TestNestedGroupExtensionOuter_Layer1OptionalGroup() {
    *this = ::std::move(from);
  }

  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup& operator=(const TestNestedGroupExtensionOuter_Layer1OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedGroupExtensionOuter_Layer1OptionalGroup& operator=(TestNestedGroupExtensionOuter_Layer1OptionalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedGroupExtensionOuter_Layer1OptionalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedGroupExtensionOuter_Layer1OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const TestNestedGroupExtensionOuter_Layer1OptionalGroup*>(
               &_TestNestedGroupExtensionOuter_Layer1OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(TestNestedGroupExtensionOuter_Layer1OptionalGroup& a, TestNestedGroupExtensionOuter_Layer1OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedGroupExtensionOuter_Layer1OptionalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedGroupExtensionOuter_Layer1OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedGroupExtensionOuter_Layer1OptionalGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedGroupExtensionOuter_Layer1OptionalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup";
  }
  protected:
  explicit TestNestedGroupExtensionOuter_Layer1OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup Layer2RepeatedGroup;
  typedef TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup Layer2AnotherOptionalRepeatedGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kLayer2RepeatedgroupFieldNumber = 2,
    kLayer2AnotheroptionalrepeatedgroupFieldNumber = 4,
  };
  // repeated group Layer2RepeatedGroup = 2 { ... };
  int layer2repeatedgroup_size() const;
  private:
  int _internal_layer2repeatedgroup_size() const;
  public:
  void clear_layer2repeatedgroup();
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* mutable_layer2repeatedgroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup >*
      mutable_layer2repeatedgroup();
  private:
  const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& _internal_layer2repeatedgroup(int index) const;
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* _internal_add_layer2repeatedgroup();
  public:
  const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& layer2repeatedgroup(int index) const;
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* add_layer2repeatedgroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup >&
      layer2repeatedgroup() const;

  // repeated group Layer2AnotherOptionalRepeatedGroup = 4 { ... };
  int layer2anotheroptionalrepeatedgroup_size() const;
  private:
  int _internal_layer2anotheroptionalrepeatedgroup_size() const;
  public:
  void clear_layer2anotheroptionalrepeatedgroup();
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* mutable_layer2anotheroptionalrepeatedgroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup >*
      mutable_layer2anotheroptionalrepeatedgroup();
  private:
  const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& _internal_layer2anotheroptionalrepeatedgroup(int index) const;
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* _internal_add_layer2anotheroptionalrepeatedgroup();
  public:
  const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& layer2anotheroptionalrepeatedgroup(int index) const;
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* add_layer2anotheroptionalrepeatedgroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup >&
      layer2anotheroptionalrepeatedgroup() const;

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup > layer2repeatedgroup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup > layer2anotheroptionalrepeatedgroup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedGroupExtensionOuter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedGroupExtensionOuter) */ {
 public:
  inline TestNestedGroupExtensionOuter() : TestNestedGroupExtensionOuter(nullptr) {}
  ~TestNestedGroupExtensionOuter() override;
  explicit PROTOBUF_CONSTEXPR TestNestedGroupExtensionOuter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedGroupExtensionOuter(const TestNestedGroupExtensionOuter& from);
  TestNestedGroupExtensionOuter(TestNestedGroupExtensionOuter&& from) noexcept
    : TestNestedGroupExtensionOuter() {
    *this = ::std::move(from);
  }

  inline TestNestedGroupExtensionOuter& operator=(const TestNestedGroupExtensionOuter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedGroupExtensionOuter& operator=(TestNestedGroupExtensionOuter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedGroupExtensionOuter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedGroupExtensionOuter* internal_default_instance() {
    return reinterpret_cast<const TestNestedGroupExtensionOuter*>(
               &_TestNestedGroupExtensionOuter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(TestNestedGroupExtensionOuter& a, TestNestedGroupExtensionOuter& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedGroupExtensionOuter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedGroupExtensionOuter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedGroupExtensionOuter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedGroupExtensionOuter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedGroupExtensionOuter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedGroupExtensionOuter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedGroupExtensionOuter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedGroupExtensionOuter";
  }
  protected:
  explicit TestNestedGroupExtensionOuter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestNestedGroupExtensionOuter_Layer1OptionalGroup Layer1OptionalGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kLayer1OptionalgroupFieldNumber = 1,
  };
  // optional group Layer1OptionalGroup = 1 { ... };
  bool has_layer1optionalgroup() const;
  private:
  bool _internal_has_layer1optionalgroup() const;
  public:
  void clear_layer1optionalgroup();
  const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup& layer1optionalgroup() const;
  PROTOBUF_NODISCARD ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* release_layer1optionalgroup();
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* mutable_layer1optionalgroup();
  void set_allocated_layer1optionalgroup(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* layer1optionalgroup);
  private:
  const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup& _internal_layer1optionalgroup() const;
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* _internal_mutable_layer1optionalgroup();
  public:
  void unsafe_arena_set_allocated_layer1optionalgroup(
      ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* layer1optionalgroup);
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* unsafe_arena_release_layer1optionalgroup();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedGroupExtensionOuter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* layer1optionalgroup_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestNestedGroupExtensionInnerExtension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedGroupExtensionInnerExtension) */ {
 public:
  inline TestNestedGroupExtensionInnerExtension() : TestNestedGroupExtensionInnerExtension(nullptr) {}
  ~TestNestedGroupExtensionInnerExtension() override;
  explicit PROTOBUF_CONSTEXPR TestNestedGroupExtensionInnerExtension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestNestedGroupExtensionInnerExtension(const TestNestedGroupExtensionInnerExtension& from);
  TestNestedGroupExtensionInnerExtension(TestNestedGroupExtensionInnerExtension&& from) noexcept
    : TestNestedGroupExtensionInnerExtension() {
    *this = ::std::move(from);
  }

  inline TestNestedGroupExtensionInnerExtension& operator=(const TestNestedGroupExtensionInnerExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedGroupExtensionInnerExtension& operator=(TestNestedGroupExtensionInnerExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestNestedGroupExtensionInnerExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestNestedGroupExtensionInnerExtension* internal_default_instance() {
    return reinterpret_cast<const TestNestedGroupExtensionInnerExtension*>(
               &_TestNestedGroupExtensionInnerExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(TestNestedGroupExtensionInnerExtension& a, TestNestedGroupExtensionInnerExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedGroupExtensionInnerExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestNestedGroupExtensionInnerExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestNestedGroupExtensionInnerExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestNestedGroupExtensionInnerExtension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestNestedGroupExtensionInnerExtension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestNestedGroupExtensionInnerExtension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestNestedGroupExtensionInnerExtension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedGroupExtensionInnerExtension";
  }
  protected:
  explicit TestNestedGroupExtensionInnerExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerNameFieldNumber = 1,
  };
  // optional string inner_name = 1;
  bool has_inner_name() const;
  private:
  bool _internal_has_inner_name() const;
  public:
  void clear_inner_name();
  const std::string& inner_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inner_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inner_name();
  PROTOBUF_NODISCARD std::string* release_inner_name();
  void set_allocated_inner_name(std::string* inner_name);
  private:
  const std::string& _internal_inner_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inner_name(const std::string& value);
  std::string* _internal_mutable_inner_name();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedGroupExtensionInnerExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_name_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// -------------------------------------------------------------------

class TestExtensionRangeSerialize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestExtensionRangeSerialize) */ {
 public:
  inline TestExtensionRangeSerialize() : TestExtensionRangeSerialize(nullptr) {}
  ~TestExtensionRangeSerialize() override;
  explicit PROTOBUF_CONSTEXPR TestExtensionRangeSerialize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestExtensionRangeSerialize(const TestExtensionRangeSerialize& from);
  TestExtensionRangeSerialize(TestExtensionRangeSerialize&& from) noexcept
    : TestExtensionRangeSerialize() {
    *this = ::std::move(from);
  }

  inline TestExtensionRangeSerialize& operator=(const TestExtensionRangeSerialize& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestExtensionRangeSerialize& operator=(TestExtensionRangeSerialize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestExtensionRangeSerialize& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestExtensionRangeSerialize* internal_default_instance() {
    return reinterpret_cast<const TestExtensionRangeSerialize*>(
               &_TestExtensionRangeSerialize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(TestExtensionRangeSerialize& a, TestExtensionRangeSerialize& b) {
    a.Swap(&b);
  }
  inline void Swap(TestExtensionRangeSerialize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestExtensionRangeSerialize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestExtensionRangeSerialize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestExtensionRangeSerialize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestExtensionRangeSerialize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TestExtensionRangeSerialize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestExtensionRangeSerialize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestExtensionRangeSerialize";
  }
  protected:
  explicit TestExtensionRangeSerialize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFooOneFieldNumber = 1,
    kFooTwoFieldNumber = 6,
    kFooThreeFieldNumber = 7,
    kFooFourFieldNumber = 13,
  };
  // optional int32 foo_one = 1;
  bool has_foo_one() const;
  private:
  bool _internal_has_foo_one() const;
  public:
  void clear_foo_one();
  int32_t foo_one() const;
  void set_foo_one(int32_t value);
  private:
  int32_t _internal_foo_one() const;
  void _internal_set_foo_one(int32_t value);
  public:

  // optional int32 foo_two = 6;
  bool has_foo_two() const;
  private:
  bool _internal_has_foo_two() const;
  public:
  void clear_foo_two();
  int32_t foo_two() const;
  void set_foo_two(int32_t value);
  private:
  int32_t _internal_foo_two() const;
  void _internal_set_foo_two(int32_t value);
  public:

  // optional int32 foo_three = 7;
  bool has_foo_three() const;
  private:
  bool _internal_has_foo_three() const;
  public:
  void clear_foo_three();
  int32_t foo_three() const;
  void set_foo_three(int32_t value);
  private:
  int32_t _internal_foo_three() const;
  void _internal_set_foo_three(int32_t value);
  public:

  // optional int32 foo_four = 13;
  bool has_foo_four() const;
  private:
  bool _internal_has_foo_four() const;
  public:
  void clear_foo_four();
  int32_t foo_four() const;
  void set_foo_four(int32_t value);
  private:
  int32_t _internal_foo_four() const;
  void _internal_set_foo_four(int32_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestExtensionRangeSerialize, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  static const int kBarOneFieldNumber = 2;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
    bar_one;
  static const int kBarTwoFieldNumber = 4;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
    bar_two;
  static const int kBarThreeFieldNumber = 10;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
    bar_three;
  static const int kBarFourFieldNumber = 15;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
    bar_four;
  static const int kBarFiveFieldNumber = 19;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionRangeSerialize,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
    bar_five;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestExtensionRangeSerialize)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t foo_one_;
  int32_t foo_two_;
  int32_t foo_three_;
  int32_t foo_four_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_2eproto;
};
// ===================================================================

class TestService_Stub;

class TestService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TestService() {};
 public:
  virtual ~TestService();

  typedef TestService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Foo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::protobuf_unittest::FooRequest* request,
                       ::protobuf_unittest::FooResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Bar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::protobuf_unittest::BarRequest* request,
                       ::protobuf_unittest::BarResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestService);
};

class TestService_Stub : public TestService {
 public:
  TestService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TestService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TestService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TestService ------------------------------------------

  void Foo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::protobuf_unittest::FooRequest* request,
                       ::protobuf_unittest::FooResponse* response,
                       ::google::protobuf::Closure* done);
  void Bar(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::protobuf_unittest::BarRequest* request,
                       ::protobuf_unittest::BarResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestService_Stub);
};


// ===================================================================

static const int kOptionalInt32ExtensionFieldNumber = 1;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  optional_int32_extension;
static const int kOptionalInt64ExtensionFieldNumber = 2;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 3, false >
  optional_int64_extension;
static const int kOptionalUint32ExtensionFieldNumber = 3;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  optional_uint32_extension;
static const int kOptionalUint64ExtensionFieldNumber = 4;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 4, false >
  optional_uint64_extension;
static const int kOptionalSint32ExtensionFieldNumber = 5;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 17, false >
  optional_sint32_extension;
static const int kOptionalSint64ExtensionFieldNumber = 6;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 18, false >
  optional_sint64_extension;
static const int kOptionalFixed32ExtensionFieldNumber = 7;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 7, false >
  optional_fixed32_extension;
static const int kOptionalFixed64ExtensionFieldNumber = 8;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 6, false >
  optional_fixed64_extension;
static const int kOptionalSfixed32ExtensionFieldNumber = 9;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 15, false >
  optional_sfixed32_extension;
static const int kOptionalSfixed64ExtensionFieldNumber = 10;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 16, false >
  optional_sfixed64_extension;
static const int kOptionalFloatExtensionFieldNumber = 11;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  optional_float_extension;
static const int kOptionalDoubleExtensionFieldNumber = 12;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false >
  optional_double_extension;
static const int kOptionalBoolExtensionFieldNumber = 13;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  optional_bool_extension;
static const int kOptionalStringExtensionFieldNumber = 14;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_string_extension;
static const int kOptionalBytesExtensionFieldNumber = 15;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  optional_bytes_extension;
static const int kOptionalgroupExtensionFieldNumber = 16;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionalGroup_extension >, 10, false >
  optionalgroup_extension;
static const int kOptionalNestedMessageExtensionFieldNumber = 18;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  optional_nested_message_extension;
static const int kOptionalForeignMessageExtensionFieldNumber = 19;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::ForeignMessage >, 11, false >
  optional_foreign_message_extension;
static const int kOptionalImportMessageExtensionFieldNumber = 20;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::ImportMessage >, 11, false >
  optional_import_message_extension;
static const int kOptionalNestedEnumExtensionFieldNumber = 21;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false >
  optional_nested_enum_extension;
static const int kOptionalForeignEnumExtensionFieldNumber = 22;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  optional_foreign_enum_extension;
static const int kOptionalImportEnumExtensionFieldNumber = 23;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false >
  optional_import_enum_extension;
static const int kOptionalStringPieceExtensionFieldNumber = 24;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_string_piece_extension;
static const int kOptionalCordExtensionFieldNumber = 25;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_cord_extension;
static const int kOptionalPublicImportMessageExtensionFieldNumber = 26;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::PublicImportMessage >, 11, false >
  optional_public_import_message_extension;
static const int kOptionalLazyMessageExtensionFieldNumber = 27;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  optional_lazy_message_extension;
static const int kRepeatedInt32ExtensionFieldNumber = 31;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, false >
  repeated_int32_extension;
static const int kRepeatedInt64ExtensionFieldNumber = 32;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 3, false >
  repeated_int64_extension;
static const int kRepeatedUint32ExtensionFieldNumber = 33;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 13, false >
  repeated_uint32_extension;
static const int kRepeatedUint64ExtensionFieldNumber = 34;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 4, false >
  repeated_uint64_extension;
static const int kRepeatedSint32ExtensionFieldNumber = 35;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 17, false >
  repeated_sint32_extension;
static const int kRepeatedSint64ExtensionFieldNumber = 36;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 18, false >
  repeated_sint64_extension;
static const int kRepeatedFixed32ExtensionFieldNumber = 37;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 7, false >
  repeated_fixed32_extension;
static const int kRepeatedFixed64ExtensionFieldNumber = 38;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 6, false >
  repeated_fixed64_extension;
static const int kRepeatedSfixed32ExtensionFieldNumber = 39;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 15, false >
  repeated_sfixed32_extension;
static const int kRepeatedSfixed64ExtensionFieldNumber = 40;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 16, false >
  repeated_sfixed64_extension;
static const int kRepeatedFloatExtensionFieldNumber = 41;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, false >
  repeated_float_extension;
static const int kRepeatedDoubleExtensionFieldNumber = 42;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false >
  repeated_double_extension;
static const int kRepeatedBoolExtensionFieldNumber = 43;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false >
  repeated_bool_extension;
static const int kRepeatedStringExtensionFieldNumber = 44;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_string_extension;
static const int kRepeatedBytesExtensionFieldNumber = 45;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 12, false >
  repeated_bytes_extension;
static const int kRepeatedgroupExtensionFieldNumber = 46;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::RepeatedGroup_extension >, 10, false >
  repeatedgroup_extension;
static const int kRepeatedNestedMessageExtensionFieldNumber = 48;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  repeated_nested_message_extension;
static const int kRepeatedForeignMessageExtensionFieldNumber = 49;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::ForeignMessage >, 11, false >
  repeated_foreign_message_extension;
static const int kRepeatedImportMessageExtensionFieldNumber = 50;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest_import::ImportMessage >, 11, false >
  repeated_import_message_extension;
static const int kRepeatedNestedEnumExtensionFieldNumber = 51;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false >
  repeated_nested_enum_extension;
static const int kRepeatedForeignEnumExtensionFieldNumber = 52;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  repeated_foreign_enum_extension;
static const int kRepeatedImportEnumExtensionFieldNumber = 53;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false >
  repeated_import_enum_extension;
static const int kRepeatedStringPieceExtensionFieldNumber = 54;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_string_piece_extension;
static const int kRepeatedCordExtensionFieldNumber = 55;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_cord_extension;
static const int kRepeatedLazyMessageExtensionFieldNumber = 57;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  repeated_lazy_message_extension;
static const int kDefaultInt32ExtensionFieldNumber = 61;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  default_int32_extension;
static const int kDefaultInt64ExtensionFieldNumber = 62;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 3, false >
  default_int64_extension;
static const int kDefaultUint32ExtensionFieldNumber = 63;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  default_uint32_extension;
static const int kDefaultUint64ExtensionFieldNumber = 64;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 4, false >
  default_uint64_extension;
static const int kDefaultSint32ExtensionFieldNumber = 65;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 17, false >
  default_sint32_extension;
static const int kDefaultSint64ExtensionFieldNumber = 66;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 18, false >
  default_sint64_extension;
static const int kDefaultFixed32ExtensionFieldNumber = 67;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 7, false >
  default_fixed32_extension;
static const int kDefaultFixed64ExtensionFieldNumber = 68;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 6, false >
  default_fixed64_extension;
static const int kDefaultSfixed32ExtensionFieldNumber = 69;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 15, false >
  default_sfixed32_extension;
static const int kDefaultSfixed64ExtensionFieldNumber = 70;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 16, false >
  default_sfixed64_extension;
static const int kDefaultFloatExtensionFieldNumber = 71;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  default_float_extension;
static const int kDefaultDoubleExtensionFieldNumber = 72;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false >
  default_double_extension;
static const int kDefaultBoolExtensionFieldNumber = 73;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  default_bool_extension;
static const int kDefaultStringExtensionFieldNumber = 74;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_string_extension;
static const int kDefaultBytesExtensionFieldNumber = 75;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  default_bytes_extension;
static const int kDefaultNestedEnumExtensionFieldNumber = 81;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypes_NestedEnum, ::protobuf_unittest::TestAllTypes_NestedEnum_IsValid>, 14, false >
  default_nested_enum_extension;
static const int kDefaultForeignEnumExtensionFieldNumber = 82;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  default_foreign_enum_extension;
static const int kDefaultImportEnumExtensionFieldNumber = 83;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnum, ::protobuf_unittest_import::ImportEnum_IsValid>, 14, false >
  default_import_enum_extension;
static const int kDefaultStringPieceExtensionFieldNumber = 84;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_string_piece_extension;
static const int kDefaultCordExtensionFieldNumber = 85;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_cord_extension;
static const int kOneofUint32ExtensionFieldNumber = 111;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  oneof_uint32_extension;
static const int kOneofNestedMessageExtensionFieldNumber = 112;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes_NestedMessage >, 11, false >
  oneof_nested_message_extension;
static const int kOneofStringExtensionFieldNumber = 113;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  oneof_string_extension;
static const int kOneofBytesExtensionFieldNumber = 114;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  oneof_bytes_extension;
static const int kMyExtensionStringFieldNumber = 50;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  my_extension_string;
static const int kMyExtensionIntFieldNumber = 5;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestFieldOrderings,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  my_extension_int;
static const int kPackedInt32ExtensionFieldNumber = 90;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, true >
  packed_int32_extension;
static const int kPackedInt64ExtensionFieldNumber = 91;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 3, true >
  packed_int64_extension;
static const int kPackedUint32ExtensionFieldNumber = 92;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 13, true >
  packed_uint32_extension;
static const int kPackedUint64ExtensionFieldNumber = 93;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 4, true >
  packed_uint64_extension;
static const int kPackedSint32ExtensionFieldNumber = 94;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 17, true >
  packed_sint32_extension;
static const int kPackedSint64ExtensionFieldNumber = 95;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 18, true >
  packed_sint64_extension;
static const int kPackedFixed32ExtensionFieldNumber = 96;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 7, true >
  packed_fixed32_extension;
static const int kPackedFixed64ExtensionFieldNumber = 97;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 6, true >
  packed_fixed64_extension;
static const int kPackedSfixed32ExtensionFieldNumber = 98;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 15, true >
  packed_sfixed32_extension;
static const int kPackedSfixed64ExtensionFieldNumber = 99;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 16, true >
  packed_sfixed64_extension;
static const int kPackedFloatExtensionFieldNumber = 100;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, true >
  packed_float_extension;
static const int kPackedDoubleExtensionFieldNumber = 101;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, true >
  packed_double_extension;
static const int kPackedBoolExtensionFieldNumber = 102;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, true >
  packed_bool_extension;
static const int kPackedEnumExtensionFieldNumber = 103;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, true >
  packed_enum_extension;
static const int kUnpackedInt32ExtensionFieldNumber = 90;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, false >
  unpacked_int32_extension;
static const int kUnpackedInt64ExtensionFieldNumber = 91;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 3, false >
  unpacked_int64_extension;
static const int kUnpackedUint32ExtensionFieldNumber = 92;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 13, false >
  unpacked_uint32_extension;
static const int kUnpackedUint64ExtensionFieldNumber = 93;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 4, false >
  unpacked_uint64_extension;
static const int kUnpackedSint32ExtensionFieldNumber = 94;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 17, false >
  unpacked_sint32_extension;
static const int kUnpackedSint64ExtensionFieldNumber = 95;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 18, false >
  unpacked_sint64_extension;
static const int kUnpackedFixed32ExtensionFieldNumber = 96;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 7, false >
  unpacked_fixed32_extension;
static const int kUnpackedFixed64ExtensionFieldNumber = 97;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 6, false >
  unpacked_fixed64_extension;
static const int kUnpackedSfixed32ExtensionFieldNumber = 98;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 15, false >
  unpacked_sfixed32_extension;
static const int kUnpackedSfixed64ExtensionFieldNumber = 99;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 16, false >
  unpacked_sfixed64_extension;
static const int kUnpackedFloatExtensionFieldNumber = 100;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, false >
  unpacked_float_extension;
static const int kUnpackedDoubleExtensionFieldNumber = 101;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false >
  unpacked_double_extension;
static const int kUnpackedBoolExtensionFieldNumber = 102;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false >
  unpacked_bool_extension;
static const int kUnpackedEnumExtensionFieldNumber = 103;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestUnpackedExtensions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnum, ::protobuf_unittest::ForeignEnum_IsValid>, 14, false >
  unpacked_enum_extension;
static const int kTestAllTypesFieldNumber = 536860000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestHugeFieldNumbers,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypes >, 11, false >
  test_all_types;
static const int kTestExtensionInsideTableExtensionFieldNumber = 5;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestExtensionInsideTable,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  test_extension_inside_table_extension;
static const int kInnerFieldNumber = 3;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestNestedGroupExtensionInnerExtension >, 11, false >
  inner;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestAllTypes_NestedMessage

// optional int32 bb = 1;
inline bool TestAllTypes_NestedMessage::_internal_has_bb() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypes_NestedMessage::has_bb() const {
  return _internal_has_bb();
}
inline void TestAllTypes_NestedMessage::clear_bb() {
  bb_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestAllTypes_NestedMessage::_internal_bb() const {
  return bb_;
}
inline int32_t TestAllTypes_NestedMessage::bb() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.NestedMessage.bb)
  return _internal_bb();
}
inline void TestAllTypes_NestedMessage::_internal_set_bb(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  bb_ = value;
}
inline void TestAllTypes_NestedMessage::set_bb(int32_t value) {
  _internal_set_bb(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.NestedMessage.bb)
}

// -------------------------------------------------------------------

// TestAllTypes_OptionalGroup

// optional int32 a = 17;
inline bool TestAllTypes_OptionalGroup::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypes_OptionalGroup::has_a() const {
  return _internal_has_a();
}
inline void TestAllTypes_OptionalGroup::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestAllTypes_OptionalGroup::_internal_a() const {
  return a_;
}
inline int32_t TestAllTypes_OptionalGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.OptionalGroup.a)
  return _internal_a();
}
inline void TestAllTypes_OptionalGroup::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void TestAllTypes_OptionalGroup::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.OptionalGroup.a)
}

// -------------------------------------------------------------------

// TestAllTypes_RepeatedGroup

// optional int32 a = 47;
inline bool TestAllTypes_RepeatedGroup::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypes_RepeatedGroup::has_a() const {
  return _internal_has_a();
}
inline void TestAllTypes_RepeatedGroup::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestAllTypes_RepeatedGroup::_internal_a() const {
  return a_;
}
inline int32_t TestAllTypes_RepeatedGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.RepeatedGroup.a)
  return _internal_a();
}
inline void TestAllTypes_RepeatedGroup::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void TestAllTypes_RepeatedGroup::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.RepeatedGroup.a)
}

// -------------------------------------------------------------------

// TestAllTypes

// optional int32 optional_int32 = 1;
inline bool TestAllTypes::_internal_has_optional_int32() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_int32() const {
  return _internal_has_optional_int32();
}
inline void TestAllTypes::clear_optional_int32() {
  optional_int32_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t TestAllTypes::_internal_optional_int32() const {
  return optional_int32_;
}
inline int32_t TestAllTypes::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_int32)
  return _internal_optional_int32();
}
inline void TestAllTypes::_internal_set_optional_int32(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  optional_int32_ = value;
}
inline void TestAllTypes::set_optional_int32(int32_t value) {
  _internal_set_optional_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_int32)
}

// optional int64 optional_int64 = 2;
inline bool TestAllTypes::_internal_has_optional_int64() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_int64() const {
  return _internal_has_optional_int64();
}
inline void TestAllTypes::clear_optional_int64() {
  optional_int64_ = int64_t{0};
  _has_bits_[0] &= ~0x00004000u;
}
inline int64_t TestAllTypes::_internal_optional_int64() const {
  return optional_int64_;
}
inline int64_t TestAllTypes::optional_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_int64)
  return _internal_optional_int64();
}
inline void TestAllTypes::_internal_set_optional_int64(int64_t value) {
  _has_bits_[0] |= 0x00004000u;
  optional_int64_ = value;
}
inline void TestAllTypes::set_optional_int64(int64_t value) {
  _internal_set_optional_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_int64)
}

// optional uint32 optional_uint32 = 3;
inline bool TestAllTypes::_internal_has_optional_uint32() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_uint32() const {
  return _internal_has_optional_uint32();
}
inline void TestAllTypes::clear_optional_uint32() {
  optional_uint32_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t TestAllTypes::_internal_optional_uint32() const {
  return optional_uint32_;
}
inline uint32_t TestAllTypes::optional_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_uint32)
  return _internal_optional_uint32();
}
inline void TestAllTypes::_internal_set_optional_uint32(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  optional_uint32_ = value;
}
inline void TestAllTypes::set_optional_uint32(uint32_t value) {
  _internal_set_optional_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_uint32)
}

// optional uint64 optional_uint64 = 4;
inline bool TestAllTypes::_internal_has_optional_uint64() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_uint64() const {
  return _internal_has_optional_uint64();
}
inline void TestAllTypes::clear_optional_uint64() {
  optional_uint64_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00020000u;
}
inline uint64_t TestAllTypes::_internal_optional_uint64() const {
  return optional_uint64_;
}
inline uint64_t TestAllTypes::optional_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_uint64)
  return _internal_optional_uint64();
}
inline void TestAllTypes::_internal_set_optional_uint64(uint64_t value) {
  _has_bits_[0] |= 0x00020000u;
  optional_uint64_ = value;
}
inline void TestAllTypes::set_optional_uint64(uint64_t value) {
  _internal_set_optional_uint64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_uint64)
}

// optional sint32 optional_sint32 = 5;
inline bool TestAllTypes::_internal_has_optional_sint32() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_sint32() const {
  return _internal_has_optional_sint32();
}
inline void TestAllTypes::clear_optional_sint32() {
  optional_sint32_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline int32_t TestAllTypes::_internal_optional_sint32() const {
  return optional_sint32_;
}
inline int32_t TestAllTypes::optional_sint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_sint32)
  return _internal_optional_sint32();
}
inline void TestAllTypes::_internal_set_optional_sint32(int32_t value) {
  _has_bits_[0] |= 0x00080000u;
  optional_sint32_ = value;
}
inline void TestAllTypes::set_optional_sint32(int32_t value) {
  _internal_set_optional_sint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_sint32)
}

// optional sint64 optional_sint64 = 6;
inline bool TestAllTypes::_internal_has_optional_sint64() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_sint64() const {
  return _internal_has_optional_sint64();
}
inline void TestAllTypes::clear_optional_sint64() {
  optional_sint64_ = int64_t{0};
  _has_bits_[0] &= ~0x00040000u;
}
inline int64_t TestAllTypes::_internal_optional_sint64() const {
  return optional_sint64_;
}
inline int64_t TestAllTypes::optional_sint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_sint64)
  return _internal_optional_sint64();
}
inline void TestAllTypes::_internal_set_optional_sint64(int64_t value) {
  _has_bits_[0] |= 0x00040000u;
  optional_sint64_ = value;
}
inline void TestAllTypes::set_optional_sint64(int64_t value) {
  _internal_set_optional_sint64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_sint64)
}

// optional fixed32 optional_fixed32 = 7;
inline bool TestAllTypes::_internal_has_optional_fixed32() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_fixed32() const {
  return _internal_has_optional_fixed32();
}
inline void TestAllTypes::clear_optional_fixed32() {
  optional_fixed32_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t TestAllTypes::_internal_optional_fixed32() const {
  return optional_fixed32_;
}
inline uint32_t TestAllTypes::optional_fixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_fixed32)
  return _internal_optional_fixed32();
}
inline void TestAllTypes::_internal_set_optional_fixed32(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  optional_fixed32_ = value;
}
inline void TestAllTypes::set_optional_fixed32(uint32_t value) {
  _internal_set_optional_fixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_fixed32)
}

// optional fixed64 optional_fixed64 = 8;
inline bool TestAllTypes::_internal_has_optional_fixed64() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_fixed64() const {
  return _internal_has_optional_fixed64();
}
inline void TestAllTypes::clear_optional_fixed64() {
  optional_fixed64_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00200000u;
}
inline uint64_t TestAllTypes::_internal_optional_fixed64() const {
  return optional_fixed64_;
}
inline uint64_t TestAllTypes::optional_fixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_fixed64)
  return _internal_optional_fixed64();
}
inline void TestAllTypes::_internal_set_optional_fixed64(uint64_t value) {
  _has_bits_[0] |= 0x00200000u;
  optional_fixed64_ = value;
}
inline void TestAllTypes::set_optional_fixed64(uint64_t value) {
  _internal_set_optional_fixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_fixed64)
}

// optional sfixed32 optional_sfixed32 = 9;
inline bool TestAllTypes::_internal_has_optional_sfixed32() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_sfixed32() const {
  return _internal_has_optional_sfixed32();
}
inline void TestAllTypes::clear_optional_sfixed32() {
  optional_sfixed32_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline int32_t TestAllTypes::_internal_optional_sfixed32() const {
  return optional_sfixed32_;
}
inline int32_t TestAllTypes::optional_sfixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_sfixed32)
  return _internal_optional_sfixed32();
}
inline void TestAllTypes::_internal_set_optional_sfixed32(int32_t value) {
  _has_bits_[0] |= 0x00800000u;
  optional_sfixed32_ = value;
}
inline void TestAllTypes::set_optional_sfixed32(int32_t value) {
  _internal_set_optional_sfixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_sfixed32)
}

// optional sfixed64 optional_sfixed64 = 10;
inline bool TestAllTypes::_internal_has_optional_sfixed64() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_sfixed64() const {
  return _internal_has_optional_sfixed64();
}
inline void TestAllTypes::clear_optional_sfixed64() {
  optional_sfixed64_ = int64_t{0};
  _has_bits_[0] &= ~0x00400000u;
}
inline int64_t TestAllTypes::_internal_optional_sfixed64() const {
  return optional_sfixed64_;
}
inline int64_t TestAllTypes::optional_sfixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_sfixed64)
  return _internal_optional_sfixed64();
}
inline void TestAllTypes::_internal_set_optional_sfixed64(int64_t value) {
  _has_bits_[0] |= 0x00400000u;
  optional_sfixed64_ = value;
}
inline void TestAllTypes::set_optional_sfixed64(int64_t value) {
  _internal_set_optional_sfixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_sfixed64)
}

// optional float optional_float = 11;
inline bool TestAllTypes::_internal_has_optional_float() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_float() const {
  return _internal_has_optional_float();
}
inline void TestAllTypes::clear_optional_float() {
  optional_float_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float TestAllTypes::_internal_optional_float() const {
  return optional_float_;
}
inline float TestAllTypes::optional_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_float)
  return _internal_optional_float();
}
inline void TestAllTypes::_internal_set_optional_float(float value) {
  _has_bits_[0] |= 0x01000000u;
  optional_float_ = value;
}
inline void TestAllTypes::set_optional_float(float value) {
  _internal_set_optional_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_float)
}

// optional double optional_double = 12;
inline bool TestAllTypes::_internal_has_optional_double() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_double() const {
  return _internal_has_optional_double();
}
inline void TestAllTypes::clear_optional_double() {
  optional_double_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double TestAllTypes::_internal_optional_double() const {
  return optional_double_;
}
inline double TestAllTypes::optional_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_double)
  return _internal_optional_double();
}
inline void TestAllTypes::_internal_set_optional_double(double value) {
  _has_bits_[0] |= 0x02000000u;
  optional_double_ = value;
}
inline void TestAllTypes::set_optional_double(double value) {
  _internal_set_optional_double(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_double)
}

// optional bool optional_bool = 13;
inline bool TestAllTypes::_internal_has_optional_bool() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_bool() const {
  return _internal_has_optional_bool();
}
inline void TestAllTypes::clear_optional_bool() {
  optional_bool_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool TestAllTypes::_internal_optional_bool() const {
  return optional_bool_;
}
inline bool TestAllTypes::optional_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_bool)
  return _internal_optional_bool();
}
inline void TestAllTypes::_internal_set_optional_bool(bool value) {
  _has_bits_[0] |= 0x04000000u;
  optional_bool_ = value;
}
inline void TestAllTypes::set_optional_bool(bool value) {
  _internal_set_optional_bool(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_bool)
}

// optional string optional_string = 14;
inline bool TestAllTypes::_internal_has_optional_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_string() const {
  return _internal_has_optional_string();
}
inline void TestAllTypes::clear_optional_string() {
  optional_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestAllTypes::optional_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_string)
  return _internal_optional_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypes::set_optional_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 optional_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_string)
}
inline std::string* TestAllTypes::mutable_optional_string() {
  std::string* _s = _internal_mutable_optional_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_string)
  return _s;
}
inline const std::string& TestAllTypes::_internal_optional_string() const {
  return optional_string_.Get();
}
inline void TestAllTypes::_internal_set_optional_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_optional_string() {
  _has_bits_[0] |= 0x00000001u;
  return optional_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_optional_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_string)
  if (!_internal_has_optional_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = optional_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_string_.IsDefault()) {
    optional_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypes::set_allocated_optional_string(std::string* optional_string) {
  if (optional_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_string_.SetAllocated(optional_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_string_.IsDefault()) {
    optional_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_string)
}

// optional bytes optional_bytes = 15;
inline bool TestAllTypes::_internal_has_optional_bytes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_bytes() const {
  return _internal_has_optional_bytes();
}
inline void TestAllTypes::clear_optional_bytes() {
  optional_bytes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestAllTypes::optional_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_bytes)
  return _internal_optional_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypes::set_optional_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 optional_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_bytes)
}
inline std::string* TestAllTypes::mutable_optional_bytes() {
  std::string* _s = _internal_mutable_optional_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_bytes)
  return _s;
}
inline const std::string& TestAllTypes::_internal_optional_bytes() const {
  return optional_bytes_.Get();
}
inline void TestAllTypes::_internal_set_optional_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_optional_bytes() {
  _has_bits_[0] |= 0x00000002u;
  return optional_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_bytes)
  if (!_internal_has_optional_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = optional_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_bytes_.IsDefault()) {
    optional_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypes::set_allocated_optional_bytes(std::string* optional_bytes) {
  if (optional_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_bytes_.SetAllocated(optional_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_bytes_.IsDefault()) {
    optional_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_bytes)
}

// optional group OptionalGroup = 16 { ... };
inline bool TestAllTypes::_internal_has_optionalgroup() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || optionalgroup_ != nullptr);
  return value;
}
inline bool TestAllTypes::has_optionalgroup() const {
  return _internal_has_optionalgroup();
}
inline void TestAllTypes::clear_optionalgroup() {
  if (optionalgroup_ != nullptr) optionalgroup_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::protobuf_unittest::TestAllTypes_OptionalGroup& TestAllTypes::_internal_optionalgroup() const {
  const ::protobuf_unittest::TestAllTypes_OptionalGroup* p = optionalgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes_OptionalGroup&>(
      ::protobuf_unittest::_TestAllTypes_OptionalGroup_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes_OptionalGroup& TestAllTypes::optionalgroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optionalgroup)
  return _internal_optionalgroup();
}
inline void TestAllTypes::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_unittest::TestAllTypes_OptionalGroup* optionalgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalgroup_);
  }
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optionalgroup)
}
inline ::protobuf_unittest::TestAllTypes_OptionalGroup* TestAllTypes::release_optionalgroup() {
  _has_bits_[0] &= ~0x00000100u;
  ::protobuf_unittest::TestAllTypes_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes_OptionalGroup* TestAllTypes::unsafe_arena_release_optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optionalgroup)
  _has_bits_[0] &= ~0x00000100u;
  ::protobuf_unittest::TestAllTypes_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes_OptionalGroup* TestAllTypes::_internal_mutable_optionalgroup() {
  _has_bits_[0] |= 0x00000100u;
  if (optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes_OptionalGroup>(GetArenaForAllocation());
    optionalgroup_ = p;
  }
  return optionalgroup_;
}
inline ::protobuf_unittest::TestAllTypes_OptionalGroup* TestAllTypes::mutable_optionalgroup() {
  ::protobuf_unittest::TestAllTypes_OptionalGroup* _msg = _internal_mutable_optionalgroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optionalgroup)
  return _msg;
}
inline void TestAllTypes::set_allocated_optionalgroup(::protobuf_unittest::TestAllTypes_OptionalGroup* optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optionalgroup_;
  }
  if (optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionalgroup);
    if (message_arena != submessage_arena) {
      optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  optionalgroup_ = optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optionalgroup)
}

// optional .protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
inline bool TestAllTypes::_internal_has_optional_nested_message() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || optional_nested_message_ != nullptr);
  return value;
}
inline bool TestAllTypes::has_optional_nested_message() const {
  return _internal_has_optional_nested_message();
}
inline void TestAllTypes::clear_optional_nested_message() {
  if (optional_nested_message_ != nullptr) optional_nested_message_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::_internal_optional_nested_message() const {
  const ::protobuf_unittest::TestAllTypes_NestedMessage* p = optional_nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes_NestedMessage&>(
      ::protobuf_unittest::_TestAllTypes_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::optional_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_nested_message)
  return _internal_optional_nested_message();
}
inline void TestAllTypes::unsafe_arena_set_allocated_optional_nested_message(
    ::protobuf_unittest::TestAllTypes_NestedMessage* optional_nested_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_nested_message_);
  }
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_nested_message)
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::release_optional_nested_message() {
  _has_bits_[0] &= ~0x00000200u;
  ::protobuf_unittest::TestAllTypes_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::unsafe_arena_release_optional_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_nested_message)
  _has_bits_[0] &= ~0x00000200u;
  ::protobuf_unittest::TestAllTypes_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::_internal_mutable_optional_nested_message() {
  _has_bits_[0] |= 0x00000200u;
  if (optional_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes_NestedMessage>(GetArenaForAllocation());
    optional_nested_message_ = p;
  }
  return optional_nested_message_;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::mutable_optional_nested_message() {
  ::protobuf_unittest::TestAllTypes_NestedMessage* _msg = _internal_mutable_optional_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_nested_message)
  return _msg;
}
inline void TestAllTypes::set_allocated_optional_nested_message(::protobuf_unittest::TestAllTypes_NestedMessage* optional_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_nested_message_;
  }
  if (optional_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_nested_message);
    if (message_arena != submessage_arena) {
      optional_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_nested_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  optional_nested_message_ = optional_nested_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_nested_message)
}

// optional .protobuf_unittest.ForeignMessage optional_foreign_message = 19;
inline bool TestAllTypes::_internal_has_optional_foreign_message() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || optional_foreign_message_ != nullptr);
  return value;
}
inline bool TestAllTypes::has_optional_foreign_message() const {
  return _internal_has_optional_foreign_message();
}
inline void TestAllTypes::clear_optional_foreign_message() {
  if (optional_foreign_message_ != nullptr) optional_foreign_message_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::protobuf_unittest::ForeignMessage& TestAllTypes::_internal_optional_foreign_message() const {
  const ::protobuf_unittest::ForeignMessage* p = optional_foreign_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::ForeignMessage&>(
      ::protobuf_unittest::_ForeignMessage_default_instance_);
}
inline const ::protobuf_unittest::ForeignMessage& TestAllTypes::optional_foreign_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_foreign_message)
  return _internal_optional_foreign_message();
}
inline void TestAllTypes::unsafe_arena_set_allocated_optional_foreign_message(
    ::protobuf_unittest::ForeignMessage* optional_foreign_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_foreign_message_);
  }
  optional_foreign_message_ = optional_foreign_message;
  if (optional_foreign_message) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_foreign_message)
}
inline ::protobuf_unittest::ForeignMessage* TestAllTypes::release_optional_foreign_message() {
  _has_bits_[0] &= ~0x00000400u;
  ::protobuf_unittest::ForeignMessage* temp = optional_foreign_message_;
  optional_foreign_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestAllTypes::unsafe_arena_release_optional_foreign_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_foreign_message)
  _has_bits_[0] &= ~0x00000400u;
  ::protobuf_unittest::ForeignMessage* temp = optional_foreign_message_;
  optional_foreign_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestAllTypes::_internal_mutable_optional_foreign_message() {
  _has_bits_[0] |= 0x00000400u;
  if (optional_foreign_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::ForeignMessage>(GetArenaForAllocation());
    optional_foreign_message_ = p;
  }
  return optional_foreign_message_;
}
inline ::protobuf_unittest::ForeignMessage* TestAllTypes::mutable_optional_foreign_message() {
  ::protobuf_unittest::ForeignMessage* _msg = _internal_mutable_optional_foreign_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_foreign_message)
  return _msg;
}
inline void TestAllTypes::set_allocated_optional_foreign_message(::protobuf_unittest::ForeignMessage* optional_foreign_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_foreign_message_;
  }
  if (optional_foreign_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_foreign_message);
    if (message_arena != submessage_arena) {
      optional_foreign_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_foreign_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  optional_foreign_message_ = optional_foreign_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_foreign_message)
}

// optional .protobuf_unittest_import.ImportMessage optional_import_message = 20;
inline bool TestAllTypes::_internal_has_optional_import_message() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || optional_import_message_ != nullptr);
  return value;
}
inline bool TestAllTypes::has_optional_import_message() const {
  return _internal_has_optional_import_message();
}
inline const ::protobuf_unittest_import::ImportMessage& TestAllTypes::_internal_optional_import_message() const {
  const ::protobuf_unittest_import::ImportMessage* p = optional_import_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest_import::ImportMessage&>(
      ::protobuf_unittest_import::_ImportMessage_default_instance_);
}
inline const ::protobuf_unittest_import::ImportMessage& TestAllTypes::optional_import_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_import_message)
  return _internal_optional_import_message();
}
inline void TestAllTypes::unsafe_arena_set_allocated_optional_import_message(
    ::protobuf_unittest_import::ImportMessage* optional_import_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_import_message_);
  }
  optional_import_message_ = optional_import_message;
  if (optional_import_message) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_import_message)
}
inline ::protobuf_unittest_import::ImportMessage* TestAllTypes::release_optional_import_message() {
  _has_bits_[0] &= ~0x00000800u;
  ::protobuf_unittest_import::ImportMessage* temp = optional_import_message_;
  optional_import_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest_import::ImportMessage* TestAllTypes::unsafe_arena_release_optional_import_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_import_message)
  _has_bits_[0] &= ~0x00000800u;
  ::protobuf_unittest_import::ImportMessage* temp = optional_import_message_;
  optional_import_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest_import::ImportMessage* TestAllTypes::_internal_mutable_optional_import_message() {
  _has_bits_[0] |= 0x00000800u;
  if (optional_import_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest_import::ImportMessage>(GetArenaForAllocation());
    optional_import_message_ = p;
  }
  return optional_import_message_;
}
inline ::protobuf_unittest_import::ImportMessage* TestAllTypes::mutable_optional_import_message() {
  ::protobuf_unittest_import::ImportMessage* _msg = _internal_mutable_optional_import_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_import_message)
  return _msg;
}
inline void TestAllTypes::set_allocated_optional_import_message(::protobuf_unittest_import::ImportMessage* optional_import_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_import_message_);
  }
  if (optional_import_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_import_message));
    if (message_arena != submessage_arena) {
      optional_import_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_import_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  optional_import_message_ = optional_import_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_import_message)
}

// optional .protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
inline bool TestAllTypes::_internal_has_optional_nested_enum() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_nested_enum() const {
  return _internal_has_optional_nested_enum();
}
inline void TestAllTypes::clear_optional_nested_enum() {
  optional_nested_enum_ = 1;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::protobuf_unittest::TestAllTypes_NestedEnum TestAllTypes::_internal_optional_nested_enum() const {
  return static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(optional_nested_enum_);
}
inline ::protobuf_unittest::TestAllTypes_NestedEnum TestAllTypes::optional_nested_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_nested_enum)
  return _internal_optional_nested_enum();
}
inline void TestAllTypes::_internal_set_optional_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value) {
  assert(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(value));
  _has_bits_[0] |= 0x10000000u;
  optional_nested_enum_ = value;
}
inline void TestAllTypes::set_optional_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value) {
  _internal_set_optional_nested_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_nested_enum)
}

// optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
inline bool TestAllTypes::_internal_has_optional_foreign_enum() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_foreign_enum() const {
  return _internal_has_optional_foreign_enum();
}
inline void TestAllTypes::clear_optional_foreign_enum() {
  optional_foreign_enum_ = 4;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::protobuf_unittest::ForeignEnum TestAllTypes::_internal_optional_foreign_enum() const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(optional_foreign_enum_);
}
inline ::protobuf_unittest::ForeignEnum TestAllTypes::optional_foreign_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_foreign_enum)
  return _internal_optional_foreign_enum();
}
inline void TestAllTypes::_internal_set_optional_foreign_enum(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  _has_bits_[0] |= 0x20000000u;
  optional_foreign_enum_ = value;
}
inline void TestAllTypes::set_optional_foreign_enum(::protobuf_unittest::ForeignEnum value) {
  _internal_set_optional_foreign_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_foreign_enum)
}

// optional .protobuf_unittest_import.ImportEnum optional_import_enum = 23;
inline bool TestAllTypes::_internal_has_optional_import_enum() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_import_enum() const {
  return _internal_has_optional_import_enum();
}
inline void TestAllTypes::clear_optional_import_enum() {
  optional_import_enum_ = 7;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::protobuf_unittest_import::ImportEnum TestAllTypes::_internal_optional_import_enum() const {
  return static_cast< ::protobuf_unittest_import::ImportEnum >(optional_import_enum_);
}
inline ::protobuf_unittest_import::ImportEnum TestAllTypes::optional_import_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_import_enum)
  return _internal_optional_import_enum();
}
inline void TestAllTypes::_internal_set_optional_import_enum(::protobuf_unittest_import::ImportEnum value) {
  assert(::protobuf_unittest_import::ImportEnum_IsValid(value));
  _has_bits_[0] |= 0x40000000u;
  optional_import_enum_ = value;
}
inline void TestAllTypes::set_optional_import_enum(::protobuf_unittest_import::ImportEnum value) {
  _internal_set_optional_import_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_import_enum)
}

// optional string optional_string_piece = 24 [ctype = STRING_PIECE];
inline bool TestAllTypes::_internal_has_optional_string_piece() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_string_piece() const {
  return _internal_has_optional_string_piece();
}
inline void TestAllTypes::clear_optional_string_piece() {
  optional_string_piece_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestAllTypes::optional_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_string_piece)
  return _internal_optional_string_piece();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypes::set_optional_string_piece(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 optional_string_piece_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_string_piece)
}
inline std::string* TestAllTypes::mutable_optional_string_piece() {
  std::string* _s = _internal_mutable_optional_string_piece();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_string_piece)
  return _s;
}
inline const std::string& TestAllTypes::_internal_optional_string_piece() const {
  return optional_string_piece_.Get();
}
inline void TestAllTypes::_internal_set_optional_string_piece(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  optional_string_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_optional_string_piece() {
  _has_bits_[0] |= 0x00000004u;
  return optional_string_piece_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_optional_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_string_piece)
  if (!_internal_has_optional_string_piece()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = optional_string_piece_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_string_piece_.IsDefault()) {
    optional_string_piece_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypes::set_allocated_optional_string_piece(std::string* optional_string_piece) {
  if (optional_string_piece != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optional_string_piece_.SetAllocated(optional_string_piece, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_string_piece_.IsDefault()) {
    optional_string_piece_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_string_piece)
}

// optional string optional_cord = 25 [ctype = CORD];
inline bool TestAllTypes::_internal_has_optional_cord() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestAllTypes::has_optional_cord() const {
  return _internal_has_optional_cord();
}
inline void TestAllTypes::clear_optional_cord() {
  optional_cord_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TestAllTypes::optional_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_cord)
  return _internal_optional_cord();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypes::set_optional_cord(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 optional_cord_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.optional_cord)
}
inline std::string* TestAllTypes::mutable_optional_cord() {
  std::string* _s = _internal_mutable_optional_cord();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_cord)
  return _s;
}
inline const std::string& TestAllTypes::_internal_optional_cord() const {
  return optional_cord_.Get();
}
inline void TestAllTypes::_internal_set_optional_cord(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  optional_cord_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_optional_cord() {
  _has_bits_[0] |= 0x00000008u;
  return optional_cord_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_optional_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_cord)
  if (!_internal_has_optional_cord()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = optional_cord_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_cord_.IsDefault()) {
    optional_cord_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypes::set_allocated_optional_cord(std::string* optional_cord) {
  if (optional_cord != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  optional_cord_.SetAllocated(optional_cord, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_cord_.IsDefault()) {
    optional_cord_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_cord)
}

// optional .protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
inline bool TestAllTypes::_internal_has_optional_public_import_message() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || optional_public_import_message_ != nullptr);
  return value;
}
inline bool TestAllTypes::has_optional_public_import_message() const {
  return _internal_has_optional_public_import_message();
}
inline const ::protobuf_unittest_import::PublicImportMessage& TestAllTypes::_internal_optional_public_import_message() const {
  const ::protobuf_unittest_import::PublicImportMessage* p = optional_public_import_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest_import::PublicImportMessage&>(
      ::protobuf_unittest_import::_PublicImportMessage_default_instance_);
}
inline const ::protobuf_unittest_import::PublicImportMessage& TestAllTypes::optional_public_import_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_public_import_message)
  return _internal_optional_public_import_message();
}
inline void TestAllTypes::unsafe_arena_set_allocated_optional_public_import_message(
    ::protobuf_unittest_import::PublicImportMessage* optional_public_import_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_public_import_message_);
  }
  optional_public_import_message_ = optional_public_import_message;
  if (optional_public_import_message) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_public_import_message)
}
inline ::protobuf_unittest_import::PublicImportMessage* TestAllTypes::release_optional_public_import_message() {
  _has_bits_[0] &= ~0x00001000u;
  ::protobuf_unittest_import::PublicImportMessage* temp = optional_public_import_message_;
  optional_public_import_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest_import::PublicImportMessage* TestAllTypes::unsafe_arena_release_optional_public_import_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_public_import_message)
  _has_bits_[0] &= ~0x00001000u;
  ::protobuf_unittest_import::PublicImportMessage* temp = optional_public_import_message_;
  optional_public_import_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest_import::PublicImportMessage* TestAllTypes::_internal_mutable_optional_public_import_message() {
  _has_bits_[0] |= 0x00001000u;
  if (optional_public_import_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest_import::PublicImportMessage>(GetArenaForAllocation());
    optional_public_import_message_ = p;
  }
  return optional_public_import_message_;
}
inline ::protobuf_unittest_import::PublicImportMessage* TestAllTypes::mutable_optional_public_import_message() {
  ::protobuf_unittest_import::PublicImportMessage* _msg = _internal_mutable_optional_public_import_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_public_import_message)
  return _msg;
}
inline void TestAllTypes::set_allocated_optional_public_import_message(::protobuf_unittest_import::PublicImportMessage* optional_public_import_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_public_import_message_);
  }
  if (optional_public_import_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_public_import_message));
    if (message_arena != submessage_arena) {
      optional_public_import_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_public_import_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  optional_public_import_message_ = optional_public_import_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_public_import_message)
}

// optional .protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27 [lazy = true];
inline bool TestAllTypes::_internal_has_optional_lazy_message() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || optional_lazy_message_ != nullptr);
  return value;
}
inline bool TestAllTypes::has_optional_lazy_message() const {
  return _internal_has_optional_lazy_message();
}
inline void TestAllTypes::clear_optional_lazy_message() {
  if (optional_lazy_message_ != nullptr) optional_lazy_message_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::_internal_optional_lazy_message() const {
  const ::protobuf_unittest::TestAllTypes_NestedMessage* p = optional_lazy_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes_NestedMessage&>(
      ::protobuf_unittest::_TestAllTypes_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::optional_lazy_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.optional_lazy_message)
  return _internal_optional_lazy_message();
}
inline void TestAllTypes::unsafe_arena_set_allocated_optional_lazy_message(
    ::protobuf_unittest::TestAllTypes_NestedMessage* optional_lazy_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_lazy_message_);
  }
  optional_lazy_message_ = optional_lazy_message;
  if (optional_lazy_message) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.optional_lazy_message)
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::release_optional_lazy_message() {
  _has_bits_[0] &= ~0x00002000u;
  ::protobuf_unittest::TestAllTypes_NestedMessage* temp = optional_lazy_message_;
  optional_lazy_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::unsafe_arena_release_optional_lazy_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.optional_lazy_message)
  _has_bits_[0] &= ~0x00002000u;
  ::protobuf_unittest::TestAllTypes_NestedMessage* temp = optional_lazy_message_;
  optional_lazy_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::_internal_mutable_optional_lazy_message() {
  _has_bits_[0] |= 0x00002000u;
  if (optional_lazy_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes_NestedMessage>(GetArenaForAllocation());
    optional_lazy_message_ = p;
  }
  return optional_lazy_message_;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::mutable_optional_lazy_message() {
  ::protobuf_unittest::TestAllTypes_NestedMessage* _msg = _internal_mutable_optional_lazy_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.optional_lazy_message)
  return _msg;
}
inline void TestAllTypes::set_allocated_optional_lazy_message(::protobuf_unittest::TestAllTypes_NestedMessage* optional_lazy_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_lazy_message_;
  }
  if (optional_lazy_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_lazy_message);
    if (message_arena != submessage_arena) {
      optional_lazy_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_lazy_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  optional_lazy_message_ = optional_lazy_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.optional_lazy_message)
}

// repeated int32 repeated_int32 = 31;
inline int TestAllTypes::_internal_repeated_int32_size() const {
  return repeated_int32_.size();
}
inline int TestAllTypes::repeated_int32_size() const {
  return _internal_repeated_int32_size();
}
inline void TestAllTypes::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline int32_t TestAllTypes::_internal_repeated_int32(int index) const {
  return repeated_int32_.Get(index);
}
inline int32_t TestAllTypes::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_int32)
  return _internal_repeated_int32(index);
}
inline void TestAllTypes::set_repeated_int32(int index, int32_t value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_int32)
}
inline void TestAllTypes::_internal_add_repeated_int32(int32_t value) {
  repeated_int32_.Add(value);
}
inline void TestAllTypes::add_repeated_int32(int32_t value) {
  _internal_add_repeated_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypes::_internal_repeated_int32() const {
  return repeated_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypes::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_int32)
  return _internal_repeated_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypes::_internal_mutable_repeated_int32() {
  return &repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypes::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_int32)
  return _internal_mutable_repeated_int32();
}

// repeated int64 repeated_int64 = 32;
inline int TestAllTypes::_internal_repeated_int64_size() const {
  return repeated_int64_.size();
}
inline int TestAllTypes::repeated_int64_size() const {
  return _internal_repeated_int64_size();
}
inline void TestAllTypes::clear_repeated_int64() {
  repeated_int64_.Clear();
}
inline int64_t TestAllTypes::_internal_repeated_int64(int index) const {
  return repeated_int64_.Get(index);
}
inline int64_t TestAllTypes::repeated_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_int64)
  return _internal_repeated_int64(index);
}
inline void TestAllTypes::set_repeated_int64(int index, int64_t value) {
  repeated_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_int64)
}
inline void TestAllTypes::_internal_add_repeated_int64(int64_t value) {
  repeated_int64_.Add(value);
}
inline void TestAllTypes::add_repeated_int64(int64_t value) {
  _internal_add_repeated_int64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypes::_internal_repeated_int64() const {
  return repeated_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypes::repeated_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_int64)
  return _internal_repeated_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypes::_internal_mutable_repeated_int64() {
  return &repeated_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypes::mutable_repeated_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_int64)
  return _internal_mutable_repeated_int64();
}

// repeated uint32 repeated_uint32 = 33;
inline int TestAllTypes::_internal_repeated_uint32_size() const {
  return repeated_uint32_.size();
}
inline int TestAllTypes::repeated_uint32_size() const {
  return _internal_repeated_uint32_size();
}
inline void TestAllTypes::clear_repeated_uint32() {
  repeated_uint32_.Clear();
}
inline uint32_t TestAllTypes::_internal_repeated_uint32(int index) const {
  return repeated_uint32_.Get(index);
}
inline uint32_t TestAllTypes::repeated_uint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_uint32)
  return _internal_repeated_uint32(index);
}
inline void TestAllTypes::set_repeated_uint32(int index, uint32_t value) {
  repeated_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_uint32)
}
inline void TestAllTypes::_internal_add_repeated_uint32(uint32_t value) {
  repeated_uint32_.Add(value);
}
inline void TestAllTypes::add_repeated_uint32(uint32_t value) {
  _internal_add_repeated_uint32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypes::_internal_repeated_uint32() const {
  return repeated_uint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypes::repeated_uint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_uint32)
  return _internal_repeated_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypes::_internal_mutable_repeated_uint32() {
  return &repeated_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypes::mutable_repeated_uint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_uint32)
  return _internal_mutable_repeated_uint32();
}

// repeated uint64 repeated_uint64 = 34;
inline int TestAllTypes::_internal_repeated_uint64_size() const {
  return repeated_uint64_.size();
}
inline int TestAllTypes::repeated_uint64_size() const {
  return _internal_repeated_uint64_size();
}
inline void TestAllTypes::clear_repeated_uint64() {
  repeated_uint64_.Clear();
}
inline uint64_t TestAllTypes::_internal_repeated_uint64(int index) const {
  return repeated_uint64_.Get(index);
}
inline uint64_t TestAllTypes::repeated_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_uint64)
  return _internal_repeated_uint64(index);
}
inline void TestAllTypes::set_repeated_uint64(int index, uint64_t value) {
  repeated_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_uint64)
}
inline void TestAllTypes::_internal_add_repeated_uint64(uint64_t value) {
  repeated_uint64_.Add(value);
}
inline void TestAllTypes::add_repeated_uint64(uint64_t value) {
  _internal_add_repeated_uint64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypes::_internal_repeated_uint64() const {
  return repeated_uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypes::repeated_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_uint64)
  return _internal_repeated_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypes::_internal_mutable_repeated_uint64() {
  return &repeated_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypes::mutable_repeated_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_uint64)
  return _internal_mutable_repeated_uint64();
}

// repeated sint32 repeated_sint32 = 35;
inline int TestAllTypes::_internal_repeated_sint32_size() const {
  return repeated_sint32_.size();
}
inline int TestAllTypes::repeated_sint32_size() const {
  return _internal_repeated_sint32_size();
}
inline void TestAllTypes::clear_repeated_sint32() {
  repeated_sint32_.Clear();
}
inline int32_t TestAllTypes::_internal_repeated_sint32(int index) const {
  return repeated_sint32_.Get(index);
}
inline int32_t TestAllTypes::repeated_sint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_sint32)
  return _internal_repeated_sint32(index);
}
inline void TestAllTypes::set_repeated_sint32(int index, int32_t value) {
  repeated_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_sint32)
}
inline void TestAllTypes::_internal_add_repeated_sint32(int32_t value) {
  repeated_sint32_.Add(value);
}
inline void TestAllTypes::add_repeated_sint32(int32_t value) {
  _internal_add_repeated_sint32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypes::_internal_repeated_sint32() const {
  return repeated_sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypes::repeated_sint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_sint32)
  return _internal_repeated_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypes::_internal_mutable_repeated_sint32() {
  return &repeated_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypes::mutable_repeated_sint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_sint32)
  return _internal_mutable_repeated_sint32();
}

// repeated sint64 repeated_sint64 = 36;
inline int TestAllTypes::_internal_repeated_sint64_size() const {
  return repeated_sint64_.size();
}
inline int TestAllTypes::repeated_sint64_size() const {
  return _internal_repeated_sint64_size();
}
inline void TestAllTypes::clear_repeated_sint64() {
  repeated_sint64_.Clear();
}
inline int64_t TestAllTypes::_internal_repeated_sint64(int index) const {
  return repeated_sint64_.Get(index);
}
inline int64_t TestAllTypes::repeated_sint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_sint64)
  return _internal_repeated_sint64(index);
}
inline void TestAllTypes::set_repeated_sint64(int index, int64_t value) {
  repeated_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_sint64)
}
inline void TestAllTypes::_internal_add_repeated_sint64(int64_t value) {
  repeated_sint64_.Add(value);
}
inline void TestAllTypes::add_repeated_sint64(int64_t value) {
  _internal_add_repeated_sint64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypes::_internal_repeated_sint64() const {
  return repeated_sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypes::repeated_sint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_sint64)
  return _internal_repeated_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypes::_internal_mutable_repeated_sint64() {
  return &repeated_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypes::mutable_repeated_sint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_sint64)
  return _internal_mutable_repeated_sint64();
}

// repeated fixed32 repeated_fixed32 = 37;
inline int TestAllTypes::_internal_repeated_fixed32_size() const {
  return repeated_fixed32_.size();
}
inline int TestAllTypes::repeated_fixed32_size() const {
  return _internal_repeated_fixed32_size();
}
inline void TestAllTypes::clear_repeated_fixed32() {
  repeated_fixed32_.Clear();
}
inline uint32_t TestAllTypes::_internal_repeated_fixed32(int index) const {
  return repeated_fixed32_.Get(index);
}
inline uint32_t TestAllTypes::repeated_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_fixed32)
  return _internal_repeated_fixed32(index);
}
inline void TestAllTypes::set_repeated_fixed32(int index, uint32_t value) {
  repeated_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_fixed32)
}
inline void TestAllTypes::_internal_add_repeated_fixed32(uint32_t value) {
  repeated_fixed32_.Add(value);
}
inline void TestAllTypes::add_repeated_fixed32(uint32_t value) {
  _internal_add_repeated_fixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypes::_internal_repeated_fixed32() const {
  return repeated_fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypes::repeated_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_fixed32)
  return _internal_repeated_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypes::_internal_mutable_repeated_fixed32() {
  return &repeated_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypes::mutable_repeated_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_fixed32)
  return _internal_mutable_repeated_fixed32();
}

// repeated fixed64 repeated_fixed64 = 38;
inline int TestAllTypes::_internal_repeated_fixed64_size() const {
  return repeated_fixed64_.size();
}
inline int TestAllTypes::repeated_fixed64_size() const {
  return _internal_repeated_fixed64_size();
}
inline void TestAllTypes::clear_repeated_fixed64() {
  repeated_fixed64_.Clear();
}
inline uint64_t TestAllTypes::_internal_repeated_fixed64(int index) const {
  return repeated_fixed64_.Get(index);
}
inline uint64_t TestAllTypes::repeated_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_fixed64)
  return _internal_repeated_fixed64(index);
}
inline void TestAllTypes::set_repeated_fixed64(int index, uint64_t value) {
  repeated_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_fixed64)
}
inline void TestAllTypes::_internal_add_repeated_fixed64(uint64_t value) {
  repeated_fixed64_.Add(value);
}
inline void TestAllTypes::add_repeated_fixed64(uint64_t value) {
  _internal_add_repeated_fixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypes::_internal_repeated_fixed64() const {
  return repeated_fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypes::repeated_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_fixed64)
  return _internal_repeated_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypes::_internal_mutable_repeated_fixed64() {
  return &repeated_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypes::mutable_repeated_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_fixed64)
  return _internal_mutable_repeated_fixed64();
}

// repeated sfixed32 repeated_sfixed32 = 39;
inline int TestAllTypes::_internal_repeated_sfixed32_size() const {
  return repeated_sfixed32_.size();
}
inline int TestAllTypes::repeated_sfixed32_size() const {
  return _internal_repeated_sfixed32_size();
}
inline void TestAllTypes::clear_repeated_sfixed32() {
  repeated_sfixed32_.Clear();
}
inline int32_t TestAllTypes::_internal_repeated_sfixed32(int index) const {
  return repeated_sfixed32_.Get(index);
}
inline int32_t TestAllTypes::repeated_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_sfixed32)
  return _internal_repeated_sfixed32(index);
}
inline void TestAllTypes::set_repeated_sfixed32(int index, int32_t value) {
  repeated_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_sfixed32)
}
inline void TestAllTypes::_internal_add_repeated_sfixed32(int32_t value) {
  repeated_sfixed32_.Add(value);
}
inline void TestAllTypes::add_repeated_sfixed32(int32_t value) {
  _internal_add_repeated_sfixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypes::_internal_repeated_sfixed32() const {
  return repeated_sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypes::repeated_sfixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_sfixed32)
  return _internal_repeated_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypes::_internal_mutable_repeated_sfixed32() {
  return &repeated_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypes::mutable_repeated_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_sfixed32)
  return _internal_mutable_repeated_sfixed32();
}

// repeated sfixed64 repeated_sfixed64 = 40;
inline int TestAllTypes::_internal_repeated_sfixed64_size() const {
  return repeated_sfixed64_.size();
}
inline int TestAllTypes::repeated_sfixed64_size() const {
  return _internal_repeated_sfixed64_size();
}
inline void TestAllTypes::clear_repeated_sfixed64() {
  repeated_sfixed64_.Clear();
}
inline int64_t TestAllTypes::_internal_repeated_sfixed64(int index) const {
  return repeated_sfixed64_.Get(index);
}
inline int64_t TestAllTypes::repeated_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_sfixed64)
  return _internal_repeated_sfixed64(index);
}
inline void TestAllTypes::set_repeated_sfixed64(int index, int64_t value) {
  repeated_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_sfixed64)
}
inline void TestAllTypes::_internal_add_repeated_sfixed64(int64_t value) {
  repeated_sfixed64_.Add(value);
}
inline void TestAllTypes::add_repeated_sfixed64(int64_t value) {
  _internal_add_repeated_sfixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypes::_internal_repeated_sfixed64() const {
  return repeated_sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypes::repeated_sfixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_sfixed64)
  return _internal_repeated_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypes::_internal_mutable_repeated_sfixed64() {
  return &repeated_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypes::mutable_repeated_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_sfixed64)
  return _internal_mutable_repeated_sfixed64();
}

// repeated float repeated_float = 41;
inline int TestAllTypes::_internal_repeated_float_size() const {
  return repeated_float_.size();
}
inline int TestAllTypes::repeated_float_size() const {
  return _internal_repeated_float_size();
}
inline void TestAllTypes::clear_repeated_float() {
  repeated_float_.Clear();
}
inline float TestAllTypes::_internal_repeated_float(int index) const {
  return repeated_float_.Get(index);
}
inline float TestAllTypes::repeated_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_float)
  return _internal_repeated_float(index);
}
inline void TestAllTypes::set_repeated_float(int index, float value) {
  repeated_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_float)
}
inline void TestAllTypes::_internal_add_repeated_float(float value) {
  repeated_float_.Add(value);
}
inline void TestAllTypes::add_repeated_float(float value) {
  _internal_add_repeated_float(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypes::_internal_repeated_float() const {
  return repeated_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypes::repeated_float() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_float)
  return _internal_repeated_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypes::_internal_mutable_repeated_float() {
  return &repeated_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypes::mutable_repeated_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_float)
  return _internal_mutable_repeated_float();
}

// repeated double repeated_double = 42;
inline int TestAllTypes::_internal_repeated_double_size() const {
  return repeated_double_.size();
}
inline int TestAllTypes::repeated_double_size() const {
  return _internal_repeated_double_size();
}
inline void TestAllTypes::clear_repeated_double() {
  repeated_double_.Clear();
}
inline double TestAllTypes::_internal_repeated_double(int index) const {
  return repeated_double_.Get(index);
}
inline double TestAllTypes::repeated_double(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_double)
  return _internal_repeated_double(index);
}
inline void TestAllTypes::set_repeated_double(int index, double value) {
  repeated_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_double)
}
inline void TestAllTypes::_internal_add_repeated_double(double value) {
  repeated_double_.Add(value);
}
inline void TestAllTypes::add_repeated_double(double value) {
  _internal_add_repeated_double(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypes::_internal_repeated_double() const {
  return repeated_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypes::repeated_double() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_double)
  return _internal_repeated_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypes::_internal_mutable_repeated_double() {
  return &repeated_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypes::mutable_repeated_double() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_double)
  return _internal_mutable_repeated_double();
}

// repeated bool repeated_bool = 43;
inline int TestAllTypes::_internal_repeated_bool_size() const {
  return repeated_bool_.size();
}
inline int TestAllTypes::repeated_bool_size() const {
  return _internal_repeated_bool_size();
}
inline void TestAllTypes::clear_repeated_bool() {
  repeated_bool_.Clear();
}
inline bool TestAllTypes::_internal_repeated_bool(int index) const {
  return repeated_bool_.Get(index);
}
inline bool TestAllTypes::repeated_bool(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_bool)
  return _internal_repeated_bool(index);
}
inline void TestAllTypes::set_repeated_bool(int index, bool value) {
  repeated_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_bool)
}
inline void TestAllTypes::_internal_add_repeated_bool(bool value) {
  repeated_bool_.Add(value);
}
inline void TestAllTypes::add_repeated_bool(bool value) {
  _internal_add_repeated_bool(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypes::_internal_repeated_bool() const {
  return repeated_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypes::repeated_bool() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_bool)
  return _internal_repeated_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypes::_internal_mutable_repeated_bool() {
  return &repeated_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypes::mutable_repeated_bool() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_bool)
  return _internal_mutable_repeated_bool();
}

// repeated string repeated_string = 44;
inline int TestAllTypes::_internal_repeated_string_size() const {
  return repeated_string_.size();
}
inline int TestAllTypes::repeated_string_size() const {
  return _internal_repeated_string_size();
}
inline void TestAllTypes::clear_repeated_string() {
  repeated_string_.Clear();
}
inline std::string* TestAllTypes::add_repeated_string() {
  std::string* _s = _internal_add_repeated_string();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestAllTypes.repeated_string)
  return _s;
}
inline const std::string& TestAllTypes::_internal_repeated_string(int index) const {
  return repeated_string_.Get(index);
}
inline const std::string& TestAllTypes::repeated_string(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_string)
  return _internal_repeated_string(index);
}
inline std::string* TestAllTypes::mutable_repeated_string(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeated_string)
  return repeated_string_.Mutable(index);
}
inline void TestAllTypes::set_repeated_string(int index, const std::string& value) {
  repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_string)
}
inline void TestAllTypes::set_repeated_string(int index, std::string&& value) {
  repeated_string_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_string)
}
inline void TestAllTypes::set_repeated_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypes.repeated_string)
}
inline void TestAllTypes::set_repeated_string(int index, const char* value, size_t size) {
  repeated_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypes.repeated_string)
}
inline std::string* TestAllTypes::_internal_add_repeated_string() {
  return repeated_string_.Add();
}
inline void TestAllTypes::add_repeated_string(const std::string& value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_string)
}
inline void TestAllTypes::add_repeated_string(std::string&& value) {
  repeated_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_string)
}
inline void TestAllTypes::add_repeated_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestAllTypes.repeated_string)
}
inline void TestAllTypes::add_repeated_string(const char* value, size_t size) {
  repeated_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestAllTypes.repeated_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypes::repeated_string() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_string)
  return repeated_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypes::mutable_repeated_string() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_string)
  return &repeated_string_;
}

// repeated bytes repeated_bytes = 45;
inline int TestAllTypes::_internal_repeated_bytes_size() const {
  return repeated_bytes_.size();
}
inline int TestAllTypes::repeated_bytes_size() const {
  return _internal_repeated_bytes_size();
}
inline void TestAllTypes::clear_repeated_bytes() {
  repeated_bytes_.Clear();
}
inline std::string* TestAllTypes::add_repeated_bytes() {
  std::string* _s = _internal_add_repeated_bytes();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestAllTypes.repeated_bytes)
  return _s;
}
inline const std::string& TestAllTypes::_internal_repeated_bytes(int index) const {
  return repeated_bytes_.Get(index);
}
inline const std::string& TestAllTypes::repeated_bytes(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_bytes)
  return _internal_repeated_bytes(index);
}
inline std::string* TestAllTypes::mutable_repeated_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeated_bytes)
  return repeated_bytes_.Mutable(index);
}
inline void TestAllTypes::set_repeated_bytes(int index, const std::string& value) {
  repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_bytes)
}
inline void TestAllTypes::set_repeated_bytes(int index, std::string&& value) {
  repeated_bytes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_bytes)
}
inline void TestAllTypes::set_repeated_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypes.repeated_bytes)
}
inline void TestAllTypes::set_repeated_bytes(int index, const void* value, size_t size) {
  repeated_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypes.repeated_bytes)
}
inline std::string* TestAllTypes::_internal_add_repeated_bytes() {
  return repeated_bytes_.Add();
}
inline void TestAllTypes::add_repeated_bytes(const std::string& value) {
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_bytes)
}
inline void TestAllTypes::add_repeated_bytes(std::string&& value) {
  repeated_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_bytes)
}
inline void TestAllTypes::add_repeated_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestAllTypes.repeated_bytes)
}
inline void TestAllTypes::add_repeated_bytes(const void* value, size_t size) {
  repeated_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestAllTypes.repeated_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypes::repeated_bytes() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_bytes)
  return repeated_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypes::mutable_repeated_bytes() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_bytes)
  return &repeated_bytes_;
}

// repeated group RepeatedGroup = 46 { ... };
inline int TestAllTypes::_internal_repeatedgroup_size() const {
  return repeatedgroup_.size();
}
inline int TestAllTypes::repeatedgroup_size() const {
  return _internal_repeatedgroup_size();
}
inline void TestAllTypes::clear_repeatedgroup() {
  repeatedgroup_.Clear();
}
inline ::protobuf_unittest::TestAllTypes_RepeatedGroup* TestAllTypes::mutable_repeatedgroup(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeatedgroup)
  return repeatedgroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_RepeatedGroup >*
TestAllTypes::mutable_repeatedgroup() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeatedgroup)
  return &repeatedgroup_;
}
inline const ::protobuf_unittest::TestAllTypes_RepeatedGroup& TestAllTypes::_internal_repeatedgroup(int index) const {
  return repeatedgroup_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes_RepeatedGroup& TestAllTypes::repeatedgroup(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeatedgroup)
  return _internal_repeatedgroup(index);
}
inline ::protobuf_unittest::TestAllTypes_RepeatedGroup* TestAllTypes::_internal_add_repeatedgroup() {
  return repeatedgroup_.Add();
}
inline ::protobuf_unittest::TestAllTypes_RepeatedGroup* TestAllTypes::add_repeatedgroup() {
  ::protobuf_unittest::TestAllTypes_RepeatedGroup* _add = _internal_add_repeatedgroup();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeatedgroup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_RepeatedGroup >&
TestAllTypes::repeatedgroup() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeatedgroup)
  return repeatedgroup_;
}

// repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
inline int TestAllTypes::_internal_repeated_nested_message_size() const {
  return repeated_nested_message_.size();
}
inline int TestAllTypes::repeated_nested_message_size() const {
  return _internal_repeated_nested_message_size();
}
inline void TestAllTypes::clear_repeated_nested_message() {
  repeated_nested_message_.Clear();
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::mutable_repeated_nested_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeated_nested_message)
  return repeated_nested_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage >*
TestAllTypes::mutable_repeated_nested_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_nested_message)
  return &repeated_nested_message_;
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::_internal_repeated_nested_message(int index) const {
  return repeated_nested_message_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::repeated_nested_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_nested_message)
  return _internal_repeated_nested_message(index);
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::_internal_add_repeated_nested_message() {
  return repeated_nested_message_.Add();
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::add_repeated_nested_message() {
  ::protobuf_unittest::TestAllTypes_NestedMessage* _add = _internal_add_repeated_nested_message();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_nested_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage >&
TestAllTypes::repeated_nested_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_nested_message)
  return repeated_nested_message_;
}

// repeated .protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
inline int TestAllTypes::_internal_repeated_foreign_message_size() const {
  return repeated_foreign_message_.size();
}
inline int TestAllTypes::repeated_foreign_message_size() const {
  return _internal_repeated_foreign_message_size();
}
inline void TestAllTypes::clear_repeated_foreign_message() {
  repeated_foreign_message_.Clear();
}
inline ::protobuf_unittest::ForeignMessage* TestAllTypes::mutable_repeated_foreign_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeated_foreign_message)
  return repeated_foreign_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >*
TestAllTypes::mutable_repeated_foreign_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_foreign_message)
  return &repeated_foreign_message_;
}
inline const ::protobuf_unittest::ForeignMessage& TestAllTypes::_internal_repeated_foreign_message(int index) const {
  return repeated_foreign_message_.Get(index);
}
inline const ::protobuf_unittest::ForeignMessage& TestAllTypes::repeated_foreign_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_foreign_message)
  return _internal_repeated_foreign_message(index);
}
inline ::protobuf_unittest::ForeignMessage* TestAllTypes::_internal_add_repeated_foreign_message() {
  return repeated_foreign_message_.Add();
}
inline ::protobuf_unittest::ForeignMessage* TestAllTypes::add_repeated_foreign_message() {
  ::protobuf_unittest::ForeignMessage* _add = _internal_add_repeated_foreign_message();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_foreign_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >&
TestAllTypes::repeated_foreign_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_foreign_message)
  return repeated_foreign_message_;
}

// repeated .protobuf_unittest_import.ImportMessage repeated_import_message = 50;
inline int TestAllTypes::_internal_repeated_import_message_size() const {
  return repeated_import_message_.size();
}
inline int TestAllTypes::repeated_import_message_size() const {
  return _internal_repeated_import_message_size();
}
inline ::protobuf_unittest_import::ImportMessage* TestAllTypes::mutable_repeated_import_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeated_import_message)
  return repeated_import_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessage >*
TestAllTypes::mutable_repeated_import_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_import_message)
  return &repeated_import_message_;
}
inline const ::protobuf_unittest_import::ImportMessage& TestAllTypes::_internal_repeated_import_message(int index) const {
  return repeated_import_message_.Get(index);
}
inline const ::protobuf_unittest_import::ImportMessage& TestAllTypes::repeated_import_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_import_message)
  return _internal_repeated_import_message(index);
}
inline ::protobuf_unittest_import::ImportMessage* TestAllTypes::_internal_add_repeated_import_message() {
  return repeated_import_message_.Add();
}
inline ::protobuf_unittest_import::ImportMessage* TestAllTypes::add_repeated_import_message() {
  ::protobuf_unittest_import::ImportMessage* _add = _internal_add_repeated_import_message();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_import_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessage >&
TestAllTypes::repeated_import_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_import_message)
  return repeated_import_message_;
}

// repeated .protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
inline int TestAllTypes::_internal_repeated_nested_enum_size() const {
  return repeated_nested_enum_.size();
}
inline int TestAllTypes::repeated_nested_enum_size() const {
  return _internal_repeated_nested_enum_size();
}
inline void TestAllTypes::clear_repeated_nested_enum() {
  repeated_nested_enum_.Clear();
}
inline ::protobuf_unittest::TestAllTypes_NestedEnum TestAllTypes::_internal_repeated_nested_enum(int index) const {
  return static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(repeated_nested_enum_.Get(index));
}
inline ::protobuf_unittest::TestAllTypes_NestedEnum TestAllTypes::repeated_nested_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_nested_enum)
  return _internal_repeated_nested_enum(index);
}
inline void TestAllTypes::set_repeated_nested_enum(int index, ::protobuf_unittest::TestAllTypes_NestedEnum value) {
  assert(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(value));
  repeated_nested_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_nested_enum)
}
inline void TestAllTypes::_internal_add_repeated_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value) {
  assert(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(value));
  repeated_nested_enum_.Add(value);
}
inline void TestAllTypes::add_repeated_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value) {
  _internal_add_repeated_nested_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_nested_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypes::repeated_nested_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_nested_enum)
  return repeated_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypes::_internal_mutable_repeated_nested_enum() {
  return &repeated_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypes::mutable_repeated_nested_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_nested_enum)
  return _internal_mutable_repeated_nested_enum();
}

// repeated .protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
inline int TestAllTypes::_internal_repeated_foreign_enum_size() const {
  return repeated_foreign_enum_.size();
}
inline int TestAllTypes::repeated_foreign_enum_size() const {
  return _internal_repeated_foreign_enum_size();
}
inline void TestAllTypes::clear_repeated_foreign_enum() {
  repeated_foreign_enum_.Clear();
}
inline ::protobuf_unittest::ForeignEnum TestAllTypes::_internal_repeated_foreign_enum(int index) const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(repeated_foreign_enum_.Get(index));
}
inline ::protobuf_unittest::ForeignEnum TestAllTypes::repeated_foreign_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_foreign_enum)
  return _internal_repeated_foreign_enum(index);
}
inline void TestAllTypes::set_repeated_foreign_enum(int index, ::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  repeated_foreign_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_foreign_enum)
}
inline void TestAllTypes::_internal_add_repeated_foreign_enum(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  repeated_foreign_enum_.Add(value);
}
inline void TestAllTypes::add_repeated_foreign_enum(::protobuf_unittest::ForeignEnum value) {
  _internal_add_repeated_foreign_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_foreign_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypes::repeated_foreign_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_foreign_enum)
  return repeated_foreign_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypes::_internal_mutable_repeated_foreign_enum() {
  return &repeated_foreign_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypes::mutable_repeated_foreign_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_foreign_enum)
  return _internal_mutable_repeated_foreign_enum();
}

// repeated .protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
inline int TestAllTypes::_internal_repeated_import_enum_size() const {
  return repeated_import_enum_.size();
}
inline int TestAllTypes::repeated_import_enum_size() const {
  return _internal_repeated_import_enum_size();
}
inline void TestAllTypes::clear_repeated_import_enum() {
  repeated_import_enum_.Clear();
}
inline ::protobuf_unittest_import::ImportEnum TestAllTypes::_internal_repeated_import_enum(int index) const {
  return static_cast< ::protobuf_unittest_import::ImportEnum >(repeated_import_enum_.Get(index));
}
inline ::protobuf_unittest_import::ImportEnum TestAllTypes::repeated_import_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_import_enum)
  return _internal_repeated_import_enum(index);
}
inline void TestAllTypes::set_repeated_import_enum(int index, ::protobuf_unittest_import::ImportEnum value) {
  assert(::protobuf_unittest_import::ImportEnum_IsValid(value));
  repeated_import_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_import_enum)
}
inline void TestAllTypes::_internal_add_repeated_import_enum(::protobuf_unittest_import::ImportEnum value) {
  assert(::protobuf_unittest_import::ImportEnum_IsValid(value));
  repeated_import_enum_.Add(value);
}
inline void TestAllTypes::add_repeated_import_enum(::protobuf_unittest_import::ImportEnum value) {
  _internal_add_repeated_import_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_import_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypes::repeated_import_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_import_enum)
  return repeated_import_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypes::_internal_mutable_repeated_import_enum() {
  return &repeated_import_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypes::mutable_repeated_import_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_import_enum)
  return _internal_mutable_repeated_import_enum();
}

// repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
inline int TestAllTypes::_internal_repeated_string_piece_size() const {
  return repeated_string_piece_.size();
}
inline int TestAllTypes::repeated_string_piece_size() const {
  return _internal_repeated_string_piece_size();
}
inline void TestAllTypes::clear_repeated_string_piece() {
  repeated_string_piece_.Clear();
}
inline std::string* TestAllTypes::add_repeated_string_piece() {
  std::string* _s = _internal_add_repeated_string_piece();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestAllTypes.repeated_string_piece)
  return _s;
}
inline const std::string& TestAllTypes::_internal_repeated_string_piece(int index) const {
  return repeated_string_piece_.Get(index);
}
inline const std::string& TestAllTypes::repeated_string_piece(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_string_piece)
  return _internal_repeated_string_piece(index);
}
inline std::string* TestAllTypes::mutable_repeated_string_piece(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeated_string_piece)
  return repeated_string_piece_.Mutable(index);
}
inline void TestAllTypes::set_repeated_string_piece(int index, const std::string& value) {
  repeated_string_piece_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_string_piece)
}
inline void TestAllTypes::set_repeated_string_piece(int index, std::string&& value) {
  repeated_string_piece_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_string_piece)
}
inline void TestAllTypes::set_repeated_string_piece(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_piece_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypes.repeated_string_piece)
}
inline void TestAllTypes::set_repeated_string_piece(int index, const char* value, size_t size) {
  repeated_string_piece_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypes.repeated_string_piece)
}
inline std::string* TestAllTypes::_internal_add_repeated_string_piece() {
  return repeated_string_piece_.Add();
}
inline void TestAllTypes::add_repeated_string_piece(const std::string& value) {
  repeated_string_piece_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_string_piece)
}
inline void TestAllTypes::add_repeated_string_piece(std::string&& value) {
  repeated_string_piece_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_string_piece)
}
inline void TestAllTypes::add_repeated_string_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_piece_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestAllTypes.repeated_string_piece)
}
inline void TestAllTypes::add_repeated_string_piece(const char* value, size_t size) {
  repeated_string_piece_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestAllTypes.repeated_string_piece)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypes::repeated_string_piece() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_string_piece)
  return repeated_string_piece_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypes::mutable_repeated_string_piece() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_string_piece)
  return &repeated_string_piece_;
}

// repeated string repeated_cord = 55 [ctype = CORD];
inline int TestAllTypes::_internal_repeated_cord_size() const {
  return repeated_cord_.size();
}
inline int TestAllTypes::repeated_cord_size() const {
  return _internal_repeated_cord_size();
}
inline void TestAllTypes::clear_repeated_cord() {
  repeated_cord_.Clear();
}
inline std::string* TestAllTypes::add_repeated_cord() {
  std::string* _s = _internal_add_repeated_cord();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestAllTypes.repeated_cord)
  return _s;
}
inline const std::string& TestAllTypes::_internal_repeated_cord(int index) const {
  return repeated_cord_.Get(index);
}
inline const std::string& TestAllTypes::repeated_cord(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_cord)
  return _internal_repeated_cord(index);
}
inline std::string* TestAllTypes::mutable_repeated_cord(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeated_cord)
  return repeated_cord_.Mutable(index);
}
inline void TestAllTypes::set_repeated_cord(int index, const std::string& value) {
  repeated_cord_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_cord)
}
inline void TestAllTypes::set_repeated_cord(int index, std::string&& value) {
  repeated_cord_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.repeated_cord)
}
inline void TestAllTypes::set_repeated_cord(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_cord_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypes.repeated_cord)
}
inline void TestAllTypes::set_repeated_cord(int index, const char* value, size_t size) {
  repeated_cord_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypes.repeated_cord)
}
inline std::string* TestAllTypes::_internal_add_repeated_cord() {
  return repeated_cord_.Add();
}
inline void TestAllTypes::add_repeated_cord(const std::string& value) {
  repeated_cord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_cord)
}
inline void TestAllTypes::add_repeated_cord(std::string&& value) {
  repeated_cord_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_cord)
}
inline void TestAllTypes::add_repeated_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_cord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestAllTypes.repeated_cord)
}
inline void TestAllTypes::add_repeated_cord(const char* value, size_t size) {
  repeated_cord_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestAllTypes.repeated_cord)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypes::repeated_cord() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_cord)
  return repeated_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypes::mutable_repeated_cord() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_cord)
  return &repeated_cord_;
}

// repeated .protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57 [lazy = true];
inline int TestAllTypes::_internal_repeated_lazy_message_size() const {
  return repeated_lazy_message_.size();
}
inline int TestAllTypes::repeated_lazy_message_size() const {
  return _internal_repeated_lazy_message_size();
}
inline void TestAllTypes::clear_repeated_lazy_message() {
  repeated_lazy_message_.Clear();
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::mutable_repeated_lazy_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.repeated_lazy_message)
  return repeated_lazy_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage >*
TestAllTypes::mutable_repeated_lazy_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypes.repeated_lazy_message)
  return &repeated_lazy_message_;
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::_internal_repeated_lazy_message(int index) const {
  return repeated_lazy_message_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::repeated_lazy_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.repeated_lazy_message)
  return _internal_repeated_lazy_message(index);
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::_internal_add_repeated_lazy_message() {
  return repeated_lazy_message_.Add();
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::add_repeated_lazy_message() {
  ::protobuf_unittest::TestAllTypes_NestedMessage* _add = _internal_add_repeated_lazy_message();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypes.repeated_lazy_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes_NestedMessage >&
TestAllTypes::repeated_lazy_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypes.repeated_lazy_message)
  return repeated_lazy_message_;
}

// optional int32 default_int32 = 61 [default = 41];
inline bool TestAllTypes::_internal_has_default_int32() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_int32() const {
  return _internal_has_default_int32();
}
inline void TestAllTypes::clear_default_int32() {
  default_int32_ = 41;
  _has_bits_[0] &= ~0x80000000u;
}
inline int32_t TestAllTypes::_internal_default_int32() const {
  return default_int32_;
}
inline int32_t TestAllTypes::default_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_int32)
  return _internal_default_int32();
}
inline void TestAllTypes::_internal_set_default_int32(int32_t value) {
  _has_bits_[0] |= 0x80000000u;
  default_int32_ = value;
}
inline void TestAllTypes::set_default_int32(int32_t value) {
  _internal_set_default_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_int32)
}

// optional int64 default_int64 = 62 [default = 42];
inline bool TestAllTypes::_internal_has_default_int64() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_int64() const {
  return _internal_has_default_int64();
}
inline void TestAllTypes::clear_default_int64() {
  default_int64_ = int64_t{42};
  _has_bits_[1] &= ~0x00000001u;
}
inline int64_t TestAllTypes::_internal_default_int64() const {
  return default_int64_;
}
inline int64_t TestAllTypes::default_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_int64)
  return _internal_default_int64();
}
inline void TestAllTypes::_internal_set_default_int64(int64_t value) {
  _has_bits_[1] |= 0x00000001u;
  default_int64_ = value;
}
inline void TestAllTypes::set_default_int64(int64_t value) {
  _internal_set_default_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_int64)
}

// optional uint32 default_uint32 = 63 [default = 43];
inline bool TestAllTypes::_internal_has_default_uint32() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_uint32() const {
  return _internal_has_default_uint32();
}
inline void TestAllTypes::clear_default_uint32() {
  default_uint32_ = 43u;
  _has_bits_[1] &= ~0x00000004u;
}
inline uint32_t TestAllTypes::_internal_default_uint32() const {
  return default_uint32_;
}
inline uint32_t TestAllTypes::default_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_uint32)
  return _internal_default_uint32();
}
inline void TestAllTypes::_internal_set_default_uint32(uint32_t value) {
  _has_bits_[1] |= 0x00000004u;
  default_uint32_ = value;
}
inline void TestAllTypes::set_default_uint32(uint32_t value) {
  _internal_set_default_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_uint32)
}

// optional uint64 default_uint64 = 64 [default = 44];
inline bool TestAllTypes::_internal_has_default_uint64() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_uint64() const {
  return _internal_has_default_uint64();
}
inline void TestAllTypes::clear_default_uint64() {
  default_uint64_ = uint64_t{44u};
  _has_bits_[1] &= ~0x00000002u;
}
inline uint64_t TestAllTypes::_internal_default_uint64() const {
  return default_uint64_;
}
inline uint64_t TestAllTypes::default_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_uint64)
  return _internal_default_uint64();
}
inline void TestAllTypes::_internal_set_default_uint64(uint64_t value) {
  _has_bits_[1] |= 0x00000002u;
  default_uint64_ = value;
}
inline void TestAllTypes::set_default_uint64(uint64_t value) {
  _internal_set_default_uint64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_uint64)
}

// optional sint32 default_sint32 = 65 [default = -45];
inline bool TestAllTypes::_internal_has_default_sint32() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_sint32() const {
  return _internal_has_default_sint32();
}
inline void TestAllTypes::clear_default_sint32() {
  default_sint32_ = -45;
  _has_bits_[1] &= ~0x00000008u;
}
inline int32_t TestAllTypes::_internal_default_sint32() const {
  return default_sint32_;
}
inline int32_t TestAllTypes::default_sint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_sint32)
  return _internal_default_sint32();
}
inline void TestAllTypes::_internal_set_default_sint32(int32_t value) {
  _has_bits_[1] |= 0x00000008u;
  default_sint32_ = value;
}
inline void TestAllTypes::set_default_sint32(int32_t value) {
  _internal_set_default_sint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_sint32)
}

// optional sint64 default_sint64 = 66 [default = 46];
inline bool TestAllTypes::_internal_has_default_sint64() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_sint64() const {
  return _internal_has_default_sint64();
}
inline void TestAllTypes::clear_default_sint64() {
  default_sint64_ = int64_t{46};
  _has_bits_[1] &= ~0x00000010u;
}
inline int64_t TestAllTypes::_internal_default_sint64() const {
  return default_sint64_;
}
inline int64_t TestAllTypes::default_sint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_sint64)
  return _internal_default_sint64();
}
inline void TestAllTypes::_internal_set_default_sint64(int64_t value) {
  _has_bits_[1] |= 0x00000010u;
  default_sint64_ = value;
}
inline void TestAllTypes::set_default_sint64(int64_t value) {
  _internal_set_default_sint64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_sint64)
}

// optional fixed32 default_fixed32 = 67 [default = 47];
inline bool TestAllTypes::_internal_has_default_fixed32() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_fixed32() const {
  return _internal_has_default_fixed32();
}
inline void TestAllTypes::clear_default_fixed32() {
  default_fixed32_ = 47u;
  _has_bits_[1] &= ~0x00000040u;
}
inline uint32_t TestAllTypes::_internal_default_fixed32() const {
  return default_fixed32_;
}
inline uint32_t TestAllTypes::default_fixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_fixed32)
  return _internal_default_fixed32();
}
inline void TestAllTypes::_internal_set_default_fixed32(uint32_t value) {
  _has_bits_[1] |= 0x00000040u;
  default_fixed32_ = value;
}
inline void TestAllTypes::set_default_fixed32(uint32_t value) {
  _internal_set_default_fixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_fixed32)
}

// optional fixed64 default_fixed64 = 68 [default = 48];
inline bool TestAllTypes::_internal_has_default_fixed64() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_fixed64() const {
  return _internal_has_default_fixed64();
}
inline void TestAllTypes::clear_default_fixed64() {
  default_fixed64_ = uint64_t{48u};
  _has_bits_[1] &= ~0x00000020u;
}
inline uint64_t TestAllTypes::_internal_default_fixed64() const {
  return default_fixed64_;
}
inline uint64_t TestAllTypes::default_fixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_fixed64)
  return _internal_default_fixed64();
}
inline void TestAllTypes::_internal_set_default_fixed64(uint64_t value) {
  _has_bits_[1] |= 0x00000020u;
  default_fixed64_ = value;
}
inline void TestAllTypes::set_default_fixed64(uint64_t value) {
  _internal_set_default_fixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_fixed64)
}

// optional sfixed32 default_sfixed32 = 69 [default = 49];
inline bool TestAllTypes::_internal_has_default_sfixed32() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_sfixed32() const {
  return _internal_has_default_sfixed32();
}
inline void TestAllTypes::clear_default_sfixed32() {
  default_sfixed32_ = 49;
  _has_bits_[1] &= ~0x00000080u;
}
inline int32_t TestAllTypes::_internal_default_sfixed32() const {
  return default_sfixed32_;
}
inline int32_t TestAllTypes::default_sfixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_sfixed32)
  return _internal_default_sfixed32();
}
inline void TestAllTypes::_internal_set_default_sfixed32(int32_t value) {
  _has_bits_[1] |= 0x00000080u;
  default_sfixed32_ = value;
}
inline void TestAllTypes::set_default_sfixed32(int32_t value) {
  _internal_set_default_sfixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_sfixed32)
}

// optional sfixed64 default_sfixed64 = 70 [default = -50];
inline bool TestAllTypes::_internal_has_default_sfixed64() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_sfixed64() const {
  return _internal_has_default_sfixed64();
}
inline void TestAllTypes::clear_default_sfixed64() {
  default_sfixed64_ = int64_t{-50};
  _has_bits_[1] &= ~0x00000100u;
}
inline int64_t TestAllTypes::_internal_default_sfixed64() const {
  return default_sfixed64_;
}
inline int64_t TestAllTypes::default_sfixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_sfixed64)
  return _internal_default_sfixed64();
}
inline void TestAllTypes::_internal_set_default_sfixed64(int64_t value) {
  _has_bits_[1] |= 0x00000100u;
  default_sfixed64_ = value;
}
inline void TestAllTypes::set_default_sfixed64(int64_t value) {
  _internal_set_default_sfixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_sfixed64)
}

// optional float default_float = 71 [default = 51.5];
inline bool TestAllTypes::_internal_has_default_float() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_float() const {
  return _internal_has_default_float();
}
inline void TestAllTypes::clear_default_float() {
  default_float_ = 51.5f;
  _has_bits_[1] &= ~0x00000400u;
}
inline float TestAllTypes::_internal_default_float() const {
  return default_float_;
}
inline float TestAllTypes::default_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_float)
  return _internal_default_float();
}
inline void TestAllTypes::_internal_set_default_float(float value) {
  _has_bits_[1] |= 0x00000400u;
  default_float_ = value;
}
inline void TestAllTypes::set_default_float(float value) {
  _internal_set_default_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_float)
}

// optional double default_double = 72 [default = 52000];
inline bool TestAllTypes::_internal_has_default_double() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_double() const {
  return _internal_has_default_double();
}
inline void TestAllTypes::clear_default_double() {
  default_double_ = 52000;
  _has_bits_[1] &= ~0x00000200u;
}
inline double TestAllTypes::_internal_default_double() const {
  return default_double_;
}
inline double TestAllTypes::default_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_double)
  return _internal_default_double();
}
inline void TestAllTypes::_internal_set_default_double(double value) {
  _has_bits_[1] |= 0x00000200u;
  default_double_ = value;
}
inline void TestAllTypes::set_default_double(double value) {
  _internal_set_default_double(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_double)
}

// optional bool default_bool = 73 [default = true];
inline bool TestAllTypes::_internal_has_default_bool() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_bool() const {
  return _internal_has_default_bool();
}
inline void TestAllTypes::clear_default_bool() {
  default_bool_ = true;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool TestAllTypes::_internal_default_bool() const {
  return default_bool_;
}
inline bool TestAllTypes::default_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_bool)
  return _internal_default_bool();
}
inline void TestAllTypes::_internal_set_default_bool(bool value) {
  _has_bits_[1] |= 0x00000800u;
  default_bool_ = value;
}
inline void TestAllTypes::set_default_bool(bool value) {
  _internal_set_default_bool(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_bool)
}

// optional string default_string = 74 [default = "hello"];
inline bool TestAllTypes::_internal_has_default_string() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_string() const {
  return _internal_has_default_string();
}
inline void TestAllTypes::clear_default_string() {
  default_string_.ClearToDefault(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TestAllTypes::default_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_string)
  if (default_string_.IsDefault()) return _i_give_permission_to_break_this_code_default_default_string_.get();
  return _internal_default_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypes::set_default_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 default_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_string)
}
inline std::string* TestAllTypes::mutable_default_string() {
  std::string* _s = _internal_mutable_default_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.default_string)
  return _s;
}
inline const std::string& TestAllTypes::_internal_default_string() const {
  return default_string_.Get();
}
inline void TestAllTypes::_internal_set_default_string(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  default_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_default_string() {
  _has_bits_[0] |= 0x00000010u;
  return default_string_.Mutable(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_, GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_default_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.default_string)
  if (!_internal_has_default_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = default_string_.Release();
  return p;
}
inline void TestAllTypes::set_allocated_default_string(std::string* default_string) {
  if (default_string != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  default_string_.SetAllocated(default_string, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.default_string)
}

// optional bytes default_bytes = 75 [default = "world"];
inline bool TestAllTypes::_internal_has_default_bytes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_bytes() const {
  return _internal_has_default_bytes();
}
inline void TestAllTypes::clear_default_bytes() {
  default_bytes_.ClearToDefault(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TestAllTypes::default_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_bytes)
  if (default_bytes_.IsDefault()) return _i_give_permission_to_break_this_code_default_default_bytes_.get();
  return _internal_default_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypes::set_default_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 default_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_bytes)
}
inline std::string* TestAllTypes::mutable_default_bytes() {
  std::string* _s = _internal_mutable_default_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.default_bytes)
  return _s;
}
inline const std::string& TestAllTypes::_internal_default_bytes() const {
  return default_bytes_.Get();
}
inline void TestAllTypes::_internal_set_default_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  default_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_default_bytes() {
  _has_bits_[0] |= 0x00000020u;
  return default_bytes_.Mutable(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_bytes_, GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_default_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.default_bytes)
  if (!_internal_has_default_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = default_bytes_.Release();
  return p;
}
inline void TestAllTypes::set_allocated_default_bytes(std::string* default_bytes) {
  if (default_bytes != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  default_bytes_.SetAllocated(default_bytes, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.default_bytes)
}

// optional .protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
inline bool TestAllTypes::_internal_has_default_nested_enum() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_nested_enum() const {
  return _internal_has_default_nested_enum();
}
inline void TestAllTypes::clear_default_nested_enum() {
  default_nested_enum_ = 2;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::protobuf_unittest::TestAllTypes_NestedEnum TestAllTypes::_internal_default_nested_enum() const {
  return static_cast< ::protobuf_unittest::TestAllTypes_NestedEnum >(default_nested_enum_);
}
inline ::protobuf_unittest::TestAllTypes_NestedEnum TestAllTypes::default_nested_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_nested_enum)
  return _internal_default_nested_enum();
}
inline void TestAllTypes::_internal_set_default_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value) {
  assert(::protobuf_unittest::TestAllTypes_NestedEnum_IsValid(value));
  _has_bits_[1] |= 0x00001000u;
  default_nested_enum_ = value;
}
inline void TestAllTypes::set_default_nested_enum(::protobuf_unittest::TestAllTypes_NestedEnum value) {
  _internal_set_default_nested_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_nested_enum)
}

// optional .protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
inline bool TestAllTypes::_internal_has_default_foreign_enum() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_foreign_enum() const {
  return _internal_has_default_foreign_enum();
}
inline void TestAllTypes::clear_default_foreign_enum() {
  default_foreign_enum_ = 5;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::protobuf_unittest::ForeignEnum TestAllTypes::_internal_default_foreign_enum() const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(default_foreign_enum_);
}
inline ::protobuf_unittest::ForeignEnum TestAllTypes::default_foreign_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_foreign_enum)
  return _internal_default_foreign_enum();
}
inline void TestAllTypes::_internal_set_default_foreign_enum(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  _has_bits_[1] |= 0x00002000u;
  default_foreign_enum_ = value;
}
inline void TestAllTypes::set_default_foreign_enum(::protobuf_unittest::ForeignEnum value) {
  _internal_set_default_foreign_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_foreign_enum)
}

// optional .protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
inline bool TestAllTypes::_internal_has_default_import_enum() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_import_enum() const {
  return _internal_has_default_import_enum();
}
inline void TestAllTypes::clear_default_import_enum() {
  default_import_enum_ = 8;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::protobuf_unittest_import::ImportEnum TestAllTypes::_internal_default_import_enum() const {
  return static_cast< ::protobuf_unittest_import::ImportEnum >(default_import_enum_);
}
inline ::protobuf_unittest_import::ImportEnum TestAllTypes::default_import_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_import_enum)
  return _internal_default_import_enum();
}
inline void TestAllTypes::_internal_set_default_import_enum(::protobuf_unittest_import::ImportEnum value) {
  assert(::protobuf_unittest_import::ImportEnum_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  default_import_enum_ = value;
}
inline void TestAllTypes::set_default_import_enum(::protobuf_unittest_import::ImportEnum value) {
  _internal_set_default_import_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_import_enum)
}

// optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
inline bool TestAllTypes::_internal_has_default_string_piece() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_string_piece() const {
  return _internal_has_default_string_piece();
}
inline void TestAllTypes::clear_default_string_piece() {
  default_string_piece_.ClearToDefault(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TestAllTypes::default_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_string_piece)
  if (default_string_piece_.IsDefault()) return _i_give_permission_to_break_this_code_default_default_string_piece_.get();
  return _internal_default_string_piece();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypes::set_default_string_piece(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 default_string_piece_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_string_piece)
}
inline std::string* TestAllTypes::mutable_default_string_piece() {
  std::string* _s = _internal_mutable_default_string_piece();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.default_string_piece)
  return _s;
}
inline const std::string& TestAllTypes::_internal_default_string_piece() const {
  return default_string_piece_.Get();
}
inline void TestAllTypes::_internal_set_default_string_piece(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  default_string_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_default_string_piece() {
  _has_bits_[0] |= 0x00000040u;
  return default_string_piece_.Mutable(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_string_piece_, GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_default_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.default_string_piece)
  if (!_internal_has_default_string_piece()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = default_string_piece_.Release();
  return p;
}
inline void TestAllTypes::set_allocated_default_string_piece(std::string* default_string_piece) {
  if (default_string_piece != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  default_string_piece_.SetAllocated(default_string_piece, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.default_string_piece)
}

// optional string default_cord = 85 [default = "123", ctype = CORD];
inline bool TestAllTypes::_internal_has_default_cord() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TestAllTypes::has_default_cord() const {
  return _internal_has_default_cord();
}
inline void TestAllTypes::clear_default_cord() {
  default_cord_.ClearToDefault(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& TestAllTypes::default_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.default_cord)
  if (default_cord_.IsDefault()) return _i_give_permission_to_break_this_code_default_default_cord_.get();
  return _internal_default_cord();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypes::set_default_cord(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 default_cord_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.default_cord)
}
inline std::string* TestAllTypes::mutable_default_cord() {
  std::string* _s = _internal_mutable_default_cord();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.default_cord)
  return _s;
}
inline const std::string& TestAllTypes::_internal_default_cord() const {
  return default_cord_.Get();
}
inline void TestAllTypes::_internal_set_default_cord(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  default_cord_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_default_cord() {
  _has_bits_[0] |= 0x00000080u;
  return default_cord_.Mutable(::protobuf_unittest::TestAllTypes::_i_give_permission_to_break_this_code_default_default_cord_, GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_default_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.default_cord)
  if (!_internal_has_default_cord()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = default_cord_.Release();
  return p;
}
inline void TestAllTypes::set_allocated_default_cord(std::string* default_cord) {
  if (default_cord != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  default_cord_.SetAllocated(default_cord, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.default_cord)
}

// uint32 oneof_uint32 = 111;
inline bool TestAllTypes::_internal_has_oneof_uint32() const {
  return oneof_field_case() == kOneofUint32;
}
inline bool TestAllTypes::has_oneof_uint32() const {
  return _internal_has_oneof_uint32();
}
inline void TestAllTypes::set_has_oneof_uint32() {
  _oneof_case_[0] = kOneofUint32;
}
inline void TestAllTypes::clear_oneof_uint32() {
  if (_internal_has_oneof_uint32()) {
    oneof_field_.oneof_uint32_ = 0u;
    clear_has_oneof_field();
  }
}
inline uint32_t TestAllTypes::_internal_oneof_uint32() const {
  if (_internal_has_oneof_uint32()) {
    return oneof_field_.oneof_uint32_;
  }
  return 0u;
}
inline void TestAllTypes::_internal_set_oneof_uint32(uint32_t value) {
  if (!_internal_has_oneof_uint32()) {
    clear_oneof_field();
    set_has_oneof_uint32();
  }
  oneof_field_.oneof_uint32_ = value;
}
inline uint32_t TestAllTypes::oneof_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.oneof_uint32)
  return _internal_oneof_uint32();
}
inline void TestAllTypes::set_oneof_uint32(uint32_t value) {
  _internal_set_oneof_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.oneof_uint32)
}

// .protobuf_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
inline bool TestAllTypes::_internal_has_oneof_nested_message() const {
  return oneof_field_case() == kOneofNestedMessage;
}
inline bool TestAllTypes::has_oneof_nested_message() const {
  return _internal_has_oneof_nested_message();
}
inline void TestAllTypes::set_has_oneof_nested_message() {
  _oneof_case_[0] = kOneofNestedMessage;
}
inline void TestAllTypes::clear_oneof_nested_message() {
  if (_internal_has_oneof_nested_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oneof_field_.oneof_nested_message_;
    }
    clear_has_oneof_field();
  }
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::release_oneof_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.oneof_nested_message)
  if (_internal_has_oneof_nested_message()) {
    clear_has_oneof_field();
    ::protobuf_unittest::TestAllTypes_NestedMessage* temp = oneof_field_.oneof_nested_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oneof_field_.oneof_nested_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::_internal_oneof_nested_message() const {
  return _internal_has_oneof_nested_message()
      ? *oneof_field_.oneof_nested_message_
      : reinterpret_cast< ::protobuf_unittest::TestAllTypes_NestedMessage&>(::protobuf_unittest::_TestAllTypes_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestAllTypes::oneof_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.oneof_nested_message)
  return _internal_oneof_nested_message();
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::unsafe_arena_release_oneof_nested_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_unittest.TestAllTypes.oneof_nested_message)
  if (_internal_has_oneof_nested_message()) {
    clear_has_oneof_field();
    ::protobuf_unittest::TestAllTypes_NestedMessage* temp = oneof_field_.oneof_nested_message_;
    oneof_field_.oneof_nested_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestAllTypes::unsafe_arena_set_allocated_oneof_nested_message(::protobuf_unittest::TestAllTypes_NestedMessage* oneof_nested_message) {
  clear_oneof_field();
  if (oneof_nested_message) {
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestAllTypes.oneof_nested_message)
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::_internal_mutable_oneof_nested_message() {
  if (!_internal_has_oneof_nested_message()) {
    clear_oneof_field();
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = CreateMaybeMessage< ::protobuf_unittest::TestAllTypes_NestedMessage >(GetArenaForAllocation());
  }
  return oneof_field_.oneof_nested_message_;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestAllTypes::mutable_oneof_nested_message() {
  ::protobuf_unittest::TestAllTypes_NestedMessage* _msg = _internal_mutable_oneof_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.oneof_nested_message)
  return _msg;
}

// string oneof_string = 113;
inline bool TestAllTypes::_internal_has_oneof_string() const {
  return oneof_field_case() == kOneofString;
}
inline bool TestAllTypes::has_oneof_string() const {
  return _internal_has_oneof_string();
}
inline void TestAllTypes::set_has_oneof_string() {
  _oneof_case_[0] = kOneofString;
}
inline void TestAllTypes::clear_oneof_string() {
  if (_internal_has_oneof_string()) {
    oneof_field_.oneof_string_.Destroy();
    clear_has_oneof_field();
  }
}
inline const std::string& TestAllTypes::oneof_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.oneof_string)
  return _internal_oneof_string();
}
template <typename ArgT0, typename... ArgT>
inline void TestAllTypes::set_oneof_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.InitDefault();
  }
  oneof_field_.oneof_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.oneof_string)
}
inline std::string* TestAllTypes::mutable_oneof_string() {
  std::string* _s = _internal_mutable_oneof_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.oneof_string)
  return _s;
}
inline const std::string& TestAllTypes::_internal_oneof_string() const {
  if (_internal_has_oneof_string()) {
    return oneof_field_.oneof_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestAllTypes::_internal_set_oneof_string(const std::string& value) {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.InitDefault();
  }
  oneof_field_.oneof_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_oneof_string() {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.InitDefault();
  }
  return oneof_field_.oneof_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_oneof_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.oneof_string)
  if (_internal_has_oneof_string()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_string_.Release();
  } else {
    return nullptr;
  }
}
inline void TestAllTypes::set_allocated_oneof_string(std::string* oneof_string) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_string != nullptr) {
    set_has_oneof_string();
    oneof_field_.oneof_string_.InitAllocated(oneof_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.oneof_string)
}

// bytes oneof_bytes = 114;
inline bool TestAllTypes::_internal_has_oneof_bytes() const {
  return oneof_field_case() == kOneofBytes;
}
inline bool TestAllTypes::has_oneof_bytes() const {
  return _internal_has_oneof_bytes();
}
inline void TestAllTypes::set_has_oneof_bytes() {
  _oneof_case_[0] = kOneofBytes;
}
inline void TestAllTypes::clear_oneof_bytes() {
  if (_internal_has_oneof_bytes()) {
    oneof_field_.oneof_bytes_.Destroy();
    clear_has_oneof_field();
  }
}
inline const std::string& TestAllTypes::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypes.oneof_bytes)
  return _internal_oneof_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void TestAllTypes::set_oneof_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.InitDefault();
  }
  oneof_field_.oneof_bytes_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypes.oneof_bytes)
}
inline std::string* TestAllTypes::mutable_oneof_bytes() {
  std::string* _s = _internal_mutable_oneof_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypes.oneof_bytes)
  return _s;
}
inline const std::string& TestAllTypes::_internal_oneof_bytes() const {
  if (_internal_has_oneof_bytes()) {
    return oneof_field_.oneof_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestAllTypes::_internal_set_oneof_bytes(const std::string& value) {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.InitDefault();
  }
  oneof_field_.oneof_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypes::_internal_mutable_oneof_bytes() {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.InitDefault();
  }
  return oneof_field_.oneof_bytes_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestAllTypes::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypes.oneof_bytes)
  if (_internal_has_oneof_bytes()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_bytes_.Release();
  } else {
    return nullptr;
  }
}
inline void TestAllTypes::set_allocated_oneof_bytes(std::string* oneof_bytes) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_bytes != nullptr) {
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.InitAllocated(oneof_bytes, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypes.oneof_bytes)
}

inline bool TestAllTypes::has_oneof_field() const {
  return oneof_field_case() != ONEOF_FIELD_NOT_SET;
}
inline void TestAllTypes::clear_has_oneof_field() {
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}
inline TestAllTypes::OneofFieldCase TestAllTypes::oneof_field_case() const {
  return TestAllTypes::OneofFieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NestedTestAllTypes

// optional .protobuf_unittest.NestedTestAllTypes child = 1;
inline bool NestedTestAllTypes::_internal_has_child() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || child_ != nullptr);
  return value;
}
inline bool NestedTestAllTypes::has_child() const {
  return _internal_has_child();
}
inline void NestedTestAllTypes::clear_child() {
  if (child_ != nullptr) child_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::NestedTestAllTypes& NestedTestAllTypes::_internal_child() const {
  const ::protobuf_unittest::NestedTestAllTypes* p = child_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::NestedTestAllTypes&>(
      ::protobuf_unittest::_NestedTestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::NestedTestAllTypes& NestedTestAllTypes::child() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NestedTestAllTypes.child)
  return _internal_child();
}
inline void NestedTestAllTypes::unsafe_arena_set_allocated_child(
    ::protobuf_unittest::NestedTestAllTypes* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.NestedTestAllTypes.child)
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::release_child() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::NestedTestAllTypes* temp = child_;
  child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.NestedTestAllTypes.child)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::NestedTestAllTypes* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::_internal_mutable_child() {
  _has_bits_[0] |= 0x00000001u;
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::NestedTestAllTypes>(GetArenaForAllocation());
    child_ = p;
  }
  return child_;
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::mutable_child() {
  ::protobuf_unittest::NestedTestAllTypes* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.NestedTestAllTypes.child)
  return _msg;
}
inline void NestedTestAllTypes::set_allocated_child(::protobuf_unittest::NestedTestAllTypes* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.NestedTestAllTypes.child)
}

// optional .protobuf_unittest.TestAllTypes payload = 2;
inline bool NestedTestAllTypes::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || payload_ != nullptr);
  return value;
}
inline bool NestedTestAllTypes::has_payload() const {
  return _internal_has_payload();
}
inline void NestedTestAllTypes::clear_payload() {
  if (payload_ != nullptr) payload_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestAllTypes& NestedTestAllTypes::_internal_payload() const {
  const ::protobuf_unittest::TestAllTypes* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& NestedTestAllTypes::payload() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NestedTestAllTypes.payload)
  return _internal_payload();
}
inline void NestedTestAllTypes::unsafe_arena_set_allocated_payload(
    ::protobuf_unittest::TestAllTypes* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.NestedTestAllTypes.payload)
}
inline ::protobuf_unittest::TestAllTypes* NestedTestAllTypes::release_payload() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* NestedTestAllTypes::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.NestedTestAllTypes.payload)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* NestedTestAllTypes::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000002u;
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::protobuf_unittest::TestAllTypes* NestedTestAllTypes::mutable_payload() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.NestedTestAllTypes.payload)
  return _msg;
}
inline void NestedTestAllTypes::set_allocated_payload(::protobuf_unittest::TestAllTypes* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.NestedTestAllTypes.payload)
}

// repeated .protobuf_unittest.NestedTestAllTypes repeated_child = 3;
inline int NestedTestAllTypes::_internal_repeated_child_size() const {
  return repeated_child_.size();
}
inline int NestedTestAllTypes::repeated_child_size() const {
  return _internal_repeated_child_size();
}
inline void NestedTestAllTypes::clear_repeated_child() {
  repeated_child_.Clear();
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::mutable_repeated_child(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.NestedTestAllTypes.repeated_child)
  return repeated_child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::NestedTestAllTypes >*
NestedTestAllTypes::mutable_repeated_child() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.NestedTestAllTypes.repeated_child)
  return &repeated_child_;
}
inline const ::protobuf_unittest::NestedTestAllTypes& NestedTestAllTypes::_internal_repeated_child(int index) const {
  return repeated_child_.Get(index);
}
inline const ::protobuf_unittest::NestedTestAllTypes& NestedTestAllTypes::repeated_child(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NestedTestAllTypes.repeated_child)
  return _internal_repeated_child(index);
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::_internal_add_repeated_child() {
  return repeated_child_.Add();
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::add_repeated_child() {
  ::protobuf_unittest::NestedTestAllTypes* _add = _internal_add_repeated_child();
  // @@protoc_insertion_point(field_add:protobuf_unittest.NestedTestAllTypes.repeated_child)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::NestedTestAllTypes >&
NestedTestAllTypes::repeated_child() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.NestedTestAllTypes.repeated_child)
  return repeated_child_;
}

// optional .protobuf_unittest.NestedTestAllTypes lazy_child = 4 [lazy = true];
inline bool NestedTestAllTypes::_internal_has_lazy_child() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lazy_child_ != nullptr);
  return value;
}
inline bool NestedTestAllTypes::has_lazy_child() const {
  return _internal_has_lazy_child();
}
inline void NestedTestAllTypes::clear_lazy_child() {
  if (lazy_child_ != nullptr) lazy_child_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::NestedTestAllTypes& NestedTestAllTypes::_internal_lazy_child() const {
  const ::protobuf_unittest::NestedTestAllTypes* p = lazy_child_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::NestedTestAllTypes&>(
      ::protobuf_unittest::_NestedTestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::NestedTestAllTypes& NestedTestAllTypes::lazy_child() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NestedTestAllTypes.lazy_child)
  return _internal_lazy_child();
}
inline void NestedTestAllTypes::unsafe_arena_set_allocated_lazy_child(
    ::protobuf_unittest::NestedTestAllTypes* lazy_child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lazy_child_);
  }
  lazy_child_ = lazy_child;
  if (lazy_child) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.NestedTestAllTypes.lazy_child)
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::release_lazy_child() {
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::NestedTestAllTypes* temp = lazy_child_;
  lazy_child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::unsafe_arena_release_lazy_child() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.NestedTestAllTypes.lazy_child)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::NestedTestAllTypes* temp = lazy_child_;
  lazy_child_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::_internal_mutable_lazy_child() {
  _has_bits_[0] |= 0x00000004u;
  if (lazy_child_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::NestedTestAllTypes>(GetArenaForAllocation());
    lazy_child_ = p;
  }
  return lazy_child_;
}
inline ::protobuf_unittest::NestedTestAllTypes* NestedTestAllTypes::mutable_lazy_child() {
  ::protobuf_unittest::NestedTestAllTypes* _msg = _internal_mutable_lazy_child();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.NestedTestAllTypes.lazy_child)
  return _msg;
}
inline void NestedTestAllTypes::set_allocated_lazy_child(::protobuf_unittest::NestedTestAllTypes* lazy_child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lazy_child_;
  }
  if (lazy_child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lazy_child);
    if (message_arena != submessage_arena) {
      lazy_child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lazy_child, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lazy_child_ = lazy_child;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.NestedTestAllTypes.lazy_child)
}

// optional .protobuf_unittest.TestAllTypes eager_child = 5 [lazy = false];
inline bool NestedTestAllTypes::_internal_has_eager_child() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || eager_child_ != nullptr);
  return value;
}
inline bool NestedTestAllTypes::has_eager_child() const {
  return _internal_has_eager_child();
}
inline void NestedTestAllTypes::clear_eager_child() {
  if (eager_child_ != nullptr) eager_child_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::protobuf_unittest::TestAllTypes& NestedTestAllTypes::_internal_eager_child() const {
  const ::protobuf_unittest::TestAllTypes* p = eager_child_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& NestedTestAllTypes::eager_child() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NestedTestAllTypes.eager_child)
  return _internal_eager_child();
}
inline void NestedTestAllTypes::unsafe_arena_set_allocated_eager_child(
    ::protobuf_unittest::TestAllTypes* eager_child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eager_child_);
  }
  eager_child_ = eager_child;
  if (eager_child) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.NestedTestAllTypes.eager_child)
}
inline ::protobuf_unittest::TestAllTypes* NestedTestAllTypes::release_eager_child() {
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestAllTypes* temp = eager_child_;
  eager_child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* NestedTestAllTypes::unsafe_arena_release_eager_child() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.NestedTestAllTypes.eager_child)
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestAllTypes* temp = eager_child_;
  eager_child_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* NestedTestAllTypes::_internal_mutable_eager_child() {
  _has_bits_[0] |= 0x00000008u;
  if (eager_child_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    eager_child_ = p;
  }
  return eager_child_;
}
inline ::protobuf_unittest::TestAllTypes* NestedTestAllTypes::mutable_eager_child() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_eager_child();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.NestedTestAllTypes.eager_child)
  return _msg;
}
inline void NestedTestAllTypes::set_allocated_eager_child(::protobuf_unittest::TestAllTypes* eager_child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete eager_child_;
  }
  if (eager_child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(eager_child);
    if (message_arena != submessage_arena) {
      eager_child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eager_child, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  eager_child_ = eager_child;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.NestedTestAllTypes.eager_child)
}

// -------------------------------------------------------------------

// TestDeprecatedFields

// optional int32 deprecated_int32 = 1 [deprecated = true];
inline bool TestDeprecatedFields::_internal_has_deprecated_int32() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestDeprecatedFields::has_deprecated_int32() const {
  return _internal_has_deprecated_int32();
}
inline void TestDeprecatedFields::clear_deprecated_int32() {
  deprecated_int32_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestDeprecatedFields::_internal_deprecated_int32() const {
  return deprecated_int32_;
}
inline int32_t TestDeprecatedFields::deprecated_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDeprecatedFields.deprecated_int32)
  return _internal_deprecated_int32();
}
inline void TestDeprecatedFields::_internal_set_deprecated_int32(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_int32_ = value;
}
inline void TestDeprecatedFields::set_deprecated_int32(int32_t value) {
  _internal_set_deprecated_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDeprecatedFields.deprecated_int32)
}

// int32 deprecated_int32_in_oneof = 2 [deprecated = true];
inline bool TestDeprecatedFields::_internal_has_deprecated_int32_in_oneof() const {
  return oneof_fields_case() == kDeprecatedInt32InOneof;
}
inline bool TestDeprecatedFields::has_deprecated_int32_in_oneof() const {
  return _internal_has_deprecated_int32_in_oneof();
}
inline void TestDeprecatedFields::set_has_deprecated_int32_in_oneof() {
  _oneof_case_[0] = kDeprecatedInt32InOneof;
}
inline void TestDeprecatedFields::clear_deprecated_int32_in_oneof() {
  if (_internal_has_deprecated_int32_in_oneof()) {
    oneof_fields_.deprecated_int32_in_oneof_ = 0;
    clear_has_oneof_fields();
  }
}
inline int32_t TestDeprecatedFields::_internal_deprecated_int32_in_oneof() const {
  if (_internal_has_deprecated_int32_in_oneof()) {
    return oneof_fields_.deprecated_int32_in_oneof_;
  }
  return 0;
}
inline void TestDeprecatedFields::_internal_set_deprecated_int32_in_oneof(int32_t value) {
  if (!_internal_has_deprecated_int32_in_oneof()) {
    clear_oneof_fields();
    set_has_deprecated_int32_in_oneof();
  }
  oneof_fields_.deprecated_int32_in_oneof_ = value;
}
inline int32_t TestDeprecatedFields::deprecated_int32_in_oneof() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDeprecatedFields.deprecated_int32_in_oneof)
  return _internal_deprecated_int32_in_oneof();
}
inline void TestDeprecatedFields::set_deprecated_int32_in_oneof(int32_t value) {
  _internal_set_deprecated_int32_in_oneof(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDeprecatedFields.deprecated_int32_in_oneof)
}

inline bool TestDeprecatedFields::has_oneof_fields() const {
  return oneof_fields_case() != ONEOF_FIELDS_NOT_SET;
}
inline void TestDeprecatedFields::clear_has_oneof_fields() {
  _oneof_case_[0] = ONEOF_FIELDS_NOT_SET;
}
inline TestDeprecatedFields::OneofFieldsCase TestDeprecatedFields::oneof_fields_case() const {
  return TestDeprecatedFields::OneofFieldsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestDeprecatedMessage

// -------------------------------------------------------------------

// ForeignMessage

// optional int32 c = 1;
inline bool ForeignMessage::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ForeignMessage::has_c() const {
  return _internal_has_c();
}
inline void ForeignMessage::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t ForeignMessage::_internal_c() const {
  return c_;
}
inline int32_t ForeignMessage::c() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ForeignMessage.c)
  return _internal_c();
}
inline void ForeignMessage::_internal_set_c(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  c_ = value;
}
inline void ForeignMessage::set_c(int32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.ForeignMessage.c)
}

// optional int32 d = 2;
inline bool ForeignMessage::_internal_has_d() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ForeignMessage::has_d() const {
  return _internal_has_d();
}
inline void ForeignMessage::clear_d() {
  d_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t ForeignMessage::_internal_d() const {
  return d_;
}
inline int32_t ForeignMessage::d() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ForeignMessage.d)
  return _internal_d();
}
inline void ForeignMessage::_internal_set_d(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  d_ = value;
}
inline void ForeignMessage::set_d(int32_t value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.ForeignMessage.d)
}

// -------------------------------------------------------------------

// TestReservedFields

// -------------------------------------------------------------------

// TestAllExtensions

// -------------------------------------------------------------------

// OptionalGroup_extension

// optional int32 a = 17;
inline bool OptionalGroup_extension::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OptionalGroup_extension::has_a() const {
  return _internal_has_a();
}
inline void OptionalGroup_extension::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t OptionalGroup_extension::_internal_a() const {
  return a_;
}
inline int32_t OptionalGroup_extension::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.OptionalGroup_extension.a)
  return _internal_a();
}
inline void OptionalGroup_extension::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void OptionalGroup_extension::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.OptionalGroup_extension.a)
}

// -------------------------------------------------------------------

// RepeatedGroup_extension

// optional int32 a = 47;
inline bool RepeatedGroup_extension::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RepeatedGroup_extension::has_a() const {
  return _internal_has_a();
}
inline void RepeatedGroup_extension::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t RepeatedGroup_extension::_internal_a() const {
  return a_;
}
inline int32_t RepeatedGroup_extension::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.RepeatedGroup_extension.a)
  return _internal_a();
}
inline void RepeatedGroup_extension::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void RepeatedGroup_extension::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.RepeatedGroup_extension.a)
}

// -------------------------------------------------------------------

// TestGroup_OptionalGroup

// optional int32 a = 17;
inline bool TestGroup_OptionalGroup::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestGroup_OptionalGroup::has_a() const {
  return _internal_has_a();
}
inline void TestGroup_OptionalGroup::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestGroup_OptionalGroup::_internal_a() const {
  return a_;
}
inline int32_t TestGroup_OptionalGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestGroup.OptionalGroup.a)
  return _internal_a();
}
inline void TestGroup_OptionalGroup::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void TestGroup_OptionalGroup::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestGroup.OptionalGroup.a)
}

// -------------------------------------------------------------------

// TestGroup

// optional group OptionalGroup = 16 { ... };
inline bool TestGroup::_internal_has_optionalgroup() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || optionalgroup_ != nullptr);
  return value;
}
inline bool TestGroup::has_optionalgroup() const {
  return _internal_has_optionalgroup();
}
inline void TestGroup::clear_optionalgroup() {
  if (optionalgroup_ != nullptr) optionalgroup_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestGroup_OptionalGroup& TestGroup::_internal_optionalgroup() const {
  const ::protobuf_unittest::TestGroup_OptionalGroup* p = optionalgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestGroup_OptionalGroup&>(
      ::protobuf_unittest::_TestGroup_OptionalGroup_default_instance_);
}
inline const ::protobuf_unittest::TestGroup_OptionalGroup& TestGroup::optionalgroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestGroup.optionalgroup)
  return _internal_optionalgroup();
}
inline void TestGroup::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_unittest::TestGroup_OptionalGroup* optionalgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalgroup_);
  }
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestGroup.optionalgroup)
}
inline ::protobuf_unittest::TestGroup_OptionalGroup* TestGroup::release_optionalgroup() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestGroup_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestGroup_OptionalGroup* TestGroup::unsafe_arena_release_optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestGroup.optionalgroup)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestGroup_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestGroup_OptionalGroup* TestGroup::_internal_mutable_optionalgroup() {
  _has_bits_[0] |= 0x00000001u;
  if (optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestGroup_OptionalGroup>(GetArenaForAllocation());
    optionalgroup_ = p;
  }
  return optionalgroup_;
}
inline ::protobuf_unittest::TestGroup_OptionalGroup* TestGroup::mutable_optionalgroup() {
  ::protobuf_unittest::TestGroup_OptionalGroup* _msg = _internal_mutable_optionalgroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestGroup.optionalgroup)
  return _msg;
}
inline void TestGroup::set_allocated_optionalgroup(::protobuf_unittest::TestGroup_OptionalGroup* optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optionalgroup_;
  }
  if (optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionalgroup);
    if (message_arena != submessage_arena) {
      optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optionalgroup_ = optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestGroup.optionalgroup)
}

// optional .protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
inline bool TestGroup::_internal_has_optional_foreign_enum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestGroup::has_optional_foreign_enum() const {
  return _internal_has_optional_foreign_enum();
}
inline void TestGroup::clear_optional_foreign_enum() {
  optional_foreign_enum_ = 4;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protobuf_unittest::ForeignEnum TestGroup::_internal_optional_foreign_enum() const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(optional_foreign_enum_);
}
inline ::protobuf_unittest::ForeignEnum TestGroup::optional_foreign_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestGroup.optional_foreign_enum)
  return _internal_optional_foreign_enum();
}
inline void TestGroup::_internal_set_optional_foreign_enum(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  optional_foreign_enum_ = value;
}
inline void TestGroup::set_optional_foreign_enum(::protobuf_unittest::ForeignEnum value) {
  _internal_set_optional_foreign_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestGroup.optional_foreign_enum)
}

// -------------------------------------------------------------------

// TestGroupExtension

// -------------------------------------------------------------------

// TestNestedExtension_OptionalGroup_extension

// optional int32 a = 17;
inline bool TestNestedExtension_OptionalGroup_extension::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestNestedExtension_OptionalGroup_extension::has_a() const {
  return _internal_has_a();
}
inline void TestNestedExtension_OptionalGroup_extension::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestNestedExtension_OptionalGroup_extension::_internal_a() const {
  return a_;
}
inline int32_t TestNestedExtension_OptionalGroup_extension::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedExtension.OptionalGroup_extension.a)
  return _internal_a();
}
inline void TestNestedExtension_OptionalGroup_extension::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void TestNestedExtension_OptionalGroup_extension::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestNestedExtension.OptionalGroup_extension.a)
}

// -------------------------------------------------------------------

// TestNestedExtension

// -------------------------------------------------------------------

// TestChildExtension

// optional string a = 1;
inline bool TestChildExtension::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestChildExtension::has_a() const {
  return _internal_has_a();
}
inline void TestChildExtension::clear_a() {
  a_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestChildExtension::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtension.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestChildExtension::set_a(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestChildExtension.a)
}
inline std::string* TestChildExtension::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestChildExtension.a)
  return _s;
}
inline const std::string& TestChildExtension::_internal_a() const {
  return a_.Get();
}
inline void TestChildExtension::_internal_set_a(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  a_.Set(value, GetArenaForAllocation());
}
inline std::string* TestChildExtension::_internal_mutable_a() {
  _has_bits_[0] |= 0x00000001u;
  return a_.Mutable(GetArenaForAllocation());
}
inline std::string* TestChildExtension::release_a() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestChildExtension.a)
  if (!_internal_has_a()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = a_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (a_.IsDefault()) {
    a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestChildExtension::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  a_.SetAllocated(a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (a_.IsDefault()) {
    a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestChildExtension.a)
}

// optional string b = 2;
inline bool TestChildExtension::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestChildExtension::has_b() const {
  return _internal_has_b();
}
inline void TestChildExtension::clear_b() {
  b_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestChildExtension::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtension.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestChildExtension::set_b(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestChildExtension.b)
}
inline std::string* TestChildExtension::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestChildExtension.b)
  return _s;
}
inline const std::string& TestChildExtension::_internal_b() const {
  return b_.Get();
}
inline void TestChildExtension::_internal_set_b(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  b_.Set(value, GetArenaForAllocation());
}
inline std::string* TestChildExtension::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000002u;
  return b_.Mutable(GetArenaForAllocation());
}
inline std::string* TestChildExtension::release_b() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestChildExtension.b)
  if (!_internal_has_b()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = b_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestChildExtension::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  b_.SetAllocated(b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestChildExtension.b)
}

// optional .protobuf_unittest.TestAllExtensions optional_extension = 3;
inline bool TestChildExtension::_internal_has_optional_extension() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || optional_extension_ != nullptr);
  return value;
}
inline bool TestChildExtension::has_optional_extension() const {
  return _internal_has_optional_extension();
}
inline void TestChildExtension::clear_optional_extension() {
  if (optional_extension_ != nullptr) optional_extension_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::TestAllExtensions& TestChildExtension::_internal_optional_extension() const {
  const ::protobuf_unittest::TestAllExtensions* p = optional_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllExtensions&>(
      ::protobuf_unittest::_TestAllExtensions_default_instance_);
}
inline const ::protobuf_unittest::TestAllExtensions& TestChildExtension::optional_extension() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtension.optional_extension)
  return _internal_optional_extension();
}
inline void TestChildExtension::unsafe_arena_set_allocated_optional_extension(
    ::protobuf_unittest::TestAllExtensions* optional_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_extension_);
  }
  optional_extension_ = optional_extension;
  if (optional_extension) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestChildExtension.optional_extension)
}
inline ::protobuf_unittest::TestAllExtensions* TestChildExtension::release_optional_extension() {
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestAllExtensions* temp = optional_extension_;
  optional_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllExtensions* TestChildExtension::unsafe_arena_release_optional_extension() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestChildExtension.optional_extension)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestAllExtensions* temp = optional_extension_;
  optional_extension_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllExtensions* TestChildExtension::_internal_mutable_optional_extension() {
  _has_bits_[0] |= 0x00000004u;
  if (optional_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllExtensions>(GetArenaForAllocation());
    optional_extension_ = p;
  }
  return optional_extension_;
}
inline ::protobuf_unittest::TestAllExtensions* TestChildExtension::mutable_optional_extension() {
  ::protobuf_unittest::TestAllExtensions* _msg = _internal_mutable_optional_extension();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestChildExtension.optional_extension)
  return _msg;
}
inline void TestChildExtension::set_allocated_optional_extension(::protobuf_unittest::TestAllExtensions* optional_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_extension_;
  }
  if (optional_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_extension);
    if (message_arena != submessage_arena) {
      optional_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_extension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optional_extension_ = optional_extension;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestChildExtension.optional_extension)
}

// -------------------------------------------------------------------

// TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions

// optional int32 a = 1;
inline bool TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::has_a() const {
  return _internal_has_a();
}
inline void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_internal_a() const {
  return a_;
}
inline int32_t TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions.a)
  return _internal_a();
}
inline void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions.a)
}

// optional int32 b = 2;
inline bool TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::has_b() const {
  return _internal_has_b();
}
inline void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_internal_b() const {
  return b_;
}
inline int32_t TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions.b)
  return _internal_b();
}
inline void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::_internal_set_b(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  b_ = value;
}
inline void TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions::set_b(int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions.b)
}

// -------------------------------------------------------------------

// TestChildExtensionData_NestedTestAllExtensionsData

// optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions dynamic = 409707008;
inline bool TestChildExtensionData_NestedTestAllExtensionsData::_internal_has_dynamic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dynamic_ != nullptr);
  return value;
}
inline bool TestChildExtensionData_NestedTestAllExtensionsData::has_dynamic() const {
  return _internal_has_dynamic();
}
inline void TestChildExtensionData_NestedTestAllExtensionsData::clear_dynamic() {
  if (dynamic_ != nullptr) dynamic_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& TestChildExtensionData_NestedTestAllExtensionsData::_internal_dynamic() const {
  const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* p = dynamic_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions&>(
      ::protobuf_unittest::_TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions_default_instance_);
}
inline const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions& TestChildExtensionData_NestedTestAllExtensionsData::dynamic() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.dynamic)
  return _internal_dynamic();
}
inline void TestChildExtensionData_NestedTestAllExtensionsData::unsafe_arena_set_allocated_dynamic(
    ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* dynamic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamic_);
  }
  dynamic_ = dynamic;
  if (dynamic) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.dynamic)
}
inline ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* TestChildExtensionData_NestedTestAllExtensionsData::release_dynamic() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* temp = dynamic_;
  dynamic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* TestChildExtensionData_NestedTestAllExtensionsData::unsafe_arena_release_dynamic() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.dynamic)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* temp = dynamic_;
  dynamic_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* TestChildExtensionData_NestedTestAllExtensionsData::_internal_mutable_dynamic() {
  _has_bits_[0] |= 0x00000001u;
  if (dynamic_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions>(GetArenaForAllocation());
    dynamic_ = p;
  }
  return dynamic_;
}
inline ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* TestChildExtensionData_NestedTestAllExtensionsData::mutable_dynamic() {
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* _msg = _internal_mutable_dynamic();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.dynamic)
  return _msg;
}
inline void TestChildExtensionData_NestedTestAllExtensionsData::set_allocated_dynamic(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions* dynamic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dynamic_;
  }
  if (dynamic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dynamic);
    if (message_arena != submessage_arena) {
      dynamic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dynamic_ = dynamic;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.dynamic)
}

// -------------------------------------------------------------------

// TestChildExtensionData

// optional string a = 1;
inline bool TestChildExtensionData::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestChildExtensionData::has_a() const {
  return _internal_has_a();
}
inline void TestChildExtensionData::clear_a() {
  a_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestChildExtensionData::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtensionData.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestChildExtensionData::set_a(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestChildExtensionData.a)
}
inline std::string* TestChildExtensionData::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestChildExtensionData.a)
  return _s;
}
inline const std::string& TestChildExtensionData::_internal_a() const {
  return a_.Get();
}
inline void TestChildExtensionData::_internal_set_a(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  a_.Set(value, GetArenaForAllocation());
}
inline std::string* TestChildExtensionData::_internal_mutable_a() {
  _has_bits_[0] |= 0x00000001u;
  return a_.Mutable(GetArenaForAllocation());
}
inline std::string* TestChildExtensionData::release_a() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestChildExtensionData.a)
  if (!_internal_has_a()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = a_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (a_.IsDefault()) {
    a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestChildExtensionData::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  a_.SetAllocated(a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (a_.IsDefault()) {
    a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestChildExtensionData.a)
}

// optional string b = 2;
inline bool TestChildExtensionData::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestChildExtensionData::has_b() const {
  return _internal_has_b();
}
inline void TestChildExtensionData::clear_b() {
  b_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestChildExtensionData::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtensionData.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestChildExtensionData::set_b(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestChildExtensionData.b)
}
inline std::string* TestChildExtensionData::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestChildExtensionData.b)
  return _s;
}
inline const std::string& TestChildExtensionData::_internal_b() const {
  return b_.Get();
}
inline void TestChildExtensionData::_internal_set_b(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  b_.Set(value, GetArenaForAllocation());
}
inline std::string* TestChildExtensionData::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000002u;
  return b_.Mutable(GetArenaForAllocation());
}
inline std::string* TestChildExtensionData::release_b() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestChildExtensionData.b)
  if (!_internal_has_b()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = b_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestChildExtensionData::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  b_.SetAllocated(b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestChildExtensionData.b)
}

// optional .protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData optional_extension = 3;
inline bool TestChildExtensionData::_internal_has_optional_extension() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || optional_extension_ != nullptr);
  return value;
}
inline bool TestChildExtensionData::has_optional_extension() const {
  return _internal_has_optional_extension();
}
inline void TestChildExtensionData::clear_optional_extension() {
  if (optional_extension_ != nullptr) optional_extension_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData& TestChildExtensionData::_internal_optional_extension() const {
  const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* p = optional_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData&>(
      ::protobuf_unittest::_TestChildExtensionData_NestedTestAllExtensionsData_default_instance_);
}
inline const ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData& TestChildExtensionData::optional_extension() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestChildExtensionData.optional_extension)
  return _internal_optional_extension();
}
inline void TestChildExtensionData::unsafe_arena_set_allocated_optional_extension(
    ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* optional_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_extension_);
  }
  optional_extension_ = optional_extension;
  if (optional_extension) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestChildExtensionData.optional_extension)
}
inline ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* TestChildExtensionData::release_optional_extension() {
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* temp = optional_extension_;
  optional_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* TestChildExtensionData::unsafe_arena_release_optional_extension() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestChildExtensionData.optional_extension)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* temp = optional_extension_;
  optional_extension_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* TestChildExtensionData::_internal_mutable_optional_extension() {
  _has_bits_[0] |= 0x00000004u;
  if (optional_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData>(GetArenaForAllocation());
    optional_extension_ = p;
  }
  return optional_extension_;
}
inline ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* TestChildExtensionData::mutable_optional_extension() {
  ::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* _msg = _internal_mutable_optional_extension();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestChildExtensionData.optional_extension)
  return _msg;
}
inline void TestChildExtensionData::set_allocated_optional_extension(::protobuf_unittest::TestChildExtensionData_NestedTestAllExtensionsData* optional_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_extension_;
  }
  if (optional_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_extension);
    if (message_arena != submessage_arena) {
      optional_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_extension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optional_extension_ = optional_extension;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestChildExtensionData.optional_extension)
}

// -------------------------------------------------------------------

// TestNestedChildExtension

// optional int32 a = 1;
inline bool TestNestedChildExtension::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestNestedChildExtension::has_a() const {
  return _internal_has_a();
}
inline void TestNestedChildExtension::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestNestedChildExtension::_internal_a() const {
  return a_;
}
inline int32_t TestNestedChildExtension::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedChildExtension.a)
  return _internal_a();
}
inline void TestNestedChildExtension::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  a_ = value;
}
inline void TestNestedChildExtension::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestNestedChildExtension.a)
}

// optional .protobuf_unittest.TestChildExtension child = 2;
inline bool TestNestedChildExtension::_internal_has_child() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || child_ != nullptr);
  return value;
}
inline bool TestNestedChildExtension::has_child() const {
  return _internal_has_child();
}
inline void TestNestedChildExtension::clear_child() {
  if (child_ != nullptr) child_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestChildExtension& TestNestedChildExtension::_internal_child() const {
  const ::protobuf_unittest::TestChildExtension* p = child_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestChildExtension&>(
      ::protobuf_unittest::_TestChildExtension_default_instance_);
}
inline const ::protobuf_unittest::TestChildExtension& TestNestedChildExtension::child() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedChildExtension.child)
  return _internal_child();
}
inline void TestNestedChildExtension::unsafe_arena_set_allocated_child(
    ::protobuf_unittest::TestChildExtension* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestNestedChildExtension.child)
}
inline ::protobuf_unittest::TestChildExtension* TestNestedChildExtension::release_child() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestChildExtension* temp = child_;
  child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestChildExtension* TestNestedChildExtension::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedChildExtension.child)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestChildExtension* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestChildExtension* TestNestedChildExtension::_internal_mutable_child() {
  _has_bits_[0] |= 0x00000001u;
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestChildExtension>(GetArenaForAllocation());
    child_ = p;
  }
  return child_;
}
inline ::protobuf_unittest::TestChildExtension* TestNestedChildExtension::mutable_child() {
  ::protobuf_unittest::TestChildExtension* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedChildExtension.child)
  return _msg;
}
inline void TestNestedChildExtension::set_allocated_child(::protobuf_unittest::TestChildExtension* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedChildExtension.child)
}

// -------------------------------------------------------------------

// TestNestedChildExtensionData

// optional int32 a = 1;
inline bool TestNestedChildExtensionData::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestNestedChildExtensionData::has_a() const {
  return _internal_has_a();
}
inline void TestNestedChildExtensionData::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestNestedChildExtensionData::_internal_a() const {
  return a_;
}
inline int32_t TestNestedChildExtensionData::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedChildExtensionData.a)
  return _internal_a();
}
inline void TestNestedChildExtensionData::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  a_ = value;
}
inline void TestNestedChildExtensionData::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestNestedChildExtensionData.a)
}

// optional .protobuf_unittest.TestChildExtensionData child = 2;
inline bool TestNestedChildExtensionData::_internal_has_child() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || child_ != nullptr);
  return value;
}
inline bool TestNestedChildExtensionData::has_child() const {
  return _internal_has_child();
}
inline void TestNestedChildExtensionData::clear_child() {
  if (child_ != nullptr) child_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestChildExtensionData& TestNestedChildExtensionData::_internal_child() const {
  const ::protobuf_unittest::TestChildExtensionData* p = child_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestChildExtensionData&>(
      ::protobuf_unittest::_TestChildExtensionData_default_instance_);
}
inline const ::protobuf_unittest::TestChildExtensionData& TestNestedChildExtensionData::child() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedChildExtensionData.child)
  return _internal_child();
}
inline void TestNestedChildExtensionData::unsafe_arena_set_allocated_child(
    ::protobuf_unittest::TestChildExtensionData* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestNestedChildExtensionData.child)
}
inline ::protobuf_unittest::TestChildExtensionData* TestNestedChildExtensionData::release_child() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestChildExtensionData* temp = child_;
  child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestChildExtensionData* TestNestedChildExtensionData::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedChildExtensionData.child)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestChildExtensionData* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestChildExtensionData* TestNestedChildExtensionData::_internal_mutable_child() {
  _has_bits_[0] |= 0x00000001u;
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestChildExtensionData>(GetArenaForAllocation());
    child_ = p;
  }
  return child_;
}
inline ::protobuf_unittest::TestChildExtensionData* TestNestedChildExtensionData::mutable_child() {
  ::protobuf_unittest::TestChildExtensionData* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedChildExtensionData.child)
  return _msg;
}
inline void TestNestedChildExtensionData::set_allocated_child(::protobuf_unittest::TestChildExtensionData* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedChildExtensionData.child)
}

// -------------------------------------------------------------------

// TestRequired

// required int32 a = 1;
inline bool TestRequired::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestRequired::has_a() const {
  return _internal_has_a();
}
inline void TestRequired::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestRequired::_internal_a() const {
  return a_;
}
inline int32_t TestRequired::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.a)
  return _internal_a();
}
inline void TestRequired::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  a_ = value;
}
inline void TestRequired::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.a)
}

// optional int32 dummy2 = 2;
inline bool TestRequired::_internal_has_dummy2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestRequired::has_dummy2() const {
  return _internal_has_dummy2();
}
inline void TestRequired::clear_dummy2() {
  dummy2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestRequired::_internal_dummy2() const {
  return dummy2_;
}
inline int32_t TestRequired::dummy2() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy2)
  return _internal_dummy2();
}
inline void TestRequired::_internal_set_dummy2(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  dummy2_ = value;
}
inline void TestRequired::set_dummy2(int32_t value) {
  _internal_set_dummy2(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy2)
}

// required int32 b = 3;
inline bool TestRequired::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestRequired::has_b() const {
  return _internal_has_b();
}
inline void TestRequired::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TestRequired::_internal_b() const {
  return b_;
}
inline int32_t TestRequired::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.b)
  return _internal_b();
}
inline void TestRequired::_internal_set_b(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  b_ = value;
}
inline void TestRequired::set_b(int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.b)
}

// optional int32 dummy4 = 4;
inline bool TestRequired::_internal_has_dummy4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestRequired::has_dummy4() const {
  return _internal_has_dummy4();
}
inline void TestRequired::clear_dummy4() {
  dummy4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t TestRequired::_internal_dummy4() const {
  return dummy4_;
}
inline int32_t TestRequired::dummy4() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy4)
  return _internal_dummy4();
}
inline void TestRequired::_internal_set_dummy4(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  dummy4_ = value;
}
inline void TestRequired::set_dummy4(int32_t value) {
  _internal_set_dummy4(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy4)
}

// optional int32 dummy5 = 5;
inline bool TestRequired::_internal_has_dummy5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestRequired::has_dummy5() const {
  return _internal_has_dummy5();
}
inline void TestRequired::clear_dummy5() {
  dummy5_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t TestRequired::_internal_dummy5() const {
  return dummy5_;
}
inline int32_t TestRequired::dummy5() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy5)
  return _internal_dummy5();
}
inline void TestRequired::_internal_set_dummy5(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  dummy5_ = value;
}
inline void TestRequired::set_dummy5(int32_t value) {
  _internal_set_dummy5(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy5)
}

// optional int32 dummy6 = 6;
inline bool TestRequired::_internal_has_dummy6() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestRequired::has_dummy6() const {
  return _internal_has_dummy6();
}
inline void TestRequired::clear_dummy6() {
  dummy6_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t TestRequired::_internal_dummy6() const {
  return dummy6_;
}
inline int32_t TestRequired::dummy6() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy6)
  return _internal_dummy6();
}
inline void TestRequired::_internal_set_dummy6(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  dummy6_ = value;
}
inline void TestRequired::set_dummy6(int32_t value) {
  _internal_set_dummy6(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy6)
}

// optional int32 dummy7 = 7;
inline bool TestRequired::_internal_has_dummy7() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TestRequired::has_dummy7() const {
  return _internal_has_dummy7();
}
inline void TestRequired::clear_dummy7() {
  dummy7_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t TestRequired::_internal_dummy7() const {
  return dummy7_;
}
inline int32_t TestRequired::dummy7() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy7)
  return _internal_dummy7();
}
inline void TestRequired::_internal_set_dummy7(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  dummy7_ = value;
}
inline void TestRequired::set_dummy7(int32_t value) {
  _internal_set_dummy7(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy7)
}

// optional int32 dummy8 = 8;
inline bool TestRequired::_internal_has_dummy8() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TestRequired::has_dummy8() const {
  return _internal_has_dummy8();
}
inline void TestRequired::clear_dummy8() {
  dummy8_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t TestRequired::_internal_dummy8() const {
  return dummy8_;
}
inline int32_t TestRequired::dummy8() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy8)
  return _internal_dummy8();
}
inline void TestRequired::_internal_set_dummy8(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  dummy8_ = value;
}
inline void TestRequired::set_dummy8(int32_t value) {
  _internal_set_dummy8(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy8)
}

// optional int32 dummy9 = 9;
inline bool TestRequired::_internal_has_dummy9() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TestRequired::has_dummy9() const {
  return _internal_has_dummy9();
}
inline void TestRequired::clear_dummy9() {
  dummy9_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t TestRequired::_internal_dummy9() const {
  return dummy9_;
}
inline int32_t TestRequired::dummy9() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy9)
  return _internal_dummy9();
}
inline void TestRequired::_internal_set_dummy9(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  dummy9_ = value;
}
inline void TestRequired::set_dummy9(int32_t value) {
  _internal_set_dummy9(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy9)
}

// optional int32 dummy10 = 10;
inline bool TestRequired::_internal_has_dummy10() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TestRequired::has_dummy10() const {
  return _internal_has_dummy10();
}
inline void TestRequired::clear_dummy10() {
  dummy10_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t TestRequired::_internal_dummy10() const {
  return dummy10_;
}
inline int32_t TestRequired::dummy10() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy10)
  return _internal_dummy10();
}
inline void TestRequired::_internal_set_dummy10(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  dummy10_ = value;
}
inline void TestRequired::set_dummy10(int32_t value) {
  _internal_set_dummy10(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy10)
}

// optional int32 dummy11 = 11;
inline bool TestRequired::_internal_has_dummy11() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TestRequired::has_dummy11() const {
  return _internal_has_dummy11();
}
inline void TestRequired::clear_dummy11() {
  dummy11_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t TestRequired::_internal_dummy11() const {
  return dummy11_;
}
inline int32_t TestRequired::dummy11() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy11)
  return _internal_dummy11();
}
inline void TestRequired::_internal_set_dummy11(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  dummy11_ = value;
}
inline void TestRequired::set_dummy11(int32_t value) {
  _internal_set_dummy11(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy11)
}

// optional int32 dummy12 = 12;
inline bool TestRequired::_internal_has_dummy12() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy12() const {
  return _internal_has_dummy12();
}
inline void TestRequired::clear_dummy12() {
  dummy12_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t TestRequired::_internal_dummy12() const {
  return dummy12_;
}
inline int32_t TestRequired::dummy12() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy12)
  return _internal_dummy12();
}
inline void TestRequired::_internal_set_dummy12(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  dummy12_ = value;
}
inline void TestRequired::set_dummy12(int32_t value) {
  _internal_set_dummy12(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy12)
}

// optional int32 dummy13 = 13;
inline bool TestRequired::_internal_has_dummy13() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy13() const {
  return _internal_has_dummy13();
}
inline void TestRequired::clear_dummy13() {
  dummy13_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t TestRequired::_internal_dummy13() const {
  return dummy13_;
}
inline int32_t TestRequired::dummy13() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy13)
  return _internal_dummy13();
}
inline void TestRequired::_internal_set_dummy13(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  dummy13_ = value;
}
inline void TestRequired::set_dummy13(int32_t value) {
  _internal_set_dummy13(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy13)
}

// optional int32 dummy14 = 14;
inline bool TestRequired::_internal_has_dummy14() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy14() const {
  return _internal_has_dummy14();
}
inline void TestRequired::clear_dummy14() {
  dummy14_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline int32_t TestRequired::_internal_dummy14() const {
  return dummy14_;
}
inline int32_t TestRequired::dummy14() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy14)
  return _internal_dummy14();
}
inline void TestRequired::_internal_set_dummy14(int32_t value) {
  _has_bits_[0] |= 0x00004000u;
  dummy14_ = value;
}
inline void TestRequired::set_dummy14(int32_t value) {
  _internal_set_dummy14(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy14)
}

// optional int32 dummy15 = 15;
inline bool TestRequired::_internal_has_dummy15() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy15() const {
  return _internal_has_dummy15();
}
inline void TestRequired::clear_dummy15() {
  dummy15_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t TestRequired::_internal_dummy15() const {
  return dummy15_;
}
inline int32_t TestRequired::dummy15() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy15)
  return _internal_dummy15();
}
inline void TestRequired::_internal_set_dummy15(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  dummy15_ = value;
}
inline void TestRequired::set_dummy15(int32_t value) {
  _internal_set_dummy15(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy15)
}

// optional int32 dummy16 = 16;
inline bool TestRequired::_internal_has_dummy16() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy16() const {
  return _internal_has_dummy16();
}
inline void TestRequired::clear_dummy16() {
  dummy16_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline int32_t TestRequired::_internal_dummy16() const {
  return dummy16_;
}
inline int32_t TestRequired::dummy16() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy16)
  return _internal_dummy16();
}
inline void TestRequired::_internal_set_dummy16(int32_t value) {
  _has_bits_[0] |= 0x00010000u;
  dummy16_ = value;
}
inline void TestRequired::set_dummy16(int32_t value) {
  _internal_set_dummy16(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy16)
}

// optional int32 dummy17 = 17;
inline bool TestRequired::_internal_has_dummy17() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy17() const {
  return _internal_has_dummy17();
}
inline void TestRequired::clear_dummy17() {
  dummy17_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline int32_t TestRequired::_internal_dummy17() const {
  return dummy17_;
}
inline int32_t TestRequired::dummy17() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy17)
  return _internal_dummy17();
}
inline void TestRequired::_internal_set_dummy17(int32_t value) {
  _has_bits_[0] |= 0x00020000u;
  dummy17_ = value;
}
inline void TestRequired::set_dummy17(int32_t value) {
  _internal_set_dummy17(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy17)
}

// optional int32 dummy18 = 18;
inline bool TestRequired::_internal_has_dummy18() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy18() const {
  return _internal_has_dummy18();
}
inline void TestRequired::clear_dummy18() {
  dummy18_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t TestRequired::_internal_dummy18() const {
  return dummy18_;
}
inline int32_t TestRequired::dummy18() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy18)
  return _internal_dummy18();
}
inline void TestRequired::_internal_set_dummy18(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  dummy18_ = value;
}
inline void TestRequired::set_dummy18(int32_t value) {
  _internal_set_dummy18(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy18)
}

// optional int32 dummy19 = 19;
inline bool TestRequired::_internal_has_dummy19() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy19() const {
  return _internal_has_dummy19();
}
inline void TestRequired::clear_dummy19() {
  dummy19_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline int32_t TestRequired::_internal_dummy19() const {
  return dummy19_;
}
inline int32_t TestRequired::dummy19() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy19)
  return _internal_dummy19();
}
inline void TestRequired::_internal_set_dummy19(int32_t value) {
  _has_bits_[0] |= 0x00080000u;
  dummy19_ = value;
}
inline void TestRequired::set_dummy19(int32_t value) {
  _internal_set_dummy19(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy19)
}

// optional int32 dummy20 = 20;
inline bool TestRequired::_internal_has_dummy20() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy20() const {
  return _internal_has_dummy20();
}
inline void TestRequired::clear_dummy20() {
  dummy20_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline int32_t TestRequired::_internal_dummy20() const {
  return dummy20_;
}
inline int32_t TestRequired::dummy20() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy20)
  return _internal_dummy20();
}
inline void TestRequired::_internal_set_dummy20(int32_t value) {
  _has_bits_[0] |= 0x00100000u;
  dummy20_ = value;
}
inline void TestRequired::set_dummy20(int32_t value) {
  _internal_set_dummy20(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy20)
}

// optional int32 dummy21 = 21;
inline bool TestRequired::_internal_has_dummy21() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy21() const {
  return _internal_has_dummy21();
}
inline void TestRequired::clear_dummy21() {
  dummy21_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline int32_t TestRequired::_internal_dummy21() const {
  return dummy21_;
}
inline int32_t TestRequired::dummy21() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy21)
  return _internal_dummy21();
}
inline void TestRequired::_internal_set_dummy21(int32_t value) {
  _has_bits_[0] |= 0x00200000u;
  dummy21_ = value;
}
inline void TestRequired::set_dummy21(int32_t value) {
  _internal_set_dummy21(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy21)
}

// optional int32 dummy22 = 22;
inline bool TestRequired::_internal_has_dummy22() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy22() const {
  return _internal_has_dummy22();
}
inline void TestRequired::clear_dummy22() {
  dummy22_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline int32_t TestRequired::_internal_dummy22() const {
  return dummy22_;
}
inline int32_t TestRequired::dummy22() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy22)
  return _internal_dummy22();
}
inline void TestRequired::_internal_set_dummy22(int32_t value) {
  _has_bits_[0] |= 0x00400000u;
  dummy22_ = value;
}
inline void TestRequired::set_dummy22(int32_t value) {
  _internal_set_dummy22(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy22)
}

// optional int32 dummy23 = 23;
inline bool TestRequired::_internal_has_dummy23() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy23() const {
  return _internal_has_dummy23();
}
inline void TestRequired::clear_dummy23() {
  dummy23_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline int32_t TestRequired::_internal_dummy23() const {
  return dummy23_;
}
inline int32_t TestRequired::dummy23() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy23)
  return _internal_dummy23();
}
inline void TestRequired::_internal_set_dummy23(int32_t value) {
  _has_bits_[0] |= 0x00800000u;
  dummy23_ = value;
}
inline void TestRequired::set_dummy23(int32_t value) {
  _internal_set_dummy23(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy23)
}

// optional int32 dummy24 = 24;
inline bool TestRequired::_internal_has_dummy24() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy24() const {
  return _internal_has_dummy24();
}
inline void TestRequired::clear_dummy24() {
  dummy24_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline int32_t TestRequired::_internal_dummy24() const {
  return dummy24_;
}
inline int32_t TestRequired::dummy24() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy24)
  return _internal_dummy24();
}
inline void TestRequired::_internal_set_dummy24(int32_t value) {
  _has_bits_[0] |= 0x01000000u;
  dummy24_ = value;
}
inline void TestRequired::set_dummy24(int32_t value) {
  _internal_set_dummy24(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy24)
}

// optional int32 dummy25 = 25;
inline bool TestRequired::_internal_has_dummy25() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy25() const {
  return _internal_has_dummy25();
}
inline void TestRequired::clear_dummy25() {
  dummy25_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline int32_t TestRequired::_internal_dummy25() const {
  return dummy25_;
}
inline int32_t TestRequired::dummy25() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy25)
  return _internal_dummy25();
}
inline void TestRequired::_internal_set_dummy25(int32_t value) {
  _has_bits_[0] |= 0x02000000u;
  dummy25_ = value;
}
inline void TestRequired::set_dummy25(int32_t value) {
  _internal_set_dummy25(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy25)
}

// optional int32 dummy26 = 26;
inline bool TestRequired::_internal_has_dummy26() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy26() const {
  return _internal_has_dummy26();
}
inline void TestRequired::clear_dummy26() {
  dummy26_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline int32_t TestRequired::_internal_dummy26() const {
  return dummy26_;
}
inline int32_t TestRequired::dummy26() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy26)
  return _internal_dummy26();
}
inline void TestRequired::_internal_set_dummy26(int32_t value) {
  _has_bits_[0] |= 0x04000000u;
  dummy26_ = value;
}
inline void TestRequired::set_dummy26(int32_t value) {
  _internal_set_dummy26(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy26)
}

// optional int32 dummy27 = 27;
inline bool TestRequired::_internal_has_dummy27() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy27() const {
  return _internal_has_dummy27();
}
inline void TestRequired::clear_dummy27() {
  dummy27_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline int32_t TestRequired::_internal_dummy27() const {
  return dummy27_;
}
inline int32_t TestRequired::dummy27() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy27)
  return _internal_dummy27();
}
inline void TestRequired::_internal_set_dummy27(int32_t value) {
  _has_bits_[0] |= 0x08000000u;
  dummy27_ = value;
}
inline void TestRequired::set_dummy27(int32_t value) {
  _internal_set_dummy27(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy27)
}

// optional int32 dummy28 = 28;
inline bool TestRequired::_internal_has_dummy28() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy28() const {
  return _internal_has_dummy28();
}
inline void TestRequired::clear_dummy28() {
  dummy28_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline int32_t TestRequired::_internal_dummy28() const {
  return dummy28_;
}
inline int32_t TestRequired::dummy28() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy28)
  return _internal_dummy28();
}
inline void TestRequired::_internal_set_dummy28(int32_t value) {
  _has_bits_[0] |= 0x10000000u;
  dummy28_ = value;
}
inline void TestRequired::set_dummy28(int32_t value) {
  _internal_set_dummy28(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy28)
}

// optional int32 dummy29 = 29;
inline bool TestRequired::_internal_has_dummy29() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy29() const {
  return _internal_has_dummy29();
}
inline void TestRequired::clear_dummy29() {
  dummy29_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline int32_t TestRequired::_internal_dummy29() const {
  return dummy29_;
}
inline int32_t TestRequired::dummy29() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy29)
  return _internal_dummy29();
}
inline void TestRequired::_internal_set_dummy29(int32_t value) {
  _has_bits_[0] |= 0x20000000u;
  dummy29_ = value;
}
inline void TestRequired::set_dummy29(int32_t value) {
  _internal_set_dummy29(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy29)
}

// optional int32 dummy30 = 30;
inline bool TestRequired::_internal_has_dummy30() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy30() const {
  return _internal_has_dummy30();
}
inline void TestRequired::clear_dummy30() {
  dummy30_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline int32_t TestRequired::_internal_dummy30() const {
  return dummy30_;
}
inline int32_t TestRequired::dummy30() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy30)
  return _internal_dummy30();
}
inline void TestRequired::_internal_set_dummy30(int32_t value) {
  _has_bits_[0] |= 0x40000000u;
  dummy30_ = value;
}
inline void TestRequired::set_dummy30(int32_t value) {
  _internal_set_dummy30(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy30)
}

// optional int32 dummy31 = 31;
inline bool TestRequired::_internal_has_dummy31() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TestRequired::has_dummy31() const {
  return _internal_has_dummy31();
}
inline void TestRequired::clear_dummy31() {
  dummy31_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline int32_t TestRequired::_internal_dummy31() const {
  return dummy31_;
}
inline int32_t TestRequired::dummy31() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy31)
  return _internal_dummy31();
}
inline void TestRequired::_internal_set_dummy31(int32_t value) {
  _has_bits_[0] |= 0x80000000u;
  dummy31_ = value;
}
inline void TestRequired::set_dummy31(int32_t value) {
  _internal_set_dummy31(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy31)
}

// optional int32 dummy32 = 32;
inline bool TestRequired::_internal_has_dummy32() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool TestRequired::has_dummy32() const {
  return _internal_has_dummy32();
}
inline void TestRequired::clear_dummy32() {
  dummy32_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline int32_t TestRequired::_internal_dummy32() const {
  return dummy32_;
}
inline int32_t TestRequired::dummy32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.dummy32)
  return _internal_dummy32();
}
inline void TestRequired::_internal_set_dummy32(int32_t value) {
  _has_bits_[1] |= 0x00000001u;
  dummy32_ = value;
}
inline void TestRequired::set_dummy32(int32_t value) {
  _internal_set_dummy32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.dummy32)
}

// required int32 c = 33;
inline bool TestRequired::_internal_has_c() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool TestRequired::has_c() const {
  return _internal_has_c();
}
inline void TestRequired::clear_c() {
  c_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline int32_t TestRequired::_internal_c() const {
  return c_;
}
inline int32_t TestRequired::c() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.c)
  return _internal_c();
}
inline void TestRequired::_internal_set_c(int32_t value) {
  _has_bits_[1] |= 0x00000002u;
  c_ = value;
}
inline void TestRequired::set_c(int32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequired.c)
}

// optional .protobuf_unittest.ForeignMessage optional_foreign = 34;
inline bool TestRequired::_internal_has_optional_foreign() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || optional_foreign_ != nullptr);
  return value;
}
inline bool TestRequired::has_optional_foreign() const {
  return _internal_has_optional_foreign();
}
inline void TestRequired::clear_optional_foreign() {
  if (optional_foreign_ != nullptr) optional_foreign_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::ForeignMessage& TestRequired::_internal_optional_foreign() const {
  const ::protobuf_unittest::ForeignMessage* p = optional_foreign_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::ForeignMessage&>(
      ::protobuf_unittest::_ForeignMessage_default_instance_);
}
inline const ::protobuf_unittest::ForeignMessage& TestRequired::optional_foreign() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequired.optional_foreign)
  return _internal_optional_foreign();
}
inline void TestRequired::unsafe_arena_set_allocated_optional_foreign(
    ::protobuf_unittest::ForeignMessage* optional_foreign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_foreign_);
  }
  optional_foreign_ = optional_foreign;
  if (optional_foreign) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRequired.optional_foreign)
}
inline ::protobuf_unittest::ForeignMessage* TestRequired::release_optional_foreign() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::ForeignMessage* temp = optional_foreign_;
  optional_foreign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestRequired::unsafe_arena_release_optional_foreign() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestRequired.optional_foreign)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::ForeignMessage* temp = optional_foreign_;
  optional_foreign_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestRequired::_internal_mutable_optional_foreign() {
  _has_bits_[0] |= 0x00000001u;
  if (optional_foreign_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::ForeignMessage>(GetArenaForAllocation());
    optional_foreign_ = p;
  }
  return optional_foreign_;
}
inline ::protobuf_unittest::ForeignMessage* TestRequired::mutable_optional_foreign() {
  ::protobuf_unittest::ForeignMessage* _msg = _internal_mutable_optional_foreign();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRequired.optional_foreign)
  return _msg;
}
inline void TestRequired::set_allocated_optional_foreign(::protobuf_unittest::ForeignMessage* optional_foreign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_foreign_;
  }
  if (optional_foreign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_foreign);
    if (message_arena != submessage_arena) {
      optional_foreign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_foreign, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_foreign_ = optional_foreign;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestRequired.optional_foreign)
}

// -------------------------------------------------------------------

// TestRequiredForeign

// optional .protobuf_unittest.TestRequired optional_message = 1;
inline bool TestRequiredForeign::_internal_has_optional_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || optional_message_ != nullptr);
  return value;
}
inline bool TestRequiredForeign::has_optional_message() const {
  return _internal_has_optional_message();
}
inline void TestRequiredForeign::clear_optional_message() {
  if (optional_message_ != nullptr) optional_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestRequired& TestRequiredForeign::_internal_optional_message() const {
  const ::protobuf_unittest::TestRequired* p = optional_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestRequired&>(
      ::protobuf_unittest::_TestRequired_default_instance_);
}
inline const ::protobuf_unittest::TestRequired& TestRequiredForeign::optional_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredForeign.optional_message)
  return _internal_optional_message();
}
inline void TestRequiredForeign::unsafe_arena_set_allocated_optional_message(
    ::protobuf_unittest::TestRequired* optional_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_message_);
  }
  optional_message_ = optional_message;
  if (optional_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRequiredForeign.optional_message)
}
inline ::protobuf_unittest::TestRequired* TestRequiredForeign::release_optional_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestRequired* temp = optional_message_;
  optional_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestRequired* TestRequiredForeign::unsafe_arena_release_optional_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestRequiredForeign.optional_message)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestRequired* temp = optional_message_;
  optional_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestRequired* TestRequiredForeign::_internal_mutable_optional_message() {
  _has_bits_[0] |= 0x00000001u;
  if (optional_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestRequired>(GetArenaForAllocation());
    optional_message_ = p;
  }
  return optional_message_;
}
inline ::protobuf_unittest::TestRequired* TestRequiredForeign::mutable_optional_message() {
  ::protobuf_unittest::TestRequired* _msg = _internal_mutable_optional_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRequiredForeign.optional_message)
  return _msg;
}
inline void TestRequiredForeign::set_allocated_optional_message(::protobuf_unittest::TestRequired* optional_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_message_;
  }
  if (optional_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_message);
    if (message_arena != submessage_arena) {
      optional_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_message_ = optional_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestRequiredForeign.optional_message)
}

// repeated .protobuf_unittest.TestRequired repeated_message = 2;
inline int TestRequiredForeign::_internal_repeated_message_size() const {
  return repeated_message_.size();
}
inline int TestRequiredForeign::repeated_message_size() const {
  return _internal_repeated_message_size();
}
inline void TestRequiredForeign::clear_repeated_message() {
  repeated_message_.Clear();
}
inline ::protobuf_unittest::TestRequired* TestRequiredForeign::mutable_repeated_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRequiredForeign.repeated_message)
  return repeated_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired >*
TestRequiredForeign::mutable_repeated_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestRequiredForeign.repeated_message)
  return &repeated_message_;
}
inline const ::protobuf_unittest::TestRequired& TestRequiredForeign::_internal_repeated_message(int index) const {
  return repeated_message_.Get(index);
}
inline const ::protobuf_unittest::TestRequired& TestRequiredForeign::repeated_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredForeign.repeated_message)
  return _internal_repeated_message(index);
}
inline ::protobuf_unittest::TestRequired* TestRequiredForeign::_internal_add_repeated_message() {
  return repeated_message_.Add();
}
inline ::protobuf_unittest::TestRequired* TestRequiredForeign::add_repeated_message() {
  ::protobuf_unittest::TestRequired* _add = _internal_add_repeated_message();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestRequiredForeign.repeated_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired >&
TestRequiredForeign::repeated_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestRequiredForeign.repeated_message)
  return repeated_message_;
}

// optional int32 dummy = 3;
inline bool TestRequiredForeign::_internal_has_dummy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestRequiredForeign::has_dummy() const {
  return _internal_has_dummy();
}
inline void TestRequiredForeign::clear_dummy() {
  dummy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestRequiredForeign::_internal_dummy() const {
  return dummy_;
}
inline int32_t TestRequiredForeign::dummy() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredForeign.dummy)
  return _internal_dummy();
}
inline void TestRequiredForeign::_internal_set_dummy(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  dummy_ = value;
}
inline void TestRequiredForeign::set_dummy(int32_t value) {
  _internal_set_dummy(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequiredForeign.dummy)
}

// -------------------------------------------------------------------

// TestRequiredMessage

// optional .protobuf_unittest.TestRequired optional_message = 1;
inline bool TestRequiredMessage::_internal_has_optional_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || optional_message_ != nullptr);
  return value;
}
inline bool TestRequiredMessage::has_optional_message() const {
  return _internal_has_optional_message();
}
inline void TestRequiredMessage::clear_optional_message() {
  if (optional_message_ != nullptr) optional_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestRequired& TestRequiredMessage::_internal_optional_message() const {
  const ::protobuf_unittest::TestRequired* p = optional_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestRequired&>(
      ::protobuf_unittest::_TestRequired_default_instance_);
}
inline const ::protobuf_unittest::TestRequired& TestRequiredMessage::optional_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredMessage.optional_message)
  return _internal_optional_message();
}
inline void TestRequiredMessage::unsafe_arena_set_allocated_optional_message(
    ::protobuf_unittest::TestRequired* optional_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_message_);
  }
  optional_message_ = optional_message;
  if (optional_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRequiredMessage.optional_message)
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::release_optional_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestRequired* temp = optional_message_;
  optional_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::unsafe_arena_release_optional_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestRequiredMessage.optional_message)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestRequired* temp = optional_message_;
  optional_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::_internal_mutable_optional_message() {
  _has_bits_[0] |= 0x00000001u;
  if (optional_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestRequired>(GetArenaForAllocation());
    optional_message_ = p;
  }
  return optional_message_;
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::mutable_optional_message() {
  ::protobuf_unittest::TestRequired* _msg = _internal_mutable_optional_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRequiredMessage.optional_message)
  return _msg;
}
inline void TestRequiredMessage::set_allocated_optional_message(::protobuf_unittest::TestRequired* optional_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_message_;
  }
  if (optional_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_message);
    if (message_arena != submessage_arena) {
      optional_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_message_ = optional_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestRequiredMessage.optional_message)
}

// repeated .protobuf_unittest.TestRequired repeated_message = 2;
inline int TestRequiredMessage::_internal_repeated_message_size() const {
  return repeated_message_.size();
}
inline int TestRequiredMessage::repeated_message_size() const {
  return _internal_repeated_message_size();
}
inline void TestRequiredMessage::clear_repeated_message() {
  repeated_message_.Clear();
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::mutable_repeated_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRequiredMessage.repeated_message)
  return repeated_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired >*
TestRequiredMessage::mutable_repeated_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestRequiredMessage.repeated_message)
  return &repeated_message_;
}
inline const ::protobuf_unittest::TestRequired& TestRequiredMessage::_internal_repeated_message(int index) const {
  return repeated_message_.Get(index);
}
inline const ::protobuf_unittest::TestRequired& TestRequiredMessage::repeated_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredMessage.repeated_message)
  return _internal_repeated_message(index);
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::_internal_add_repeated_message() {
  return repeated_message_.Add();
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::add_repeated_message() {
  ::protobuf_unittest::TestRequired* _add = _internal_add_repeated_message();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestRequiredMessage.repeated_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestRequired >&
TestRequiredMessage::repeated_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestRequiredMessage.repeated_message)
  return repeated_message_;
}

// required .protobuf_unittest.TestRequired required_message = 3;
inline bool TestRequiredMessage::_internal_has_required_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || required_message_ != nullptr);
  return value;
}
inline bool TestRequiredMessage::has_required_message() const {
  return _internal_has_required_message();
}
inline void TestRequiredMessage::clear_required_message() {
  if (required_message_ != nullptr) required_message_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestRequired& TestRequiredMessage::_internal_required_message() const {
  const ::protobuf_unittest::TestRequired* p = required_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestRequired&>(
      ::protobuf_unittest::_TestRequired_default_instance_);
}
inline const ::protobuf_unittest::TestRequired& TestRequiredMessage::required_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredMessage.required_message)
  return _internal_required_message();
}
inline void TestRequiredMessage::unsafe_arena_set_allocated_required_message(
    ::protobuf_unittest::TestRequired* required_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(required_message_);
  }
  required_message_ = required_message;
  if (required_message) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRequiredMessage.required_message)
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::release_required_message() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestRequired* temp = required_message_;
  required_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::unsafe_arena_release_required_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestRequiredMessage.required_message)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestRequired* temp = required_message_;
  required_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::_internal_mutable_required_message() {
  _has_bits_[0] |= 0x00000002u;
  if (required_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestRequired>(GetArenaForAllocation());
    required_message_ = p;
  }
  return required_message_;
}
inline ::protobuf_unittest::TestRequired* TestRequiredMessage::mutable_required_message() {
  ::protobuf_unittest::TestRequired* _msg = _internal_mutable_required_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRequiredMessage.required_message)
  return _msg;
}
inline void TestRequiredMessage::set_allocated_required_message(::protobuf_unittest::TestRequired* required_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete required_message_;
  }
  if (required_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(required_message);
    if (message_arena != submessage_arena) {
      required_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, required_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  required_message_ = required_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestRequiredMessage.required_message)
}

// -------------------------------------------------------------------

// TestNestedRequiredForeign

// optional .protobuf_unittest.TestNestedRequiredForeign child = 1;
inline bool TestNestedRequiredForeign::_internal_has_child() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || child_ != nullptr);
  return value;
}
inline bool TestNestedRequiredForeign::has_child() const {
  return _internal_has_child();
}
inline void TestNestedRequiredForeign::clear_child() {
  if (child_ != nullptr) child_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestNestedRequiredForeign& TestNestedRequiredForeign::_internal_child() const {
  const ::protobuf_unittest::TestNestedRequiredForeign* p = child_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestNestedRequiredForeign&>(
      ::protobuf_unittest::_TestNestedRequiredForeign_default_instance_);
}
inline const ::protobuf_unittest::TestNestedRequiredForeign& TestNestedRequiredForeign::child() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedRequiredForeign.child)
  return _internal_child();
}
inline void TestNestedRequiredForeign::unsafe_arena_set_allocated_child(
    ::protobuf_unittest::TestNestedRequiredForeign* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(child_);
  }
  child_ = child;
  if (child) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestNestedRequiredForeign.child)
}
inline ::protobuf_unittest::TestNestedRequiredForeign* TestNestedRequiredForeign::release_child() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestNestedRequiredForeign* temp = child_;
  child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestNestedRequiredForeign* TestNestedRequiredForeign::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedRequiredForeign.child)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestNestedRequiredForeign* temp = child_;
  child_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestNestedRequiredForeign* TestNestedRequiredForeign::_internal_mutable_child() {
  _has_bits_[0] |= 0x00000001u;
  if (child_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestNestedRequiredForeign>(GetArenaForAllocation());
    child_ = p;
  }
  return child_;
}
inline ::protobuf_unittest::TestNestedRequiredForeign* TestNestedRequiredForeign::mutable_child() {
  ::protobuf_unittest::TestNestedRequiredForeign* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedRequiredForeign.child)
  return _msg;
}
inline void TestNestedRequiredForeign::set_allocated_child(::protobuf_unittest::TestNestedRequiredForeign* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  child_ = child;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedRequiredForeign.child)
}

// optional .protobuf_unittest.TestRequiredForeign payload = 2;
inline bool TestNestedRequiredForeign::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || payload_ != nullptr);
  return value;
}
inline bool TestNestedRequiredForeign::has_payload() const {
  return _internal_has_payload();
}
inline void TestNestedRequiredForeign::clear_payload() {
  if (payload_ != nullptr) payload_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestRequiredForeign& TestNestedRequiredForeign::_internal_payload() const {
  const ::protobuf_unittest::TestRequiredForeign* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestRequiredForeign&>(
      ::protobuf_unittest::_TestRequiredForeign_default_instance_);
}
inline const ::protobuf_unittest::TestRequiredForeign& TestNestedRequiredForeign::payload() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedRequiredForeign.payload)
  return _internal_payload();
}
inline void TestNestedRequiredForeign::unsafe_arena_set_allocated_payload(
    ::protobuf_unittest::TestRequiredForeign* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestNestedRequiredForeign.payload)
}
inline ::protobuf_unittest::TestRequiredForeign* TestNestedRequiredForeign::release_payload() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestRequiredForeign* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestRequiredForeign* TestNestedRequiredForeign::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedRequiredForeign.payload)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestRequiredForeign* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestRequiredForeign* TestNestedRequiredForeign::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000002u;
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestRequiredForeign>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::protobuf_unittest::TestRequiredForeign* TestNestedRequiredForeign::mutable_payload() {
  ::protobuf_unittest::TestRequiredForeign* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedRequiredForeign.payload)
  return _msg;
}
inline void TestNestedRequiredForeign::set_allocated_payload(::protobuf_unittest::TestRequiredForeign* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedRequiredForeign.payload)
}

// optional int32 dummy = 3;
inline bool TestNestedRequiredForeign::_internal_has_dummy() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestNestedRequiredForeign::has_dummy() const {
  return _internal_has_dummy();
}
inline void TestNestedRequiredForeign::clear_dummy() {
  dummy_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestNestedRequiredForeign::_internal_dummy() const {
  return dummy_;
}
inline int32_t TestNestedRequiredForeign::dummy() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedRequiredForeign.dummy)
  return _internal_dummy();
}
inline void TestNestedRequiredForeign::_internal_set_dummy(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  dummy_ = value;
}
inline void TestNestedRequiredForeign::set_dummy(int32_t value) {
  _internal_set_dummy(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestNestedRequiredForeign.dummy)
}

// -------------------------------------------------------------------

// TestForeignNested

// optional .protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
inline bool TestForeignNested::_internal_has_foreign_nested() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || foreign_nested_ != nullptr);
  return value;
}
inline bool TestForeignNested::has_foreign_nested() const {
  return _internal_has_foreign_nested();
}
inline void TestForeignNested::clear_foreign_nested() {
  if (foreign_nested_ != nullptr) foreign_nested_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestForeignNested::_internal_foreign_nested() const {
  const ::protobuf_unittest::TestAllTypes_NestedMessage* p = foreign_nested_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes_NestedMessage&>(
      ::protobuf_unittest::_TestAllTypes_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes_NestedMessage& TestForeignNested::foreign_nested() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestForeignNested.foreign_nested)
  return _internal_foreign_nested();
}
inline void TestForeignNested::unsafe_arena_set_allocated_foreign_nested(
    ::protobuf_unittest::TestAllTypes_NestedMessage* foreign_nested) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreign_nested_);
  }
  foreign_nested_ = foreign_nested;
  if (foreign_nested) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestForeignNested.foreign_nested)
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestForeignNested::release_foreign_nested() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes_NestedMessage* temp = foreign_nested_;
  foreign_nested_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestForeignNested::unsafe_arena_release_foreign_nested() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestForeignNested.foreign_nested)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes_NestedMessage* temp = foreign_nested_;
  foreign_nested_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestForeignNested::_internal_mutable_foreign_nested() {
  _has_bits_[0] |= 0x00000001u;
  if (foreign_nested_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes_NestedMessage>(GetArenaForAllocation());
    foreign_nested_ = p;
  }
  return foreign_nested_;
}
inline ::protobuf_unittest::TestAllTypes_NestedMessage* TestForeignNested::mutable_foreign_nested() {
  ::protobuf_unittest::TestAllTypes_NestedMessage* _msg = _internal_mutable_foreign_nested();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestForeignNested.foreign_nested)
  return _msg;
}
inline void TestForeignNested::set_allocated_foreign_nested(::protobuf_unittest::TestAllTypes_NestedMessage* foreign_nested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete foreign_nested_;
  }
  if (foreign_nested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foreign_nested);
    if (message_arena != submessage_arena) {
      foreign_nested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreign_nested, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  foreign_nested_ = foreign_nested;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestForeignNested.foreign_nested)
}

// -------------------------------------------------------------------

// TestEmptyMessage

// -------------------------------------------------------------------

// TestEmptyMessageWithExtensions

// -------------------------------------------------------------------

// TestPickleNestedMessage_NestedMessage_NestedNestedMessage

// optional int32 cc = 1;
inline bool TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_internal_has_cc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestPickleNestedMessage_NestedMessage_NestedNestedMessage::has_cc() const {
  return _internal_has_cc();
}
inline void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::clear_cc() {
  cc_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_internal_cc() const {
  return cc_;
}
inline int32_t TestPickleNestedMessage_NestedMessage_NestedNestedMessage::cc() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage.cc)
  return _internal_cc();
}
inline void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::_internal_set_cc(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  cc_ = value;
}
inline void TestPickleNestedMessage_NestedMessage_NestedNestedMessage::set_cc(int32_t value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage.cc)
}

// -------------------------------------------------------------------

// TestPickleNestedMessage_NestedMessage

// optional int32 bb = 1;
inline bool TestPickleNestedMessage_NestedMessage::_internal_has_bb() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestPickleNestedMessage_NestedMessage::has_bb() const {
  return _internal_has_bb();
}
inline void TestPickleNestedMessage_NestedMessage::clear_bb() {
  bb_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestPickleNestedMessage_NestedMessage::_internal_bb() const {
  return bb_;
}
inline int32_t TestPickleNestedMessage_NestedMessage::bb() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPickleNestedMessage.NestedMessage.bb)
  return _internal_bb();
}
inline void TestPickleNestedMessage_NestedMessage::_internal_set_bb(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  bb_ = value;
}
inline void TestPickleNestedMessage_NestedMessage::set_bb(int32_t value) {
  _internal_set_bb(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPickleNestedMessage.NestedMessage.bb)
}

// -------------------------------------------------------------------

// TestPickleNestedMessage

// -------------------------------------------------------------------

// TestMultipleExtensionRanges

// -------------------------------------------------------------------

// TestReallyLargeTagNumber

// optional int32 a = 1;
inline bool TestReallyLargeTagNumber::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestReallyLargeTagNumber::has_a() const {
  return _internal_has_a();
}
inline void TestReallyLargeTagNumber::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestReallyLargeTagNumber::_internal_a() const {
  return a_;
}
inline int32_t TestReallyLargeTagNumber::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestReallyLargeTagNumber.a)
  return _internal_a();
}
inline void TestReallyLargeTagNumber::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void TestReallyLargeTagNumber::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestReallyLargeTagNumber.a)
}

// optional int32 bb = 268435455;
inline bool TestReallyLargeTagNumber::_internal_has_bb() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestReallyLargeTagNumber::has_bb() const {
  return _internal_has_bb();
}
inline void TestReallyLargeTagNumber::clear_bb() {
  bb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestReallyLargeTagNumber::_internal_bb() const {
  return bb_;
}
inline int32_t TestReallyLargeTagNumber::bb() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestReallyLargeTagNumber.bb)
  return _internal_bb();
}
inline void TestReallyLargeTagNumber::_internal_set_bb(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  bb_ = value;
}
inline void TestReallyLargeTagNumber::set_bb(int32_t value) {
  _internal_set_bb(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestReallyLargeTagNumber.bb)
}

// -------------------------------------------------------------------

// TestRecursiveMessage

// optional .protobuf_unittest.TestRecursiveMessage a = 1;
inline bool TestRecursiveMessage::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || a_ != nullptr);
  return value;
}
inline bool TestRecursiveMessage::has_a() const {
  return _internal_has_a();
}
inline void TestRecursiveMessage::clear_a() {
  if (a_ != nullptr) a_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestRecursiveMessage& TestRecursiveMessage::_internal_a() const {
  const ::protobuf_unittest::TestRecursiveMessage* p = a_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestRecursiveMessage&>(
      ::protobuf_unittest::_TestRecursiveMessage_default_instance_);
}
inline const ::protobuf_unittest::TestRecursiveMessage& TestRecursiveMessage::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRecursiveMessage.a)
  return _internal_a();
}
inline void TestRecursiveMessage::unsafe_arena_set_allocated_a(
    ::protobuf_unittest::TestRecursiveMessage* a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  a_ = a;
  if (a) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRecursiveMessage.a)
}
inline ::protobuf_unittest::TestRecursiveMessage* TestRecursiveMessage::release_a() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestRecursiveMessage* temp = a_;
  a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestRecursiveMessage* TestRecursiveMessage::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestRecursiveMessage.a)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestRecursiveMessage* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestRecursiveMessage* TestRecursiveMessage::_internal_mutable_a() {
  _has_bits_[0] |= 0x00000001u;
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestRecursiveMessage>(GetArenaForAllocation());
    a_ = p;
  }
  return a_;
}
inline ::protobuf_unittest::TestRecursiveMessage* TestRecursiveMessage::mutable_a() {
  ::protobuf_unittest::TestRecursiveMessage* _msg = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRecursiveMessage.a)
  return _msg;
}
inline void TestRecursiveMessage::set_allocated_a(::protobuf_unittest::TestRecursiveMessage* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(a);
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestRecursiveMessage.a)
}

// optional int32 i = 2;
inline bool TestRecursiveMessage::_internal_has_i() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestRecursiveMessage::has_i() const {
  return _internal_has_i();
}
inline void TestRecursiveMessage::clear_i() {
  i_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestRecursiveMessage::_internal_i() const {
  return i_;
}
inline int32_t TestRecursiveMessage::i() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRecursiveMessage.i)
  return _internal_i();
}
inline void TestRecursiveMessage::_internal_set_i(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  i_ = value;
}
inline void TestRecursiveMessage::set_i(int32_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRecursiveMessage.i)
}

// -------------------------------------------------------------------

// TestMutualRecursionA_SubMessage

// optional .protobuf_unittest.TestMutualRecursionB b = 1;
inline bool TestMutualRecursionA_SubMessage::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || b_ != nullptr);
  return value;
}
inline bool TestMutualRecursionA_SubMessage::has_b() const {
  return _internal_has_b();
}
inline void TestMutualRecursionA_SubMessage::clear_b() {
  if (b_ != nullptr) b_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestMutualRecursionB& TestMutualRecursionA_SubMessage::_internal_b() const {
  const ::protobuf_unittest::TestMutualRecursionB* p = b_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestMutualRecursionB&>(
      ::protobuf_unittest::_TestMutualRecursionB_default_instance_);
}
inline const ::protobuf_unittest::TestMutualRecursionB& TestMutualRecursionA_SubMessage::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestMutualRecursionA.SubMessage.b)
  return _internal_b();
}
inline void TestMutualRecursionA_SubMessage::unsafe_arena_set_allocated_b(
    ::protobuf_unittest::TestMutualRecursionB* b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  b_ = b;
  if (b) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.SubMessage.b)
}
inline ::protobuf_unittest::TestMutualRecursionB* TestMutualRecursionA_SubMessage::release_b() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestMutualRecursionB* temp = b_;
  b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionB* TestMutualRecursionA_SubMessage::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestMutualRecursionA.SubMessage.b)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestMutualRecursionB* temp = b_;
  b_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionB* TestMutualRecursionA_SubMessage::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000001u;
  if (b_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionB>(GetArenaForAllocation());
    b_ = p;
  }
  return b_;
}
inline ::protobuf_unittest::TestMutualRecursionB* TestMutualRecursionA_SubMessage::mutable_b() {
  ::protobuf_unittest::TestMutualRecursionB* _msg = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestMutualRecursionA.SubMessage.b)
  return _msg;
}
inline void TestMutualRecursionA_SubMessage::set_allocated_b(::protobuf_unittest::TestMutualRecursionB* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete b_;
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(b);
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestMutualRecursionA.SubMessage.b)
}

// -------------------------------------------------------------------

// TestMutualRecursionA_SubGroup

// optional .protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
inline bool TestMutualRecursionA_SubGroup::_internal_has_sub_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sub_message_ != nullptr);
  return value;
}
inline bool TestMutualRecursionA_SubGroup::has_sub_message() const {
  return _internal_has_sub_message();
}
inline void TestMutualRecursionA_SubGroup::clear_sub_message() {
  if (sub_message_ != nullptr) sub_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestMutualRecursionA_SubMessage& TestMutualRecursionA_SubGroup::_internal_sub_message() const {
  const ::protobuf_unittest::TestMutualRecursionA_SubMessage* p = sub_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestMutualRecursionA_SubMessage&>(
      ::protobuf_unittest::_TestMutualRecursionA_SubMessage_default_instance_);
}
inline const ::protobuf_unittest::TestMutualRecursionA_SubMessage& TestMutualRecursionA_SubGroup::sub_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestMutualRecursionA.SubGroup.sub_message)
  return _internal_sub_message();
}
inline void TestMutualRecursionA_SubGroup::unsafe_arena_set_allocated_sub_message(
    ::protobuf_unittest::TestMutualRecursionA_SubMessage* sub_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_message_);
  }
  sub_message_ = sub_message;
  if (sub_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.SubGroup.sub_message)
}
inline ::protobuf_unittest::TestMutualRecursionA_SubMessage* TestMutualRecursionA_SubGroup::release_sub_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestMutualRecursionA_SubMessage* temp = sub_message_;
  sub_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionA_SubMessage* TestMutualRecursionA_SubGroup::unsafe_arena_release_sub_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestMutualRecursionA.SubGroup.sub_message)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestMutualRecursionA_SubMessage* temp = sub_message_;
  sub_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionA_SubMessage* TestMutualRecursionA_SubGroup::_internal_mutable_sub_message() {
  _has_bits_[0] |= 0x00000001u;
  if (sub_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionA_SubMessage>(GetArenaForAllocation());
    sub_message_ = p;
  }
  return sub_message_;
}
inline ::protobuf_unittest::TestMutualRecursionA_SubMessage* TestMutualRecursionA_SubGroup::mutable_sub_message() {
  ::protobuf_unittest::TestMutualRecursionA_SubMessage* _msg = _internal_mutable_sub_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestMutualRecursionA.SubGroup.sub_message)
  return _msg;
}
inline void TestMutualRecursionA_SubGroup::set_allocated_sub_message(::protobuf_unittest::TestMutualRecursionA_SubMessage* sub_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sub_message_;
  }
  if (sub_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sub_message);
    if (message_arena != submessage_arena) {
      sub_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sub_message_ = sub_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestMutualRecursionA.SubGroup.sub_message)
}

// optional .protobuf_unittest.TestAllTypes not_in_this_scc = 4;
inline bool TestMutualRecursionA_SubGroup::_internal_has_not_in_this_scc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || not_in_this_scc_ != nullptr);
  return value;
}
inline bool TestMutualRecursionA_SubGroup::has_not_in_this_scc() const {
  return _internal_has_not_in_this_scc();
}
inline void TestMutualRecursionA_SubGroup::clear_not_in_this_scc() {
  if (not_in_this_scc_ != nullptr) not_in_this_scc_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestAllTypes& TestMutualRecursionA_SubGroup::_internal_not_in_this_scc() const {
  const ::protobuf_unittest::TestAllTypes* p = not_in_this_scc_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestMutualRecursionA_SubGroup::not_in_this_scc() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestMutualRecursionA.SubGroup.not_in_this_scc)
  return _internal_not_in_this_scc();
}
inline void TestMutualRecursionA_SubGroup::unsafe_arena_set_allocated_not_in_this_scc(
    ::protobuf_unittest::TestAllTypes* not_in_this_scc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(not_in_this_scc_);
  }
  not_in_this_scc_ = not_in_this_scc;
  if (not_in_this_scc) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.SubGroup.not_in_this_scc)
}
inline ::protobuf_unittest::TestAllTypes* TestMutualRecursionA_SubGroup::release_not_in_this_scc() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = not_in_this_scc_;
  not_in_this_scc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestMutualRecursionA_SubGroup::unsafe_arena_release_not_in_this_scc() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestMutualRecursionA.SubGroup.not_in_this_scc)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = not_in_this_scc_;
  not_in_this_scc_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestMutualRecursionA_SubGroup::_internal_mutable_not_in_this_scc() {
  _has_bits_[0] |= 0x00000002u;
  if (not_in_this_scc_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    not_in_this_scc_ = p;
  }
  return not_in_this_scc_;
}
inline ::protobuf_unittest::TestAllTypes* TestMutualRecursionA_SubGroup::mutable_not_in_this_scc() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_not_in_this_scc();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestMutualRecursionA.SubGroup.not_in_this_scc)
  return _msg;
}
inline void TestMutualRecursionA_SubGroup::set_allocated_not_in_this_scc(::protobuf_unittest::TestAllTypes* not_in_this_scc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete not_in_this_scc_;
  }
  if (not_in_this_scc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(not_in_this_scc);
    if (message_arena != submessage_arena) {
      not_in_this_scc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_in_this_scc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  not_in_this_scc_ = not_in_this_scc;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestMutualRecursionA.SubGroup.not_in_this_scc)
}

// -------------------------------------------------------------------

// TestMutualRecursionA

// optional .protobuf_unittest.TestMutualRecursionB bb = 1;
inline bool TestMutualRecursionA::_internal_has_bb() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bb_ != nullptr);
  return value;
}
inline bool TestMutualRecursionA::has_bb() const {
  return _internal_has_bb();
}
inline void TestMutualRecursionA::clear_bb() {
  if (bb_ != nullptr) bb_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestMutualRecursionB& TestMutualRecursionA::_internal_bb() const {
  const ::protobuf_unittest::TestMutualRecursionB* p = bb_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestMutualRecursionB&>(
      ::protobuf_unittest::_TestMutualRecursionB_default_instance_);
}
inline const ::protobuf_unittest::TestMutualRecursionB& TestMutualRecursionA::bb() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestMutualRecursionA.bb)
  return _internal_bb();
}
inline void TestMutualRecursionA::unsafe_arena_set_allocated_bb(
    ::protobuf_unittest::TestMutualRecursionB* bb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bb_);
  }
  bb_ = bb;
  if (bb) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.bb)
}
inline ::protobuf_unittest::TestMutualRecursionB* TestMutualRecursionA::release_bb() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestMutualRecursionB* temp = bb_;
  bb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionB* TestMutualRecursionA::unsafe_arena_release_bb() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestMutualRecursionA.bb)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestMutualRecursionB* temp = bb_;
  bb_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionB* TestMutualRecursionA::_internal_mutable_bb() {
  _has_bits_[0] |= 0x00000001u;
  if (bb_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionB>(GetArenaForAllocation());
    bb_ = p;
  }
  return bb_;
}
inline ::protobuf_unittest::TestMutualRecursionB* TestMutualRecursionA::mutable_bb() {
  ::protobuf_unittest::TestMutualRecursionB* _msg = _internal_mutable_bb();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestMutualRecursionA.bb)
  return _msg;
}
inline void TestMutualRecursionA::set_allocated_bb(::protobuf_unittest::TestMutualRecursionB* bb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bb_;
  }
  if (bb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bb);
    if (message_arena != submessage_arena) {
      bb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bb_ = bb;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestMutualRecursionA.bb)
}

// optional group SubGroup = 2 { ... };
inline bool TestMutualRecursionA::_internal_has_subgroup() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || subgroup_ != nullptr);
  return value;
}
inline bool TestMutualRecursionA::has_subgroup() const {
  return _internal_has_subgroup();
}
inline void TestMutualRecursionA::clear_subgroup() {
  if (subgroup_ != nullptr) subgroup_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestMutualRecursionA_SubGroup& TestMutualRecursionA::_internal_subgroup() const {
  const ::protobuf_unittest::TestMutualRecursionA_SubGroup* p = subgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestMutualRecursionA_SubGroup&>(
      ::protobuf_unittest::_TestMutualRecursionA_SubGroup_default_instance_);
}
inline const ::protobuf_unittest::TestMutualRecursionA_SubGroup& TestMutualRecursionA::subgroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestMutualRecursionA.subgroup)
  return _internal_subgroup();
}
inline void TestMutualRecursionA::unsafe_arena_set_allocated_subgroup(
    ::protobuf_unittest::TestMutualRecursionA_SubGroup* subgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subgroup_);
  }
  subgroup_ = subgroup;
  if (subgroup) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionA.subgroup)
}
inline ::protobuf_unittest::TestMutualRecursionA_SubGroup* TestMutualRecursionA::release_subgroup() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestMutualRecursionA_SubGroup* temp = subgroup_;
  subgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionA_SubGroup* TestMutualRecursionA::unsafe_arena_release_subgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestMutualRecursionA.subgroup)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestMutualRecursionA_SubGroup* temp = subgroup_;
  subgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionA_SubGroup* TestMutualRecursionA::_internal_mutable_subgroup() {
  _has_bits_[0] |= 0x00000002u;
  if (subgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionA_SubGroup>(GetArenaForAllocation());
    subgroup_ = p;
  }
  return subgroup_;
}
inline ::protobuf_unittest::TestMutualRecursionA_SubGroup* TestMutualRecursionA::mutable_subgroup() {
  ::protobuf_unittest::TestMutualRecursionA_SubGroup* _msg = _internal_mutable_subgroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestMutualRecursionA.subgroup)
  return _msg;
}
inline void TestMutualRecursionA::set_allocated_subgroup(::protobuf_unittest::TestMutualRecursionA_SubGroup* subgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subgroup_;
  }
  if (subgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subgroup);
    if (message_arena != submessage_arena) {
      subgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subgroup_ = subgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestMutualRecursionA.subgroup)
}

// -------------------------------------------------------------------

// TestMutualRecursionB

// optional .protobuf_unittest.TestMutualRecursionA a = 1;
inline bool TestMutualRecursionB::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || a_ != nullptr);
  return value;
}
inline bool TestMutualRecursionB::has_a() const {
  return _internal_has_a();
}
inline void TestMutualRecursionB::clear_a() {
  if (a_ != nullptr) a_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestMutualRecursionA& TestMutualRecursionB::_internal_a() const {
  const ::protobuf_unittest::TestMutualRecursionA* p = a_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestMutualRecursionA&>(
      ::protobuf_unittest::_TestMutualRecursionA_default_instance_);
}
inline const ::protobuf_unittest::TestMutualRecursionA& TestMutualRecursionB::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestMutualRecursionB.a)
  return _internal_a();
}
inline void TestMutualRecursionB::unsafe_arena_set_allocated_a(
    ::protobuf_unittest::TestMutualRecursionA* a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  a_ = a;
  if (a) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMutualRecursionB.a)
}
inline ::protobuf_unittest::TestMutualRecursionA* TestMutualRecursionB::release_a() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestMutualRecursionA* temp = a_;
  a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionA* TestMutualRecursionB::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestMutualRecursionB.a)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestMutualRecursionA* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestMutualRecursionA* TestMutualRecursionB::_internal_mutable_a() {
  _has_bits_[0] |= 0x00000001u;
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestMutualRecursionA>(GetArenaForAllocation());
    a_ = p;
  }
  return a_;
}
inline ::protobuf_unittest::TestMutualRecursionA* TestMutualRecursionB::mutable_a() {
  ::protobuf_unittest::TestMutualRecursionA* _msg = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestMutualRecursionB.a)
  return _msg;
}
inline void TestMutualRecursionB::set_allocated_a(::protobuf_unittest::TestMutualRecursionA* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(a);
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestMutualRecursionB.a)
}

// optional int32 optional_int32 = 2;
inline bool TestMutualRecursionB::_internal_has_optional_int32() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestMutualRecursionB::has_optional_int32() const {
  return _internal_has_optional_int32();
}
inline void TestMutualRecursionB::clear_optional_int32() {
  optional_int32_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestMutualRecursionB::_internal_optional_int32() const {
  return optional_int32_;
}
inline int32_t TestMutualRecursionB::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestMutualRecursionB.optional_int32)
  return _internal_optional_int32();
}
inline void TestMutualRecursionB::_internal_set_optional_int32(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  optional_int32_ = value;
}
inline void TestMutualRecursionB::set_optional_int32(int32_t value) {
  _internal_set_optional_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestMutualRecursionB.optional_int32)
}

// -------------------------------------------------------------------

// TestIsInitialized_SubMessage_SubGroup

// required int32 i = 2;
inline bool TestIsInitialized_SubMessage_SubGroup::_internal_has_i() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestIsInitialized_SubMessage_SubGroup::has_i() const {
  return _internal_has_i();
}
inline void TestIsInitialized_SubMessage_SubGroup::clear_i() {
  i_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestIsInitialized_SubMessage_SubGroup::_internal_i() const {
  return i_;
}
inline int32_t TestIsInitialized_SubMessage_SubGroup::i() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup.i)
  return _internal_i();
}
inline void TestIsInitialized_SubMessage_SubGroup::_internal_set_i(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  i_ = value;
}
inline void TestIsInitialized_SubMessage_SubGroup::set_i(int32_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestIsInitialized.SubMessage.SubGroup.i)
}

// -------------------------------------------------------------------

// TestIsInitialized_SubMessage

// optional group SubGroup = 1 { ... };
inline bool TestIsInitialized_SubMessage::_internal_has_subgroup() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || subgroup_ != nullptr);
  return value;
}
inline bool TestIsInitialized_SubMessage::has_subgroup() const {
  return _internal_has_subgroup();
}
inline void TestIsInitialized_SubMessage::clear_subgroup() {
  if (subgroup_ != nullptr) subgroup_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup& TestIsInitialized_SubMessage::_internal_subgroup() const {
  const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* p = subgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup&>(
      ::protobuf_unittest::_TestIsInitialized_SubMessage_SubGroup_default_instance_);
}
inline const ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup& TestIsInitialized_SubMessage::subgroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestIsInitialized.SubMessage.subgroup)
  return _internal_subgroup();
}
inline void TestIsInitialized_SubMessage::unsafe_arena_set_allocated_subgroup(
    ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* subgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subgroup_);
  }
  subgroup_ = subgroup;
  if (subgroup) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestIsInitialized.SubMessage.subgroup)
}
inline ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* TestIsInitialized_SubMessage::release_subgroup() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* temp = subgroup_;
  subgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* TestIsInitialized_SubMessage::unsafe_arena_release_subgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestIsInitialized.SubMessage.subgroup)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* temp = subgroup_;
  subgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* TestIsInitialized_SubMessage::_internal_mutable_subgroup() {
  _has_bits_[0] |= 0x00000001u;
  if (subgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup>(GetArenaForAllocation());
    subgroup_ = p;
  }
  return subgroup_;
}
inline ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* TestIsInitialized_SubMessage::mutable_subgroup() {
  ::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* _msg = _internal_mutable_subgroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestIsInitialized.SubMessage.subgroup)
  return _msg;
}
inline void TestIsInitialized_SubMessage::set_allocated_subgroup(::protobuf_unittest::TestIsInitialized_SubMessage_SubGroup* subgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subgroup_;
  }
  if (subgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subgroup);
    if (message_arena != submessage_arena) {
      subgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subgroup_ = subgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestIsInitialized.SubMessage.subgroup)
}

// -------------------------------------------------------------------

// TestIsInitialized

// optional .protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
inline bool TestIsInitialized::_internal_has_sub_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sub_message_ != nullptr);
  return value;
}
inline bool TestIsInitialized::has_sub_message() const {
  return _internal_has_sub_message();
}
inline void TestIsInitialized::clear_sub_message() {
  if (sub_message_ != nullptr) sub_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestIsInitialized_SubMessage& TestIsInitialized::_internal_sub_message() const {
  const ::protobuf_unittest::TestIsInitialized_SubMessage* p = sub_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestIsInitialized_SubMessage&>(
      ::protobuf_unittest::_TestIsInitialized_SubMessage_default_instance_);
}
inline const ::protobuf_unittest::TestIsInitialized_SubMessage& TestIsInitialized::sub_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestIsInitialized.sub_message)
  return _internal_sub_message();
}
inline void TestIsInitialized::unsafe_arena_set_allocated_sub_message(
    ::protobuf_unittest::TestIsInitialized_SubMessage* sub_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_message_);
  }
  sub_message_ = sub_message;
  if (sub_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestIsInitialized.sub_message)
}
inline ::protobuf_unittest::TestIsInitialized_SubMessage* TestIsInitialized::release_sub_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestIsInitialized_SubMessage* temp = sub_message_;
  sub_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestIsInitialized_SubMessage* TestIsInitialized::unsafe_arena_release_sub_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestIsInitialized.sub_message)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestIsInitialized_SubMessage* temp = sub_message_;
  sub_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestIsInitialized_SubMessage* TestIsInitialized::_internal_mutable_sub_message() {
  _has_bits_[0] |= 0x00000001u;
  if (sub_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestIsInitialized_SubMessage>(GetArenaForAllocation());
    sub_message_ = p;
  }
  return sub_message_;
}
inline ::protobuf_unittest::TestIsInitialized_SubMessage* TestIsInitialized::mutable_sub_message() {
  ::protobuf_unittest::TestIsInitialized_SubMessage* _msg = _internal_mutable_sub_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestIsInitialized.sub_message)
  return _msg;
}
inline void TestIsInitialized::set_allocated_sub_message(::protobuf_unittest::TestIsInitialized_SubMessage* sub_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sub_message_;
  }
  if (sub_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sub_message);
    if (message_arena != submessage_arena) {
      sub_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sub_message_ = sub_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestIsInitialized.sub_message)
}

// -------------------------------------------------------------------

// TestDupFieldNumber_Foo

// optional int32 a = 1;
inline bool TestDupFieldNumber_Foo::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestDupFieldNumber_Foo::has_a() const {
  return _internal_has_a();
}
inline void TestDupFieldNumber_Foo::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestDupFieldNumber_Foo::_internal_a() const {
  return a_;
}
inline int32_t TestDupFieldNumber_Foo::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDupFieldNumber.Foo.a)
  return _internal_a();
}
inline void TestDupFieldNumber_Foo::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void TestDupFieldNumber_Foo::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDupFieldNumber.Foo.a)
}

// -------------------------------------------------------------------

// TestDupFieldNumber_Bar

// optional int32 a = 1;
inline bool TestDupFieldNumber_Bar::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestDupFieldNumber_Bar::has_a() const {
  return _internal_has_a();
}
inline void TestDupFieldNumber_Bar::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestDupFieldNumber_Bar::_internal_a() const {
  return a_;
}
inline int32_t TestDupFieldNumber_Bar::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDupFieldNumber.Bar.a)
  return _internal_a();
}
inline void TestDupFieldNumber_Bar::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void TestDupFieldNumber_Bar::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDupFieldNumber.Bar.a)
}

// -------------------------------------------------------------------

// TestDupFieldNumber

// optional int32 a = 1;
inline bool TestDupFieldNumber::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestDupFieldNumber::has_a() const {
  return _internal_has_a();
}
inline void TestDupFieldNumber::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestDupFieldNumber::_internal_a() const {
  return a_;
}
inline int32_t TestDupFieldNumber::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDupFieldNumber.a)
  return _internal_a();
}
inline void TestDupFieldNumber::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  a_ = value;
}
inline void TestDupFieldNumber::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDupFieldNumber.a)
}

// optional group Foo = 2 { ... };
inline bool TestDupFieldNumber::_internal_has_foo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || foo_ != nullptr);
  return value;
}
inline bool TestDupFieldNumber::has_foo() const {
  return _internal_has_foo();
}
inline void TestDupFieldNumber::clear_foo() {
  if (foo_ != nullptr) foo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestDupFieldNumber_Foo& TestDupFieldNumber::_internal_foo() const {
  const ::protobuf_unittest::TestDupFieldNumber_Foo* p = foo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestDupFieldNumber_Foo&>(
      ::protobuf_unittest::_TestDupFieldNumber_Foo_default_instance_);
}
inline const ::protobuf_unittest::TestDupFieldNumber_Foo& TestDupFieldNumber::foo() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDupFieldNumber.foo)
  return _internal_foo();
}
inline void TestDupFieldNumber::unsafe_arena_set_allocated_foo(
    ::protobuf_unittest::TestDupFieldNumber_Foo* foo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(foo_);
  }
  foo_ = foo;
  if (foo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDupFieldNumber.foo)
}
inline ::protobuf_unittest::TestDupFieldNumber_Foo* TestDupFieldNumber::release_foo() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestDupFieldNumber_Foo* temp = foo_;
  foo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestDupFieldNumber_Foo* TestDupFieldNumber::unsafe_arena_release_foo() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestDupFieldNumber.foo)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestDupFieldNumber_Foo* temp = foo_;
  foo_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestDupFieldNumber_Foo* TestDupFieldNumber::_internal_mutable_foo() {
  _has_bits_[0] |= 0x00000001u;
  if (foo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestDupFieldNumber_Foo>(GetArenaForAllocation());
    foo_ = p;
  }
  return foo_;
}
inline ::protobuf_unittest::TestDupFieldNumber_Foo* TestDupFieldNumber::mutable_foo() {
  ::protobuf_unittest::TestDupFieldNumber_Foo* _msg = _internal_mutable_foo();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDupFieldNumber.foo)
  return _msg;
}
inline void TestDupFieldNumber::set_allocated_foo(::protobuf_unittest::TestDupFieldNumber_Foo* foo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete foo_;
  }
  if (foo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foo);
    if (message_arena != submessage_arena) {
      foo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  foo_ = foo;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestDupFieldNumber.foo)
}

// optional group Bar = 3 { ... };
inline bool TestDupFieldNumber::_internal_has_bar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bar_ != nullptr);
  return value;
}
inline bool TestDupFieldNumber::has_bar() const {
  return _internal_has_bar();
}
inline void TestDupFieldNumber::clear_bar() {
  if (bar_ != nullptr) bar_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestDupFieldNumber_Bar& TestDupFieldNumber::_internal_bar() const {
  const ::protobuf_unittest::TestDupFieldNumber_Bar* p = bar_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestDupFieldNumber_Bar&>(
      ::protobuf_unittest::_TestDupFieldNumber_Bar_default_instance_);
}
inline const ::protobuf_unittest::TestDupFieldNumber_Bar& TestDupFieldNumber::bar() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDupFieldNumber.bar)
  return _internal_bar();
}
inline void TestDupFieldNumber::unsafe_arena_set_allocated_bar(
    ::protobuf_unittest::TestDupFieldNumber_Bar* bar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bar_);
  }
  bar_ = bar;
  if (bar) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDupFieldNumber.bar)
}
inline ::protobuf_unittest::TestDupFieldNumber_Bar* TestDupFieldNumber::release_bar() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestDupFieldNumber_Bar* temp = bar_;
  bar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestDupFieldNumber_Bar* TestDupFieldNumber::unsafe_arena_release_bar() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestDupFieldNumber.bar)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestDupFieldNumber_Bar* temp = bar_;
  bar_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestDupFieldNumber_Bar* TestDupFieldNumber::_internal_mutable_bar() {
  _has_bits_[0] |= 0x00000002u;
  if (bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestDupFieldNumber_Bar>(GetArenaForAllocation());
    bar_ = p;
  }
  return bar_;
}
inline ::protobuf_unittest::TestDupFieldNumber_Bar* TestDupFieldNumber::mutable_bar() {
  ::protobuf_unittest::TestDupFieldNumber_Bar* _msg = _internal_mutable_bar();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDupFieldNumber.bar)
  return _msg;
}
inline void TestDupFieldNumber::set_allocated_bar(::protobuf_unittest::TestDupFieldNumber_Bar* bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bar_;
  }
  if (bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bar);
    if (message_arena != submessage_arena) {
      bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bar_ = bar;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestDupFieldNumber.bar)
}

// -------------------------------------------------------------------

// TestEagerMessage

// optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = false];
inline bool TestEagerMessage::_internal_has_sub_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sub_message_ != nullptr);
  return value;
}
inline bool TestEagerMessage::has_sub_message() const {
  return _internal_has_sub_message();
}
inline void TestEagerMessage::clear_sub_message() {
  if (sub_message_ != nullptr) sub_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes& TestEagerMessage::_internal_sub_message() const {
  const ::protobuf_unittest::TestAllTypes* p = sub_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestEagerMessage::sub_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestEagerMessage.sub_message)
  return _internal_sub_message();
}
inline void TestEagerMessage::unsafe_arena_set_allocated_sub_message(
    ::protobuf_unittest::TestAllTypes* sub_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_message_);
  }
  sub_message_ = sub_message;
  if (sub_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestEagerMessage.sub_message)
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMessage::release_sub_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = sub_message_;
  sub_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMessage::unsafe_arena_release_sub_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestEagerMessage.sub_message)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = sub_message_;
  sub_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMessage::_internal_mutable_sub_message() {
  _has_bits_[0] |= 0x00000001u;
  if (sub_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    sub_message_ = p;
  }
  return sub_message_;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMessage::mutable_sub_message() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_sub_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestEagerMessage.sub_message)
  return _msg;
}
inline void TestEagerMessage::set_allocated_sub_message(::protobuf_unittest::TestAllTypes* sub_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sub_message_;
  }
  if (sub_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sub_message);
    if (message_arena != submessage_arena) {
      sub_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sub_message_ = sub_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestEagerMessage.sub_message)
}

// -------------------------------------------------------------------

// TestLazyMessage

// optional .protobuf_unittest.TestAllTypes sub_message = 1 [lazy = true];
inline bool TestLazyMessage::_internal_has_sub_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sub_message_ != nullptr);
  return value;
}
inline bool TestLazyMessage::has_sub_message() const {
  return _internal_has_sub_message();
}
inline void TestLazyMessage::clear_sub_message() {
  if (sub_message_ != nullptr) sub_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes& TestLazyMessage::_internal_sub_message() const {
  const ::protobuf_unittest::TestAllTypes* p = sub_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestLazyMessage::sub_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestLazyMessage.sub_message)
  return _internal_sub_message();
}
inline void TestLazyMessage::unsafe_arena_set_allocated_sub_message(
    ::protobuf_unittest::TestAllTypes* sub_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_message_);
  }
  sub_message_ = sub_message;
  if (sub_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestLazyMessage.sub_message)
}
inline ::protobuf_unittest::TestAllTypes* TestLazyMessage::release_sub_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = sub_message_;
  sub_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestLazyMessage::unsafe_arena_release_sub_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestLazyMessage.sub_message)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = sub_message_;
  sub_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestLazyMessage::_internal_mutable_sub_message() {
  _has_bits_[0] |= 0x00000001u;
  if (sub_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    sub_message_ = p;
  }
  return sub_message_;
}
inline ::protobuf_unittest::TestAllTypes* TestLazyMessage::mutable_sub_message() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_sub_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestLazyMessage.sub_message)
  return _msg;
}
inline void TestLazyMessage::set_allocated_sub_message(::protobuf_unittest::TestAllTypes* sub_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sub_message_;
  }
  if (sub_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sub_message);
    if (message_arena != submessage_arena) {
      sub_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sub_message_ = sub_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestLazyMessage.sub_message)
}

// -------------------------------------------------------------------

// TestEagerMaybeLazy_NestedMessage

// optional .protobuf_unittest.TestPackedTypes packed = 1;
inline bool TestEagerMaybeLazy_NestedMessage::_internal_has_packed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || packed_ != nullptr);
  return value;
}
inline bool TestEagerMaybeLazy_NestedMessage::has_packed() const {
  return _internal_has_packed();
}
inline void TestEagerMaybeLazy_NestedMessage::clear_packed() {
  if (packed_ != nullptr) packed_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestPackedTypes& TestEagerMaybeLazy_NestedMessage::_internal_packed() const {
  const ::protobuf_unittest::TestPackedTypes* p = packed_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestPackedTypes&>(
      ::protobuf_unittest::_TestPackedTypes_default_instance_);
}
inline const ::protobuf_unittest::TestPackedTypes& TestEagerMaybeLazy_NestedMessage::packed() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestEagerMaybeLazy.NestedMessage.packed)
  return _internal_packed();
}
inline void TestEagerMaybeLazy_NestedMessage::unsafe_arena_set_allocated_packed(
    ::protobuf_unittest::TestPackedTypes* packed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packed_);
  }
  packed_ = packed;
  if (packed) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestEagerMaybeLazy.NestedMessage.packed)
}
inline ::protobuf_unittest::TestPackedTypes* TestEagerMaybeLazy_NestedMessage::release_packed() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestPackedTypes* temp = packed_;
  packed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestPackedTypes* TestEagerMaybeLazy_NestedMessage::unsafe_arena_release_packed() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestEagerMaybeLazy.NestedMessage.packed)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestPackedTypes* temp = packed_;
  packed_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestPackedTypes* TestEagerMaybeLazy_NestedMessage::_internal_mutable_packed() {
  _has_bits_[0] |= 0x00000001u;
  if (packed_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestPackedTypes>(GetArenaForAllocation());
    packed_ = p;
  }
  return packed_;
}
inline ::protobuf_unittest::TestPackedTypes* TestEagerMaybeLazy_NestedMessage::mutable_packed() {
  ::protobuf_unittest::TestPackedTypes* _msg = _internal_mutable_packed();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestEagerMaybeLazy.NestedMessage.packed)
  return _msg;
}
inline void TestEagerMaybeLazy_NestedMessage::set_allocated_packed(::protobuf_unittest::TestPackedTypes* packed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete packed_;
  }
  if (packed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(packed);
    if (message_arena != submessage_arena) {
      packed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  packed_ = packed;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestEagerMaybeLazy.NestedMessage.packed)
}

// -------------------------------------------------------------------

// TestEagerMaybeLazy

// optional .protobuf_unittest.TestAllTypes message_foo = 1;
inline bool TestEagerMaybeLazy::_internal_has_message_foo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_foo_ != nullptr);
  return value;
}
inline bool TestEagerMaybeLazy::has_message_foo() const {
  return _internal_has_message_foo();
}
inline void TestEagerMaybeLazy::clear_message_foo() {
  if (message_foo_ != nullptr) message_foo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes& TestEagerMaybeLazy::_internal_message_foo() const {
  const ::protobuf_unittest::TestAllTypes* p = message_foo_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestEagerMaybeLazy::message_foo() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestEagerMaybeLazy.message_foo)
  return _internal_message_foo();
}
inline void TestEagerMaybeLazy::unsafe_arena_set_allocated_message_foo(
    ::protobuf_unittest::TestAllTypes* message_foo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_foo_);
  }
  message_foo_ = message_foo;
  if (message_foo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestEagerMaybeLazy.message_foo)
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMaybeLazy::release_message_foo() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = message_foo_;
  message_foo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMaybeLazy::unsafe_arena_release_message_foo() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestEagerMaybeLazy.message_foo)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = message_foo_;
  message_foo_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMaybeLazy::_internal_mutable_message_foo() {
  _has_bits_[0] |= 0x00000001u;
  if (message_foo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    message_foo_ = p;
  }
  return message_foo_;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMaybeLazy::mutable_message_foo() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_message_foo();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestEagerMaybeLazy.message_foo)
  return _msg;
}
inline void TestEagerMaybeLazy::set_allocated_message_foo(::protobuf_unittest::TestAllTypes* message_foo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_foo_;
  }
  if (message_foo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_foo);
    if (message_arena != submessage_arena) {
      message_foo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_foo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_foo_ = message_foo;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestEagerMaybeLazy.message_foo)
}

// optional .protobuf_unittest.TestAllTypes message_bar = 2;
inline bool TestEagerMaybeLazy::_internal_has_message_bar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || message_bar_ != nullptr);
  return value;
}
inline bool TestEagerMaybeLazy::has_message_bar() const {
  return _internal_has_message_bar();
}
inline void TestEagerMaybeLazy::clear_message_bar() {
  if (message_bar_ != nullptr) message_bar_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestAllTypes& TestEagerMaybeLazy::_internal_message_bar() const {
  const ::protobuf_unittest::TestAllTypes* p = message_bar_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestEagerMaybeLazy::message_bar() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestEagerMaybeLazy.message_bar)
  return _internal_message_bar();
}
inline void TestEagerMaybeLazy::unsafe_arena_set_allocated_message_bar(
    ::protobuf_unittest::TestAllTypes* message_bar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_bar_);
  }
  message_bar_ = message_bar;
  if (message_bar) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestEagerMaybeLazy.message_bar)
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMaybeLazy::release_message_bar() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = message_bar_;
  message_bar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMaybeLazy::unsafe_arena_release_message_bar() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestEagerMaybeLazy.message_bar)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = message_bar_;
  message_bar_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMaybeLazy::_internal_mutable_message_bar() {
  _has_bits_[0] |= 0x00000002u;
  if (message_bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    message_bar_ = p;
  }
  return message_bar_;
}
inline ::protobuf_unittest::TestAllTypes* TestEagerMaybeLazy::mutable_message_bar() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_message_bar();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestEagerMaybeLazy.message_bar)
  return _msg;
}
inline void TestEagerMaybeLazy::set_allocated_message_bar(::protobuf_unittest::TestAllTypes* message_bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_bar_;
  }
  if (message_bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_bar);
    if (message_arena != submessage_arena) {
      message_bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_bar, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_bar_ = message_bar;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestEagerMaybeLazy.message_bar)
}

// optional .protobuf_unittest.TestEagerMaybeLazy.NestedMessage message_baz = 3;
inline bool TestEagerMaybeLazy::_internal_has_message_baz() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || message_baz_ != nullptr);
  return value;
}
inline bool TestEagerMaybeLazy::has_message_baz() const {
  return _internal_has_message_baz();
}
inline void TestEagerMaybeLazy::clear_message_baz() {
  if (message_baz_ != nullptr) message_baz_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage& TestEagerMaybeLazy::_internal_message_baz() const {
  const ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* p = message_baz_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage&>(
      ::protobuf_unittest::_TestEagerMaybeLazy_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage& TestEagerMaybeLazy::message_baz() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestEagerMaybeLazy.message_baz)
  return _internal_message_baz();
}
inline void TestEagerMaybeLazy::unsafe_arena_set_allocated_message_baz(
    ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* message_baz) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_baz_);
  }
  message_baz_ = message_baz;
  if (message_baz) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestEagerMaybeLazy.message_baz)
}
inline ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* TestEagerMaybeLazy::release_message_baz() {
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* temp = message_baz_;
  message_baz_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* TestEagerMaybeLazy::unsafe_arena_release_message_baz() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestEagerMaybeLazy.message_baz)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* temp = message_baz_;
  message_baz_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* TestEagerMaybeLazy::_internal_mutable_message_baz() {
  _has_bits_[0] |= 0x00000004u;
  if (message_baz_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestEagerMaybeLazy_NestedMessage>(GetArenaForAllocation());
    message_baz_ = p;
  }
  return message_baz_;
}
inline ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* TestEagerMaybeLazy::mutable_message_baz() {
  ::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* _msg = _internal_mutable_message_baz();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestEagerMaybeLazy.message_baz)
  return _msg;
}
inline void TestEagerMaybeLazy::set_allocated_message_baz(::protobuf_unittest::TestEagerMaybeLazy_NestedMessage* message_baz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_baz_;
  }
  if (message_baz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_baz);
    if (message_arena != submessage_arena) {
      message_baz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_baz, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_baz_ = message_baz;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestEagerMaybeLazy.message_baz)
}

// -------------------------------------------------------------------

// TestNestedMessageHasBits_NestedMessage

// repeated int32 nestedmessage_repeated_int32 = 1;
inline int TestNestedMessageHasBits_NestedMessage::_internal_nestedmessage_repeated_int32_size() const {
  return nestedmessage_repeated_int32_.size();
}
inline int TestNestedMessageHasBits_NestedMessage::nestedmessage_repeated_int32_size() const {
  return _internal_nestedmessage_repeated_int32_size();
}
inline void TestNestedMessageHasBits_NestedMessage::clear_nestedmessage_repeated_int32() {
  nestedmessage_repeated_int32_.Clear();
}
inline int32_t TestNestedMessageHasBits_NestedMessage::_internal_nestedmessage_repeated_int32(int index) const {
  return nestedmessage_repeated_int32_.Get(index);
}
inline int32_t TestNestedMessageHasBits_NestedMessage::nestedmessage_repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_int32)
  return _internal_nestedmessage_repeated_int32(index);
}
inline void TestNestedMessageHasBits_NestedMessage::set_nestedmessage_repeated_int32(int index, int32_t value) {
  nestedmessage_repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_int32)
}
inline void TestNestedMessageHasBits_NestedMessage::_internal_add_nestedmessage_repeated_int32(int32_t value) {
  nestedmessage_repeated_int32_.Add(value);
}
inline void TestNestedMessageHasBits_NestedMessage::add_nestedmessage_repeated_int32(int32_t value) {
  _internal_add_nestedmessage_repeated_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestNestedMessageHasBits_NestedMessage::_internal_nestedmessage_repeated_int32() const {
  return nestedmessage_repeated_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestNestedMessageHasBits_NestedMessage::nestedmessage_repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_int32)
  return _internal_nestedmessage_repeated_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestNestedMessageHasBits_NestedMessage::_internal_mutable_nestedmessage_repeated_int32() {
  return &nestedmessage_repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestNestedMessageHasBits_NestedMessage::mutable_nestedmessage_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_int32)
  return _internal_mutable_nestedmessage_repeated_int32();
}

// repeated .protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
inline int TestNestedMessageHasBits_NestedMessage::_internal_nestedmessage_repeated_foreignmessage_size() const {
  return nestedmessage_repeated_foreignmessage_.size();
}
inline int TestNestedMessageHasBits_NestedMessage::nestedmessage_repeated_foreignmessage_size() const {
  return _internal_nestedmessage_repeated_foreignmessage_size();
}
inline void TestNestedMessageHasBits_NestedMessage::clear_nestedmessage_repeated_foreignmessage() {
  nestedmessage_repeated_foreignmessage_.Clear();
}
inline ::protobuf_unittest::ForeignMessage* TestNestedMessageHasBits_NestedMessage::mutable_nestedmessage_repeated_foreignmessage(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_foreignmessage)
  return nestedmessage_repeated_foreignmessage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >*
TestNestedMessageHasBits_NestedMessage::mutable_nestedmessage_repeated_foreignmessage() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_foreignmessage)
  return &nestedmessage_repeated_foreignmessage_;
}
inline const ::protobuf_unittest::ForeignMessage& TestNestedMessageHasBits_NestedMessage::_internal_nestedmessage_repeated_foreignmessage(int index) const {
  return nestedmessage_repeated_foreignmessage_.Get(index);
}
inline const ::protobuf_unittest::ForeignMessage& TestNestedMessageHasBits_NestedMessage::nestedmessage_repeated_foreignmessage(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_foreignmessage)
  return _internal_nestedmessage_repeated_foreignmessage(index);
}
inline ::protobuf_unittest::ForeignMessage* TestNestedMessageHasBits_NestedMessage::_internal_add_nestedmessage_repeated_foreignmessage() {
  return nestedmessage_repeated_foreignmessage_.Add();
}
inline ::protobuf_unittest::ForeignMessage* TestNestedMessageHasBits_NestedMessage::add_nestedmessage_repeated_foreignmessage() {
  ::protobuf_unittest::ForeignMessage* _add = _internal_add_nestedmessage_repeated_foreignmessage();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_foreignmessage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >&
TestNestedMessageHasBits_NestedMessage::nestedmessage_repeated_foreignmessage() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestNestedMessageHasBits.NestedMessage.nestedmessage_repeated_foreignmessage)
  return nestedmessage_repeated_foreignmessage_;
}

// -------------------------------------------------------------------

// TestNestedMessageHasBits

// optional .protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
inline bool TestNestedMessageHasBits::_internal_has_optional_nested_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || optional_nested_message_ != nullptr);
  return value;
}
inline bool TestNestedMessageHasBits::has_optional_nested_message() const {
  return _internal_has_optional_nested_message();
}
inline void TestNestedMessageHasBits::clear_optional_nested_message() {
  if (optional_nested_message_ != nullptr) optional_nested_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage& TestNestedMessageHasBits::_internal_optional_nested_message() const {
  const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* p = optional_nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage&>(
      ::protobuf_unittest::_TestNestedMessageHasBits_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage& TestNestedMessageHasBits::optional_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedMessageHasBits.optional_nested_message)
  return _internal_optional_nested_message();
}
inline void TestNestedMessageHasBits::unsafe_arena_set_allocated_optional_nested_message(
    ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* optional_nested_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_nested_message_);
  }
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestNestedMessageHasBits.optional_nested_message)
}
inline ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* TestNestedMessageHasBits::release_optional_nested_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* TestNestedMessageHasBits::unsafe_arena_release_optional_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedMessageHasBits.optional_nested_message)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* TestNestedMessageHasBits::_internal_mutable_optional_nested_message() {
  _has_bits_[0] |= 0x00000001u;
  if (optional_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestNestedMessageHasBits_NestedMessage>(GetArenaForAllocation());
    optional_nested_message_ = p;
  }
  return optional_nested_message_;
}
inline ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* TestNestedMessageHasBits::mutable_optional_nested_message() {
  ::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* _msg = _internal_mutable_optional_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedMessageHasBits.optional_nested_message)
  return _msg;
}
inline void TestNestedMessageHasBits::set_allocated_optional_nested_message(::protobuf_unittest::TestNestedMessageHasBits_NestedMessage* optional_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_nested_message_;
  }
  if (optional_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_nested_message);
    if (message_arena != submessage_arena) {
      optional_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_nested_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_nested_message_ = optional_nested_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedMessageHasBits.optional_nested_message)
}

// -------------------------------------------------------------------

// TestCamelCaseFieldNames

// optional int32 PrimitiveField = 1;
inline bool TestCamelCaseFieldNames::_internal_has_primitivefield() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestCamelCaseFieldNames::has_primitivefield() const {
  return _internal_has_primitivefield();
}
inline void TestCamelCaseFieldNames::clear_primitivefield() {
  primitivefield_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t TestCamelCaseFieldNames::_internal_primitivefield() const {
  return primitivefield_;
}
inline int32_t TestCamelCaseFieldNames::primitivefield() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.PrimitiveField)
  return _internal_primitivefield();
}
inline void TestCamelCaseFieldNames::_internal_set_primitivefield(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  primitivefield_ = value;
}
inline void TestCamelCaseFieldNames::set_primitivefield(int32_t value) {
  _internal_set_primitivefield(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.PrimitiveField)
}

// optional string StringField = 2;
inline bool TestCamelCaseFieldNames::_internal_has_stringfield() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestCamelCaseFieldNames::has_stringfield() const {
  return _internal_has_stringfield();
}
inline void TestCamelCaseFieldNames::clear_stringfield() {
  stringfield_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestCamelCaseFieldNames::stringfield() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.StringField)
  return _internal_stringfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestCamelCaseFieldNames::set_stringfield(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 stringfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.StringField)
}
inline std::string* TestCamelCaseFieldNames::mutable_stringfield() {
  std::string* _s = _internal_mutable_stringfield();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCamelCaseFieldNames.StringField)
  return _s;
}
inline const std::string& TestCamelCaseFieldNames::_internal_stringfield() const {
  return stringfield_.Get();
}
inline void TestCamelCaseFieldNames::_internal_set_stringfield(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stringfield_.Set(value, GetArenaForAllocation());
}
inline std::string* TestCamelCaseFieldNames::_internal_mutable_stringfield() {
  _has_bits_[0] |= 0x00000001u;
  return stringfield_.Mutable(GetArenaForAllocation());
}
inline std::string* TestCamelCaseFieldNames::release_stringfield() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestCamelCaseFieldNames.StringField)
  if (!_internal_has_stringfield()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = stringfield_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringfield_.IsDefault()) {
    stringfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestCamelCaseFieldNames::set_allocated_stringfield(std::string* stringfield) {
  if (stringfield != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stringfield_.SetAllocated(stringfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringfield_.IsDefault()) {
    stringfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestCamelCaseFieldNames.StringField)
}

// optional .protobuf_unittest.ForeignEnum EnumField = 3;
inline bool TestCamelCaseFieldNames::_internal_has_enumfield() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestCamelCaseFieldNames::has_enumfield() const {
  return _internal_has_enumfield();
}
inline void TestCamelCaseFieldNames::clear_enumfield() {
  enumfield_ = 4;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::protobuf_unittest::ForeignEnum TestCamelCaseFieldNames::_internal_enumfield() const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(enumfield_);
}
inline ::protobuf_unittest::ForeignEnum TestCamelCaseFieldNames::enumfield() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.EnumField)
  return _internal_enumfield();
}
inline void TestCamelCaseFieldNames::_internal_set_enumfield(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  enumfield_ = value;
}
inline void TestCamelCaseFieldNames::set_enumfield(::protobuf_unittest::ForeignEnum value) {
  _internal_set_enumfield(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.EnumField)
}

// optional .protobuf_unittest.ForeignMessage MessageField = 4;
inline bool TestCamelCaseFieldNames::_internal_has_messagefield() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || messagefield_ != nullptr);
  return value;
}
inline bool TestCamelCaseFieldNames::has_messagefield() const {
  return _internal_has_messagefield();
}
inline void TestCamelCaseFieldNames::clear_messagefield() {
  if (messagefield_ != nullptr) messagefield_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::protobuf_unittest::ForeignMessage& TestCamelCaseFieldNames::_internal_messagefield() const {
  const ::protobuf_unittest::ForeignMessage* p = messagefield_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::ForeignMessage&>(
      ::protobuf_unittest::_ForeignMessage_default_instance_);
}
inline const ::protobuf_unittest::ForeignMessage& TestCamelCaseFieldNames::messagefield() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.MessageField)
  return _internal_messagefield();
}
inline void TestCamelCaseFieldNames::unsafe_arena_set_allocated_messagefield(
    ::protobuf_unittest::ForeignMessage* messagefield) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messagefield_);
  }
  messagefield_ = messagefield;
  if (messagefield) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestCamelCaseFieldNames.MessageField)
}
inline ::protobuf_unittest::ForeignMessage* TestCamelCaseFieldNames::release_messagefield() {
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::ForeignMessage* temp = messagefield_;
  messagefield_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestCamelCaseFieldNames::unsafe_arena_release_messagefield() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestCamelCaseFieldNames.MessageField)
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::ForeignMessage* temp = messagefield_;
  messagefield_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestCamelCaseFieldNames::_internal_mutable_messagefield() {
  _has_bits_[0] |= 0x00000008u;
  if (messagefield_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::ForeignMessage>(GetArenaForAllocation());
    messagefield_ = p;
  }
  return messagefield_;
}
inline ::protobuf_unittest::ForeignMessage* TestCamelCaseFieldNames::mutable_messagefield() {
  ::protobuf_unittest::ForeignMessage* _msg = _internal_mutable_messagefield();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCamelCaseFieldNames.MessageField)
  return _msg;
}
inline void TestCamelCaseFieldNames::set_allocated_messagefield(::protobuf_unittest::ForeignMessage* messagefield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete messagefield_;
  }
  if (messagefield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(messagefield);
    if (message_arena != submessage_arena) {
      messagefield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messagefield, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  messagefield_ = messagefield;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestCamelCaseFieldNames.MessageField)
}

// optional string StringPieceField = 5 [ctype = STRING_PIECE];
inline bool TestCamelCaseFieldNames::_internal_has_stringpiecefield() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestCamelCaseFieldNames::has_stringpiecefield() const {
  return _internal_has_stringpiecefield();
}
inline void TestCamelCaseFieldNames::clear_stringpiecefield() {
  stringpiecefield_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestCamelCaseFieldNames::stringpiecefield() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.StringPieceField)
  return _internal_stringpiecefield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestCamelCaseFieldNames::set_stringpiecefield(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 stringpiecefield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.StringPieceField)
}
inline std::string* TestCamelCaseFieldNames::mutable_stringpiecefield() {
  std::string* _s = _internal_mutable_stringpiecefield();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCamelCaseFieldNames.StringPieceField)
  return _s;
}
inline const std::string& TestCamelCaseFieldNames::_internal_stringpiecefield() const {
  return stringpiecefield_.Get();
}
inline void TestCamelCaseFieldNames::_internal_set_stringpiecefield(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  stringpiecefield_.Set(value, GetArenaForAllocation());
}
inline std::string* TestCamelCaseFieldNames::_internal_mutable_stringpiecefield() {
  _has_bits_[0] |= 0x00000002u;
  return stringpiecefield_.Mutable(GetArenaForAllocation());
}
inline std::string* TestCamelCaseFieldNames::release_stringpiecefield() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestCamelCaseFieldNames.StringPieceField)
  if (!_internal_has_stringpiecefield()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = stringpiecefield_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringpiecefield_.IsDefault()) {
    stringpiecefield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestCamelCaseFieldNames::set_allocated_stringpiecefield(std::string* stringpiecefield) {
  if (stringpiecefield != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stringpiecefield_.SetAllocated(stringpiecefield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringpiecefield_.IsDefault()) {
    stringpiecefield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestCamelCaseFieldNames.StringPieceField)
}

// optional string CordField = 6 [ctype = CORD];
inline bool TestCamelCaseFieldNames::_internal_has_cordfield() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestCamelCaseFieldNames::has_cordfield() const {
  return _internal_has_cordfield();
}
inline void TestCamelCaseFieldNames::clear_cordfield() {
  cordfield_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestCamelCaseFieldNames::cordfield() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.CordField)
  return _internal_cordfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestCamelCaseFieldNames::set_cordfield(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 cordfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.CordField)
}
inline std::string* TestCamelCaseFieldNames::mutable_cordfield() {
  std::string* _s = _internal_mutable_cordfield();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCamelCaseFieldNames.CordField)
  return _s;
}
inline const std::string& TestCamelCaseFieldNames::_internal_cordfield() const {
  return cordfield_.Get();
}
inline void TestCamelCaseFieldNames::_internal_set_cordfield(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cordfield_.Set(value, GetArenaForAllocation());
}
inline std::string* TestCamelCaseFieldNames::_internal_mutable_cordfield() {
  _has_bits_[0] |= 0x00000004u;
  return cordfield_.Mutable(GetArenaForAllocation());
}
inline std::string* TestCamelCaseFieldNames::release_cordfield() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestCamelCaseFieldNames.CordField)
  if (!_internal_has_cordfield()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = cordfield_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cordfield_.IsDefault()) {
    cordfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestCamelCaseFieldNames::set_allocated_cordfield(std::string* cordfield) {
  if (cordfield != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cordfield_.SetAllocated(cordfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cordfield_.IsDefault()) {
    cordfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestCamelCaseFieldNames.CordField)
}

// repeated int32 RepeatedPrimitiveField = 7;
inline int TestCamelCaseFieldNames::_internal_repeatedprimitivefield_size() const {
  return repeatedprimitivefield_.size();
}
inline int TestCamelCaseFieldNames::repeatedprimitivefield_size() const {
  return _internal_repeatedprimitivefield_size();
}
inline void TestCamelCaseFieldNames::clear_repeatedprimitivefield() {
  repeatedprimitivefield_.Clear();
}
inline int32_t TestCamelCaseFieldNames::_internal_repeatedprimitivefield(int index) const {
  return repeatedprimitivefield_.Get(index);
}
inline int32_t TestCamelCaseFieldNames::repeatedprimitivefield(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.RepeatedPrimitiveField)
  return _internal_repeatedprimitivefield(index);
}
inline void TestCamelCaseFieldNames::set_repeatedprimitivefield(int index, int32_t value) {
  repeatedprimitivefield_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.RepeatedPrimitiveField)
}
inline void TestCamelCaseFieldNames::_internal_add_repeatedprimitivefield(int32_t value) {
  repeatedprimitivefield_.Add(value);
}
inline void TestCamelCaseFieldNames::add_repeatedprimitivefield(int32_t value) {
  _internal_add_repeatedprimitivefield(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedPrimitiveField)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestCamelCaseFieldNames::_internal_repeatedprimitivefield() const {
  return repeatedprimitivefield_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestCamelCaseFieldNames::repeatedprimitivefield() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedPrimitiveField)
  return _internal_repeatedprimitivefield();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestCamelCaseFieldNames::_internal_mutable_repeatedprimitivefield() {
  return &repeatedprimitivefield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestCamelCaseFieldNames::mutable_repeatedprimitivefield() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedPrimitiveField)
  return _internal_mutable_repeatedprimitivefield();
}

// repeated string RepeatedStringField = 8;
inline int TestCamelCaseFieldNames::_internal_repeatedstringfield_size() const {
  return repeatedstringfield_.size();
}
inline int TestCamelCaseFieldNames::repeatedstringfield_size() const {
  return _internal_repeatedstringfield_size();
}
inline void TestCamelCaseFieldNames::clear_repeatedstringfield() {
  repeatedstringfield_.Clear();
}
inline std::string* TestCamelCaseFieldNames::add_repeatedstringfield() {
  std::string* _s = _internal_add_repeatedstringfield();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
  return _s;
}
inline const std::string& TestCamelCaseFieldNames::_internal_repeatedstringfield(int index) const {
  return repeatedstringfield_.Get(index);
}
inline const std::string& TestCamelCaseFieldNames::repeatedstringfield(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
  return _internal_repeatedstringfield(index);
}
inline std::string* TestCamelCaseFieldNames::mutable_repeatedstringfield(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
  return repeatedstringfield_.Mutable(index);
}
inline void TestCamelCaseFieldNames::set_repeatedstringfield(int index, const std::string& value) {
  repeatedstringfield_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
}
inline void TestCamelCaseFieldNames::set_repeatedstringfield(int index, std::string&& value) {
  repeatedstringfield_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
}
inline void TestCamelCaseFieldNames::set_repeatedstringfield(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeatedstringfield_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
}
inline void TestCamelCaseFieldNames::set_repeatedstringfield(int index, const char* value, size_t size) {
  repeatedstringfield_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
}
inline std::string* TestCamelCaseFieldNames::_internal_add_repeatedstringfield() {
  return repeatedstringfield_.Add();
}
inline void TestCamelCaseFieldNames::add_repeatedstringfield(const std::string& value) {
  repeatedstringfield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
}
inline void TestCamelCaseFieldNames::add_repeatedstringfield(std::string&& value) {
  repeatedstringfield_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
}
inline void TestCamelCaseFieldNames::add_repeatedstringfield(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeatedstringfield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
}
inline void TestCamelCaseFieldNames::add_repeatedstringfield(const char* value, size_t size) {
  repeatedstringfield_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestCamelCaseFieldNames::repeatedstringfield() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
  return repeatedstringfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestCamelCaseFieldNames::mutable_repeatedstringfield() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringField)
  return &repeatedstringfield_;
}

// repeated .protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
inline int TestCamelCaseFieldNames::_internal_repeatedenumfield_size() const {
  return repeatedenumfield_.size();
}
inline int TestCamelCaseFieldNames::repeatedenumfield_size() const {
  return _internal_repeatedenumfield_size();
}
inline void TestCamelCaseFieldNames::clear_repeatedenumfield() {
  repeatedenumfield_.Clear();
}
inline ::protobuf_unittest::ForeignEnum TestCamelCaseFieldNames::_internal_repeatedenumfield(int index) const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(repeatedenumfield_.Get(index));
}
inline ::protobuf_unittest::ForeignEnum TestCamelCaseFieldNames::repeatedenumfield(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.RepeatedEnumField)
  return _internal_repeatedenumfield(index);
}
inline void TestCamelCaseFieldNames::set_repeatedenumfield(int index, ::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  repeatedenumfield_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.RepeatedEnumField)
}
inline void TestCamelCaseFieldNames::_internal_add_repeatedenumfield(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  repeatedenumfield_.Add(value);
}
inline void TestCamelCaseFieldNames::add_repeatedenumfield(::protobuf_unittest::ForeignEnum value) {
  _internal_add_repeatedenumfield(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedEnumField)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestCamelCaseFieldNames::repeatedenumfield() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedEnumField)
  return repeatedenumfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestCamelCaseFieldNames::_internal_mutable_repeatedenumfield() {
  return &repeatedenumfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestCamelCaseFieldNames::mutable_repeatedenumfield() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedEnumField)
  return _internal_mutable_repeatedenumfield();
}

// repeated .protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
inline int TestCamelCaseFieldNames::_internal_repeatedmessagefield_size() const {
  return repeatedmessagefield_.size();
}
inline int TestCamelCaseFieldNames::repeatedmessagefield_size() const {
  return _internal_repeatedmessagefield_size();
}
inline void TestCamelCaseFieldNames::clear_repeatedmessagefield() {
  repeatedmessagefield_.Clear();
}
inline ::protobuf_unittest::ForeignMessage* TestCamelCaseFieldNames::mutable_repeatedmessagefield(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCamelCaseFieldNames.RepeatedMessageField)
  return repeatedmessagefield_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >*
TestCamelCaseFieldNames::mutable_repeatedmessagefield() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedMessageField)
  return &repeatedmessagefield_;
}
inline const ::protobuf_unittest::ForeignMessage& TestCamelCaseFieldNames::_internal_repeatedmessagefield(int index) const {
  return repeatedmessagefield_.Get(index);
}
inline const ::protobuf_unittest::ForeignMessage& TestCamelCaseFieldNames::repeatedmessagefield(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.RepeatedMessageField)
  return _internal_repeatedmessagefield(index);
}
inline ::protobuf_unittest::ForeignMessage* TestCamelCaseFieldNames::_internal_add_repeatedmessagefield() {
  return repeatedmessagefield_.Add();
}
inline ::protobuf_unittest::ForeignMessage* TestCamelCaseFieldNames::add_repeatedmessagefield() {
  ::protobuf_unittest::ForeignMessage* _add = _internal_add_repeatedmessagefield();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedMessageField)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessage >&
TestCamelCaseFieldNames::repeatedmessagefield() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedMessageField)
  return repeatedmessagefield_;
}

// repeated string RepeatedStringPieceField = 11 [ctype = STRING_PIECE];
inline int TestCamelCaseFieldNames::_internal_repeatedstringpiecefield_size() const {
  return repeatedstringpiecefield_.size();
}
inline int TestCamelCaseFieldNames::repeatedstringpiecefield_size() const {
  return _internal_repeatedstringpiecefield_size();
}
inline void TestCamelCaseFieldNames::clear_repeatedstringpiecefield() {
  repeatedstringpiecefield_.Clear();
}
inline std::string* TestCamelCaseFieldNames::add_repeatedstringpiecefield() {
  std::string* _s = _internal_add_repeatedstringpiecefield();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
  return _s;
}
inline const std::string& TestCamelCaseFieldNames::_internal_repeatedstringpiecefield(int index) const {
  return repeatedstringpiecefield_.Get(index);
}
inline const std::string& TestCamelCaseFieldNames::repeatedstringpiecefield(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
  return _internal_repeatedstringpiecefield(index);
}
inline std::string* TestCamelCaseFieldNames::mutable_repeatedstringpiecefield(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
  return repeatedstringpiecefield_.Mutable(index);
}
inline void TestCamelCaseFieldNames::set_repeatedstringpiecefield(int index, const std::string& value) {
  repeatedstringpiecefield_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
}
inline void TestCamelCaseFieldNames::set_repeatedstringpiecefield(int index, std::string&& value) {
  repeatedstringpiecefield_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
}
inline void TestCamelCaseFieldNames::set_repeatedstringpiecefield(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeatedstringpiecefield_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
}
inline void TestCamelCaseFieldNames::set_repeatedstringpiecefield(int index, const char* value, size_t size) {
  repeatedstringpiecefield_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
}
inline std::string* TestCamelCaseFieldNames::_internal_add_repeatedstringpiecefield() {
  return repeatedstringpiecefield_.Add();
}
inline void TestCamelCaseFieldNames::add_repeatedstringpiecefield(const std::string& value) {
  repeatedstringpiecefield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
}
inline void TestCamelCaseFieldNames::add_repeatedstringpiecefield(std::string&& value) {
  repeatedstringpiecefield_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
}
inline void TestCamelCaseFieldNames::add_repeatedstringpiecefield(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeatedstringpiecefield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
}
inline void TestCamelCaseFieldNames::add_repeatedstringpiecefield(const char* value, size_t size) {
  repeatedstringpiecefield_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestCamelCaseFieldNames::repeatedstringpiecefield() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
  return repeatedstringpiecefield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestCamelCaseFieldNames::mutable_repeatedstringpiecefield() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedStringPieceField)
  return &repeatedstringpiecefield_;
}

// repeated string RepeatedCordField = 12 [ctype = CORD];
inline int TestCamelCaseFieldNames::_internal_repeatedcordfield_size() const {
  return repeatedcordfield_.size();
}
inline int TestCamelCaseFieldNames::repeatedcordfield_size() const {
  return _internal_repeatedcordfield_size();
}
inline void TestCamelCaseFieldNames::clear_repeatedcordfield() {
  repeatedcordfield_.Clear();
}
inline std::string* TestCamelCaseFieldNames::add_repeatedcordfield() {
  std::string* _s = _internal_add_repeatedcordfield();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
  return _s;
}
inline const std::string& TestCamelCaseFieldNames::_internal_repeatedcordfield(int index) const {
  return repeatedcordfield_.Get(index);
}
inline const std::string& TestCamelCaseFieldNames::repeatedcordfield(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
  return _internal_repeatedcordfield(index);
}
inline std::string* TestCamelCaseFieldNames::mutable_repeatedcordfield(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
  return repeatedcordfield_.Mutable(index);
}
inline void TestCamelCaseFieldNames::set_repeatedcordfield(int index, const std::string& value) {
  repeatedcordfield_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
}
inline void TestCamelCaseFieldNames::set_repeatedcordfield(int index, std::string&& value) {
  repeatedcordfield_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
}
inline void TestCamelCaseFieldNames::set_repeatedcordfield(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeatedcordfield_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
}
inline void TestCamelCaseFieldNames::set_repeatedcordfield(int index, const char* value, size_t size) {
  repeatedcordfield_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
}
inline std::string* TestCamelCaseFieldNames::_internal_add_repeatedcordfield() {
  return repeatedcordfield_.Add();
}
inline void TestCamelCaseFieldNames::add_repeatedcordfield(const std::string& value) {
  repeatedcordfield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
}
inline void TestCamelCaseFieldNames::add_repeatedcordfield(std::string&& value) {
  repeatedcordfield_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
}
inline void TestCamelCaseFieldNames::add_repeatedcordfield(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeatedcordfield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
}
inline void TestCamelCaseFieldNames::add_repeatedcordfield(const char* value, size_t size) {
  repeatedcordfield_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestCamelCaseFieldNames::repeatedcordfield() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
  return repeatedcordfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestCamelCaseFieldNames::mutable_repeatedcordfield() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestCamelCaseFieldNames.RepeatedCordField)
  return &repeatedcordfield_;
}

// -------------------------------------------------------------------

// TestFieldOrderings_NestedMessage

// optional int64 oo = 2;
inline bool TestFieldOrderings_NestedMessage::_internal_has_oo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestFieldOrderings_NestedMessage::has_oo() const {
  return _internal_has_oo();
}
inline void TestFieldOrderings_NestedMessage::clear_oo() {
  oo_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t TestFieldOrderings_NestedMessage::_internal_oo() const {
  return oo_;
}
inline int64_t TestFieldOrderings_NestedMessage::oo() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestFieldOrderings.NestedMessage.oo)
  return _internal_oo();
}
inline void TestFieldOrderings_NestedMessage::_internal_set_oo(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  oo_ = value;
}
inline void TestFieldOrderings_NestedMessage::set_oo(int64_t value) {
  _internal_set_oo(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestFieldOrderings.NestedMessage.oo)
}

// optional int32 bb = 1;
inline bool TestFieldOrderings_NestedMessage::_internal_has_bb() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestFieldOrderings_NestedMessage::has_bb() const {
  return _internal_has_bb();
}
inline void TestFieldOrderings_NestedMessage::clear_bb() {
  bb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestFieldOrderings_NestedMessage::_internal_bb() const {
  return bb_;
}
inline int32_t TestFieldOrderings_NestedMessage::bb() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestFieldOrderings.NestedMessage.bb)
  return _internal_bb();
}
inline void TestFieldOrderings_NestedMessage::_internal_set_bb(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  bb_ = value;
}
inline void TestFieldOrderings_NestedMessage::set_bb(int32_t value) {
  _internal_set_bb(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestFieldOrderings.NestedMessage.bb)
}

// -------------------------------------------------------------------

// TestFieldOrderings

// optional string my_string = 11;
inline bool TestFieldOrderings::_internal_has_my_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestFieldOrderings::has_my_string() const {
  return _internal_has_my_string();
}
inline void TestFieldOrderings::clear_my_string() {
  my_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestFieldOrderings::my_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestFieldOrderings.my_string)
  return _internal_my_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestFieldOrderings::set_my_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 my_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestFieldOrderings.my_string)
}
inline std::string* TestFieldOrderings::mutable_my_string() {
  std::string* _s = _internal_mutable_my_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestFieldOrderings.my_string)
  return _s;
}
inline const std::string& TestFieldOrderings::_internal_my_string() const {
  return my_string_.Get();
}
inline void TestFieldOrderings::_internal_set_my_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  my_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestFieldOrderings::_internal_mutable_my_string() {
  _has_bits_[0] |= 0x00000001u;
  return my_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestFieldOrderings::release_my_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestFieldOrderings.my_string)
  if (!_internal_has_my_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = my_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (my_string_.IsDefault()) {
    my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestFieldOrderings::set_allocated_my_string(std::string* my_string) {
  if (my_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  my_string_.SetAllocated(my_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (my_string_.IsDefault()) {
    my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestFieldOrderings.my_string)
}

// optional int64 my_int = 1;
inline bool TestFieldOrderings::_internal_has_my_int() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestFieldOrderings::has_my_int() const {
  return _internal_has_my_int();
}
inline void TestFieldOrderings::clear_my_int() {
  my_int_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t TestFieldOrderings::_internal_my_int() const {
  return my_int_;
}
inline int64_t TestFieldOrderings::my_int() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestFieldOrderings.my_int)
  return _internal_my_int();
}
inline void TestFieldOrderings::_internal_set_my_int(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  my_int_ = value;
}
inline void TestFieldOrderings::set_my_int(int64_t value) {
  _internal_set_my_int(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestFieldOrderings.my_int)
}

// optional float my_float = 101;
inline bool TestFieldOrderings::_internal_has_my_float() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestFieldOrderings::has_my_float() const {
  return _internal_has_my_float();
}
inline void TestFieldOrderings::clear_my_float() {
  my_float_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TestFieldOrderings::_internal_my_float() const {
  return my_float_;
}
inline float TestFieldOrderings::my_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestFieldOrderings.my_float)
  return _internal_my_float();
}
inline void TestFieldOrderings::_internal_set_my_float(float value) {
  _has_bits_[0] |= 0x00000008u;
  my_float_ = value;
}
inline void TestFieldOrderings::set_my_float(float value) {
  _internal_set_my_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestFieldOrderings.my_float)
}

// optional .protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
inline bool TestFieldOrderings::_internal_has_optional_nested_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || optional_nested_message_ != nullptr);
  return value;
}
inline bool TestFieldOrderings::has_optional_nested_message() const {
  return _internal_has_optional_nested_message();
}
inline void TestFieldOrderings::clear_optional_nested_message() {
  if (optional_nested_message_ != nullptr) optional_nested_message_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestFieldOrderings_NestedMessage& TestFieldOrderings::_internal_optional_nested_message() const {
  const ::protobuf_unittest::TestFieldOrderings_NestedMessage* p = optional_nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestFieldOrderings_NestedMessage&>(
      ::protobuf_unittest::_TestFieldOrderings_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestFieldOrderings_NestedMessage& TestFieldOrderings::optional_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestFieldOrderings.optional_nested_message)
  return _internal_optional_nested_message();
}
inline void TestFieldOrderings::unsafe_arena_set_allocated_optional_nested_message(
    ::protobuf_unittest::TestFieldOrderings_NestedMessage* optional_nested_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_nested_message_);
  }
  optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestFieldOrderings.optional_nested_message)
}
inline ::protobuf_unittest::TestFieldOrderings_NestedMessage* TestFieldOrderings::release_optional_nested_message() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestFieldOrderings_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestFieldOrderings_NestedMessage* TestFieldOrderings::unsafe_arena_release_optional_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestFieldOrderings.optional_nested_message)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestFieldOrderings_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestFieldOrderings_NestedMessage* TestFieldOrderings::_internal_mutable_optional_nested_message() {
  _has_bits_[0] |= 0x00000002u;
  if (optional_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestFieldOrderings_NestedMessage>(GetArenaForAllocation());
    optional_nested_message_ = p;
  }
  return optional_nested_message_;
}
inline ::protobuf_unittest::TestFieldOrderings_NestedMessage* TestFieldOrderings::mutable_optional_nested_message() {
  ::protobuf_unittest::TestFieldOrderings_NestedMessage* _msg = _internal_mutable_optional_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestFieldOrderings.optional_nested_message)
  return _msg;
}
inline void TestFieldOrderings::set_allocated_optional_nested_message(::protobuf_unittest::TestFieldOrderings_NestedMessage* optional_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_nested_message_;
  }
  if (optional_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_nested_message);
    if (message_arena != submessage_arena) {
      optional_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_nested_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_nested_message_ = optional_nested_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestFieldOrderings.optional_nested_message)
}

// -------------------------------------------------------------------

// TestExtensionOrderings1

// optional string my_string = 1;
inline bool TestExtensionOrderings1::_internal_has_my_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestExtensionOrderings1::has_my_string() const {
  return _internal_has_my_string();
}
inline void TestExtensionOrderings1::clear_my_string() {
  my_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestExtensionOrderings1::my_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionOrderings1.my_string)
  return _internal_my_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtensionOrderings1::set_my_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 my_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionOrderings1.my_string)
}
inline std::string* TestExtensionOrderings1::mutable_my_string() {
  std::string* _s = _internal_mutable_my_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtensionOrderings1.my_string)
  return _s;
}
inline const std::string& TestExtensionOrderings1::_internal_my_string() const {
  return my_string_.Get();
}
inline void TestExtensionOrderings1::_internal_set_my_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  my_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtensionOrderings1::_internal_mutable_my_string() {
  _has_bits_[0] |= 0x00000001u;
  return my_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestExtensionOrderings1::release_my_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtensionOrderings1.my_string)
  if (!_internal_has_my_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = my_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (my_string_.IsDefault()) {
    my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestExtensionOrderings1::set_allocated_my_string(std::string* my_string) {
  if (my_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  my_string_.SetAllocated(my_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (my_string_.IsDefault()) {
    my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtensionOrderings1.my_string)
}

// -------------------------------------------------------------------

// TestExtensionOrderings2_TestExtensionOrderings3

// optional string my_string = 1;
inline bool TestExtensionOrderings2_TestExtensionOrderings3::_internal_has_my_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestExtensionOrderings2_TestExtensionOrderings3::has_my_string() const {
  return _internal_has_my_string();
}
inline void TestExtensionOrderings2_TestExtensionOrderings3::clear_my_string() {
  my_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestExtensionOrderings2_TestExtensionOrderings3::my_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string)
  return _internal_my_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtensionOrderings2_TestExtensionOrderings3::set_my_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 my_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string)
}
inline std::string* TestExtensionOrderings2_TestExtensionOrderings3::mutable_my_string() {
  std::string* _s = _internal_mutable_my_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string)
  return _s;
}
inline const std::string& TestExtensionOrderings2_TestExtensionOrderings3::_internal_my_string() const {
  return my_string_.Get();
}
inline void TestExtensionOrderings2_TestExtensionOrderings3::_internal_set_my_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  my_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtensionOrderings2_TestExtensionOrderings3::_internal_mutable_my_string() {
  _has_bits_[0] |= 0x00000001u;
  return my_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestExtensionOrderings2_TestExtensionOrderings3::release_my_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string)
  if (!_internal_has_my_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = my_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (my_string_.IsDefault()) {
    my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestExtensionOrderings2_TestExtensionOrderings3::set_allocated_my_string(std::string* my_string) {
  if (my_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  my_string_.SetAllocated(my_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (my_string_.IsDefault()) {
    my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3.my_string)
}

// -------------------------------------------------------------------

// TestExtensionOrderings2

// optional string my_string = 1;
inline bool TestExtensionOrderings2::_internal_has_my_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestExtensionOrderings2::has_my_string() const {
  return _internal_has_my_string();
}
inline void TestExtensionOrderings2::clear_my_string() {
  my_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestExtensionOrderings2::my_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionOrderings2.my_string)
  return _internal_my_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtensionOrderings2::set_my_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 my_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionOrderings2.my_string)
}
inline std::string* TestExtensionOrderings2::mutable_my_string() {
  std::string* _s = _internal_mutable_my_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtensionOrderings2.my_string)
  return _s;
}
inline const std::string& TestExtensionOrderings2::_internal_my_string() const {
  return my_string_.Get();
}
inline void TestExtensionOrderings2::_internal_set_my_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  my_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtensionOrderings2::_internal_mutable_my_string() {
  _has_bits_[0] |= 0x00000001u;
  return my_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestExtensionOrderings2::release_my_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtensionOrderings2.my_string)
  if (!_internal_has_my_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = my_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (my_string_.IsDefault()) {
    my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestExtensionOrderings2::set_allocated_my_string(std::string* my_string) {
  if (my_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  my_string_.SetAllocated(my_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (my_string_.IsDefault()) {
    my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtensionOrderings2.my_string)
}

// -------------------------------------------------------------------

// TestExtremeDefaultValues

// optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\"\376"];
inline bool TestExtremeDefaultValues::_internal_has_escaped_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_escaped_bytes() const {
  return _internal_has_escaped_bytes();
}
inline void TestExtremeDefaultValues::clear_escaped_bytes() {
  escaped_bytes_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestExtremeDefaultValues::escaped_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.escaped_bytes)
  if (escaped_bytes_.IsDefault()) return _i_give_permission_to_break_this_code_default_escaped_bytes_.get();
  return _internal_escaped_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtremeDefaultValues::set_escaped_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 escaped_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.escaped_bytes)
}
inline std::string* TestExtremeDefaultValues::mutable_escaped_bytes() {
  std::string* _s = _internal_mutable_escaped_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtremeDefaultValues.escaped_bytes)
  return _s;
}
inline const std::string& TestExtremeDefaultValues::_internal_escaped_bytes() const {
  return escaped_bytes_.Get();
}
inline void TestExtremeDefaultValues::_internal_set_escaped_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  escaped_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::_internal_mutable_escaped_bytes() {
  _has_bits_[0] |= 0x00000001u;
  return escaped_bytes_.Mutable(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_escaped_bytes_, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::release_escaped_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtremeDefaultValues.escaped_bytes)
  if (!_internal_has_escaped_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = escaped_bytes_.Release();
  return p;
}
inline void TestExtremeDefaultValues::set_allocated_escaped_bytes(std::string* escaped_bytes) {
  if (escaped_bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  escaped_bytes_.SetAllocated(escaped_bytes, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtremeDefaultValues.escaped_bytes)
}

// optional uint32 large_uint32 = 2 [default = 4294967295];
inline bool TestExtremeDefaultValues::_internal_has_large_uint32() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_large_uint32() const {
  return _internal_has_large_uint32();
}
inline void TestExtremeDefaultValues::clear_large_uint32() {
  large_uint32_ = 4294967295u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t TestExtremeDefaultValues::_internal_large_uint32() const {
  return large_uint32_;
}
inline uint32_t TestExtremeDefaultValues::large_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.large_uint32)
  return _internal_large_uint32();
}
inline void TestExtremeDefaultValues::_internal_set_large_uint32(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  large_uint32_ = value;
}
inline void TestExtremeDefaultValues::set_large_uint32(uint32_t value) {
  _internal_set_large_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.large_uint32)
}

// optional uint64 large_uint64 = 3 [default = 18446744073709551615];
inline bool TestExtremeDefaultValues::_internal_has_large_uint64() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_large_uint64() const {
  return _internal_has_large_uint64();
}
inline void TestExtremeDefaultValues::clear_large_uint64() {
  large_uint64_ = uint64_t{18446744073709551615u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t TestExtremeDefaultValues::_internal_large_uint64() const {
  return large_uint64_;
}
inline uint64_t TestExtremeDefaultValues::large_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.large_uint64)
  return _internal_large_uint64();
}
inline void TestExtremeDefaultValues::_internal_set_large_uint64(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  large_uint64_ = value;
}
inline void TestExtremeDefaultValues::set_large_uint64(uint64_t value) {
  _internal_set_large_uint64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.large_uint64)
}

// optional int32 small_int32 = 4 [default = -2147483647];
inline bool TestExtremeDefaultValues::_internal_has_small_int32() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_small_int32() const {
  return _internal_has_small_int32();
}
inline void TestExtremeDefaultValues::clear_small_int32() {
  small_int32_ = -2147483647;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t TestExtremeDefaultValues::_internal_small_int32() const {
  return small_int32_;
}
inline int32_t TestExtremeDefaultValues::small_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.small_int32)
  return _internal_small_int32();
}
inline void TestExtremeDefaultValues::_internal_set_small_int32(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  small_int32_ = value;
}
inline void TestExtremeDefaultValues::set_small_int32(int32_t value) {
  _internal_set_small_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.small_int32)
}

// optional int64 small_int64 = 5 [default = -9223372036854775807];
inline bool TestExtremeDefaultValues::_internal_has_small_int64() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_small_int64() const {
  return _internal_has_small_int64();
}
inline void TestExtremeDefaultValues::clear_small_int64() {
  small_int64_ = int64_t{-9223372036854775807};
  _has_bits_[0] &= ~0x00001000u;
}
inline int64_t TestExtremeDefaultValues::_internal_small_int64() const {
  return small_int64_;
}
inline int64_t TestExtremeDefaultValues::small_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.small_int64)
  return _internal_small_int64();
}
inline void TestExtremeDefaultValues::_internal_set_small_int64(int64_t value) {
  _has_bits_[0] |= 0x00001000u;
  small_int64_ = value;
}
inline void TestExtremeDefaultValues::set_small_int64(int64_t value) {
  _internal_set_small_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.small_int64)
}

// optional int32 really_small_int32 = 21 [default = -2147483648];
inline bool TestExtremeDefaultValues::_internal_has_really_small_int32() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_really_small_int32() const {
  return _internal_has_really_small_int32();
}
inline void TestExtremeDefaultValues::clear_really_small_int32() {
  really_small_int32_ = -2147483647 - 1;
  _has_bits_[0] &= ~0x02000000u;
}
inline int32_t TestExtremeDefaultValues::_internal_really_small_int32() const {
  return really_small_int32_;
}
inline int32_t TestExtremeDefaultValues::really_small_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.really_small_int32)
  return _internal_really_small_int32();
}
inline void TestExtremeDefaultValues::_internal_set_really_small_int32(int32_t value) {
  _has_bits_[0] |= 0x02000000u;
  really_small_int32_ = value;
}
inline void TestExtremeDefaultValues::set_really_small_int32(int32_t value) {
  _internal_set_really_small_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.really_small_int32)
}

// optional int64 really_small_int64 = 22 [default = -9223372036854775808];
inline bool TestExtremeDefaultValues::_internal_has_really_small_int64() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_really_small_int64() const {
  return _internal_has_really_small_int64();
}
inline void TestExtremeDefaultValues::clear_really_small_int64() {
  really_small_int64_ = int64_t{-9223372036854775807} - 1;
  _has_bits_[0] &= ~0x04000000u;
}
inline int64_t TestExtremeDefaultValues::_internal_really_small_int64() const {
  return really_small_int64_;
}
inline int64_t TestExtremeDefaultValues::really_small_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.really_small_int64)
  return _internal_really_small_int64();
}
inline void TestExtremeDefaultValues::_internal_set_really_small_int64(int64_t value) {
  _has_bits_[0] |= 0x04000000u;
  really_small_int64_ = value;
}
inline void TestExtremeDefaultValues::set_really_small_int64(int64_t value) {
  _internal_set_really_small_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.really_small_int64)
}

// optional string utf8_string = 6 [default = "\341\210\264"];
inline bool TestExtremeDefaultValues::_internal_has_utf8_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_utf8_string() const {
  return _internal_has_utf8_string();
}
inline void TestExtremeDefaultValues::clear_utf8_string() {
  utf8_string_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestExtremeDefaultValues::utf8_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.utf8_string)
  if (utf8_string_.IsDefault()) return _i_give_permission_to_break_this_code_default_utf8_string_.get();
  return _internal_utf8_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtremeDefaultValues::set_utf8_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 utf8_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.utf8_string)
}
inline std::string* TestExtremeDefaultValues::mutable_utf8_string() {
  std::string* _s = _internal_mutable_utf8_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtremeDefaultValues.utf8_string)
  return _s;
}
inline const std::string& TestExtremeDefaultValues::_internal_utf8_string() const {
  return utf8_string_.Get();
}
inline void TestExtremeDefaultValues::_internal_set_utf8_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  utf8_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::_internal_mutable_utf8_string() {
  _has_bits_[0] |= 0x00000002u;
  return utf8_string_.Mutable(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_utf8_string_, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::release_utf8_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtremeDefaultValues.utf8_string)
  if (!_internal_has_utf8_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = utf8_string_.Release();
  return p;
}
inline void TestExtremeDefaultValues::set_allocated_utf8_string(std::string* utf8_string) {
  if (utf8_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  utf8_string_.SetAllocated(utf8_string, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtremeDefaultValues.utf8_string)
}

// optional float zero_float = 7 [default = 0];
inline bool TestExtremeDefaultValues::_internal_has_zero_float() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_zero_float() const {
  return _internal_has_zero_float();
}
inline void TestExtremeDefaultValues::clear_zero_float() {
  zero_float_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float TestExtremeDefaultValues::_internal_zero_float() const {
  return zero_float_;
}
inline float TestExtremeDefaultValues::zero_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.zero_float)
  return _internal_zero_float();
}
inline void TestExtremeDefaultValues::_internal_set_zero_float(float value) {
  _has_bits_[0] |= 0x00000100u;
  zero_float_ = value;
}
inline void TestExtremeDefaultValues::set_zero_float(float value) {
  _internal_set_zero_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.zero_float)
}

// optional float one_float = 8 [default = 1];
inline bool TestExtremeDefaultValues::_internal_has_one_float() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_one_float() const {
  return _internal_has_one_float();
}
inline void TestExtremeDefaultValues::clear_one_float() {
  one_float_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline float TestExtremeDefaultValues::_internal_one_float() const {
  return one_float_;
}
inline float TestExtremeDefaultValues::one_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.one_float)
  return _internal_one_float();
}
inline void TestExtremeDefaultValues::_internal_set_one_float(float value) {
  _has_bits_[0] |= 0x00002000u;
  one_float_ = value;
}
inline void TestExtremeDefaultValues::set_one_float(float value) {
  _internal_set_one_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.one_float)
}

// optional float small_float = 9 [default = 1.5];
inline bool TestExtremeDefaultValues::_internal_has_small_float() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_small_float() const {
  return _internal_has_small_float();
}
inline void TestExtremeDefaultValues::clear_small_float() {
  small_float_ = 1.5f;
  _has_bits_[0] &= ~0x00004000u;
}
inline float TestExtremeDefaultValues::_internal_small_float() const {
  return small_float_;
}
inline float TestExtremeDefaultValues::small_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.small_float)
  return _internal_small_float();
}
inline void TestExtremeDefaultValues::_internal_set_small_float(float value) {
  _has_bits_[0] |= 0x00004000u;
  small_float_ = value;
}
inline void TestExtremeDefaultValues::set_small_float(float value) {
  _internal_set_small_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.small_float)
}

// optional float negative_one_float = 10 [default = -1];
inline bool TestExtremeDefaultValues::_internal_has_negative_one_float() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_negative_one_float() const {
  return _internal_has_negative_one_float();
}
inline void TestExtremeDefaultValues::clear_negative_one_float() {
  negative_one_float_ = -1;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TestExtremeDefaultValues::_internal_negative_one_float() const {
  return negative_one_float_;
}
inline float TestExtremeDefaultValues::negative_one_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.negative_one_float)
  return _internal_negative_one_float();
}
inline void TestExtremeDefaultValues::_internal_set_negative_one_float(float value) {
  _has_bits_[0] |= 0x00008000u;
  negative_one_float_ = value;
}
inline void TestExtremeDefaultValues::set_negative_one_float(float value) {
  _internal_set_negative_one_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.negative_one_float)
}

// optional float negative_float = 11 [default = -1.5];
inline bool TestExtremeDefaultValues::_internal_has_negative_float() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_negative_float() const {
  return _internal_has_negative_float();
}
inline void TestExtremeDefaultValues::clear_negative_float() {
  negative_float_ = -1.5f;
  _has_bits_[0] &= ~0x00010000u;
}
inline float TestExtremeDefaultValues::_internal_negative_float() const {
  return negative_float_;
}
inline float TestExtremeDefaultValues::negative_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.negative_float)
  return _internal_negative_float();
}
inline void TestExtremeDefaultValues::_internal_set_negative_float(float value) {
  _has_bits_[0] |= 0x00010000u;
  negative_float_ = value;
}
inline void TestExtremeDefaultValues::set_negative_float(float value) {
  _internal_set_negative_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.negative_float)
}

// optional float large_float = 12 [default = 2e+08];
inline bool TestExtremeDefaultValues::_internal_has_large_float() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_large_float() const {
  return _internal_has_large_float();
}
inline void TestExtremeDefaultValues::clear_large_float() {
  large_float_ = 2e+08f;
  _has_bits_[0] &= ~0x00020000u;
}
inline float TestExtremeDefaultValues::_internal_large_float() const {
  return large_float_;
}
inline float TestExtremeDefaultValues::large_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.large_float)
  return _internal_large_float();
}
inline void TestExtremeDefaultValues::_internal_set_large_float(float value) {
  _has_bits_[0] |= 0x00020000u;
  large_float_ = value;
}
inline void TestExtremeDefaultValues::set_large_float(float value) {
  _internal_set_large_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.large_float)
}

// optional float small_negative_float = 13 [default = -8e-28];
inline bool TestExtremeDefaultValues::_internal_has_small_negative_float() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_small_negative_float() const {
  return _internal_has_small_negative_float();
}
inline void TestExtremeDefaultValues::clear_small_negative_float() {
  small_negative_float_ = -8e-28f;
  _has_bits_[0] &= ~0x00040000u;
}
inline float TestExtremeDefaultValues::_internal_small_negative_float() const {
  return small_negative_float_;
}
inline float TestExtremeDefaultValues::small_negative_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.small_negative_float)
  return _internal_small_negative_float();
}
inline void TestExtremeDefaultValues::_internal_set_small_negative_float(float value) {
  _has_bits_[0] |= 0x00040000u;
  small_negative_float_ = value;
}
inline void TestExtremeDefaultValues::set_small_negative_float(float value) {
  _internal_set_small_negative_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.small_negative_float)
}

// optional double inf_double = 14 [default = inf];
inline bool TestExtremeDefaultValues::_internal_has_inf_double() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_inf_double() const {
  return _internal_has_inf_double();
}
inline void TestExtremeDefaultValues::clear_inf_double() {
  inf_double_ = std::numeric_limits<double>::infinity();
  _has_bits_[0] &= ~0x00080000u;
}
inline double TestExtremeDefaultValues::_internal_inf_double() const {
  return inf_double_;
}
inline double TestExtremeDefaultValues::inf_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.inf_double)
  return _internal_inf_double();
}
inline void TestExtremeDefaultValues::_internal_set_inf_double(double value) {
  _has_bits_[0] |= 0x00080000u;
  inf_double_ = value;
}
inline void TestExtremeDefaultValues::set_inf_double(double value) {
  _internal_set_inf_double(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.inf_double)
}

// optional double neg_inf_double = 15 [default = -inf];
inline bool TestExtremeDefaultValues::_internal_has_neg_inf_double() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_neg_inf_double() const {
  return _internal_has_neg_inf_double();
}
inline void TestExtremeDefaultValues::clear_neg_inf_double() {
  neg_inf_double_ = -std::numeric_limits<double>::infinity();
  _has_bits_[0] &= ~0x00100000u;
}
inline double TestExtremeDefaultValues::_internal_neg_inf_double() const {
  return neg_inf_double_;
}
inline double TestExtremeDefaultValues::neg_inf_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.neg_inf_double)
  return _internal_neg_inf_double();
}
inline void TestExtremeDefaultValues::_internal_set_neg_inf_double(double value) {
  _has_bits_[0] |= 0x00100000u;
  neg_inf_double_ = value;
}
inline void TestExtremeDefaultValues::set_neg_inf_double(double value) {
  _internal_set_neg_inf_double(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.neg_inf_double)
}

// optional double nan_double = 16 [default = nan];
inline bool TestExtremeDefaultValues::_internal_has_nan_double() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_nan_double() const {
  return _internal_has_nan_double();
}
inline void TestExtremeDefaultValues::clear_nan_double() {
  nan_double_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00200000u;
}
inline double TestExtremeDefaultValues::_internal_nan_double() const {
  return nan_double_;
}
inline double TestExtremeDefaultValues::nan_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.nan_double)
  return _internal_nan_double();
}
inline void TestExtremeDefaultValues::_internal_set_nan_double(double value) {
  _has_bits_[0] |= 0x00200000u;
  nan_double_ = value;
}
inline void TestExtremeDefaultValues::set_nan_double(double value) {
  _internal_set_nan_double(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.nan_double)
}

// optional float inf_float = 17 [default = inf];
inline bool TestExtremeDefaultValues::_internal_has_inf_float() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_inf_float() const {
  return _internal_has_inf_float();
}
inline void TestExtremeDefaultValues::clear_inf_float() {
  inf_float_ = std::numeric_limits<float>::infinity();
  _has_bits_[0] &= ~0x00400000u;
}
inline float TestExtremeDefaultValues::_internal_inf_float() const {
  return inf_float_;
}
inline float TestExtremeDefaultValues::inf_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.inf_float)
  return _internal_inf_float();
}
inline void TestExtremeDefaultValues::_internal_set_inf_float(float value) {
  _has_bits_[0] |= 0x00400000u;
  inf_float_ = value;
}
inline void TestExtremeDefaultValues::set_inf_float(float value) {
  _internal_set_inf_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.inf_float)
}

// optional float neg_inf_float = 18 [default = -inf];
inline bool TestExtremeDefaultValues::_internal_has_neg_inf_float() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_neg_inf_float() const {
  return _internal_has_neg_inf_float();
}
inline void TestExtremeDefaultValues::clear_neg_inf_float() {
  neg_inf_float_ = -std::numeric_limits<float>::infinity();
  _has_bits_[0] &= ~0x00800000u;
}
inline float TestExtremeDefaultValues::_internal_neg_inf_float() const {
  return neg_inf_float_;
}
inline float TestExtremeDefaultValues::neg_inf_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.neg_inf_float)
  return _internal_neg_inf_float();
}
inline void TestExtremeDefaultValues::_internal_set_neg_inf_float(float value) {
  _has_bits_[0] |= 0x00800000u;
  neg_inf_float_ = value;
}
inline void TestExtremeDefaultValues::set_neg_inf_float(float value) {
  _internal_set_neg_inf_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.neg_inf_float)
}

// optional float nan_float = 19 [default = nan];
inline bool TestExtremeDefaultValues::_internal_has_nan_float() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_nan_float() const {
  return _internal_has_nan_float();
}
inline void TestExtremeDefaultValues::clear_nan_float() {
  nan_float_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x01000000u;
}
inline float TestExtremeDefaultValues::_internal_nan_float() const {
  return nan_float_;
}
inline float TestExtremeDefaultValues::nan_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.nan_float)
  return _internal_nan_float();
}
inline void TestExtremeDefaultValues::_internal_set_nan_float(float value) {
  _has_bits_[0] |= 0x01000000u;
  nan_float_ = value;
}
inline void TestExtremeDefaultValues::set_nan_float(float value) {
  _internal_set_nan_float(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.nan_float)
}

// optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
inline bool TestExtremeDefaultValues::_internal_has_cpp_trigraph() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_cpp_trigraph() const {
  return _internal_has_cpp_trigraph();
}
inline void TestExtremeDefaultValues::clear_cpp_trigraph() {
  cpp_trigraph_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestExtremeDefaultValues::cpp_trigraph() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph)
  if (cpp_trigraph_.IsDefault()) return _i_give_permission_to_break_this_code_default_cpp_trigraph_.get();
  return _internal_cpp_trigraph();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtremeDefaultValues::set_cpp_trigraph(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 cpp_trigraph_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph)
}
inline std::string* TestExtremeDefaultValues::mutable_cpp_trigraph() {
  std::string* _s = _internal_mutable_cpp_trigraph();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph)
  return _s;
}
inline const std::string& TestExtremeDefaultValues::_internal_cpp_trigraph() const {
  return cpp_trigraph_.Get();
}
inline void TestExtremeDefaultValues::_internal_set_cpp_trigraph(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cpp_trigraph_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::_internal_mutable_cpp_trigraph() {
  _has_bits_[0] |= 0x00000004u;
  return cpp_trigraph_.Mutable(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cpp_trigraph_, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::release_cpp_trigraph() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph)
  if (!_internal_has_cpp_trigraph()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = cpp_trigraph_.Release();
  return p;
}
inline void TestExtremeDefaultValues::set_allocated_cpp_trigraph(std::string* cpp_trigraph) {
  if (cpp_trigraph != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cpp_trigraph_.SetAllocated(cpp_trigraph, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtremeDefaultValues.cpp_trigraph)
}

// optional string string_with_zero = 23 [default = "hel\000lo"];
inline bool TestExtremeDefaultValues::_internal_has_string_with_zero() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_string_with_zero() const {
  return _internal_has_string_with_zero();
}
inline void TestExtremeDefaultValues::clear_string_with_zero() {
  string_with_zero_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TestExtremeDefaultValues::string_with_zero() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.string_with_zero)
  if (string_with_zero_.IsDefault()) return _i_give_permission_to_break_this_code_default_string_with_zero_.get();
  return _internal_string_with_zero();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtremeDefaultValues::set_string_with_zero(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 string_with_zero_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.string_with_zero)
}
inline std::string* TestExtremeDefaultValues::mutable_string_with_zero() {
  std::string* _s = _internal_mutable_string_with_zero();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtremeDefaultValues.string_with_zero)
  return _s;
}
inline const std::string& TestExtremeDefaultValues::_internal_string_with_zero() const {
  return string_with_zero_.Get();
}
inline void TestExtremeDefaultValues::_internal_set_string_with_zero(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  string_with_zero_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::_internal_mutable_string_with_zero() {
  _has_bits_[0] |= 0x00000008u;
  return string_with_zero_.Mutable(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_with_zero_, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::release_string_with_zero() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtremeDefaultValues.string_with_zero)
  if (!_internal_has_string_with_zero()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = string_with_zero_.Release();
  return p;
}
inline void TestExtremeDefaultValues::set_allocated_string_with_zero(std::string* string_with_zero) {
  if (string_with_zero != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  string_with_zero_.SetAllocated(string_with_zero, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtremeDefaultValues.string_with_zero)
}

// optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
inline bool TestExtremeDefaultValues::_internal_has_bytes_with_zero() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_bytes_with_zero() const {
  return _internal_has_bytes_with_zero();
}
inline void TestExtremeDefaultValues::clear_bytes_with_zero() {
  bytes_with_zero_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TestExtremeDefaultValues::bytes_with_zero() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.bytes_with_zero)
  if (bytes_with_zero_.IsDefault()) return _i_give_permission_to_break_this_code_default_bytes_with_zero_.get();
  return _internal_bytes_with_zero();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtremeDefaultValues::set_bytes_with_zero(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 bytes_with_zero_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.bytes_with_zero)
}
inline std::string* TestExtremeDefaultValues::mutable_bytes_with_zero() {
  std::string* _s = _internal_mutable_bytes_with_zero();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtremeDefaultValues.bytes_with_zero)
  return _s;
}
inline const std::string& TestExtremeDefaultValues::_internal_bytes_with_zero() const {
  return bytes_with_zero_.Get();
}
inline void TestExtremeDefaultValues::_internal_set_bytes_with_zero(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bytes_with_zero_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::_internal_mutable_bytes_with_zero() {
  _has_bits_[0] |= 0x00000010u;
  return bytes_with_zero_.Mutable(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_bytes_with_zero_, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::release_bytes_with_zero() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtremeDefaultValues.bytes_with_zero)
  if (!_internal_has_bytes_with_zero()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = bytes_with_zero_.Release();
  return p;
}
inline void TestExtremeDefaultValues::set_allocated_bytes_with_zero(std::string* bytes_with_zero) {
  if (bytes_with_zero != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bytes_with_zero_.SetAllocated(bytes_with_zero, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtremeDefaultValues.bytes_with_zero)
}

// optional string string_piece_with_zero = 25 [default = "ab\000c", ctype = STRING_PIECE];
inline bool TestExtremeDefaultValues::_internal_has_string_piece_with_zero() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_string_piece_with_zero() const {
  return _internal_has_string_piece_with_zero();
}
inline void TestExtremeDefaultValues::clear_string_piece_with_zero() {
  string_piece_with_zero_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TestExtremeDefaultValues::string_piece_with_zero() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero)
  if (string_piece_with_zero_.IsDefault()) return _i_give_permission_to_break_this_code_default_string_piece_with_zero_.get();
  return _internal_string_piece_with_zero();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtremeDefaultValues::set_string_piece_with_zero(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 string_piece_with_zero_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero)
}
inline std::string* TestExtremeDefaultValues::mutable_string_piece_with_zero() {
  std::string* _s = _internal_mutable_string_piece_with_zero();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero)
  return _s;
}
inline const std::string& TestExtremeDefaultValues::_internal_string_piece_with_zero() const {
  return string_piece_with_zero_.Get();
}
inline void TestExtremeDefaultValues::_internal_set_string_piece_with_zero(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  string_piece_with_zero_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::_internal_mutable_string_piece_with_zero() {
  _has_bits_[0] |= 0x00000020u;
  return string_piece_with_zero_.Mutable(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_string_piece_with_zero_, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::release_string_piece_with_zero() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero)
  if (!_internal_has_string_piece_with_zero()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = string_piece_with_zero_.Release();
  return p;
}
inline void TestExtremeDefaultValues::set_allocated_string_piece_with_zero(std::string* string_piece_with_zero) {
  if (string_piece_with_zero != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  string_piece_with_zero_.SetAllocated(string_piece_with_zero, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtremeDefaultValues.string_piece_with_zero)
}

// optional string cord_with_zero = 26 [default = "12\0003", ctype = CORD];
inline bool TestExtremeDefaultValues::_internal_has_cord_with_zero() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_cord_with_zero() const {
  return _internal_has_cord_with_zero();
}
inline void TestExtremeDefaultValues::clear_cord_with_zero() {
  cord_with_zero_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TestExtremeDefaultValues::cord_with_zero() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.cord_with_zero)
  if (cord_with_zero_.IsDefault()) return _i_give_permission_to_break_this_code_default_cord_with_zero_.get();
  return _internal_cord_with_zero();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtremeDefaultValues::set_cord_with_zero(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 cord_with_zero_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.cord_with_zero)
}
inline std::string* TestExtremeDefaultValues::mutable_cord_with_zero() {
  std::string* _s = _internal_mutable_cord_with_zero();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtremeDefaultValues.cord_with_zero)
  return _s;
}
inline const std::string& TestExtremeDefaultValues::_internal_cord_with_zero() const {
  return cord_with_zero_.Get();
}
inline void TestExtremeDefaultValues::_internal_set_cord_with_zero(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  cord_with_zero_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::_internal_mutable_cord_with_zero() {
  _has_bits_[0] |= 0x00000040u;
  return cord_with_zero_.Mutable(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_cord_with_zero_, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::release_cord_with_zero() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtremeDefaultValues.cord_with_zero)
  if (!_internal_has_cord_with_zero()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = cord_with_zero_.Release();
  return p;
}
inline void TestExtremeDefaultValues::set_allocated_cord_with_zero(std::string* cord_with_zero) {
  if (cord_with_zero != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  cord_with_zero_.SetAllocated(cord_with_zero, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtremeDefaultValues.cord_with_zero)
}

// optional string replacement_string = 27 [default = "${unknown}"];
inline bool TestExtremeDefaultValues::_internal_has_replacement_string() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TestExtremeDefaultValues::has_replacement_string() const {
  return _internal_has_replacement_string();
}
inline void TestExtremeDefaultValues::clear_replacement_string() {
  replacement_string_.ClearToDefault(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& TestExtremeDefaultValues::replacement_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtremeDefaultValues.replacement_string)
  if (replacement_string_.IsDefault()) return _i_give_permission_to_break_this_code_default_replacement_string_.get();
  return _internal_replacement_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestExtremeDefaultValues::set_replacement_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 replacement_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtremeDefaultValues.replacement_string)
}
inline std::string* TestExtremeDefaultValues::mutable_replacement_string() {
  std::string* _s = _internal_mutable_replacement_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestExtremeDefaultValues.replacement_string)
  return _s;
}
inline const std::string& TestExtremeDefaultValues::_internal_replacement_string() const {
  return replacement_string_.Get();
}
inline void TestExtremeDefaultValues::_internal_set_replacement_string(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  replacement_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::_internal_mutable_replacement_string() {
  _has_bits_[0] |= 0x00000080u;
  return replacement_string_.Mutable(::protobuf_unittest::TestExtremeDefaultValues::_i_give_permission_to_break_this_code_default_replacement_string_, GetArenaForAllocation());
}
inline std::string* TestExtremeDefaultValues::release_replacement_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestExtremeDefaultValues.replacement_string)
  if (!_internal_has_replacement_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = replacement_string_.Release();
  return p;
}
inline void TestExtremeDefaultValues::set_allocated_replacement_string(std::string* replacement_string) {
  if (replacement_string != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  replacement_string_.SetAllocated(replacement_string, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestExtremeDefaultValues.replacement_string)
}

// -------------------------------------------------------------------

// SparseEnumMessage

// optional .protobuf_unittest.TestSparseEnum sparse_enum = 1;
inline bool SparseEnumMessage::_internal_has_sparse_enum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseEnumMessage::has_sparse_enum() const {
  return _internal_has_sparse_enum();
}
inline void SparseEnumMessage::clear_sparse_enum() {
  sparse_enum_ = 123;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::protobuf_unittest::TestSparseEnum SparseEnumMessage::_internal_sparse_enum() const {
  return static_cast< ::protobuf_unittest::TestSparseEnum >(sparse_enum_);
}
inline ::protobuf_unittest::TestSparseEnum SparseEnumMessage::sparse_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.SparseEnumMessage.sparse_enum)
  return _internal_sparse_enum();
}
inline void SparseEnumMessage::_internal_set_sparse_enum(::protobuf_unittest::TestSparseEnum value) {
  assert(::protobuf_unittest::TestSparseEnum_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  sparse_enum_ = value;
}
inline void SparseEnumMessage::set_sparse_enum(::protobuf_unittest::TestSparseEnum value) {
  _internal_set_sparse_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.SparseEnumMessage.sparse_enum)
}

// -------------------------------------------------------------------

// OneString

// optional string data = 1;
inline bool OneString::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OneString::has_data() const {
  return _internal_has_data();
}
inline void OneString::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OneString::data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.OneString.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OneString::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.OneString.data)
}
inline std::string* OneString::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.OneString.data)
  return _s;
}
inline const std::string& OneString::_internal_data() const {
  return data_.Get();
}
inline void OneString::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* OneString::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* OneString::release_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.OneString.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OneString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.OneString.data)
}

// -------------------------------------------------------------------

// MoreString

// repeated string data = 1;
inline int MoreString::_internal_data_size() const {
  return data_.size();
}
inline int MoreString::data_size() const {
  return _internal_data_size();
}
inline void MoreString::clear_data() {
  data_.Clear();
}
inline std::string* MoreString::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.MoreString.data)
  return _s;
}
inline const std::string& MoreString::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& MoreString::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.MoreString.data)
  return _internal_data(index);
}
inline std::string* MoreString::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.MoreString.data)
  return data_.Mutable(index);
}
inline void MoreString::set_data(int index, const std::string& value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.MoreString.data)
}
inline void MoreString::set_data(int index, std::string&& value) {
  data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.MoreString.data)
}
inline void MoreString::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.MoreString.data)
}
inline void MoreString::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.MoreString.data)
}
inline std::string* MoreString::_internal_add_data() {
  return data_.Add();
}
inline void MoreString::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.MoreString.data)
}
inline void MoreString::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.MoreString.data)
}
inline void MoreString::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.MoreString.data)
}
inline void MoreString::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.MoreString.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MoreString::data() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.MoreString.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MoreString::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.MoreString.data)
  return &data_;
}

// -------------------------------------------------------------------

// OneBytes

// optional bytes data = 1;
inline bool OneBytes::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OneBytes::has_data() const {
  return _internal_has_data();
}
inline void OneBytes::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OneBytes::data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.OneBytes.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OneBytes::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.OneBytes.data)
}
inline std::string* OneBytes::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.OneBytes.data)
  return _s;
}
inline const std::string& OneBytes::_internal_data() const {
  return data_.Get();
}
inline void OneBytes::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* OneBytes::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* OneBytes::release_data() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.OneBytes.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OneBytes::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.OneBytes.data)
}

// -------------------------------------------------------------------

// MoreBytes

// repeated bytes data = 1;
inline int MoreBytes::_internal_data_size() const {
  return data_.size();
}
inline int MoreBytes::data_size() const {
  return _internal_data_size();
}
inline void MoreBytes::clear_data() {
  data_.Clear();
}
inline std::string* MoreBytes::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.MoreBytes.data)
  return _s;
}
inline const std::string& MoreBytes::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& MoreBytes::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.MoreBytes.data)
  return _internal_data(index);
}
inline std::string* MoreBytes::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.MoreBytes.data)
  return data_.Mutable(index);
}
inline void MoreBytes::set_data(int index, const std::string& value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.MoreBytes.data)
}
inline void MoreBytes::set_data(int index, std::string&& value) {
  data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.MoreBytes.data)
}
inline void MoreBytes::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.MoreBytes.data)
}
inline void MoreBytes::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.MoreBytes.data)
}
inline std::string* MoreBytes::_internal_add_data() {
  return data_.Add();
}
inline void MoreBytes::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.MoreBytes.data)
}
inline void MoreBytes::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.MoreBytes.data)
}
inline void MoreBytes::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.MoreBytes.data)
}
inline void MoreBytes::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.MoreBytes.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MoreBytes::data() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.MoreBytes.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MoreBytes::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.MoreBytes.data)
  return &data_;
}

// -------------------------------------------------------------------

// ManyOptionalString

// optional string str1 = 1;
inline bool ManyOptionalString::_internal_has_str1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str1() const {
  return _internal_has_str1();
}
inline void ManyOptionalString::clear_str1() {
  str1_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ManyOptionalString::str1() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str1)
  return _internal_str1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str1(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 str1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str1)
}
inline std::string* ManyOptionalString::mutable_str1() {
  std::string* _s = _internal_mutable_str1();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str1)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str1() const {
  return str1_.Get();
}
inline void ManyOptionalString::_internal_set_str1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str1_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str1() {
  _has_bits_[0] |= 0x00000001u;
  return str1_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str1() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str1)
  if (!_internal_has_str1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = str1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str1_.IsDefault()) {
    str1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str1(std::string* str1) {
  if (str1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str1_.SetAllocated(str1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str1_.IsDefault()) {
    str1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str1)
}

// optional string str2 = 2;
inline bool ManyOptionalString::_internal_has_str2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str2() const {
  return _internal_has_str2();
}
inline void ManyOptionalString::clear_str2() {
  str2_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ManyOptionalString::str2() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str2)
  return _internal_str2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str2(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 str2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str2)
}
inline std::string* ManyOptionalString::mutable_str2() {
  std::string* _s = _internal_mutable_str2();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str2)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str2() const {
  return str2_.Get();
}
inline void ManyOptionalString::_internal_set_str2(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  str2_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str2() {
  _has_bits_[0] |= 0x00000002u;
  return str2_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str2() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str2)
  if (!_internal_has_str2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = str2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str2_.IsDefault()) {
    str2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str2(std::string* str2) {
  if (str2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  str2_.SetAllocated(str2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str2_.IsDefault()) {
    str2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str2)
}

// optional string str3 = 3;
inline bool ManyOptionalString::_internal_has_str3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str3() const {
  return _internal_has_str3();
}
inline void ManyOptionalString::clear_str3() {
  str3_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ManyOptionalString::str3() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str3)
  return _internal_str3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str3(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 str3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str3)
}
inline std::string* ManyOptionalString::mutable_str3() {
  std::string* _s = _internal_mutable_str3();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str3)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str3() const {
  return str3_.Get();
}
inline void ManyOptionalString::_internal_set_str3(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  str3_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str3() {
  _has_bits_[0] |= 0x00000004u;
  return str3_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str3() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str3)
  if (!_internal_has_str3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = str3_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str3_.IsDefault()) {
    str3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str3(std::string* str3) {
  if (str3 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  str3_.SetAllocated(str3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str3_.IsDefault()) {
    str3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str3)
}

// optional string str4 = 4;
inline bool ManyOptionalString::_internal_has_str4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str4() const {
  return _internal_has_str4();
}
inline void ManyOptionalString::clear_str4() {
  str4_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ManyOptionalString::str4() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str4)
  return _internal_str4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str4(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 str4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str4)
}
inline std::string* ManyOptionalString::mutable_str4() {
  std::string* _s = _internal_mutable_str4();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str4)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str4() const {
  return str4_.Get();
}
inline void ManyOptionalString::_internal_set_str4(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  str4_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str4() {
  _has_bits_[0] |= 0x00000008u;
  return str4_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str4() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str4)
  if (!_internal_has_str4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = str4_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str4_.IsDefault()) {
    str4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str4(std::string* str4) {
  if (str4 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  str4_.SetAllocated(str4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str4_.IsDefault()) {
    str4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str4)
}

// optional string str5 = 5;
inline bool ManyOptionalString::_internal_has_str5() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str5() const {
  return _internal_has_str5();
}
inline void ManyOptionalString::clear_str5() {
  str5_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ManyOptionalString::str5() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str5)
  return _internal_str5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str5(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 str5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str5)
}
inline std::string* ManyOptionalString::mutable_str5() {
  std::string* _s = _internal_mutable_str5();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str5)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str5() const {
  return str5_.Get();
}
inline void ManyOptionalString::_internal_set_str5(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  str5_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str5() {
  _has_bits_[0] |= 0x00000010u;
  return str5_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str5() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str5)
  if (!_internal_has_str5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = str5_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str5_.IsDefault()) {
    str5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str5(std::string* str5) {
  if (str5 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  str5_.SetAllocated(str5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str5_.IsDefault()) {
    str5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str5)
}

// optional string str6 = 6;
inline bool ManyOptionalString::_internal_has_str6() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str6() const {
  return _internal_has_str6();
}
inline void ManyOptionalString::clear_str6() {
  str6_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ManyOptionalString::str6() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str6)
  return _internal_str6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str6(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 str6_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str6)
}
inline std::string* ManyOptionalString::mutable_str6() {
  std::string* _s = _internal_mutable_str6();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str6)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str6() const {
  return str6_.Get();
}
inline void ManyOptionalString::_internal_set_str6(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  str6_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str6() {
  _has_bits_[0] |= 0x00000020u;
  return str6_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str6() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str6)
  if (!_internal_has_str6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = str6_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str6_.IsDefault()) {
    str6_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str6(std::string* str6) {
  if (str6 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  str6_.SetAllocated(str6, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str6_.IsDefault()) {
    str6_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str6)
}

// optional string str7 = 7;
inline bool ManyOptionalString::_internal_has_str7() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str7() const {
  return _internal_has_str7();
}
inline void ManyOptionalString::clear_str7() {
  str7_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ManyOptionalString::str7() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str7)
  return _internal_str7();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str7(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 str7_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str7)
}
inline std::string* ManyOptionalString::mutable_str7() {
  std::string* _s = _internal_mutable_str7();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str7)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str7() const {
  return str7_.Get();
}
inline void ManyOptionalString::_internal_set_str7(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  str7_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str7() {
  _has_bits_[0] |= 0x00000040u;
  return str7_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str7() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str7)
  if (!_internal_has_str7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = str7_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str7_.IsDefault()) {
    str7_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str7(std::string* str7) {
  if (str7 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  str7_.SetAllocated(str7, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str7_.IsDefault()) {
    str7_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str7)
}

// optional string str8 = 8;
inline bool ManyOptionalString::_internal_has_str8() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str8() const {
  return _internal_has_str8();
}
inline void ManyOptionalString::clear_str8() {
  str8_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ManyOptionalString::str8() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str8)
  return _internal_str8();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str8(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 str8_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str8)
}
inline std::string* ManyOptionalString::mutable_str8() {
  std::string* _s = _internal_mutable_str8();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str8)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str8() const {
  return str8_.Get();
}
inline void ManyOptionalString::_internal_set_str8(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  str8_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str8() {
  _has_bits_[0] |= 0x00000080u;
  return str8_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str8() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str8)
  if (!_internal_has_str8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = str8_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str8_.IsDefault()) {
    str8_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str8(std::string* str8) {
  if (str8 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  str8_.SetAllocated(str8, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str8_.IsDefault()) {
    str8_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str8)
}

// optional string str9 = 9;
inline bool ManyOptionalString::_internal_has_str9() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str9() const {
  return _internal_has_str9();
}
inline void ManyOptionalString::clear_str9() {
  str9_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ManyOptionalString::str9() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str9)
  return _internal_str9();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str9(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 str9_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str9)
}
inline std::string* ManyOptionalString::mutable_str9() {
  std::string* _s = _internal_mutable_str9();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str9)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str9() const {
  return str9_.Get();
}
inline void ManyOptionalString::_internal_set_str9(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  str9_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str9() {
  _has_bits_[0] |= 0x00000100u;
  return str9_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str9() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str9)
  if (!_internal_has_str9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = str9_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str9_.IsDefault()) {
    str9_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str9(std::string* str9) {
  if (str9 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  str9_.SetAllocated(str9, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str9_.IsDefault()) {
    str9_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str9)
}

// optional string str10 = 10;
inline bool ManyOptionalString::_internal_has_str10() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str10() const {
  return _internal_has_str10();
}
inline void ManyOptionalString::clear_str10() {
  str10_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& ManyOptionalString::str10() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str10)
  return _internal_str10();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str10(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 str10_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str10)
}
inline std::string* ManyOptionalString::mutable_str10() {
  std::string* _s = _internal_mutable_str10();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str10)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str10() const {
  return str10_.Get();
}
inline void ManyOptionalString::_internal_set_str10(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  str10_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str10() {
  _has_bits_[0] |= 0x00000200u;
  return str10_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str10() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str10)
  if (!_internal_has_str10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  auto* p = str10_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str10_.IsDefault()) {
    str10_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str10(std::string* str10) {
  if (str10 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  str10_.SetAllocated(str10, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str10_.IsDefault()) {
    str10_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str10)
}

// optional string str11 = 11;
inline bool ManyOptionalString::_internal_has_str11() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str11() const {
  return _internal_has_str11();
}
inline void ManyOptionalString::clear_str11() {
  str11_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& ManyOptionalString::str11() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str11)
  return _internal_str11();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str11(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 str11_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str11)
}
inline std::string* ManyOptionalString::mutable_str11() {
  std::string* _s = _internal_mutable_str11();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str11)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str11() const {
  return str11_.Get();
}
inline void ManyOptionalString::_internal_set_str11(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  str11_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str11() {
  _has_bits_[0] |= 0x00000400u;
  return str11_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str11() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str11)
  if (!_internal_has_str11()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  auto* p = str11_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str11_.IsDefault()) {
    str11_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str11(std::string* str11) {
  if (str11 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  str11_.SetAllocated(str11, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str11_.IsDefault()) {
    str11_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str11)
}

// optional string str12 = 12;
inline bool ManyOptionalString::_internal_has_str12() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str12() const {
  return _internal_has_str12();
}
inline void ManyOptionalString::clear_str12() {
  str12_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& ManyOptionalString::str12() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str12)
  return _internal_str12();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str12(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000800u;
 str12_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str12)
}
inline std::string* ManyOptionalString::mutable_str12() {
  std::string* _s = _internal_mutable_str12();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str12)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str12() const {
  return str12_.Get();
}
inline void ManyOptionalString::_internal_set_str12(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  str12_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str12() {
  _has_bits_[0] |= 0x00000800u;
  return str12_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str12() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str12)
  if (!_internal_has_str12()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  auto* p = str12_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str12_.IsDefault()) {
    str12_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str12(std::string* str12) {
  if (str12 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  str12_.SetAllocated(str12, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str12_.IsDefault()) {
    str12_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str12)
}

// optional string str13 = 13;
inline bool ManyOptionalString::_internal_has_str13() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str13() const {
  return _internal_has_str13();
}
inline void ManyOptionalString::clear_str13() {
  str13_.ClearToEmpty();
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& ManyOptionalString::str13() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str13)
  return _internal_str13();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str13(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00001000u;
 str13_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str13)
}
inline std::string* ManyOptionalString::mutable_str13() {
  std::string* _s = _internal_mutable_str13();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str13)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str13() const {
  return str13_.Get();
}
inline void ManyOptionalString::_internal_set_str13(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  str13_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str13() {
  _has_bits_[0] |= 0x00001000u;
  return str13_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str13() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str13)
  if (!_internal_has_str13()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  auto* p = str13_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str13_.IsDefault()) {
    str13_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str13(std::string* str13) {
  if (str13 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  str13_.SetAllocated(str13, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str13_.IsDefault()) {
    str13_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str13)
}

// optional string str14 = 14;
inline bool ManyOptionalString::_internal_has_str14() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str14() const {
  return _internal_has_str14();
}
inline void ManyOptionalString::clear_str14() {
  str14_.ClearToEmpty();
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& ManyOptionalString::str14() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str14)
  return _internal_str14();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str14(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00002000u;
 str14_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str14)
}
inline std::string* ManyOptionalString::mutable_str14() {
  std::string* _s = _internal_mutable_str14();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str14)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str14() const {
  return str14_.Get();
}
inline void ManyOptionalString::_internal_set_str14(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  str14_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str14() {
  _has_bits_[0] |= 0x00002000u;
  return str14_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str14() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str14)
  if (!_internal_has_str14()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  auto* p = str14_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str14_.IsDefault()) {
    str14_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str14(std::string* str14) {
  if (str14 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  str14_.SetAllocated(str14, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str14_.IsDefault()) {
    str14_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str14)
}

// optional string str15 = 15;
inline bool ManyOptionalString::_internal_has_str15() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str15() const {
  return _internal_has_str15();
}
inline void ManyOptionalString::clear_str15() {
  str15_.ClearToEmpty();
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& ManyOptionalString::str15() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str15)
  return _internal_str15();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str15(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00004000u;
 str15_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str15)
}
inline std::string* ManyOptionalString::mutable_str15() {
  std::string* _s = _internal_mutable_str15();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str15)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str15() const {
  return str15_.Get();
}
inline void ManyOptionalString::_internal_set_str15(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  str15_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str15() {
  _has_bits_[0] |= 0x00004000u;
  return str15_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str15() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str15)
  if (!_internal_has_str15()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  auto* p = str15_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str15_.IsDefault()) {
    str15_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str15(std::string* str15) {
  if (str15 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  str15_.SetAllocated(str15, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str15_.IsDefault()) {
    str15_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str15)
}

// optional string str16 = 16;
inline bool ManyOptionalString::_internal_has_str16() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str16() const {
  return _internal_has_str16();
}
inline void ManyOptionalString::clear_str16() {
  str16_.ClearToEmpty();
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& ManyOptionalString::str16() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str16)
  return _internal_str16();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str16(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00008000u;
 str16_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str16)
}
inline std::string* ManyOptionalString::mutable_str16() {
  std::string* _s = _internal_mutable_str16();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str16)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str16() const {
  return str16_.Get();
}
inline void ManyOptionalString::_internal_set_str16(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  str16_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str16() {
  _has_bits_[0] |= 0x00008000u;
  return str16_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str16() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str16)
  if (!_internal_has_str16()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  auto* p = str16_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str16_.IsDefault()) {
    str16_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str16(std::string* str16) {
  if (str16 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  str16_.SetAllocated(str16, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str16_.IsDefault()) {
    str16_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str16)
}

// optional string str17 = 17;
inline bool ManyOptionalString::_internal_has_str17() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str17() const {
  return _internal_has_str17();
}
inline void ManyOptionalString::clear_str17() {
  str17_.ClearToEmpty();
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& ManyOptionalString::str17() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str17)
  return _internal_str17();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str17(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00010000u;
 str17_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str17)
}
inline std::string* ManyOptionalString::mutable_str17() {
  std::string* _s = _internal_mutable_str17();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str17)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str17() const {
  return str17_.Get();
}
inline void ManyOptionalString::_internal_set_str17(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  str17_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str17() {
  _has_bits_[0] |= 0x00010000u;
  return str17_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str17() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str17)
  if (!_internal_has_str17()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  auto* p = str17_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str17_.IsDefault()) {
    str17_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str17(std::string* str17) {
  if (str17 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  str17_.SetAllocated(str17, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str17_.IsDefault()) {
    str17_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str17)
}

// optional string str18 = 18;
inline bool ManyOptionalString::_internal_has_str18() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str18() const {
  return _internal_has_str18();
}
inline void ManyOptionalString::clear_str18() {
  str18_.ClearToEmpty();
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& ManyOptionalString::str18() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str18)
  return _internal_str18();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str18(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00020000u;
 str18_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str18)
}
inline std::string* ManyOptionalString::mutable_str18() {
  std::string* _s = _internal_mutable_str18();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str18)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str18() const {
  return str18_.Get();
}
inline void ManyOptionalString::_internal_set_str18(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  str18_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str18() {
  _has_bits_[0] |= 0x00020000u;
  return str18_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str18() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str18)
  if (!_internal_has_str18()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  auto* p = str18_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str18_.IsDefault()) {
    str18_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str18(std::string* str18) {
  if (str18 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  str18_.SetAllocated(str18, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str18_.IsDefault()) {
    str18_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str18)
}

// optional string str19 = 19;
inline bool ManyOptionalString::_internal_has_str19() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str19() const {
  return _internal_has_str19();
}
inline void ManyOptionalString::clear_str19() {
  str19_.ClearToEmpty();
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& ManyOptionalString::str19() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str19)
  return _internal_str19();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str19(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00040000u;
 str19_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str19)
}
inline std::string* ManyOptionalString::mutable_str19() {
  std::string* _s = _internal_mutable_str19();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str19)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str19() const {
  return str19_.Get();
}
inline void ManyOptionalString::_internal_set_str19(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  str19_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str19() {
  _has_bits_[0] |= 0x00040000u;
  return str19_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str19() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str19)
  if (!_internal_has_str19()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  auto* p = str19_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str19_.IsDefault()) {
    str19_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str19(std::string* str19) {
  if (str19 != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  str19_.SetAllocated(str19, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str19_.IsDefault()) {
    str19_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str19)
}

// optional string str20 = 20;
inline bool ManyOptionalString::_internal_has_str20() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str20() const {
  return _internal_has_str20();
}
inline void ManyOptionalString::clear_str20() {
  str20_.ClearToEmpty();
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& ManyOptionalString::str20() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str20)
  return _internal_str20();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str20(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00080000u;
 str20_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str20)
}
inline std::string* ManyOptionalString::mutable_str20() {
  std::string* _s = _internal_mutable_str20();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str20)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str20() const {
  return str20_.Get();
}
inline void ManyOptionalString::_internal_set_str20(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  str20_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str20() {
  _has_bits_[0] |= 0x00080000u;
  return str20_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str20() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str20)
  if (!_internal_has_str20()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  auto* p = str20_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str20_.IsDefault()) {
    str20_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str20(std::string* str20) {
  if (str20 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  str20_.SetAllocated(str20, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str20_.IsDefault()) {
    str20_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str20)
}

// optional string str21 = 21;
inline bool ManyOptionalString::_internal_has_str21() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str21() const {
  return _internal_has_str21();
}
inline void ManyOptionalString::clear_str21() {
  str21_.ClearToEmpty();
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& ManyOptionalString::str21() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str21)
  return _internal_str21();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str21(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00100000u;
 str21_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str21)
}
inline std::string* ManyOptionalString::mutable_str21() {
  std::string* _s = _internal_mutable_str21();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str21)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str21() const {
  return str21_.Get();
}
inline void ManyOptionalString::_internal_set_str21(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  str21_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str21() {
  _has_bits_[0] |= 0x00100000u;
  return str21_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str21() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str21)
  if (!_internal_has_str21()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  auto* p = str21_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str21_.IsDefault()) {
    str21_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str21(std::string* str21) {
  if (str21 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  str21_.SetAllocated(str21, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str21_.IsDefault()) {
    str21_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str21)
}

// optional string str22 = 22;
inline bool ManyOptionalString::_internal_has_str22() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str22() const {
  return _internal_has_str22();
}
inline void ManyOptionalString::clear_str22() {
  str22_.ClearToEmpty();
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& ManyOptionalString::str22() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str22)
  return _internal_str22();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str22(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00200000u;
 str22_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str22)
}
inline std::string* ManyOptionalString::mutable_str22() {
  std::string* _s = _internal_mutable_str22();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str22)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str22() const {
  return str22_.Get();
}
inline void ManyOptionalString::_internal_set_str22(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  str22_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str22() {
  _has_bits_[0] |= 0x00200000u;
  return str22_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str22() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str22)
  if (!_internal_has_str22()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  auto* p = str22_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str22_.IsDefault()) {
    str22_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str22(std::string* str22) {
  if (str22 != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  str22_.SetAllocated(str22, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str22_.IsDefault()) {
    str22_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str22)
}

// optional string str23 = 23;
inline bool ManyOptionalString::_internal_has_str23() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str23() const {
  return _internal_has_str23();
}
inline void ManyOptionalString::clear_str23() {
  str23_.ClearToEmpty();
  _has_bits_[0] &= ~0x00400000u;
}
inline const std::string& ManyOptionalString::str23() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str23)
  return _internal_str23();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str23(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00400000u;
 str23_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str23)
}
inline std::string* ManyOptionalString::mutable_str23() {
  std::string* _s = _internal_mutable_str23();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str23)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str23() const {
  return str23_.Get();
}
inline void ManyOptionalString::_internal_set_str23(const std::string& value) {
  _has_bits_[0] |= 0x00400000u;
  str23_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str23() {
  _has_bits_[0] |= 0x00400000u;
  return str23_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str23() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str23)
  if (!_internal_has_str23()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00400000u;
  auto* p = str23_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str23_.IsDefault()) {
    str23_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str23(std::string* str23) {
  if (str23 != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  str23_.SetAllocated(str23, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str23_.IsDefault()) {
    str23_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str23)
}

// optional string str24 = 24;
inline bool ManyOptionalString::_internal_has_str24() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str24() const {
  return _internal_has_str24();
}
inline void ManyOptionalString::clear_str24() {
  str24_.ClearToEmpty();
  _has_bits_[0] &= ~0x00800000u;
}
inline const std::string& ManyOptionalString::str24() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str24)
  return _internal_str24();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str24(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00800000u;
 str24_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str24)
}
inline std::string* ManyOptionalString::mutable_str24() {
  std::string* _s = _internal_mutable_str24();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str24)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str24() const {
  return str24_.Get();
}
inline void ManyOptionalString::_internal_set_str24(const std::string& value) {
  _has_bits_[0] |= 0x00800000u;
  str24_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str24() {
  _has_bits_[0] |= 0x00800000u;
  return str24_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str24() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str24)
  if (!_internal_has_str24()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00800000u;
  auto* p = str24_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str24_.IsDefault()) {
    str24_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str24(std::string* str24) {
  if (str24 != nullptr) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  str24_.SetAllocated(str24, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str24_.IsDefault()) {
    str24_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str24)
}

// optional string str25 = 25;
inline bool ManyOptionalString::_internal_has_str25() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str25() const {
  return _internal_has_str25();
}
inline void ManyOptionalString::clear_str25() {
  str25_.ClearToEmpty();
  _has_bits_[0] &= ~0x01000000u;
}
inline const std::string& ManyOptionalString::str25() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str25)
  return _internal_str25();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str25(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x01000000u;
 str25_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str25)
}
inline std::string* ManyOptionalString::mutable_str25() {
  std::string* _s = _internal_mutable_str25();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str25)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str25() const {
  return str25_.Get();
}
inline void ManyOptionalString::_internal_set_str25(const std::string& value) {
  _has_bits_[0] |= 0x01000000u;
  str25_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str25() {
  _has_bits_[0] |= 0x01000000u;
  return str25_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str25() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str25)
  if (!_internal_has_str25()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x01000000u;
  auto* p = str25_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str25_.IsDefault()) {
    str25_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str25(std::string* str25) {
  if (str25 != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  str25_.SetAllocated(str25, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str25_.IsDefault()) {
    str25_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str25)
}

// optional string str26 = 26;
inline bool ManyOptionalString::_internal_has_str26() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str26() const {
  return _internal_has_str26();
}
inline void ManyOptionalString::clear_str26() {
  str26_.ClearToEmpty();
  _has_bits_[0] &= ~0x02000000u;
}
inline const std::string& ManyOptionalString::str26() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str26)
  return _internal_str26();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str26(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x02000000u;
 str26_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str26)
}
inline std::string* ManyOptionalString::mutable_str26() {
  std::string* _s = _internal_mutable_str26();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str26)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str26() const {
  return str26_.Get();
}
inline void ManyOptionalString::_internal_set_str26(const std::string& value) {
  _has_bits_[0] |= 0x02000000u;
  str26_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str26() {
  _has_bits_[0] |= 0x02000000u;
  return str26_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str26() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str26)
  if (!_internal_has_str26()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x02000000u;
  auto* p = str26_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str26_.IsDefault()) {
    str26_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str26(std::string* str26) {
  if (str26 != nullptr) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  str26_.SetAllocated(str26, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str26_.IsDefault()) {
    str26_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str26)
}

// optional string str27 = 27;
inline bool ManyOptionalString::_internal_has_str27() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str27() const {
  return _internal_has_str27();
}
inline void ManyOptionalString::clear_str27() {
  str27_.ClearToEmpty();
  _has_bits_[0] &= ~0x04000000u;
}
inline const std::string& ManyOptionalString::str27() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str27)
  return _internal_str27();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str27(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x04000000u;
 str27_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str27)
}
inline std::string* ManyOptionalString::mutable_str27() {
  std::string* _s = _internal_mutable_str27();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str27)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str27() const {
  return str27_.Get();
}
inline void ManyOptionalString::_internal_set_str27(const std::string& value) {
  _has_bits_[0] |= 0x04000000u;
  str27_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str27() {
  _has_bits_[0] |= 0x04000000u;
  return str27_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str27() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str27)
  if (!_internal_has_str27()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x04000000u;
  auto* p = str27_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str27_.IsDefault()) {
    str27_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str27(std::string* str27) {
  if (str27 != nullptr) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  str27_.SetAllocated(str27, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str27_.IsDefault()) {
    str27_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str27)
}

// optional string str28 = 28;
inline bool ManyOptionalString::_internal_has_str28() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str28() const {
  return _internal_has_str28();
}
inline void ManyOptionalString::clear_str28() {
  str28_.ClearToEmpty();
  _has_bits_[0] &= ~0x08000000u;
}
inline const std::string& ManyOptionalString::str28() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str28)
  return _internal_str28();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str28(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x08000000u;
 str28_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str28)
}
inline std::string* ManyOptionalString::mutable_str28() {
  std::string* _s = _internal_mutable_str28();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str28)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str28() const {
  return str28_.Get();
}
inline void ManyOptionalString::_internal_set_str28(const std::string& value) {
  _has_bits_[0] |= 0x08000000u;
  str28_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str28() {
  _has_bits_[0] |= 0x08000000u;
  return str28_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str28() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str28)
  if (!_internal_has_str28()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x08000000u;
  auto* p = str28_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str28_.IsDefault()) {
    str28_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str28(std::string* str28) {
  if (str28 != nullptr) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  str28_.SetAllocated(str28, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str28_.IsDefault()) {
    str28_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str28)
}

// optional string str29 = 29;
inline bool ManyOptionalString::_internal_has_str29() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str29() const {
  return _internal_has_str29();
}
inline void ManyOptionalString::clear_str29() {
  str29_.ClearToEmpty();
  _has_bits_[0] &= ~0x10000000u;
}
inline const std::string& ManyOptionalString::str29() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str29)
  return _internal_str29();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str29(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x10000000u;
 str29_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str29)
}
inline std::string* ManyOptionalString::mutable_str29() {
  std::string* _s = _internal_mutable_str29();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str29)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str29() const {
  return str29_.Get();
}
inline void ManyOptionalString::_internal_set_str29(const std::string& value) {
  _has_bits_[0] |= 0x10000000u;
  str29_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str29() {
  _has_bits_[0] |= 0x10000000u;
  return str29_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str29() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str29)
  if (!_internal_has_str29()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x10000000u;
  auto* p = str29_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str29_.IsDefault()) {
    str29_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str29(std::string* str29) {
  if (str29 != nullptr) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  str29_.SetAllocated(str29, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str29_.IsDefault()) {
    str29_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str29)
}

// optional string str30 = 30;
inline bool ManyOptionalString::_internal_has_str30() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str30() const {
  return _internal_has_str30();
}
inline void ManyOptionalString::clear_str30() {
  str30_.ClearToEmpty();
  _has_bits_[0] &= ~0x20000000u;
}
inline const std::string& ManyOptionalString::str30() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str30)
  return _internal_str30();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str30(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x20000000u;
 str30_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str30)
}
inline std::string* ManyOptionalString::mutable_str30() {
  std::string* _s = _internal_mutable_str30();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str30)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str30() const {
  return str30_.Get();
}
inline void ManyOptionalString::_internal_set_str30(const std::string& value) {
  _has_bits_[0] |= 0x20000000u;
  str30_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str30() {
  _has_bits_[0] |= 0x20000000u;
  return str30_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str30() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str30)
  if (!_internal_has_str30()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x20000000u;
  auto* p = str30_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str30_.IsDefault()) {
    str30_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str30(std::string* str30) {
  if (str30 != nullptr) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  str30_.SetAllocated(str30, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str30_.IsDefault()) {
    str30_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str30)
}

// optional string str31 = 31;
inline bool ManyOptionalString::_internal_has_str31() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str31() const {
  return _internal_has_str31();
}
inline void ManyOptionalString::clear_str31() {
  str31_.ClearToEmpty();
  _has_bits_[0] &= ~0x40000000u;
}
inline const std::string& ManyOptionalString::str31() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str31)
  return _internal_str31();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str31(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x40000000u;
 str31_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str31)
}
inline std::string* ManyOptionalString::mutable_str31() {
  std::string* _s = _internal_mutable_str31();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str31)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str31() const {
  return str31_.Get();
}
inline void ManyOptionalString::_internal_set_str31(const std::string& value) {
  _has_bits_[0] |= 0x40000000u;
  str31_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str31() {
  _has_bits_[0] |= 0x40000000u;
  return str31_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str31() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str31)
  if (!_internal_has_str31()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x40000000u;
  auto* p = str31_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str31_.IsDefault()) {
    str31_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str31(std::string* str31) {
  if (str31 != nullptr) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  str31_.SetAllocated(str31, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str31_.IsDefault()) {
    str31_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str31)
}

// optional string str32 = 32;
inline bool ManyOptionalString::_internal_has_str32() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ManyOptionalString::has_str32() const {
  return _internal_has_str32();
}
inline void ManyOptionalString::clear_str32() {
  str32_.ClearToEmpty();
  _has_bits_[0] &= ~0x80000000u;
}
inline const std::string& ManyOptionalString::str32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ManyOptionalString.str32)
  return _internal_str32();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyOptionalString::set_str32(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x80000000u;
 str32_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.ManyOptionalString.str32)
}
inline std::string* ManyOptionalString::mutable_str32() {
  std::string* _s = _internal_mutable_str32();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.ManyOptionalString.str32)
  return _s;
}
inline const std::string& ManyOptionalString::_internal_str32() const {
  return str32_.Get();
}
inline void ManyOptionalString::_internal_set_str32(const std::string& value) {
  _has_bits_[0] |= 0x80000000u;
  str32_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyOptionalString::_internal_mutable_str32() {
  _has_bits_[0] |= 0x80000000u;
  return str32_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyOptionalString::release_str32() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.ManyOptionalString.str32)
  if (!_internal_has_str32()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x80000000u;
  auto* p = str32_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str32_.IsDefault()) {
    str32_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ManyOptionalString::set_allocated_str32(std::string* str32) {
  if (str32 != nullptr) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  str32_.SetAllocated(str32, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str32_.IsDefault()) {
    str32_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.ManyOptionalString.str32)
}

// -------------------------------------------------------------------

// Int32Message

// optional int32 data = 1;
inline bool Int32Message::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Int32Message::has_data() const {
  return _internal_has_data();
}
inline void Int32Message::clear_data() {
  data_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Int32Message::_internal_data() const {
  return data_;
}
inline int32_t Int32Message::data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.Int32Message.data)
  return _internal_data();
}
inline void Int32Message::_internal_set_data(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  data_ = value;
}
inline void Int32Message::set_data(int32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.Int32Message.data)
}

// -------------------------------------------------------------------

// Uint32Message

// optional uint32 data = 1;
inline bool Uint32Message::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Uint32Message::has_data() const {
  return _internal_has_data();
}
inline void Uint32Message::clear_data() {
  data_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Uint32Message::_internal_data() const {
  return data_;
}
inline uint32_t Uint32Message::data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.Uint32Message.data)
  return _internal_data();
}
inline void Uint32Message::_internal_set_data(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  data_ = value;
}
inline void Uint32Message::set_data(uint32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.Uint32Message.data)
}

// -------------------------------------------------------------------

// Int64Message

// optional int64 data = 1;
inline bool Int64Message::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Int64Message::has_data() const {
  return _internal_has_data();
}
inline void Int64Message::clear_data() {
  data_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Int64Message::_internal_data() const {
  return data_;
}
inline int64_t Int64Message::data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.Int64Message.data)
  return _internal_data();
}
inline void Int64Message::_internal_set_data(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  data_ = value;
}
inline void Int64Message::set_data(int64_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.Int64Message.data)
}

// -------------------------------------------------------------------

// Uint64Message

// optional uint64 data = 1;
inline bool Uint64Message::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Uint64Message::has_data() const {
  return _internal_has_data();
}
inline void Uint64Message::clear_data() {
  data_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Uint64Message::_internal_data() const {
  return data_;
}
inline uint64_t Uint64Message::data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.Uint64Message.data)
  return _internal_data();
}
inline void Uint64Message::_internal_set_data(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  data_ = value;
}
inline void Uint64Message::set_data(uint64_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.Uint64Message.data)
}

// -------------------------------------------------------------------

// BoolMessage

// optional bool data = 1;
inline bool BoolMessage::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoolMessage::has_data() const {
  return _internal_has_data();
}
inline void BoolMessage::clear_data() {
  data_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BoolMessage::_internal_data() const {
  return data_;
}
inline bool BoolMessage::data() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.BoolMessage.data)
  return _internal_data();
}
inline void BoolMessage::_internal_set_data(bool value) {
  _has_bits_[0] |= 0x00000001u;
  data_ = value;
}
inline void BoolMessage::set_data(bool value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.BoolMessage.data)
}

// -------------------------------------------------------------------

// TestOneof_FooGroup

// optional int32 a = 5;
inline bool TestOneof_FooGroup::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestOneof_FooGroup::has_a() const {
  return _internal_has_a();
}
inline void TestOneof_FooGroup::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestOneof_FooGroup::_internal_a() const {
  return a_;
}
inline int32_t TestOneof_FooGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof.FooGroup.a)
  return _internal_a();
}
inline void TestOneof_FooGroup::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  a_ = value;
}
inline void TestOneof_FooGroup::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof.FooGroup.a)
}

// optional string b = 6;
inline bool TestOneof_FooGroup::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestOneof_FooGroup::has_b() const {
  return _internal_has_b();
}
inline void TestOneof_FooGroup::clear_b() {
  b_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestOneof_FooGroup::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof.FooGroup.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestOneof_FooGroup::set_b(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof.FooGroup.b)
}
inline std::string* TestOneof_FooGroup::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof.FooGroup.b)
  return _s;
}
inline const std::string& TestOneof_FooGroup::_internal_b() const {
  return b_.Get();
}
inline void TestOneof_FooGroup::_internal_set_b(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  b_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof_FooGroup::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000001u;
  return b_.Mutable(GetArenaForAllocation());
}
inline std::string* TestOneof_FooGroup::release_b() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof.FooGroup.b)
  if (!_internal_has_b()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = b_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestOneof_FooGroup::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_.SetAllocated(b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof.FooGroup.b)
}

// -------------------------------------------------------------------

// TestOneof

// int32 foo_int = 1;
inline bool TestOneof::_internal_has_foo_int() const {
  return foo_case() == kFooInt;
}
inline bool TestOneof::has_foo_int() const {
  return _internal_has_foo_int();
}
inline void TestOneof::set_has_foo_int() {
  _oneof_case_[0] = kFooInt;
}
inline void TestOneof::clear_foo_int() {
  if (_internal_has_foo_int()) {
    foo_.foo_int_ = 0;
    clear_has_foo();
  }
}
inline int32_t TestOneof::_internal_foo_int() const {
  if (_internal_has_foo_int()) {
    return foo_.foo_int_;
  }
  return 0;
}
inline void TestOneof::_internal_set_foo_int(int32_t value) {
  if (!_internal_has_foo_int()) {
    clear_foo();
    set_has_foo_int();
  }
  foo_.foo_int_ = value;
}
inline int32_t TestOneof::foo_int() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof.foo_int)
  return _internal_foo_int();
}
inline void TestOneof::set_foo_int(int32_t value) {
  _internal_set_foo_int(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof.foo_int)
}

// string foo_string = 2;
inline bool TestOneof::_internal_has_foo_string() const {
  return foo_case() == kFooString;
}
inline bool TestOneof::has_foo_string() const {
  return _internal_has_foo_string();
}
inline void TestOneof::set_has_foo_string() {
  _oneof_case_[0] = kFooString;
}
inline void TestOneof::clear_foo_string() {
  if (_internal_has_foo_string()) {
    foo_.foo_string_.Destroy();
    clear_has_foo();
  }
}
inline const std::string& TestOneof::foo_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof.foo_string)
  return _internal_foo_string();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof::set_foo_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  foo_.foo_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof.foo_string)
}
inline std::string* TestOneof::mutable_foo_string() {
  std::string* _s = _internal_mutable_foo_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof.foo_string)
  return _s;
}
inline const std::string& TestOneof::_internal_foo_string() const {
  if (_internal_has_foo_string()) {
    return foo_.foo_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof::_internal_set_foo_string(const std::string& value) {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  foo_.foo_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof::_internal_mutable_foo_string() {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  return foo_.foo_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof::release_foo_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof.foo_string)
  if (_internal_has_foo_string()) {
    clear_has_foo();
    return foo_.foo_string_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof::set_allocated_foo_string(std::string* foo_string) {
  if (has_foo()) {
    clear_foo();
  }
  if (foo_string != nullptr) {
    set_has_foo_string();
    foo_.foo_string_.InitAllocated(foo_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof.foo_string)
}

// .protobuf_unittest.TestAllTypes foo_message = 3;
inline bool TestOneof::_internal_has_foo_message() const {
  return foo_case() == kFooMessage;
}
inline bool TestOneof::has_foo_message() const {
  return _internal_has_foo_message();
}
inline void TestOneof::set_has_foo_message() {
  _oneof_case_[0] = kFooMessage;
}
inline void TestOneof::clear_foo_message() {
  if (_internal_has_foo_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete foo_.foo_message_;
    }
    clear_has_foo();
  }
}
inline ::protobuf_unittest::TestAllTypes* TestOneof::release_foo_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof.foo_message)
  if (_internal_has_foo_message()) {
    clear_has_foo();
    ::protobuf_unittest::TestAllTypes* temp = foo_.foo_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foo_.foo_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestAllTypes& TestOneof::_internal_foo_message() const {
  return _internal_has_foo_message()
      ? *foo_.foo_message_
      : reinterpret_cast< ::protobuf_unittest::TestAllTypes&>(::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestOneof::foo_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof.foo_message)
  return _internal_foo_message();
}
inline ::protobuf_unittest::TestAllTypes* TestOneof::unsafe_arena_release_foo_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_unittest.TestOneof.foo_message)
  if (_internal_has_foo_message()) {
    clear_has_foo();
    ::protobuf_unittest::TestAllTypes* temp = foo_.foo_message_;
    foo_.foo_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestOneof::unsafe_arena_set_allocated_foo_message(::protobuf_unittest::TestAllTypes* foo_message) {
  clear_foo();
  if (foo_message) {
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneof.foo_message)
}
inline ::protobuf_unittest::TestAllTypes* TestOneof::_internal_mutable_foo_message() {
  if (!_internal_has_foo_message()) {
    clear_foo();
    set_has_foo_message();
    foo_.foo_message_ = CreateMaybeMessage< ::protobuf_unittest::TestAllTypes >(GetArenaForAllocation());
  }
  return foo_.foo_message_;
}
inline ::protobuf_unittest::TestAllTypes* TestOneof::mutable_foo_message() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_foo_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof.foo_message)
  return _msg;
}

// group FooGroup = 4 { ... };
inline bool TestOneof::_internal_has_foogroup() const {
  return foo_case() == kFoogroup;
}
inline bool TestOneof::has_foogroup() const {
  return _internal_has_foogroup();
}
inline void TestOneof::set_has_foogroup() {
  _oneof_case_[0] = kFoogroup;
}
inline void TestOneof::clear_foogroup() {
  if (_internal_has_foogroup()) {
    if (GetArenaForAllocation() == nullptr) {
      delete foo_.foogroup_;
    }
    clear_has_foo();
  }
}
inline ::protobuf_unittest::TestOneof_FooGroup* TestOneof::release_foogroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof.foogroup)
  if (_internal_has_foogroup()) {
    clear_has_foo();
    ::protobuf_unittest::TestOneof_FooGroup* temp = foo_.foogroup_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foo_.foogroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestOneof_FooGroup& TestOneof::_internal_foogroup() const {
  return _internal_has_foogroup()
      ? *foo_.foogroup_
      : reinterpret_cast< ::protobuf_unittest::TestOneof_FooGroup&>(::protobuf_unittest::_TestOneof_FooGroup_default_instance_);
}
inline const ::protobuf_unittest::TestOneof_FooGroup& TestOneof::foogroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof.foogroup)
  return _internal_foogroup();
}
inline ::protobuf_unittest::TestOneof_FooGroup* TestOneof::unsafe_arena_release_foogroup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_unittest.TestOneof.foogroup)
  if (_internal_has_foogroup()) {
    clear_has_foo();
    ::protobuf_unittest::TestOneof_FooGroup* temp = foo_.foogroup_;
    foo_.foogroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestOneof::unsafe_arena_set_allocated_foogroup(::protobuf_unittest::TestOneof_FooGroup* foogroup) {
  clear_foo();
  if (foogroup) {
    set_has_foogroup();
    foo_.foogroup_ = foogroup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneof.foogroup)
}
inline ::protobuf_unittest::TestOneof_FooGroup* TestOneof::_internal_mutable_foogroup() {
  if (!_internal_has_foogroup()) {
    clear_foo();
    set_has_foogroup();
    foo_.foogroup_ = CreateMaybeMessage< ::protobuf_unittest::TestOneof_FooGroup >(GetArenaForAllocation());
  }
  return foo_.foogroup_;
}
inline ::protobuf_unittest::TestOneof_FooGroup* TestOneof::mutable_foogroup() {
  ::protobuf_unittest::TestOneof_FooGroup* _msg = _internal_mutable_foogroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof.foogroup)
  return _msg;
}

inline bool TestOneof::has_foo() const {
  return foo_case() != FOO_NOT_SET;
}
inline void TestOneof::clear_has_foo() {
  _oneof_case_[0] = FOO_NOT_SET;
}
inline TestOneof::FooCase TestOneof::foo_case() const {
  return TestOneof::FooCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestOneofBackwardsCompatible_FooGroup

// optional int32 a = 5;
inline bool TestOneofBackwardsCompatible_FooGroup::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestOneofBackwardsCompatible_FooGroup::has_a() const {
  return _internal_has_a();
}
inline void TestOneofBackwardsCompatible_FooGroup::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestOneofBackwardsCompatible_FooGroup::_internal_a() const {
  return a_;
}
inline int32_t TestOneofBackwardsCompatible_FooGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.a)
  return _internal_a();
}
inline void TestOneofBackwardsCompatible_FooGroup::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  a_ = value;
}
inline void TestOneofBackwardsCompatible_FooGroup::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.a)
}

// optional string b = 6;
inline bool TestOneofBackwardsCompatible_FooGroup::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestOneofBackwardsCompatible_FooGroup::has_b() const {
  return _internal_has_b();
}
inline void TestOneofBackwardsCompatible_FooGroup::clear_b() {
  b_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestOneofBackwardsCompatible_FooGroup::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestOneofBackwardsCompatible_FooGroup::set_b(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b)
}
inline std::string* TestOneofBackwardsCompatible_FooGroup::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b)
  return _s;
}
inline const std::string& TestOneofBackwardsCompatible_FooGroup::_internal_b() const {
  return b_.Get();
}
inline void TestOneofBackwardsCompatible_FooGroup::_internal_set_b(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  b_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneofBackwardsCompatible_FooGroup::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000001u;
  return b_.Mutable(GetArenaForAllocation());
}
inline std::string* TestOneofBackwardsCompatible_FooGroup::release_b() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b)
  if (!_internal_has_b()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = b_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestOneofBackwardsCompatible_FooGroup::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_.SetAllocated(b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofBackwardsCompatible.FooGroup.b)
}

// -------------------------------------------------------------------

// TestOneofBackwardsCompatible

// optional int32 foo_int = 1;
inline bool TestOneofBackwardsCompatible::_internal_has_foo_int() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestOneofBackwardsCompatible::has_foo_int() const {
  return _internal_has_foo_int();
}
inline void TestOneofBackwardsCompatible::clear_foo_int() {
  foo_int_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TestOneofBackwardsCompatible::_internal_foo_int() const {
  return foo_int_;
}
inline int32_t TestOneofBackwardsCompatible::foo_int() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofBackwardsCompatible.foo_int)
  return _internal_foo_int();
}
inline void TestOneofBackwardsCompatible::_internal_set_foo_int(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  foo_int_ = value;
}
inline void TestOneofBackwardsCompatible::set_foo_int(int32_t value) {
  _internal_set_foo_int(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofBackwardsCompatible.foo_int)
}

// optional string foo_string = 2;
inline bool TestOneofBackwardsCompatible::_internal_has_foo_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestOneofBackwardsCompatible::has_foo_string() const {
  return _internal_has_foo_string();
}
inline void TestOneofBackwardsCompatible::clear_foo_string() {
  foo_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestOneofBackwardsCompatible::foo_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofBackwardsCompatible.foo_string)
  return _internal_foo_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestOneofBackwardsCompatible::set_foo_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 foo_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofBackwardsCompatible.foo_string)
}
inline std::string* TestOneofBackwardsCompatible::mutable_foo_string() {
  std::string* _s = _internal_mutable_foo_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofBackwardsCompatible.foo_string)
  return _s;
}
inline const std::string& TestOneofBackwardsCompatible::_internal_foo_string() const {
  return foo_string_.Get();
}
inline void TestOneofBackwardsCompatible::_internal_set_foo_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  foo_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneofBackwardsCompatible::_internal_mutable_foo_string() {
  _has_bits_[0] |= 0x00000001u;
  return foo_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestOneofBackwardsCompatible::release_foo_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofBackwardsCompatible.foo_string)
  if (!_internal_has_foo_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = foo_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (foo_string_.IsDefault()) {
    foo_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestOneofBackwardsCompatible::set_allocated_foo_string(std::string* foo_string) {
  if (foo_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  foo_string_.SetAllocated(foo_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (foo_string_.IsDefault()) {
    foo_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofBackwardsCompatible.foo_string)
}

// optional .protobuf_unittest.TestAllTypes foo_message = 3;
inline bool TestOneofBackwardsCompatible::_internal_has_foo_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || foo_message_ != nullptr);
  return value;
}
inline bool TestOneofBackwardsCompatible::has_foo_message() const {
  return _internal_has_foo_message();
}
inline void TestOneofBackwardsCompatible::clear_foo_message() {
  if (foo_message_ != nullptr) foo_message_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestAllTypes& TestOneofBackwardsCompatible::_internal_foo_message() const {
  const ::protobuf_unittest::TestAllTypes* p = foo_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestOneofBackwardsCompatible::foo_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofBackwardsCompatible.foo_message)
  return _internal_foo_message();
}
inline void TestOneofBackwardsCompatible::unsafe_arena_set_allocated_foo_message(
    ::protobuf_unittest::TestAllTypes* foo_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(foo_message_);
  }
  foo_message_ = foo_message;
  if (foo_message) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneofBackwardsCompatible.foo_message)
}
inline ::protobuf_unittest::TestAllTypes* TestOneofBackwardsCompatible::release_foo_message() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = foo_message_;
  foo_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestOneofBackwardsCompatible::unsafe_arena_release_foo_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofBackwardsCompatible.foo_message)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = foo_message_;
  foo_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestOneofBackwardsCompatible::_internal_mutable_foo_message() {
  _has_bits_[0] |= 0x00000002u;
  if (foo_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    foo_message_ = p;
  }
  return foo_message_;
}
inline ::protobuf_unittest::TestAllTypes* TestOneofBackwardsCompatible::mutable_foo_message() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_foo_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofBackwardsCompatible.foo_message)
  return _msg;
}
inline void TestOneofBackwardsCompatible::set_allocated_foo_message(::protobuf_unittest::TestAllTypes* foo_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete foo_message_;
  }
  if (foo_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foo_message);
    if (message_arena != submessage_arena) {
      foo_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  foo_message_ = foo_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofBackwardsCompatible.foo_message)
}

// optional group FooGroup = 4 { ... };
inline bool TestOneofBackwardsCompatible::_internal_has_foogroup() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || foogroup_ != nullptr);
  return value;
}
inline bool TestOneofBackwardsCompatible::has_foogroup() const {
  return _internal_has_foogroup();
}
inline void TestOneofBackwardsCompatible::clear_foogroup() {
  if (foogroup_ != nullptr) foogroup_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup& TestOneofBackwardsCompatible::_internal_foogroup() const {
  const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* p = foogroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup&>(
      ::protobuf_unittest::_TestOneofBackwardsCompatible_FooGroup_default_instance_);
}
inline const ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup& TestOneofBackwardsCompatible::foogroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofBackwardsCompatible.foogroup)
  return _internal_foogroup();
}
inline void TestOneofBackwardsCompatible::unsafe_arena_set_allocated_foogroup(
    ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* foogroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(foogroup_);
  }
  foogroup_ = foogroup;
  if (foogroup) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneofBackwardsCompatible.foogroup)
}
inline ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* TestOneofBackwardsCompatible::release_foogroup() {
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* temp = foogroup_;
  foogroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* TestOneofBackwardsCompatible::unsafe_arena_release_foogroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofBackwardsCompatible.foogroup)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* temp = foogroup_;
  foogroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* TestOneofBackwardsCompatible::_internal_mutable_foogroup() {
  _has_bits_[0] |= 0x00000004u;
  if (foogroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup>(GetArenaForAllocation());
    foogroup_ = p;
  }
  return foogroup_;
}
inline ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* TestOneofBackwardsCompatible::mutable_foogroup() {
  ::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* _msg = _internal_mutable_foogroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofBackwardsCompatible.foogroup)
  return _msg;
}
inline void TestOneofBackwardsCompatible::set_allocated_foogroup(::protobuf_unittest::TestOneofBackwardsCompatible_FooGroup* foogroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete foogroup_;
  }
  if (foogroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(foogroup);
    if (message_arena != submessage_arena) {
      foogroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foogroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  foogroup_ = foogroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofBackwardsCompatible.foogroup)
}

// -------------------------------------------------------------------

// TestOneof2_FooGroup

// optional int32 a = 9;
inline bool TestOneof2_FooGroup::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestOneof2_FooGroup::has_a() const {
  return _internal_has_a();
}
inline void TestOneof2_FooGroup::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestOneof2_FooGroup::_internal_a() const {
  return a_;
}
inline int32_t TestOneof2_FooGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.FooGroup.a)
  return _internal_a();
}
inline void TestOneof2_FooGroup::_internal_set_a(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  a_ = value;
}
inline void TestOneof2_FooGroup::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.FooGroup.a)
}

// optional string b = 10;
inline bool TestOneof2_FooGroup::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestOneof2_FooGroup::has_b() const {
  return _internal_has_b();
}
inline void TestOneof2_FooGroup::clear_b() {
  b_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestOneof2_FooGroup::b() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.FooGroup.b)
  return _internal_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestOneof2_FooGroup::set_b(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.FooGroup.b)
}
inline std::string* TestOneof2_FooGroup::mutable_b() {
  std::string* _s = _internal_mutable_b();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.FooGroup.b)
  return _s;
}
inline const std::string& TestOneof2_FooGroup::_internal_b() const {
  return b_.Get();
}
inline void TestOneof2_FooGroup::_internal_set_b(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  b_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2_FooGroup::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000001u;
  return b_.Mutable(GetArenaForAllocation());
}
inline std::string* TestOneof2_FooGroup::release_b() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.FooGroup.b)
  if (!_internal_has_b()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = b_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestOneof2_FooGroup::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_.SetAllocated(b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (b_.IsDefault()) {
    b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.FooGroup.b)
}

// -------------------------------------------------------------------

// TestOneof2_NestedMessage

// optional int64 qux_int = 1;
inline bool TestOneof2_NestedMessage::_internal_has_qux_int() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestOneof2_NestedMessage::has_qux_int() const {
  return _internal_has_qux_int();
}
inline void TestOneof2_NestedMessage::clear_qux_int() {
  qux_int_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t TestOneof2_NestedMessage::_internal_qux_int() const {
  return qux_int_;
}
inline int64_t TestOneof2_NestedMessage::qux_int() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.NestedMessage.qux_int)
  return _internal_qux_int();
}
inline void TestOneof2_NestedMessage::_internal_set_qux_int(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  qux_int_ = value;
}
inline void TestOneof2_NestedMessage::set_qux_int(int64_t value) {
  _internal_set_qux_int(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.NestedMessage.qux_int)
}

// repeated int32 corge_int = 2;
inline int TestOneof2_NestedMessage::_internal_corge_int_size() const {
  return corge_int_.size();
}
inline int TestOneof2_NestedMessage::corge_int_size() const {
  return _internal_corge_int_size();
}
inline void TestOneof2_NestedMessage::clear_corge_int() {
  corge_int_.Clear();
}
inline int32_t TestOneof2_NestedMessage::_internal_corge_int(int index) const {
  return corge_int_.Get(index);
}
inline int32_t TestOneof2_NestedMessage::corge_int(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.NestedMessage.corge_int)
  return _internal_corge_int(index);
}
inline void TestOneof2_NestedMessage::set_corge_int(int index, int32_t value) {
  corge_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.NestedMessage.corge_int)
}
inline void TestOneof2_NestedMessage::_internal_add_corge_int(int32_t value) {
  corge_int_.Add(value);
}
inline void TestOneof2_NestedMessage::add_corge_int(int32_t value) {
  _internal_add_corge_int(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestOneof2.NestedMessage.corge_int)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestOneof2_NestedMessage::_internal_corge_int() const {
  return corge_int_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestOneof2_NestedMessage::corge_int() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestOneof2.NestedMessage.corge_int)
  return _internal_corge_int();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestOneof2_NestedMessage::_internal_mutable_corge_int() {
  return &corge_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestOneof2_NestedMessage::mutable_corge_int() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestOneof2.NestedMessage.corge_int)
  return _internal_mutable_corge_int();
}

// -------------------------------------------------------------------

// TestOneof2

// int32 foo_int = 1;
inline bool TestOneof2::_internal_has_foo_int() const {
  return foo_case() == kFooInt;
}
inline bool TestOneof2::has_foo_int() const {
  return _internal_has_foo_int();
}
inline void TestOneof2::set_has_foo_int() {
  _oneof_case_[0] = kFooInt;
}
inline void TestOneof2::clear_foo_int() {
  if (_internal_has_foo_int()) {
    foo_.foo_int_ = 0;
    clear_has_foo();
  }
}
inline int32_t TestOneof2::_internal_foo_int() const {
  if (_internal_has_foo_int()) {
    return foo_.foo_int_;
  }
  return 0;
}
inline void TestOneof2::_internal_set_foo_int(int32_t value) {
  if (!_internal_has_foo_int()) {
    clear_foo();
    set_has_foo_int();
  }
  foo_.foo_int_ = value;
}
inline int32_t TestOneof2::foo_int() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foo_int)
  return _internal_foo_int();
}
inline void TestOneof2::set_foo_int(int32_t value) {
  _internal_set_foo_int(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.foo_int)
}

// string foo_string = 2;
inline bool TestOneof2::_internal_has_foo_string() const {
  return foo_case() == kFooString;
}
inline bool TestOneof2::has_foo_string() const {
  return _internal_has_foo_string();
}
inline void TestOneof2::set_has_foo_string() {
  _oneof_case_[0] = kFooString;
}
inline void TestOneof2::clear_foo_string() {
  if (_internal_has_foo_string()) {
    foo_.foo_string_.Destroy();
    clear_has_foo();
  }
}
inline const std::string& TestOneof2::foo_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foo_string)
  return _internal_foo_string();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_foo_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  foo_.foo_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.foo_string)
}
inline std::string* TestOneof2::mutable_foo_string() {
  std::string* _s = _internal_mutable_foo_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.foo_string)
  return _s;
}
inline const std::string& TestOneof2::_internal_foo_string() const {
  if (_internal_has_foo_string()) {
    return foo_.foo_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof2::_internal_set_foo_string(const std::string& value) {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  foo_.foo_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_foo_string() {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  return foo_.foo_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof2::release_foo_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.foo_string)
  if (_internal_has_foo_string()) {
    clear_has_foo();
    return foo_.foo_string_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_foo_string(std::string* foo_string) {
  if (has_foo()) {
    clear_foo();
  }
  if (foo_string != nullptr) {
    set_has_foo_string();
    foo_.foo_string_.InitAllocated(foo_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foo_string)
}

// string foo_cord = 3 [ctype = CORD];
inline bool TestOneof2::_internal_has_foo_cord() const {
  return foo_case() == kFooCord;
}
inline bool TestOneof2::has_foo_cord() const {
  return _internal_has_foo_cord();
}
inline void TestOneof2::set_has_foo_cord() {
  _oneof_case_[0] = kFooCord;
}
inline void TestOneof2::clear_foo_cord() {
  if (_internal_has_foo_cord()) {
    foo_.foo_cord_.Destroy();
    clear_has_foo();
  }
}
inline const std::string& TestOneof2::foo_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foo_cord)
  return _internal_foo_cord();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_foo_cord(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_foo_cord()) {
    clear_foo();
    set_has_foo_cord();
    foo_.foo_cord_.InitDefault();
  }
  foo_.foo_cord_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.foo_cord)
}
inline std::string* TestOneof2::mutable_foo_cord() {
  std::string* _s = _internal_mutable_foo_cord();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.foo_cord)
  return _s;
}
inline const std::string& TestOneof2::_internal_foo_cord() const {
  if (_internal_has_foo_cord()) {
    return foo_.foo_cord_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof2::_internal_set_foo_cord(const std::string& value) {
  if (!_internal_has_foo_cord()) {
    clear_foo();
    set_has_foo_cord();
    foo_.foo_cord_.InitDefault();
  }
  foo_.foo_cord_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_foo_cord() {
  if (!_internal_has_foo_cord()) {
    clear_foo();
    set_has_foo_cord();
    foo_.foo_cord_.InitDefault();
  }
  return foo_.foo_cord_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof2::release_foo_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.foo_cord)
  if (_internal_has_foo_cord()) {
    clear_has_foo();
    return foo_.foo_cord_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_foo_cord(std::string* foo_cord) {
  if (has_foo()) {
    clear_foo();
  }
  if (foo_cord != nullptr) {
    set_has_foo_cord();
    foo_.foo_cord_.InitAllocated(foo_cord, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foo_cord)
}

// string foo_string_piece = 4 [ctype = STRING_PIECE];
inline bool TestOneof2::_internal_has_foo_string_piece() const {
  return foo_case() == kFooStringPiece;
}
inline bool TestOneof2::has_foo_string_piece() const {
  return _internal_has_foo_string_piece();
}
inline void TestOneof2::set_has_foo_string_piece() {
  _oneof_case_[0] = kFooStringPiece;
}
inline void TestOneof2::clear_foo_string_piece() {
  if (_internal_has_foo_string_piece()) {
    foo_.foo_string_piece_.Destroy();
    clear_has_foo();
  }
}
inline const std::string& TestOneof2::foo_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foo_string_piece)
  return _internal_foo_string_piece();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_foo_string_piece(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_foo_string_piece()) {
    clear_foo();
    set_has_foo_string_piece();
    foo_.foo_string_piece_.InitDefault();
  }
  foo_.foo_string_piece_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.foo_string_piece)
}
inline std::string* TestOneof2::mutable_foo_string_piece() {
  std::string* _s = _internal_mutable_foo_string_piece();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.foo_string_piece)
  return _s;
}
inline const std::string& TestOneof2::_internal_foo_string_piece() const {
  if (_internal_has_foo_string_piece()) {
    return foo_.foo_string_piece_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof2::_internal_set_foo_string_piece(const std::string& value) {
  if (!_internal_has_foo_string_piece()) {
    clear_foo();
    set_has_foo_string_piece();
    foo_.foo_string_piece_.InitDefault();
  }
  foo_.foo_string_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_foo_string_piece() {
  if (!_internal_has_foo_string_piece()) {
    clear_foo();
    set_has_foo_string_piece();
    foo_.foo_string_piece_.InitDefault();
  }
  return foo_.foo_string_piece_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof2::release_foo_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.foo_string_piece)
  if (_internal_has_foo_string_piece()) {
    clear_has_foo();
    return foo_.foo_string_piece_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_foo_string_piece(std::string* foo_string_piece) {
  if (has_foo()) {
    clear_foo();
  }
  if (foo_string_piece != nullptr) {
    set_has_foo_string_piece();
    foo_.foo_string_piece_.InitAllocated(foo_string_piece, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foo_string_piece)
}

// bytes foo_bytes = 5;
inline bool TestOneof2::_internal_has_foo_bytes() const {
  return foo_case() == kFooBytes;
}
inline bool TestOneof2::has_foo_bytes() const {
  return _internal_has_foo_bytes();
}
inline void TestOneof2::set_has_foo_bytes() {
  _oneof_case_[0] = kFooBytes;
}
inline void TestOneof2::clear_foo_bytes() {
  if (_internal_has_foo_bytes()) {
    foo_.foo_bytes_.Destroy();
    clear_has_foo();
  }
}
inline const std::string& TestOneof2::foo_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foo_bytes)
  return _internal_foo_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_foo_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_foo_bytes()) {
    clear_foo();
    set_has_foo_bytes();
    foo_.foo_bytes_.InitDefault();
  }
  foo_.foo_bytes_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.foo_bytes)
}
inline std::string* TestOneof2::mutable_foo_bytes() {
  std::string* _s = _internal_mutable_foo_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.foo_bytes)
  return _s;
}
inline const std::string& TestOneof2::_internal_foo_bytes() const {
  if (_internal_has_foo_bytes()) {
    return foo_.foo_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof2::_internal_set_foo_bytes(const std::string& value) {
  if (!_internal_has_foo_bytes()) {
    clear_foo();
    set_has_foo_bytes();
    foo_.foo_bytes_.InitDefault();
  }
  foo_.foo_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_foo_bytes() {
  if (!_internal_has_foo_bytes()) {
    clear_foo();
    set_has_foo_bytes();
    foo_.foo_bytes_.InitDefault();
  }
  return foo_.foo_bytes_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof2::release_foo_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.foo_bytes)
  if (_internal_has_foo_bytes()) {
    clear_has_foo();
    return foo_.foo_bytes_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_foo_bytes(std::string* foo_bytes) {
  if (has_foo()) {
    clear_foo();
  }
  if (foo_bytes != nullptr) {
    set_has_foo_bytes();
    foo_.foo_bytes_.InitAllocated(foo_bytes, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.foo_bytes)
}

// .protobuf_unittest.TestOneof2.NestedEnum foo_enum = 6;
inline bool TestOneof2::_internal_has_foo_enum() const {
  return foo_case() == kFooEnum;
}
inline bool TestOneof2::has_foo_enum() const {
  return _internal_has_foo_enum();
}
inline void TestOneof2::set_has_foo_enum() {
  _oneof_case_[0] = kFooEnum;
}
inline void TestOneof2::clear_foo_enum() {
  if (_internal_has_foo_enum()) {
    foo_.foo_enum_ = 1;
    clear_has_foo();
  }
}
inline ::protobuf_unittest::TestOneof2_NestedEnum TestOneof2::_internal_foo_enum() const {
  if (_internal_has_foo_enum()) {
    return static_cast< ::protobuf_unittest::TestOneof2_NestedEnum >(foo_.foo_enum_);
  }
  return static_cast< ::protobuf_unittest::TestOneof2_NestedEnum >(1);
}
inline ::protobuf_unittest::TestOneof2_NestedEnum TestOneof2::foo_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foo_enum)
  return _internal_foo_enum();
}
inline void TestOneof2::_internal_set_foo_enum(::protobuf_unittest::TestOneof2_NestedEnum value) {
  assert(::protobuf_unittest::TestOneof2_NestedEnum_IsValid(value));
  if (!_internal_has_foo_enum()) {
    clear_foo();
    set_has_foo_enum();
  }
  foo_.foo_enum_ = value;
}
inline void TestOneof2::set_foo_enum(::protobuf_unittest::TestOneof2_NestedEnum value) {
  _internal_set_foo_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.foo_enum)
}

// .protobuf_unittest.TestOneof2.NestedMessage foo_message = 7;
inline bool TestOneof2::_internal_has_foo_message() const {
  return foo_case() == kFooMessage;
}
inline bool TestOneof2::has_foo_message() const {
  return _internal_has_foo_message();
}
inline void TestOneof2::set_has_foo_message() {
  _oneof_case_[0] = kFooMessage;
}
inline void TestOneof2::clear_foo_message() {
  if (_internal_has_foo_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete foo_.foo_message_;
    }
    clear_has_foo();
  }
}
inline ::protobuf_unittest::TestOneof2_NestedMessage* TestOneof2::release_foo_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.foo_message)
  if (_internal_has_foo_message()) {
    clear_has_foo();
    ::protobuf_unittest::TestOneof2_NestedMessage* temp = foo_.foo_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foo_.foo_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestOneof2_NestedMessage& TestOneof2::_internal_foo_message() const {
  return _internal_has_foo_message()
      ? *foo_.foo_message_
      : reinterpret_cast< ::protobuf_unittest::TestOneof2_NestedMessage&>(::protobuf_unittest::_TestOneof2_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestOneof2_NestedMessage& TestOneof2::foo_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foo_message)
  return _internal_foo_message();
}
inline ::protobuf_unittest::TestOneof2_NestedMessage* TestOneof2::unsafe_arena_release_foo_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_unittest.TestOneof2.foo_message)
  if (_internal_has_foo_message()) {
    clear_has_foo();
    ::protobuf_unittest::TestOneof2_NestedMessage* temp = foo_.foo_message_;
    foo_.foo_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestOneof2::unsafe_arena_set_allocated_foo_message(::protobuf_unittest::TestOneof2_NestedMessage* foo_message) {
  clear_foo();
  if (foo_message) {
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneof2.foo_message)
}
inline ::protobuf_unittest::TestOneof2_NestedMessage* TestOneof2::_internal_mutable_foo_message() {
  if (!_internal_has_foo_message()) {
    clear_foo();
    set_has_foo_message();
    foo_.foo_message_ = CreateMaybeMessage< ::protobuf_unittest::TestOneof2_NestedMessage >(GetArenaForAllocation());
  }
  return foo_.foo_message_;
}
inline ::protobuf_unittest::TestOneof2_NestedMessage* TestOneof2::mutable_foo_message() {
  ::protobuf_unittest::TestOneof2_NestedMessage* _msg = _internal_mutable_foo_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.foo_message)
  return _msg;
}

// group FooGroup = 8 { ... };
inline bool TestOneof2::_internal_has_foogroup() const {
  return foo_case() == kFoogroup;
}
inline bool TestOneof2::has_foogroup() const {
  return _internal_has_foogroup();
}
inline void TestOneof2::set_has_foogroup() {
  _oneof_case_[0] = kFoogroup;
}
inline void TestOneof2::clear_foogroup() {
  if (_internal_has_foogroup()) {
    if (GetArenaForAllocation() == nullptr) {
      delete foo_.foogroup_;
    }
    clear_has_foo();
  }
}
inline ::protobuf_unittest::TestOneof2_FooGroup* TestOneof2::release_foogroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.foogroup)
  if (_internal_has_foogroup()) {
    clear_has_foo();
    ::protobuf_unittest::TestOneof2_FooGroup* temp = foo_.foogroup_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foo_.foogroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestOneof2_FooGroup& TestOneof2::_internal_foogroup() const {
  return _internal_has_foogroup()
      ? *foo_.foogroup_
      : reinterpret_cast< ::protobuf_unittest::TestOneof2_FooGroup&>(::protobuf_unittest::_TestOneof2_FooGroup_default_instance_);
}
inline const ::protobuf_unittest::TestOneof2_FooGroup& TestOneof2::foogroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foogroup)
  return _internal_foogroup();
}
inline ::protobuf_unittest::TestOneof2_FooGroup* TestOneof2::unsafe_arena_release_foogroup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_unittest.TestOneof2.foogroup)
  if (_internal_has_foogroup()) {
    clear_has_foo();
    ::protobuf_unittest::TestOneof2_FooGroup* temp = foo_.foogroup_;
    foo_.foogroup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestOneof2::unsafe_arena_set_allocated_foogroup(::protobuf_unittest::TestOneof2_FooGroup* foogroup) {
  clear_foo();
  if (foogroup) {
    set_has_foogroup();
    foo_.foogroup_ = foogroup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneof2.foogroup)
}
inline ::protobuf_unittest::TestOneof2_FooGroup* TestOneof2::_internal_mutable_foogroup() {
  if (!_internal_has_foogroup()) {
    clear_foo();
    set_has_foogroup();
    foo_.foogroup_ = CreateMaybeMessage< ::protobuf_unittest::TestOneof2_FooGroup >(GetArenaForAllocation());
  }
  return foo_.foogroup_;
}
inline ::protobuf_unittest::TestOneof2_FooGroup* TestOneof2::mutable_foogroup() {
  ::protobuf_unittest::TestOneof2_FooGroup* _msg = _internal_mutable_foogroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.foogroup)
  return _msg;
}

// .protobuf_unittest.TestOneof2.NestedMessage foo_lazy_message = 11 [lazy = true];
inline bool TestOneof2::_internal_has_foo_lazy_message() const {
  return foo_case() == kFooLazyMessage;
}
inline bool TestOneof2::has_foo_lazy_message() const {
  return _internal_has_foo_lazy_message();
}
inline void TestOneof2::set_has_foo_lazy_message() {
  _oneof_case_[0] = kFooLazyMessage;
}
inline void TestOneof2::clear_foo_lazy_message() {
  if (_internal_has_foo_lazy_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete foo_.foo_lazy_message_;
    }
    clear_has_foo();
  }
}
inline ::protobuf_unittest::TestOneof2_NestedMessage* TestOneof2::release_foo_lazy_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.foo_lazy_message)
  if (_internal_has_foo_lazy_message()) {
    clear_has_foo();
    ::protobuf_unittest::TestOneof2_NestedMessage* temp = foo_.foo_lazy_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foo_.foo_lazy_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestOneof2_NestedMessage& TestOneof2::_internal_foo_lazy_message() const {
  return _internal_has_foo_lazy_message()
      ? *foo_.foo_lazy_message_
      : reinterpret_cast< ::protobuf_unittest::TestOneof2_NestedMessage&>(::protobuf_unittest::_TestOneof2_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestOneof2_NestedMessage& TestOneof2::foo_lazy_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.foo_lazy_message)
  return _internal_foo_lazy_message();
}
inline ::protobuf_unittest::TestOneof2_NestedMessage* TestOneof2::unsafe_arena_release_foo_lazy_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_unittest.TestOneof2.foo_lazy_message)
  if (_internal_has_foo_lazy_message()) {
    clear_has_foo();
    ::protobuf_unittest::TestOneof2_NestedMessage* temp = foo_.foo_lazy_message_;
    foo_.foo_lazy_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestOneof2::unsafe_arena_set_allocated_foo_lazy_message(::protobuf_unittest::TestOneof2_NestedMessage* foo_lazy_message) {
  clear_foo();
  if (foo_lazy_message) {
    set_has_foo_lazy_message();
    foo_.foo_lazy_message_ = foo_lazy_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestOneof2.foo_lazy_message)
}
inline ::protobuf_unittest::TestOneof2_NestedMessage* TestOneof2::_internal_mutable_foo_lazy_message() {
  if (!_internal_has_foo_lazy_message()) {
    clear_foo();
    set_has_foo_lazy_message();
    foo_.foo_lazy_message_ = CreateMaybeMessage< ::protobuf_unittest::TestOneof2_NestedMessage >(GetArenaForAllocation());
  }
  return foo_.foo_lazy_message_;
}
inline ::protobuf_unittest::TestOneof2_NestedMessage* TestOneof2::mutable_foo_lazy_message() {
  ::protobuf_unittest::TestOneof2_NestedMessage* _msg = _internal_mutable_foo_lazy_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.foo_lazy_message)
  return _msg;
}

// int32 bar_int = 12 [default = 5];
inline bool TestOneof2::_internal_has_bar_int() const {
  return bar_case() == kBarInt;
}
inline bool TestOneof2::has_bar_int() const {
  return _internal_has_bar_int();
}
inline void TestOneof2::set_has_bar_int() {
  _oneof_case_[1] = kBarInt;
}
inline void TestOneof2::clear_bar_int() {
  if (_internal_has_bar_int()) {
    bar_.bar_int_ = 5;
    clear_has_bar();
  }
}
inline int32_t TestOneof2::_internal_bar_int() const {
  if (_internal_has_bar_int()) {
    return bar_.bar_int_;
  }
  return 5;
}
inline void TestOneof2::_internal_set_bar_int(int32_t value) {
  if (!_internal_has_bar_int()) {
    clear_bar();
    set_has_bar_int();
  }
  bar_.bar_int_ = value;
}
inline int32_t TestOneof2::bar_int() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_int)
  return _internal_bar_int();
}
inline void TestOneof2::set_bar_int(int32_t value) {
  _internal_set_bar_int(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_int)
}

// string bar_string = 13 [default = "STRING"];
inline bool TestOneof2::_internal_has_bar_string() const {
  return bar_case() == kBarString;
}
inline bool TestOneof2::has_bar_string() const {
  return _internal_has_bar_string();
}
inline void TestOneof2::set_has_bar_string() {
  _oneof_case_[1] = kBarString;
}
inline void TestOneof2::clear_bar_string() {
  if (_internal_has_bar_string()) {
    bar_.bar_string_.Destroy();
    clear_has_bar();
  }
}
inline const std::string& TestOneof2::bar_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_string)
  return _internal_bar_string();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_bar_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bar_string()) {
    clear_bar();
    set_has_bar_string();
    bar_.bar_string_.InitDefault();
  }
  bar_.bar_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_string)
}
inline std::string* TestOneof2::mutable_bar_string() {
  std::string* _s = _internal_mutable_bar_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.bar_string)
  return _s;
}
inline const std::string& TestOneof2::_internal_bar_string() const {
  if (_internal_has_bar_string()) {
    return bar_.bar_string_.Get();
  }
  return ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_.get();
}
inline void TestOneof2::_internal_set_bar_string(const std::string& value) {
  if (!_internal_has_bar_string()) {
    clear_bar();
    set_has_bar_string();
    bar_.bar_string_.InitDefault();
  }
  bar_.bar_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_bar_string() {
  if (!_internal_has_bar_string()) {
    clear_bar();
    set_has_bar_string();
    bar_.bar_string_.InitDefault();
  }
  return bar_.bar_string_.Mutable(::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_,       GetArenaForAllocation());
}
inline std::string* TestOneof2::release_bar_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.bar_string)
  if (_internal_has_bar_string()) {
    clear_has_bar();
    return bar_.bar_string_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_bar_string(std::string* bar_string) {
  if (has_bar()) {
    clear_bar();
  }
  if (bar_string != nullptr) {
    set_has_bar_string();
    bar_.bar_string_.InitAllocated(bar_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.bar_string)
}

// string bar_cord = 14 [default = "CORD", ctype = CORD];
inline bool TestOneof2::_internal_has_bar_cord() const {
  return bar_case() == kBarCord;
}
inline bool TestOneof2::has_bar_cord() const {
  return _internal_has_bar_cord();
}
inline void TestOneof2::set_has_bar_cord() {
  _oneof_case_[1] = kBarCord;
}
inline void TestOneof2::clear_bar_cord() {
  if (_internal_has_bar_cord()) {
    bar_.bar_cord_.Destroy();
    clear_has_bar();
  }
}
inline const std::string& TestOneof2::bar_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_cord)
  return _internal_bar_cord();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_bar_cord(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bar_cord()) {
    clear_bar();
    set_has_bar_cord();
    bar_.bar_cord_.InitDefault();
  }
  bar_.bar_cord_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_cord)
}
inline std::string* TestOneof2::mutable_bar_cord() {
  std::string* _s = _internal_mutable_bar_cord();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.bar_cord)
  return _s;
}
inline const std::string& TestOneof2::_internal_bar_cord() const {
  if (_internal_has_bar_cord()) {
    return bar_.bar_cord_.Get();
  }
  return ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_.get();
}
inline void TestOneof2::_internal_set_bar_cord(const std::string& value) {
  if (!_internal_has_bar_cord()) {
    clear_bar();
    set_has_bar_cord();
    bar_.bar_cord_.InitDefault();
  }
  bar_.bar_cord_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_bar_cord() {
  if (!_internal_has_bar_cord()) {
    clear_bar();
    set_has_bar_cord();
    bar_.bar_cord_.InitDefault();
  }
  return bar_.bar_cord_.Mutable(::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_cord_,       GetArenaForAllocation());
}
inline std::string* TestOneof2::release_bar_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.bar_cord)
  if (_internal_has_bar_cord()) {
    clear_has_bar();
    return bar_.bar_cord_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_bar_cord(std::string* bar_cord) {
  if (has_bar()) {
    clear_bar();
  }
  if (bar_cord != nullptr) {
    set_has_bar_cord();
    bar_.bar_cord_.InitAllocated(bar_cord, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.bar_cord)
}

// string bar_string_piece = 15 [default = "SPIECE", ctype = STRING_PIECE];
inline bool TestOneof2::_internal_has_bar_string_piece() const {
  return bar_case() == kBarStringPiece;
}
inline bool TestOneof2::has_bar_string_piece() const {
  return _internal_has_bar_string_piece();
}
inline void TestOneof2::set_has_bar_string_piece() {
  _oneof_case_[1] = kBarStringPiece;
}
inline void TestOneof2::clear_bar_string_piece() {
  if (_internal_has_bar_string_piece()) {
    bar_.bar_string_piece_.Destroy();
    clear_has_bar();
  }
}
inline const std::string& TestOneof2::bar_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_string_piece)
  return _internal_bar_string_piece();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_bar_string_piece(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bar_string_piece()) {
    clear_bar();
    set_has_bar_string_piece();
    bar_.bar_string_piece_.InitDefault();
  }
  bar_.bar_string_piece_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_string_piece)
}
inline std::string* TestOneof2::mutable_bar_string_piece() {
  std::string* _s = _internal_mutable_bar_string_piece();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.bar_string_piece)
  return _s;
}
inline const std::string& TestOneof2::_internal_bar_string_piece() const {
  if (_internal_has_bar_string_piece()) {
    return bar_.bar_string_piece_.Get();
  }
  return ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_.get();
}
inline void TestOneof2::_internal_set_bar_string_piece(const std::string& value) {
  if (!_internal_has_bar_string_piece()) {
    clear_bar();
    set_has_bar_string_piece();
    bar_.bar_string_piece_.InitDefault();
  }
  bar_.bar_string_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_bar_string_piece() {
  if (!_internal_has_bar_string_piece()) {
    clear_bar();
    set_has_bar_string_piece();
    bar_.bar_string_piece_.InitDefault();
  }
  return bar_.bar_string_piece_.Mutable(::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_string_piece_,       GetArenaForAllocation());
}
inline std::string* TestOneof2::release_bar_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.bar_string_piece)
  if (_internal_has_bar_string_piece()) {
    clear_has_bar();
    return bar_.bar_string_piece_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_bar_string_piece(std::string* bar_string_piece) {
  if (has_bar()) {
    clear_bar();
  }
  if (bar_string_piece != nullptr) {
    set_has_bar_string_piece();
    bar_.bar_string_piece_.InitAllocated(bar_string_piece, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.bar_string_piece)
}

// bytes bar_bytes = 16 [default = "BYTES"];
inline bool TestOneof2::_internal_has_bar_bytes() const {
  return bar_case() == kBarBytes;
}
inline bool TestOneof2::has_bar_bytes() const {
  return _internal_has_bar_bytes();
}
inline void TestOneof2::set_has_bar_bytes() {
  _oneof_case_[1] = kBarBytes;
}
inline void TestOneof2::clear_bar_bytes() {
  if (_internal_has_bar_bytes()) {
    bar_.bar_bytes_.Destroy();
    clear_has_bar();
  }
}
inline const std::string& TestOneof2::bar_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_bytes)
  return _internal_bar_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_bar_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bar_bytes()) {
    clear_bar();
    set_has_bar_bytes();
    bar_.bar_bytes_.InitDefault();
  }
  bar_.bar_bytes_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_bytes)
}
inline std::string* TestOneof2::mutable_bar_bytes() {
  std::string* _s = _internal_mutable_bar_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.bar_bytes)
  return _s;
}
inline const std::string& TestOneof2::_internal_bar_bytes() const {
  if (_internal_has_bar_bytes()) {
    return bar_.bar_bytes_.Get();
  }
  return ::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_.get();
}
inline void TestOneof2::_internal_set_bar_bytes(const std::string& value) {
  if (!_internal_has_bar_bytes()) {
    clear_bar();
    set_has_bar_bytes();
    bar_.bar_bytes_.InitDefault();
  }
  bar_.bar_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_bar_bytes() {
  if (!_internal_has_bar_bytes()) {
    clear_bar();
    set_has_bar_bytes();
    bar_.bar_bytes_.InitDefault();
  }
  return bar_.bar_bytes_.Mutable(::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_bar_bytes_,       GetArenaForAllocation());
}
inline std::string* TestOneof2::release_bar_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.bar_bytes)
  if (_internal_has_bar_bytes()) {
    clear_has_bar();
    return bar_.bar_bytes_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_bar_bytes(std::string* bar_bytes) {
  if (has_bar()) {
    clear_bar();
  }
  if (bar_bytes != nullptr) {
    set_has_bar_bytes();
    bar_.bar_bytes_.InitAllocated(bar_bytes, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.bar_bytes)
}

// .protobuf_unittest.TestOneof2.NestedEnum bar_enum = 17 [default = BAR];
inline bool TestOneof2::_internal_has_bar_enum() const {
  return bar_case() == kBarEnum;
}
inline bool TestOneof2::has_bar_enum() const {
  return _internal_has_bar_enum();
}
inline void TestOneof2::set_has_bar_enum() {
  _oneof_case_[1] = kBarEnum;
}
inline void TestOneof2::clear_bar_enum() {
  if (_internal_has_bar_enum()) {
    bar_.bar_enum_ = 2;
    clear_has_bar();
  }
}
inline ::protobuf_unittest::TestOneof2_NestedEnum TestOneof2::_internal_bar_enum() const {
  if (_internal_has_bar_enum()) {
    return static_cast< ::protobuf_unittest::TestOneof2_NestedEnum >(bar_.bar_enum_);
  }
  return static_cast< ::protobuf_unittest::TestOneof2_NestedEnum >(2);
}
inline ::protobuf_unittest::TestOneof2_NestedEnum TestOneof2::bar_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_enum)
  return _internal_bar_enum();
}
inline void TestOneof2::_internal_set_bar_enum(::protobuf_unittest::TestOneof2_NestedEnum value) {
  assert(::protobuf_unittest::TestOneof2_NestedEnum_IsValid(value));
  if (!_internal_has_bar_enum()) {
    clear_bar();
    set_has_bar_enum();
  }
  bar_.bar_enum_ = value;
}
inline void TestOneof2::set_bar_enum(::protobuf_unittest::TestOneof2_NestedEnum value) {
  _internal_set_bar_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_enum)
}

// string bar_string_with_empty_default = 20 [default = ""];
inline bool TestOneof2::_internal_has_bar_string_with_empty_default() const {
  return bar_case() == kBarStringWithEmptyDefault;
}
inline bool TestOneof2::has_bar_string_with_empty_default() const {
  return _internal_has_bar_string_with_empty_default();
}
inline void TestOneof2::set_has_bar_string_with_empty_default() {
  _oneof_case_[1] = kBarStringWithEmptyDefault;
}
inline void TestOneof2::clear_bar_string_with_empty_default() {
  if (_internal_has_bar_string_with_empty_default()) {
    bar_.bar_string_with_empty_default_.Destroy();
    clear_has_bar();
  }
}
inline const std::string& TestOneof2::bar_string_with_empty_default() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_string_with_empty_default)
  return _internal_bar_string_with_empty_default();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_bar_string_with_empty_default(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bar_string_with_empty_default()) {
    clear_bar();
    set_has_bar_string_with_empty_default();
    bar_.bar_string_with_empty_default_.InitDefault();
  }
  bar_.bar_string_with_empty_default_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_string_with_empty_default)
}
inline std::string* TestOneof2::mutable_bar_string_with_empty_default() {
  std::string* _s = _internal_mutable_bar_string_with_empty_default();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.bar_string_with_empty_default)
  return _s;
}
inline const std::string& TestOneof2::_internal_bar_string_with_empty_default() const {
  if (_internal_has_bar_string_with_empty_default()) {
    return bar_.bar_string_with_empty_default_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof2::_internal_set_bar_string_with_empty_default(const std::string& value) {
  if (!_internal_has_bar_string_with_empty_default()) {
    clear_bar();
    set_has_bar_string_with_empty_default();
    bar_.bar_string_with_empty_default_.InitDefault();
  }
  bar_.bar_string_with_empty_default_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_bar_string_with_empty_default() {
  if (!_internal_has_bar_string_with_empty_default()) {
    clear_bar();
    set_has_bar_string_with_empty_default();
    bar_.bar_string_with_empty_default_.InitDefault();
  }
  return bar_.bar_string_with_empty_default_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof2::release_bar_string_with_empty_default() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.bar_string_with_empty_default)
  if (_internal_has_bar_string_with_empty_default()) {
    clear_has_bar();
    return bar_.bar_string_with_empty_default_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_bar_string_with_empty_default(std::string* bar_string_with_empty_default) {
  if (has_bar()) {
    clear_bar();
  }
  if (bar_string_with_empty_default != nullptr) {
    set_has_bar_string_with_empty_default();
    bar_.bar_string_with_empty_default_.InitAllocated(bar_string_with_empty_default, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.bar_string_with_empty_default)
}

// string bar_cord_with_empty_default = 21 [default = "", ctype = CORD];
inline bool TestOneof2::_internal_has_bar_cord_with_empty_default() const {
  return bar_case() == kBarCordWithEmptyDefault;
}
inline bool TestOneof2::has_bar_cord_with_empty_default() const {
  return _internal_has_bar_cord_with_empty_default();
}
inline void TestOneof2::set_has_bar_cord_with_empty_default() {
  _oneof_case_[1] = kBarCordWithEmptyDefault;
}
inline void TestOneof2::clear_bar_cord_with_empty_default() {
  if (_internal_has_bar_cord_with_empty_default()) {
    bar_.bar_cord_with_empty_default_.Destroy();
    clear_has_bar();
  }
}
inline const std::string& TestOneof2::bar_cord_with_empty_default() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_cord_with_empty_default)
  return _internal_bar_cord_with_empty_default();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_bar_cord_with_empty_default(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bar_cord_with_empty_default()) {
    clear_bar();
    set_has_bar_cord_with_empty_default();
    bar_.bar_cord_with_empty_default_.InitDefault();
  }
  bar_.bar_cord_with_empty_default_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_cord_with_empty_default)
}
inline std::string* TestOneof2::mutable_bar_cord_with_empty_default() {
  std::string* _s = _internal_mutable_bar_cord_with_empty_default();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.bar_cord_with_empty_default)
  return _s;
}
inline const std::string& TestOneof2::_internal_bar_cord_with_empty_default() const {
  if (_internal_has_bar_cord_with_empty_default()) {
    return bar_.bar_cord_with_empty_default_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof2::_internal_set_bar_cord_with_empty_default(const std::string& value) {
  if (!_internal_has_bar_cord_with_empty_default()) {
    clear_bar();
    set_has_bar_cord_with_empty_default();
    bar_.bar_cord_with_empty_default_.InitDefault();
  }
  bar_.bar_cord_with_empty_default_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_bar_cord_with_empty_default() {
  if (!_internal_has_bar_cord_with_empty_default()) {
    clear_bar();
    set_has_bar_cord_with_empty_default();
    bar_.bar_cord_with_empty_default_.InitDefault();
  }
  return bar_.bar_cord_with_empty_default_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof2::release_bar_cord_with_empty_default() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.bar_cord_with_empty_default)
  if (_internal_has_bar_cord_with_empty_default()) {
    clear_has_bar();
    return bar_.bar_cord_with_empty_default_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_bar_cord_with_empty_default(std::string* bar_cord_with_empty_default) {
  if (has_bar()) {
    clear_bar();
  }
  if (bar_cord_with_empty_default != nullptr) {
    set_has_bar_cord_with_empty_default();
    bar_.bar_cord_with_empty_default_.InitAllocated(bar_cord_with_empty_default, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.bar_cord_with_empty_default)
}

// string bar_string_piece_with_empty_default = 22 [default = "", ctype = STRING_PIECE];
inline bool TestOneof2::_internal_has_bar_string_piece_with_empty_default() const {
  return bar_case() == kBarStringPieceWithEmptyDefault;
}
inline bool TestOneof2::has_bar_string_piece_with_empty_default() const {
  return _internal_has_bar_string_piece_with_empty_default();
}
inline void TestOneof2::set_has_bar_string_piece_with_empty_default() {
  _oneof_case_[1] = kBarStringPieceWithEmptyDefault;
}
inline void TestOneof2::clear_bar_string_piece_with_empty_default() {
  if (_internal_has_bar_string_piece_with_empty_default()) {
    bar_.bar_string_piece_with_empty_default_.Destroy();
    clear_has_bar();
  }
}
inline const std::string& TestOneof2::bar_string_piece_with_empty_default() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_string_piece_with_empty_default)
  return _internal_bar_string_piece_with_empty_default();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_bar_string_piece_with_empty_default(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bar_string_piece_with_empty_default()) {
    clear_bar();
    set_has_bar_string_piece_with_empty_default();
    bar_.bar_string_piece_with_empty_default_.InitDefault();
  }
  bar_.bar_string_piece_with_empty_default_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_string_piece_with_empty_default)
}
inline std::string* TestOneof2::mutable_bar_string_piece_with_empty_default() {
  std::string* _s = _internal_mutable_bar_string_piece_with_empty_default();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.bar_string_piece_with_empty_default)
  return _s;
}
inline const std::string& TestOneof2::_internal_bar_string_piece_with_empty_default() const {
  if (_internal_has_bar_string_piece_with_empty_default()) {
    return bar_.bar_string_piece_with_empty_default_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof2::_internal_set_bar_string_piece_with_empty_default(const std::string& value) {
  if (!_internal_has_bar_string_piece_with_empty_default()) {
    clear_bar();
    set_has_bar_string_piece_with_empty_default();
    bar_.bar_string_piece_with_empty_default_.InitDefault();
  }
  bar_.bar_string_piece_with_empty_default_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_bar_string_piece_with_empty_default() {
  if (!_internal_has_bar_string_piece_with_empty_default()) {
    clear_bar();
    set_has_bar_string_piece_with_empty_default();
    bar_.bar_string_piece_with_empty_default_.InitDefault();
  }
  return bar_.bar_string_piece_with_empty_default_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof2::release_bar_string_piece_with_empty_default() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.bar_string_piece_with_empty_default)
  if (_internal_has_bar_string_piece_with_empty_default()) {
    clear_has_bar();
    return bar_.bar_string_piece_with_empty_default_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_bar_string_piece_with_empty_default(std::string* bar_string_piece_with_empty_default) {
  if (has_bar()) {
    clear_bar();
  }
  if (bar_string_piece_with_empty_default != nullptr) {
    set_has_bar_string_piece_with_empty_default();
    bar_.bar_string_piece_with_empty_default_.InitAllocated(bar_string_piece_with_empty_default, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.bar_string_piece_with_empty_default)
}

// bytes bar_bytes_with_empty_default = 23 [default = ""];
inline bool TestOneof2::_internal_has_bar_bytes_with_empty_default() const {
  return bar_case() == kBarBytesWithEmptyDefault;
}
inline bool TestOneof2::has_bar_bytes_with_empty_default() const {
  return _internal_has_bar_bytes_with_empty_default();
}
inline void TestOneof2::set_has_bar_bytes_with_empty_default() {
  _oneof_case_[1] = kBarBytesWithEmptyDefault;
}
inline void TestOneof2::clear_bar_bytes_with_empty_default() {
  if (_internal_has_bar_bytes_with_empty_default()) {
    bar_.bar_bytes_with_empty_default_.Destroy();
    clear_has_bar();
  }
}
inline const std::string& TestOneof2::bar_bytes_with_empty_default() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.bar_bytes_with_empty_default)
  return _internal_bar_bytes_with_empty_default();
}
template <typename ArgT0, typename... ArgT>
inline void TestOneof2::set_bar_bytes_with_empty_default(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bar_bytes_with_empty_default()) {
    clear_bar();
    set_has_bar_bytes_with_empty_default();
    bar_.bar_bytes_with_empty_default_.InitDefault();
  }
  bar_.bar_bytes_with_empty_default_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.bar_bytes_with_empty_default)
}
inline std::string* TestOneof2::mutable_bar_bytes_with_empty_default() {
  std::string* _s = _internal_mutable_bar_bytes_with_empty_default();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.bar_bytes_with_empty_default)
  return _s;
}
inline const std::string& TestOneof2::_internal_bar_bytes_with_empty_default() const {
  if (_internal_has_bar_bytes_with_empty_default()) {
    return bar_.bar_bytes_with_empty_default_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneof2::_internal_set_bar_bytes_with_empty_default(const std::string& value) {
  if (!_internal_has_bar_bytes_with_empty_default()) {
    clear_bar();
    set_has_bar_bytes_with_empty_default();
    bar_.bar_bytes_with_empty_default_.InitDefault();
  }
  bar_.bar_bytes_with_empty_default_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_bar_bytes_with_empty_default() {
  if (!_internal_has_bar_bytes_with_empty_default()) {
    clear_bar();
    set_has_bar_bytes_with_empty_default();
    bar_.bar_bytes_with_empty_default_.InitDefault();
  }
  return bar_.bar_bytes_with_empty_default_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestOneof2::release_bar_bytes_with_empty_default() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.bar_bytes_with_empty_default)
  if (_internal_has_bar_bytes_with_empty_default()) {
    clear_has_bar();
    return bar_.bar_bytes_with_empty_default_.Release();
  } else {
    return nullptr;
  }
}
inline void TestOneof2::set_allocated_bar_bytes_with_empty_default(std::string* bar_bytes_with_empty_default) {
  if (has_bar()) {
    clear_bar();
  }
  if (bar_bytes_with_empty_default != nullptr) {
    set_has_bar_bytes_with_empty_default();
    bar_.bar_bytes_with_empty_default_.InitAllocated(bar_bytes_with_empty_default, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.bar_bytes_with_empty_default)
}

// optional int32 baz_int = 18;
inline bool TestOneof2::_internal_has_baz_int() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestOneof2::has_baz_int() const {
  return _internal_has_baz_int();
}
inline void TestOneof2::clear_baz_int() {
  baz_int_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestOneof2::_internal_baz_int() const {
  return baz_int_;
}
inline int32_t TestOneof2::baz_int() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.baz_int)
  return _internal_baz_int();
}
inline void TestOneof2::_internal_set_baz_int(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  baz_int_ = value;
}
inline void TestOneof2::set_baz_int(int32_t value) {
  _internal_set_baz_int(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.baz_int)
}

// optional string baz_string = 19 [default = "BAZ"];
inline bool TestOneof2::_internal_has_baz_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestOneof2::has_baz_string() const {
  return _internal_has_baz_string();
}
inline void TestOneof2::clear_baz_string() {
  baz_string_.ClearToDefault(::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestOneof2::baz_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneof2.baz_string)
  if (baz_string_.IsDefault()) return _i_give_permission_to_break_this_code_default_baz_string_.get();
  return _internal_baz_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestOneof2::set_baz_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 baz_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneof2.baz_string)
}
inline std::string* TestOneof2::mutable_baz_string() {
  std::string* _s = _internal_mutable_baz_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneof2.baz_string)
  return _s;
}
inline const std::string& TestOneof2::_internal_baz_string() const {
  return baz_string_.Get();
}
inline void TestOneof2::_internal_set_baz_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  baz_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestOneof2::_internal_mutable_baz_string() {
  _has_bits_[0] |= 0x00000001u;
  return baz_string_.Mutable(::protobuf_unittest::TestOneof2::_i_give_permission_to_break_this_code_default_baz_string_, GetArenaForAllocation());
}
inline std::string* TestOneof2::release_baz_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneof2.baz_string)
  if (!_internal_has_baz_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = baz_string_.Release();
  return p;
}
inline void TestOneof2::set_allocated_baz_string(std::string* baz_string) {
  if (baz_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  baz_string_.SetAllocated(baz_string, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneof2.baz_string)
}

inline bool TestOneof2::has_foo() const {
  return foo_case() != FOO_NOT_SET;
}
inline void TestOneof2::clear_has_foo() {
  _oneof_case_[0] = FOO_NOT_SET;
}
inline bool TestOneof2::has_bar() const {
  return bar_case() != BAR_NOT_SET;
}
inline void TestOneof2::clear_has_bar() {
  _oneof_case_[1] = BAR_NOT_SET;
}
inline TestOneof2::FooCase TestOneof2::foo_case() const {
  return TestOneof2::FooCase(_oneof_case_[0]);
}
inline TestOneof2::BarCase TestOneof2::bar_case() const {
  return TestOneof2::BarCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TestRequiredOneof_NestedMessage

// required double required_double = 1;
inline bool TestRequiredOneof_NestedMessage::_internal_has_required_double() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestRequiredOneof_NestedMessage::has_required_double() const {
  return _internal_has_required_double();
}
inline void TestRequiredOneof_NestedMessage::clear_required_double() {
  required_double_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double TestRequiredOneof_NestedMessage::_internal_required_double() const {
  return required_double_;
}
inline double TestRequiredOneof_NestedMessage::required_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredOneof.NestedMessage.required_double)
  return _internal_required_double();
}
inline void TestRequiredOneof_NestedMessage::_internal_set_required_double(double value) {
  _has_bits_[0] |= 0x00000001u;
  required_double_ = value;
}
inline void TestRequiredOneof_NestedMessage::set_required_double(double value) {
  _internal_set_required_double(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequiredOneof.NestedMessage.required_double)
}

// -------------------------------------------------------------------

// TestRequiredOneof

// int32 foo_int = 1;
inline bool TestRequiredOneof::_internal_has_foo_int() const {
  return foo_case() == kFooInt;
}
inline bool TestRequiredOneof::has_foo_int() const {
  return _internal_has_foo_int();
}
inline void TestRequiredOneof::set_has_foo_int() {
  _oneof_case_[0] = kFooInt;
}
inline void TestRequiredOneof::clear_foo_int() {
  if (_internal_has_foo_int()) {
    foo_.foo_int_ = 0;
    clear_has_foo();
  }
}
inline int32_t TestRequiredOneof::_internal_foo_int() const {
  if (_internal_has_foo_int()) {
    return foo_.foo_int_;
  }
  return 0;
}
inline void TestRequiredOneof::_internal_set_foo_int(int32_t value) {
  if (!_internal_has_foo_int()) {
    clear_foo();
    set_has_foo_int();
  }
  foo_.foo_int_ = value;
}
inline int32_t TestRequiredOneof::foo_int() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredOneof.foo_int)
  return _internal_foo_int();
}
inline void TestRequiredOneof::set_foo_int(int32_t value) {
  _internal_set_foo_int(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequiredOneof.foo_int)
}

// string foo_string = 2;
inline bool TestRequiredOneof::_internal_has_foo_string() const {
  return foo_case() == kFooString;
}
inline bool TestRequiredOneof::has_foo_string() const {
  return _internal_has_foo_string();
}
inline void TestRequiredOneof::set_has_foo_string() {
  _oneof_case_[0] = kFooString;
}
inline void TestRequiredOneof::clear_foo_string() {
  if (_internal_has_foo_string()) {
    foo_.foo_string_.Destroy();
    clear_has_foo();
  }
}
inline const std::string& TestRequiredOneof::foo_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredOneof.foo_string)
  return _internal_foo_string();
}
template <typename ArgT0, typename... ArgT>
inline void TestRequiredOneof::set_foo_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  foo_.foo_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRequiredOneof.foo_string)
}
inline std::string* TestRequiredOneof::mutable_foo_string() {
  std::string* _s = _internal_mutable_foo_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRequiredOneof.foo_string)
  return _s;
}
inline const std::string& TestRequiredOneof::_internal_foo_string() const {
  if (_internal_has_foo_string()) {
    return foo_.foo_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestRequiredOneof::_internal_set_foo_string(const std::string& value) {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  foo_.foo_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestRequiredOneof::_internal_mutable_foo_string() {
  if (!_internal_has_foo_string()) {
    clear_foo();
    set_has_foo_string();
    foo_.foo_string_.InitDefault();
  }
  return foo_.foo_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestRequiredOneof::release_foo_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestRequiredOneof.foo_string)
  if (_internal_has_foo_string()) {
    clear_has_foo();
    return foo_.foo_string_.Release();
  } else {
    return nullptr;
  }
}
inline void TestRequiredOneof::set_allocated_foo_string(std::string* foo_string) {
  if (has_foo()) {
    clear_foo();
  }
  if (foo_string != nullptr) {
    set_has_foo_string();
    foo_.foo_string_.InitAllocated(foo_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestRequiredOneof.foo_string)
}

// .protobuf_unittest.TestRequiredOneof.NestedMessage foo_message = 3;
inline bool TestRequiredOneof::_internal_has_foo_message() const {
  return foo_case() == kFooMessage;
}
inline bool TestRequiredOneof::has_foo_message() const {
  return _internal_has_foo_message();
}
inline void TestRequiredOneof::set_has_foo_message() {
  _oneof_case_[0] = kFooMessage;
}
inline void TestRequiredOneof::clear_foo_message() {
  if (_internal_has_foo_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete foo_.foo_message_;
    }
    clear_has_foo();
  }
}
inline ::protobuf_unittest::TestRequiredOneof_NestedMessage* TestRequiredOneof::release_foo_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestRequiredOneof.foo_message)
  if (_internal_has_foo_message()) {
    clear_has_foo();
    ::protobuf_unittest::TestRequiredOneof_NestedMessage* temp = foo_.foo_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foo_.foo_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestRequiredOneof_NestedMessage& TestRequiredOneof::_internal_foo_message() const {
  return _internal_has_foo_message()
      ? *foo_.foo_message_
      : reinterpret_cast< ::protobuf_unittest::TestRequiredOneof_NestedMessage&>(::protobuf_unittest::_TestRequiredOneof_NestedMessage_default_instance_);
}
inline const ::protobuf_unittest::TestRequiredOneof_NestedMessage& TestRequiredOneof::foo_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRequiredOneof.foo_message)
  return _internal_foo_message();
}
inline ::protobuf_unittest::TestRequiredOneof_NestedMessage* TestRequiredOneof::unsafe_arena_release_foo_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_unittest.TestRequiredOneof.foo_message)
  if (_internal_has_foo_message()) {
    clear_has_foo();
    ::protobuf_unittest::TestRequiredOneof_NestedMessage* temp = foo_.foo_message_;
    foo_.foo_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestRequiredOneof::unsafe_arena_set_allocated_foo_message(::protobuf_unittest::TestRequiredOneof_NestedMessage* foo_message) {
  clear_foo();
  if (foo_message) {
    set_has_foo_message();
    foo_.foo_message_ = foo_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestRequiredOneof.foo_message)
}
inline ::protobuf_unittest::TestRequiredOneof_NestedMessage* TestRequiredOneof::_internal_mutable_foo_message() {
  if (!_internal_has_foo_message()) {
    clear_foo();
    set_has_foo_message();
    foo_.foo_message_ = CreateMaybeMessage< ::protobuf_unittest::TestRequiredOneof_NestedMessage >(GetArenaForAllocation());
  }
  return foo_.foo_message_;
}
inline ::protobuf_unittest::TestRequiredOneof_NestedMessage* TestRequiredOneof::mutable_foo_message() {
  ::protobuf_unittest::TestRequiredOneof_NestedMessage* _msg = _internal_mutable_foo_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestRequiredOneof.foo_message)
  return _msg;
}

inline bool TestRequiredOneof::has_foo() const {
  return foo_case() != FOO_NOT_SET;
}
inline void TestRequiredOneof::clear_has_foo() {
  _oneof_case_[0] = FOO_NOT_SET;
}
inline TestRequiredOneof::FooCase TestRequiredOneof::foo_case() const {
  return TestRequiredOneof::FooCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestPackedTypes

// repeated int32 packed_int32 = 90 [packed = true];
inline int TestPackedTypes::_internal_packed_int32_size() const {
  return packed_int32_.size();
}
inline int TestPackedTypes::packed_int32_size() const {
  return _internal_packed_int32_size();
}
inline void TestPackedTypes::clear_packed_int32() {
  packed_int32_.Clear();
}
inline int32_t TestPackedTypes::_internal_packed_int32(int index) const {
  return packed_int32_.Get(index);
}
inline int32_t TestPackedTypes::packed_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_int32)
  return _internal_packed_int32(index);
}
inline void TestPackedTypes::set_packed_int32(int index, int32_t value) {
  packed_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_int32)
}
inline void TestPackedTypes::_internal_add_packed_int32(int32_t value) {
  packed_int32_.Add(value);
}
inline void TestPackedTypes::add_packed_int32(int32_t value) {
  _internal_add_packed_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestPackedTypes::_internal_packed_int32() const {
  return packed_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestPackedTypes::packed_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_int32)
  return _internal_packed_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestPackedTypes::_internal_mutable_packed_int32() {
  return &packed_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestPackedTypes::mutable_packed_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_int32)
  return _internal_mutable_packed_int32();
}

// repeated int64 packed_int64 = 91 [packed = true];
inline int TestPackedTypes::_internal_packed_int64_size() const {
  return packed_int64_.size();
}
inline int TestPackedTypes::packed_int64_size() const {
  return _internal_packed_int64_size();
}
inline void TestPackedTypes::clear_packed_int64() {
  packed_int64_.Clear();
}
inline int64_t TestPackedTypes::_internal_packed_int64(int index) const {
  return packed_int64_.Get(index);
}
inline int64_t TestPackedTypes::packed_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_int64)
  return _internal_packed_int64(index);
}
inline void TestPackedTypes::set_packed_int64(int index, int64_t value) {
  packed_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_int64)
}
inline void TestPackedTypes::_internal_add_packed_int64(int64_t value) {
  packed_int64_.Add(value);
}
inline void TestPackedTypes::add_packed_int64(int64_t value) {
  _internal_add_packed_int64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestPackedTypes::_internal_packed_int64() const {
  return packed_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestPackedTypes::packed_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_int64)
  return _internal_packed_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestPackedTypes::_internal_mutable_packed_int64() {
  return &packed_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestPackedTypes::mutable_packed_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_int64)
  return _internal_mutable_packed_int64();
}

// repeated uint32 packed_uint32 = 92 [packed = true];
inline int TestPackedTypes::_internal_packed_uint32_size() const {
  return packed_uint32_.size();
}
inline int TestPackedTypes::packed_uint32_size() const {
  return _internal_packed_uint32_size();
}
inline void TestPackedTypes::clear_packed_uint32() {
  packed_uint32_.Clear();
}
inline uint32_t TestPackedTypes::_internal_packed_uint32(int index) const {
  return packed_uint32_.Get(index);
}
inline uint32_t TestPackedTypes::packed_uint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_uint32)
  return _internal_packed_uint32(index);
}
inline void TestPackedTypes::set_packed_uint32(int index, uint32_t value) {
  packed_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_uint32)
}
inline void TestPackedTypes::_internal_add_packed_uint32(uint32_t value) {
  packed_uint32_.Add(value);
}
inline void TestPackedTypes::add_packed_uint32(uint32_t value) {
  _internal_add_packed_uint32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestPackedTypes::_internal_packed_uint32() const {
  return packed_uint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestPackedTypes::packed_uint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_uint32)
  return _internal_packed_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestPackedTypes::_internal_mutable_packed_uint32() {
  return &packed_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestPackedTypes::mutable_packed_uint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_uint32)
  return _internal_mutable_packed_uint32();
}

// repeated uint64 packed_uint64 = 93 [packed = true];
inline int TestPackedTypes::_internal_packed_uint64_size() const {
  return packed_uint64_.size();
}
inline int TestPackedTypes::packed_uint64_size() const {
  return _internal_packed_uint64_size();
}
inline void TestPackedTypes::clear_packed_uint64() {
  packed_uint64_.Clear();
}
inline uint64_t TestPackedTypes::_internal_packed_uint64(int index) const {
  return packed_uint64_.Get(index);
}
inline uint64_t TestPackedTypes::packed_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_uint64)
  return _internal_packed_uint64(index);
}
inline void TestPackedTypes::set_packed_uint64(int index, uint64_t value) {
  packed_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_uint64)
}
inline void TestPackedTypes::_internal_add_packed_uint64(uint64_t value) {
  packed_uint64_.Add(value);
}
inline void TestPackedTypes::add_packed_uint64(uint64_t value) {
  _internal_add_packed_uint64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestPackedTypes::_internal_packed_uint64() const {
  return packed_uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestPackedTypes::packed_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_uint64)
  return _internal_packed_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestPackedTypes::_internal_mutable_packed_uint64() {
  return &packed_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestPackedTypes::mutable_packed_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_uint64)
  return _internal_mutable_packed_uint64();
}

// repeated sint32 packed_sint32 = 94 [packed = true];
inline int TestPackedTypes::_internal_packed_sint32_size() const {
  return packed_sint32_.size();
}
inline int TestPackedTypes::packed_sint32_size() const {
  return _internal_packed_sint32_size();
}
inline void TestPackedTypes::clear_packed_sint32() {
  packed_sint32_.Clear();
}
inline int32_t TestPackedTypes::_internal_packed_sint32(int index) const {
  return packed_sint32_.Get(index);
}
inline int32_t TestPackedTypes::packed_sint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_sint32)
  return _internal_packed_sint32(index);
}
inline void TestPackedTypes::set_packed_sint32(int index, int32_t value) {
  packed_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_sint32)
}
inline void TestPackedTypes::_internal_add_packed_sint32(int32_t value) {
  packed_sint32_.Add(value);
}
inline void TestPackedTypes::add_packed_sint32(int32_t value) {
  _internal_add_packed_sint32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestPackedTypes::_internal_packed_sint32() const {
  return packed_sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestPackedTypes::packed_sint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_sint32)
  return _internal_packed_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestPackedTypes::_internal_mutable_packed_sint32() {
  return &packed_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestPackedTypes::mutable_packed_sint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_sint32)
  return _internal_mutable_packed_sint32();
}

// repeated sint64 packed_sint64 = 95 [packed = true];
inline int TestPackedTypes::_internal_packed_sint64_size() const {
  return packed_sint64_.size();
}
inline int TestPackedTypes::packed_sint64_size() const {
  return _internal_packed_sint64_size();
}
inline void TestPackedTypes::clear_packed_sint64() {
  packed_sint64_.Clear();
}
inline int64_t TestPackedTypes::_internal_packed_sint64(int index) const {
  return packed_sint64_.Get(index);
}
inline int64_t TestPackedTypes::packed_sint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_sint64)
  return _internal_packed_sint64(index);
}
inline void TestPackedTypes::set_packed_sint64(int index, int64_t value) {
  packed_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_sint64)
}
inline void TestPackedTypes::_internal_add_packed_sint64(int64_t value) {
  packed_sint64_.Add(value);
}
inline void TestPackedTypes::add_packed_sint64(int64_t value) {
  _internal_add_packed_sint64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestPackedTypes::_internal_packed_sint64() const {
  return packed_sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestPackedTypes::packed_sint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_sint64)
  return _internal_packed_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestPackedTypes::_internal_mutable_packed_sint64() {
  return &packed_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestPackedTypes::mutable_packed_sint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_sint64)
  return _internal_mutable_packed_sint64();
}

// repeated fixed32 packed_fixed32 = 96 [packed = true];
inline int TestPackedTypes::_internal_packed_fixed32_size() const {
  return packed_fixed32_.size();
}
inline int TestPackedTypes::packed_fixed32_size() const {
  return _internal_packed_fixed32_size();
}
inline void TestPackedTypes::clear_packed_fixed32() {
  packed_fixed32_.Clear();
}
inline uint32_t TestPackedTypes::_internal_packed_fixed32(int index) const {
  return packed_fixed32_.Get(index);
}
inline uint32_t TestPackedTypes::packed_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_fixed32)
  return _internal_packed_fixed32(index);
}
inline void TestPackedTypes::set_packed_fixed32(int index, uint32_t value) {
  packed_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_fixed32)
}
inline void TestPackedTypes::_internal_add_packed_fixed32(uint32_t value) {
  packed_fixed32_.Add(value);
}
inline void TestPackedTypes::add_packed_fixed32(uint32_t value) {
  _internal_add_packed_fixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestPackedTypes::_internal_packed_fixed32() const {
  return packed_fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestPackedTypes::packed_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_fixed32)
  return _internal_packed_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestPackedTypes::_internal_mutable_packed_fixed32() {
  return &packed_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestPackedTypes::mutable_packed_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_fixed32)
  return _internal_mutable_packed_fixed32();
}

// repeated fixed64 packed_fixed64 = 97 [packed = true];
inline int TestPackedTypes::_internal_packed_fixed64_size() const {
  return packed_fixed64_.size();
}
inline int TestPackedTypes::packed_fixed64_size() const {
  return _internal_packed_fixed64_size();
}
inline void TestPackedTypes::clear_packed_fixed64() {
  packed_fixed64_.Clear();
}
inline uint64_t TestPackedTypes::_internal_packed_fixed64(int index) const {
  return packed_fixed64_.Get(index);
}
inline uint64_t TestPackedTypes::packed_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_fixed64)
  return _internal_packed_fixed64(index);
}
inline void TestPackedTypes::set_packed_fixed64(int index, uint64_t value) {
  packed_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_fixed64)
}
inline void TestPackedTypes::_internal_add_packed_fixed64(uint64_t value) {
  packed_fixed64_.Add(value);
}
inline void TestPackedTypes::add_packed_fixed64(uint64_t value) {
  _internal_add_packed_fixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestPackedTypes::_internal_packed_fixed64() const {
  return packed_fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestPackedTypes::packed_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_fixed64)
  return _internal_packed_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestPackedTypes::_internal_mutable_packed_fixed64() {
  return &packed_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestPackedTypes::mutable_packed_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_fixed64)
  return _internal_mutable_packed_fixed64();
}

// repeated sfixed32 packed_sfixed32 = 98 [packed = true];
inline int TestPackedTypes::_internal_packed_sfixed32_size() const {
  return packed_sfixed32_.size();
}
inline int TestPackedTypes::packed_sfixed32_size() const {
  return _internal_packed_sfixed32_size();
}
inline void TestPackedTypes::clear_packed_sfixed32() {
  packed_sfixed32_.Clear();
}
inline int32_t TestPackedTypes::_internal_packed_sfixed32(int index) const {
  return packed_sfixed32_.Get(index);
}
inline int32_t TestPackedTypes::packed_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_sfixed32)
  return _internal_packed_sfixed32(index);
}
inline void TestPackedTypes::set_packed_sfixed32(int index, int32_t value) {
  packed_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_sfixed32)
}
inline void TestPackedTypes::_internal_add_packed_sfixed32(int32_t value) {
  packed_sfixed32_.Add(value);
}
inline void TestPackedTypes::add_packed_sfixed32(int32_t value) {
  _internal_add_packed_sfixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestPackedTypes::_internal_packed_sfixed32() const {
  return packed_sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestPackedTypes::packed_sfixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_sfixed32)
  return _internal_packed_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestPackedTypes::_internal_mutable_packed_sfixed32() {
  return &packed_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestPackedTypes::mutable_packed_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_sfixed32)
  return _internal_mutable_packed_sfixed32();
}

// repeated sfixed64 packed_sfixed64 = 99 [packed = true];
inline int TestPackedTypes::_internal_packed_sfixed64_size() const {
  return packed_sfixed64_.size();
}
inline int TestPackedTypes::packed_sfixed64_size() const {
  return _internal_packed_sfixed64_size();
}
inline void TestPackedTypes::clear_packed_sfixed64() {
  packed_sfixed64_.Clear();
}
inline int64_t TestPackedTypes::_internal_packed_sfixed64(int index) const {
  return packed_sfixed64_.Get(index);
}
inline int64_t TestPackedTypes::packed_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_sfixed64)
  return _internal_packed_sfixed64(index);
}
inline void TestPackedTypes::set_packed_sfixed64(int index, int64_t value) {
  packed_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_sfixed64)
}
inline void TestPackedTypes::_internal_add_packed_sfixed64(int64_t value) {
  packed_sfixed64_.Add(value);
}
inline void TestPackedTypes::add_packed_sfixed64(int64_t value) {
  _internal_add_packed_sfixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestPackedTypes::_internal_packed_sfixed64() const {
  return packed_sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestPackedTypes::packed_sfixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_sfixed64)
  return _internal_packed_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestPackedTypes::_internal_mutable_packed_sfixed64() {
  return &packed_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestPackedTypes::mutable_packed_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_sfixed64)
  return _internal_mutable_packed_sfixed64();
}

// repeated float packed_float = 100 [packed = true];
inline int TestPackedTypes::_internal_packed_float_size() const {
  return packed_float_.size();
}
inline int TestPackedTypes::packed_float_size() const {
  return _internal_packed_float_size();
}
inline void TestPackedTypes::clear_packed_float() {
  packed_float_.Clear();
}
inline float TestPackedTypes::_internal_packed_float(int index) const {
  return packed_float_.Get(index);
}
inline float TestPackedTypes::packed_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_float)
  return _internal_packed_float(index);
}
inline void TestPackedTypes::set_packed_float(int index, float value) {
  packed_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_float)
}
inline void TestPackedTypes::_internal_add_packed_float(float value) {
  packed_float_.Add(value);
}
inline void TestPackedTypes::add_packed_float(float value) {
  _internal_add_packed_float(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestPackedTypes::_internal_packed_float() const {
  return packed_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestPackedTypes::packed_float() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_float)
  return _internal_packed_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestPackedTypes::_internal_mutable_packed_float() {
  return &packed_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestPackedTypes::mutable_packed_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_float)
  return _internal_mutable_packed_float();
}

// repeated double packed_double = 101 [packed = true];
inline int TestPackedTypes::_internal_packed_double_size() const {
  return packed_double_.size();
}
inline int TestPackedTypes::packed_double_size() const {
  return _internal_packed_double_size();
}
inline void TestPackedTypes::clear_packed_double() {
  packed_double_.Clear();
}
inline double TestPackedTypes::_internal_packed_double(int index) const {
  return packed_double_.Get(index);
}
inline double TestPackedTypes::packed_double(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_double)
  return _internal_packed_double(index);
}
inline void TestPackedTypes::set_packed_double(int index, double value) {
  packed_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_double)
}
inline void TestPackedTypes::_internal_add_packed_double(double value) {
  packed_double_.Add(value);
}
inline void TestPackedTypes::add_packed_double(double value) {
  _internal_add_packed_double(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestPackedTypes::_internal_packed_double() const {
  return packed_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestPackedTypes::packed_double() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_double)
  return _internal_packed_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestPackedTypes::_internal_mutable_packed_double() {
  return &packed_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestPackedTypes::mutable_packed_double() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_double)
  return _internal_mutable_packed_double();
}

// repeated bool packed_bool = 102 [packed = true];
inline int TestPackedTypes::_internal_packed_bool_size() const {
  return packed_bool_.size();
}
inline int TestPackedTypes::packed_bool_size() const {
  return _internal_packed_bool_size();
}
inline void TestPackedTypes::clear_packed_bool() {
  packed_bool_.Clear();
}
inline bool TestPackedTypes::_internal_packed_bool(int index) const {
  return packed_bool_.Get(index);
}
inline bool TestPackedTypes::packed_bool(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_bool)
  return _internal_packed_bool(index);
}
inline void TestPackedTypes::set_packed_bool(int index, bool value) {
  packed_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_bool)
}
inline void TestPackedTypes::_internal_add_packed_bool(bool value) {
  packed_bool_.Add(value);
}
inline void TestPackedTypes::add_packed_bool(bool value) {
  _internal_add_packed_bool(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestPackedTypes::_internal_packed_bool() const {
  return packed_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestPackedTypes::packed_bool() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_bool)
  return _internal_packed_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestPackedTypes::_internal_mutable_packed_bool() {
  return &packed_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestPackedTypes::mutable_packed_bool() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_bool)
  return _internal_mutable_packed_bool();
}

// repeated .protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
inline int TestPackedTypes::_internal_packed_enum_size() const {
  return packed_enum_.size();
}
inline int TestPackedTypes::packed_enum_size() const {
  return _internal_packed_enum_size();
}
inline void TestPackedTypes::clear_packed_enum() {
  packed_enum_.Clear();
}
inline ::protobuf_unittest::ForeignEnum TestPackedTypes::_internal_packed_enum(int index) const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(packed_enum_.Get(index));
}
inline ::protobuf_unittest::ForeignEnum TestPackedTypes::packed_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypes.packed_enum)
  return _internal_packed_enum(index);
}
inline void TestPackedTypes::set_packed_enum(int index, ::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  packed_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypes.packed_enum)
}
inline void TestPackedTypes::_internal_add_packed_enum(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  packed_enum_.Add(value);
}
inline void TestPackedTypes::add_packed_enum(::protobuf_unittest::ForeignEnum value) {
  _internal_add_packed_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypes.packed_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestPackedTypes::packed_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypes.packed_enum)
  return packed_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestPackedTypes::_internal_mutable_packed_enum() {
  return &packed_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestPackedTypes::mutable_packed_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypes.packed_enum)
  return _internal_mutable_packed_enum();
}

// -------------------------------------------------------------------

// TestUnpackedTypes

// repeated int32 unpacked_int32 = 90 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_int32_size() const {
  return unpacked_int32_.size();
}
inline int TestUnpackedTypes::unpacked_int32_size() const {
  return _internal_unpacked_int32_size();
}
inline void TestUnpackedTypes::clear_unpacked_int32() {
  unpacked_int32_.Clear();
}
inline int32_t TestUnpackedTypes::_internal_unpacked_int32(int index) const {
  return unpacked_int32_.Get(index);
}
inline int32_t TestUnpackedTypes::unpacked_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_int32)
  return _internal_unpacked_int32(index);
}
inline void TestUnpackedTypes::set_unpacked_int32(int index, int32_t value) {
  unpacked_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_int32)
}
inline void TestUnpackedTypes::_internal_add_unpacked_int32(int32_t value) {
  unpacked_int32_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_int32(int32_t value) {
  _internal_add_unpacked_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestUnpackedTypes::_internal_unpacked_int32() const {
  return unpacked_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestUnpackedTypes::unpacked_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_int32)
  return _internal_unpacked_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestUnpackedTypes::_internal_mutable_unpacked_int32() {
  return &unpacked_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestUnpackedTypes::mutable_unpacked_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_int32)
  return _internal_mutable_unpacked_int32();
}

// repeated int64 unpacked_int64 = 91 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_int64_size() const {
  return unpacked_int64_.size();
}
inline int TestUnpackedTypes::unpacked_int64_size() const {
  return _internal_unpacked_int64_size();
}
inline void TestUnpackedTypes::clear_unpacked_int64() {
  unpacked_int64_.Clear();
}
inline int64_t TestUnpackedTypes::_internal_unpacked_int64(int index) const {
  return unpacked_int64_.Get(index);
}
inline int64_t TestUnpackedTypes::unpacked_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_int64)
  return _internal_unpacked_int64(index);
}
inline void TestUnpackedTypes::set_unpacked_int64(int index, int64_t value) {
  unpacked_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_int64)
}
inline void TestUnpackedTypes::_internal_add_unpacked_int64(int64_t value) {
  unpacked_int64_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_int64(int64_t value) {
  _internal_add_unpacked_int64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestUnpackedTypes::_internal_unpacked_int64() const {
  return unpacked_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestUnpackedTypes::unpacked_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_int64)
  return _internal_unpacked_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestUnpackedTypes::_internal_mutable_unpacked_int64() {
  return &unpacked_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestUnpackedTypes::mutable_unpacked_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_int64)
  return _internal_mutable_unpacked_int64();
}

// repeated uint32 unpacked_uint32 = 92 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_uint32_size() const {
  return unpacked_uint32_.size();
}
inline int TestUnpackedTypes::unpacked_uint32_size() const {
  return _internal_unpacked_uint32_size();
}
inline void TestUnpackedTypes::clear_unpacked_uint32() {
  unpacked_uint32_.Clear();
}
inline uint32_t TestUnpackedTypes::_internal_unpacked_uint32(int index) const {
  return unpacked_uint32_.Get(index);
}
inline uint32_t TestUnpackedTypes::unpacked_uint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_uint32)
  return _internal_unpacked_uint32(index);
}
inline void TestUnpackedTypes::set_unpacked_uint32(int index, uint32_t value) {
  unpacked_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_uint32)
}
inline void TestUnpackedTypes::_internal_add_unpacked_uint32(uint32_t value) {
  unpacked_uint32_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_uint32(uint32_t value) {
  _internal_add_unpacked_uint32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestUnpackedTypes::_internal_unpacked_uint32() const {
  return unpacked_uint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestUnpackedTypes::unpacked_uint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_uint32)
  return _internal_unpacked_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestUnpackedTypes::_internal_mutable_unpacked_uint32() {
  return &unpacked_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestUnpackedTypes::mutable_unpacked_uint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_uint32)
  return _internal_mutable_unpacked_uint32();
}

// repeated uint64 unpacked_uint64 = 93 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_uint64_size() const {
  return unpacked_uint64_.size();
}
inline int TestUnpackedTypes::unpacked_uint64_size() const {
  return _internal_unpacked_uint64_size();
}
inline void TestUnpackedTypes::clear_unpacked_uint64() {
  unpacked_uint64_.Clear();
}
inline uint64_t TestUnpackedTypes::_internal_unpacked_uint64(int index) const {
  return unpacked_uint64_.Get(index);
}
inline uint64_t TestUnpackedTypes::unpacked_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_uint64)
  return _internal_unpacked_uint64(index);
}
inline void TestUnpackedTypes::set_unpacked_uint64(int index, uint64_t value) {
  unpacked_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_uint64)
}
inline void TestUnpackedTypes::_internal_add_unpacked_uint64(uint64_t value) {
  unpacked_uint64_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_uint64(uint64_t value) {
  _internal_add_unpacked_uint64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestUnpackedTypes::_internal_unpacked_uint64() const {
  return unpacked_uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestUnpackedTypes::unpacked_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_uint64)
  return _internal_unpacked_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestUnpackedTypes::_internal_mutable_unpacked_uint64() {
  return &unpacked_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestUnpackedTypes::mutable_unpacked_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_uint64)
  return _internal_mutable_unpacked_uint64();
}

// repeated sint32 unpacked_sint32 = 94 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_sint32_size() const {
  return unpacked_sint32_.size();
}
inline int TestUnpackedTypes::unpacked_sint32_size() const {
  return _internal_unpacked_sint32_size();
}
inline void TestUnpackedTypes::clear_unpacked_sint32() {
  unpacked_sint32_.Clear();
}
inline int32_t TestUnpackedTypes::_internal_unpacked_sint32(int index) const {
  return unpacked_sint32_.Get(index);
}
inline int32_t TestUnpackedTypes::unpacked_sint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_sint32)
  return _internal_unpacked_sint32(index);
}
inline void TestUnpackedTypes::set_unpacked_sint32(int index, int32_t value) {
  unpacked_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_sint32)
}
inline void TestUnpackedTypes::_internal_add_unpacked_sint32(int32_t value) {
  unpacked_sint32_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_sint32(int32_t value) {
  _internal_add_unpacked_sint32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestUnpackedTypes::_internal_unpacked_sint32() const {
  return unpacked_sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestUnpackedTypes::unpacked_sint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_sint32)
  return _internal_unpacked_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestUnpackedTypes::_internal_mutable_unpacked_sint32() {
  return &unpacked_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestUnpackedTypes::mutable_unpacked_sint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_sint32)
  return _internal_mutable_unpacked_sint32();
}

// repeated sint64 unpacked_sint64 = 95 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_sint64_size() const {
  return unpacked_sint64_.size();
}
inline int TestUnpackedTypes::unpacked_sint64_size() const {
  return _internal_unpacked_sint64_size();
}
inline void TestUnpackedTypes::clear_unpacked_sint64() {
  unpacked_sint64_.Clear();
}
inline int64_t TestUnpackedTypes::_internal_unpacked_sint64(int index) const {
  return unpacked_sint64_.Get(index);
}
inline int64_t TestUnpackedTypes::unpacked_sint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_sint64)
  return _internal_unpacked_sint64(index);
}
inline void TestUnpackedTypes::set_unpacked_sint64(int index, int64_t value) {
  unpacked_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_sint64)
}
inline void TestUnpackedTypes::_internal_add_unpacked_sint64(int64_t value) {
  unpacked_sint64_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_sint64(int64_t value) {
  _internal_add_unpacked_sint64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestUnpackedTypes::_internal_unpacked_sint64() const {
  return unpacked_sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestUnpackedTypes::unpacked_sint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_sint64)
  return _internal_unpacked_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestUnpackedTypes::_internal_mutable_unpacked_sint64() {
  return &unpacked_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestUnpackedTypes::mutable_unpacked_sint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_sint64)
  return _internal_mutable_unpacked_sint64();
}

// repeated fixed32 unpacked_fixed32 = 96 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_fixed32_size() const {
  return unpacked_fixed32_.size();
}
inline int TestUnpackedTypes::unpacked_fixed32_size() const {
  return _internal_unpacked_fixed32_size();
}
inline void TestUnpackedTypes::clear_unpacked_fixed32() {
  unpacked_fixed32_.Clear();
}
inline uint32_t TestUnpackedTypes::_internal_unpacked_fixed32(int index) const {
  return unpacked_fixed32_.Get(index);
}
inline uint32_t TestUnpackedTypes::unpacked_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_fixed32)
  return _internal_unpacked_fixed32(index);
}
inline void TestUnpackedTypes::set_unpacked_fixed32(int index, uint32_t value) {
  unpacked_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_fixed32)
}
inline void TestUnpackedTypes::_internal_add_unpacked_fixed32(uint32_t value) {
  unpacked_fixed32_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_fixed32(uint32_t value) {
  _internal_add_unpacked_fixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestUnpackedTypes::_internal_unpacked_fixed32() const {
  return unpacked_fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestUnpackedTypes::unpacked_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_fixed32)
  return _internal_unpacked_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestUnpackedTypes::_internal_mutable_unpacked_fixed32() {
  return &unpacked_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestUnpackedTypes::mutable_unpacked_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_fixed32)
  return _internal_mutable_unpacked_fixed32();
}

// repeated fixed64 unpacked_fixed64 = 97 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_fixed64_size() const {
  return unpacked_fixed64_.size();
}
inline int TestUnpackedTypes::unpacked_fixed64_size() const {
  return _internal_unpacked_fixed64_size();
}
inline void TestUnpackedTypes::clear_unpacked_fixed64() {
  unpacked_fixed64_.Clear();
}
inline uint64_t TestUnpackedTypes::_internal_unpacked_fixed64(int index) const {
  return unpacked_fixed64_.Get(index);
}
inline uint64_t TestUnpackedTypes::unpacked_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_fixed64)
  return _internal_unpacked_fixed64(index);
}
inline void TestUnpackedTypes::set_unpacked_fixed64(int index, uint64_t value) {
  unpacked_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_fixed64)
}
inline void TestUnpackedTypes::_internal_add_unpacked_fixed64(uint64_t value) {
  unpacked_fixed64_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_fixed64(uint64_t value) {
  _internal_add_unpacked_fixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestUnpackedTypes::_internal_unpacked_fixed64() const {
  return unpacked_fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestUnpackedTypes::unpacked_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_fixed64)
  return _internal_unpacked_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestUnpackedTypes::_internal_mutable_unpacked_fixed64() {
  return &unpacked_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestUnpackedTypes::mutable_unpacked_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_fixed64)
  return _internal_mutable_unpacked_fixed64();
}

// repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_sfixed32_size() const {
  return unpacked_sfixed32_.size();
}
inline int TestUnpackedTypes::unpacked_sfixed32_size() const {
  return _internal_unpacked_sfixed32_size();
}
inline void TestUnpackedTypes::clear_unpacked_sfixed32() {
  unpacked_sfixed32_.Clear();
}
inline int32_t TestUnpackedTypes::_internal_unpacked_sfixed32(int index) const {
  return unpacked_sfixed32_.Get(index);
}
inline int32_t TestUnpackedTypes::unpacked_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed32)
  return _internal_unpacked_sfixed32(index);
}
inline void TestUnpackedTypes::set_unpacked_sfixed32(int index, int32_t value) {
  unpacked_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed32)
}
inline void TestUnpackedTypes::_internal_add_unpacked_sfixed32(int32_t value) {
  unpacked_sfixed32_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_sfixed32(int32_t value) {
  _internal_add_unpacked_sfixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestUnpackedTypes::_internal_unpacked_sfixed32() const {
  return unpacked_sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestUnpackedTypes::unpacked_sfixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed32)
  return _internal_unpacked_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestUnpackedTypes::_internal_mutable_unpacked_sfixed32() {
  return &unpacked_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestUnpackedTypes::mutable_unpacked_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed32)
  return _internal_mutable_unpacked_sfixed32();
}

// repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_sfixed64_size() const {
  return unpacked_sfixed64_.size();
}
inline int TestUnpackedTypes::unpacked_sfixed64_size() const {
  return _internal_unpacked_sfixed64_size();
}
inline void TestUnpackedTypes::clear_unpacked_sfixed64() {
  unpacked_sfixed64_.Clear();
}
inline int64_t TestUnpackedTypes::_internal_unpacked_sfixed64(int index) const {
  return unpacked_sfixed64_.Get(index);
}
inline int64_t TestUnpackedTypes::unpacked_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed64)
  return _internal_unpacked_sfixed64(index);
}
inline void TestUnpackedTypes::set_unpacked_sfixed64(int index, int64_t value) {
  unpacked_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed64)
}
inline void TestUnpackedTypes::_internal_add_unpacked_sfixed64(int64_t value) {
  unpacked_sfixed64_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_sfixed64(int64_t value) {
  _internal_add_unpacked_sfixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestUnpackedTypes::_internal_unpacked_sfixed64() const {
  return unpacked_sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestUnpackedTypes::unpacked_sfixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed64)
  return _internal_unpacked_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestUnpackedTypes::_internal_mutable_unpacked_sfixed64() {
  return &unpacked_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestUnpackedTypes::mutable_unpacked_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_sfixed64)
  return _internal_mutable_unpacked_sfixed64();
}

// repeated float unpacked_float = 100 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_float_size() const {
  return unpacked_float_.size();
}
inline int TestUnpackedTypes::unpacked_float_size() const {
  return _internal_unpacked_float_size();
}
inline void TestUnpackedTypes::clear_unpacked_float() {
  unpacked_float_.Clear();
}
inline float TestUnpackedTypes::_internal_unpacked_float(int index) const {
  return unpacked_float_.Get(index);
}
inline float TestUnpackedTypes::unpacked_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_float)
  return _internal_unpacked_float(index);
}
inline void TestUnpackedTypes::set_unpacked_float(int index, float value) {
  unpacked_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_float)
}
inline void TestUnpackedTypes::_internal_add_unpacked_float(float value) {
  unpacked_float_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_float(float value) {
  _internal_add_unpacked_float(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestUnpackedTypes::_internal_unpacked_float() const {
  return unpacked_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestUnpackedTypes::unpacked_float() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_float)
  return _internal_unpacked_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestUnpackedTypes::_internal_mutable_unpacked_float() {
  return &unpacked_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestUnpackedTypes::mutable_unpacked_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_float)
  return _internal_mutable_unpacked_float();
}

// repeated double unpacked_double = 101 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_double_size() const {
  return unpacked_double_.size();
}
inline int TestUnpackedTypes::unpacked_double_size() const {
  return _internal_unpacked_double_size();
}
inline void TestUnpackedTypes::clear_unpacked_double() {
  unpacked_double_.Clear();
}
inline double TestUnpackedTypes::_internal_unpacked_double(int index) const {
  return unpacked_double_.Get(index);
}
inline double TestUnpackedTypes::unpacked_double(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_double)
  return _internal_unpacked_double(index);
}
inline void TestUnpackedTypes::set_unpacked_double(int index, double value) {
  unpacked_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_double)
}
inline void TestUnpackedTypes::_internal_add_unpacked_double(double value) {
  unpacked_double_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_double(double value) {
  _internal_add_unpacked_double(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestUnpackedTypes::_internal_unpacked_double() const {
  return unpacked_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestUnpackedTypes::unpacked_double() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_double)
  return _internal_unpacked_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestUnpackedTypes::_internal_mutable_unpacked_double() {
  return &unpacked_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestUnpackedTypes::mutable_unpacked_double() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_double)
  return _internal_mutable_unpacked_double();
}

// repeated bool unpacked_bool = 102 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_bool_size() const {
  return unpacked_bool_.size();
}
inline int TestUnpackedTypes::unpacked_bool_size() const {
  return _internal_unpacked_bool_size();
}
inline void TestUnpackedTypes::clear_unpacked_bool() {
  unpacked_bool_.Clear();
}
inline bool TestUnpackedTypes::_internal_unpacked_bool(int index) const {
  return unpacked_bool_.Get(index);
}
inline bool TestUnpackedTypes::unpacked_bool(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_bool)
  return _internal_unpacked_bool(index);
}
inline void TestUnpackedTypes::set_unpacked_bool(int index, bool value) {
  unpacked_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_bool)
}
inline void TestUnpackedTypes::_internal_add_unpacked_bool(bool value) {
  unpacked_bool_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_bool(bool value) {
  _internal_add_unpacked_bool(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestUnpackedTypes::_internal_unpacked_bool() const {
  return unpacked_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestUnpackedTypes::unpacked_bool() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_bool)
  return _internal_unpacked_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestUnpackedTypes::_internal_mutable_unpacked_bool() {
  return &unpacked_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestUnpackedTypes::mutable_unpacked_bool() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_bool)
  return _internal_mutable_unpacked_bool();
}

// repeated .protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
inline int TestUnpackedTypes::_internal_unpacked_enum_size() const {
  return unpacked_enum_.size();
}
inline int TestUnpackedTypes::unpacked_enum_size() const {
  return _internal_unpacked_enum_size();
}
inline void TestUnpackedTypes::clear_unpacked_enum() {
  unpacked_enum_.Clear();
}
inline ::protobuf_unittest::ForeignEnum TestUnpackedTypes::_internal_unpacked_enum(int index) const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(unpacked_enum_.Get(index));
}
inline ::protobuf_unittest::ForeignEnum TestUnpackedTypes::unpacked_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestUnpackedTypes.unpacked_enum)
  return _internal_unpacked_enum(index);
}
inline void TestUnpackedTypes::set_unpacked_enum(int index, ::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  unpacked_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestUnpackedTypes.unpacked_enum)
}
inline void TestUnpackedTypes::_internal_add_unpacked_enum(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  unpacked_enum_.Add(value);
}
inline void TestUnpackedTypes::add_unpacked_enum(::protobuf_unittest::ForeignEnum value) {
  _internal_add_unpacked_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestUnpackedTypes.unpacked_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestUnpackedTypes::unpacked_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestUnpackedTypes.unpacked_enum)
  return unpacked_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestUnpackedTypes::_internal_mutable_unpacked_enum() {
  return &unpacked_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestUnpackedTypes::mutable_unpacked_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestUnpackedTypes.unpacked_enum)
  return _internal_mutable_unpacked_enum();
}

// -------------------------------------------------------------------

// TestPackedExtensions

// -------------------------------------------------------------------

// TestUnpackedExtensions

// -------------------------------------------------------------------

// TestDynamicExtensions_DynamicMessageType

// optional int32 dynamic_field = 2100;
inline bool TestDynamicExtensions_DynamicMessageType::_internal_has_dynamic_field() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestDynamicExtensions_DynamicMessageType::has_dynamic_field() const {
  return _internal_has_dynamic_field();
}
inline void TestDynamicExtensions_DynamicMessageType::clear_dynamic_field() {
  dynamic_field_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestDynamicExtensions_DynamicMessageType::_internal_dynamic_field() const {
  return dynamic_field_;
}
inline int32_t TestDynamicExtensions_DynamicMessageType::dynamic_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDynamicExtensions.DynamicMessageType.dynamic_field)
  return _internal_dynamic_field();
}
inline void TestDynamicExtensions_DynamicMessageType::_internal_set_dynamic_field(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  dynamic_field_ = value;
}
inline void TestDynamicExtensions_DynamicMessageType::set_dynamic_field(int32_t value) {
  _internal_set_dynamic_field(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDynamicExtensions.DynamicMessageType.dynamic_field)
}

// -------------------------------------------------------------------

// TestDynamicExtensions

// optional fixed32 scalar_extension = 2000;
inline bool TestDynamicExtensions::_internal_has_scalar_extension() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestDynamicExtensions::has_scalar_extension() const {
  return _internal_has_scalar_extension();
}
inline void TestDynamicExtensions::clear_scalar_extension() {
  scalar_extension_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TestDynamicExtensions::_internal_scalar_extension() const {
  return scalar_extension_;
}
inline uint32_t TestDynamicExtensions::scalar_extension() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDynamicExtensions.scalar_extension)
  return _internal_scalar_extension();
}
inline void TestDynamicExtensions::_internal_set_scalar_extension(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  scalar_extension_ = value;
}
inline void TestDynamicExtensions::set_scalar_extension(uint32_t value) {
  _internal_set_scalar_extension(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDynamicExtensions.scalar_extension)
}

// optional .protobuf_unittest.ForeignEnum enum_extension = 2001;
inline bool TestDynamicExtensions::_internal_has_enum_extension() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestDynamicExtensions::has_enum_extension() const {
  return _internal_has_enum_extension();
}
inline void TestDynamicExtensions::clear_enum_extension() {
  enum_extension_ = 4;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::protobuf_unittest::ForeignEnum TestDynamicExtensions::_internal_enum_extension() const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(enum_extension_);
}
inline ::protobuf_unittest::ForeignEnum TestDynamicExtensions::enum_extension() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDynamicExtensions.enum_extension)
  return _internal_enum_extension();
}
inline void TestDynamicExtensions::_internal_set_enum_extension(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  enum_extension_ = value;
}
inline void TestDynamicExtensions::set_enum_extension(::protobuf_unittest::ForeignEnum value) {
  _internal_set_enum_extension(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDynamicExtensions.enum_extension)
}

// optional .protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
inline bool TestDynamicExtensions::_internal_has_dynamic_enum_extension() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestDynamicExtensions::has_dynamic_enum_extension() const {
  return _internal_has_dynamic_enum_extension();
}
inline void TestDynamicExtensions::clear_dynamic_enum_extension() {
  dynamic_enum_extension_ = 2200;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::protobuf_unittest::TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::_internal_dynamic_enum_extension() const {
  return static_cast< ::protobuf_unittest::TestDynamicExtensions_DynamicEnumType >(dynamic_enum_extension_);
}
inline ::protobuf_unittest::TestDynamicExtensions_DynamicEnumType TestDynamicExtensions::dynamic_enum_extension() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDynamicExtensions.dynamic_enum_extension)
  return _internal_dynamic_enum_extension();
}
inline void TestDynamicExtensions::_internal_set_dynamic_enum_extension(::protobuf_unittest::TestDynamicExtensions_DynamicEnumType value) {
  assert(::protobuf_unittest::TestDynamicExtensions_DynamicEnumType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dynamic_enum_extension_ = value;
}
inline void TestDynamicExtensions::set_dynamic_enum_extension(::protobuf_unittest::TestDynamicExtensions_DynamicEnumType value) {
  _internal_set_dynamic_enum_extension(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDynamicExtensions.dynamic_enum_extension)
}

// optional .protobuf_unittest.ForeignMessage message_extension = 2003;
inline bool TestDynamicExtensions::_internal_has_message_extension() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_extension_ != nullptr);
  return value;
}
inline bool TestDynamicExtensions::has_message_extension() const {
  return _internal_has_message_extension();
}
inline void TestDynamicExtensions::clear_message_extension() {
  if (message_extension_ != nullptr) message_extension_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::ForeignMessage& TestDynamicExtensions::_internal_message_extension() const {
  const ::protobuf_unittest::ForeignMessage* p = message_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::ForeignMessage&>(
      ::protobuf_unittest::_ForeignMessage_default_instance_);
}
inline const ::protobuf_unittest::ForeignMessage& TestDynamicExtensions::message_extension() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDynamicExtensions.message_extension)
  return _internal_message_extension();
}
inline void TestDynamicExtensions::unsafe_arena_set_allocated_message_extension(
    ::protobuf_unittest::ForeignMessage* message_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_extension_);
  }
  message_extension_ = message_extension;
  if (message_extension) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDynamicExtensions.message_extension)
}
inline ::protobuf_unittest::ForeignMessage* TestDynamicExtensions::release_message_extension() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::ForeignMessage* temp = message_extension_;
  message_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestDynamicExtensions::unsafe_arena_release_message_extension() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestDynamicExtensions.message_extension)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::ForeignMessage* temp = message_extension_;
  message_extension_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestDynamicExtensions::_internal_mutable_message_extension() {
  _has_bits_[0] |= 0x00000001u;
  if (message_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::ForeignMessage>(GetArenaForAllocation());
    message_extension_ = p;
  }
  return message_extension_;
}
inline ::protobuf_unittest::ForeignMessage* TestDynamicExtensions::mutable_message_extension() {
  ::protobuf_unittest::ForeignMessage* _msg = _internal_mutable_message_extension();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDynamicExtensions.message_extension)
  return _msg;
}
inline void TestDynamicExtensions::set_allocated_message_extension(::protobuf_unittest::ForeignMessage* message_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_extension_;
  }
  if (message_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message_extension);
    if (message_arena != submessage_arena) {
      message_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_extension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_extension_ = message_extension;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestDynamicExtensions.message_extension)
}

// optional .protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
inline bool TestDynamicExtensions::_internal_has_dynamic_message_extension() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dynamic_message_extension_ != nullptr);
  return value;
}
inline bool TestDynamicExtensions::has_dynamic_message_extension() const {
  return _internal_has_dynamic_message_extension();
}
inline void TestDynamicExtensions::clear_dynamic_message_extension() {
  if (dynamic_message_extension_ != nullptr) dynamic_message_extension_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType& TestDynamicExtensions::_internal_dynamic_message_extension() const {
  const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* p = dynamic_message_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType&>(
      ::protobuf_unittest::_TestDynamicExtensions_DynamicMessageType_default_instance_);
}
inline const ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType& TestDynamicExtensions::dynamic_message_extension() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDynamicExtensions.dynamic_message_extension)
  return _internal_dynamic_message_extension();
}
inline void TestDynamicExtensions::unsafe_arena_set_allocated_dynamic_message_extension(
    ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* dynamic_message_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamic_message_extension_);
  }
  dynamic_message_extension_ = dynamic_message_extension;
  if (dynamic_message_extension) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestDynamicExtensions.dynamic_message_extension)
}
inline ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* TestDynamicExtensions::release_dynamic_message_extension() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* temp = dynamic_message_extension_;
  dynamic_message_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* TestDynamicExtensions::unsafe_arena_release_dynamic_message_extension() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestDynamicExtensions.dynamic_message_extension)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* temp = dynamic_message_extension_;
  dynamic_message_extension_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* TestDynamicExtensions::_internal_mutable_dynamic_message_extension() {
  _has_bits_[0] |= 0x00000002u;
  if (dynamic_message_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestDynamicExtensions_DynamicMessageType>(GetArenaForAllocation());
    dynamic_message_extension_ = p;
  }
  return dynamic_message_extension_;
}
inline ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* TestDynamicExtensions::mutable_dynamic_message_extension() {
  ::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* _msg = _internal_mutable_dynamic_message_extension();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDynamicExtensions.dynamic_message_extension)
  return _msg;
}
inline void TestDynamicExtensions::set_allocated_dynamic_message_extension(::protobuf_unittest::TestDynamicExtensions_DynamicMessageType* dynamic_message_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dynamic_message_extension_;
  }
  if (dynamic_message_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dynamic_message_extension);
    if (message_arena != submessage_arena) {
      dynamic_message_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_message_extension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dynamic_message_extension_ = dynamic_message_extension;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestDynamicExtensions.dynamic_message_extension)
}

// repeated string repeated_extension = 2005;
inline int TestDynamicExtensions::_internal_repeated_extension_size() const {
  return repeated_extension_.size();
}
inline int TestDynamicExtensions::repeated_extension_size() const {
  return _internal_repeated_extension_size();
}
inline void TestDynamicExtensions::clear_repeated_extension() {
  repeated_extension_.Clear();
}
inline std::string* TestDynamicExtensions::add_repeated_extension() {
  std::string* _s = _internal_add_repeated_extension();
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestDynamicExtensions.repeated_extension)
  return _s;
}
inline const std::string& TestDynamicExtensions::_internal_repeated_extension(int index) const {
  return repeated_extension_.Get(index);
}
inline const std::string& TestDynamicExtensions::repeated_extension(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDynamicExtensions.repeated_extension)
  return _internal_repeated_extension(index);
}
inline std::string* TestDynamicExtensions::mutable_repeated_extension(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestDynamicExtensions.repeated_extension)
  return repeated_extension_.Mutable(index);
}
inline void TestDynamicExtensions::set_repeated_extension(int index, const std::string& value) {
  repeated_extension_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDynamicExtensions.repeated_extension)
}
inline void TestDynamicExtensions::set_repeated_extension(int index, std::string&& value) {
  repeated_extension_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDynamicExtensions.repeated_extension)
}
inline void TestDynamicExtensions::set_repeated_extension(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_extension_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestDynamicExtensions.repeated_extension)
}
inline void TestDynamicExtensions::set_repeated_extension(int index, const char* value, size_t size) {
  repeated_extension_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestDynamicExtensions.repeated_extension)
}
inline std::string* TestDynamicExtensions::_internal_add_repeated_extension() {
  return repeated_extension_.Add();
}
inline void TestDynamicExtensions::add_repeated_extension(const std::string& value) {
  repeated_extension_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDynamicExtensions.repeated_extension)
}
inline void TestDynamicExtensions::add_repeated_extension(std::string&& value) {
  repeated_extension_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDynamicExtensions.repeated_extension)
}
inline void TestDynamicExtensions::add_repeated_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_extension_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestDynamicExtensions.repeated_extension)
}
inline void TestDynamicExtensions::add_repeated_extension(const char* value, size_t size) {
  repeated_extension_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestDynamicExtensions.repeated_extension)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestDynamicExtensions::repeated_extension() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDynamicExtensions.repeated_extension)
  return repeated_extension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestDynamicExtensions::mutable_repeated_extension() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDynamicExtensions.repeated_extension)
  return &repeated_extension_;
}

// repeated sint32 packed_extension = 2006 [packed = true];
inline int TestDynamicExtensions::_internal_packed_extension_size() const {
  return packed_extension_.size();
}
inline int TestDynamicExtensions::packed_extension_size() const {
  return _internal_packed_extension_size();
}
inline void TestDynamicExtensions::clear_packed_extension() {
  packed_extension_.Clear();
}
inline int32_t TestDynamicExtensions::_internal_packed_extension(int index) const {
  return packed_extension_.Get(index);
}
inline int32_t TestDynamicExtensions::packed_extension(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDynamicExtensions.packed_extension)
  return _internal_packed_extension(index);
}
inline void TestDynamicExtensions::set_packed_extension(int index, int32_t value) {
  packed_extension_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDynamicExtensions.packed_extension)
}
inline void TestDynamicExtensions::_internal_add_packed_extension(int32_t value) {
  packed_extension_.Add(value);
}
inline void TestDynamicExtensions::add_packed_extension(int32_t value) {
  _internal_add_packed_extension(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestDynamicExtensions.packed_extension)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestDynamicExtensions::_internal_packed_extension() const {
  return packed_extension_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestDynamicExtensions::packed_extension() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestDynamicExtensions.packed_extension)
  return _internal_packed_extension();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestDynamicExtensions::_internal_mutable_packed_extension() {
  return &packed_extension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestDynamicExtensions::mutable_packed_extension() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestDynamicExtensions.packed_extension)
  return _internal_mutable_packed_extension();
}

// -------------------------------------------------------------------

// TestRepeatedScalarDifferentTagSizes

// repeated fixed32 repeated_fixed32 = 12;
inline int TestRepeatedScalarDifferentTagSizes::_internal_repeated_fixed32_size() const {
  return repeated_fixed32_.size();
}
inline int TestRepeatedScalarDifferentTagSizes::repeated_fixed32_size() const {
  return _internal_repeated_fixed32_size();
}
inline void TestRepeatedScalarDifferentTagSizes::clear_repeated_fixed32() {
  repeated_fixed32_.Clear();
}
inline uint32_t TestRepeatedScalarDifferentTagSizes::_internal_repeated_fixed32(int index) const {
  return repeated_fixed32_.Get(index);
}
inline uint32_t TestRepeatedScalarDifferentTagSizes::repeated_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed32)
  return _internal_repeated_fixed32(index);
}
inline void TestRepeatedScalarDifferentTagSizes::set_repeated_fixed32(int index, uint32_t value) {
  repeated_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed32)
}
inline void TestRepeatedScalarDifferentTagSizes::_internal_add_repeated_fixed32(uint32_t value) {
  repeated_fixed32_.Add(value);
}
inline void TestRepeatedScalarDifferentTagSizes::add_repeated_fixed32(uint32_t value) {
  _internal_add_repeated_fixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestRepeatedScalarDifferentTagSizes::_internal_repeated_fixed32() const {
  return repeated_fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestRepeatedScalarDifferentTagSizes::repeated_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed32)
  return _internal_repeated_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestRepeatedScalarDifferentTagSizes::_internal_mutable_repeated_fixed32() {
  return &repeated_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestRepeatedScalarDifferentTagSizes::mutable_repeated_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed32)
  return _internal_mutable_repeated_fixed32();
}

// repeated int32 repeated_int32 = 13;
inline int TestRepeatedScalarDifferentTagSizes::_internal_repeated_int32_size() const {
  return repeated_int32_.size();
}
inline int TestRepeatedScalarDifferentTagSizes::repeated_int32_size() const {
  return _internal_repeated_int32_size();
}
inline void TestRepeatedScalarDifferentTagSizes::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline int32_t TestRepeatedScalarDifferentTagSizes::_internal_repeated_int32(int index) const {
  return repeated_int32_.Get(index);
}
inline int32_t TestRepeatedScalarDifferentTagSizes::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int32)
  return _internal_repeated_int32(index);
}
inline void TestRepeatedScalarDifferentTagSizes::set_repeated_int32(int index, int32_t value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int32)
}
inline void TestRepeatedScalarDifferentTagSizes::_internal_add_repeated_int32(int32_t value) {
  repeated_int32_.Add(value);
}
inline void TestRepeatedScalarDifferentTagSizes::add_repeated_int32(int32_t value) {
  _internal_add_repeated_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestRepeatedScalarDifferentTagSizes::_internal_repeated_int32() const {
  return repeated_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestRepeatedScalarDifferentTagSizes::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int32)
  return _internal_repeated_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestRepeatedScalarDifferentTagSizes::_internal_mutable_repeated_int32() {
  return &repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestRepeatedScalarDifferentTagSizes::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int32)
  return _internal_mutable_repeated_int32();
}

// repeated fixed64 repeated_fixed64 = 2046;
inline int TestRepeatedScalarDifferentTagSizes::_internal_repeated_fixed64_size() const {
  return repeated_fixed64_.size();
}
inline int TestRepeatedScalarDifferentTagSizes::repeated_fixed64_size() const {
  return _internal_repeated_fixed64_size();
}
inline void TestRepeatedScalarDifferentTagSizes::clear_repeated_fixed64() {
  repeated_fixed64_.Clear();
}
inline uint64_t TestRepeatedScalarDifferentTagSizes::_internal_repeated_fixed64(int index) const {
  return repeated_fixed64_.Get(index);
}
inline uint64_t TestRepeatedScalarDifferentTagSizes::repeated_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed64)
  return _internal_repeated_fixed64(index);
}
inline void TestRepeatedScalarDifferentTagSizes::set_repeated_fixed64(int index, uint64_t value) {
  repeated_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed64)
}
inline void TestRepeatedScalarDifferentTagSizes::_internal_add_repeated_fixed64(uint64_t value) {
  repeated_fixed64_.Add(value);
}
inline void TestRepeatedScalarDifferentTagSizes::add_repeated_fixed64(uint64_t value) {
  _internal_add_repeated_fixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestRepeatedScalarDifferentTagSizes::_internal_repeated_fixed64() const {
  return repeated_fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestRepeatedScalarDifferentTagSizes::repeated_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed64)
  return _internal_repeated_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestRepeatedScalarDifferentTagSizes::_internal_mutable_repeated_fixed64() {
  return &repeated_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestRepeatedScalarDifferentTagSizes::mutable_repeated_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_fixed64)
  return _internal_mutable_repeated_fixed64();
}

// repeated int64 repeated_int64 = 2047;
inline int TestRepeatedScalarDifferentTagSizes::_internal_repeated_int64_size() const {
  return repeated_int64_.size();
}
inline int TestRepeatedScalarDifferentTagSizes::repeated_int64_size() const {
  return _internal_repeated_int64_size();
}
inline void TestRepeatedScalarDifferentTagSizes::clear_repeated_int64() {
  repeated_int64_.Clear();
}
inline int64_t TestRepeatedScalarDifferentTagSizes::_internal_repeated_int64(int index) const {
  return repeated_int64_.Get(index);
}
inline int64_t TestRepeatedScalarDifferentTagSizes::repeated_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int64)
  return _internal_repeated_int64(index);
}
inline void TestRepeatedScalarDifferentTagSizes::set_repeated_int64(int index, int64_t value) {
  repeated_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int64)
}
inline void TestRepeatedScalarDifferentTagSizes::_internal_add_repeated_int64(int64_t value) {
  repeated_int64_.Add(value);
}
inline void TestRepeatedScalarDifferentTagSizes::add_repeated_int64(int64_t value) {
  _internal_add_repeated_int64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestRepeatedScalarDifferentTagSizes::_internal_repeated_int64() const {
  return repeated_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestRepeatedScalarDifferentTagSizes::repeated_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int64)
  return _internal_repeated_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestRepeatedScalarDifferentTagSizes::_internal_mutable_repeated_int64() {
  return &repeated_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestRepeatedScalarDifferentTagSizes::mutable_repeated_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_int64)
  return _internal_mutable_repeated_int64();
}

// repeated float repeated_float = 262142;
inline int TestRepeatedScalarDifferentTagSizes::_internal_repeated_float_size() const {
  return repeated_float_.size();
}
inline int TestRepeatedScalarDifferentTagSizes::repeated_float_size() const {
  return _internal_repeated_float_size();
}
inline void TestRepeatedScalarDifferentTagSizes::clear_repeated_float() {
  repeated_float_.Clear();
}
inline float TestRepeatedScalarDifferentTagSizes::_internal_repeated_float(int index) const {
  return repeated_float_.Get(index);
}
inline float TestRepeatedScalarDifferentTagSizes::repeated_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_float)
  return _internal_repeated_float(index);
}
inline void TestRepeatedScalarDifferentTagSizes::set_repeated_float(int index, float value) {
  repeated_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_float)
}
inline void TestRepeatedScalarDifferentTagSizes::_internal_add_repeated_float(float value) {
  repeated_float_.Add(value);
}
inline void TestRepeatedScalarDifferentTagSizes::add_repeated_float(float value) {
  _internal_add_repeated_float(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestRepeatedScalarDifferentTagSizes::_internal_repeated_float() const {
  return repeated_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestRepeatedScalarDifferentTagSizes::repeated_float() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_float)
  return _internal_repeated_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestRepeatedScalarDifferentTagSizes::_internal_mutable_repeated_float() {
  return &repeated_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestRepeatedScalarDifferentTagSizes::mutable_repeated_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_float)
  return _internal_mutable_repeated_float();
}

// repeated uint64 repeated_uint64 = 262143;
inline int TestRepeatedScalarDifferentTagSizes::_internal_repeated_uint64_size() const {
  return repeated_uint64_.size();
}
inline int TestRepeatedScalarDifferentTagSizes::repeated_uint64_size() const {
  return _internal_repeated_uint64_size();
}
inline void TestRepeatedScalarDifferentTagSizes::clear_repeated_uint64() {
  repeated_uint64_.Clear();
}
inline uint64_t TestRepeatedScalarDifferentTagSizes::_internal_repeated_uint64(int index) const {
  return repeated_uint64_.Get(index);
}
inline uint64_t TestRepeatedScalarDifferentTagSizes::repeated_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_uint64)
  return _internal_repeated_uint64(index);
}
inline void TestRepeatedScalarDifferentTagSizes::set_repeated_uint64(int index, uint64_t value) {
  repeated_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_uint64)
}
inline void TestRepeatedScalarDifferentTagSizes::_internal_add_repeated_uint64(uint64_t value) {
  repeated_uint64_.Add(value);
}
inline void TestRepeatedScalarDifferentTagSizes::add_repeated_uint64(uint64_t value) {
  _internal_add_repeated_uint64(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestRepeatedScalarDifferentTagSizes::_internal_repeated_uint64() const {
  return repeated_uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestRepeatedScalarDifferentTagSizes::repeated_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_uint64)
  return _internal_repeated_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestRepeatedScalarDifferentTagSizes::_internal_mutable_repeated_uint64() {
  return &repeated_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestRepeatedScalarDifferentTagSizes::mutable_repeated_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestRepeatedScalarDifferentTagSizes.repeated_uint64)
  return _internal_mutable_repeated_uint64();
}

// -------------------------------------------------------------------

// TestParsingMerge_RepeatedFieldsGenerator_Group1

// optional .protobuf_unittest.TestAllTypes field1 = 11;
inline bool TestParsingMerge_RepeatedFieldsGenerator_Group1::_internal_has_field1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || field1_ != nullptr);
  return value;
}
inline bool TestParsingMerge_RepeatedFieldsGenerator_Group1::has_field1() const {
  return _internal_has_field1();
}
inline void TestParsingMerge_RepeatedFieldsGenerator_Group1::clear_field1() {
  if (field1_ != nullptr) field1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator_Group1::_internal_field1() const {
  const ::protobuf_unittest::TestAllTypes* p = field1_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator_Group1::field1() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.field1)
  return _internal_field1();
}
inline void TestParsingMerge_RepeatedFieldsGenerator_Group1::unsafe_arena_set_allocated_field1(
    ::protobuf_unittest::TestAllTypes* field1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field1_);
  }
  field1_ = field1;
  if (field1) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.field1)
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator_Group1::release_field1() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = field1_;
  field1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator_Group1::unsafe_arena_release_field1() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.field1)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = field1_;
  field1_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator_Group1::_internal_mutable_field1() {
  _has_bits_[0] |= 0x00000001u;
  if (field1_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    field1_ = p;
  }
  return field1_;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator_Group1::mutable_field1() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_field1();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.field1)
  return _msg;
}
inline void TestParsingMerge_RepeatedFieldsGenerator_Group1::set_allocated_field1(::protobuf_unittest::TestAllTypes* field1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete field1_;
  }
  if (field1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(field1);
    if (message_arena != submessage_arena) {
      field1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field1_ = field1;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.field1)
}

// -------------------------------------------------------------------

// TestParsingMerge_RepeatedFieldsGenerator_Group2

// optional .protobuf_unittest.TestAllTypes field1 = 21;
inline bool TestParsingMerge_RepeatedFieldsGenerator_Group2::_internal_has_field1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || field1_ != nullptr);
  return value;
}
inline bool TestParsingMerge_RepeatedFieldsGenerator_Group2::has_field1() const {
  return _internal_has_field1();
}
inline void TestParsingMerge_RepeatedFieldsGenerator_Group2::clear_field1() {
  if (field1_ != nullptr) field1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator_Group2::_internal_field1() const {
  const ::protobuf_unittest::TestAllTypes* p = field1_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator_Group2::field1() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.field1)
  return _internal_field1();
}
inline void TestParsingMerge_RepeatedFieldsGenerator_Group2::unsafe_arena_set_allocated_field1(
    ::protobuf_unittest::TestAllTypes* field1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field1_);
  }
  field1_ = field1;
  if (field1) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.field1)
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator_Group2::release_field1() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = field1_;
  field1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator_Group2::unsafe_arena_release_field1() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.field1)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = field1_;
  field1_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator_Group2::_internal_mutable_field1() {
  _has_bits_[0] |= 0x00000001u;
  if (field1_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    field1_ = p;
  }
  return field1_;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator_Group2::mutable_field1() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_field1();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.field1)
  return _msg;
}
inline void TestParsingMerge_RepeatedFieldsGenerator_Group2::set_allocated_field1(::protobuf_unittest::TestAllTypes* field1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete field1_;
  }
  if (field1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(field1);
    if (message_arena != submessage_arena) {
      field1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field1_ = field1;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.field1)
}

// -------------------------------------------------------------------

// TestParsingMerge_RepeatedFieldsGenerator

// repeated .protobuf_unittest.TestAllTypes field1 = 1;
inline int TestParsingMerge_RepeatedFieldsGenerator::_internal_field1_size() const {
  return field1_.size();
}
inline int TestParsingMerge_RepeatedFieldsGenerator::field1_size() const {
  return _internal_field1_size();
}
inline void TestParsingMerge_RepeatedFieldsGenerator::clear_field1() {
  field1_.Clear();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::mutable_field1(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field1)
  return field1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
TestParsingMerge_RepeatedFieldsGenerator::mutable_field1() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field1)
  return &field1_;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::_internal_field1(int index) const {
  return field1_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::field1(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field1)
  return _internal_field1(index);
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::_internal_add_field1() {
  return field1_.Add();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::add_field1() {
  ::protobuf_unittest::TestAllTypes* _add = _internal_add_field1();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field1)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
TestParsingMerge_RepeatedFieldsGenerator::field1() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field1)
  return field1_;
}

// repeated .protobuf_unittest.TestAllTypes field2 = 2;
inline int TestParsingMerge_RepeatedFieldsGenerator::_internal_field2_size() const {
  return field2_.size();
}
inline int TestParsingMerge_RepeatedFieldsGenerator::field2_size() const {
  return _internal_field2_size();
}
inline void TestParsingMerge_RepeatedFieldsGenerator::clear_field2() {
  field2_.Clear();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::mutable_field2(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field2)
  return field2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
TestParsingMerge_RepeatedFieldsGenerator::mutable_field2() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field2)
  return &field2_;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::_internal_field2(int index) const {
  return field2_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::field2(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field2)
  return _internal_field2(index);
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::_internal_add_field2() {
  return field2_.Add();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::add_field2() {
  ::protobuf_unittest::TestAllTypes* _add = _internal_add_field2();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field2)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
TestParsingMerge_RepeatedFieldsGenerator::field2() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field2)
  return field2_;
}

// repeated .protobuf_unittest.TestAllTypes field3 = 3;
inline int TestParsingMerge_RepeatedFieldsGenerator::_internal_field3_size() const {
  return field3_.size();
}
inline int TestParsingMerge_RepeatedFieldsGenerator::field3_size() const {
  return _internal_field3_size();
}
inline void TestParsingMerge_RepeatedFieldsGenerator::clear_field3() {
  field3_.Clear();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::mutable_field3(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field3)
  return field3_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
TestParsingMerge_RepeatedFieldsGenerator::mutable_field3() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field3)
  return &field3_;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::_internal_field3(int index) const {
  return field3_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::field3(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field3)
  return _internal_field3(index);
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::_internal_add_field3() {
  return field3_.Add();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::add_field3() {
  ::protobuf_unittest::TestAllTypes* _add = _internal_add_field3();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field3)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
TestParsingMerge_RepeatedFieldsGenerator::field3() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.field3)
  return field3_;
}

// repeated group Group1 = 10 { ... };
inline int TestParsingMerge_RepeatedFieldsGenerator::_internal_group1_size() const {
  return group1_.size();
}
inline int TestParsingMerge_RepeatedFieldsGenerator::group1_size() const {
  return _internal_group1_size();
}
inline void TestParsingMerge_RepeatedFieldsGenerator::clear_group1() {
  group1_.Clear();
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* TestParsingMerge_RepeatedFieldsGenerator::mutable_group1(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group1)
  return group1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 >*
TestParsingMerge_RepeatedFieldsGenerator::mutable_group1() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group1)
  return &group1_;
}
inline const ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1& TestParsingMerge_RepeatedFieldsGenerator::_internal_group1(int index) const {
  return group1_.Get(index);
}
inline const ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1& TestParsingMerge_RepeatedFieldsGenerator::group1(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group1)
  return _internal_group1(index);
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* TestParsingMerge_RepeatedFieldsGenerator::_internal_add_group1() {
  return group1_.Add();
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* TestParsingMerge_RepeatedFieldsGenerator::add_group1() {
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1* _add = _internal_add_group1();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group1)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group1 >&
TestParsingMerge_RepeatedFieldsGenerator::group1() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group1)
  return group1_;
}

// repeated group Group2 = 20 { ... };
inline int TestParsingMerge_RepeatedFieldsGenerator::_internal_group2_size() const {
  return group2_.size();
}
inline int TestParsingMerge_RepeatedFieldsGenerator::group2_size() const {
  return _internal_group2_size();
}
inline void TestParsingMerge_RepeatedFieldsGenerator::clear_group2() {
  group2_.Clear();
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* TestParsingMerge_RepeatedFieldsGenerator::mutable_group2(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group2)
  return group2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 >*
TestParsingMerge_RepeatedFieldsGenerator::mutable_group2() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group2)
  return &group2_;
}
inline const ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2& TestParsingMerge_RepeatedFieldsGenerator::_internal_group2(int index) const {
  return group2_.Get(index);
}
inline const ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2& TestParsingMerge_RepeatedFieldsGenerator::group2(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group2)
  return _internal_group2(index);
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* TestParsingMerge_RepeatedFieldsGenerator::_internal_add_group2() {
  return group2_.Add();
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* TestParsingMerge_RepeatedFieldsGenerator::add_group2() {
  ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2* _add = _internal_add_group2();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group2)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedFieldsGenerator_Group2 >&
TestParsingMerge_RepeatedFieldsGenerator::group2() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.group2)
  return group2_;
}

// repeated .protobuf_unittest.TestAllTypes ext1 = 1000;
inline int TestParsingMerge_RepeatedFieldsGenerator::_internal_ext1_size() const {
  return ext1_.size();
}
inline int TestParsingMerge_RepeatedFieldsGenerator::ext1_size() const {
  return _internal_ext1_size();
}
inline void TestParsingMerge_RepeatedFieldsGenerator::clear_ext1() {
  ext1_.Clear();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::mutable_ext1(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext1)
  return ext1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
TestParsingMerge_RepeatedFieldsGenerator::mutable_ext1() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext1)
  return &ext1_;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::_internal_ext1(int index) const {
  return ext1_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::ext1(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext1)
  return _internal_ext1(index);
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::_internal_add_ext1() {
  return ext1_.Add();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::add_ext1() {
  ::protobuf_unittest::TestAllTypes* _add = _internal_add_ext1();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext1)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
TestParsingMerge_RepeatedFieldsGenerator::ext1() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext1)
  return ext1_;
}

// repeated .protobuf_unittest.TestAllTypes ext2 = 1001;
inline int TestParsingMerge_RepeatedFieldsGenerator::_internal_ext2_size() const {
  return ext2_.size();
}
inline int TestParsingMerge_RepeatedFieldsGenerator::ext2_size() const {
  return _internal_ext2_size();
}
inline void TestParsingMerge_RepeatedFieldsGenerator::clear_ext2() {
  ext2_.Clear();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::mutable_ext2(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext2)
  return ext2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
TestParsingMerge_RepeatedFieldsGenerator::mutable_ext2() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext2)
  return &ext2_;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::_internal_ext2(int index) const {
  return ext2_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedFieldsGenerator::ext2(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext2)
  return _internal_ext2(index);
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::_internal_add_ext2() {
  return ext2_.Add();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedFieldsGenerator::add_ext2() {
  ::protobuf_unittest::TestAllTypes* _add = _internal_add_ext2();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext2)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
TestParsingMerge_RepeatedFieldsGenerator::ext2() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.ext2)
  return ext2_;
}

// -------------------------------------------------------------------

// TestParsingMerge_OptionalGroup

// optional .protobuf_unittest.TestAllTypes optional_group_all_types = 11;
inline bool TestParsingMerge_OptionalGroup::_internal_has_optional_group_all_types() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || optional_group_all_types_ != nullptr);
  return value;
}
inline bool TestParsingMerge_OptionalGroup::has_optional_group_all_types() const {
  return _internal_has_optional_group_all_types();
}
inline void TestParsingMerge_OptionalGroup::clear_optional_group_all_types() {
  if (optional_group_all_types_ != nullptr) optional_group_all_types_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_OptionalGroup::_internal_optional_group_all_types() const {
  const ::protobuf_unittest::TestAllTypes* p = optional_group_all_types_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_OptionalGroup::optional_group_all_types() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.OptionalGroup.optional_group_all_types)
  return _internal_optional_group_all_types();
}
inline void TestParsingMerge_OptionalGroup::unsafe_arena_set_allocated_optional_group_all_types(
    ::protobuf_unittest::TestAllTypes* optional_group_all_types) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_group_all_types_);
  }
  optional_group_all_types_ = optional_group_all_types;
  if (optional_group_all_types) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.OptionalGroup.optional_group_all_types)
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_OptionalGroup::release_optional_group_all_types() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = optional_group_all_types_;
  optional_group_all_types_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_OptionalGroup::unsafe_arena_release_optional_group_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMerge.OptionalGroup.optional_group_all_types)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = optional_group_all_types_;
  optional_group_all_types_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_OptionalGroup::_internal_mutable_optional_group_all_types() {
  _has_bits_[0] |= 0x00000001u;
  if (optional_group_all_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    optional_group_all_types_ = p;
  }
  return optional_group_all_types_;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_OptionalGroup::mutable_optional_group_all_types() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_optional_group_all_types();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.OptionalGroup.optional_group_all_types)
  return _msg;
}
inline void TestParsingMerge_OptionalGroup::set_allocated_optional_group_all_types(::protobuf_unittest::TestAllTypes* optional_group_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_group_all_types_;
  }
  if (optional_group_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_group_all_types);
    if (message_arena != submessage_arena) {
      optional_group_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_group_all_types, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_group_all_types_ = optional_group_all_types;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMerge.OptionalGroup.optional_group_all_types)
}

// -------------------------------------------------------------------

// TestParsingMerge_RepeatedGroup

// optional .protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
inline bool TestParsingMerge_RepeatedGroup::_internal_has_repeated_group_all_types() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || repeated_group_all_types_ != nullptr);
  return value;
}
inline bool TestParsingMerge_RepeatedGroup::has_repeated_group_all_types() const {
  return _internal_has_repeated_group_all_types();
}
inline void TestParsingMerge_RepeatedGroup::clear_repeated_group_all_types() {
  if (repeated_group_all_types_ != nullptr) repeated_group_all_types_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedGroup::_internal_repeated_group_all_types() const {
  const ::protobuf_unittest::TestAllTypes* p = repeated_group_all_types_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge_RepeatedGroup::repeated_group_all_types() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.RepeatedGroup.repeated_group_all_types)
  return _internal_repeated_group_all_types();
}
inline void TestParsingMerge_RepeatedGroup::unsafe_arena_set_allocated_repeated_group_all_types(
    ::protobuf_unittest::TestAllTypes* repeated_group_all_types) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(repeated_group_all_types_);
  }
  repeated_group_all_types_ = repeated_group_all_types;
  if (repeated_group_all_types) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedGroup.repeated_group_all_types)
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedGroup::release_repeated_group_all_types() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = repeated_group_all_types_;
  repeated_group_all_types_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedGroup::unsafe_arena_release_repeated_group_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMerge.RepeatedGroup.repeated_group_all_types)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = repeated_group_all_types_;
  repeated_group_all_types_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedGroup::_internal_mutable_repeated_group_all_types() {
  _has_bits_[0] |= 0x00000001u;
  if (repeated_group_all_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    repeated_group_all_types_ = p;
  }
  return repeated_group_all_types_;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge_RepeatedGroup::mutable_repeated_group_all_types() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_repeated_group_all_types();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.RepeatedGroup.repeated_group_all_types)
  return _msg;
}
inline void TestParsingMerge_RepeatedGroup::set_allocated_repeated_group_all_types(::protobuf_unittest::TestAllTypes* repeated_group_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete repeated_group_all_types_;
  }
  if (repeated_group_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(repeated_group_all_types);
    if (message_arena != submessage_arena) {
      repeated_group_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_group_all_types, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  repeated_group_all_types_ = repeated_group_all_types;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMerge.RepeatedGroup.repeated_group_all_types)
}

// -------------------------------------------------------------------

// TestParsingMerge

// required .protobuf_unittest.TestAllTypes required_all_types = 1;
inline bool TestParsingMerge::_internal_has_required_all_types() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || required_all_types_ != nullptr);
  return value;
}
inline bool TestParsingMerge::has_required_all_types() const {
  return _internal_has_required_all_types();
}
inline void TestParsingMerge::clear_required_all_types() {
  if (required_all_types_ != nullptr) required_all_types_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge::_internal_required_all_types() const {
  const ::protobuf_unittest::TestAllTypes* p = required_all_types_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge::required_all_types() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.required_all_types)
  return _internal_required_all_types();
}
inline void TestParsingMerge::unsafe_arena_set_allocated_required_all_types(
    ::protobuf_unittest::TestAllTypes* required_all_types) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(required_all_types_);
  }
  required_all_types_ = required_all_types;
  if (required_all_types) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.required_all_types)
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::release_required_all_types() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = required_all_types_;
  required_all_types_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::unsafe_arena_release_required_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMerge.required_all_types)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypes* temp = required_all_types_;
  required_all_types_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::_internal_mutable_required_all_types() {
  _has_bits_[0] |= 0x00000001u;
  if (required_all_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    required_all_types_ = p;
  }
  return required_all_types_;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::mutable_required_all_types() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_required_all_types();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.required_all_types)
  return _msg;
}
inline void TestParsingMerge::set_allocated_required_all_types(::protobuf_unittest::TestAllTypes* required_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete required_all_types_;
  }
  if (required_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(required_all_types);
    if (message_arena != submessage_arena) {
      required_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, required_all_types, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  required_all_types_ = required_all_types;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMerge.required_all_types)
}

// optional .protobuf_unittest.TestAllTypes optional_all_types = 2;
inline bool TestParsingMerge::_internal_has_optional_all_types() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || optional_all_types_ != nullptr);
  return value;
}
inline bool TestParsingMerge::has_optional_all_types() const {
  return _internal_has_optional_all_types();
}
inline void TestParsingMerge::clear_optional_all_types() {
  if (optional_all_types_ != nullptr) optional_all_types_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge::_internal_optional_all_types() const {
  const ::protobuf_unittest::TestAllTypes* p = optional_all_types_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllTypes&>(
      ::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge::optional_all_types() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.optional_all_types)
  return _internal_optional_all_types();
}
inline void TestParsingMerge::unsafe_arena_set_allocated_optional_all_types(
    ::protobuf_unittest::TestAllTypes* optional_all_types) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_all_types_);
  }
  optional_all_types_ = optional_all_types;
  if (optional_all_types) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.optional_all_types)
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::release_optional_all_types() {
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = optional_all_types_;
  optional_all_types_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::unsafe_arena_release_optional_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMerge.optional_all_types)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypes* temp = optional_all_types_;
  optional_all_types_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::_internal_mutable_optional_all_types() {
  _has_bits_[0] |= 0x00000002u;
  if (optional_all_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypes>(GetArenaForAllocation());
    optional_all_types_ = p;
  }
  return optional_all_types_;
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::mutable_optional_all_types() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_optional_all_types();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.optional_all_types)
  return _msg;
}
inline void TestParsingMerge::set_allocated_optional_all_types(::protobuf_unittest::TestAllTypes* optional_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_all_types_;
  }
  if (optional_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_all_types);
    if (message_arena != submessage_arena) {
      optional_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_all_types, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_all_types_ = optional_all_types;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMerge.optional_all_types)
}

// repeated .protobuf_unittest.TestAllTypes repeated_all_types = 3;
inline int TestParsingMerge::_internal_repeated_all_types_size() const {
  return repeated_all_types_.size();
}
inline int TestParsingMerge::repeated_all_types_size() const {
  return _internal_repeated_all_types_size();
}
inline void TestParsingMerge::clear_repeated_all_types() {
  repeated_all_types_.Clear();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::mutable_repeated_all_types(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.repeated_all_types)
  return repeated_all_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >*
TestParsingMerge::mutable_repeated_all_types() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.repeated_all_types)
  return &repeated_all_types_;
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge::_internal_repeated_all_types(int index) const {
  return repeated_all_types_.Get(index);
}
inline const ::protobuf_unittest::TestAllTypes& TestParsingMerge::repeated_all_types(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.repeated_all_types)
  return _internal_repeated_all_types(index);
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::_internal_add_repeated_all_types() {
  return repeated_all_types_.Add();
}
inline ::protobuf_unittest::TestAllTypes* TestParsingMerge::add_repeated_all_types() {
  ::protobuf_unittest::TestAllTypes* _add = _internal_add_repeated_all_types();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.repeated_all_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypes >&
TestParsingMerge::repeated_all_types() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.repeated_all_types)
  return repeated_all_types_;
}

// optional group OptionalGroup = 10 { ... };
inline bool TestParsingMerge::_internal_has_optionalgroup() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || optionalgroup_ != nullptr);
  return value;
}
inline bool TestParsingMerge::has_optionalgroup() const {
  return _internal_has_optionalgroup();
}
inline void TestParsingMerge::clear_optionalgroup() {
  if (optionalgroup_ != nullptr) optionalgroup_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::TestParsingMerge_OptionalGroup& TestParsingMerge::_internal_optionalgroup() const {
  const ::protobuf_unittest::TestParsingMerge_OptionalGroup* p = optionalgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestParsingMerge_OptionalGroup&>(
      ::protobuf_unittest::_TestParsingMerge_OptionalGroup_default_instance_);
}
inline const ::protobuf_unittest::TestParsingMerge_OptionalGroup& TestParsingMerge::optionalgroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.optionalgroup)
  return _internal_optionalgroup();
}
inline void TestParsingMerge::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_unittest::TestParsingMerge_OptionalGroup* optionalgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalgroup_);
  }
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestParsingMerge.optionalgroup)
}
inline ::protobuf_unittest::TestParsingMerge_OptionalGroup* TestParsingMerge::release_optionalgroup() {
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestParsingMerge_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestParsingMerge_OptionalGroup* TestParsingMerge::unsafe_arena_release_optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMerge.optionalgroup)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestParsingMerge_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestParsingMerge_OptionalGroup* TestParsingMerge::_internal_mutable_optionalgroup() {
  _has_bits_[0] |= 0x00000004u;
  if (optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestParsingMerge_OptionalGroup>(GetArenaForAllocation());
    optionalgroup_ = p;
  }
  return optionalgroup_;
}
inline ::protobuf_unittest::TestParsingMerge_OptionalGroup* TestParsingMerge::mutable_optionalgroup() {
  ::protobuf_unittest::TestParsingMerge_OptionalGroup* _msg = _internal_mutable_optionalgroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.optionalgroup)
  return _msg;
}
inline void TestParsingMerge::set_allocated_optionalgroup(::protobuf_unittest::TestParsingMerge_OptionalGroup* optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optionalgroup_;
  }
  if (optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionalgroup);
    if (message_arena != submessage_arena) {
      optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optionalgroup_ = optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMerge.optionalgroup)
}

// repeated group RepeatedGroup = 20 { ... };
inline int TestParsingMerge::_internal_repeatedgroup_size() const {
  return repeatedgroup_.size();
}
inline int TestParsingMerge::repeatedgroup_size() const {
  return _internal_repeatedgroup_size();
}
inline void TestParsingMerge::clear_repeatedgroup() {
  repeatedgroup_.Clear();
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedGroup* TestParsingMerge::mutable_repeatedgroup(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMerge.repeatedgroup)
  return repeatedgroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedGroup >*
TestParsingMerge::mutable_repeatedgroup() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMerge.repeatedgroup)
  return &repeatedgroup_;
}
inline const ::protobuf_unittest::TestParsingMerge_RepeatedGroup& TestParsingMerge::_internal_repeatedgroup(int index) const {
  return repeatedgroup_.Get(index);
}
inline const ::protobuf_unittest::TestParsingMerge_RepeatedGroup& TestParsingMerge::repeatedgroup(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMerge.repeatedgroup)
  return _internal_repeatedgroup(index);
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedGroup* TestParsingMerge::_internal_add_repeatedgroup() {
  return repeatedgroup_.Add();
}
inline ::protobuf_unittest::TestParsingMerge_RepeatedGroup* TestParsingMerge::add_repeatedgroup() {
  ::protobuf_unittest::TestParsingMerge_RepeatedGroup* _add = _internal_add_repeatedgroup();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMerge.repeatedgroup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMerge_RepeatedGroup >&
TestParsingMerge::repeatedgroup() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMerge.repeatedgroup)
  return repeatedgroup_;
}

// -------------------------------------------------------------------

// TestMergeException

// optional .protobuf_unittest.TestAllExtensions all_extensions = 1;
inline bool TestMergeException::_internal_has_all_extensions() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || all_extensions_ != nullptr);
  return value;
}
inline bool TestMergeException::has_all_extensions() const {
  return _internal_has_all_extensions();
}
inline void TestMergeException::clear_all_extensions() {
  if (all_extensions_ != nullptr) all_extensions_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllExtensions& TestMergeException::_internal_all_extensions() const {
  const ::protobuf_unittest::TestAllExtensions* p = all_extensions_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestAllExtensions&>(
      ::protobuf_unittest::_TestAllExtensions_default_instance_);
}
inline const ::protobuf_unittest::TestAllExtensions& TestMergeException::all_extensions() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestMergeException.all_extensions)
  return _internal_all_extensions();
}
inline void TestMergeException::unsafe_arena_set_allocated_all_extensions(
    ::protobuf_unittest::TestAllExtensions* all_extensions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all_extensions_);
  }
  all_extensions_ = all_extensions;
  if (all_extensions) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestMergeException.all_extensions)
}
inline ::protobuf_unittest::TestAllExtensions* TestMergeException::release_all_extensions() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllExtensions* temp = all_extensions_;
  all_extensions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestAllExtensions* TestMergeException::unsafe_arena_release_all_extensions() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestMergeException.all_extensions)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllExtensions* temp = all_extensions_;
  all_extensions_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllExtensions* TestMergeException::_internal_mutable_all_extensions() {
  _has_bits_[0] |= 0x00000001u;
  if (all_extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllExtensions>(GetArenaForAllocation());
    all_extensions_ = p;
  }
  return all_extensions_;
}
inline ::protobuf_unittest::TestAllExtensions* TestMergeException::mutable_all_extensions() {
  ::protobuf_unittest::TestAllExtensions* _msg = _internal_mutable_all_extensions();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestMergeException.all_extensions)
  return _msg;
}
inline void TestMergeException::set_allocated_all_extensions(::protobuf_unittest::TestAllExtensions* all_extensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete all_extensions_;
  }
  if (all_extensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_extensions);
    if (message_arena != submessage_arena) {
      all_extensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_extensions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  all_extensions_ = all_extensions;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestMergeException.all_extensions)
}

// -------------------------------------------------------------------

// TestCommentInjectionMessage

// optional string a = 1 [default = "*/ <- Neither should this."];
inline bool TestCommentInjectionMessage::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestCommentInjectionMessage::has_a() const {
  return _internal_has_a();
}
inline void TestCommentInjectionMessage::clear_a() {
  a_.ClearToDefault(::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_, GetArenaForAllocation());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestCommentInjectionMessage::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestCommentInjectionMessage.a)
  if (a_.IsDefault()) return _i_give_permission_to_break_this_code_default_a_.get();
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestCommentInjectionMessage::set_a(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestCommentInjectionMessage.a)
}
inline std::string* TestCommentInjectionMessage::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestCommentInjectionMessage.a)
  return _s;
}
inline const std::string& TestCommentInjectionMessage::_internal_a() const {
  return a_.Get();
}
inline void TestCommentInjectionMessage::_internal_set_a(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  a_.Set(value, GetArenaForAllocation());
}
inline std::string* TestCommentInjectionMessage::_internal_mutable_a() {
  _has_bits_[0] |= 0x00000001u;
  return a_.Mutable(::protobuf_unittest::TestCommentInjectionMessage::_i_give_permission_to_break_this_code_default_a_, GetArenaForAllocation());
}
inline std::string* TestCommentInjectionMessage::release_a() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestCommentInjectionMessage.a)
  if (!_internal_has_a()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = a_.Release();
  return p;
}
inline void TestCommentInjectionMessage::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  a_.SetAllocated(a, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestCommentInjectionMessage.a)
}

// -------------------------------------------------------------------

// FooRequest

// -------------------------------------------------------------------

// FooResponse

// -------------------------------------------------------------------

// FooClientMessage

// -------------------------------------------------------------------

// FooServerMessage

// -------------------------------------------------------------------

// BarRequest

// -------------------------------------------------------------------

// BarResponse

// -------------------------------------------------------------------

// TestJsonName

// optional int32 field_name1 = 1;
inline bool TestJsonName::_internal_has_field_name1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestJsonName::has_field_name1() const {
  return _internal_has_field_name1();
}
inline void TestJsonName::clear_field_name1() {
  field_name1_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestJsonName::_internal_field_name1() const {
  return field_name1_;
}
inline int32_t TestJsonName::field_name1() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestJsonName.field_name1)
  return _internal_field_name1();
}
inline void TestJsonName::_internal_set_field_name1(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  field_name1_ = value;
}
inline void TestJsonName::set_field_name1(int32_t value) {
  _internal_set_field_name1(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestJsonName.field_name1)
}

// optional int32 fieldName2 = 2;
inline bool TestJsonName::_internal_has_fieldname2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestJsonName::has_fieldname2() const {
  return _internal_has_fieldname2();
}
inline void TestJsonName::clear_fieldname2() {
  fieldname2_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestJsonName::_internal_fieldname2() const {
  return fieldname2_;
}
inline int32_t TestJsonName::fieldname2() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestJsonName.fieldName2)
  return _internal_fieldname2();
}
inline void TestJsonName::_internal_set_fieldname2(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  fieldname2_ = value;
}
inline void TestJsonName::set_fieldname2(int32_t value) {
  _internal_set_fieldname2(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestJsonName.fieldName2)
}

// optional int32 FieldName3 = 3;
inline bool TestJsonName::_internal_has_fieldname3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestJsonName::has_fieldname3() const {
  return _internal_has_fieldname3();
}
inline void TestJsonName::clear_fieldname3() {
  fieldname3_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestJsonName::_internal_fieldname3() const {
  return fieldname3_;
}
inline int32_t TestJsonName::fieldname3() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestJsonName.FieldName3)
  return _internal_fieldname3();
}
inline void TestJsonName::_internal_set_fieldname3(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  fieldname3_ = value;
}
inline void TestJsonName::set_fieldname3(int32_t value) {
  _internal_set_fieldname3(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestJsonName.FieldName3)
}

// optional int32 _field_name4 = 4;
inline bool TestJsonName::_internal_has__field_name4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestJsonName::has__field_name4() const {
  return _internal_has__field_name4();
}
inline void TestJsonName::clear__field_name4() {
  _field_name4_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TestJsonName::_internal__field_name4() const {
  return _field_name4_;
}
inline int32_t TestJsonName::_field_name4() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestJsonName._field_name4)
  return _internal__field_name4();
}
inline void TestJsonName::_internal_set__field_name4(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  _field_name4_ = value;
}
inline void TestJsonName::set__field_name4(int32_t value) {
  _internal_set__field_name4(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestJsonName._field_name4)
}

// optional int32 FIELD_NAME5 = 5;
inline bool TestJsonName::_internal_has_field_name5() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestJsonName::has_field_name5() const {
  return _internal_has_field_name5();
}
inline void TestJsonName::clear_field_name5() {
  field_name5_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t TestJsonName::_internal_field_name5() const {
  return field_name5_;
}
inline int32_t TestJsonName::field_name5() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestJsonName.FIELD_NAME5)
  return _internal_field_name5();
}
inline void TestJsonName::_internal_set_field_name5(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  field_name5_ = value;
}
inline void TestJsonName::set_field_name5(int32_t value) {
  _internal_set_field_name5(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestJsonName.FIELD_NAME5)
}

// optional int32 field_name6 = 6 [json_name = "@type"];
inline bool TestJsonName::_internal_has_field_name6() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestJsonName::has_field_name6() const {
  return _internal_has_field_name6();
}
inline void TestJsonName::clear_field_name6() {
  field_name6_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t TestJsonName::_internal_field_name6() const {
  return field_name6_;
}
inline int32_t TestJsonName::field_name6() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestJsonName.field_name6)
  return _internal_field_name6();
}
inline void TestJsonName::_internal_set_field_name6(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  field_name6_ = value;
}
inline void TestJsonName::set_field_name6(int32_t value) {
  _internal_set_field_name6(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestJsonName.field_name6)
}

// optional int32 fieldname7 = 7;
inline bool TestJsonName::_internal_has_fieldname7() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestJsonName::has_fieldname7() const {
  return _internal_has_fieldname7();
}
inline void TestJsonName::clear_fieldname7() {
  fieldname7_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t TestJsonName::_internal_fieldname7() const {
  return fieldname7_;
}
inline int32_t TestJsonName::fieldname7() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestJsonName.fieldname7)
  return _internal_fieldname7();
}
inline void TestJsonName::_internal_set_fieldname7(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  fieldname7_ = value;
}
inline void TestJsonName::set_fieldname7(int32_t value) {
  _internal_set_fieldname7(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestJsonName.fieldname7)
}

// -------------------------------------------------------------------

// TestHugeFieldNumbers_OptionalGroup

// optional int32 group_a = 536870009;
inline bool TestHugeFieldNumbers_OptionalGroup::_internal_has_group_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestHugeFieldNumbers_OptionalGroup::has_group_a() const {
  return _internal_has_group_a();
}
inline void TestHugeFieldNumbers_OptionalGroup::clear_group_a() {
  group_a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestHugeFieldNumbers_OptionalGroup::_internal_group_a() const {
  return group_a_;
}
inline int32_t TestHugeFieldNumbers_OptionalGroup::group_a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup.group_a)
  return _internal_group_a();
}
inline void TestHugeFieldNumbers_OptionalGroup::_internal_set_group_a(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  group_a_ = value;
}
inline void TestHugeFieldNumbers_OptionalGroup::set_group_a(int32_t value) {
  _internal_set_group_a(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.OptionalGroup.group_a)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestHugeFieldNumbers

// optional int32 optional_int32 = 536870000;
inline bool TestHugeFieldNumbers::_internal_has_optional_int32() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestHugeFieldNumbers::has_optional_int32() const {
  return _internal_has_optional_int32();
}
inline void TestHugeFieldNumbers::clear_optional_int32() {
  optional_int32_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t TestHugeFieldNumbers::_internal_optional_int32() const {
  return optional_int32_;
}
inline int32_t TestHugeFieldNumbers::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.optional_int32)
  return _internal_optional_int32();
}
inline void TestHugeFieldNumbers::_internal_set_optional_int32(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  optional_int32_ = value;
}
inline void TestHugeFieldNumbers::set_optional_int32(int32_t value) {
  _internal_set_optional_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.optional_int32)
}

// optional int32 fixed_32 = 536870001;
inline bool TestHugeFieldNumbers::_internal_has_fixed_32() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestHugeFieldNumbers::has_fixed_32() const {
  return _internal_has_fixed_32();
}
inline void TestHugeFieldNumbers::clear_fixed_32() {
  fixed_32_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t TestHugeFieldNumbers::_internal_fixed_32() const {
  return fixed_32_;
}
inline int32_t TestHugeFieldNumbers::fixed_32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.fixed_32)
  return _internal_fixed_32();
}
inline void TestHugeFieldNumbers::_internal_set_fixed_32(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  fixed_32_ = value;
}
inline void TestHugeFieldNumbers::set_fixed_32(int32_t value) {
  _internal_set_fixed_32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.fixed_32)
}

// repeated int32 repeated_int32 = 536870002 [packed = false];
inline int TestHugeFieldNumbers::_internal_repeated_int32_size() const {
  return repeated_int32_.size();
}
inline int TestHugeFieldNumbers::repeated_int32_size() const {
  return _internal_repeated_int32_size();
}
inline void TestHugeFieldNumbers::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline int32_t TestHugeFieldNumbers::_internal_repeated_int32(int index) const {
  return repeated_int32_.Get(index);
}
inline int32_t TestHugeFieldNumbers::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.repeated_int32)
  return _internal_repeated_int32(index);
}
inline void TestHugeFieldNumbers::set_repeated_int32(int index, int32_t value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.repeated_int32)
}
inline void TestHugeFieldNumbers::_internal_add_repeated_int32(int32_t value) {
  repeated_int32_.Add(value);
}
inline void TestHugeFieldNumbers::add_repeated_int32(int32_t value) {
  _internal_add_repeated_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestHugeFieldNumbers.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestHugeFieldNumbers::_internal_repeated_int32() const {
  return repeated_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestHugeFieldNumbers::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestHugeFieldNumbers.repeated_int32)
  return _internal_repeated_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestHugeFieldNumbers::_internal_mutable_repeated_int32() {
  return &repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestHugeFieldNumbers::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestHugeFieldNumbers.repeated_int32)
  return _internal_mutable_repeated_int32();
}

// repeated int32 packed_int32 = 536870003 [packed = true];
inline int TestHugeFieldNumbers::_internal_packed_int32_size() const {
  return packed_int32_.size();
}
inline int TestHugeFieldNumbers::packed_int32_size() const {
  return _internal_packed_int32_size();
}
inline void TestHugeFieldNumbers::clear_packed_int32() {
  packed_int32_.Clear();
}
inline int32_t TestHugeFieldNumbers::_internal_packed_int32(int index) const {
  return packed_int32_.Get(index);
}
inline int32_t TestHugeFieldNumbers::packed_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.packed_int32)
  return _internal_packed_int32(index);
}
inline void TestHugeFieldNumbers::set_packed_int32(int index, int32_t value) {
  packed_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.packed_int32)
}
inline void TestHugeFieldNumbers::_internal_add_packed_int32(int32_t value) {
  packed_int32_.Add(value);
}
inline void TestHugeFieldNumbers::add_packed_int32(int32_t value) {
  _internal_add_packed_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestHugeFieldNumbers.packed_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestHugeFieldNumbers::_internal_packed_int32() const {
  return packed_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestHugeFieldNumbers::packed_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestHugeFieldNumbers.packed_int32)
  return _internal_packed_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestHugeFieldNumbers::_internal_mutable_packed_int32() {
  return &packed_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestHugeFieldNumbers::mutable_packed_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestHugeFieldNumbers.packed_int32)
  return _internal_mutable_packed_int32();
}

// optional .protobuf_unittest.ForeignEnum optional_enum = 536870004;
inline bool TestHugeFieldNumbers::_internal_has_optional_enum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestHugeFieldNumbers::has_optional_enum() const {
  return _internal_has_optional_enum();
}
inline void TestHugeFieldNumbers::clear_optional_enum() {
  optional_enum_ = 4;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::protobuf_unittest::ForeignEnum TestHugeFieldNumbers::_internal_optional_enum() const {
  return static_cast< ::protobuf_unittest::ForeignEnum >(optional_enum_);
}
inline ::protobuf_unittest::ForeignEnum TestHugeFieldNumbers::optional_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.optional_enum)
  return _internal_optional_enum();
}
inline void TestHugeFieldNumbers::_internal_set_optional_enum(::protobuf_unittest::ForeignEnum value) {
  assert(::protobuf_unittest::ForeignEnum_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  optional_enum_ = value;
}
inline void TestHugeFieldNumbers::set_optional_enum(::protobuf_unittest::ForeignEnum value) {
  _internal_set_optional_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.optional_enum)
}

// optional string optional_string = 536870005;
inline bool TestHugeFieldNumbers::_internal_has_optional_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestHugeFieldNumbers::has_optional_string() const {
  return _internal_has_optional_string();
}
inline void TestHugeFieldNumbers::clear_optional_string() {
  optional_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestHugeFieldNumbers::optional_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.optional_string)
  return _internal_optional_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestHugeFieldNumbers::set_optional_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 optional_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.optional_string)
}
inline std::string* TestHugeFieldNumbers::mutable_optional_string() {
  std::string* _s = _internal_mutable_optional_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbers.optional_string)
  return _s;
}
inline const std::string& TestHugeFieldNumbers::_internal_optional_string() const {
  return optional_string_.Get();
}
inline void TestHugeFieldNumbers::_internal_set_optional_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestHugeFieldNumbers::_internal_mutable_optional_string() {
  _has_bits_[0] |= 0x00000001u;
  return optional_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestHugeFieldNumbers::release_optional_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbers.optional_string)
  if (!_internal_has_optional_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = optional_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_string_.IsDefault()) {
    optional_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestHugeFieldNumbers::set_allocated_optional_string(std::string* optional_string) {
  if (optional_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_string_.SetAllocated(optional_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_string_.IsDefault()) {
    optional_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbers.optional_string)
}

// optional bytes optional_bytes = 536870006;
inline bool TestHugeFieldNumbers::_internal_has_optional_bytes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestHugeFieldNumbers::has_optional_bytes() const {
  return _internal_has_optional_bytes();
}
inline void TestHugeFieldNumbers::clear_optional_bytes() {
  optional_bytes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestHugeFieldNumbers::optional_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.optional_bytes)
  return _internal_optional_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestHugeFieldNumbers::set_optional_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 optional_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.optional_bytes)
}
inline std::string* TestHugeFieldNumbers::mutable_optional_bytes() {
  std::string* _s = _internal_mutable_optional_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbers.optional_bytes)
  return _s;
}
inline const std::string& TestHugeFieldNumbers::_internal_optional_bytes() const {
  return optional_bytes_.Get();
}
inline void TestHugeFieldNumbers::_internal_set_optional_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestHugeFieldNumbers::_internal_mutable_optional_bytes() {
  _has_bits_[0] |= 0x00000002u;
  return optional_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* TestHugeFieldNumbers::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbers.optional_bytes)
  if (!_internal_has_optional_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = optional_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_bytes_.IsDefault()) {
    optional_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestHugeFieldNumbers::set_allocated_optional_bytes(std::string* optional_bytes) {
  if (optional_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_bytes_.SetAllocated(optional_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (optional_bytes_.IsDefault()) {
    optional_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbers.optional_bytes)
}

// optional .protobuf_unittest.ForeignMessage optional_message = 536870007;
inline bool TestHugeFieldNumbers::_internal_has_optional_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || optional_message_ != nullptr);
  return value;
}
inline bool TestHugeFieldNumbers::has_optional_message() const {
  return _internal_has_optional_message();
}
inline void TestHugeFieldNumbers::clear_optional_message() {
  if (optional_message_ != nullptr) optional_message_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::ForeignMessage& TestHugeFieldNumbers::_internal_optional_message() const {
  const ::protobuf_unittest::ForeignMessage* p = optional_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::ForeignMessage&>(
      ::protobuf_unittest::_ForeignMessage_default_instance_);
}
inline const ::protobuf_unittest::ForeignMessage& TestHugeFieldNumbers::optional_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.optional_message)
  return _internal_optional_message();
}
inline void TestHugeFieldNumbers::unsafe_arena_set_allocated_optional_message(
    ::protobuf_unittest::ForeignMessage* optional_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_message_);
  }
  optional_message_ = optional_message;
  if (optional_message) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestHugeFieldNumbers.optional_message)
}
inline ::protobuf_unittest::ForeignMessage* TestHugeFieldNumbers::release_optional_message() {
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::ForeignMessage* temp = optional_message_;
  optional_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestHugeFieldNumbers::unsafe_arena_release_optional_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbers.optional_message)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::ForeignMessage* temp = optional_message_;
  optional_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::ForeignMessage* TestHugeFieldNumbers::_internal_mutable_optional_message() {
  _has_bits_[0] |= 0x00000004u;
  if (optional_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::ForeignMessage>(GetArenaForAllocation());
    optional_message_ = p;
  }
  return optional_message_;
}
inline ::protobuf_unittest::ForeignMessage* TestHugeFieldNumbers::mutable_optional_message() {
  ::protobuf_unittest::ForeignMessage* _msg = _internal_mutable_optional_message();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbers.optional_message)
  return _msg;
}
inline void TestHugeFieldNumbers::set_allocated_optional_message(::protobuf_unittest::ForeignMessage* optional_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optional_message_;
  }
  if (optional_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_message);
    if (message_arena != submessage_arena) {
      optional_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optional_message_ = optional_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbers.optional_message)
}

// optional group OptionalGroup = 536870008 { ... };
inline bool TestHugeFieldNumbers::_internal_has_optionalgroup() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || optionalgroup_ != nullptr);
  return value;
}
inline bool TestHugeFieldNumbers::has_optionalgroup() const {
  return _internal_has_optionalgroup();
}
inline void TestHugeFieldNumbers::clear_optionalgroup() {
  if (optionalgroup_ != nullptr) optionalgroup_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup& TestHugeFieldNumbers::_internal_optionalgroup() const {
  const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* p = optionalgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup&>(
      ::protobuf_unittest::_TestHugeFieldNumbers_OptionalGroup_default_instance_);
}
inline const ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup& TestHugeFieldNumbers::optionalgroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.optionalgroup)
  return _internal_optionalgroup();
}
inline void TestHugeFieldNumbers::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* optionalgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalgroup_);
  }
  optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestHugeFieldNumbers.optionalgroup)
}
inline ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* TestHugeFieldNumbers::release_optionalgroup() {
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* TestHugeFieldNumbers::unsafe_arena_release_optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbers.optionalgroup)
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* TestHugeFieldNumbers::_internal_mutable_optionalgroup() {
  _has_bits_[0] |= 0x00000008u;
  if (optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup>(GetArenaForAllocation());
    optionalgroup_ = p;
  }
  return optionalgroup_;
}
inline ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* TestHugeFieldNumbers::mutable_optionalgroup() {
  ::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* _msg = _internal_mutable_optionalgroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbers.optionalgroup)
  return _msg;
}
inline void TestHugeFieldNumbers::set_allocated_optionalgroup(::protobuf_unittest::TestHugeFieldNumbers_OptionalGroup* optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete optionalgroup_;
  }
  if (optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionalgroup);
    if (message_arena != submessage_arena) {
      optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  optionalgroup_ = optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbers.optionalgroup)
}

// map<string, string> string_string_map = 536870010;
inline int TestHugeFieldNumbers::_internal_string_string_map_size() const {
  return string_string_map_.size();
}
inline int TestHugeFieldNumbers::string_string_map_size() const {
  return _internal_string_string_map_size();
}
inline void TestHugeFieldNumbers::clear_string_string_map() {
  string_string_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestHugeFieldNumbers::_internal_string_string_map() const {
  return string_string_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestHugeFieldNumbers::string_string_map() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestHugeFieldNumbers.string_string_map)
  return _internal_string_string_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestHugeFieldNumbers::_internal_mutable_string_string_map() {
  return string_string_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestHugeFieldNumbers::mutable_string_string_map() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestHugeFieldNumbers.string_string_map)
  return _internal_mutable_string_string_map();
}

// uint32 oneof_uint32 = 536870011;
inline bool TestHugeFieldNumbers::_internal_has_oneof_uint32() const {
  return oneof_field_case() == kOneofUint32;
}
inline bool TestHugeFieldNumbers::has_oneof_uint32() const {
  return _internal_has_oneof_uint32();
}
inline void TestHugeFieldNumbers::set_has_oneof_uint32() {
  _oneof_case_[0] = kOneofUint32;
}
inline void TestHugeFieldNumbers::clear_oneof_uint32() {
  if (_internal_has_oneof_uint32()) {
    oneof_field_.oneof_uint32_ = 0u;
    clear_has_oneof_field();
  }
}
inline uint32_t TestHugeFieldNumbers::_internal_oneof_uint32() const {
  if (_internal_has_oneof_uint32()) {
    return oneof_field_.oneof_uint32_;
  }
  return 0u;
}
inline void TestHugeFieldNumbers::_internal_set_oneof_uint32(uint32_t value) {
  if (!_internal_has_oneof_uint32()) {
    clear_oneof_field();
    set_has_oneof_uint32();
  }
  oneof_field_.oneof_uint32_ = value;
}
inline uint32_t TestHugeFieldNumbers::oneof_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.oneof_uint32)
  return _internal_oneof_uint32();
}
inline void TestHugeFieldNumbers::set_oneof_uint32(uint32_t value) {
  _internal_set_oneof_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.oneof_uint32)
}

// .protobuf_unittest.TestAllTypes oneof_test_all_types = 536870012;
inline bool TestHugeFieldNumbers::_internal_has_oneof_test_all_types() const {
  return oneof_field_case() == kOneofTestAllTypes;
}
inline bool TestHugeFieldNumbers::has_oneof_test_all_types() const {
  return _internal_has_oneof_test_all_types();
}
inline void TestHugeFieldNumbers::set_has_oneof_test_all_types() {
  _oneof_case_[0] = kOneofTestAllTypes;
}
inline void TestHugeFieldNumbers::clear_oneof_test_all_types() {
  if (_internal_has_oneof_test_all_types()) {
    if (GetArenaForAllocation() == nullptr) {
      delete oneof_field_.oneof_test_all_types_;
    }
    clear_has_oneof_field();
  }
}
inline ::protobuf_unittest::TestAllTypes* TestHugeFieldNumbers::release_oneof_test_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbers.oneof_test_all_types)
  if (_internal_has_oneof_test_all_types()) {
    clear_has_oneof_field();
    ::protobuf_unittest::TestAllTypes* temp = oneof_field_.oneof_test_all_types_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    oneof_field_.oneof_test_all_types_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestAllTypes& TestHugeFieldNumbers::_internal_oneof_test_all_types() const {
  return _internal_has_oneof_test_all_types()
      ? *oneof_field_.oneof_test_all_types_
      : reinterpret_cast< ::protobuf_unittest::TestAllTypes&>(::protobuf_unittest::_TestAllTypes_default_instance_);
}
inline const ::protobuf_unittest::TestAllTypes& TestHugeFieldNumbers::oneof_test_all_types() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.oneof_test_all_types)
  return _internal_oneof_test_all_types();
}
inline ::protobuf_unittest::TestAllTypes* TestHugeFieldNumbers::unsafe_arena_release_oneof_test_all_types() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_unittest.TestHugeFieldNumbers.oneof_test_all_types)
  if (_internal_has_oneof_test_all_types()) {
    clear_has_oneof_field();
    ::protobuf_unittest::TestAllTypes* temp = oneof_field_.oneof_test_all_types_;
    oneof_field_.oneof_test_all_types_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestHugeFieldNumbers::unsafe_arena_set_allocated_oneof_test_all_types(::protobuf_unittest::TestAllTypes* oneof_test_all_types) {
  clear_oneof_field();
  if (oneof_test_all_types) {
    set_has_oneof_test_all_types();
    oneof_field_.oneof_test_all_types_ = oneof_test_all_types;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestHugeFieldNumbers.oneof_test_all_types)
}
inline ::protobuf_unittest::TestAllTypes* TestHugeFieldNumbers::_internal_mutable_oneof_test_all_types() {
  if (!_internal_has_oneof_test_all_types()) {
    clear_oneof_field();
    set_has_oneof_test_all_types();
    oneof_field_.oneof_test_all_types_ = CreateMaybeMessage< ::protobuf_unittest::TestAllTypes >(GetArenaForAllocation());
  }
  return oneof_field_.oneof_test_all_types_;
}
inline ::protobuf_unittest::TestAllTypes* TestHugeFieldNumbers::mutable_oneof_test_all_types() {
  ::protobuf_unittest::TestAllTypes* _msg = _internal_mutable_oneof_test_all_types();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbers.oneof_test_all_types)
  return _msg;
}

// string oneof_string = 536870013;
inline bool TestHugeFieldNumbers::_internal_has_oneof_string() const {
  return oneof_field_case() == kOneofString;
}
inline bool TestHugeFieldNumbers::has_oneof_string() const {
  return _internal_has_oneof_string();
}
inline void TestHugeFieldNumbers::set_has_oneof_string() {
  _oneof_case_[0] = kOneofString;
}
inline void TestHugeFieldNumbers::clear_oneof_string() {
  if (_internal_has_oneof_string()) {
    oneof_field_.oneof_string_.Destroy();
    clear_has_oneof_field();
  }
}
inline const std::string& TestHugeFieldNumbers::oneof_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.oneof_string)
  return _internal_oneof_string();
}
template <typename ArgT0, typename... ArgT>
inline void TestHugeFieldNumbers::set_oneof_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.InitDefault();
  }
  oneof_field_.oneof_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.oneof_string)
}
inline std::string* TestHugeFieldNumbers::mutable_oneof_string() {
  std::string* _s = _internal_mutable_oneof_string();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbers.oneof_string)
  return _s;
}
inline const std::string& TestHugeFieldNumbers::_internal_oneof_string() const {
  if (_internal_has_oneof_string()) {
    return oneof_field_.oneof_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestHugeFieldNumbers::_internal_set_oneof_string(const std::string& value) {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.InitDefault();
  }
  oneof_field_.oneof_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestHugeFieldNumbers::_internal_mutable_oneof_string() {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.InitDefault();
  }
  return oneof_field_.oneof_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestHugeFieldNumbers::release_oneof_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbers.oneof_string)
  if (_internal_has_oneof_string()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_string_.Release();
  } else {
    return nullptr;
  }
}
inline void TestHugeFieldNumbers::set_allocated_oneof_string(std::string* oneof_string) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_string != nullptr) {
    set_has_oneof_string();
    oneof_field_.oneof_string_.InitAllocated(oneof_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbers.oneof_string)
}

// bytes oneof_bytes = 536870014;
inline bool TestHugeFieldNumbers::_internal_has_oneof_bytes() const {
  return oneof_field_case() == kOneofBytes;
}
inline bool TestHugeFieldNumbers::has_oneof_bytes() const {
  return _internal_has_oneof_bytes();
}
inline void TestHugeFieldNumbers::set_has_oneof_bytes() {
  _oneof_case_[0] = kOneofBytes;
}
inline void TestHugeFieldNumbers::clear_oneof_bytes() {
  if (_internal_has_oneof_bytes()) {
    oneof_field_.oneof_bytes_.Destroy();
    clear_has_oneof_field();
  }
}
inline const std::string& TestHugeFieldNumbers::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbers.oneof_bytes)
  return _internal_oneof_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void TestHugeFieldNumbers::set_oneof_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.InitDefault();
  }
  oneof_field_.oneof_bytes_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbers.oneof_bytes)
}
inline std::string* TestHugeFieldNumbers::mutable_oneof_bytes() {
  std::string* _s = _internal_mutable_oneof_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbers.oneof_bytes)
  return _s;
}
inline const std::string& TestHugeFieldNumbers::_internal_oneof_bytes() const {
  if (_internal_has_oneof_bytes()) {
    return oneof_field_.oneof_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestHugeFieldNumbers::_internal_set_oneof_bytes(const std::string& value) {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.InitDefault();
  }
  oneof_field_.oneof_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestHugeFieldNumbers::_internal_mutable_oneof_bytes() {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.InitDefault();
  }
  return oneof_field_.oneof_bytes_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestHugeFieldNumbers::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbers.oneof_bytes)
  if (_internal_has_oneof_bytes()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_bytes_.Release();
  } else {
    return nullptr;
  }
}
inline void TestHugeFieldNumbers::set_allocated_oneof_bytes(std::string* oneof_bytes) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_bytes != nullptr) {
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.InitAllocated(oneof_bytes, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbers.oneof_bytes)
}

inline bool TestHugeFieldNumbers::has_oneof_field() const {
  return oneof_field_case() != ONEOF_FIELD_NOT_SET;
}
inline void TestHugeFieldNumbers::clear_has_oneof_field() {
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}
inline TestHugeFieldNumbers::OneofFieldCase TestHugeFieldNumbers::oneof_field_case() const {
  return TestHugeFieldNumbers::OneofFieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestExtensionInsideTable

// optional int32 field1 = 1;
inline bool TestExtensionInsideTable::_internal_has_field1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field1() const {
  return _internal_has_field1();
}
inline void TestExtensionInsideTable::clear_field1() {
  field1_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestExtensionInsideTable::_internal_field1() const {
  return field1_;
}
inline int32_t TestExtensionInsideTable::field1() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field1)
  return _internal_field1();
}
inline void TestExtensionInsideTable::_internal_set_field1(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  field1_ = value;
}
inline void TestExtensionInsideTable::set_field1(int32_t value) {
  _internal_set_field1(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field1)
}

// optional int32 field2 = 2;
inline bool TestExtensionInsideTable::_internal_has_field2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field2() const {
  return _internal_has_field2();
}
inline void TestExtensionInsideTable::clear_field2() {
  field2_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestExtensionInsideTable::_internal_field2() const {
  return field2_;
}
inline int32_t TestExtensionInsideTable::field2() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field2)
  return _internal_field2();
}
inline void TestExtensionInsideTable::_internal_set_field2(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  field2_ = value;
}
inline void TestExtensionInsideTable::set_field2(int32_t value) {
  _internal_set_field2(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field2)
}

// optional int32 field3 = 3;
inline bool TestExtensionInsideTable::_internal_has_field3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field3() const {
  return _internal_has_field3();
}
inline void TestExtensionInsideTable::clear_field3() {
  field3_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestExtensionInsideTable::_internal_field3() const {
  return field3_;
}
inline int32_t TestExtensionInsideTable::field3() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field3)
  return _internal_field3();
}
inline void TestExtensionInsideTable::_internal_set_field3(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  field3_ = value;
}
inline void TestExtensionInsideTable::set_field3(int32_t value) {
  _internal_set_field3(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field3)
}

// optional int32 field4 = 4;
inline bool TestExtensionInsideTable::_internal_has_field4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field4() const {
  return _internal_has_field4();
}
inline void TestExtensionInsideTable::clear_field4() {
  field4_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TestExtensionInsideTable::_internal_field4() const {
  return field4_;
}
inline int32_t TestExtensionInsideTable::field4() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field4)
  return _internal_field4();
}
inline void TestExtensionInsideTable::_internal_set_field4(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  field4_ = value;
}
inline void TestExtensionInsideTable::set_field4(int32_t value) {
  _internal_set_field4(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field4)
}

// optional int32 field6 = 6;
inline bool TestExtensionInsideTable::_internal_has_field6() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field6() const {
  return _internal_has_field6();
}
inline void TestExtensionInsideTable::clear_field6() {
  field6_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t TestExtensionInsideTable::_internal_field6() const {
  return field6_;
}
inline int32_t TestExtensionInsideTable::field6() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field6)
  return _internal_field6();
}
inline void TestExtensionInsideTable::_internal_set_field6(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  field6_ = value;
}
inline void TestExtensionInsideTable::set_field6(int32_t value) {
  _internal_set_field6(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field6)
}

// optional int32 field7 = 7;
inline bool TestExtensionInsideTable::_internal_has_field7() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field7() const {
  return _internal_has_field7();
}
inline void TestExtensionInsideTable::clear_field7() {
  field7_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t TestExtensionInsideTable::_internal_field7() const {
  return field7_;
}
inline int32_t TestExtensionInsideTable::field7() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field7)
  return _internal_field7();
}
inline void TestExtensionInsideTable::_internal_set_field7(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  field7_ = value;
}
inline void TestExtensionInsideTable::set_field7(int32_t value) {
  _internal_set_field7(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field7)
}

// optional int32 field8 = 8;
inline bool TestExtensionInsideTable::_internal_has_field8() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field8() const {
  return _internal_has_field8();
}
inline void TestExtensionInsideTable::clear_field8() {
  field8_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t TestExtensionInsideTable::_internal_field8() const {
  return field8_;
}
inline int32_t TestExtensionInsideTable::field8() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field8)
  return _internal_field8();
}
inline void TestExtensionInsideTable::_internal_set_field8(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  field8_ = value;
}
inline void TestExtensionInsideTable::set_field8(int32_t value) {
  _internal_set_field8(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field8)
}

// optional int32 field9 = 9;
inline bool TestExtensionInsideTable::_internal_has_field9() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field9() const {
  return _internal_has_field9();
}
inline void TestExtensionInsideTable::clear_field9() {
  field9_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t TestExtensionInsideTable::_internal_field9() const {
  return field9_;
}
inline int32_t TestExtensionInsideTable::field9() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field9)
  return _internal_field9();
}
inline void TestExtensionInsideTable::_internal_set_field9(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  field9_ = value;
}
inline void TestExtensionInsideTable::set_field9(int32_t value) {
  _internal_set_field9(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field9)
}

// optional int32 field10 = 10;
inline bool TestExtensionInsideTable::_internal_has_field10() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TestExtensionInsideTable::has_field10() const {
  return _internal_has_field10();
}
inline void TestExtensionInsideTable::clear_field10() {
  field10_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t TestExtensionInsideTable::_internal_field10() const {
  return field10_;
}
inline int32_t TestExtensionInsideTable::field10() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionInsideTable.field10)
  return _internal_field10();
}
inline void TestExtensionInsideTable::_internal_set_field10(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  field10_ = value;
}
inline void TestExtensionInsideTable::set_field10(int32_t value) {
  _internal_set_field10(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionInsideTable.field10)
}

// -------------------------------------------------------------------

// TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup

// optional string another_field = 6;
inline bool TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::_internal_has_another_field() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::has_another_field() const {
  return _internal_has_another_field();
}
inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::clear_another_field() {
  another_field_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::another_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.another_field)
  return _internal_another_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::set_another_field(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 another_field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.another_field)
}
inline std::string* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::mutable_another_field() {
  std::string* _s = _internal_mutable_another_field();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.another_field)
  return _s;
}
inline const std::string& TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::_internal_another_field() const {
  return another_field_.Get();
}
inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::_internal_set_another_field(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  another_field_.Set(value, GetArenaForAllocation());
}
inline std::string* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::_internal_mutable_another_field() {
  _has_bits_[0] |= 0x00000001u;
  return another_field_.Mutable(GetArenaForAllocation());
}
inline std::string* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::release_another_field() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.another_field)
  if (!_internal_has_another_field()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = another_field_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (another_field_.IsDefault()) {
    another_field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup::set_allocated_another_field(std::string* another_field) {
  if (another_field != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  another_field_.SetAllocated(another_field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (another_field_.IsDefault()) {
    another_field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.another_field)
}

// -------------------------------------------------------------------

// TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup

// optional string but_why_tho = 5;
inline bool TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::_internal_has_but_why_tho() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::has_but_why_tho() const {
  return _internal_has_but_why_tho();
}
inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::clear_but_why_tho() {
  but_why_tho_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::but_why_tho() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup.but_why_tho)
  return _internal_but_why_tho();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::set_but_why_tho(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 but_why_tho_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup.but_why_tho)
}
inline std::string* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::mutable_but_why_tho() {
  std::string* _s = _internal_mutable_but_why_tho();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup.but_why_tho)
  return _s;
}
inline const std::string& TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::_internal_but_why_tho() const {
  return but_why_tho_.Get();
}
inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::_internal_set_but_why_tho(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  but_why_tho_.Set(value, GetArenaForAllocation());
}
inline std::string* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::_internal_mutable_but_why_tho() {
  _has_bits_[0] |= 0x00000001u;
  return but_why_tho_.Mutable(GetArenaForAllocation());
}
inline std::string* TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::release_but_why_tho() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup.but_why_tho)
  if (!_internal_has_but_why_tho()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = but_why_tho_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (but_why_tho_.IsDefault()) {
    but_why_tho_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup::set_allocated_but_why_tho(std::string* but_why_tho) {
  if (but_why_tho != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  but_why_tho_.SetAllocated(but_why_tho, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (but_why_tho_.IsDefault()) {
    but_why_tho_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup.but_why_tho)
}

// -------------------------------------------------------------------

// TestNestedGroupExtensionOuter_Layer1OptionalGroup

// repeated group Layer2RepeatedGroup = 2 { ... };
inline int TestNestedGroupExtensionOuter_Layer1OptionalGroup::_internal_layer2repeatedgroup_size() const {
  return layer2repeatedgroup_.size();
}
inline int TestNestedGroupExtensionOuter_Layer1OptionalGroup::layer2repeatedgroup_size() const {
  return _internal_layer2repeatedgroup_size();
}
inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup::clear_layer2repeatedgroup() {
  layer2repeatedgroup_.Clear();
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* TestNestedGroupExtensionOuter_Layer1OptionalGroup::mutable_layer2repeatedgroup(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2repeatedgroup)
  return layer2repeatedgroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup >*
TestNestedGroupExtensionOuter_Layer1OptionalGroup::mutable_layer2repeatedgroup() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2repeatedgroup)
  return &layer2repeatedgroup_;
}
inline const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& TestNestedGroupExtensionOuter_Layer1OptionalGroup::_internal_layer2repeatedgroup(int index) const {
  return layer2repeatedgroup_.Get(index);
}
inline const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup& TestNestedGroupExtensionOuter_Layer1OptionalGroup::layer2repeatedgroup(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2repeatedgroup)
  return _internal_layer2repeatedgroup(index);
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* TestNestedGroupExtensionOuter_Layer1OptionalGroup::_internal_add_layer2repeatedgroup() {
  return layer2repeatedgroup_.Add();
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* TestNestedGroupExtensionOuter_Layer1OptionalGroup::add_layer2repeatedgroup() {
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup* _add = _internal_add_layer2repeatedgroup();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2repeatedgroup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup >&
TestNestedGroupExtensionOuter_Layer1OptionalGroup::layer2repeatedgroup() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2repeatedgroup)
  return layer2repeatedgroup_;
}

// repeated group Layer2AnotherOptionalRepeatedGroup = 4 { ... };
inline int TestNestedGroupExtensionOuter_Layer1OptionalGroup::_internal_layer2anotheroptionalrepeatedgroup_size() const {
  return layer2anotheroptionalrepeatedgroup_.size();
}
inline int TestNestedGroupExtensionOuter_Layer1OptionalGroup::layer2anotheroptionalrepeatedgroup_size() const {
  return _internal_layer2anotheroptionalrepeatedgroup_size();
}
inline void TestNestedGroupExtensionOuter_Layer1OptionalGroup::clear_layer2anotheroptionalrepeatedgroup() {
  layer2anotheroptionalrepeatedgroup_.Clear();
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* TestNestedGroupExtensionOuter_Layer1OptionalGroup::mutable_layer2anotheroptionalrepeatedgroup(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2anotheroptionalrepeatedgroup)
  return layer2anotheroptionalrepeatedgroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup >*
TestNestedGroupExtensionOuter_Layer1OptionalGroup::mutable_layer2anotheroptionalrepeatedgroup() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2anotheroptionalrepeatedgroup)
  return &layer2anotheroptionalrepeatedgroup_;
}
inline const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& TestNestedGroupExtensionOuter_Layer1OptionalGroup::_internal_layer2anotheroptionalrepeatedgroup(int index) const {
  return layer2anotheroptionalrepeatedgroup_.Get(index);
}
inline const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup& TestNestedGroupExtensionOuter_Layer1OptionalGroup::layer2anotheroptionalrepeatedgroup(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2anotheroptionalrepeatedgroup)
  return _internal_layer2anotheroptionalrepeatedgroup(index);
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* TestNestedGroupExtensionOuter_Layer1OptionalGroup::_internal_add_layer2anotheroptionalrepeatedgroup() {
  return layer2anotheroptionalrepeatedgroup_.Add();
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* TestNestedGroupExtensionOuter_Layer1OptionalGroup::add_layer2anotheroptionalrepeatedgroup() {
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup* _add = _internal_add_layer2anotheroptionalrepeatedgroup();
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2anotheroptionalrepeatedgroup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup >&
TestNestedGroupExtensionOuter_Layer1OptionalGroup::layer2anotheroptionalrepeatedgroup() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.layer2anotheroptionalrepeatedgroup)
  return layer2anotheroptionalrepeatedgroup_;
}

// -------------------------------------------------------------------

// TestNestedGroupExtensionOuter

// optional group Layer1OptionalGroup = 1 { ... };
inline bool TestNestedGroupExtensionOuter::_internal_has_layer1optionalgroup() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || layer1optionalgroup_ != nullptr);
  return value;
}
inline bool TestNestedGroupExtensionOuter::has_layer1optionalgroup() const {
  return _internal_has_layer1optionalgroup();
}
inline void TestNestedGroupExtensionOuter::clear_layer1optionalgroup() {
  if (layer1optionalgroup_ != nullptr) layer1optionalgroup_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup& TestNestedGroupExtensionOuter::_internal_layer1optionalgroup() const {
  const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* p = layer1optionalgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup&>(
      ::protobuf_unittest::_TestNestedGroupExtensionOuter_Layer1OptionalGroup_default_instance_);
}
inline const ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup& TestNestedGroupExtensionOuter::layer1optionalgroup() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedGroupExtensionOuter.layer1optionalgroup)
  return _internal_layer1optionalgroup();
}
inline void TestNestedGroupExtensionOuter::unsafe_arena_set_allocated_layer1optionalgroup(
    ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* layer1optionalgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer1optionalgroup_);
  }
  layer1optionalgroup_ = layer1optionalgroup;
  if (layer1optionalgroup) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestNestedGroupExtensionOuter.layer1optionalgroup)
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* TestNestedGroupExtensionOuter::release_layer1optionalgroup() {
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* temp = layer1optionalgroup_;
  layer1optionalgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* TestNestedGroupExtensionOuter::unsafe_arena_release_layer1optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedGroupExtensionOuter.layer1optionalgroup)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* temp = layer1optionalgroup_;
  layer1optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* TestNestedGroupExtensionOuter::_internal_mutable_layer1optionalgroup() {
  _has_bits_[0] |= 0x00000001u;
  if (layer1optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup>(GetArenaForAllocation());
    layer1optionalgroup_ = p;
  }
  return layer1optionalgroup_;
}
inline ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* TestNestedGroupExtensionOuter::mutable_layer1optionalgroup() {
  ::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* _msg = _internal_mutable_layer1optionalgroup();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedGroupExtensionOuter.layer1optionalgroup)
  return _msg;
}
inline void TestNestedGroupExtensionOuter::set_allocated_layer1optionalgroup(::protobuf_unittest::TestNestedGroupExtensionOuter_Layer1OptionalGroup* layer1optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete layer1optionalgroup_;
  }
  if (layer1optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layer1optionalgroup);
    if (message_arena != submessage_arena) {
      layer1optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer1optionalgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer1optionalgroup_ = layer1optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedGroupExtensionOuter.layer1optionalgroup)
}

// -------------------------------------------------------------------

// TestNestedGroupExtensionInnerExtension

// optional string inner_name = 1;
inline bool TestNestedGroupExtensionInnerExtension::_internal_has_inner_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestNestedGroupExtensionInnerExtension::has_inner_name() const {
  return _internal_has_inner_name();
}
inline void TestNestedGroupExtensionInnerExtension::clear_inner_name() {
  inner_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestNestedGroupExtensionInnerExtension::inner_name() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestNestedGroupExtensionInnerExtension.inner_name)
  return _internal_inner_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestNestedGroupExtensionInnerExtension::set_inner_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 inner_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestNestedGroupExtensionInnerExtension.inner_name)
}
inline std::string* TestNestedGroupExtensionInnerExtension::mutable_inner_name() {
  std::string* _s = _internal_mutable_inner_name();
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestNestedGroupExtensionInnerExtension.inner_name)
  return _s;
}
inline const std::string& TestNestedGroupExtensionInnerExtension::_internal_inner_name() const {
  return inner_name_.Get();
}
inline void TestNestedGroupExtensionInnerExtension::_internal_set_inner_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  inner_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TestNestedGroupExtensionInnerExtension::_internal_mutable_inner_name() {
  _has_bits_[0] |= 0x00000001u;
  return inner_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TestNestedGroupExtensionInnerExtension::release_inner_name() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestNestedGroupExtensionInnerExtension.inner_name)
  if (!_internal_has_inner_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = inner_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inner_name_.IsDefault()) {
    inner_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestNestedGroupExtensionInnerExtension::set_allocated_inner_name(std::string* inner_name) {
  if (inner_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inner_name_.SetAllocated(inner_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inner_name_.IsDefault()) {
    inner_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestNestedGroupExtensionInnerExtension.inner_name)
}

// -------------------------------------------------------------------

// TestExtensionRangeSerialize

// optional int32 foo_one = 1;
inline bool TestExtensionRangeSerialize::_internal_has_foo_one() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestExtensionRangeSerialize::has_foo_one() const {
  return _internal_has_foo_one();
}
inline void TestExtensionRangeSerialize::clear_foo_one() {
  foo_one_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestExtensionRangeSerialize::_internal_foo_one() const {
  return foo_one_;
}
inline int32_t TestExtensionRangeSerialize::foo_one() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionRangeSerialize.foo_one)
  return _internal_foo_one();
}
inline void TestExtensionRangeSerialize::_internal_set_foo_one(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  foo_one_ = value;
}
inline void TestExtensionRangeSerialize::set_foo_one(int32_t value) {
  _internal_set_foo_one(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionRangeSerialize.foo_one)
}

// optional int32 foo_two = 6;
inline bool TestExtensionRangeSerialize::_internal_has_foo_two() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestExtensionRangeSerialize::has_foo_two() const {
  return _internal_has_foo_two();
}
inline void TestExtensionRangeSerialize::clear_foo_two() {
  foo_two_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestExtensionRangeSerialize::_internal_foo_two() const {
  return foo_two_;
}
inline int32_t TestExtensionRangeSerialize::foo_two() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionRangeSerialize.foo_two)
  return _internal_foo_two();
}
inline void TestExtensionRangeSerialize::_internal_set_foo_two(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  foo_two_ = value;
}
inline void TestExtensionRangeSerialize::set_foo_two(int32_t value) {
  _internal_set_foo_two(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionRangeSerialize.foo_two)
}

// optional int32 foo_three = 7;
inline bool TestExtensionRangeSerialize::_internal_has_foo_three() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestExtensionRangeSerialize::has_foo_three() const {
  return _internal_has_foo_three();
}
inline void TestExtensionRangeSerialize::clear_foo_three() {
  foo_three_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestExtensionRangeSerialize::_internal_foo_three() const {
  return foo_three_;
}
inline int32_t TestExtensionRangeSerialize::foo_three() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionRangeSerialize.foo_three)
  return _internal_foo_three();
}
inline void TestExtensionRangeSerialize::_internal_set_foo_three(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  foo_three_ = value;
}
inline void TestExtensionRangeSerialize::set_foo_three(int32_t value) {
  _internal_set_foo_three(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionRangeSerialize.foo_three)
}

// optional int32 foo_four = 13;
inline bool TestExtensionRangeSerialize::_internal_has_foo_four() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestExtensionRangeSerialize::has_foo_four() const {
  return _internal_has_foo_four();
}
inline void TestExtensionRangeSerialize::clear_foo_four() {
  foo_four_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t TestExtensionRangeSerialize::_internal_foo_four() const {
  return foo_four_;
}
inline int32_t TestExtensionRangeSerialize::foo_four() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestExtensionRangeSerialize.foo_four)
  return _internal_foo_four();
}
inline void TestExtensionRangeSerialize::_internal_set_foo_four(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  foo_four_ = value;
}
inline void TestExtensionRangeSerialize::set_foo_four(int32_t value) {
  _internal_set_foo_four(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestExtensionRangeSerialize.foo_four)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protobuf_unittest::TestAllTypes_NestedEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::TestAllTypes_NestedEnum>() {
  return ::protobuf_unittest::TestAllTypes_NestedEnum_descriptor();
}
template <> struct is_proto_enum< ::protobuf_unittest::TestOneof2_NestedEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::TestOneof2_NestedEnum>() {
  return ::protobuf_unittest::TestOneof2_NestedEnum_descriptor();
}
template <> struct is_proto_enum< ::protobuf_unittest::TestDynamicExtensions_DynamicEnumType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::TestDynamicExtensions_DynamicEnumType>() {
  return ::protobuf_unittest::TestDynamicExtensions_DynamicEnumType_descriptor();
}
template <> struct is_proto_enum< ::protobuf_unittest::ForeignEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::ForeignEnum>() {
  return ::protobuf_unittest::ForeignEnum_descriptor();
}
template <> struct is_proto_enum< ::protobuf_unittest::TestEnumWithDupValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::TestEnumWithDupValue>() {
  return ::protobuf_unittest::TestEnumWithDupValue_descriptor();
}
template <> struct is_proto_enum< ::protobuf_unittest::TestSparseEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::TestSparseEnum>() {
  return ::protobuf_unittest::TestSparseEnum_descriptor();
}
template <> struct is_proto_enum< ::protobuf_unittest::VeryLargeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::VeryLargeEnum>() {
  return ::protobuf_unittest::VeryLargeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_2eproto
