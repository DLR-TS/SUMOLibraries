// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_lite.proto

#include "google/protobuf/unittest_lite.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf_unittest {
PROTOBUF_CONSTEXPR TestAllTypesLite_NestedMessage::TestAllTypesLite_NestedMessage(
    ::_pbi::ConstantInitialized)
  : cc_(int64_t{0})
  , bb_(0){}
struct TestAllTypesLite_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesLite_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesLite_NestedMessageDefaultTypeInternal() {}
  union {
    TestAllTypesLite_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesLite_NestedMessageDefaultTypeInternal _TestAllTypesLite_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesLite_NestedMessage2::TestAllTypesLite_NestedMessage2(
    ::_pbi::ConstantInitialized)
  : dd_(0){}
struct TestAllTypesLite_NestedMessage2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesLite_NestedMessage2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesLite_NestedMessage2DefaultTypeInternal() {}
  union {
    TestAllTypesLite_NestedMessage2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesLite_NestedMessage2DefaultTypeInternal _TestAllTypesLite_NestedMessage2_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesLite_OptionalGroup::TestAllTypesLite_OptionalGroup(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct TestAllTypesLite_OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesLite_OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesLite_OptionalGroupDefaultTypeInternal() {}
  union {
    TestAllTypesLite_OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesLite_OptionalGroupDefaultTypeInternal _TestAllTypesLite_OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesLite_RepeatedGroup::TestAllTypesLite_RepeatedGroup(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct TestAllTypesLite_RepeatedGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesLite_RepeatedGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesLite_RepeatedGroupDefaultTypeInternal() {}
  union {
    TestAllTypesLite_RepeatedGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesLite_RepeatedGroupDefaultTypeInternal _TestAllTypesLite_RepeatedGroup_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesLite::TestAllTypesLite(
    ::_pbi::ConstantInitialized)
  : repeated_int32_()
  , repeated_int64_()
  , repeated_uint32_()
  , repeated_uint64_()
  , repeated_sint32_()
  , repeated_sint64_()
  , repeated_fixed32_()
  , repeated_fixed64_()
  , repeated_sfixed32_()
  , repeated_sfixed64_()
  , repeated_float_()
  , repeated_double_()
  , repeated_bool_()
  , repeated_string_()
  , repeated_bytes_()
  , repeatedgroup_()
  , repeated_nested_message_()
  , repeated_foreign_message_()
  , repeated_import_message_()
  , repeated_nested_enum_()
  , repeated_foreign_enum_()
  , repeated_import_enum_()
  , repeated_string_piece_()
  , repeated_cord_()
  , repeated_lazy_message_()
  , optional_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_bytes_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_string_piece_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_cord_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , default_string_(nullptr, ::_pbi::ConstantInitialized{})
  , default_bytes_(nullptr, ::_pbi::ConstantInitialized{})
  , default_string_piece_(nullptr, ::_pbi::ConstantInitialized{})
  , default_cord_(nullptr, ::_pbi::ConstantInitialized{})
  , optionalgroup_(nullptr)
  , optional_nested_message_(nullptr)
  , optional_foreign_message_(nullptr)
  , optional_import_message_(nullptr)
  , optional_public_import_message_(nullptr)
  , optional_lazy_message_(nullptr)
  , optional_int64_(int64_t{0})
  , optional_int32_(0)
  , optional_uint32_(0u)
  , optional_uint64_(uint64_t{0u})
  , optional_sint64_(int64_t{0})
  , optional_sint32_(0)
  , optional_fixed32_(0u)
  , optional_fixed64_(uint64_t{0u})
  , optional_sfixed64_(int64_t{0})
  , optional_sfixed32_(0)
  , optional_float_(0)
  , optional_double_(0)
  , optional_bool_(false)
  , deceptively_named_list_(0)
  , default_import_enum_(8)

  , optional_nested_enum_(1)

  , optional_foreign_enum_(4)

  , optional_import_enum_(7)

  , default_int32_(41)
  , default_int64_(int64_t{42})
  , default_uint64_(uint64_t{44u})
  , default_uint32_(43u)
  , default_sint32_(-45)
  , default_sint64_(int64_t{46})
  , default_fixed64_(uint64_t{48u})
  , default_fixed32_(47u)
  , default_sfixed32_(49)
  , default_sfixed64_(int64_t{-50})
  , default_double_(52000)
  , default_float_(51.5f)
  , default_bool_(true)
  , default_nested_enum_(2)

  , default_foreign_enum_(5)

  , _oneof_case_{}{}
struct TestAllTypesLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesLiteDefaultTypeInternal() {}
  union {
    TestAllTypesLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesLiteDefaultTypeInternal _TestAllTypesLite_default_instance_;
PROTOBUF_CONSTEXPR ForeignMessageLite::ForeignMessageLite(
    ::_pbi::ConstantInitialized)
  : c_(0){}
struct ForeignMessageLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForeignMessageLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForeignMessageLiteDefaultTypeInternal() {}
  union {
    ForeignMessageLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForeignMessageLiteDefaultTypeInternal _ForeignMessageLite_default_instance_;
PROTOBUF_CONSTEXPR TestPackedTypesLite::TestPackedTypesLite(
    ::_pbi::ConstantInitialized)
  : packed_int32_()
  , _packed_int32_cached_byte_size_(0)
  , packed_int64_()
  , _packed_int64_cached_byte_size_(0)
  , packed_uint32_()
  , _packed_uint32_cached_byte_size_(0)
  , packed_uint64_()
  , _packed_uint64_cached_byte_size_(0)
  , packed_sint32_()
  , _packed_sint32_cached_byte_size_(0)
  , packed_sint64_()
  , _packed_sint64_cached_byte_size_(0)
  , packed_fixed32_()
  , packed_fixed64_()
  , packed_sfixed32_()
  , packed_sfixed64_()
  , packed_float_()
  , packed_double_()
  , packed_bool_()
  , packed_enum_()
  , _packed_enum_cached_byte_size_(0){}
struct TestPackedTypesLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPackedTypesLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPackedTypesLiteDefaultTypeInternal() {}
  union {
    TestPackedTypesLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPackedTypesLiteDefaultTypeInternal _TestPackedTypesLite_default_instance_;
PROTOBUF_CONSTEXPR TestAllExtensionsLite::TestAllExtensionsLite(
    ::_pbi::ConstantInitialized){}
struct TestAllExtensionsLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllExtensionsLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllExtensionsLiteDefaultTypeInternal() {}
  union {
    TestAllExtensionsLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllExtensionsLiteDefaultTypeInternal _TestAllExtensionsLite_default_instance_;
PROTOBUF_CONSTEXPR OptionalGroup_extension_lite::OptionalGroup_extension_lite(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct OptionalGroup_extension_liteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionalGroup_extension_liteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionalGroup_extension_liteDefaultTypeInternal() {}
  union {
    OptionalGroup_extension_lite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionalGroup_extension_liteDefaultTypeInternal _OptionalGroup_extension_lite_default_instance_;
PROTOBUF_CONSTEXPR RepeatedGroup_extension_lite::RepeatedGroup_extension_lite(
    ::_pbi::ConstantInitialized)
  : a_(0){}
struct RepeatedGroup_extension_liteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepeatedGroup_extension_liteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepeatedGroup_extension_liteDefaultTypeInternal() {}
  union {
    RepeatedGroup_extension_lite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepeatedGroup_extension_liteDefaultTypeInternal _RepeatedGroup_extension_lite_default_instance_;
PROTOBUF_CONSTEXPR TestPackedExtensionsLite::TestPackedExtensionsLite(
    ::_pbi::ConstantInitialized){}
struct TestPackedExtensionsLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPackedExtensionsLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPackedExtensionsLiteDefaultTypeInternal() {}
  union {
    TestPackedExtensionsLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPackedExtensionsLiteDefaultTypeInternal _TestPackedExtensionsLite_default_instance_;
PROTOBUF_CONSTEXPR TestNestedExtensionLite::TestNestedExtensionLite(
    ::_pbi::ConstantInitialized){}
struct TestNestedExtensionLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestNestedExtensionLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestNestedExtensionLiteDefaultTypeInternal() {}
  union {
    TestNestedExtensionLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestNestedExtensionLiteDefaultTypeInternal _TestNestedExtensionLite_default_instance_;
PROTOBUF_CONSTEXPR TestDeprecatedLite::TestDeprecatedLite(
    ::_pbi::ConstantInitialized)
  : deprecated_field3_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , deprecated_field4_(nullptr)
  , deprecated_field_(0)
  , deprecated_field2_(0){}
struct TestDeprecatedLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDeprecatedLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDeprecatedLiteDefaultTypeInternal() {}
  union {
    TestDeprecatedLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDeprecatedLiteDefaultTypeInternal _TestDeprecatedLite_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMergeLite_RepeatedFieldsGenerator_Group1::TestParsingMergeLite_RepeatedFieldsGenerator_Group1(
    ::_pbi::ConstantInitialized)
  : field1_(nullptr){}
struct TestParsingMergeLite_RepeatedFieldsGenerator_Group1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMergeLite_RepeatedFieldsGenerator_Group1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMergeLite_RepeatedFieldsGenerator_Group1DefaultTypeInternal() {}
  union {
    TestParsingMergeLite_RepeatedFieldsGenerator_Group1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMergeLite_RepeatedFieldsGenerator_Group1DefaultTypeInternal _TestParsingMergeLite_RepeatedFieldsGenerator_Group1_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMergeLite_RepeatedFieldsGenerator_Group2::TestParsingMergeLite_RepeatedFieldsGenerator_Group2(
    ::_pbi::ConstantInitialized)
  : field1_(nullptr){}
struct TestParsingMergeLite_RepeatedFieldsGenerator_Group2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMergeLite_RepeatedFieldsGenerator_Group2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMergeLite_RepeatedFieldsGenerator_Group2DefaultTypeInternal() {}
  union {
    TestParsingMergeLite_RepeatedFieldsGenerator_Group2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMergeLite_RepeatedFieldsGenerator_Group2DefaultTypeInternal _TestParsingMergeLite_RepeatedFieldsGenerator_Group2_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMergeLite_RepeatedFieldsGenerator::TestParsingMergeLite_RepeatedFieldsGenerator(
    ::_pbi::ConstantInitialized)
  : field1_()
  , field2_()
  , field3_()
  , group1_()
  , group2_()
  , ext1_()
  , ext2_(){}
struct TestParsingMergeLite_RepeatedFieldsGeneratorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMergeLite_RepeatedFieldsGeneratorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMergeLite_RepeatedFieldsGeneratorDefaultTypeInternal() {}
  union {
    TestParsingMergeLite_RepeatedFieldsGenerator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMergeLite_RepeatedFieldsGeneratorDefaultTypeInternal _TestParsingMergeLite_RepeatedFieldsGenerator_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMergeLite_OptionalGroup::TestParsingMergeLite_OptionalGroup(
    ::_pbi::ConstantInitialized)
  : optional_group_all_types_(nullptr){}
struct TestParsingMergeLite_OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMergeLite_OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMergeLite_OptionalGroupDefaultTypeInternal() {}
  union {
    TestParsingMergeLite_OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMergeLite_OptionalGroupDefaultTypeInternal _TestParsingMergeLite_OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMergeLite_RepeatedGroup::TestParsingMergeLite_RepeatedGroup(
    ::_pbi::ConstantInitialized)
  : repeated_group_all_types_(nullptr){}
struct TestParsingMergeLite_RepeatedGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMergeLite_RepeatedGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMergeLite_RepeatedGroupDefaultTypeInternal() {}
  union {
    TestParsingMergeLite_RepeatedGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMergeLite_RepeatedGroupDefaultTypeInternal _TestParsingMergeLite_RepeatedGroup_default_instance_;
PROTOBUF_CONSTEXPR TestParsingMergeLite::TestParsingMergeLite(
    ::_pbi::ConstantInitialized)
  : repeated_all_types_()
  , repeatedgroup_()
  , required_all_types_(nullptr)
  , optional_all_types_(nullptr)
  , optionalgroup_(nullptr){}
struct TestParsingMergeLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestParsingMergeLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestParsingMergeLiteDefaultTypeInternal() {}
  union {
    TestParsingMergeLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestParsingMergeLiteDefaultTypeInternal _TestParsingMergeLite_default_instance_;
PROTOBUF_CONSTEXPR TestMergeExceptionLite::TestMergeExceptionLite(
    ::_pbi::ConstantInitialized)
  : all_extensions_(nullptr){}
struct TestMergeExceptionLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMergeExceptionLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMergeExceptionLiteDefaultTypeInternal() {}
  union {
    TestMergeExceptionLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMergeExceptionLiteDefaultTypeInternal _TestMergeExceptionLite_default_instance_;
PROTOBUF_CONSTEXPR TestEmptyMessageLite::TestEmptyMessageLite(
    ::_pbi::ConstantInitialized){}
struct TestEmptyMessageLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEmptyMessageLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEmptyMessageLiteDefaultTypeInternal() {}
  union {
    TestEmptyMessageLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEmptyMessageLiteDefaultTypeInternal _TestEmptyMessageLite_default_instance_;
PROTOBUF_CONSTEXPR TestEmptyMessageWithExtensionsLite::TestEmptyMessageWithExtensionsLite(
    ::_pbi::ConstantInitialized){}
struct TestEmptyMessageWithExtensionsLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestEmptyMessageWithExtensionsLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestEmptyMessageWithExtensionsLiteDefaultTypeInternal() {}
  union {
    TestEmptyMessageWithExtensionsLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestEmptyMessageWithExtensionsLiteDefaultTypeInternal _TestEmptyMessageWithExtensionsLite_default_instance_;
PROTOBUF_CONSTEXPR V1MessageLite::V1MessageLite(
    ::_pbi::ConstantInitialized)
  : int_field_(0)
  , enum_field_(1)
{}
struct V1MessageLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V1MessageLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V1MessageLiteDefaultTypeInternal() {}
  union {
    V1MessageLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V1MessageLiteDefaultTypeInternal _V1MessageLite_default_instance_;
PROTOBUF_CONSTEXPR V2MessageLite::V2MessageLite(
    ::_pbi::ConstantInitialized)
  : int_field_(0)
  , enum_field_(1)
{}
struct V2MessageLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR V2MessageLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~V2MessageLiteDefaultTypeInternal() {}
  union {
    V2MessageLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 V2MessageLiteDefaultTypeInternal _V2MessageLite_default_instance_;
PROTOBUF_CONSTEXPR TestHugeFieldNumbersLite_OptionalGroup::TestHugeFieldNumbersLite_OptionalGroup(
    ::_pbi::ConstantInitialized)
  : group_a_(0){}
struct TestHugeFieldNumbersLite_OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestHugeFieldNumbersLite_OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestHugeFieldNumbersLite_OptionalGroupDefaultTypeInternal() {}
  union {
    TestHugeFieldNumbersLite_OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestHugeFieldNumbersLite_OptionalGroupDefaultTypeInternal _TestHugeFieldNumbersLite_OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse::TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUseDefaultTypeInternal _TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestHugeFieldNumbersLite::TestHugeFieldNumbersLite(
    ::_pbi::ConstantInitialized)
  : repeated_int32_()
  , packed_int32_()
  , _packed_int32_cached_byte_size_(0)
  , string_string_map_()
  , optional_string_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_bytes_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , optional_message_(nullptr)
  , optionalgroup_(nullptr)
  , optional_int32_(0)
  , fixed_32_(0)
  , optional_enum_(4)

  , _oneof_case_{}{}
struct TestHugeFieldNumbersLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestHugeFieldNumbersLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestHugeFieldNumbersLiteDefaultTypeInternal() {}
  union {
    TestHugeFieldNumbersLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestHugeFieldNumbersLiteDefaultTypeInternal _TestHugeFieldNumbersLite_default_instance_;
PROTOBUF_CONSTEXPR TestOneofParsingLite::TestOneofParsingLite(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct TestOneofParsingLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOneofParsingLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOneofParsingLiteDefaultTypeInternal() {}
  union {
    TestOneofParsingLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOneofParsingLiteDefaultTypeInternal _TestOneofParsingLite_default_instance_;
PROTOBUF_CONSTEXPR TestMessageSetLite::TestMessageSetLite(
    ::_pbi::ConstantInitialized){}
struct TestMessageSetLiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMessageSetLiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMessageSetLiteDefaultTypeInternal() {}
  union {
    TestMessageSetLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMessageSetLiteDefaultTypeInternal _TestMessageSetLite_default_instance_;
PROTOBUF_CONSTEXPR PackedInt32::PackedInt32(
    ::_pbi::ConstantInitialized)
  : repeated_int32_()
  , _repeated_int32_cached_byte_size_(0){}
struct PackedInt32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackedInt32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackedInt32DefaultTypeInternal() {}
  union {
    PackedInt32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackedInt32DefaultTypeInternal _PackedInt32_default_instance_;
PROTOBUF_CONSTEXPR NonPackedInt32::NonPackedInt32(
    ::_pbi::ConstantInitialized)
  : repeated_int32_(){}
struct NonPackedInt32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR NonPackedInt32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NonPackedInt32DefaultTypeInternal() {}
  union {
    NonPackedInt32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NonPackedInt32DefaultTypeInternal _NonPackedInt32_default_instance_;
PROTOBUF_CONSTEXPR PackedFixed32::PackedFixed32(
    ::_pbi::ConstantInitialized)
  : repeated_fixed32_(){}
struct PackedFixed32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackedFixed32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackedFixed32DefaultTypeInternal() {}
  union {
    PackedFixed32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackedFixed32DefaultTypeInternal _PackedFixed32_default_instance_;
PROTOBUF_CONSTEXPR NonPackedFixed32::NonPackedFixed32(
    ::_pbi::ConstantInitialized)
  : repeated_fixed32_(){}
struct NonPackedFixed32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR NonPackedFixed32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NonPackedFixed32DefaultTypeInternal() {}
  union {
    NonPackedFixed32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NonPackedFixed32DefaultTypeInternal _NonPackedFixed32_default_instance_;
PROTOBUF_CONSTEXPR DupEnum::DupEnum(
    ::_pbi::ConstantInitialized){}
struct DupEnumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DupEnumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DupEnumDefaultTypeInternal() {}
  union {
    DupEnum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DupEnumDefaultTypeInternal _DupEnum_default_instance_;
PROTOBUF_CONSTEXPR RecursiveMessage::RecursiveMessage(
    ::_pbi::ConstantInitialized)
  : payload_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , recurse_(nullptr){}
struct RecursiveMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecursiveMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecursiveMessageDefaultTypeInternal() {}
  union {
    RecursiveMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecursiveMessageDefaultTypeInternal _RecursiveMessage_default_instance_;
}  // namespace protobuf_unittest
namespace protobuf_unittest {
bool TestAllTypesLite_NestedEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TestAllTypesLite_NestedEnum_strings[3] = {};

static const char TestAllTypesLite_NestedEnum_names[] =
  "BAR"
  "BAZ"
  "FOO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TestAllTypesLite_NestedEnum_entries[] = {
  { {TestAllTypesLite_NestedEnum_names + 0, 3}, 2 },
  { {TestAllTypesLite_NestedEnum_names + 3, 3}, 3 },
  { {TestAllTypesLite_NestedEnum_names + 6, 3}, 1 },
};

static const int TestAllTypesLite_NestedEnum_entries_by_number[] = {
  2, // 1 -> FOO
  0, // 2 -> BAR
  1, // 3 -> BAZ
};

const std::string& TestAllTypesLite_NestedEnum_Name(
    TestAllTypesLite_NestedEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TestAllTypesLite_NestedEnum_entries,
          TestAllTypesLite_NestedEnum_entries_by_number,
          3, TestAllTypesLite_NestedEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TestAllTypesLite_NestedEnum_entries,
      TestAllTypesLite_NestedEnum_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TestAllTypesLite_NestedEnum_strings[idx].get();
}
bool TestAllTypesLite_NestedEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestAllTypesLite_NestedEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TestAllTypesLite_NestedEnum_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TestAllTypesLite_NestedEnum>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestAllTypesLite_NestedEnum TestAllTypesLite::FOO;
constexpr TestAllTypesLite_NestedEnum TestAllTypesLite::BAR;
constexpr TestAllTypesLite_NestedEnum TestAllTypesLite::BAZ;
constexpr TestAllTypesLite_NestedEnum TestAllTypesLite::NestedEnum_MIN;
constexpr TestAllTypesLite_NestedEnum TestAllTypesLite::NestedEnum_MAX;
constexpr int TestAllTypesLite::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DupEnum_TestEnumWithDupValueLite_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DupEnum_TestEnumWithDupValueLite_strings[3] = {};

static const char DupEnum_TestEnumWithDupValueLite_names[] =
  "BAR1"
  "BAR2"
  "BAZ"
  "FOO1"
  "FOO2";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DupEnum_TestEnumWithDupValueLite_entries[] = {
  { {DupEnum_TestEnumWithDupValueLite_names + 0, 4}, 2 },
  { {DupEnum_TestEnumWithDupValueLite_names + 4, 4}, 2 },
  { {DupEnum_TestEnumWithDupValueLite_names + 8, 3}, 3 },
  { {DupEnum_TestEnumWithDupValueLite_names + 11, 4}, 1 },
  { {DupEnum_TestEnumWithDupValueLite_names + 15, 4}, 1 },
};

static const int DupEnum_TestEnumWithDupValueLite_entries_by_number[] = {
  3, // 1 -> FOO1
  0, // 2 -> BAR1
  2, // 3 -> BAZ
};

const std::string& DupEnum_TestEnumWithDupValueLite_Name(
    DupEnum_TestEnumWithDupValueLite value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DupEnum_TestEnumWithDupValueLite_entries,
          DupEnum_TestEnumWithDupValueLite_entries_by_number,
          3, DupEnum_TestEnumWithDupValueLite_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DupEnum_TestEnumWithDupValueLite_entries,
      DupEnum_TestEnumWithDupValueLite_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DupEnum_TestEnumWithDupValueLite_strings[idx].get();
}
bool DupEnum_TestEnumWithDupValueLite_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DupEnum_TestEnumWithDupValueLite* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DupEnum_TestEnumWithDupValueLite_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DupEnum_TestEnumWithDupValueLite>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DupEnum_TestEnumWithDupValueLite DupEnum::FOO1;
constexpr DupEnum_TestEnumWithDupValueLite DupEnum::BAR1;
constexpr DupEnum_TestEnumWithDupValueLite DupEnum::BAZ;
constexpr DupEnum_TestEnumWithDupValueLite DupEnum::FOO2;
constexpr DupEnum_TestEnumWithDupValueLite DupEnum::BAR2;
constexpr DupEnum_TestEnumWithDupValueLite DupEnum::TestEnumWithDupValueLite_MIN;
constexpr DupEnum_TestEnumWithDupValueLite DupEnum::TestEnumWithDupValueLite_MAX;
constexpr int DupEnum::TestEnumWithDupValueLite_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ForeignEnumLite_IsValid(int value) {
  switch (value) {
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ForeignEnumLite_strings[3] = {};

static const char ForeignEnumLite_names[] =
  "FOREIGN_LITE_BAR"
  "FOREIGN_LITE_BAZ"
  "FOREIGN_LITE_FOO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ForeignEnumLite_entries[] = {
  { {ForeignEnumLite_names + 0, 16}, 5 },
  { {ForeignEnumLite_names + 16, 16}, 6 },
  { {ForeignEnumLite_names + 32, 16}, 4 },
};

static const int ForeignEnumLite_entries_by_number[] = {
  2, // 4 -> FOREIGN_LITE_FOO
  0, // 5 -> FOREIGN_LITE_BAR
  1, // 6 -> FOREIGN_LITE_BAZ
};

const std::string& ForeignEnumLite_Name(
    ForeignEnumLite value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ForeignEnumLite_entries,
          ForeignEnumLite_entries_by_number,
          3, ForeignEnumLite_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ForeignEnumLite_entries,
      ForeignEnumLite_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ForeignEnumLite_strings[idx].get();
}
bool ForeignEnumLite_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ForeignEnumLite* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ForeignEnumLite_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ForeignEnumLite>(int_value);
  }
  return success;
}
bool V1EnumLite_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> V1EnumLite_strings[1] = {};

static const char V1EnumLite_names[] =
  "V1_FIRST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry V1EnumLite_entries[] = {
  { {V1EnumLite_names + 0, 8}, 1 },
};

static const int V1EnumLite_entries_by_number[] = {
  0, // 1 -> V1_FIRST
};

const std::string& V1EnumLite_Name(
    V1EnumLite value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          V1EnumLite_entries,
          V1EnumLite_entries_by_number,
          1, V1EnumLite_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      V1EnumLite_entries,
      V1EnumLite_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     V1EnumLite_strings[idx].get();
}
bool V1EnumLite_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, V1EnumLite* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      V1EnumLite_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<V1EnumLite>(int_value);
  }
  return success;
}
bool V2EnumLite_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> V2EnumLite_strings[2] = {};

static const char V2EnumLite_names[] =
  "V2_FIRST"
  "V2_SECOND";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry V2EnumLite_entries[] = {
  { {V2EnumLite_names + 0, 8}, 1 },
  { {V2EnumLite_names + 8, 9}, 2 },
};

static const int V2EnumLite_entries_by_number[] = {
  0, // 1 -> V2_FIRST
  1, // 2 -> V2_SECOND
};

const std::string& V2EnumLite_Name(
    V2EnumLite value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          V2EnumLite_entries,
          V2EnumLite_entries_by_number,
          2, V2EnumLite_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      V2EnumLite_entries,
      V2EnumLite_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     V2EnumLite_strings[idx].get();
}
bool V2EnumLite_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, V2EnumLite* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      V2EnumLite_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<V2EnumLite>(int_value);
  }
  return success;
}

// ===================================================================

class TestAllTypesLite_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesLite_NestedMessage>()._has_bits_);
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypesLite_NestedMessage::TestAllTypesLite_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypesLite.NestedMessage)
}
TestAllTypesLite_NestedMessage::TestAllTypesLite_NestedMessage(const TestAllTypesLite_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&cc_, &from.cc_,
    static_cast<size_t>(reinterpret_cast<char*>(&bb_) -
    reinterpret_cast<char*>(&cc_)) + sizeof(bb_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypesLite.NestedMessage)
}

inline void TestAllTypesLite_NestedMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bb_) -
    reinterpret_cast<char*>(&cc_)) + sizeof(bb_));
}

TestAllTypesLite_NestedMessage::~TestAllTypesLite_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypesLite.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesLite_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypesLite_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypesLite_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypesLite.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bb_) -
        reinterpret_cast<char*>(&cc_)) + sizeof(bb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestAllTypesLite_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 cc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cc(&has_bits);
          cc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesLite_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypesLite.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bb = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  // optional int64 cc = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_cc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypesLite.NestedMessage)
  return target;
}

size_t TestAllTypesLite_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypesLite.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 cc = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cc());
    }

    // optional int32 bb = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesLite_NestedMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestAllTypesLite_NestedMessage*>(
      &from));
}

void TestAllTypesLite_NestedMessage::MergeFrom(const TestAllTypesLite_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypesLite.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cc_ = from.cc_;
    }
    if (cached_has_bits & 0x00000002u) {
      bb_ = from.bb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestAllTypesLite_NestedMessage::CopyFrom(const TestAllTypesLite_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypesLite.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite_NestedMessage::IsInitialized() const {
  return true;
}

void TestAllTypesLite_NestedMessage::InternalSwap(TestAllTypesLite_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesLite_NestedMessage, bb_)
      + sizeof(TestAllTypesLite_NestedMessage::bb_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesLite_NestedMessage, cc_)>(
          reinterpret_cast<char*>(&cc_),
          reinterpret_cast<char*>(&other->cc_));
}

std::string TestAllTypesLite_NestedMessage::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite.NestedMessage";
}


// ===================================================================

class TestAllTypesLite_NestedMessage2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesLite_NestedMessage2>()._has_bits_);
  static void set_has_dd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypesLite_NestedMessage2::TestAllTypesLite_NestedMessage2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypesLite.NestedMessage2)
}
TestAllTypesLite_NestedMessage2::TestAllTypesLite_NestedMessage2(const TestAllTypesLite_NestedMessage2& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  dd_ = from.dd_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypesLite.NestedMessage2)
}

inline void TestAllTypesLite_NestedMessage2::SharedCtor() {
dd_ = 0;
}

TestAllTypesLite_NestedMessage2::~TestAllTypesLite_NestedMessage2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypesLite.NestedMessage2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesLite_NestedMessage2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypesLite_NestedMessage2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypesLite_NestedMessage2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypesLite.NestedMessage2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestAllTypesLite_NestedMessage2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dd(&has_bits);
          dd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesLite_NestedMessage2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypesLite.NestedMessage2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypesLite.NestedMessage2)
  return target;
}

size_t TestAllTypesLite_NestedMessage2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypesLite.NestedMessage2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesLite_NestedMessage2::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestAllTypesLite_NestedMessage2*>(
      &from));
}

void TestAllTypesLite_NestedMessage2::MergeFrom(const TestAllTypesLite_NestedMessage2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypesLite.NestedMessage2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dd()) {
    _internal_set_dd(from._internal_dd());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestAllTypesLite_NestedMessage2::CopyFrom(const TestAllTypesLite_NestedMessage2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypesLite.NestedMessage2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite_NestedMessage2::IsInitialized() const {
  return true;
}

void TestAllTypesLite_NestedMessage2::InternalSwap(TestAllTypesLite_NestedMessage2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dd_, other->dd_);
}

std::string TestAllTypesLite_NestedMessage2::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite.NestedMessage2";
}


// ===================================================================

class TestAllTypesLite_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesLite_OptionalGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypesLite_OptionalGroup::TestAllTypesLite_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypesLite.OptionalGroup)
}
TestAllTypesLite_OptionalGroup::TestAllTypesLite_OptionalGroup(const TestAllTypesLite_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypesLite.OptionalGroup)
}

inline void TestAllTypesLite_OptionalGroup::SharedCtor() {
a_ = 0;
}

TestAllTypesLite_OptionalGroup::~TestAllTypesLite_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypesLite.OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesLite_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypesLite_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypesLite_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypesLite.OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestAllTypesLite_OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesLite_OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypesLite.OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypesLite.OptionalGroup)
  return target;
}

size_t TestAllTypesLite_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypesLite.OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesLite_OptionalGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestAllTypesLite_OptionalGroup*>(
      &from));
}

void TestAllTypesLite_OptionalGroup::MergeFrom(const TestAllTypesLite_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypesLite.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestAllTypesLite_OptionalGroup::CopyFrom(const TestAllTypesLite_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypesLite.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite_OptionalGroup::IsInitialized() const {
  return true;
}

void TestAllTypesLite_OptionalGroup::InternalSwap(TestAllTypesLite_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

std::string TestAllTypesLite_OptionalGroup::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite.OptionalGroup";
}


// ===================================================================

class TestAllTypesLite_RepeatedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesLite_RepeatedGroup>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypesLite_RepeatedGroup::TestAllTypesLite_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
}
TestAllTypesLite_RepeatedGroup::TestAllTypesLite_RepeatedGroup(const TestAllTypesLite_RepeatedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
}

inline void TestAllTypesLite_RepeatedGroup::SharedCtor() {
a_ = 0;
}

TestAllTypesLite_RepeatedGroup::~TestAllTypesLite_RepeatedGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesLite_RepeatedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypesLite_RepeatedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypesLite_RepeatedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestAllTypesLite_RepeatedGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesLite_RepeatedGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
  return target;
}

size_t TestAllTypesLite_RepeatedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 47;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesLite_RepeatedGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestAllTypesLite_RepeatedGroup*>(
      &from));
}

void TestAllTypesLite_RepeatedGroup::MergeFrom(const TestAllTypesLite_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestAllTypesLite_RepeatedGroup::CopyFrom(const TestAllTypesLite_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite_RepeatedGroup::IsInitialized() const {
  return true;
}

void TestAllTypesLite_RepeatedGroup::InternalSwap(TestAllTypesLite_RepeatedGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

std::string TestAllTypesLite_RepeatedGroup::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite.RepeatedGroup";
}


// ===================================================================

class TestAllTypesLite::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesLite>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_optional_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_optional_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_optional_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_optional_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_optional_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_optional_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_optional_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_optional_double(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestAllTypesLite_OptionalGroup& optionalgroup(const TestAllTypesLite* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::protobuf_unittest::TestAllTypesLite_NestedMessage& optional_nested_message(const TestAllTypesLite* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::protobuf_unittest::ForeignMessageLite& optional_foreign_message(const TestAllTypesLite* msg);
  static void set_has_optional_foreign_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::protobuf_unittest_import::ImportMessageLite& optional_import_message(const TestAllTypesLite* msg);
  static void set_has_optional_import_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_optional_nested_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_optional_foreign_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_optional_import_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_optional_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest_import::PublicImportMessageLite& optional_public_import_message(const TestAllTypesLite* msg);
  static void set_has_optional_public_import_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::protobuf_unittest::TestAllTypesLite_NestedMessage& optional_lazy_message(const TestAllTypesLite* msg);
  static void set_has_optional_lazy_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_default_int32(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_default_int64(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_default_uint32(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_default_uint64(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_default_sint32(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_default_sint64(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_default_fixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_default_fixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_default_sfixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_default_sfixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_default_float(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_default_double(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_default_bool(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_default_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_nested_enum(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_default_foreign_enum(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_default_import_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_default_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::protobuf_unittest::TestAllTypesLite_NestedMessage& oneof_nested_message(const TestAllTypesLite* msg);
  static const ::protobuf_unittest::TestAllTypesLite_NestedMessage& oneof_lazy_nested_message(const TestAllTypesLite* msg);
  static const ::protobuf_unittest::TestAllTypesLite_NestedMessage2& oneof_nested_message2(const TestAllTypesLite* msg);
  static void set_has_deceptively_named_list(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
};

const ::protobuf_unittest::TestAllTypesLite_OptionalGroup&
TestAllTypesLite::_Internal::optionalgroup(const TestAllTypesLite* msg) {
  return *msg->optionalgroup_;
}
const ::protobuf_unittest::TestAllTypesLite_NestedMessage&
TestAllTypesLite::_Internal::optional_nested_message(const TestAllTypesLite* msg) {
  return *msg->optional_nested_message_;
}
const ::protobuf_unittest::ForeignMessageLite&
TestAllTypesLite::_Internal::optional_foreign_message(const TestAllTypesLite* msg) {
  return *msg->optional_foreign_message_;
}
const ::protobuf_unittest_import::ImportMessageLite&
TestAllTypesLite::_Internal::optional_import_message(const TestAllTypesLite* msg) {
  return *msg->optional_import_message_;
}
const ::protobuf_unittest_import::PublicImportMessageLite&
TestAllTypesLite::_Internal::optional_public_import_message(const TestAllTypesLite* msg) {
  return *msg->optional_public_import_message_;
}
const ::protobuf_unittest::TestAllTypesLite_NestedMessage&
TestAllTypesLite::_Internal::optional_lazy_message(const TestAllTypesLite* msg) {
  return *msg->optional_lazy_message_;
}
const ::protobuf_unittest::TestAllTypesLite_NestedMessage&
TestAllTypesLite::_Internal::oneof_nested_message(const TestAllTypesLite* msg) {
  return *msg->oneof_field_.oneof_nested_message_;
}
const ::protobuf_unittest::TestAllTypesLite_NestedMessage&
TestAllTypesLite::_Internal::oneof_lazy_nested_message(const TestAllTypesLite* msg) {
  return *msg->oneof_field_.oneof_lazy_nested_message_;
}
const ::protobuf_unittest::TestAllTypesLite_NestedMessage2&
TestAllTypesLite::_Internal::oneof_nested_message2(const TestAllTypesLite* msg) {
  return *msg->oneof_field_.oneof_nested_message2_;
}
void TestAllTypesLite::clear_optional_import_message() {
  if (optional_import_message_ != nullptr) optional_import_message_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void TestAllTypesLite::clear_optional_public_import_message() {
  if (optional_public_import_message_ != nullptr) optional_public_import_message_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void TestAllTypesLite::clear_repeated_import_message() {
  repeated_import_message_.Clear();
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_{{{"hello", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_{{{"world", 5}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_{{{"abc", 3}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_{{{"123", 3}}, {nullptr}};
void TestAllTypesLite::set_allocated_oneof_nested_message(::protobuf_unittest::TestAllTypesLite_NestedMessage* oneof_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_nested_message);
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.oneof_nested_message)
}
void TestAllTypesLite::set_allocated_oneof_lazy_nested_message(::protobuf_unittest::TestAllTypesLite_NestedMessage* oneof_lazy_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_field();
  if (oneof_lazy_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_lazy_nested_message);
    if (message_arena != submessage_arena) {
      oneof_lazy_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_lazy_nested_message, submessage_arena);
    }
    set_has_oneof_lazy_nested_message();
    oneof_field_.oneof_lazy_nested_message_ = oneof_lazy_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.oneof_lazy_nested_message)
}
void TestAllTypesLite::set_allocated_oneof_nested_message2(::protobuf_unittest::TestAllTypesLite_NestedMessage2* oneof_nested_message2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_field();
  if (oneof_nested_message2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_nested_message2);
    if (message_arena != submessage_arena) {
      oneof_nested_message2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message2, submessage_arena);
    }
    set_has_oneof_nested_message2();
    oneof_field_.oneof_nested_message2_ = oneof_nested_message2;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.oneof_nested_message2)
}
TestAllTypesLite::TestAllTypesLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_sint32_(arena),
  repeated_sint64_(arena),
  repeated_fixed32_(arena),
  repeated_fixed64_(arena),
  repeated_sfixed32_(arena),
  repeated_sfixed64_(arena),
  repeated_float_(arena),
  repeated_double_(arena),
  repeated_bool_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeatedgroup_(arena),
  repeated_nested_message_(arena),
  repeated_foreign_message_(arena),
  repeated_import_message_(arena),
  repeated_nested_enum_(arena),
  repeated_foreign_enum_(arena),
  repeated_import_enum_(arena),
  repeated_string_piece_(arena),
  repeated_cord_(arena),
  repeated_lazy_message_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllTypesLite)
}
TestAllTypesLite::TestAllTypesLite(const TestAllTypesLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeatedgroup_(from.repeatedgroup_),
      repeated_nested_message_(from.repeated_nested_message_),
      repeated_foreign_message_(from.repeated_foreign_message_),
      repeated_import_message_(from.repeated_import_message_),
      repeated_nested_enum_(from.repeated_nested_enum_),
      repeated_foreign_enum_(from.repeated_foreign_enum_),
      repeated_import_enum_(from.repeated_import_enum_),
      repeated_string_piece_(from.repeated_string_piece_),
      repeated_cord_(from.repeated_cord_),
      repeated_lazy_message_(from.repeated_lazy_message_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string()) {
    optional_string_.Set(from._internal_optional_string(), 
      GetArenaForAllocation());
  }
  optional_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(from._internal_optional_bytes(), 
      GetArenaForAllocation());
  }
  optional_string_piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_string_piece_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string_piece()) {
    optional_string_piece_.Set(from._internal_optional_string_piece(), 
      GetArenaForAllocation());
  }
  optional_cord_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_cord_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_cord()) {
    optional_cord_.Set(from._internal_optional_cord(), 
      GetArenaForAllocation());
  }
  default_string_.InitDefault();
  if (from._internal_has_default_string()) {
    default_string_.Set(from._internal_default_string(), 
      GetArenaForAllocation());
  }
  default_bytes_.InitDefault();
  if (from._internal_has_default_bytes()) {
    default_bytes_.Set(from._internal_default_bytes(), 
      GetArenaForAllocation());
  }
  default_string_piece_.InitDefault();
  if (from._internal_has_default_string_piece()) {
    default_string_piece_.Set(from._internal_default_string_piece(), 
      GetArenaForAllocation());
  }
  default_cord_.InitDefault();
  if (from._internal_has_default_cord()) {
    default_cord_.Set(from._internal_default_cord(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestAllTypesLite_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_unittest::TestAllTypesLite_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  if (from._internal_has_optional_foreign_message()) {
    optional_foreign_message_ = new ::protobuf_unittest::ForeignMessageLite(*from.optional_foreign_message_);
  } else {
    optional_foreign_message_ = nullptr;
  }
  if (from._internal_has_optional_import_message()) {
    optional_import_message_ = new ::protobuf_unittest_import::ImportMessageLite(*from.optional_import_message_);
  } else {
    optional_import_message_ = nullptr;
  }
  if (from._internal_has_optional_public_import_message()) {
    optional_public_import_message_ = new ::protobuf_unittest_import::PublicImportMessageLite(*from.optional_public_import_message_);
  } else {
    optional_public_import_message_ = nullptr;
  }
  if (from._internal_has_optional_lazy_message()) {
    optional_lazy_message_ = new ::protobuf_unittest::TestAllTypesLite_NestedMessage(*from.optional_lazy_message_);
  } else {
    optional_lazy_message_ = nullptr;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_foreign_enum_) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(default_foreign_enum_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_unittest::TestAllTypesLite_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofLazyNestedMessage: {
      _internal_mutable_oneof_lazy_nested_message()->::protobuf_unittest::TestAllTypesLite_NestedMessage::MergeFrom(from._internal_oneof_lazy_nested_message());
      break;
    }
    case kOneofNestedMessage2: {
      _internal_mutable_oneof_nested_message2()->::protobuf_unittest::TestAllTypesLite_NestedMessage2::MergeFrom(from._internal_oneof_nested_message2());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllTypesLite)
}

inline void TestAllTypesLite::SharedCtor() {
optional_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_bytes_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_bytes_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_string_piece_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_string_piece_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_cord_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_cord_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
default_string_.InitDefault();
default_bytes_.InitDefault();
default_string_piece_.InitDefault();
default_cord_.InitDefault();
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optionalgroup_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deceptively_named_list_) -
    reinterpret_cast<char*>(&optionalgroup_)) + sizeof(deceptively_named_list_));
default_import_enum_ = 8;
optional_nested_enum_ = 1;
optional_foreign_enum_ = 4;
optional_import_enum_ = 7;
default_int32_ = 41;
default_int64_ = int64_t{42};
default_uint64_ = uint64_t{44u};
default_uint32_ = 43u;
default_sint32_ = -45;
default_sint64_ = int64_t{46};
default_fixed64_ = uint64_t{48u};
default_fixed32_ = 47u;
default_sfixed32_ = 49;
default_sfixed64_ = int64_t{-50};
default_double_ = 52000;
default_float_ = 51.5f;
default_bool_ = true;
default_nested_enum_ = 2;
default_foreign_enum_ = 5;
clear_has_oneof_field();
}

TestAllTypesLite::~TestAllTypesLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllTypesLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  optional_string_.Destroy();
  optional_bytes_.Destroy();
  optional_string_piece_.Destroy();
  optional_cord_.Destroy();
  default_string_.Destroy();
  default_bytes_.Destroy();
  default_string_piece_.Destroy();
  default_cord_.Destroy();
  if (this != internal_default_instance()) delete optionalgroup_;
  if (this != internal_default_instance()) delete optional_nested_message_;
  if (this != internal_default_instance()) delete optional_foreign_message_;
  if (this != internal_default_instance()) delete optional_import_message_;
  if (this != internal_default_instance()) delete optional_public_import_message_;
  if (this != internal_default_instance()) delete optional_lazy_message_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypesLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllTypesLite::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestAllTypesLite)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_field_.oneof_nested_message_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy();
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy();
      break;
    }
    case kOneofLazyNestedMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_field_.oneof_lazy_nested_message_;
      }
      break;
    }
    case kOneofNestedMessage2: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_field_.oneof_nested_message2_;
      }
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypesLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllTypesLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeatedgroup_.Clear();
  repeated_nested_message_.Clear();
  repeated_foreign_message_.Clear();
  repeated_import_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_foreign_enum_.Clear();
  repeated_import_enum_.Clear();
  repeated_string_piece_.Clear();
  repeated_cord_.Clear();
  repeated_lazy_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      optional_string_piece_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      optional_cord_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      default_string_.ClearToDefault(::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      default_bytes_.ClearToDefault(::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      default_string_piece_.ClearToDefault(::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000080u) {
      default_cord_.ClearToDefault(::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_, GetArenaForAllocation());
       }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(optional_nested_message_ != nullptr);
      optional_nested_message_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(optional_foreign_message_ != nullptr);
      optional_foreign_message_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(optional_import_message_ != nullptr);
      optional_import_message_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(optional_public_import_message_ != nullptr);
      optional_public_import_message_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(optional_lazy_message_ != nullptr);
      optional_lazy_message_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&optional_int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_int32_) -
        reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_int32_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&optional_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_sfixed32_) -
        reinterpret_cast<char*>(&optional_uint32_)) + sizeof(optional_sfixed32_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&optional_float_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deceptively_named_list_) -
        reinterpret_cast<char*>(&optional_float_)) + sizeof(deceptively_named_list_));
    default_import_enum_ = 8;
    optional_nested_enum_ = 1;
    optional_foreign_enum_ = 4;
    optional_import_enum_ = 7;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    default_int32_ = 41;
    default_int64_ = int64_t{42};
    default_uint64_ = uint64_t{44u};
    default_uint32_ = 43u;
    default_sint32_ = -45;
    default_sint64_ = int64_t{46};
    default_fixed64_ = uint64_t{48u};
    default_fixed32_ = 47u;
  }
  if (cached_has_bits & 0x00007f00u) {
    default_sfixed32_ = 49;
    default_sfixed64_ = int64_t{-50};
    default_double_ = 52000;
    default_float_ = 51.5f;
    default_bool_ = true;
    default_nested_enum_ = 2;
    default_foreign_enum_ = 5;
  }
  clear_oneof_field();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestAllTypesLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_optional_int32(&_has_bits_);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 optional_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_optional_int64(&_has_bits_);
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 optional_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_optional_uint32(&_has_bits_);
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_optional_uint64(&_has_bits_);
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 optional_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_optional_sint32(&_has_bits_);
          optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 optional_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_optional_sint64(&_has_bits_);
          optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 optional_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_optional_fixed32(&_has_bits_);
          optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 optional_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_optional_fixed64(&_has_bits_);
          optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 optional_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_optional_sfixed32(&_has_bits_);
          optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 optional_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_optional_sfixed64(&_has_bits_);
          optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional float optional_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_optional_float(&_has_bits_);
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double optional_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_optional_double(&_has_bits_);
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool optional_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_optional_bool(&_has_bits_);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group OptionalGroup = 16 { ... };
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 131)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 131);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_foreign_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_import_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(val))) {
            _internal_set_optional_nested_enum(static_cast<::protobuf_unittest::TestAllTypesLite_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnumLite_IsValid(val))) {
            _internal_set_optional_foreign_enum(static_cast<::protobuf_unittest::ForeignEnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnumLite_IsValid(val))) {
            _internal_set_optional_import_enum(static_cast<::protobuf_unittest_import::ImportEnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_optional_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string optional_cord = 25 [ctype = CORD];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_optional_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_public_import_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27 [lazy = true];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_lazy_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<301>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<305>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
            ptr += sizeof(int32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<317>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
            ptr += sizeof(int64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<321>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float repeated_float = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<333>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double repeated_double = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<337>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<344>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated group RepeatedGroup = 46 { ... };
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 115)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_repeatedgroup(), ptr, 371);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<371>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_foreign_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_import_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(val))) {
              _internal_add_repeated_nested_enum(static_cast<::protobuf_unittest::TestAllTypesLite_NestedEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<408>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_repeated_nested_enum(), ptr, ctx, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid, &_internal_metadata_, 51);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnumLite_IsValid(val))) {
              _internal_add_repeated_foreign_enum(static_cast<::protobuf_unittest::ForeignEnumLite>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<416>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_repeated_foreign_enum(), ptr, ctx, ::protobuf_unittest::ForeignEnumLite_IsValid, &_internal_metadata_, 52);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnumLite_IsValid(val))) {
              _internal_add_repeated_import_enum(static_cast<::protobuf_unittest_import::ImportEnumLite>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<424>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_repeated_import_enum(), ptr, ctx, ::protobuf_unittest_import::ImportEnumLite_IsValid, &_internal_metadata_, 53);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string_piece();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_cord = 55 [ctype = CORD];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_cord();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57 [lazy = true];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_lazy_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 default_int32 = 61 [default = 41];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_default_int32(&_has_bits_);
          default_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 default_int64 = 62 [default = 42];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_default_int64(&_has_bits_);
          default_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 default_uint32 = 63 [default = 43];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_default_uint32(&_has_bits_);
          default_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 default_uint64 = 64 [default = 44];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_default_uint64(&_has_bits_);
          default_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 default_sint32 = 65 [default = -45];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_default_sint32(&_has_bits_);
          default_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 default_sint64 = 66 [default = 46];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_default_sint64(&_has_bits_);
          default_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 default_fixed32 = 67 [default = 47];
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_default_fixed32(&_has_bits_);
          default_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 default_fixed64 = 68 [default = 48];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_default_fixed64(&_has_bits_);
          default_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 default_sfixed32 = 69 [default = 49];
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_default_sfixed32(&_has_bits_);
          default_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 default_sfixed64 = 70 [default = -50];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_default_sfixed64(&_has_bits_);
          default_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional float default_float = 71 [default = 51.5];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_default_float(&_has_bits_);
          default_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double default_double = 72 [default = 52000];
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_default_double(&_has_bits_);
          default_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool default_bool = 73 [default = true];
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_default_bool(&_has_bits_);
          default_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string default_string = 74 [default = "hello"];
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_default_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes default_bytes = 75 [default = "world"];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_default_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81 [default = BAR];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(val))) {
            _internal_set_default_nested_enum(static_cast<::protobuf_unittest::TestAllTypesLite_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(81, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnumLite default_foreign_enum = 82 [default = FOREIGN_LITE_BAR];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnumLite_IsValid(val))) {
            _internal_set_default_foreign_enum(static_cast<::protobuf_unittest::ForeignEnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(82, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest_import.ImportEnumLite default_import_enum = 83 [default = IMPORT_LITE_BAR];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest_import::ImportEnumLite_IsValid(val))) {
            _internal_set_default_import_enum(static_cast<::protobuf_unittest_import::ImportEnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(83, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_default_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string default_cord = 85 [default = "123", ctype = CORD];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_default_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestAllTypesLite.NestedMessage oneof_nested_message = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestAllTypesLite.NestedMessage oneof_lazy_nested_message = 115 [lazy = true];
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_lazy_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 deceptively_named_list = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_deceptively_named_list(&_has_bits_);
          deceptively_named_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestAllTypesLite.NestedMessage2 oneof_nested_message2 = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllTypesLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 1;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // optional int64 optional_int64 = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // optional uint32 optional_uint32 = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // optional uint64 optional_uint64 = 4;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // optional sint32 optional_sint32 = 5;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_optional_sint32(), target);
  }

  // optional sint64 optional_sint64 = 6;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(6, this->_internal_optional_sint64(), target);
  }

  // optional fixed32 optional_fixed32 = 7;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_optional_fixed32(), target);
  }

  // optional fixed64 optional_fixed64 = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_optional_fixed64(), target);
  }

  // optional sfixed32 optional_sfixed32 = 9;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_optional_sfixed32(), target);
  }

  // optional sfixed64 optional_sfixed64 = 10;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_optional_sfixed64(), target);
  }

  // optional float optional_float = 11;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_optional_float(), target);
  }

  // optional double optional_double = 12;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_optional_double(), target);
  }

  // optional bool optional_bool = 13;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_optional_bool(), target);
  }

  // optional string optional_string = 14;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_optional_bytes(), target);
  }

  // optional group OptionalGroup = 16 { ... };
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        16, _Internal::optionalgroup(this), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::optional_nested_message(this),
        _Internal::optional_nested_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::optional_foreign_message(this),
        _Internal::optional_foreign_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::optional_import_message(this),
        _Internal::optional_import_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_optional_nested_enum(), target);
  }

  // optional .protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  // optional .protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_optional_import_enum(), target);
  }

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_optional_string_piece(), target);
  }

  // optional string optional_cord = 25 [ctype = CORD];
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_optional_cord(), target);
  }

  // optional .protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::optional_public_import_message(this),
        _Internal::optional_public_import_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27 [lazy = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::optional_lazy_message(this),
        _Internal::optional_lazy_message(this).GetCachedSize(), target, stream);
  }

  // repeated int32 repeated_int32 = 31;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 32;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 33;
  for (int i = 0, n = this->_internal_repeated_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 34;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_repeated_uint64(i), target);
  }

  // repeated sint32 repeated_sint32 = 35;
  for (int i = 0, n = this->_internal_repeated_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(35, this->_internal_repeated_sint32(i), target);
  }

  // repeated sint64 repeated_sint64 = 36;
  for (int i = 0, n = this->_internal_repeated_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(36, this->_internal_repeated_sint64(i), target);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(37, this->_internal_repeated_fixed32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(38, this->_internal_repeated_fixed64(i), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  for (int i = 0, n = this->_internal_repeated_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(39, this->_internal_repeated_sfixed32(i), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  for (int i = 0, n = this->_internal_repeated_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(40, this->_internal_repeated_sfixed64(i), target);
  }

  // repeated float repeated_float = 41;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_repeated_float(i), target);
  }

  // repeated double repeated_double = 42;
  for (int i = 0, n = this->_internal_repeated_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_repeated_double(i), target);
  }

  // repeated bool repeated_bool = 43;
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_repeated_bool(i), target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    target = stream->WriteString(44, s, target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(45, s, target);
  }

  // repeated group RepeatedGroup = 46 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeatedgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(46, this->_internal_repeatedgroup(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_nested_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_foreign_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_foreign_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_import_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_import_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
  for (int i = 0, n = this->_internal_repeated_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        51, this->_internal_repeated_nested_enum(i), target);
  }

  // repeated .protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
  for (int i = 0, n = this->_internal_repeated_foreign_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        52, this->_internal_repeated_foreign_enum(i), target);
  }

  // repeated .protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
  for (int i = 0, n = this->_internal_repeated_import_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        53, this->_internal_repeated_import_enum(i), target);
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeated_string_piece_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string_piece(i);
    target = stream->WriteString(54, s, target);
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeated_cord_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_cord(i);
    target = stream->WriteString(55, s, target);
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57 [lazy = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_lazy_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_lazy_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(57, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 default_int32 = 61 [default = 41];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(61, this->_internal_default_int32(), target);
  }

  // optional int64 default_int64 = 62 [default = 42];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(62, this->_internal_default_int64(), target);
  }

  // optional uint32 default_uint32 = 63 [default = 43];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(63, this->_internal_default_uint32(), target);
  }

  // optional uint64 default_uint64 = 64 [default = 44];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(64, this->_internal_default_uint64(), target);
  }

  // optional sint32 default_sint32 = 65 [default = -45];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(65, this->_internal_default_sint32(), target);
  }

  // optional sint64 default_sint64 = 66 [default = 46];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(66, this->_internal_default_sint64(), target);
  }

  // optional fixed32 default_fixed32 = 67 [default = 47];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(67, this->_internal_default_fixed32(), target);
  }

  // optional fixed64 default_fixed64 = 68 [default = 48];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(68, this->_internal_default_fixed64(), target);
  }

  // optional sfixed32 default_sfixed32 = 69 [default = 49];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(69, this->_internal_default_sfixed32(), target);
  }

  // optional sfixed64 default_sfixed64 = 70 [default = -50];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(70, this->_internal_default_sfixed64(), target);
  }

  // optional float default_float = 71 [default = 51.5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(71, this->_internal_default_float(), target);
  }

  // optional double default_double = 72 [default = 52000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(72, this->_internal_default_double(), target);
  }

  // optional bool default_bool = 73 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_default_bool(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string default_string = 74 [default = "hello"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        74, this->_internal_default_string(), target);
  }

  // optional bytes default_bytes = 75 [default = "world"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        75, this->_internal_default_bytes(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81 [default = BAR];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      81, this->_internal_default_nested_enum(), target);
  }

  // optional .protobuf_unittest.ForeignEnumLite default_foreign_enum = 82 [default = FOREIGN_LITE_BAR];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      82, this->_internal_default_foreign_enum(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest_import.ImportEnumLite default_import_enum = 83 [default = IMPORT_LITE_BAR];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      83, this->_internal_default_import_enum(), target);
  }

  // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_default_string_piece(), target);
  }

  // optional string default_cord = 85 [default = "123", ctype = CORD];
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        85, this->_internal_default_cord(), target);
  }

  switch (oneof_field_case()) {
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(111, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofNestedMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(112, _Internal::oneof_nested_message(this),
          _Internal::oneof_nested_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kOneofString: {
      target = stream->WriteStringMaybeAliased(
          113, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          114, this->_internal_oneof_bytes(), target);
      break;
    }
    case kOneofLazyNestedMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(115, _Internal::oneof_lazy_nested_message(this),
          _Internal::oneof_lazy_nested_message(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional int32 deceptively_named_list = 116;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(116, this->_internal_deceptively_named_list(), target);
  }

  // .protobuf_unittest.TestAllTypesLite.NestedMessage2 oneof_nested_message2 = 117;
  if (_internal_has_oneof_nested_message2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, _Internal::oneof_nested_message2(this),
        _Internal::oneof_nested_message2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllTypesLite)
  return target;
}

size_t TestAllTypesLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllTypesLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sfixed64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_double_size());
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // repeated group RepeatedGroup = 46 { ... };
  total_size += 4UL * this->_internal_repeatedgroup_size();
  for (const auto& msg : this->repeatedgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
  total_size += 2UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
  total_size += 2UL * this->_internal_repeated_foreign_message_size();
  for (const auto& msg : this->repeated_foreign_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
  total_size += 2UL * this->_internal_repeated_import_message_size();
  for (const auto& msg : this->repeated_import_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeated_nested_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_foreign_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeated_foreign_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_import_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeated_import_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_piece_.size());
  for (int i = 0, n = repeated_string_piece_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_piece_.Get(i));
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_cord_.size());
  for (int i = 0, n = repeated_cord_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_cord_.Get(i));
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57 [lazy = true];
  total_size += 2UL * this->_internal_repeated_lazy_message_size();
  for (const auto& msg : this->repeated_lazy_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string optional_string = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string_piece());
    }

    // optional string optional_cord = 25 [ctype = CORD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_cord());
    }

    // optional string default_string = 74 [default = "hello"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_string());
    }

    // optional bytes default_bytes = 75 [default = "world"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_default_bytes());
    }

    // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_string_piece());
    }

    // optional string default_cord = 85 [default = "123", ctype = CORD];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_cord());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional group OptionalGroup = 16 { ... };
    if (cached_has_bits & 0x00000100u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_nested_message_);
    }

    // optional .protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_foreign_message_);
    }

    // optional .protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_import_message_);
    }

    // optional .protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_public_import_message_);
    }

    // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27 [lazy = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_lazy_message_);
    }

    // optional int64 optional_int64 = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optional_int64());
    }

    // optional int32 optional_int32 = 1;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_optional_int32());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 optional_uint32 = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_optional_uint32());
    }

    // optional uint64 optional_uint64 = 4;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_optional_uint64());
    }

    // optional sint64 optional_sint64 = 6;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_optional_sint64());
    }

    // optional sint32 optional_sint32 = 5;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_optional_sint32());
    }

    // optional fixed32 optional_fixed32 = 7;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional fixed64 optional_fixed64 = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 optional_sfixed64 = 10;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional sfixed32 optional_sfixed32 = 9;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float optional_float = 11;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional double optional_double = 12;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 8;
    }

    // optional bool optional_bool = 13;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional int32 deceptively_named_list = 116;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_deceptively_named_list());
    }

    // optional .protobuf_unittest_import.ImportEnumLite default_import_enum = 83 [default = IMPORT_LITE_BAR];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_default_import_enum());
    }

    // optional .protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_nested_enum());
    }

    // optional .protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
    }

    // optional .protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_import_enum());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 default_int32 = 61 [default = 41];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_default_int32());
    }

    // optional int64 default_int64 = 62 [default = 42];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_default_int64());
    }

    // optional uint64 default_uint64 = 64 [default = 44];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_default_uint64());
    }

    // optional uint32 default_uint32 = 63 [default = 43];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_default_uint32());
    }

    // optional sint32 default_sint32 = 65 [default = -45];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt32Size(
          this->_internal_default_sint32());
    }

    // optional sint64 default_sint64 = 66 [default = 46];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt64Size(
          this->_internal_default_sint64());
    }

    // optional fixed64 default_fixed64 = 68 [default = 48];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional fixed32 default_fixed32 = 67 [default = 47];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional sfixed32 default_sfixed32 = 69 [default = 49];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional sfixed64 default_sfixed64 = 70 [default = -50];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double default_double = 72 [default = 52000];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional float default_float = 71 [default = 51.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional bool default_bool = 73 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional .protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81 [default = BAR];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_default_nested_enum());
    }

    // optional .protobuf_unittest.ForeignEnumLite default_foreign_enum = 82 [default = FOREIGN_LITE_BAR];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_default_foreign_enum());
    }

  }
  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // .protobuf_unittest.TestAllTypesLite.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_nested_message_);
      break;
    }
    // string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    // .protobuf_unittest.TestAllTypesLite.NestedMessage oneof_lazy_nested_message = 115 [lazy = true];
    case kOneofLazyNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_lazy_nested_message_);
      break;
    }
    // .protobuf_unittest.TestAllTypesLite.NestedMessage2 oneof_nested_message2 = 117;
    case kOneofNestedMessage2: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_nested_message2_);
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllTypesLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestAllTypesLite*>(
      &from));
}

void TestAllTypesLite::MergeFrom(const TestAllTypesLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllTypesLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeatedgroup_.MergeFrom(from.repeatedgroup_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_foreign_message_.MergeFrom(from.repeated_foreign_message_);
  repeated_import_message_.MergeFrom(from.repeated_import_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_foreign_enum_.MergeFrom(from.repeated_foreign_enum_);
  repeated_import_enum_.MergeFrom(from.repeated_import_enum_);
  repeated_string_piece_.MergeFrom(from.repeated_string_piece_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  repeated_lazy_message_.MergeFrom(from.repeated_lazy_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_optional_string_piece(from._internal_optional_string_piece());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_optional_cord(from._internal_optional_cord());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_default_string(from._internal_default_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_default_bytes(from._internal_default_bytes());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_default_string_piece(from._internal_default_string_piece());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_default_cord(from._internal_default_cord());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestAllTypesLite_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_optional_nested_message()->::protobuf_unittest::TestAllTypesLite_NestedMessage::MergeFrom(from._internal_optional_nested_message());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_optional_foreign_message()->::protobuf_unittest::ForeignMessageLite::MergeFrom(from._internal_optional_foreign_message());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_optional_import_message()->::protobuf_unittest_import::ImportMessageLite::MergeFrom(from._internal_optional_import_message());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_optional_public_import_message()->::protobuf_unittest_import::PublicImportMessageLite::MergeFrom(from._internal_optional_public_import_message());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_optional_lazy_message()->::protobuf_unittest::TestAllTypesLite_NestedMessage::MergeFrom(from._internal_optional_lazy_message());
    }
    if (cached_has_bits & 0x00004000u) {
      optional_int64_ = from.optional_int64_;
    }
    if (cached_has_bits & 0x00008000u) {
      optional_int32_ = from.optional_int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      optional_uint32_ = from.optional_uint32_;
    }
    if (cached_has_bits & 0x00020000u) {
      optional_uint64_ = from.optional_uint64_;
    }
    if (cached_has_bits & 0x00040000u) {
      optional_sint64_ = from.optional_sint64_;
    }
    if (cached_has_bits & 0x00080000u) {
      optional_sint32_ = from.optional_sint32_;
    }
    if (cached_has_bits & 0x00100000u) {
      optional_fixed32_ = from.optional_fixed32_;
    }
    if (cached_has_bits & 0x00200000u) {
      optional_fixed64_ = from.optional_fixed64_;
    }
    if (cached_has_bits & 0x00400000u) {
      optional_sfixed64_ = from.optional_sfixed64_;
    }
    if (cached_has_bits & 0x00800000u) {
      optional_sfixed32_ = from.optional_sfixed32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      optional_float_ = from.optional_float_;
    }
    if (cached_has_bits & 0x02000000u) {
      optional_double_ = from.optional_double_;
    }
    if (cached_has_bits & 0x04000000u) {
      optional_bool_ = from.optional_bool_;
    }
    if (cached_has_bits & 0x08000000u) {
      deceptively_named_list_ = from.deceptively_named_list_;
    }
    if (cached_has_bits & 0x10000000u) {
      default_import_enum_ = from.default_import_enum_;
    }
    if (cached_has_bits & 0x20000000u) {
      optional_nested_enum_ = from.optional_nested_enum_;
    }
    if (cached_has_bits & 0x40000000u) {
      optional_foreign_enum_ = from.optional_foreign_enum_;
    }
    if (cached_has_bits & 0x80000000u) {
      optional_import_enum_ = from.optional_import_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      default_int32_ = from.default_int32_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_int64_ = from.default_int64_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_uint64_ = from.default_uint64_;
    }
    if (cached_has_bits & 0x00000008u) {
      default_uint32_ = from.default_uint32_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_sint32_ = from.default_sint32_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_sint64_ = from.default_sint64_;
    }
    if (cached_has_bits & 0x00000040u) {
      default_fixed64_ = from.default_fixed64_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_fixed32_ = from.default_fixed32_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      default_sfixed32_ = from.default_sfixed32_;
    }
    if (cached_has_bits & 0x00000200u) {
      default_sfixed64_ = from.default_sfixed64_;
    }
    if (cached_has_bits & 0x00000400u) {
      default_double_ = from.default_double_;
    }
    if (cached_has_bits & 0x00000800u) {
      default_float_ = from.default_float_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_bool_ = from.default_bool_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_nested_enum_ = from.default_nested_enum_;
    }
    if (cached_has_bits & 0x00004000u) {
      default_foreign_enum_ = from.default_foreign_enum_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _internal_mutable_oneof_nested_message()->::protobuf_unittest::TestAllTypesLite_NestedMessage::MergeFrom(from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofLazyNestedMessage: {
      _internal_mutable_oneof_lazy_nested_message()->::protobuf_unittest::TestAllTypesLite_NestedMessage::MergeFrom(from._internal_oneof_lazy_nested_message());
      break;
    }
    case kOneofNestedMessage2: {
      _internal_mutable_oneof_nested_message2()->::protobuf_unittest::TestAllTypesLite_NestedMessage2::MergeFrom(from._internal_oneof_nested_message2());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestAllTypesLite::CopyFrom(const TestAllTypesLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllTypesLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite::IsInitialized() const {
  return true;
}

void TestAllTypesLite::InternalSwap(TestAllTypesLite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeatedgroup_.InternalSwap(&other->repeatedgroup_);
  repeated_nested_message_.InternalSwap(&other->repeated_nested_message_);
  repeated_foreign_message_.InternalSwap(&other->repeated_foreign_message_);
  repeated_import_message_.InternalSwap(&other->repeated_import_message_);
  repeated_nested_enum_.InternalSwap(&other->repeated_nested_enum_);
  repeated_foreign_enum_.InternalSwap(&other->repeated_foreign_enum_);
  repeated_import_enum_.InternalSwap(&other->repeated_import_enum_);
  repeated_string_piece_.InternalSwap(&other->repeated_string_piece_);
  repeated_cord_.InternalSwap(&other->repeated_cord_);
  repeated_lazy_message_.InternalSwap(&other->repeated_lazy_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_string_, lhs_arena,
      &other->optional_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_bytes_, lhs_arena,
      &other->optional_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_string_piece_, lhs_arena,
      &other->optional_string_piece_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_cord_, lhs_arena,
      &other->optional_cord_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_string_, lhs_arena,
      &other->default_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_bytes_, lhs_arena,
      &other->default_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_string_piece_, lhs_arena,
      &other->default_string_piece_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &default_cord_, lhs_arena,
      &other->default_cord_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesLite, deceptively_named_list_)
      + sizeof(TestAllTypesLite::deceptively_named_list_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesLite, optionalgroup_)>(
          reinterpret_cast<char*>(&optionalgroup_),
          reinterpret_cast<char*>(&other->optionalgroup_));
  swap(default_import_enum_, other->default_import_enum_);
  swap(optional_nested_enum_, other->optional_nested_enum_);
  swap(optional_foreign_enum_, other->optional_foreign_enum_);
  swap(optional_import_enum_, other->optional_import_enum_);
  swap(default_int32_, other->default_int32_);
  swap(default_int64_, other->default_int64_);
  swap(default_uint64_, other->default_uint64_);
  swap(default_uint32_, other->default_uint32_);
  swap(default_sint32_, other->default_sint32_);
  swap(default_sint64_, other->default_sint64_);
  swap(default_fixed64_, other->default_fixed64_);
  swap(default_fixed32_, other->default_fixed32_);
  swap(default_sfixed32_, other->default_sfixed32_);
  swap(default_sfixed64_, other->default_sfixed64_);
  swap(default_double_, other->default_double_);
  swap(default_float_, other->default_float_);
  swap(default_bool_, other->default_bool_);
  swap(default_nested_enum_, other->default_nested_enum_);
  swap(default_foreign_enum_, other->default_foreign_enum_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TestAllTypesLite::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite";
}


// ===================================================================

class ForeignMessageLite::_Internal {
 public:
  using HasBits = decltype(std::declval<ForeignMessageLite>()._has_bits_);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ForeignMessageLite::ForeignMessageLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.ForeignMessageLite)
}
ForeignMessageLite::ForeignMessageLite(const ForeignMessageLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.ForeignMessageLite)
}

inline void ForeignMessageLite::SharedCtor() {
c_ = 0;
}

ForeignMessageLite::~ForeignMessageLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.ForeignMessageLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForeignMessageLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForeignMessageLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForeignMessageLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.ForeignMessageLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ForeignMessageLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForeignMessageLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.ForeignMessageLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.ForeignMessageLite)
  return target;
}

size_t ForeignMessageLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.ForeignMessageLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 c = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_c());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForeignMessageLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ForeignMessageLite*>(
      &from));
}

void ForeignMessageLite::MergeFrom(const ForeignMessageLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.ForeignMessageLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_c()) {
    _internal_set_c(from._internal_c());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ForeignMessageLite::CopyFrom(const ForeignMessageLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.ForeignMessageLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessageLite::IsInitialized() const {
  return true;
}

void ForeignMessageLite::InternalSwap(ForeignMessageLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(c_, other->c_);
}

std::string ForeignMessageLite::GetTypeName() const {
  return "protobuf_unittest.ForeignMessageLite";
}


// ===================================================================

class TestPackedTypesLite::_Internal {
 public:
};

TestPackedTypesLite::TestPackedTypesLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  packed_int32_(arena),
  packed_int64_(arena),
  packed_uint32_(arena),
  packed_uint64_(arena),
  packed_sint32_(arena),
  packed_sint64_(arena),
  packed_fixed32_(arena),
  packed_fixed64_(arena),
  packed_sfixed32_(arena),
  packed_sfixed64_(arena),
  packed_float_(arena),
  packed_double_(arena),
  packed_bool_(arena),
  packed_enum_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPackedTypesLite)
}
TestPackedTypesLite::TestPackedTypesLite(const TestPackedTypesLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      packed_int32_(from.packed_int32_),
      packed_int64_(from.packed_int64_),
      packed_uint32_(from.packed_uint32_),
      packed_uint64_(from.packed_uint64_),
      packed_sint32_(from.packed_sint32_),
      packed_sint64_(from.packed_sint64_),
      packed_fixed32_(from.packed_fixed32_),
      packed_fixed64_(from.packed_fixed64_),
      packed_sfixed32_(from.packed_sfixed32_),
      packed_sfixed64_(from.packed_sfixed64_),
      packed_float_(from.packed_float_),
      packed_double_(from.packed_double_),
      packed_bool_(from.packed_bool_),
      packed_enum_(from.packed_enum_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPackedTypesLite)
}

inline void TestPackedTypesLite::SharedCtor() {
}

TestPackedTypesLite::~TestPackedTypesLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPackedTypesLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestPackedTypesLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestPackedTypesLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestPackedTypesLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPackedTypesLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packed_int32_.Clear();
  packed_int64_.Clear();
  packed_uint32_.Clear();
  packed_uint64_.Clear();
  packed_sint32_.Clear();
  packed_sint64_.Clear();
  packed_fixed32_.Clear();
  packed_fixed64_.Clear();
  packed_sfixed32_.Clear();
  packed_sfixed64_.Clear();
  packed_float_.Clear();
  packed_double_.Clear();
  packed_bool_.Clear();
  packed_enum_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestPackedTypesLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 packed_int32 = 90 [packed = true];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 208) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 packed_int64 = 91 [packed = true];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packed_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 216) {
          _internal_add_packed_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 packed_uint32 = 92 [packed = true];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 224) {
          _internal_add_packed_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 packed_uint64 = 93 [packed = true];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packed_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 232) {
          _internal_add_packed_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 packed_sint32 = 94 [packed = true];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 240) {
          _internal_add_packed_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 packed_sint64 = 95 [packed = true];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_packed_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 248) {
          _internal_add_packed_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 packed_fixed32 = 96 [packed = true];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_packed_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 5) {
          _internal_add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 packed_fixed64 = 97 [packed = true];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_packed_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_packed_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_packed_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated float packed_float = 100 [packed = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_packed_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_packed_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated double packed_double = 101 [packed = true];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_packed_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_packed_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated bool packed_bool = 102 [packed = true];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_packed_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_packed_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_packed_enum(), ptr, ctx, ::protobuf_unittest::ForeignEnumLite_IsValid, &_internal_metadata_, 103);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnumLite_IsValid(val))) {
            _internal_add_packed_enum(static_cast<::protobuf_unittest::ForeignEnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(103, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestPackedTypesLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPackedTypesLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          90, _internal_packed_int32(), byte_size, target);
    }
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    int byte_size = _packed_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          91, _internal_packed_int64(), byte_size, target);
    }
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    int byte_size = _packed_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          92, _internal_packed_uint32(), byte_size, target);
    }
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    int byte_size = _packed_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          93, _internal_packed_uint64(), byte_size, target);
    }
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    int byte_size = _packed_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          94, _internal_packed_sint32(), byte_size, target);
    }
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    int byte_size = _packed_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          95, _internal_packed_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  if (this->_internal_packed_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(96, _internal_packed_fixed32(), target);
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  if (this->_internal_packed_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(97, _internal_packed_fixed64(), target);
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  if (this->_internal_packed_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(98, _internal_packed_sfixed32(), target);
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  if (this->_internal_packed_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(99, _internal_packed_sfixed64(), target);
  }

  // repeated float packed_float = 100 [packed = true];
  if (this->_internal_packed_float_size() > 0) {
    target = stream->WriteFixedPacked(100, _internal_packed_float(), target);
  }

  // repeated double packed_double = 101 [packed = true];
  if (this->_internal_packed_double_size() > 0) {
    target = stream->WriteFixedPacked(101, _internal_packed_double(), target);
  }

  // repeated bool packed_bool = 102 [packed = true];
  if (this->_internal_packed_bool_size() > 0) {
    target = stream->WriteFixedPacked(102, _internal_packed_bool(), target);
  }

  // repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
  {
    int byte_size = _packed_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          103, packed_enum_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPackedTypesLite)
  return target;
}

size_t TestPackedTypesLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPackedTypesLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->packed_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->packed_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->packed_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->packed_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->packed_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float packed_float = 100 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double packed_double = 101 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool packed_bool = 102 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_packed_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPackedTypesLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestPackedTypesLite*>(
      &from));
}

void TestPackedTypesLite::MergeFrom(const TestPackedTypesLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPackedTypesLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  packed_int32_.MergeFrom(from.packed_int32_);
  packed_int64_.MergeFrom(from.packed_int64_);
  packed_uint32_.MergeFrom(from.packed_uint32_);
  packed_uint64_.MergeFrom(from.packed_uint64_);
  packed_sint32_.MergeFrom(from.packed_sint32_);
  packed_sint64_.MergeFrom(from.packed_sint64_);
  packed_fixed32_.MergeFrom(from.packed_fixed32_);
  packed_fixed64_.MergeFrom(from.packed_fixed64_);
  packed_sfixed32_.MergeFrom(from.packed_sfixed32_);
  packed_sfixed64_.MergeFrom(from.packed_sfixed64_);
  packed_float_.MergeFrom(from.packed_float_);
  packed_double_.MergeFrom(from.packed_double_);
  packed_bool_.MergeFrom(from.packed_bool_);
  packed_enum_.MergeFrom(from.packed_enum_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestPackedTypesLite::CopyFrom(const TestPackedTypesLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPackedTypesLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedTypesLite::IsInitialized() const {
  return true;
}

void TestPackedTypesLite::InternalSwap(TestPackedTypesLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  packed_int32_.InternalSwap(&other->packed_int32_);
  packed_int64_.InternalSwap(&other->packed_int64_);
  packed_uint32_.InternalSwap(&other->packed_uint32_);
  packed_uint64_.InternalSwap(&other->packed_uint64_);
  packed_sint32_.InternalSwap(&other->packed_sint32_);
  packed_sint64_.InternalSwap(&other->packed_sint64_);
  packed_fixed32_.InternalSwap(&other->packed_fixed32_);
  packed_fixed64_.InternalSwap(&other->packed_fixed64_);
  packed_sfixed32_.InternalSwap(&other->packed_sfixed32_);
  packed_sfixed64_.InternalSwap(&other->packed_sfixed64_);
  packed_float_.InternalSwap(&other->packed_float_);
  packed_double_.InternalSwap(&other->packed_double_);
  packed_bool_.InternalSwap(&other->packed_bool_);
  packed_enum_.InternalSwap(&other->packed_enum_);
}

std::string TestPackedTypesLite::GetTypeName() const {
  return "protobuf_unittest.TestPackedTypesLite";
}


// ===================================================================

class TestAllExtensionsLite::_Internal {
 public:
};

TestAllExtensionsLite::TestAllExtensionsLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestAllExtensionsLite)
}
TestAllExtensionsLite::TestAllExtensionsLite(const TestAllExtensionsLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestAllExtensionsLite)
}

inline void TestAllExtensionsLite::SharedCtor() {
}

TestAllExtensionsLite::~TestAllExtensionsLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestAllExtensionsLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllExtensionsLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllExtensionsLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestAllExtensionsLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestAllExtensionsLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestAllExtensionsLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllExtensionsLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestAllExtensionsLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestAllExtensionsLite)
  return target;
}

size_t TestAllExtensionsLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestAllExtensionsLite)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAllExtensionsLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestAllExtensionsLite*>(
      &from));
}

void TestAllExtensionsLite::MergeFrom(const TestAllExtensionsLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestAllExtensionsLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestAllExtensionsLite::CopyFrom(const TestAllExtensionsLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestAllExtensionsLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllExtensionsLite::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestAllExtensionsLite::InternalSwap(TestAllExtensionsLite* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string TestAllExtensionsLite::GetTypeName() const {
  return "protobuf_unittest.TestAllExtensionsLite";
}


// ===================================================================

class OptionalGroup_extension_lite::_Internal {
 public:
  using HasBits = decltype(std::declval<OptionalGroup_extension_lite>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OptionalGroup_extension_lite::OptionalGroup_extension_lite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.OptionalGroup_extension_lite)
}
OptionalGroup_extension_lite::OptionalGroup_extension_lite(const OptionalGroup_extension_lite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.OptionalGroup_extension_lite)
}

inline void OptionalGroup_extension_lite::SharedCtor() {
a_ = 0;
}

OptionalGroup_extension_lite::~OptionalGroup_extension_lite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.OptionalGroup_extension_lite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionalGroup_extension_lite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OptionalGroup_extension_lite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OptionalGroup_extension_lite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.OptionalGroup_extension_lite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OptionalGroup_extension_lite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionalGroup_extension_lite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.OptionalGroup_extension_lite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.OptionalGroup_extension_lite)
  return target;
}

size_t OptionalGroup_extension_lite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.OptionalGroup_extension_lite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionalGroup_extension_lite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OptionalGroup_extension_lite*>(
      &from));
}

void OptionalGroup_extension_lite::MergeFrom(const OptionalGroup_extension_lite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.OptionalGroup_extension_lite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OptionalGroup_extension_lite::CopyFrom(const OptionalGroup_extension_lite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.OptionalGroup_extension_lite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalGroup_extension_lite::IsInitialized() const {
  return true;
}

void OptionalGroup_extension_lite::InternalSwap(OptionalGroup_extension_lite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

std::string OptionalGroup_extension_lite::GetTypeName() const {
  return "protobuf_unittest.OptionalGroup_extension_lite";
}


// ===================================================================

class RepeatedGroup_extension_lite::_Internal {
 public:
  using HasBits = decltype(std::declval<RepeatedGroup_extension_lite>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RepeatedGroup_extension_lite::RepeatedGroup_extension_lite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.RepeatedGroup_extension_lite)
}
RepeatedGroup_extension_lite::RepeatedGroup_extension_lite(const RepeatedGroup_extension_lite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.RepeatedGroup_extension_lite)
}

inline void RepeatedGroup_extension_lite::SharedCtor() {
a_ = 0;
}

RepeatedGroup_extension_lite::~RepeatedGroup_extension_lite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.RepeatedGroup_extension_lite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepeatedGroup_extension_lite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepeatedGroup_extension_lite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RepeatedGroup_extension_lite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.RepeatedGroup_extension_lite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RepeatedGroup_extension_lite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepeatedGroup_extension_lite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.RepeatedGroup_extension_lite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.RepeatedGroup_extension_lite)
  return target;
}

size_t RepeatedGroup_extension_lite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.RepeatedGroup_extension_lite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 47;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedGroup_extension_lite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RepeatedGroup_extension_lite*>(
      &from));
}

void RepeatedGroup_extension_lite::MergeFrom(const RepeatedGroup_extension_lite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.RepeatedGroup_extension_lite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RepeatedGroup_extension_lite::CopyFrom(const RepeatedGroup_extension_lite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.RepeatedGroup_extension_lite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedGroup_extension_lite::IsInitialized() const {
  return true;
}

void RepeatedGroup_extension_lite::InternalSwap(RepeatedGroup_extension_lite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

std::string RepeatedGroup_extension_lite::GetTypeName() const {
  return "protobuf_unittest.RepeatedGroup_extension_lite";
}


// ===================================================================

class TestPackedExtensionsLite::_Internal {
 public:
};

TestPackedExtensionsLite::TestPackedExtensionsLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestPackedExtensionsLite)
}
TestPackedExtensionsLite::TestPackedExtensionsLite(const TestPackedExtensionsLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestPackedExtensionsLite)
}

inline void TestPackedExtensionsLite::SharedCtor() {
}

TestPackedExtensionsLite::~TestPackedExtensionsLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestPackedExtensionsLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestPackedExtensionsLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestPackedExtensionsLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestPackedExtensionsLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestPackedExtensionsLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestPackedExtensionsLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestPackedExtensionsLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestPackedExtensionsLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestPackedExtensionsLite)
  return target;
}

size_t TestPackedExtensionsLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestPackedExtensionsLite)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPackedExtensionsLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestPackedExtensionsLite*>(
      &from));
}

void TestPackedExtensionsLite::MergeFrom(const TestPackedExtensionsLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestPackedExtensionsLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestPackedExtensionsLite::CopyFrom(const TestPackedExtensionsLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestPackedExtensionsLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedExtensionsLite::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestPackedExtensionsLite::InternalSwap(TestPackedExtensionsLite* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string TestPackedExtensionsLite::GetTypeName() const {
  return "protobuf_unittest.TestPackedExtensionsLite";
}


// ===================================================================

class TestNestedExtensionLite::_Internal {
 public:
};

TestNestedExtensionLite::TestNestedExtensionLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestNestedExtensionLite)
}
TestNestedExtensionLite::TestNestedExtensionLite(const TestNestedExtensionLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestNestedExtensionLite)
}

inline void TestNestedExtensionLite::SharedCtor() {
}

TestNestedExtensionLite::~TestNestedExtensionLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestNestedExtensionLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestNestedExtensionLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestNestedExtensionLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestNestedExtensionLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestNestedExtensionLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* TestNestedExtensionLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestNestedExtensionLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestNestedExtensionLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestNestedExtensionLite)
  return target;
}

size_t TestNestedExtensionLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestNestedExtensionLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestNestedExtensionLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestNestedExtensionLite*>(
      &from));
}

void TestNestedExtensionLite::MergeFrom(const TestNestedExtensionLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestNestedExtensionLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestNestedExtensionLite::CopyFrom(const TestNestedExtensionLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestNestedExtensionLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedExtensionLite::IsInitialized() const {
  return true;
}

void TestNestedExtensionLite::InternalSwap(TestNestedExtensionLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string TestNestedExtensionLite::GetTypeName() const {
  return "protobuf_unittest.TestNestedExtensionLite";
}


// ===================================================================

class TestDeprecatedLite::_Internal {
 public:
  using HasBits = decltype(std::declval<TestDeprecatedLite>()._has_bits_);
  static void set_has_deprecated_field(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deprecated_field2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deprecated_field3(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestDeprecatedLite& deprecated_field4(const TestDeprecatedLite* msg);
  static void set_has_deprecated_field4(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::protobuf_unittest::TestDeprecatedLite&
TestDeprecatedLite::_Internal::deprecated_field4(const TestDeprecatedLite* msg) {
  return *msg->deprecated_field4_;
}
TestDeprecatedLite::TestDeprecatedLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestDeprecatedLite)
}
TestDeprecatedLite::TestDeprecatedLite(const TestDeprecatedLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  deprecated_field3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deprecated_field3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deprecated_field3()) {
    deprecated_field3_.Set(from._internal_deprecated_field3(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_deprecated_field4()) {
    deprecated_field4_ = new ::protobuf_unittest::TestDeprecatedLite(*from.deprecated_field4_);
  } else {
    deprecated_field4_ = nullptr;
  }
  ::memcpy(&deprecated_field_, &from.deprecated_field_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_field2_) -
    reinterpret_cast<char*>(&deprecated_field_)) + sizeof(deprecated_field2_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestDeprecatedLite)
}

inline void TestDeprecatedLite::SharedCtor() {
deprecated_field3_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deprecated_field3_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deprecated_field4_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_field2_) -
    reinterpret_cast<char*>(&deprecated_field4_)) + sizeof(deprecated_field2_));
}

TestDeprecatedLite::~TestDeprecatedLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestDeprecatedLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestDeprecatedLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deprecated_field3_.Destroy();
  if (this != internal_default_instance()) delete deprecated_field4_;
}

void TestDeprecatedLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDeprecatedLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestDeprecatedLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      deprecated_field3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(deprecated_field4_ != nullptr);
      deprecated_field4_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&deprecated_field_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_field2_) -
        reinterpret_cast<char*>(&deprecated_field_)) + sizeof(deprecated_field2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestDeprecatedLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 deprecated_field = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_deprecated_field(&has_bits);
          deprecated_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 deprecated_field2 = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deprecated_field2(&has_bits);
          deprecated_field2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deprecated_field3 = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_deprecated_field3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestDeprecatedLite deprecated_field4 = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_field4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDeprecatedLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestDeprecatedLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 deprecated_field = 1 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_deprecated_field(), target);
  }

  // required int32 deprecated_field2 = 2 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_deprecated_field2(), target);
  }

  // optional string deprecated_field3 = 3 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deprecated_field3(), target);
  }

  // optional .protobuf_unittest.TestDeprecatedLite deprecated_field4 = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::deprecated_field4(this),
        _Internal::deprecated_field4(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestDeprecatedLite)
  return target;
}

size_t TestDeprecatedLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestDeprecatedLite)
  size_t total_size = 0;

  // required int32 deprecated_field2 = 2 [deprecated = true];
  if (_internal_has_deprecated_field2()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deprecated_field2());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string deprecated_field3 = 3 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deprecated_field3());
    }

    // optional .protobuf_unittest.TestDeprecatedLite deprecated_field4 = 4 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_field4_);
    }

    // optional int32 deprecated_field = 1 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deprecated_field());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDeprecatedLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestDeprecatedLite*>(
      &from));
}

void TestDeprecatedLite::MergeFrom(const TestDeprecatedLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestDeprecatedLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_deprecated_field3(from._internal_deprecated_field3());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_deprecated_field4()->::protobuf_unittest::TestDeprecatedLite::MergeFrom(from._internal_deprecated_field4());
    }
    if (cached_has_bits & 0x00000004u) {
      deprecated_field_ = from.deprecated_field_;
    }
    if (cached_has_bits & 0x00000008u) {
      deprecated_field2_ = from.deprecated_field2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestDeprecatedLite::CopyFrom(const TestDeprecatedLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestDeprecatedLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDeprecatedLite::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_deprecated_field4()) {
    if (!deprecated_field4_->IsInitialized()) return false;
  }
  return true;
}

void TestDeprecatedLite::InternalSwap(TestDeprecatedLite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &deprecated_field3_, lhs_arena,
      &other->deprecated_field3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestDeprecatedLite, deprecated_field2_)
      + sizeof(TestDeprecatedLite::deprecated_field2_)
      - PROTOBUF_FIELD_OFFSET(TestDeprecatedLite, deprecated_field4_)>(
          reinterpret_cast<char*>(&deprecated_field4_),
          reinterpret_cast<char*>(&other->deprecated_field4_));
}

std::string TestDeprecatedLite::GetTypeName() const {
  return "protobuf_unittest.TestDeprecatedLite";
}


// ===================================================================

class TestParsingMergeLite_RepeatedFieldsGenerator_Group1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMergeLite_RepeatedFieldsGenerator_Group1>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypesLite& field1(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1* msg);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypesLite&
TestParsingMergeLite_RepeatedFieldsGenerator_Group1::_Internal::field1(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1* msg) {
  return *msg->field1_;
}
TestParsingMergeLite_RepeatedFieldsGenerator_Group1::TestParsingMergeLite_RepeatedFieldsGenerator_Group1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
}
TestParsingMergeLite_RepeatedFieldsGenerator_Group1::TestParsingMergeLite_RepeatedFieldsGenerator_Group1(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_field1()) {
    field1_ = new ::protobuf_unittest::TestAllTypesLite(*from.field1_);
  } else {
    field1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
}

inline void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::SharedCtor() {
field1_ = nullptr;
}

TestParsingMergeLite_RepeatedFieldsGenerator_Group1::~TestParsingMergeLite_RepeatedFieldsGenerator_Group1() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete field1_;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field1_ != nullptr);
    field1_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestParsingMergeLite_RepeatedFieldsGenerator_Group1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypesLite field1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_field1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMergeLite_RepeatedFieldsGenerator_Group1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypesLite field1 = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::field1(this),
        _Internal::field1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
  return target;
}

size_t TestParsingMergeLite_RepeatedFieldsGenerator_Group1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypesLite field1 = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestParsingMergeLite_RepeatedFieldsGenerator_Group1*>(
      &from));
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_field1()) {
    _internal_mutable_field1()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_field1());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_RepeatedFieldsGenerator_Group1::IsInitialized() const {
  return true;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::InternalSwap(TestParsingMergeLite_RepeatedFieldsGenerator_Group1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field1_, other->field1_);
}

std::string TestParsingMergeLite_RepeatedFieldsGenerator_Group1::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1";
}


// ===================================================================

class TestParsingMergeLite_RepeatedFieldsGenerator_Group2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMergeLite_RepeatedFieldsGenerator_Group2>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypesLite& field1(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2* msg);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypesLite&
TestParsingMergeLite_RepeatedFieldsGenerator_Group2::_Internal::field1(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2* msg) {
  return *msg->field1_;
}
TestParsingMergeLite_RepeatedFieldsGenerator_Group2::TestParsingMergeLite_RepeatedFieldsGenerator_Group2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
}
TestParsingMergeLite_RepeatedFieldsGenerator_Group2::TestParsingMergeLite_RepeatedFieldsGenerator_Group2(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_field1()) {
    field1_ = new ::protobuf_unittest::TestAllTypesLite(*from.field1_);
  } else {
    field1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
}

inline void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::SharedCtor() {
field1_ = nullptr;
}

TestParsingMergeLite_RepeatedFieldsGenerator_Group2::~TestParsingMergeLite_RepeatedFieldsGenerator_Group2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete field1_;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field1_ != nullptr);
    field1_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestParsingMergeLite_RepeatedFieldsGenerator_Group2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypesLite field1 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_field1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMergeLite_RepeatedFieldsGenerator_Group2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypesLite field1 = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::field1(this),
        _Internal::field1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
  return target;
}

size_t TestParsingMergeLite_RepeatedFieldsGenerator_Group2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypesLite field1 = 21;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestParsingMergeLite_RepeatedFieldsGenerator_Group2*>(
      &from));
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_field1()) {
    _internal_mutable_field1()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_field1());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_RepeatedFieldsGenerator_Group2::IsInitialized() const {
  return true;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::InternalSwap(TestParsingMergeLite_RepeatedFieldsGenerator_Group2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field1_, other->field1_);
}

std::string TestParsingMergeLite_RepeatedFieldsGenerator_Group2::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2";
}


// ===================================================================

class TestParsingMergeLite_RepeatedFieldsGenerator::_Internal {
 public:
};

TestParsingMergeLite_RepeatedFieldsGenerator::TestParsingMergeLite_RepeatedFieldsGenerator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  field1_(arena),
  field2_(arena),
  field3_(arena),
  group1_(arena),
  group2_(arena),
  ext1_(arena),
  ext2_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
}
TestParsingMergeLite_RepeatedFieldsGenerator::TestParsingMergeLite_RepeatedFieldsGenerator(const TestParsingMergeLite_RepeatedFieldsGenerator& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      field1_(from.field1_),
      field2_(from.field2_),
      field3_(from.field3_),
      group1_(from.group1_),
      group2_(from.group2_),
      ext1_(from.ext1_),
      ext2_(from.ext2_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
}

inline void TestParsingMergeLite_RepeatedFieldsGenerator::SharedCtor() {
}

TestParsingMergeLite_RepeatedFieldsGenerator::~TestParsingMergeLite_RepeatedFieldsGenerator() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMergeLite_RepeatedFieldsGenerator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestParsingMergeLite_RepeatedFieldsGenerator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMergeLite_RepeatedFieldsGenerator::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field1_.Clear();
  field2_.Clear();
  field3_.Clear();
  group1_.Clear();
  group2_.Clear();
  ext1_.Clear();
  ext2_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestParsingMergeLite_RepeatedFieldsGenerator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf_unittest.TestAllTypesLite field1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypesLite field2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypesLite field3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated group Group1 = 10 { ... };
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 83)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_group1(), ptr, 83);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<83>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated group Group2 = 20 { ... };
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 163)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_group2(), ptr, 163);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<163>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypesLite ext1 = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ext1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8002>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypesLite ext2 = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ext2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8010>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMergeLite_RepeatedFieldsGenerator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypesLite field1 = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field1_size()); i < n; i++) {
    const auto& repfield = this->_internal_field1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypesLite field2 = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field2_size()); i < n; i++) {
    const auto& repfield = this->_internal_field2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypesLite field3 = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field3_size()); i < n; i++) {
    const auto& repfield = this->_internal_field3(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated group Group1 = 10 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(10, this->_internal_group1(i), target, stream);
  }

  // repeated group Group2 = 20 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(20, this->_internal_group2(i), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypesLite ext1 = 1000;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ext1_size()); i < n; i++) {
    const auto& repfield = this->_internal_ext1(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1000, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypesLite ext2 = 1001;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ext2_size()); i < n; i++) {
    const auto& repfield = this->_internal_ext2(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1001, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
  return target;
}

size_t TestParsingMergeLite_RepeatedFieldsGenerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypesLite field1 = 1;
  total_size += 1UL * this->_internal_field1_size();
  for (const auto& msg : this->field1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypesLite field2 = 2;
  total_size += 1UL * this->_internal_field2_size();
  for (const auto& msg : this->field2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypesLite field3 = 3;
  total_size += 1UL * this->_internal_field3_size();
  for (const auto& msg : this->field3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated group Group1 = 10 { ... };
  total_size += 2UL * this->_internal_group1_size();
  for (const auto& msg : this->group1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated group Group2 = 20 { ... };
  total_size += 4UL * this->_internal_group2_size();
  for (const auto& msg : this->group2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypesLite ext1 = 1000;
  total_size += 2UL * this->_internal_ext1_size();
  for (const auto& msg : this->ext1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_unittest.TestAllTypesLite ext2 = 1001;
  total_size += 2UL * this->_internal_ext2_size();
  for (const auto& msg : this->ext2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMergeLite_RepeatedFieldsGenerator::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestParsingMergeLite_RepeatedFieldsGenerator*>(
      &from));
}

void TestParsingMergeLite_RepeatedFieldsGenerator::MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  field1_.MergeFrom(from.field1_);
  field2_.MergeFrom(from.field2_);
  field3_.MergeFrom(from.field3_);
  group1_.MergeFrom(from.group1_);
  group2_.MergeFrom(from.group2_);
  ext1_.MergeFrom(from.ext1_);
  ext2_.MergeFrom(from.ext2_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestParsingMergeLite_RepeatedFieldsGenerator::CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_RepeatedFieldsGenerator::IsInitialized() const {
  return true;
}

void TestParsingMergeLite_RepeatedFieldsGenerator::InternalSwap(TestParsingMergeLite_RepeatedFieldsGenerator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field1_.InternalSwap(&other->field1_);
  field2_.InternalSwap(&other->field2_);
  field3_.InternalSwap(&other->field3_);
  group1_.InternalSwap(&other->group1_);
  group2_.InternalSwap(&other->group2_);
  ext1_.InternalSwap(&other->ext1_);
  ext2_.InternalSwap(&other->ext2_);
}

std::string TestParsingMergeLite_RepeatedFieldsGenerator::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator";
}


// ===================================================================

class TestParsingMergeLite_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMergeLite_OptionalGroup>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypesLite& optional_group_all_types(const TestParsingMergeLite_OptionalGroup* msg);
  static void set_has_optional_group_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypesLite&
TestParsingMergeLite_OptionalGroup::_Internal::optional_group_all_types(const TestParsingMergeLite_OptionalGroup* msg) {
  return *msg->optional_group_all_types_;
}
TestParsingMergeLite_OptionalGroup::TestParsingMergeLite_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
}
TestParsingMergeLite_OptionalGroup::TestParsingMergeLite_OptionalGroup(const TestParsingMergeLite_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_optional_group_all_types()) {
    optional_group_all_types_ = new ::protobuf_unittest::TestAllTypesLite(*from.optional_group_all_types_);
  } else {
    optional_group_all_types_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
}

inline void TestParsingMergeLite_OptionalGroup::SharedCtor() {
optional_group_all_types_ = nullptr;
}

TestParsingMergeLite_OptionalGroup::~TestParsingMergeLite_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMergeLite_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete optional_group_all_types_;
}

void TestParsingMergeLite_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMergeLite_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_group_all_types_ != nullptr);
    optional_group_all_types_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestParsingMergeLite_OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_group_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMergeLite_OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::optional_group_all_types(this),
        _Internal::optional_group_all_types(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
  return target;
}

size_t TestParsingMergeLite_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_group_all_types_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMergeLite_OptionalGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestParsingMergeLite_OptionalGroup*>(
      &from));
}

void TestParsingMergeLite_OptionalGroup::MergeFrom(const TestParsingMergeLite_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_optional_group_all_types()) {
    _internal_mutable_optional_group_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_optional_group_all_types());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestParsingMergeLite_OptionalGroup::CopyFrom(const TestParsingMergeLite_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_OptionalGroup::IsInitialized() const {
  return true;
}

void TestParsingMergeLite_OptionalGroup::InternalSwap(TestParsingMergeLite_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(optional_group_all_types_, other->optional_group_all_types_);
}

std::string TestParsingMergeLite_OptionalGroup::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.OptionalGroup";
}


// ===================================================================

class TestParsingMergeLite_RepeatedGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMergeLite_RepeatedGroup>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypesLite& repeated_group_all_types(const TestParsingMergeLite_RepeatedGroup* msg);
  static void set_has_repeated_group_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllTypesLite&
TestParsingMergeLite_RepeatedGroup::_Internal::repeated_group_all_types(const TestParsingMergeLite_RepeatedGroup* msg) {
  return *msg->repeated_group_all_types_;
}
TestParsingMergeLite_RepeatedGroup::TestParsingMergeLite_RepeatedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
}
TestParsingMergeLite_RepeatedGroup::TestParsingMergeLite_RepeatedGroup(const TestParsingMergeLite_RepeatedGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_repeated_group_all_types()) {
    repeated_group_all_types_ = new ::protobuf_unittest::TestAllTypesLite(*from.repeated_group_all_types_);
  } else {
    repeated_group_all_types_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
}

inline void TestParsingMergeLite_RepeatedGroup::SharedCtor() {
repeated_group_all_types_ = nullptr;
}

TestParsingMergeLite_RepeatedGroup::~TestParsingMergeLite_RepeatedGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMergeLite_RepeatedGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete repeated_group_all_types_;
}

void TestParsingMergeLite_RepeatedGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMergeLite_RepeatedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(repeated_group_all_types_ != nullptr);
    repeated_group_all_types_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestParsingMergeLite_RepeatedGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_group_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMergeLite_RepeatedGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::repeated_group_all_types(this),
        _Internal::repeated_group_all_types(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
  return target;
}

size_t TestParsingMergeLite_RepeatedGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeated_group_all_types_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMergeLite_RepeatedGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestParsingMergeLite_RepeatedGroup*>(
      &from));
}

void TestParsingMergeLite_RepeatedGroup::MergeFrom(const TestParsingMergeLite_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_repeated_group_all_types()) {
    _internal_mutable_repeated_group_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_repeated_group_all_types());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestParsingMergeLite_RepeatedGroup::CopyFrom(const TestParsingMergeLite_RepeatedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_RepeatedGroup::IsInitialized() const {
  return true;
}

void TestParsingMergeLite_RepeatedGroup::InternalSwap(TestParsingMergeLite_RepeatedGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(repeated_group_all_types_, other->repeated_group_all_types_);
}

std::string TestParsingMergeLite_RepeatedGroup::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.RepeatedGroup";
}


// ===================================================================

class TestParsingMergeLite::_Internal {
 public:
  using HasBits = decltype(std::declval<TestParsingMergeLite>()._has_bits_);
  static const ::protobuf_unittest::TestAllTypesLite& required_all_types(const TestParsingMergeLite* msg);
  static void set_has_required_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_unittest::TestAllTypesLite& optional_all_types(const TestParsingMergeLite* msg);
  static void set_has_optional_all_types(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::TestParsingMergeLite_OptionalGroup& optionalgroup(const TestParsingMergeLite* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::protobuf_unittest::TestAllTypesLite&
TestParsingMergeLite::_Internal::required_all_types(const TestParsingMergeLite* msg) {
  return *msg->required_all_types_;
}
const ::protobuf_unittest::TestAllTypesLite&
TestParsingMergeLite::_Internal::optional_all_types(const TestParsingMergeLite* msg) {
  return *msg->optional_all_types_;
}
const ::protobuf_unittest::TestParsingMergeLite_OptionalGroup&
TestParsingMergeLite::_Internal::optionalgroup(const TestParsingMergeLite* msg) {
  return *msg->optionalgroup_;
}
TestParsingMergeLite::TestParsingMergeLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  _extensions_(arena),
  repeated_all_types_(arena),
  repeatedgroup_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestParsingMergeLite)
}
TestParsingMergeLite::TestParsingMergeLite(const TestParsingMergeLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      repeated_all_types_(from.repeated_all_types_),
      repeatedgroup_(from.repeatedgroup_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  if (from._internal_has_required_all_types()) {
    required_all_types_ = new ::protobuf_unittest::TestAllTypesLite(*from.required_all_types_);
  } else {
    required_all_types_ = nullptr;
  }
  if (from._internal_has_optional_all_types()) {
    optional_all_types_ = new ::protobuf_unittest::TestAllTypesLite(*from.optional_all_types_);
  } else {
    optional_all_types_ = nullptr;
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestParsingMergeLite_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestParsingMergeLite)
}

inline void TestParsingMergeLite::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&required_all_types_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&optionalgroup_) -
    reinterpret_cast<char*>(&required_all_types_)) + sizeof(optionalgroup_));
}

TestParsingMergeLite::~TestParsingMergeLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestParsingMergeLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestParsingMergeLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete required_all_types_;
  if (this != internal_default_instance()) delete optional_all_types_;
  if (this != internal_default_instance()) delete optionalgroup_;
}

void TestParsingMergeLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestParsingMergeLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestParsingMergeLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  repeated_all_types_.Clear();
  repeatedgroup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(required_all_types_ != nullptr);
      required_all_types_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(optional_all_types_ != nullptr);
      optional_all_types_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestParsingMergeLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .protobuf_unittest.TestAllTypesLite required_all_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestAllTypesLite optional_all_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_all_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional group OptionalGroup = 10 { ... };
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 83)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 83);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated group RepeatedGroup = 20 { ... };
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 163)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseGroup(_internal_add_repeatedgroup(), ptr, 163);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<163>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestParsingMergeLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestParsingMergeLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .protobuf_unittest.TestAllTypesLite required_all_types = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::required_all_types(this),
        _Internal::required_all_types(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_unittest.TestAllTypesLite optional_all_types = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::optional_all_types(this),
        _Internal::optional_all_types(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_all_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_all_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional group OptionalGroup = 10 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        10, _Internal::optionalgroup(this), target, stream);
  }

  // repeated group RepeatedGroup = 20 { ... };
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeatedgroup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(20, this->_internal_repeatedgroup(i), target, stream);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestParsingMergeLite)
  return target;
}

size_t TestParsingMergeLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestParsingMergeLite)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .protobuf_unittest.TestAllTypesLite required_all_types = 1;
  if (_internal_has_required_all_types()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_all_types_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
  total_size += 1UL * this->_internal_repeated_all_types_size();
  for (const auto& msg : this->repeated_all_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated group RepeatedGroup = 20 { ... };
  total_size += 4UL * this->_internal_repeatedgroup_size();
  for (const auto& msg : this->repeatedgroup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .protobuf_unittest.TestAllTypesLite optional_all_types = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_all_types_);
    }

    // optional group OptionalGroup = 10 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestParsingMergeLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestParsingMergeLite*>(
      &from));
}

void TestParsingMergeLite::MergeFrom(const TestParsingMergeLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestParsingMergeLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_all_types_.MergeFrom(from.repeated_all_types_);
  repeatedgroup_.MergeFrom(from.repeatedgroup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_required_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_required_all_types());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_optional_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_optional_all_types());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestParsingMergeLite_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestParsingMergeLite::CopyFrom(const TestParsingMergeLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestParsingMergeLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestParsingMergeLite::InternalSwap(TestParsingMergeLite* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_all_types_.InternalSwap(&other->repeated_all_types_);
  repeatedgroup_.InternalSwap(&other->repeatedgroup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestParsingMergeLite, optionalgroup_)
      + sizeof(TestParsingMergeLite::optionalgroup_)
      - PROTOBUF_FIELD_OFFSET(TestParsingMergeLite, required_all_types_)>(
          reinterpret_cast<char*>(&required_all_types_),
          reinterpret_cast<char*>(&other->required_all_types_));
}

std::string TestParsingMergeLite::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite";
}


// ===================================================================

class TestMergeExceptionLite::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMergeExceptionLite>()._has_bits_);
  static const ::protobuf_unittest::TestAllExtensionsLite& all_extensions(const TestMergeExceptionLite* msg);
  static void set_has_all_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestAllExtensionsLite&
TestMergeExceptionLite::_Internal::all_extensions(const TestMergeExceptionLite* msg) {
  return *msg->all_extensions_;
}
TestMergeExceptionLite::TestMergeExceptionLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMergeExceptionLite)
}
TestMergeExceptionLite::TestMergeExceptionLite(const TestMergeExceptionLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_all_extensions()) {
    all_extensions_ = new ::protobuf_unittest::TestAllExtensionsLite(*from.all_extensions_);
  } else {
    all_extensions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMergeExceptionLite)
}

inline void TestMergeExceptionLite::SharedCtor() {
all_extensions_ = nullptr;
}

TestMergeExceptionLite::~TestMergeExceptionLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMergeExceptionLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMergeExceptionLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete all_extensions_;
}

void TestMergeExceptionLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMergeExceptionLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMergeExceptionLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(all_extensions_ != nullptr);
    all_extensions_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestMergeExceptionLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestAllExtensionsLite all_extensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_extensions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestMergeExceptionLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMergeExceptionLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestAllExtensionsLite all_extensions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::all_extensions(this),
        _Internal::all_extensions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMergeExceptionLite)
  return target;
}

size_t TestMergeExceptionLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMergeExceptionLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestAllExtensionsLite all_extensions = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *all_extensions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMergeExceptionLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestMergeExceptionLite*>(
      &from));
}

void TestMergeExceptionLite::MergeFrom(const TestMergeExceptionLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMergeExceptionLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_all_extensions()) {
    _internal_mutable_all_extensions()->::protobuf_unittest::TestAllExtensionsLite::MergeFrom(from._internal_all_extensions());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestMergeExceptionLite::CopyFrom(const TestMergeExceptionLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMergeExceptionLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMergeExceptionLite::IsInitialized() const {
  if (_internal_has_all_extensions()) {
    if (!all_extensions_->IsInitialized()) return false;
  }
  return true;
}

void TestMergeExceptionLite::InternalSwap(TestMergeExceptionLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(all_extensions_, other->all_extensions_);
}

std::string TestMergeExceptionLite::GetTypeName() const {
  return "protobuf_unittest.TestMergeExceptionLite";
}


// ===================================================================

class TestEmptyMessageLite::_Internal {
 public:
};

TestEmptyMessageLite::TestEmptyMessageLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEmptyMessageLite)
}
TestEmptyMessageLite::TestEmptyMessageLite(const TestEmptyMessageLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEmptyMessageLite)
}

inline void TestEmptyMessageLite::SharedCtor() {
}

TestEmptyMessageLite::~TestEmptyMessageLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEmptyMessageLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEmptyMessageLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestEmptyMessageLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEmptyMessageLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEmptyMessageLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* TestEmptyMessageLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEmptyMessageLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEmptyMessageLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEmptyMessageLite)
  return target;
}

size_t TestEmptyMessageLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEmptyMessageLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEmptyMessageLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestEmptyMessageLite*>(
      &from));
}

void TestEmptyMessageLite::MergeFrom(const TestEmptyMessageLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEmptyMessageLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestEmptyMessageLite::CopyFrom(const TestEmptyMessageLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEmptyMessageLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmptyMessageLite::IsInitialized() const {
  return true;
}

void TestEmptyMessageLite::InternalSwap(TestEmptyMessageLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string TestEmptyMessageLite::GetTypeName() const {
  return "protobuf_unittest.TestEmptyMessageLite";
}


// ===================================================================

class TestEmptyMessageWithExtensionsLite::_Internal {
 public:
};

TestEmptyMessageWithExtensionsLite::TestEmptyMessageWithExtensionsLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
}
TestEmptyMessageWithExtensionsLite::TestEmptyMessageWithExtensionsLite(const TestEmptyMessageWithExtensionsLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
}

inline void TestEmptyMessageWithExtensionsLite::SharedCtor() {
}

TestEmptyMessageWithExtensionsLite::~TestEmptyMessageWithExtensionsLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestEmptyMessageWithExtensionsLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestEmptyMessageWithExtensionsLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestEmptyMessageWithExtensionsLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestEmptyMessageWithExtensionsLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8u <= tag)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestEmptyMessageWithExtensionsLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 536870912)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 1, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
  return target;
}

size_t TestEmptyMessageWithExtensionsLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEmptyMessageWithExtensionsLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestEmptyMessageWithExtensionsLite*>(
      &from));
}

void TestEmptyMessageWithExtensionsLite::MergeFrom(const TestEmptyMessageWithExtensionsLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestEmptyMessageWithExtensionsLite::CopyFrom(const TestEmptyMessageWithExtensionsLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmptyMessageWithExtensionsLite::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestEmptyMessageWithExtensionsLite::InternalSwap(TestEmptyMessageWithExtensionsLite* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string TestEmptyMessageWithExtensionsLite::GetTypeName() const {
  return "protobuf_unittest.TestEmptyMessageWithExtensionsLite";
}


// ===================================================================

class V1MessageLite::_Internal {
 public:
  using HasBits = decltype(std::declval<V1MessageLite>()._has_bits_);
  static void set_has_int_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enum_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

V1MessageLite::V1MessageLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.V1MessageLite)
}
V1MessageLite::V1MessageLite(const V1MessageLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&int_field_, &from.int_field_,
    static_cast<size_t>(reinterpret_cast<char*>(&enum_field_) -
    reinterpret_cast<char*>(&int_field_)) + sizeof(enum_field_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.V1MessageLite)
}

inline void V1MessageLite::SharedCtor() {
int_field_ = 0;
enum_field_ = 1;
}

V1MessageLite::~V1MessageLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.V1MessageLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V1MessageLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void V1MessageLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void V1MessageLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.V1MessageLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    int_field_ = 0;
    enum_field_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* V1MessageLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 int_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_int_field(&has_bits);
          int_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.V1EnumLite enum_field = 2 [default = V1_FIRST];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::V1EnumLite_IsValid(val))) {
            _internal_set_enum_field(static_cast<::protobuf_unittest::V1EnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V1MessageLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.V1MessageLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 int_field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_int_field(), target);
  }

  // optional .protobuf_unittest.V1EnumLite enum_field = 2 [default = V1_FIRST];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_enum_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.V1MessageLite)
  return target;
}

size_t V1MessageLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.V1MessageLite)
  size_t total_size = 0;

  // required int32 int_field = 1;
  if (_internal_has_int_field()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_field());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.V1EnumLite enum_field = 2 [default = V1_FIRST];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_enum_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V1MessageLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const V1MessageLite*>(
      &from));
}

void V1MessageLite::MergeFrom(const V1MessageLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.V1MessageLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      int_field_ = from.int_field_;
    }
    if (cached_has_bits & 0x00000002u) {
      enum_field_ = from.enum_field_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void V1MessageLite::CopyFrom(const V1MessageLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.V1MessageLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V1MessageLite::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void V1MessageLite::InternalSwap(V1MessageLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(int_field_, other->int_field_);
  swap(enum_field_, other->enum_field_);
}

std::string V1MessageLite::GetTypeName() const {
  return "protobuf_unittest.V1MessageLite";
}


// ===================================================================

class V2MessageLite::_Internal {
 public:
  using HasBits = decltype(std::declval<V2MessageLite>()._has_bits_);
  static void set_has_int_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enum_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

V2MessageLite::V2MessageLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.V2MessageLite)
}
V2MessageLite::V2MessageLite(const V2MessageLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&int_field_, &from.int_field_,
    static_cast<size_t>(reinterpret_cast<char*>(&enum_field_) -
    reinterpret_cast<char*>(&int_field_)) + sizeof(enum_field_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.V2MessageLite)
}

inline void V2MessageLite::SharedCtor() {
int_field_ = 0;
enum_field_ = 1;
}

V2MessageLite::~V2MessageLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.V2MessageLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void V2MessageLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void V2MessageLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void V2MessageLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.V2MessageLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    int_field_ = 0;
    enum_field_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* V2MessageLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 int_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_int_field(&has_bits);
          int_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.V2EnumLite enum_field = 2 [default = V2_FIRST];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::V2EnumLite_IsValid(val))) {
            _internal_set_enum_field(static_cast<::protobuf_unittest::V2EnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V2MessageLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.V2MessageLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 int_field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_int_field(), target);
  }

  // optional .protobuf_unittest.V2EnumLite enum_field = 2 [default = V2_FIRST];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_enum_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.V2MessageLite)
  return target;
}

size_t V2MessageLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.V2MessageLite)
  size_t total_size = 0;

  // required int32 int_field = 1;
  if (_internal_has_int_field()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_field());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.V2EnumLite enum_field = 2 [default = V2_FIRST];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_enum_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V2MessageLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const V2MessageLite*>(
      &from));
}

void V2MessageLite::MergeFrom(const V2MessageLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.V2MessageLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      int_field_ = from.int_field_;
    }
    if (cached_has_bits & 0x00000002u) {
      enum_field_ = from.enum_field_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void V2MessageLite::CopyFrom(const V2MessageLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.V2MessageLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2MessageLite::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void V2MessageLite::InternalSwap(V2MessageLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(int_field_, other->int_field_);
  swap(enum_field_, other->enum_field_);
}

std::string V2MessageLite::GetTypeName() const {
  return "protobuf_unittest.V2MessageLite";
}


// ===================================================================

class TestHugeFieldNumbersLite_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<TestHugeFieldNumbersLite_OptionalGroup>()._has_bits_);
  static void set_has_group_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestHugeFieldNumbersLite_OptionalGroup::TestHugeFieldNumbersLite_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
}
TestHugeFieldNumbersLite_OptionalGroup::TestHugeFieldNumbersLite_OptionalGroup(const TestHugeFieldNumbersLite_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  group_a_ = from.group_a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
}

inline void TestHugeFieldNumbersLite_OptionalGroup::SharedCtor() {
group_a_ = 0;
}

TestHugeFieldNumbersLite_OptionalGroup::~TestHugeFieldNumbersLite_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestHugeFieldNumbersLite_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestHugeFieldNumbersLite_OptionalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestHugeFieldNumbersLite_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestHugeFieldNumbersLite_OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 group_a = 536870009;
      case 536870009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_group_a(&has_bits);
          group_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestHugeFieldNumbersLite_OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 group_a = 536870009;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(536870009, this->_internal_group_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
  return target;
}

size_t TestHugeFieldNumbersLite_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 group_a = 536870009;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_group_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestHugeFieldNumbersLite_OptionalGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestHugeFieldNumbersLite_OptionalGroup*>(
      &from));
}

void TestHugeFieldNumbersLite_OptionalGroup::MergeFrom(const TestHugeFieldNumbersLite_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group_a()) {
    _internal_set_group_a(from._internal_group_a());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestHugeFieldNumbersLite_OptionalGroup::CopyFrom(const TestHugeFieldNumbersLite_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHugeFieldNumbersLite_OptionalGroup::IsInitialized() const {
  return true;
}

void TestHugeFieldNumbersLite_OptionalGroup::InternalSwap(TestHugeFieldNumbersLite_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(group_a_, other->group_a_);
}

std::string TestHugeFieldNumbersLite_OptionalGroup::GetTypeName() const {
  return "protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup";
}


// ===================================================================

TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse::TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse() {}
TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse::TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse::MergeFrom(const TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class TestHugeFieldNumbersLite::_Internal {
 public:
  using HasBits = decltype(std::declval<TestHugeFieldNumbersLite>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fixed_32(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_optional_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_unittest::ForeignMessageLite& optional_message(const TestHugeFieldNumbersLite* msg);
  static void set_has_optional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup& optionalgroup(const TestHugeFieldNumbersLite* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest::TestAllTypesLite& oneof_test_all_types(const TestHugeFieldNumbersLite* msg);
};

const ::protobuf_unittest::ForeignMessageLite&
TestHugeFieldNumbersLite::_Internal::optional_message(const TestHugeFieldNumbersLite* msg) {
  return *msg->optional_message_;
}
const ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup&
TestHugeFieldNumbersLite::_Internal::optionalgroup(const TestHugeFieldNumbersLite* msg) {
  return *msg->optionalgroup_;
}
const ::protobuf_unittest::TestAllTypesLite&
TestHugeFieldNumbersLite::_Internal::oneof_test_all_types(const TestHugeFieldNumbersLite* msg) {
  return *msg->oneof_field_.oneof_test_all_types_;
}
void TestHugeFieldNumbersLite::set_allocated_oneof_test_all_types(::protobuf_unittest::TestAllTypesLite* oneof_test_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_field();
  if (oneof_test_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_test_all_types);
    if (message_arena != submessage_arena) {
      oneof_test_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_test_all_types, submessage_arena);
    }
    set_has_oneof_test_all_types();
    oneof_field_.oneof_test_all_types_ = oneof_test_all_types;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbersLite.oneof_test_all_types)
}
TestHugeFieldNumbersLite::TestHugeFieldNumbersLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  _extensions_(arena),
  repeated_int32_(arena),
  packed_int32_(arena),
  string_string_map_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestHugeFieldNumbersLite)
}
TestHugeFieldNumbersLite::TestHugeFieldNumbersLite(const TestHugeFieldNumbersLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      repeated_int32_(from.repeated_int32_),
      packed_int32_(from.packed_int32_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  string_string_map_.MergeFrom(from.string_string_map_);
  optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string()) {
    optional_string_.Set(from._internal_optional_string(), 
      GetArenaForAllocation());
  }
  optional_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    optional_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(from._internal_optional_bytes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_optional_message()) {
    optional_message_ = new ::protobuf_unittest::ForeignMessageLite(*from.optional_message_);
  } else {
    optional_message_ = nullptr;
  }
  if (from._internal_has_optionalgroup()) {
    optionalgroup_ = new ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup(*from.optionalgroup_);
  } else {
    optionalgroup_ = nullptr;
  }
  ::memcpy(&optional_int32_, &from.optional_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) -
    reinterpret_cast<char*>(&optional_int32_)) + sizeof(optional_enum_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofTestAllTypes: {
      _internal_mutable_oneof_test_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_oneof_test_all_types());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestHugeFieldNumbersLite)
}

inline void TestHugeFieldNumbersLite::SharedCtor() {
optional_string_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_string_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
optional_bytes_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  optional_bytes_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optional_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fixed_32_) -
    reinterpret_cast<char*>(&optional_message_)) + sizeof(fixed_32_));
optional_enum_ = 4;
clear_has_oneof_field();
}

TestHugeFieldNumbersLite::~TestHugeFieldNumbersLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestHugeFieldNumbersLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestHugeFieldNumbersLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  string_string_map_.Destruct();
  optional_string_.Destroy();
  optional_bytes_.Destroy();
  if (this != internal_default_instance()) delete optional_message_;
  if (this != internal_default_instance()) delete optionalgroup_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestHugeFieldNumbersLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestHugeFieldNumbersLite::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestHugeFieldNumbersLite)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofTestAllTypes: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_field_.oneof_test_all_types_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy();
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy();
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestHugeFieldNumbersLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestHugeFieldNumbersLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  repeated_int32_.Clear();
  packed_int32_.Clear();
  string_string_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optional_message_ != nullptr);
      optional_message_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(optionalgroup_ != nullptr);
      optionalgroup_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&optional_int32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed_32_) -
        reinterpret_cast<char*>(&optional_int32_)) + sizeof(fixed_32_));
    optional_enum_ = 4;
  }
  clear_oneof_field();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestHugeFieldNumbersLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 536870000;
      case 536870000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_optional_int32(&has_bits);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 fixed_32 = 536870001;
      case 536870001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_fixed_32(&has_bits);
          fixed_32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 536870002 [packed = false];
      case 536870002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 packed_int32 = 536870003 [packed = true];
      case 536870003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignEnumLite optional_enum = 536870004;
      case 536870004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::ForeignEnumLite_IsValid(val))) {
            _internal_set_optional_enum(static_cast<::protobuf_unittest::ForeignEnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(536870004, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string = 536870005;
      case 536870005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 536870006;
      case 536870006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.ForeignMessageLite optional_message = 536870007;
      case 536870007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group OptionalGroup = 536870008 { ... };
      case 536870008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 195)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 4294960067);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> string_string_map = 536870010;
      case 536870010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(&string_string_map_, ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 536870011;
      case 536870011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestAllTypesLite oneof_test_all_types = 536870012;
      case 536870012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_test_all_types(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string = 536870013;
      case 536870013:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes = 536870014;
      case 536870014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((4294880000u <= tag && tag < 4294960000u)) {
      ptr = _extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestHugeFieldNumbersLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestHugeFieldNumbersLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [536860000, 536870000)
  target = _extensions_._InternalSerialize(
  internal_default_instance(), 536860000, 536870000, target, stream);

  cached_has_bits = _has_bits_[0];
  // optional int32 optional_int32 = 536870000;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(536870000, this->_internal_optional_int32(), target);
  }

  // optional int32 fixed_32 = 536870001;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(536870001, this->_internal_fixed_32(), target);
  }

  // repeated int32 repeated_int32 = 536870002 [packed = false];
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(536870002, this->_internal_repeated_int32(i), target);
  }

  // repeated int32 packed_int32 = 536870003 [packed = true];
  {
    int byte_size = _packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          536870003, _internal_packed_int32(), byte_size, target);
    }
  }

  // optional .protobuf_unittest.ForeignEnumLite optional_enum = 536870004;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      536870004, this->_internal_optional_enum(), target);
  }

  // optional string optional_string = 536870005;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        536870005, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 536870006;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        536870006, this->_internal_optional_bytes(), target);
  }

  // optional .protobuf_unittest.ForeignMessageLite optional_message = 536870007;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(536870007, _Internal::optional_message(this),
        _Internal::optional_message(this).GetCachedSize(), target, stream);
  }

  // optional group OptionalGroup = 536870008 { ... };
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        536870008, _Internal::optionalgroup(this), target, stream);
  }

  // map<string, string> string_string_map = 536870010;
  if (!this->_internal_string_string_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_string_string_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(536870010, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(536870010, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  switch (oneof_field_case()) {
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(536870011, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofTestAllTypes: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(536870012, _Internal::oneof_test_all_types(this),
          _Internal::oneof_test_all_types(this).GetCachedSize(), target, stream);
      break;
    }
    case kOneofString: {
      target = stream->WriteStringMaybeAliased(
          536870013, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          536870014, this->_internal_oneof_bytes(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestHugeFieldNumbersLite)
  return target;
}

size_t TestHugeFieldNumbersLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestHugeFieldNumbersLite)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 536870002 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 5 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int32 packed_int32 = 536870003 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->packed_int32_);
    if (data_size > 0) {
      total_size += 5 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, string> string_string_map = 536870010;
  total_size += 5 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_string_string_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_string_string_map().begin();
      it != this->_internal_string_string_map().end(); ++it) {
    total_size += TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string optional_string = 536870005;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 536870006;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // optional .protobuf_unittest.ForeignMessageLite optional_message = 536870007;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_message_);
    }

    // optional group OptionalGroup = 536870008 { ... };
    if (cached_has_bits & 0x00000008u) {
      total_size += 10 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *optionalgroup_);
    }

    // optional int32 optional_int32 = 536870000;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

    // optional int32 fixed_32 = 536870001;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_fixed_32());
    }

    // optional .protobuf_unittest.ForeignEnumLite optional_enum = 536870004;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_enum());
    }

  }
  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 536870011;
    case kOneofUint32: {
      total_size += 5 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // .protobuf_unittest.TestAllTypesLite oneof_test_all_types = 536870012;
    case kOneofTestAllTypes: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_test_all_types_);
      break;
    }
    // string oneof_string = 536870013;
    case kOneofString: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 536870014;
    case kOneofBytes: {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestHugeFieldNumbersLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestHugeFieldNumbersLite*>(
      &from));
}

void TestHugeFieldNumbersLite::MergeFrom(const TestHugeFieldNumbersLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestHugeFieldNumbersLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  packed_int32_.MergeFrom(from.packed_int32_);
  string_string_map_.MergeFrom(from.string_string_map_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_optional_message()->::protobuf_unittest::ForeignMessageLite::MergeFrom(from._internal_optional_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_optionalgroup()->::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup::MergeFrom(from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000010u) {
      optional_int32_ = from.optional_int32_;
    }
    if (cached_has_bits & 0x00000020u) {
      fixed_32_ = from.fixed_32_;
    }
    if (cached_has_bits & 0x00000040u) {
      optional_enum_ = from.optional_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofTestAllTypes: {
      _internal_mutable_oneof_test_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_oneof_test_all_types());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestHugeFieldNumbersLite::CopyFrom(const TestHugeFieldNumbersLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestHugeFieldNumbersLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHugeFieldNumbersLite::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestHugeFieldNumbersLite::InternalSwap(TestHugeFieldNumbersLite* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  packed_int32_.InternalSwap(&other->packed_int32_);
  string_string_map_.InternalSwap(&other->string_string_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_string_, lhs_arena,
      &other->optional_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &optional_bytes_, lhs_arena,
      &other->optional_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestHugeFieldNumbersLite, fixed_32_)
      + sizeof(TestHugeFieldNumbersLite::fixed_32_)
      - PROTOBUF_FIELD_OFFSET(TestHugeFieldNumbersLite, optional_message_)>(
          reinterpret_cast<char*>(&optional_message_),
          reinterpret_cast<char*>(&other->optional_message_));
  swap(optional_enum_, other->optional_enum_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TestHugeFieldNumbersLite::GetTypeName() const {
  return "protobuf_unittest.TestHugeFieldNumbersLite";
}


// ===================================================================

class TestOneofParsingLite::_Internal {
 public:
  static const ::protobuf_unittest::TestAllTypesLite& oneof_submessage(const TestOneofParsingLite* msg);
};

const ::protobuf_unittest::TestAllTypesLite&
TestOneofParsingLite::_Internal::oneof_submessage(const TestOneofParsingLite* msg) {
  return *msg->oneof_field_.oneof_submessage_;
}
void TestOneofParsingLite::set_allocated_oneof_submessage(::protobuf_unittest::TestAllTypesLite* oneof_submessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_field();
  if (oneof_submessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_submessage);
    if (message_arena != submessage_arena) {
      oneof_submessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_submessage, submessage_arena);
    }
    set_has_oneof_submessage();
    oneof_field_.oneof_submessage_ = oneof_submessage;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofParsingLite.oneof_submessage)
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_{{{"default bytes", 13}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_{{{"default Cord", 12}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_{{{"default StringPiece", 19}}, {nullptr}};
TestOneofParsingLite::TestOneofParsingLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestOneofParsingLite)
}
TestOneofParsingLite::TestOneofParsingLite(const TestOneofParsingLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofInt32: {
      _internal_set_oneof_int32(from._internal_oneof_int32());
      break;
    }
    case kOneofSubmessage: {
      _internal_mutable_oneof_submessage()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_oneof_submessage());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofStringCord: {
      _internal_set_oneof_string_cord(from._internal_oneof_string_cord());
      break;
    }
    case kOneofBytesCord: {
      _internal_set_oneof_bytes_cord(from._internal_oneof_bytes_cord());
      break;
    }
    case kOneofStringStringPiece: {
      _internal_set_oneof_string_string_piece(from._internal_oneof_string_string_piece());
      break;
    }
    case kOneofBytesStringPiece: {
      _internal_set_oneof_bytes_string_piece(from._internal_oneof_bytes_string_piece());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestOneofParsingLite)
}

inline void TestOneofParsingLite::SharedCtor() {
clear_has_oneof_field();
}

TestOneofParsingLite::~TestOneofParsingLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestOneofParsingLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOneofParsingLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestOneofParsingLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestOneofParsingLite::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_unittest.TestOneofParsingLite)
  switch (oneof_field_case()) {
    case kOneofInt32: {
      // No need to clear
      break;
    }
    case kOneofSubmessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_field_.oneof_submessage_;
      }
      break;
    }
    case kOneofString: {
      oneof_field_.oneof_string_.Destroy();
      break;
    }
    case kOneofBytes: {
      oneof_field_.oneof_bytes_.Destroy();
      break;
    }
    case kOneofStringCord: {
      oneof_field_.oneof_string_cord_.Destroy();
      break;
    }
    case kOneofBytesCord: {
      oneof_field_.oneof_bytes_cord_.Destroy();
      break;
    }
    case kOneofStringStringPiece: {
      oneof_field_.oneof_string_string_piece_.Destroy();
      break;
    }
    case kOneofBytesStringPiece: {
      oneof_field_.oneof_bytes_string_piece_.Destroy();
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestOneofParsingLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestOneofParsingLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof_field();
  _internal_metadata_.Clear<std::string>();
}

const char* TestOneofParsingLite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 oneof_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_oneof_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.TestAllTypesLite oneof_submessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_submessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes = 4 [default = "default bytes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string_cord = 5 [default = "default Cord", ctype = CORD];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oneof_string_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes_cord = 6 [ctype = CORD];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_oneof_bytes_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string_string_piece = 7 [ctype = STRING_PIECE];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_oneof_string_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes_string_piece = 8 [default = "default StringPiece", ctype = STRING_PIECE];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_oneof_bytes_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_unittest.V2EnumLite oneof_enum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::V2EnumLite_IsValid(val))) {
            _internal_set_oneof_enum(static_cast<::protobuf_unittest::V2EnumLite>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOneofParsingLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestOneofParsingLite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (oneof_field_case()) {
    case kOneofInt32: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_oneof_int32(), target);
      break;
    }
    case kOneofSubmessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::oneof_submessage(this),
          _Internal::oneof_submessage(this).GetCachedSize(), target, stream);
      break;
    }
    case kOneofString: {
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          4, this->_internal_oneof_bytes(), target);
      break;
    }
    case kOneofStringCord: {
      target = stream->WriteStringMaybeAliased(
          5, this->_internal_oneof_string_cord(), target);
      break;
    }
    case kOneofBytesCord: {
      target = stream->WriteBytesMaybeAliased(
          6, this->_internal_oneof_bytes_cord(), target);
      break;
    }
    case kOneofStringStringPiece: {
      target = stream->WriteStringMaybeAliased(
          7, this->_internal_oneof_string_string_piece(), target);
      break;
    }
    case kOneofBytesStringPiece: {
      target = stream->WriteBytesMaybeAliased(
          8, this->_internal_oneof_bytes_string_piece(), target);
      break;
    }
    case kOneofEnum: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_oneof_enum(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestOneofParsingLite)
  return target;
}

size_t TestOneofParsingLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestOneofParsingLite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_field_case()) {
    // int32 oneof_int32 = 1;
    case kOneofInt32: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_oneof_int32());
      break;
    }
    // .protobuf_unittest.TestAllTypesLite oneof_submessage = 2;
    case kOneofSubmessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_field_.oneof_submessage_);
      break;
    }
    // string oneof_string = 3;
    case kOneofString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 4 [default = "default bytes"];
    case kOneofBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    // string oneof_string_cord = 5 [default = "default Cord", ctype = CORD];
    case kOneofStringCord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string_cord());
      break;
    }
    // bytes oneof_bytes_cord = 6 [ctype = CORD];
    case kOneofBytesCord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes_cord());
      break;
    }
    // string oneof_string_string_piece = 7 [ctype = STRING_PIECE];
    case kOneofStringStringPiece: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string_string_piece());
      break;
    }
    // bytes oneof_bytes_string_piece = 8 [default = "default StringPiece", ctype = STRING_PIECE];
    case kOneofBytesStringPiece: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes_string_piece());
      break;
    }
    // .protobuf_unittest.V2EnumLite oneof_enum = 9;
    case kOneofEnum: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestOneofParsingLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestOneofParsingLite*>(
      &from));
}

void TestOneofParsingLite::MergeFrom(const TestOneofParsingLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestOneofParsingLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_field_case()) {
    case kOneofInt32: {
      _internal_set_oneof_int32(from._internal_oneof_int32());
      break;
    }
    case kOneofSubmessage: {
      _internal_mutable_oneof_submessage()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from._internal_oneof_submessage());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofStringCord: {
      _internal_set_oneof_string_cord(from._internal_oneof_string_cord());
      break;
    }
    case kOneofBytesCord: {
      _internal_set_oneof_bytes_cord(from._internal_oneof_bytes_cord());
      break;
    }
    case kOneofStringStringPiece: {
      _internal_set_oneof_string_string_piece(from._internal_oneof_string_string_piece());
      break;
    }
    case kOneofBytesStringPiece: {
      _internal_set_oneof_bytes_string_piece(from._internal_oneof_bytes_string_piece());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestOneofParsingLite::CopyFrom(const TestOneofParsingLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestOneofParsingLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOneofParsingLite::IsInitialized() const {
  return true;
}

void TestOneofParsingLite::InternalSwap(TestOneofParsingLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_field_, other->oneof_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TestOneofParsingLite::GetTypeName() const {
  return "protobuf_unittest.TestOneofParsingLite";
}


// ===================================================================

class TestMessageSetLite::_Internal {
 public:
};

TestMessageSetLite::TestMessageSetLite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  _extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMessageSetLite)
}
TestMessageSetLite::TestMessageSetLite(const TestMessageSetLite& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMessageSetLite)
}

inline void TestMessageSetLite::SharedCtor() {
}

TestMessageSetLite::~TestMessageSetLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMessageSetLite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestMessageSetLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestMessageSetLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestMessageSetLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMessageSetLite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TestMessageSetLite::_InternalParse(const char* ptr,
                  ::_pbi::ParseContext* ctx) {
  return _extensions_.ParseMessageSet(ptr, 
      internal_default_instance(), &_internal_metadata_, ctx);
}

uint8_t* TestMessageSetLite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  target = _extensions_.InternalSerializeMessageSetWithCachedSizesToArray(
internal_default_instance(), target, stream);
  target = ::_pbi::InternalSerializeUnknownMessageSetItemsToArray(
               _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString), target, stream);
  return target;
}

size_t TestMessageSetLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_set_byte_size_start:protobuf_unittest.TestMessageSetLite)
  size_t total_size = _extensions_.MessageSetByteSize();
  if (_internal_metadata_.have_unknown_fields()) {
    total_size += ::_pbi::
        ComputeUnknownMessageSetItemsSize(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString));
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessageSetLite::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TestMessageSetLite*>(
      &from));
}

void TestMessageSetLite::MergeFrom(const TestMessageSetLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMessageSetLite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _extensions_.MergeFrom(internal_default_instance(), from._extensions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TestMessageSetLite::CopyFrom(const TestMessageSetLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMessageSetLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageSetLite::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestMessageSetLite::InternalSwap(TestMessageSetLite* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string TestMessageSetLite::GetTypeName() const {
  return "protobuf_unittest.TestMessageSetLite";
}


// ===================================================================

class PackedInt32::_Internal {
 public:
};

PackedInt32::PackedInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  repeated_int32_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.PackedInt32)
}
PackedInt32::PackedInt32(const PackedInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      repeated_int32_(from.repeated_int32_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.PackedInt32)
}

inline void PackedInt32::SharedCtor() {
}

PackedInt32::~PackedInt32() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.PackedInt32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackedInt32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PackedInt32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackedInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.PackedInt32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PackedInt32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 repeated_int32 = 2048 [packed = true];
      case 2048:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 0) {
          _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackedInt32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.PackedInt32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 2048 [packed = true];
  {
    int byte_size = _repeated_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2048, _internal_repeated_int32(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.PackedInt32)
  return target;
}

size_t PackedInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.PackedInt32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 2048 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeated_int32_);
    if (data_size > 0) {
      total_size += 3 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _repeated_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackedInt32::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PackedInt32*>(
      &from));
}

void PackedInt32::MergeFrom(const PackedInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.PackedInt32)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PackedInt32::CopyFrom(const PackedInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.PackedInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackedInt32::IsInitialized() const {
  return true;
}

void PackedInt32::InternalSwap(PackedInt32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
}

std::string PackedInt32::GetTypeName() const {
  return "protobuf_unittest.PackedInt32";
}


// ===================================================================

class NonPackedInt32::_Internal {
 public:
};

NonPackedInt32::NonPackedInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  repeated_int32_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.NonPackedInt32)
}
NonPackedInt32::NonPackedInt32(const NonPackedInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      repeated_int32_(from.repeated_int32_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.NonPackedInt32)
}

inline void NonPackedInt32::SharedCtor() {
}

NonPackedInt32::~NonPackedInt32() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.NonPackedInt32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NonPackedInt32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NonPackedInt32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NonPackedInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.NonPackedInt32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_int32_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NonPackedInt32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 repeated_int32 = 2048;
      case 2048:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NonPackedInt32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.NonPackedInt32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 2048;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2048, this->_internal_repeated_int32(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.NonPackedInt32)
  return target;
}

size_t NonPackedInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.NonPackedInt32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 2048;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 3 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NonPackedInt32::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NonPackedInt32*>(
      &from));
}

void NonPackedInt32::MergeFrom(const NonPackedInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.NonPackedInt32)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_int32_.MergeFrom(from.repeated_int32_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NonPackedInt32::CopyFrom(const NonPackedInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.NonPackedInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonPackedInt32::IsInitialized() const {
  return true;
}

void NonPackedInt32::InternalSwap(NonPackedInt32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
}

std::string NonPackedInt32::GetTypeName() const {
  return "protobuf_unittest.NonPackedInt32";
}


// ===================================================================

class PackedFixed32::_Internal {
 public:
};

PackedFixed32::PackedFixed32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  repeated_fixed32_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.PackedFixed32)
}
PackedFixed32::PackedFixed32(const PackedFixed32& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      repeated_fixed32_(from.repeated_fixed32_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.PackedFixed32)
}

inline void PackedFixed32::SharedCtor() {
}

PackedFixed32::~PackedFixed32() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.PackedFixed32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackedFixed32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PackedFixed32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackedFixed32::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.PackedFixed32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_fixed32_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PackedFixed32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 repeated_fixed32 = 2048 [packed = true];
      case 2048:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 5) {
          _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackedFixed32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.PackedFixed32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 repeated_fixed32 = 2048 [packed = true];
  if (this->_internal_repeated_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(2048, _internal_repeated_fixed32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.PackedFixed32)
  return target;
}

size_t PackedFixed32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.PackedFixed32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 repeated_fixed32 = 2048 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 3 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackedFixed32::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PackedFixed32*>(
      &from));
}

void PackedFixed32::MergeFrom(const PackedFixed32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.PackedFixed32)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PackedFixed32::CopyFrom(const PackedFixed32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.PackedFixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackedFixed32::IsInitialized() const {
  return true;
}

void PackedFixed32::InternalSwap(PackedFixed32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
}

std::string PackedFixed32::GetTypeName() const {
  return "protobuf_unittest.PackedFixed32";
}


// ===================================================================

class NonPackedFixed32::_Internal {
 public:
};

NonPackedFixed32::NonPackedFixed32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  repeated_fixed32_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.NonPackedFixed32)
}
NonPackedFixed32::NonPackedFixed32(const NonPackedFixed32& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      repeated_fixed32_(from.repeated_fixed32_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.NonPackedFixed32)
}

inline void NonPackedFixed32::SharedCtor() {
}

NonPackedFixed32::~NonPackedFixed32() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.NonPackedFixed32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NonPackedFixed32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NonPackedFixed32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NonPackedFixed32::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.NonPackedFixed32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_fixed32_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NonPackedFixed32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 repeated_fixed32 = 2048;
      case 2048:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NonPackedFixed32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.NonPackedFixed32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 repeated_fixed32 = 2048;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2048, this->_internal_repeated_fixed32(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.NonPackedFixed32)
  return target;
}

size_t NonPackedFixed32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.NonPackedFixed32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 repeated_fixed32 = 2048;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NonPackedFixed32::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NonPackedFixed32*>(
      &from));
}

void NonPackedFixed32::MergeFrom(const NonPackedFixed32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.NonPackedFixed32)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NonPackedFixed32::CopyFrom(const NonPackedFixed32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.NonPackedFixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonPackedFixed32::IsInitialized() const {
  return true;
}

void NonPackedFixed32::InternalSwap(NonPackedFixed32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
}

std::string NonPackedFixed32::GetTypeName() const {
  return "protobuf_unittest.NonPackedFixed32";
}


// ===================================================================

class DupEnum::_Internal {
 public:
};

DupEnum::DupEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.DupEnum)
}
DupEnum::DupEnum(const DupEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.DupEnum)
}

inline void DupEnum::SharedCtor() {
}

DupEnum::~DupEnum() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.DupEnum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DupEnum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DupEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DupEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.DupEnum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* DupEnum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DupEnum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.DupEnum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.DupEnum)
  return target;
}

size_t DupEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.DupEnum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DupEnum::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DupEnum*>(
      &from));
}

void DupEnum::MergeFrom(const DupEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.DupEnum)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DupEnum::CopyFrom(const DupEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.DupEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupEnum::IsInitialized() const {
  return true;
}

void DupEnum::InternalSwap(DupEnum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string DupEnum::GetTypeName() const {
  return "protobuf_unittest.DupEnum";
}


// ===================================================================

class RecursiveMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RecursiveMessage>()._has_bits_);
  static const ::protobuf_unittest::RecursiveMessage& recurse(const RecursiveMessage* msg);
  static void set_has_recurse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::RecursiveMessage&
RecursiveMessage::_Internal::recurse(const RecursiveMessage* msg) {
  return *msg->recurse_;
}
RecursiveMessage::RecursiveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.RecursiveMessage)
}
RecursiveMessage::RecursiveMessage(const RecursiveMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    payload_.Set(from._internal_payload(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_recurse()) {
    recurse_ = new ::protobuf_unittest::RecursiveMessage(*from.recurse_);
  } else {
    recurse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.RecursiveMessage)
}

inline void RecursiveMessage::SharedCtor() {
payload_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
recurse_ = nullptr;
}

RecursiveMessage::~RecursiveMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.RecursiveMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecursiveMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.Destroy();
  if (this != internal_default_instance()) delete recurse_;
}

void RecursiveMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecursiveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.RecursiveMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(recurse_ != nullptr);
      recurse_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RecursiveMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.RecursiveMessage recurse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecursiveMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.RecursiveMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.RecursiveMessage recurse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::recurse(this),
        _Internal::recurse(this).GetCachedSize(), target, stream);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.RecursiveMessage)
  return target;
}

size_t RecursiveMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.RecursiveMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional .protobuf_unittest.RecursiveMessage recurse = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recurse_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecursiveMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RecursiveMessage*>(
      &from));
}

void RecursiveMessage::MergeFrom(const RecursiveMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.RecursiveMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_recurse()->::protobuf_unittest::RecursiveMessage::MergeFrom(from._internal_recurse());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RecursiveMessage::CopyFrom(const RecursiveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.RecursiveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecursiveMessage::IsInitialized() const {
  return true;
}

void RecursiveMessage::InternalSwap(RecursiveMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(recurse_, other->recurse_);
}

std::string RecursiveMessage::GetTypeName() const {
  return "protobuf_unittest.RecursiveMessage";
}

#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestNestedExtensionLite::kNestedExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  TestNestedExtensionLite::nested_extension(kNestedExtensionFieldNumber, 0, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestParsingMergeLite::kOptionalExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMergeLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite >, 11, false>
  TestParsingMergeLite::optional_ext(kOptionalExtFieldNumber, ::protobuf_unittest::TestAllTypesLite::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestParsingMergeLite::kRepeatedExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMergeLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite >, 11, false>
  TestParsingMergeLite::repeated_ext(kRepeatedExtFieldNumber, ::protobuf_unittest::TestAllTypesLite::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  optional_int32_extension_lite(kOptionalInt32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 3, false>
  optional_int64_extension_lite(kOptionalInt64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  optional_uint32_extension_lite(kOptionalUint32ExtensionLiteFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 4, false>
  optional_uint64_extension_lite(kOptionalUint64ExtensionLiteFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 17, false>
  optional_sint32_extension_lite(kOptionalSint32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 18, false>
  optional_sint64_extension_lite(kOptionalSint64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 7, false>
  optional_fixed32_extension_lite(kOptionalFixed32ExtensionLiteFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 6, false>
  optional_fixed64_extension_lite(kOptionalFixed64ExtensionLiteFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 15, false>
  optional_sfixed32_extension_lite(kOptionalSfixed32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 16, false>
  optional_sfixed64_extension_lite(kOptionalSfixed64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false>
  optional_float_extension_lite(kOptionalFloatExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false>
  optional_double_extension_lite(kOptionalDoubleExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  optional_bool_extension_lite(kOptionalBoolExtensionLiteFieldNumber, false, nullptr);
const std::string optional_string_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  optional_string_extension_lite(kOptionalStringExtensionLiteFieldNumber, optional_string_extension_lite_default, nullptr);
const std::string optional_bytes_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false>
  optional_bytes_extension_lite(kOptionalBytesExtensionLiteFieldNumber, optional_bytes_extension_lite_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionalGroup_extension_lite >, 10, false>
  optionalgroup_extension_lite(kOptionalgroupExtensionLiteFieldNumber, ::protobuf_unittest::OptionalGroup_extension_lite::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false>
  optional_nested_message_extension_lite(kOptionalNestedMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::ForeignMessageLite >, 11, false>
  optional_foreign_message_extension_lite(kOptionalForeignMessageExtensionLiteFieldNumber, ::protobuf_unittest::ForeignMessageLite::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::ImportMessageLite >, 11, false>
  optional_import_message_extension_lite(kOptionalImportMessageExtensionLiteFieldNumber, ::protobuf_unittest_import::ImportMessageLite::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false>
  optional_nested_enum_extension_lite(kOptionalNestedEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(1), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false>
  optional_foreign_enum_extension_lite(kOptionalForeignEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::ForeignEnumLite >(4), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false>
  optional_import_enum_extension_lite(kOptionalImportEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnumLite >(7), nullptr);
const std::string optional_string_piece_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  optional_string_piece_extension_lite(kOptionalStringPieceExtensionLiteFieldNumber, optional_string_piece_extension_lite_default, nullptr);
const std::string optional_cord_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  optional_cord_extension_lite(kOptionalCordExtensionLiteFieldNumber, optional_cord_extension_lite_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::PublicImportMessageLite >, 11, false>
  optional_public_import_message_extension_lite(kOptionalPublicImportMessageExtensionLiteFieldNumber, ::protobuf_unittest_import::PublicImportMessageLite::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false>
  optional_lazy_message_extension_lite(kOptionalLazyMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, false>
  repeated_int32_extension_lite(kRepeatedInt32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 3, false>
  repeated_int64_extension_lite(kRepeatedInt64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 13, false>
  repeated_uint32_extension_lite(kRepeatedUint32ExtensionLiteFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 4, false>
  repeated_uint64_extension_lite(kRepeatedUint64ExtensionLiteFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 17, false>
  repeated_sint32_extension_lite(kRepeatedSint32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 18, false>
  repeated_sint64_extension_lite(kRepeatedSint64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 7, false>
  repeated_fixed32_extension_lite(kRepeatedFixed32ExtensionLiteFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 6, false>
  repeated_fixed64_extension_lite(kRepeatedFixed64ExtensionLiteFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 15, false>
  repeated_sfixed32_extension_lite(kRepeatedSfixed32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 16, false>
  repeated_sfixed64_extension_lite(kRepeatedSfixed64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, false>
  repeated_float_extension_lite(kRepeatedFloatExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false>
  repeated_double_extension_lite(kRepeatedDoubleExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false>
  repeated_bool_extension_lite(kRepeatedBoolExtensionLiteFieldNumber, false, nullptr);
const std::string repeated_string_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false>
  repeated_string_extension_lite(kRepeatedStringExtensionLiteFieldNumber, repeated_string_extension_lite_default, nullptr);
const std::string repeated_bytes_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 12, false>
  repeated_bytes_extension_lite(kRepeatedBytesExtensionLiteFieldNumber, repeated_bytes_extension_lite_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::RepeatedGroup_extension_lite >, 10, false>
  repeatedgroup_extension_lite(kRepeatedgroupExtensionLiteFieldNumber, ::protobuf_unittest::RepeatedGroup_extension_lite::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false>
  repeated_nested_message_extension_lite(kRepeatedNestedMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::ForeignMessageLite >, 11, false>
  repeated_foreign_message_extension_lite(kRepeatedForeignMessageExtensionLiteFieldNumber, ::protobuf_unittest::ForeignMessageLite::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest_import::ImportMessageLite >, 11, false>
  repeated_import_message_extension_lite(kRepeatedImportMessageExtensionLiteFieldNumber, ::protobuf_unittest_import::ImportMessageLite::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false>
  repeated_nested_enum_extension_lite(kRepeatedNestedEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(1), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false>
  repeated_foreign_enum_extension_lite(kRepeatedForeignEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::ForeignEnumLite >(4), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false>
  repeated_import_enum_extension_lite(kRepeatedImportEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnumLite >(7), nullptr);
const std::string repeated_string_piece_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false>
  repeated_string_piece_extension_lite(kRepeatedStringPieceExtensionLiteFieldNumber, repeated_string_piece_extension_lite_default, nullptr);
const std::string repeated_cord_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false>
  repeated_cord_extension_lite(kRepeatedCordExtensionLiteFieldNumber, repeated_cord_extension_lite_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false>
  repeated_lazy_message_extension_lite(kRepeatedLazyMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  default_int32_extension_lite(kDefaultInt32ExtensionLiteFieldNumber, 41, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 3, false>
  default_int64_extension_lite(kDefaultInt64ExtensionLiteFieldNumber, int64_t{42}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  default_uint32_extension_lite(kDefaultUint32ExtensionLiteFieldNumber, 43u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 4, false>
  default_uint64_extension_lite(kDefaultUint64ExtensionLiteFieldNumber, uint64_t{44u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 17, false>
  default_sint32_extension_lite(kDefaultSint32ExtensionLiteFieldNumber, -45, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 18, false>
  default_sint64_extension_lite(kDefaultSint64ExtensionLiteFieldNumber, int64_t{46}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 7, false>
  default_fixed32_extension_lite(kDefaultFixed32ExtensionLiteFieldNumber, 47u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint64_t >, 6, false>
  default_fixed64_extension_lite(kDefaultFixed64ExtensionLiteFieldNumber, uint64_t{48u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 15, false>
  default_sfixed32_extension_lite(kDefaultSfixed32ExtensionLiteFieldNumber, 49, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int64_t >, 16, false>
  default_sfixed64_extension_lite(kDefaultSfixed64ExtensionLiteFieldNumber, int64_t{-50}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false>
  default_float_extension_lite(kDefaultFloatExtensionLiteFieldNumber, 51.5f, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false>
  default_double_extension_lite(kDefaultDoubleExtensionLiteFieldNumber, 52000, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  default_bool_extension_lite(kDefaultBoolExtensionLiteFieldNumber, true, nullptr);
const std::string default_string_extension_lite_default("hello");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  default_string_extension_lite(kDefaultStringExtensionLiteFieldNumber, default_string_extension_lite_default, nullptr);
const std::string default_bytes_extension_lite_default("world");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false>
  default_bytes_extension_lite(kDefaultBytesExtensionLiteFieldNumber, default_bytes_extension_lite_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false>
  default_nested_enum_extension_lite(kDefaultNestedEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(2), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false>
  default_foreign_enum_extension_lite(kDefaultForeignEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::ForeignEnumLite >(5), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false>
  default_import_enum_extension_lite(kDefaultImportEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnumLite >(8), nullptr);
const std::string default_string_piece_extension_lite_default("abc");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  default_string_piece_extension_lite(kDefaultStringPieceExtensionLiteFieldNumber, default_string_piece_extension_lite_default, nullptr);
const std::string default_cord_extension_lite_default("123");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  default_cord_extension_lite(kDefaultCordExtensionLiteFieldNumber, default_cord_extension_lite_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  oneof_uint32_extension_lite(kOneofUint32ExtensionLiteFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false>
  oneof_nested_message_extension_lite(kOneofNestedMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance(), nullptr);
const std::string oneof_string_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  oneof_string_extension_lite(kOneofStringExtensionLiteFieldNumber, oneof_string_extension_lite_default, nullptr);
const std::string oneof_bytes_extension_lite_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false>
  oneof_bytes_extension_lite(kOneofBytesExtensionLiteFieldNumber, oneof_bytes_extension_lite_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, true>
  packed_int32_extension_lite(kPackedInt32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 3, true>
  packed_int64_extension_lite(kPackedInt64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 13, true>
  packed_uint32_extension_lite(kPackedUint32ExtensionLiteFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 4, true>
  packed_uint64_extension_lite(kPackedUint64ExtensionLiteFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 17, true>
  packed_sint32_extension_lite(kPackedSint32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 18, true>
  packed_sint64_extension_lite(kPackedSint64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint32_t >, 7, true>
  packed_fixed32_extension_lite(kPackedFixed32ExtensionLiteFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< uint64_t >, 6, true>
  packed_fixed64_extension_lite(kPackedFixed64ExtensionLiteFieldNumber, uint64_t{0u}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 15, true>
  packed_sfixed32_extension_lite(kPackedSfixed32ExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int64_t >, 16, true>
  packed_sfixed64_extension_lite(kPackedSfixed64ExtensionLiteFieldNumber, int64_t{0}, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, true>
  packed_float_extension_lite(kPackedFloatExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, true>
  packed_double_extension_lite(kPackedDoubleExtensionLiteFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, true>
  packed_bool_extension_lite(kPackedBoolExtensionLiteFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, true>
  packed_enum_extension_lite(kPackedEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::ForeignEnumLite >(4), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestHugeFieldNumbersLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite >, 11, false>
  test_all_types_lite(kTestAllTypesLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypesLite_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypesLite_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypesLite_NestedMessage2*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite_NestedMessage2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypesLite_NestedMessage2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypesLite_OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypesLite_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypesLite_RepeatedGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite_RepeatedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypesLite_RepeatedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllTypesLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllTypesLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::ForeignMessageLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::ForeignMessageLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::ForeignMessageLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPackedTypesLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestPackedTypesLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPackedTypesLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestAllExtensionsLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestAllExtensionsLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestAllExtensionsLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::OptionalGroup_extension_lite*
Arena::CreateMaybeMessage< ::protobuf_unittest::OptionalGroup_extension_lite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::OptionalGroup_extension_lite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::RepeatedGroup_extension_lite*
Arena::CreateMaybeMessage< ::protobuf_unittest::RepeatedGroup_extension_lite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::RepeatedGroup_extension_lite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestPackedExtensionsLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestPackedExtensionsLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestPackedExtensionsLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestNestedExtensionLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestNestedExtensionLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestNestedExtensionLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestDeprecatedLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestDeprecatedLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestDeprecatedLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMergeLite_OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMergeLite_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMergeLite_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestParsingMergeLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestParsingMergeLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestParsingMergeLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMergeExceptionLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMergeExceptionLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMergeExceptionLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEmptyMessageLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEmptyMessageLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEmptyMessageLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEmptyMessageWithExtensionsLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestEmptyMessageWithExtensionsLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEmptyMessageWithExtensionsLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::V1MessageLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::V1MessageLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::V1MessageLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::V2MessageLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::V2MessageLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::V2MessageLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestHugeFieldNumbersLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestHugeFieldNumbersLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestHugeFieldNumbersLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestOneofParsingLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestOneofParsingLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestOneofParsingLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMessageSetLite*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestMessageSetLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMessageSetLite >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::PackedInt32*
Arena::CreateMaybeMessage< ::protobuf_unittest::PackedInt32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::PackedInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::NonPackedInt32*
Arena::CreateMaybeMessage< ::protobuf_unittest::NonPackedInt32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::NonPackedInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::PackedFixed32*
Arena::CreateMaybeMessage< ::protobuf_unittest::PackedFixed32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::PackedFixed32 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::NonPackedFixed32*
Arena::CreateMaybeMessage< ::protobuf_unittest::NonPackedFixed32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::NonPackedFixed32 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::DupEnum*
Arena::CreateMaybeMessage< ::protobuf_unittest::DupEnum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::DupEnum >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::RecursiveMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::RecursiveMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::RecursiveMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
