// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/compiler/cpp/cpp_test_bad_identifiers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
namespace protobuf_unittest {
class DummyMessage;
class DummyMessageDefaultTypeInternal;
extern DummyMessageDefaultTypeInternal _DummyMessage_default_instance_;
class NULL_;
class NULL_DefaultTypeInternal;
extern NULL_DefaultTypeInternal _NULL__default_instance_;
class Shutdown;
class ShutdownDefaultTypeInternal;
extern ShutdownDefaultTypeInternal _Shutdown_default_instance_;
class TableStruct;
class TableStructDefaultTypeInternal;
extern TableStructDefaultTypeInternal _TableStruct_default_instance_;
class TestConflictingEnumNames;
class TestConflictingEnumNamesDefaultTypeInternal;
extern TestConflictingEnumNamesDefaultTypeInternal _TestConflictingEnumNames_default_instance_;
class TestConflictingSymbolNames;
class TestConflictingSymbolNamesDefaultTypeInternal;
extern TestConflictingSymbolNamesDefaultTypeInternal _TestConflictingSymbolNames_default_instance_;
class TestConflictingSymbolNamesExtension;
class TestConflictingSymbolNamesExtensionDefaultTypeInternal;
extern TestConflictingSymbolNamesExtensionDefaultTypeInternal _TestConflictingSymbolNamesExtension_default_instance_;
class TestConflictingSymbolNames_BuildDescriptors;
class TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal;
extern TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal _TestConflictingSymbolNames_BuildDescriptors_default_instance_;
class TestConflictingSymbolNames_Cord;
class TestConflictingSymbolNames_CordDefaultTypeInternal;
extern TestConflictingSymbolNames_CordDefaultTypeInternal _TestConflictingSymbolNames_Cord_default_instance_;
class TestConflictingSymbolNames_DO;
class TestConflictingSymbolNames_DODefaultTypeInternal;
extern TestConflictingSymbolNames_DODefaultTypeInternal _TestConflictingSymbolNames_DO_default_instance_;
class TestConflictingSymbolNames_Data1;
class TestConflictingSymbolNames_Data1DefaultTypeInternal;
extern TestConflictingSymbolNames_Data1DefaultTypeInternal _TestConflictingSymbolNames_Data1_default_instance_;
class TestConflictingSymbolNames_Data2;
class TestConflictingSymbolNames_Data2DefaultTypeInternal;
extern TestConflictingSymbolNames_Data2DefaultTypeInternal _TestConflictingSymbolNames_Data2_default_instance_;
class TestConflictingSymbolNames_Data3;
class TestConflictingSymbolNames_Data3DefaultTypeInternal;
extern TestConflictingSymbolNames_Data3DefaultTypeInternal _TestConflictingSymbolNames_Data3_default_instance_;
class TestConflictingSymbolNames_Data4;
class TestConflictingSymbolNames_Data4DefaultTypeInternal;
extern TestConflictingSymbolNames_Data4DefaultTypeInternal _TestConflictingSymbolNames_Data4_default_instance_;
class TestConflictingSymbolNames_Data5;
class TestConflictingSymbolNames_Data5DefaultTypeInternal;
extern TestConflictingSymbolNames_Data5DefaultTypeInternal _TestConflictingSymbolNames_Data5_default_instance_;
class TestConflictingSymbolNames_Data6;
class TestConflictingSymbolNames_Data6DefaultTypeInternal;
extern TestConflictingSymbolNames_Data6DefaultTypeInternal _TestConflictingSymbolNames_Data6_default_instance_;
class TestConflictingSymbolNames_StringPiece;
class TestConflictingSymbolNames_StringPieceDefaultTypeInternal;
extern TestConflictingSymbolNames_StringPieceDefaultTypeInternal _TestConflictingSymbolNames_StringPiece_default_instance_;
class TestConflictingSymbolNames_TypeTraits;
class TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal;
extern TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal _TestConflictingSymbolNames_TypeTraits_default_instance_;
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf_unittest::DummyMessage* Arena::CreateMaybeMessage<::protobuf_unittest::DummyMessage>(Arena*);
template<> ::protobuf_unittest::NULL_* Arena::CreateMaybeMessage<::protobuf_unittest::NULL_>(Arena*);
template<> ::protobuf_unittest::Shutdown* Arena::CreateMaybeMessage<::protobuf_unittest::Shutdown>(Arena*);
template<> ::protobuf_unittest::TableStruct* Arena::CreateMaybeMessage<::protobuf_unittest::TableStruct>(Arena*);
template<> ::protobuf_unittest::TestConflictingEnumNames* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingEnumNames>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNamesExtension* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNamesExtension>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_Cord* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_Cord>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_DO* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_DO>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_Data1* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_Data1>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_Data2* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_Data2>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_Data3* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_Data3>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_Data4* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_Data4>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_Data5* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_Data5>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_Data6* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_Data6>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_StringPiece* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_StringPiece>(Arena*);
template<> ::protobuf_unittest::TestConflictingSymbolNames_TypeTraits* Arena::CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_TypeTraits>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf_unittest {

enum TestConflictingSymbolNames_TestEnum : int {
  TestConflictingSymbolNames_TestEnum_FOO = 0
};
bool TestConflictingSymbolNames_TestEnum_IsValid(int value);
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames_TestEnum_TestEnum_MIN = TestConflictingSymbolNames_TestEnum_FOO;
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames_TestEnum_TestEnum_MAX = TestConflictingSymbolNames_TestEnum_FOO;
constexpr int TestConflictingSymbolNames_TestEnum_TestEnum_ARRAYSIZE = TestConflictingSymbolNames_TestEnum_TestEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestConflictingSymbolNames_TestEnum_descriptor();
template<typename T>
inline const std::string& TestConflictingSymbolNames_TestEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestConflictingSymbolNames_TestEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestConflictingSymbolNames_TestEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestConflictingSymbolNames_TestEnum_descriptor(), enum_t_value);
}
inline bool TestConflictingSymbolNames_TestEnum_Parse(
    const std::string& name, TestConflictingSymbolNames_TestEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestConflictingSymbolNames_TestEnum>(
    TestConflictingSymbolNames_TestEnum_descriptor(), name, value);
}
enum TestConflictingEnumNames_while : int {
  TestConflictingEnumNames_while_default_ = 0,
  TestConflictingEnumNames_while_and_ = 1,
  TestConflictingEnumNames_while_class_ = 2,
  TestConflictingEnumNames_while_int_ = 3,
  TestConflictingEnumNames_while_typedef_ = 4,
  TestConflictingEnumNames_while_XOR = 5
};
bool TestConflictingEnumNames_while_IsValid(int value);
constexpr TestConflictingEnumNames_while TestConflictingEnumNames_while_while_MIN = TestConflictingEnumNames_while_default_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames_while_while_MAX = TestConflictingEnumNames_while_XOR;
constexpr int TestConflictingEnumNames_while_while_ARRAYSIZE = TestConflictingEnumNames_while_while_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestConflictingEnumNames_while_descriptor();
template<typename T>
inline const std::string& TestConflictingEnumNames_while_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestConflictingEnumNames_while>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestConflictingEnumNames_while_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestConflictingEnumNames_while_descriptor(), enum_t_value);
}
inline bool TestConflictingEnumNames_while_Parse(
    const std::string& name, TestConflictingEnumNames_while* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestConflictingEnumNames_while>(
    TestConflictingEnumNames_while_descriptor(), name, value);
}
enum bool_ : int {
  default_ = 0,
  NOT_EQ = 1,
  volatile_ = 2,
  return_ = 3
};
bool bool__IsValid(int value);
constexpr bool_ bool_MIN = default_;
constexpr bool_ bool_MAX = return_;
constexpr int bool_ARRAYSIZE = bool_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* bool__descriptor();
template<typename T>
inline const std::string& bool__Name(T enum_t_value) {
  static_assert(::std::is_same<T, bool_>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function bool__Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    bool__descriptor(), enum_t_value);
}
inline bool bool__Parse(
    const std::string& name, bool_* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<bool_>(
    bool__descriptor(), name, value);
}
// ===================================================================

class TestConflictingSymbolNames_BuildDescriptors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors) */ {
 public:
  TestConflictingSymbolNames_BuildDescriptors();
  virtual ~TestConflictingSymbolNames_BuildDescriptors();

  TestConflictingSymbolNames_BuildDescriptors(const TestConflictingSymbolNames_BuildDescriptors& from);
  TestConflictingSymbolNames_BuildDescriptors(TestConflictingSymbolNames_BuildDescriptors&& from) noexcept
    : TestConflictingSymbolNames_BuildDescriptors() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_BuildDescriptors& operator=(const TestConflictingSymbolNames_BuildDescriptors& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_BuildDescriptors& operator=(TestConflictingSymbolNames_BuildDescriptors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_BuildDescriptors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_BuildDescriptors* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_BuildDescriptors*>(
               &_TestConflictingSymbolNames_BuildDescriptors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestConflictingSymbolNames_BuildDescriptors& a, TestConflictingSymbolNames_BuildDescriptors& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_BuildDescriptors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_BuildDescriptors* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_BuildDescriptors>(nullptr);
  }

  TestConflictingSymbolNames_BuildDescriptors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_BuildDescriptors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_BuildDescriptors& from);
  void MergeFrom(const TestConflictingSymbolNames_BuildDescriptors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_BuildDescriptors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_TypeTraits :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.TypeTraits) */ {
 public:
  TestConflictingSymbolNames_TypeTraits();
  virtual ~TestConflictingSymbolNames_TypeTraits();

  TestConflictingSymbolNames_TypeTraits(const TestConflictingSymbolNames_TypeTraits& from);
  TestConflictingSymbolNames_TypeTraits(TestConflictingSymbolNames_TypeTraits&& from) noexcept
    : TestConflictingSymbolNames_TypeTraits() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_TypeTraits& operator=(const TestConflictingSymbolNames_TypeTraits& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_TypeTraits& operator=(TestConflictingSymbolNames_TypeTraits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_TypeTraits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_TypeTraits* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_TypeTraits*>(
               &_TestConflictingSymbolNames_TypeTraits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestConflictingSymbolNames_TypeTraits& a, TestConflictingSymbolNames_TypeTraits& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_TypeTraits* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_TypeTraits* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_TypeTraits>(nullptr);
  }

  TestConflictingSymbolNames_TypeTraits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_TypeTraits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_TypeTraits& from);
  void MergeFrom(const TestConflictingSymbolNames_TypeTraits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_TypeTraits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.TypeTraits";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.TypeTraits)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data1) */ {
 public:
  TestConflictingSymbolNames_Data1();
  virtual ~TestConflictingSymbolNames_Data1();

  TestConflictingSymbolNames_Data1(const TestConflictingSymbolNames_Data1& from);
  TestConflictingSymbolNames_Data1(TestConflictingSymbolNames_Data1&& from) noexcept
    : TestConflictingSymbolNames_Data1() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_Data1& operator=(const TestConflictingSymbolNames_Data1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data1& operator=(TestConflictingSymbolNames_Data1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_Data1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_Data1* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data1*>(
               &_TestConflictingSymbolNames_Data1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestConflictingSymbolNames_Data1& a, TestConflictingSymbolNames_Data1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_Data1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_Data1* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data1>(nullptr);
  }

  TestConflictingSymbolNames_Data1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_Data1& from);
  void MergeFrom(const TestConflictingSymbolNames_Data1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_Data1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.Data1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int32 data = 1;
  int data_size() const;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data2) */ {
 public:
  TestConflictingSymbolNames_Data2();
  virtual ~TestConflictingSymbolNames_Data2();

  TestConflictingSymbolNames_Data2(const TestConflictingSymbolNames_Data2& from);
  TestConflictingSymbolNames_Data2(TestConflictingSymbolNames_Data2&& from) noexcept
    : TestConflictingSymbolNames_Data2() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_Data2& operator=(const TestConflictingSymbolNames_Data2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data2& operator=(TestConflictingSymbolNames_Data2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_Data2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_Data2* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data2*>(
               &_TestConflictingSymbolNames_Data2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestConflictingSymbolNames_Data2& a, TestConflictingSymbolNames_Data2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_Data2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_Data2* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data2>(nullptr);
  }

  TestConflictingSymbolNames_Data2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_Data2& from);
  void MergeFrom(const TestConflictingSymbolNames_Data2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_Data2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.Data2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
  int data_size() const;
  void clear_data();
  ::protobuf_unittest::TestConflictingSymbolNames_TestEnum data(int index) const;
  void set_data(int index, ::protobuf_unittest::TestConflictingSymbolNames_TestEnum value);
  void add_data(::protobuf_unittest::TestConflictingSymbolNames_TestEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_data();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> data_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data3) */ {
 public:
  TestConflictingSymbolNames_Data3();
  virtual ~TestConflictingSymbolNames_Data3();

  TestConflictingSymbolNames_Data3(const TestConflictingSymbolNames_Data3& from);
  TestConflictingSymbolNames_Data3(TestConflictingSymbolNames_Data3&& from) noexcept
    : TestConflictingSymbolNames_Data3() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_Data3& operator=(const TestConflictingSymbolNames_Data3& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data3& operator=(TestConflictingSymbolNames_Data3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_Data3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_Data3* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data3*>(
               &_TestConflictingSymbolNames_Data3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestConflictingSymbolNames_Data3& a, TestConflictingSymbolNames_Data3& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_Data3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_Data3* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data3>(nullptr);
  }

  TestConflictingSymbolNames_Data3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_Data3& from);
  void MergeFrom(const TestConflictingSymbolNames_Data3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_Data3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.Data3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data4) */ {
 public:
  TestConflictingSymbolNames_Data4();
  virtual ~TestConflictingSymbolNames_Data4();

  TestConflictingSymbolNames_Data4(const TestConflictingSymbolNames_Data4& from);
  TestConflictingSymbolNames_Data4(TestConflictingSymbolNames_Data4&& from) noexcept
    : TestConflictingSymbolNames_Data4() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_Data4& operator=(const TestConflictingSymbolNames_Data4& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data4& operator=(TestConflictingSymbolNames_Data4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_Data4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_Data4* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data4*>(
               &_TestConflictingSymbolNames_Data4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TestConflictingSymbolNames_Data4& a, TestConflictingSymbolNames_Data4& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_Data4* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_Data4* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data4>(nullptr);
  }

  TestConflictingSymbolNames_Data4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_Data4& from);
  void MergeFrom(const TestConflictingSymbolNames_Data4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_Data4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.Data4";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
  int data_size() const;
  void clear_data();
  ::protobuf_unittest::TestConflictingSymbolNames_Data4* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestConflictingSymbolNames_Data4 >*
      mutable_data();
  const ::protobuf_unittest::TestConflictingSymbolNames_Data4& data(int index) const;
  ::protobuf_unittest::TestConflictingSymbolNames_Data4* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestConflictingSymbolNames_Data4 >&
      data() const;

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestConflictingSymbolNames_Data4 > data_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data5 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data5) */ {
 public:
  TestConflictingSymbolNames_Data5();
  virtual ~TestConflictingSymbolNames_Data5();

  TestConflictingSymbolNames_Data5(const TestConflictingSymbolNames_Data5& from);
  TestConflictingSymbolNames_Data5(TestConflictingSymbolNames_Data5&& from) noexcept
    : TestConflictingSymbolNames_Data5() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_Data5& operator=(const TestConflictingSymbolNames_Data5& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data5& operator=(TestConflictingSymbolNames_Data5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_Data5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_Data5* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data5*>(
               &_TestConflictingSymbolNames_Data5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TestConflictingSymbolNames_Data5& a, TestConflictingSymbolNames_Data5& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_Data5* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_Data5* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data5>(nullptr);
  }

  TestConflictingSymbolNames_Data5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_Data5& from);
  void MergeFrom(const TestConflictingSymbolNames_Data5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_Data5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.Data5";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1 [ctype = STRING_PIECE];
  int data_size() const;
  void clear_data();
 private:
  // Hidden due to unknown ctype option.
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
 public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data5)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Data6 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Data6) */ {
 public:
  TestConflictingSymbolNames_Data6();
  virtual ~TestConflictingSymbolNames_Data6();

  TestConflictingSymbolNames_Data6(const TestConflictingSymbolNames_Data6& from);
  TestConflictingSymbolNames_Data6(TestConflictingSymbolNames_Data6&& from) noexcept
    : TestConflictingSymbolNames_Data6() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_Data6& operator=(const TestConflictingSymbolNames_Data6& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Data6& operator=(TestConflictingSymbolNames_Data6&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_Data6& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_Data6* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Data6*>(
               &_TestConflictingSymbolNames_Data6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TestConflictingSymbolNames_Data6& a, TestConflictingSymbolNames_Data6& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_Data6* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_Data6* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data6>(nullptr);
  }

  TestConflictingSymbolNames_Data6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Data6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_Data6& from);
  void MergeFrom(const TestConflictingSymbolNames_Data6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_Data6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.Data6";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1 [ctype = CORD];
  int data_size() const;
  void clear_data();
 private:
  // Hidden due to unknown ctype option.
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
 public:

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Data6)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_Cord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.Cord) */ {
 public:
  TestConflictingSymbolNames_Cord();
  virtual ~TestConflictingSymbolNames_Cord();

  TestConflictingSymbolNames_Cord(const TestConflictingSymbolNames_Cord& from);
  TestConflictingSymbolNames_Cord(TestConflictingSymbolNames_Cord&& from) noexcept
    : TestConflictingSymbolNames_Cord() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_Cord& operator=(const TestConflictingSymbolNames_Cord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_Cord& operator=(TestConflictingSymbolNames_Cord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_Cord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_Cord* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_Cord*>(
               &_TestConflictingSymbolNames_Cord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TestConflictingSymbolNames_Cord& a, TestConflictingSymbolNames_Cord& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_Cord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_Cord* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Cord>(nullptr);
  }

  TestConflictingSymbolNames_Cord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_Cord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_Cord& from);
  void MergeFrom(const TestConflictingSymbolNames_Cord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_Cord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.Cord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.Cord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_StringPiece :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.StringPiece) */ {
 public:
  TestConflictingSymbolNames_StringPiece();
  virtual ~TestConflictingSymbolNames_StringPiece();

  TestConflictingSymbolNames_StringPiece(const TestConflictingSymbolNames_StringPiece& from);
  TestConflictingSymbolNames_StringPiece(TestConflictingSymbolNames_StringPiece&& from) noexcept
    : TestConflictingSymbolNames_StringPiece() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_StringPiece& operator=(const TestConflictingSymbolNames_StringPiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_StringPiece& operator=(TestConflictingSymbolNames_StringPiece&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_StringPiece& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_StringPiece* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_StringPiece*>(
               &_TestConflictingSymbolNames_StringPiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TestConflictingSymbolNames_StringPiece& a, TestConflictingSymbolNames_StringPiece& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_StringPiece* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_StringPiece* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_StringPiece>(nullptr);
  }

  TestConflictingSymbolNames_StringPiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_StringPiece>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_StringPiece& from);
  void MergeFrom(const TestConflictingSymbolNames_StringPiece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_StringPiece* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.StringPiece";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.StringPiece)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames_DO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames.DO) */ {
 public:
  TestConflictingSymbolNames_DO();
  virtual ~TestConflictingSymbolNames_DO();

  TestConflictingSymbolNames_DO(const TestConflictingSymbolNames_DO& from);
  TestConflictingSymbolNames_DO(TestConflictingSymbolNames_DO&& from) noexcept
    : TestConflictingSymbolNames_DO() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames_DO& operator=(const TestConflictingSymbolNames_DO& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames_DO& operator=(TestConflictingSymbolNames_DO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames_DO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames_DO* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames_DO*>(
               &_TestConflictingSymbolNames_DO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TestConflictingSymbolNames_DO& a, TestConflictingSymbolNames_DO& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames_DO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames_DO* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_DO>(nullptr);
  }

  TestConflictingSymbolNames_DO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames_DO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames_DO& from);
  void MergeFrom(const TestConflictingSymbolNames_DO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames_DO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames.DO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames.DO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNames :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNames) */ {
 public:
  TestConflictingSymbolNames();
  virtual ~TestConflictingSymbolNames();

  TestConflictingSymbolNames(const TestConflictingSymbolNames& from);
  TestConflictingSymbolNames(TestConflictingSymbolNames&& from) noexcept
    : TestConflictingSymbolNames() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNames& operator=(const TestConflictingSymbolNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNames& operator=(TestConflictingSymbolNames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNames* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNames*>(
               &_TestConflictingSymbolNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TestConflictingSymbolNames& a, TestConflictingSymbolNames& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNames* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNames* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNames>(nullptr);
  }

  TestConflictingSymbolNames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNames& from);
  void MergeFrom(const TestConflictingSymbolNames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNames";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TestConflictingSymbolNames_BuildDescriptors BuildDescriptors;
  typedef TestConflictingSymbolNames_TypeTraits TypeTraits;
  typedef TestConflictingSymbolNames_Data1 Data1;
  typedef TestConflictingSymbolNames_Data2 Data2;
  typedef TestConflictingSymbolNames_Data3 Data3;
  typedef TestConflictingSymbolNames_Data4 Data4;
  typedef TestConflictingSymbolNames_Data5 Data5;
  typedef TestConflictingSymbolNames_Data6 Data6;
  typedef TestConflictingSymbolNames_Cord Cord;
  typedef TestConflictingSymbolNames_StringPiece StringPiece;
  typedef TestConflictingSymbolNames_DO DO;

  typedef TestConflictingSymbolNames_TestEnum TestEnum;
  static constexpr TestEnum FOO =
    TestConflictingSymbolNames_TestEnum_FOO;
  static inline bool TestEnum_IsValid(int value) {
    return TestConflictingSymbolNames_TestEnum_IsValid(value);
  }
  static constexpr TestEnum TestEnum_MIN =
    TestConflictingSymbolNames_TestEnum_TestEnum_MIN;
  static constexpr TestEnum TestEnum_MAX =
    TestConflictingSymbolNames_TestEnum_TestEnum_MAX;
  static constexpr int TestEnum_ARRAYSIZE =
    TestConflictingSymbolNames_TestEnum_TestEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TestEnum_descriptor() {
    return TestConflictingSymbolNames_TestEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& TestEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TestEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TestEnum_Name.");
    return TestConflictingSymbolNames_TestEnum_Name(enum_t_value);
  }
  static inline bool TestEnum_Parse(const std::string& name,
      TestEnum* value) {
    return TestConflictingSymbolNames_TestEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 4,
    kNewElementFieldNumber = 5,
    kIndexFieldNumber = 13,
    kLengthFieldNumber = 3,
    kStringFieldNumber = 18,
    kSomeCordFieldNumber = 28,
    kSomeStringPieceFieldNumber = 29,
    kReleaseLengthFieldNumber = 35,
    kTargetFieldNumber = 38,
    kDoFieldNumber = 32,
    kReleaseDoFieldNumber = 36,
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
    kTotalSizeFieldNumber = 6,
    kTagFieldNumber = 7,
    kSourceFieldNumber = 8,
    kValueFieldNumber = 9,
    kFileFieldNumber = 10,
    kFromFieldNumber = 11,
    kHandleUninterpretedFieldNumber = 12,
    kControllerFieldNumber = 14,
    kAlreadyHereFieldNumber = 15,
    kUint32FieldNumber = 16,
    kUint64FieldNumber = 17,
    kMemsetFieldNumber = 19,
    kInt32FieldNumber = 20,
    kInt64FieldNumber = 21,
    kCachedSizeFieldNumber = 22,
    kExtensionsFieldNumber = 23,
    kBitFieldNumber = 24,
    kBitsFieldNumber = 25,
    kOffsetsFieldNumber = 26,
    kReflectionFieldNumber = 27,
    kIntFieldNumber = 30,
    kFriendFieldNumber = 31,
    kFieldTypeFieldNumber = 33,
    kIsPackedFieldNumber = 34,
    kClassFieldNumber = 37,
    kTypedeclFieldNumber = 39,
    kAutoFieldNumber = 40,
  };
  // repeated int32 i = 4;
  int i_size() const;
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int32 i(int index) const;
  void set_i(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_i();

  // repeated string new_element = 5 [ctype = STRING_PIECE];
  int new_element_size() const;
  void clear_new_element();
 private:
  // Hidden due to unknown ctype option.
  const std::string& new_element(int index) const;
  std::string* mutable_new_element(int index);
  void set_new_element(int index, const std::string& value);
  void set_new_element(int index, std::string&& value);
  void set_new_element(int index, const char* value);
  void set_new_element(int index, const char* value, size_t size);
  std::string* add_new_element();
  void add_new_element(const std::string& value);
  void add_new_element(std::string&& value);
  void add_new_element(const char* value);
  void add_new_element(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& new_element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_new_element();
 public:

  // repeated int32 index = 13;
  int index_size() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index(int index) const;
  void set_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_index();

  // optional string length = 3;
  bool has_length() const;
  void clear_length();
  const std::string& length() const;
  void set_length(const std::string& value);
  void set_length(std::string&& value);
  void set_length(const char* value);
  void set_length(const char* value, size_t size);
  std::string* mutable_length();
  std::string* release_length__();
  void set_allocated_length(std::string* length);

  // optional string string = 18;
  bool has_string() const;
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);

  // optional string some_cord = 28 [ctype = CORD];
  bool has_some_cord() const;
  void clear_some_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& some_cord() const;
  void set_some_cord(const std::string& value);
  void set_some_cord(std::string&& value);
  void set_some_cord(const char* value);
  void set_some_cord(const char* value, size_t size);
  std::string* mutable_some_cord();
  std::string* release_some_cord();
  void set_allocated_some_cord(std::string* some_cord);
 public:

  // optional string some_string_piece = 29 [ctype = STRING_PIECE];
  bool has_some_string_piece() const;
  void clear_some_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& some_string_piece() const;
  void set_some_string_piece(const std::string& value);
  void set_some_string_piece(std::string&& value);
  void set_some_string_piece(const char* value);
  void set_some_string_piece(const char* value, size_t size);
  std::string* mutable_some_string_piece();
  std::string* release_some_string_piece();
  void set_allocated_some_string_piece(std::string* some_string_piece);
 public:

  // optional string release_length = 35;
  bool has_release_length() const;
  void clear_release_length();
  const std::string& release_length() const;
  void set_release_length(const std::string& value);
  void set_release_length(std::string&& value);
  void set_release_length(const char* value);
  void set_release_length(const char* value, size_t size);
  std::string* mutable_release_length();
  std::string* release_release_length();
  void set_allocated_release_length(std::string* release_length);

  // optional string target = 38;
  bool has_target() const;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);

  // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
  bool has_do_() const;
  void clear_do_();
  const ::protobuf_unittest::TestConflictingSymbolNames_DO& do_() const;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* release_do__();
  ::protobuf_unittest::TestConflictingSymbolNames_DO* mutable_do_();
  void set_allocated_do_(::protobuf_unittest::TestConflictingSymbolNames_DO* do_);

  // optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
  bool has_release_do() const;
  void clear_release_do();
  const ::protobuf_unittest::TestConflictingSymbolNames_DO& release_do() const;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* release_release_do();
  ::protobuf_unittest::TestConflictingSymbolNames_DO* mutable_release_do();
  void set_allocated_release_do(::protobuf_unittest::TestConflictingSymbolNames_DO* release_do);

  // optional int32 input = 1;
  bool has_input() const;
  void clear_input();
  ::PROTOBUF_NAMESPACE_ID::int32 input() const;
  void set_input(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 output = 2;
  bool has_output() const;
  void clear_output();
  ::PROTOBUF_NAMESPACE_ID::int32 output() const;
  void set_output(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_size = 6;
  bool has_total_size() const;
  void clear_total_size();
  ::PROTOBUF_NAMESPACE_ID::int32 total_size() const;
  void set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tag = 7;
  bool has_tag() const;
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::int32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 source = 8;
  bool has_source() const;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 value = 9;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 file = 10;
  bool has_file() const;
  void clear_file();
  ::PROTOBUF_NAMESPACE_ID::int32 file() const;
  void set_file(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 from = 11;
  bool has_from() const;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 handle_uninterpreted = 12;
  bool has_handle_uninterpreted() const;
  void clear_handle_uninterpreted();
  ::PROTOBUF_NAMESPACE_ID::int32 handle_uninterpreted() const;
  void set_handle_uninterpreted(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 controller = 14;
  bool has_controller() const;
  void clear_controller();
  ::PROTOBUF_NAMESPACE_ID::int32 controller() const;
  void set_controller(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 already_here = 15;
  bool has_already_here() const;
  void clear_already_here();
  ::PROTOBUF_NAMESPACE_ID::int32 already_here() const;
  void set_already_here(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 uint32 = 16;
  bool has_uint32() const;
  void clear_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32() const;
  void set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 uint64 = 17;
  bool has_uint64() const;
  void clear_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64() const;
  void set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 memset = 19;
  bool has_memset() const;
  void clear_memset();
  ::PROTOBUF_NAMESPACE_ID::int32 memset() const;
  void set_memset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 int32 = 20;
  bool has_int32() const;
  void clear_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 int32() const;
  void set_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 int64 = 21;
  bool has_int64() const;
  void clear_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 int64() const;
  void set_int64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 cached_size = 22;
  bool has_cached_size() const;
  void clear_cached_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_size() const;
  void set_cached_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 extensions = 23;
  bool has_extensions() const;
  void clear_extensions();
  ::PROTOBUF_NAMESPACE_ID::uint32 extensions() const;
  void set_extensions(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 bit = 24;
  bool has_bit() const;
  void clear_bit();
  ::PROTOBUF_NAMESPACE_ID::uint32 bit() const;
  void set_bit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 bits = 25;
  bool has_bits() const;
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 offsets = 26;
  bool has_offsets() const;
  void clear_offsets();
  ::PROTOBUF_NAMESPACE_ID::uint32 offsets() const;
  void set_offsets(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 reflection = 27;
  bool has_reflection() const;
  void clear_reflection();
  ::PROTOBUF_NAMESPACE_ID::uint32 reflection() const;
  void set_reflection(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 int = 30;
  bool has_int_() const;
  void clear_int_();
  ::PROTOBUF_NAMESPACE_ID::uint32 int_() const;
  void set_int_(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 friend = 31;
  bool has_friend_() const;
  void clear_friend_();
  ::PROTOBUF_NAMESPACE_ID::uint32 friend_() const;
  void set_friend_(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 field_type = 33;
  bool has_field_type() const;
  void clear_field_type();
  ::PROTOBUF_NAMESPACE_ID::int32 field_type() const;
  void set_field_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_packed = 34;
  bool has_is_packed() const;
  void clear_is_packed();
  bool is_packed() const;
  void set_is_packed(bool value);

  // optional uint32 class = 37;
  bool has_class_() const;
  void clear_class_();
  ::PROTOBUF_NAMESPACE_ID::uint32 class_() const;
  void set_class_(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 typedecl = 39;
  bool has_typedecl() const;
  void clear_typedecl();
  ::PROTOBUF_NAMESPACE_ID::uint32 typedecl() const;
  void set_typedecl(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 auto = 40;
  bool has_auto_() const;
  void clear_auto_();
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_() const;
  void set_auto_(::PROTOBUF_NAMESPACE_ID::uint32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestConflictingSymbolNames)
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNames)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > i_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> new_element_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr length_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_cord_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_string_piece_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr release_length_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* do__;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* release_do_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_uninterpreted_;
  ::PROTOBUF_NAMESPACE_ID::int32 controller_;
  ::PROTOBUF_NAMESPACE_ID::int32 already_here_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_;
  ::PROTOBUF_NAMESPACE_ID::int32 memset_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extensions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offsets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reflection_;
  ::PROTOBUF_NAMESPACE_ID::uint32 int__;
  ::PROTOBUF_NAMESPACE_ID::uint32 friend__;
  ::PROTOBUF_NAMESPACE_ID::int32 field_type_;
  bool is_packed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 class__;
  ::PROTOBUF_NAMESPACE_ID::uint32 typedecl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auto__;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingSymbolNamesExtension :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingSymbolNamesExtension) */ {
 public:
  TestConflictingSymbolNamesExtension();
  virtual ~TestConflictingSymbolNamesExtension();

  TestConflictingSymbolNamesExtension(const TestConflictingSymbolNamesExtension& from);
  TestConflictingSymbolNamesExtension(TestConflictingSymbolNamesExtension&& from) noexcept
    : TestConflictingSymbolNamesExtension() {
    *this = ::std::move(from);
  }

  inline TestConflictingSymbolNamesExtension& operator=(const TestConflictingSymbolNamesExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingSymbolNamesExtension& operator=(TestConflictingSymbolNamesExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingSymbolNamesExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingSymbolNamesExtension* internal_default_instance() {
    return reinterpret_cast<const TestConflictingSymbolNamesExtension*>(
               &_TestConflictingSymbolNamesExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TestConflictingSymbolNamesExtension& a, TestConflictingSymbolNamesExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingSymbolNamesExtension* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingSymbolNamesExtension* New() const final {
    return CreateMaybeMessage<TestConflictingSymbolNamesExtension>(nullptr);
  }

  TestConflictingSymbolNamesExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingSymbolNamesExtension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingSymbolNamesExtension& from);
  void MergeFrom(const TestConflictingSymbolNamesExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingSymbolNamesExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingSymbolNamesExtension";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kRepeatedInt32ExtFieldNumber = 20423638;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestConflictingSymbolNames,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, true >
    repeated_int32_ext;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingSymbolNamesExtension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TestConflictingEnumNames :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestConflictingEnumNames) */ {
 public:
  TestConflictingEnumNames();
  virtual ~TestConflictingEnumNames();

  TestConflictingEnumNames(const TestConflictingEnumNames& from);
  TestConflictingEnumNames(TestConflictingEnumNames&& from) noexcept
    : TestConflictingEnumNames() {
    *this = ::std::move(from);
  }

  inline TestConflictingEnumNames& operator=(const TestConflictingEnumNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConflictingEnumNames& operator=(TestConflictingEnumNames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConflictingEnumNames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConflictingEnumNames* internal_default_instance() {
    return reinterpret_cast<const TestConflictingEnumNames*>(
               &_TestConflictingEnumNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TestConflictingEnumNames& a, TestConflictingEnumNames& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConflictingEnumNames* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConflictingEnumNames* New() const final {
    return CreateMaybeMessage<TestConflictingEnumNames>(nullptr);
  }

  TestConflictingEnumNames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConflictingEnumNames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConflictingEnumNames& from);
  void MergeFrom(const TestConflictingEnumNames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConflictingEnumNames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestConflictingEnumNames";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TestConflictingEnumNames_while while_;
  static constexpr while_ default_ =
    TestConflictingEnumNames_while_default_;
  static constexpr while_ and_ =
    TestConflictingEnumNames_while_and_;
  static constexpr while_ class_ =
    TestConflictingEnumNames_while_class_;
  static constexpr while_ int_ =
    TestConflictingEnumNames_while_int_;
  static constexpr while_ typedef_ =
    TestConflictingEnumNames_while_typedef_;
  static constexpr while_ XOR =
    TestConflictingEnumNames_while_XOR;
  static inline bool while_IsValid(int value) {
    return TestConflictingEnumNames_while_IsValid(value);
  }
  static constexpr while_ while_MIN =
    TestConflictingEnumNames_while_while_MIN;
  static constexpr while_ while_MAX =
    TestConflictingEnumNames_while_while_MAX;
  static constexpr int while_ARRAYSIZE =
    TestConflictingEnumNames_while_while_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  while_descriptor() {
    return TestConflictingEnumNames_while_descriptor();
  }
  template<typename T>
  static inline const std::string& while_Name(T enum_t_value) {
    static_assert(::std::is_same<T, while_>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function while_Name.");
    return TestConflictingEnumNames_while_Name(enum_t_value);
  }
  static inline bool while_Parse(const std::string& name,
      while_* value) {
    return TestConflictingEnumNames_while_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConflictingEnumFieldNumber = 1,
  };
  // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
  bool has_conflicting_enum() const;
  void clear_conflicting_enum();
  ::protobuf_unittest::TestConflictingEnumNames_while conflicting_enum() const;
  void set_conflicting_enum(::protobuf_unittest::TestConflictingEnumNames_while value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestConflictingEnumNames)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int conflicting_enum_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class DummyMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.DummyMessage) */ {
 public:
  DummyMessage();
  virtual ~DummyMessage();

  DummyMessage(const DummyMessage& from);
  DummyMessage(DummyMessage&& from) noexcept
    : DummyMessage() {
    *this = ::std::move(from);
  }

  inline DummyMessage& operator=(const DummyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyMessage& operator=(DummyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DummyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DummyMessage* internal_default_instance() {
    return reinterpret_cast<const DummyMessage*>(
               &_DummyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DummyMessage& a, DummyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DummyMessage* New() const final {
    return CreateMaybeMessage<DummyMessage>(nullptr);
  }

  DummyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DummyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DummyMessage& from);
  void MergeFrom(const DummyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.DummyMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.DummyMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class NULL_ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.NULL) */ {
 public:
  NULL_();
  virtual ~NULL_();

  NULL_(const NULL_& from);
  NULL_(NULL_&& from) noexcept
    : NULL_() {
    *this = ::std::move(from);
  }

  inline NULL_& operator=(const NULL_& from) {
    CopyFrom(from);
    return *this;
  }
  inline NULL_& operator=(NULL_&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NULL_& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NULL_* internal_default_instance() {
    return reinterpret_cast<const NULL_*>(
               &_NULL__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NULL_& a, NULL_& b) {
    a.Swap(&b);
  }
  inline void Swap(NULL_* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NULL_* New() const final {
    return CreateMaybeMessage<NULL_>(nullptr);
  }

  NULL_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NULL_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NULL_& from);
  void MergeFrom(const NULL_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NULL_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.NULL";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntFieldNumber = 1,
  };
  // optional int32 int = 1;
  bool has_int_() const;
  void clear_int_();
  ::PROTOBUF_NAMESPACE_ID::int32 int_() const;
  void set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.NULL)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 int__;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class Shutdown :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.Shutdown) */ {
 public:
  Shutdown();
  virtual ~Shutdown();

  Shutdown(const Shutdown& from);
  Shutdown(Shutdown&& from) noexcept
    : Shutdown() {
    *this = ::std::move(from);
  }

  inline Shutdown& operator=(const Shutdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shutdown& operator=(Shutdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shutdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shutdown* internal_default_instance() {
    return reinterpret_cast<const Shutdown*>(
               &_Shutdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Shutdown& a, Shutdown& b) {
    a.Swap(&b);
  }
  inline void Swap(Shutdown* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shutdown* New() const final {
    return CreateMaybeMessage<Shutdown>(nullptr);
  }

  Shutdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shutdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shutdown& from);
  void MergeFrom(const Shutdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shutdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.Shutdown";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.Shutdown)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// -------------------------------------------------------------------

class TableStruct :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TableStruct) */ {
 public:
  TableStruct();
  virtual ~TableStruct();

  TableStruct(const TableStruct& from);
  TableStruct(TableStruct&& from) noexcept
    : TableStruct() {
    *this = ::std::move(from);
  }

  inline TableStruct& operator=(const TableStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableStruct& operator=(TableStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableStruct* internal_default_instance() {
    return reinterpret_cast<const TableStruct*>(
               &_TableStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TableStruct& a, TableStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(TableStruct* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableStruct* New() const final {
    return CreateMaybeMessage<TableStruct>(nullptr);
  }

  TableStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableStruct& from);
  void MergeFrom(const TableStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TableStruct";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
    return ::descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TableStruct)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto;
};
// ===================================================================

class TestConflictingMethodNames_Stub;

class TestConflictingMethodNames : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TestConflictingMethodNames() {};
 public:
  virtual ~TestConflictingMethodNames();

  typedef TestConflictingMethodNames_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Closure(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::protobuf_unittest::DummyMessage* request,
                       ::protobuf_unittest::DummyMessage* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestConflictingMethodNames);
};

class TestConflictingMethodNames_Stub : public TestConflictingMethodNames {
 public:
  TestConflictingMethodNames_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TestConflictingMethodNames_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TestConflictingMethodNames_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TestConflictingMethodNames ------------------------------------------

  void Closure(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::protobuf_unittest::DummyMessage* request,
                       ::protobuf_unittest::DummyMessage* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestConflictingMethodNames_Stub);
};


// ===================================================================

static const int kVoidFieldNumber = 314253;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestConflictingSymbolNames,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  void_;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestConflictingSymbolNames_BuildDescriptors

// -------------------------------------------------------------------

// TestConflictingSymbolNames_TypeTraits

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data1

// repeated int32 data = 1;
inline int TestConflictingSymbolNames_Data1::data_size() const {
  return data_.size();
}
inline void TestConflictingSymbolNames_Data1::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames_Data1::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
  return data_.Get(index);
}
inline void TestConflictingSymbolNames_Data1::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
}
inline void TestConflictingSymbolNames_Data1::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestConflictingSymbolNames_Data1::data() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestConflictingSymbolNames_Data1::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data1.data)
  return &data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data2

// repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
inline int TestConflictingSymbolNames_Data2::data_size() const {
  return data_.size();
}
inline void TestConflictingSymbolNames_Data2::clear_data() {
  data_.Clear();
}
inline ::protobuf_unittest::TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames_Data2::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
  return static_cast< ::protobuf_unittest::TestConflictingSymbolNames_TestEnum >(data_.Get(index));
}
inline void TestConflictingSymbolNames_Data2::set_data(int index, ::protobuf_unittest::TestConflictingSymbolNames_TestEnum value) {
  assert(::protobuf_unittest::TestConflictingSymbolNames_TestEnum_IsValid(value));
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
}
inline void TestConflictingSymbolNames_Data2::add_data(::protobuf_unittest::TestConflictingSymbolNames_TestEnum value) {
  assert(::protobuf_unittest::TestConflictingSymbolNames_TestEnum_IsValid(value));
  data_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestConflictingSymbolNames_Data2::data() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestConflictingSymbolNames_Data2::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data2.data)
  return &data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data3

// repeated string data = 1;
inline int TestConflictingSymbolNames_Data3::data_size() const {
  return data_.size();
}
inline void TestConflictingSymbolNames_Data3::clear_data() {
  data_.Clear();
}
inline const std::string& TestConflictingSymbolNames_Data3::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return data_.Get(index);
}
inline std::string* TestConflictingSymbolNames_Data3::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return data_.Mutable(index);
}
inline void TestConflictingSymbolNames_Data3::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  data_.Mutable(index)->assign(value);
}
inline void TestConflictingSymbolNames_Data3::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void TestConflictingSymbolNames_Data3::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
}
inline void TestConflictingSymbolNames_Data3::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
}
inline std::string* TestConflictingSymbolNames_Data3::add_data() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return data_.Add();
}
inline void TestConflictingSymbolNames_Data3::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
}
inline void TestConflictingSymbolNames_Data3::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
}
inline void TestConflictingSymbolNames_Data3::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
}
inline void TestConflictingSymbolNames_Data3::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data3::data() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data3::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data3.data)
  return &data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data4

// repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
inline int TestConflictingSymbolNames_Data4::data_size() const {
  return data_.size();
}
inline void TestConflictingSymbolNames_Data4::clear_data() {
  data_.Clear();
}
inline ::protobuf_unittest::TestConflictingSymbolNames_Data4* TestConflictingSymbolNames_Data4::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestConflictingSymbolNames_Data4 >*
TestConflictingSymbolNames_Data4::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return &data_;
}
inline const ::protobuf_unittest::TestConflictingSymbolNames_Data4& TestConflictingSymbolNames_Data4::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return data_.Get(index);
}
inline ::protobuf_unittest::TestConflictingSymbolNames_Data4* TestConflictingSymbolNames_Data4::add_data() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestConflictingSymbolNames_Data4 >&
TestConflictingSymbolNames_Data4::data() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data4.data)
  return data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data5

// repeated string data = 1 [ctype = STRING_PIECE];
inline int TestConflictingSymbolNames_Data5::data_size() const {
  return data_.size();
}
inline void TestConflictingSymbolNames_Data5::clear_data() {
  data_.Clear();
}
inline const std::string& TestConflictingSymbolNames_Data5::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return data_.Get(index);
}
inline std::string* TestConflictingSymbolNames_Data5::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return data_.Mutable(index);
}
inline void TestConflictingSymbolNames_Data5::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  data_.Mutable(index)->assign(value);
}
inline void TestConflictingSymbolNames_Data5::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void TestConflictingSymbolNames_Data5::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
}
inline void TestConflictingSymbolNames_Data5::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
}
inline std::string* TestConflictingSymbolNames_Data5::add_data() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return data_.Add();
}
inline void TestConflictingSymbolNames_Data5::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
}
inline void TestConflictingSymbolNames_Data5::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
}
inline void TestConflictingSymbolNames_Data5::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
}
inline void TestConflictingSymbolNames_Data5::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data5::data() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data5::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data5.data)
  return &data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Data6

// repeated string data = 1 [ctype = CORD];
inline int TestConflictingSymbolNames_Data6::data_size() const {
  return data_.size();
}
inline void TestConflictingSymbolNames_Data6::clear_data() {
  data_.Clear();
}
inline const std::string& TestConflictingSymbolNames_Data6::data(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return data_.Get(index);
}
inline std::string* TestConflictingSymbolNames_Data6::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return data_.Mutable(index);
}
inline void TestConflictingSymbolNames_Data6::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  data_.Mutable(index)->assign(value);
}
inline void TestConflictingSymbolNames_Data6::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void TestConflictingSymbolNames_Data6::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
}
inline void TestConflictingSymbolNames_Data6::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
}
inline std::string* TestConflictingSymbolNames_Data6::add_data() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return data_.Add();
}
inline void TestConflictingSymbolNames_Data6::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
}
inline void TestConflictingSymbolNames_Data6::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
}
inline void TestConflictingSymbolNames_Data6::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
}
inline void TestConflictingSymbolNames_Data6::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestConflictingSymbolNames_Data6::data() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestConflictingSymbolNames_Data6::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.Data6.data)
  return &data_;
}

// -------------------------------------------------------------------

// TestConflictingSymbolNames_Cord

// -------------------------------------------------------------------

// TestConflictingSymbolNames_StringPiece

// -------------------------------------------------------------------

// TestConflictingSymbolNames_DO

// -------------------------------------------------------------------

// TestConflictingSymbolNames

// optional int32 input = 1;
inline bool TestConflictingSymbolNames::has_input() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TestConflictingSymbolNames::clear_input() {
  input_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::input() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.input)
  return input_;
}
inline void TestConflictingSymbolNames::set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  input_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.input)
}

// optional int32 output = 2;
inline bool TestConflictingSymbolNames::has_output() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TestConflictingSymbolNames::clear_output() {
  output_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::output() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.output)
  return output_;
}
inline void TestConflictingSymbolNames::set_output(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  output_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.output)
}

// optional string length = 3;
inline bool TestConflictingSymbolNames::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestConflictingSymbolNames::clear_length() {
  length_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestConflictingSymbolNames::length() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.length)
  return length_.GetNoArena();
}
inline void TestConflictingSymbolNames::set_length(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  length_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.length)
}
inline void TestConflictingSymbolNames::set_length(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  length_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestConflictingSymbolNames.length)
}
inline void TestConflictingSymbolNames::set_length(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  length_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.length)
}
inline void TestConflictingSymbolNames::set_length(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  length_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.length)
}
inline std::string* TestConflictingSymbolNames::mutable_length() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.length)
  return length_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConflictingSymbolNames::release_length__() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.length)
  if (!has_length()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return length_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConflictingSymbolNames::set_allocated_length(std::string* length) {
  if (length != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  length_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), length);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.length)
}

// repeated int32 i = 4;
inline int TestConflictingSymbolNames::i_size() const {
  return i_.size();
}
inline void TestConflictingSymbolNames::clear_i() {
  i_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::i(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.i)
  return i_.Get(index);
}
inline void TestConflictingSymbolNames::set_i(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  i_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.i)
}
inline void TestConflictingSymbolNames::add_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  i_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestConflictingSymbolNames::i() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.i)
  return i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestConflictingSymbolNames::mutable_i() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.i)
  return &i_;
}

// repeated string new_element = 5 [ctype = STRING_PIECE];
inline int TestConflictingSymbolNames::new_element_size() const {
  return new_element_.size();
}
inline void TestConflictingSymbolNames::clear_new_element() {
  new_element_.Clear();
}
inline const std::string& TestConflictingSymbolNames::new_element(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return new_element_.Get(index);
}
inline std::string* TestConflictingSymbolNames::mutable_new_element(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return new_element_.Mutable(index);
}
inline void TestConflictingSymbolNames::set_new_element(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.new_element)
  new_element_.Mutable(index)->assign(value);
}
inline void TestConflictingSymbolNames::set_new_element(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.new_element)
  new_element_.Mutable(index)->assign(std::move(value));
}
inline void TestConflictingSymbolNames::set_new_element(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  new_element_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.new_element)
}
inline void TestConflictingSymbolNames::set_new_element(int index, const char* value, size_t size) {
  new_element_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.new_element)
}
inline std::string* TestConflictingSymbolNames::add_new_element() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return new_element_.Add();
}
inline void TestConflictingSymbolNames::add_new_element(const std::string& value) {
  new_element_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.new_element)
}
inline void TestConflictingSymbolNames::add_new_element(std::string&& value) {
  new_element_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.new_element)
}
inline void TestConflictingSymbolNames::add_new_element(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  new_element_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestConflictingSymbolNames.new_element)
}
inline void TestConflictingSymbolNames::add_new_element(const char* value, size_t size) {
  new_element_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestConflictingSymbolNames.new_element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestConflictingSymbolNames::new_element() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return new_element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestConflictingSymbolNames::mutable_new_element() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.new_element)
  return &new_element_;
}

// optional int32 total_size = 6;
inline bool TestConflictingSymbolNames::has_total_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TestConflictingSymbolNames::clear_total_size() {
  total_size_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::total_size() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.total_size)
  return total_size_;
}
inline void TestConflictingSymbolNames::set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  total_size_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.total_size)
}

// optional int32 tag = 7;
inline bool TestConflictingSymbolNames::has_tag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TestConflictingSymbolNames::clear_tag() {
  tag_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::tag() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.tag)
  return tag_;
}
inline void TestConflictingSymbolNames::set_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  tag_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.tag)
}

// optional int32 source = 8;
inline bool TestConflictingSymbolNames::has_source() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TestConflictingSymbolNames::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::source() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.source)
  return source_;
}
inline void TestConflictingSymbolNames::set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  source_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.source)
}

// optional int32 value = 9;
inline bool TestConflictingSymbolNames::has_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TestConflictingSymbolNames::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::value() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.value)
  return value_;
}
inline void TestConflictingSymbolNames::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  value_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.value)
}

// optional int32 file = 10;
inline bool TestConflictingSymbolNames::has_file() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TestConflictingSymbolNames::clear_file() {
  file_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::file() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.file)
  return file_;
}
inline void TestConflictingSymbolNames::set_file(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  file_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.file)
}

// optional int32 from = 11;
inline bool TestConflictingSymbolNames::has_from() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TestConflictingSymbolNames::clear_from() {
  from_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::from() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.from)
  return from_;
}
inline void TestConflictingSymbolNames::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  from_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.from)
}

// optional int32 handle_uninterpreted = 12;
inline bool TestConflictingSymbolNames::has_handle_uninterpreted() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TestConflictingSymbolNames::clear_handle_uninterpreted() {
  handle_uninterpreted_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::handle_uninterpreted() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.handle_uninterpreted)
  return handle_uninterpreted_;
}
inline void TestConflictingSymbolNames::set_handle_uninterpreted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  handle_uninterpreted_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.handle_uninterpreted)
}

// repeated int32 index = 13;
inline int TestConflictingSymbolNames::index_size() const {
  return index_.size();
}
inline void TestConflictingSymbolNames::clear_index() {
  index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::index(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.index)
  return index_.Get(index);
}
inline void TestConflictingSymbolNames::set_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.index)
}
inline void TestConflictingSymbolNames::add_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestConflictingSymbolNames.index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestConflictingSymbolNames::index() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestConflictingSymbolNames.index)
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestConflictingSymbolNames::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestConflictingSymbolNames.index)
  return &index_;
}

// optional int32 controller = 14;
inline bool TestConflictingSymbolNames::has_controller() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TestConflictingSymbolNames::clear_controller() {
  controller_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::controller() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.controller)
  return controller_;
}
inline void TestConflictingSymbolNames::set_controller(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  controller_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.controller)
}

// optional int32 already_here = 15;
inline bool TestConflictingSymbolNames::has_already_here() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TestConflictingSymbolNames::clear_already_here() {
  already_here_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::already_here() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.already_here)
  return already_here_;
}
inline void TestConflictingSymbolNames::set_already_here(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  already_here_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.already_here)
}

// optional uint32 uint32 = 16;
inline bool TestConflictingSymbolNames::has_uint32() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TestConflictingSymbolNames::clear_uint32() {
  uint32_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.uint32)
  return uint32_;
}
inline void TestConflictingSymbolNames::set_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  uint32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.uint32)
}

// optional uint64 uint64 = 17;
inline bool TestConflictingSymbolNames::has_uint64() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TestConflictingSymbolNames::clear_uint64() {
  uint64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestConflictingSymbolNames::uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.uint64)
  return uint64_;
}
inline void TestConflictingSymbolNames::set_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00100000u;
  uint64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.uint64)
}

// optional string string = 18;
inline bool TestConflictingSymbolNames::has_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestConflictingSymbolNames::clear_string() {
  string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestConflictingSymbolNames::string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.string)
  return string_.GetNoArena();
}
inline void TestConflictingSymbolNames::set_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.string)
}
inline void TestConflictingSymbolNames::set_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestConflictingSymbolNames.string)
}
inline void TestConflictingSymbolNames::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.string)
}
inline void TestConflictingSymbolNames::set_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.string)
}
inline std::string* TestConflictingSymbolNames::mutable_string() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.string)
  return string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConflictingSymbolNames::release_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.string)
  if (!has_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConflictingSymbolNames::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.string)
}

// optional int32 memset = 19;
inline bool TestConflictingSymbolNames::has_memset() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TestConflictingSymbolNames::clear_memset() {
  memset_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::memset() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.memset)
  return memset_;
}
inline void TestConflictingSymbolNames::set_memset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  memset_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.memset)
}

// optional int32 int32 = 20;
inline bool TestConflictingSymbolNames::has_int32() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TestConflictingSymbolNames::clear_int32() {
  int32_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.int32)
  return int32_;
}
inline void TestConflictingSymbolNames::set_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  int32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.int32)
}

// optional int64 int64 = 21;
inline bool TestConflictingSymbolNames::has_int64() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TestConflictingSymbolNames::clear_int64() {
  int64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestConflictingSymbolNames::int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.int64)
  return int64_;
}
inline void TestConflictingSymbolNames::set_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00800000u;
  int64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.int64)
}

// optional uint32 cached_size = 22;
inline bool TestConflictingSymbolNames::has_cached_size() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TestConflictingSymbolNames::clear_cached_size() {
  cached_size_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::cached_size() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.cached_size)
  return cached_size_;
}
inline void TestConflictingSymbolNames::set_cached_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  cached_size_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.cached_size)
}

// optional uint32 extensions = 23;
inline bool TestConflictingSymbolNames::has_extensions() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TestConflictingSymbolNames::clear_extensions() {
  extensions_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::extensions() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.extensions)
  return extensions_;
}
inline void TestConflictingSymbolNames::set_extensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  extensions_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.extensions)
}

// optional uint32 bit = 24;
inline bool TestConflictingSymbolNames::has_bit() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TestConflictingSymbolNames::clear_bit() {
  bit_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::bit() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.bit)
  return bit_;
}
inline void TestConflictingSymbolNames::set_bit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  bit_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.bit)
}

// optional uint32 bits = 25;
inline bool TestConflictingSymbolNames::has_bits() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TestConflictingSymbolNames::clear_bits() {
  bits_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::bits() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.bits)
  return bits_;
}
inline void TestConflictingSymbolNames::set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  bits_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.bits)
}

// optional uint32 offsets = 26;
inline bool TestConflictingSymbolNames::has_offsets() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TestConflictingSymbolNames::clear_offsets() {
  offsets_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::offsets() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.offsets)
  return offsets_;
}
inline void TestConflictingSymbolNames::set_offsets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  offsets_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.offsets)
}

// optional uint32 reflection = 27;
inline bool TestConflictingSymbolNames::has_reflection() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TestConflictingSymbolNames::clear_reflection() {
  reflection_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::reflection() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.reflection)
  return reflection_;
}
inline void TestConflictingSymbolNames::set_reflection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  reflection_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.reflection)
}

// optional string some_cord = 28 [ctype = CORD];
inline bool TestConflictingSymbolNames::has_some_cord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestConflictingSymbolNames::clear_some_cord() {
  some_cord_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestConflictingSymbolNames::some_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.some_cord)
  return some_cord_.GetNoArena();
}
inline void TestConflictingSymbolNames::set_some_cord(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  some_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.some_cord)
}
inline void TestConflictingSymbolNames::set_some_cord(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  some_cord_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestConflictingSymbolNames.some_cord)
}
inline void TestConflictingSymbolNames::set_some_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  some_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.some_cord)
}
inline void TestConflictingSymbolNames::set_some_cord(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  some_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.some_cord)
}
inline std::string* TestConflictingSymbolNames::mutable_some_cord() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.some_cord)
  return some_cord_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConflictingSymbolNames::release_some_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.some_cord)
  if (!has_some_cord()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return some_cord_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConflictingSymbolNames::set_allocated_some_cord(std::string* some_cord) {
  if (some_cord != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  some_cord_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), some_cord);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.some_cord)
}

// optional string some_string_piece = 29 [ctype = STRING_PIECE];
inline bool TestConflictingSymbolNames::has_some_string_piece() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestConflictingSymbolNames::clear_some_string_piece() {
  some_string_piece_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TestConflictingSymbolNames::some_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
  return some_string_piece_.GetNoArena();
}
inline void TestConflictingSymbolNames::set_some_string_piece(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  some_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
}
inline void TestConflictingSymbolNames::set_some_string_piece(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  some_string_piece_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
}
inline void TestConflictingSymbolNames::set_some_string_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  some_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
}
inline void TestConflictingSymbolNames::set_some_string_piece(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  some_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
}
inline std::string* TestConflictingSymbolNames::mutable_some_string_piece() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
  return some_string_piece_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConflictingSymbolNames::release_some_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
  if (!has_some_string_piece()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return some_string_piece_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConflictingSymbolNames::set_allocated_some_string_piece(std::string* some_string_piece) {
  if (some_string_piece != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  some_string_piece_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), some_string_piece);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.some_string_piece)
}

// optional uint32 int = 30;
inline bool TestConflictingSymbolNames::has_int_() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TestConflictingSymbolNames::clear_int_() {
  int__ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::int_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.int)
  return int__;
}
inline void TestConflictingSymbolNames::set_int_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  int__ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.int)
}

// optional uint32 friend = 31;
inline bool TestConflictingSymbolNames::has_friend_() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TestConflictingSymbolNames::clear_friend_() {
  friend__ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::friend_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.friend)
  return friend__;
}
inline void TestConflictingSymbolNames::set_friend_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  friend__ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.friend)
}

// optional uint32 class = 37;
inline bool TestConflictingSymbolNames::has_class_() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void TestConflictingSymbolNames::clear_class_() {
  class__ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::class_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.class)
  return class__;
}
inline void TestConflictingSymbolNames::set_class_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  class__ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.class)
}

// optional uint32 typedecl = 39;
inline bool TestConflictingSymbolNames::has_typedecl() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void TestConflictingSymbolNames::clear_typedecl() {
  typedecl_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::typedecl() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.typedecl)
  return typedecl_;
}
inline void TestConflictingSymbolNames::set_typedecl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  typedecl_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.typedecl)
}

// optional uint32 auto = 40;
inline bool TestConflictingSymbolNames::has_auto_() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void TestConflictingSymbolNames::clear_auto_() {
  auto__ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestConflictingSymbolNames::auto_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.auto)
  return auto__;
}
inline void TestConflictingSymbolNames::set_auto_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  auto__ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.auto)
}

// optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
inline bool TestConflictingSymbolNames::has_do_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TestConflictingSymbolNames::clear_do_() {
  if (do__ != nullptr) do__->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::protobuf_unittest::TestConflictingSymbolNames_DO& TestConflictingSymbolNames::do_() const {
  const ::protobuf_unittest::TestConflictingSymbolNames_DO* p = do__;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.do)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestConflictingSymbolNames_DO*>(
      &::protobuf_unittest::_TestConflictingSymbolNames_DO_default_instance_);
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::release_do__() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.do)
  _has_bits_[0] &= ~0x00000040u;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* temp = do__;
  do__ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::mutable_do_() {
  _has_bits_[0] |= 0x00000040u;
  if (do__ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_DO>(GetArenaNoVirtual());
    do__ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.do)
  return do__;
}
inline void TestConflictingSymbolNames::set_allocated_do_(::protobuf_unittest::TestConflictingSymbolNames_DO* do_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete do__;
  }
  if (do_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      do_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, do_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  do__ = do_;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.do)
}

// optional int32 field_type = 33;
inline bool TestConflictingSymbolNames::has_field_type() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TestConflictingSymbolNames::clear_field_type() {
  field_type_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConflictingSymbolNames::field_type() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.field_type)
  return field_type_;
}
inline void TestConflictingSymbolNames::set_field_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  field_type_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.field_type)
}

// optional bool is_packed = 34;
inline bool TestConflictingSymbolNames::has_is_packed() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void TestConflictingSymbolNames::clear_is_packed() {
  is_packed_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool TestConflictingSymbolNames::is_packed() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.is_packed)
  return is_packed_;
}
inline void TestConflictingSymbolNames::set_is_packed(bool value) {
  _has_bits_[1] |= 0x00000002u;
  is_packed_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.is_packed)
}

// optional string release_length = 35;
inline bool TestConflictingSymbolNames::has_release_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestConflictingSymbolNames::clear_release_length() {
  release_length_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TestConflictingSymbolNames::release_length() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.release_length)
  return release_length_.GetNoArena();
}
inline void TestConflictingSymbolNames::set_release_length(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  release_length_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.release_length)
}
inline void TestConflictingSymbolNames::set_release_length(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  release_length_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestConflictingSymbolNames.release_length)
}
inline void TestConflictingSymbolNames::set_release_length(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  release_length_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.release_length)
}
inline void TestConflictingSymbolNames::set_release_length(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  release_length_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.release_length)
}
inline std::string* TestConflictingSymbolNames::mutable_release_length() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.release_length)
  return release_length_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConflictingSymbolNames::release_release_length() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.release_length)
  if (!has_release_length()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return release_length_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConflictingSymbolNames::set_allocated_release_length(std::string* release_length) {
  if (release_length != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  release_length_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), release_length);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.release_length)
}

// optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
inline bool TestConflictingSymbolNames::has_release_do() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TestConflictingSymbolNames::clear_release_do() {
  if (release_do_ != nullptr) release_do_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::protobuf_unittest::TestConflictingSymbolNames_DO& TestConflictingSymbolNames::release_do() const {
  const ::protobuf_unittest::TestConflictingSymbolNames_DO* p = release_do_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.release_do)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestConflictingSymbolNames_DO*>(
      &::protobuf_unittest::_TestConflictingSymbolNames_DO_default_instance_);
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::release_release_do() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.release_do)
  _has_bits_[0] &= ~0x00000080u;
  ::protobuf_unittest::TestConflictingSymbolNames_DO* temp = release_do_;
  release_do_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestConflictingSymbolNames_DO* TestConflictingSymbolNames::mutable_release_do() {
  _has_bits_[0] |= 0x00000080u;
  if (release_do_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestConflictingSymbolNames_DO>(GetArenaNoVirtual());
    release_do_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.release_do)
  return release_do_;
}
inline void TestConflictingSymbolNames::set_allocated_release_do(::protobuf_unittest::TestConflictingSymbolNames_DO* release_do) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete release_do_;
  }
  if (release_do) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      release_do = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_do, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  release_do_ = release_do;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.release_do)
}

// optional string target = 38;
inline bool TestConflictingSymbolNames::has_target() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TestConflictingSymbolNames::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TestConflictingSymbolNames::target() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingSymbolNames.target)
  return target_.GetNoArena();
}
inline void TestConflictingSymbolNames::set_target(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingSymbolNames.target)
}
inline void TestConflictingSymbolNames::set_target(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestConflictingSymbolNames.target)
}
inline void TestConflictingSymbolNames::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestConflictingSymbolNames.target)
}
inline void TestConflictingSymbolNames::set_target(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestConflictingSymbolNames.target)
}
inline std::string* TestConflictingSymbolNames::mutable_target() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestConflictingSymbolNames.target)
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConflictingSymbolNames::release_target() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestConflictingSymbolNames.target)
  if (!has_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return target_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConflictingSymbolNames::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestConflictingSymbolNames.target)
}

// -------------------------------------------------------------------

// TestConflictingSymbolNamesExtension

// -------------------------------------------------------------------

// TestConflictingEnumNames

// optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
inline bool TestConflictingEnumNames::has_conflicting_enum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestConflictingEnumNames::clear_conflicting_enum() {
  conflicting_enum_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::protobuf_unittest::TestConflictingEnumNames_while TestConflictingEnumNames::conflicting_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestConflictingEnumNames.conflicting_enum)
  return static_cast< ::protobuf_unittest::TestConflictingEnumNames_while >(conflicting_enum_);
}
inline void TestConflictingEnumNames::set_conflicting_enum(::protobuf_unittest::TestConflictingEnumNames_while value) {
  assert(::protobuf_unittest::TestConflictingEnumNames_while_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  conflicting_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestConflictingEnumNames.conflicting_enum)
}

// -------------------------------------------------------------------

// DummyMessage

// -------------------------------------------------------------------

// NULL_

// optional int32 int = 1;
inline bool NULL_::has_int_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NULL_::clear_int_() {
  int__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NULL_::int_() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NULL.int)
  return int__;
}
inline void NULL_::set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  int__ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.NULL.int)
}

// -------------------------------------------------------------------

// Shutdown

// -------------------------------------------------------------------

// TableStruct

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protobuf_unittest::TestConflictingSymbolNames_TestEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::TestConflictingSymbolNames_TestEnum>() {
  return ::protobuf_unittest::TestConflictingSymbolNames_TestEnum_descriptor();
}
template <> struct is_proto_enum< ::protobuf_unittest::TestConflictingEnumNames_while> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::TestConflictingEnumNames_while>() {
  return ::protobuf_unittest::TestConflictingEnumNames_while_descriptor();
}
template <> struct is_proto_enum< ::protobuf_unittest::bool_> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_unittest::bool_>() {
  return ::protobuf_unittest::bool__descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto
