// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/map_proto2_unittest.proto

#include "google/protobuf/map_proto2_unittest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEnumMap_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEnumMap_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestIntIntMap_MEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_TestMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MBoolEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MFixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MFixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MInt32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MInt64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MSfixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MSfixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MSint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MSint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MStringEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MUint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MUint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto;
namespace protobuf_unittest {
class TestEnumMap_KnownMapFieldEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEnumMap_KnownMapFieldEntry_DoNotUse> _instance;
} _TestEnumMap_KnownMapFieldEntry_DoNotUse_default_instance_;
class TestEnumMap_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEnumMap_UnknownMapFieldEntry_DoNotUse> _instance;
} _TestEnumMap_UnknownMapFieldEntry_DoNotUse_default_instance_;
class TestEnumMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEnumMap> _instance;
} _TestEnumMap_default_instance_;
class TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse> _instance;
} _TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_default_instance_;
class TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse> _instance;
} _TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_default_instance_;
class TestEnumMapPlusExtraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEnumMapPlusExtra> _instance;
} _TestEnumMapPlusExtra_default_instance_;
class TestImportEnumMap_ImportEnumAmpEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestImportEnumMap_ImportEnumAmpEntry_DoNotUse> _instance;
} _TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_default_instance_;
class TestImportEnumMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestImportEnumMap> _instance;
} _TestImportEnumMap_default_instance_;
class TestIntIntMap_MEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestIntIntMap_MEntry_DoNotUse> _instance;
} _TestIntIntMap_MEntry_DoNotUse_default_instance_;
class TestIntIntMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestIntIntMap> _instance;
} _TestIntIntMap_default_instance_;
class TestMaps_MInt32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MInt32Entry_DoNotUse> _instance;
} _TestMaps_MInt32Entry_DoNotUse_default_instance_;
class TestMaps_MInt64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MInt64Entry_DoNotUse> _instance;
} _TestMaps_MInt64Entry_DoNotUse_default_instance_;
class TestMaps_MUint32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MUint32Entry_DoNotUse> _instance;
} _TestMaps_MUint32Entry_DoNotUse_default_instance_;
class TestMaps_MUint64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MUint64Entry_DoNotUse> _instance;
} _TestMaps_MUint64Entry_DoNotUse_default_instance_;
class TestMaps_MSint32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MSint32Entry_DoNotUse> _instance;
} _TestMaps_MSint32Entry_DoNotUse_default_instance_;
class TestMaps_MSint64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MSint64Entry_DoNotUse> _instance;
} _TestMaps_MSint64Entry_DoNotUse_default_instance_;
class TestMaps_MFixed32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MFixed32Entry_DoNotUse> _instance;
} _TestMaps_MFixed32Entry_DoNotUse_default_instance_;
class TestMaps_MFixed64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MFixed64Entry_DoNotUse> _instance;
} _TestMaps_MFixed64Entry_DoNotUse_default_instance_;
class TestMaps_MSfixed32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MSfixed32Entry_DoNotUse> _instance;
} _TestMaps_MSfixed32Entry_DoNotUse_default_instance_;
class TestMaps_MSfixed64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MSfixed64Entry_DoNotUse> _instance;
} _TestMaps_MSfixed64Entry_DoNotUse_default_instance_;
class TestMaps_MBoolEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MBoolEntry_DoNotUse> _instance;
} _TestMaps_MBoolEntry_DoNotUse_default_instance_;
class TestMaps_MStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps_MStringEntry_DoNotUse> _instance;
} _TestMaps_MStringEntry_DoNotUse_default_instance_;
class TestMapsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMaps> _instance;
} _TestMaps_default_instance_;
class TestSubmessageMapsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestSubmessageMaps> _instance;
} _TestSubmessageMaps_default_instance_;
}  // namespace protobuf_unittest
static void InitDefaultsscc_info_TestEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEnumMap_default_instance_;
    new (ptr) ::protobuf_unittest::TestEnumMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestEnumMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TestEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestEnumMap_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestEnumMap_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestEnumMap_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEnumMap_KnownMapFieldEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse();
  }
  ::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEnumMap_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestEnumMap_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestEnumMap_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEnumMap_UnknownMapFieldEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse();
  }
  ::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEnumMap_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestEnumMap_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestEnumMapPlusExtra_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEnumMapPlusExtra_default_instance_;
    new (ptr) ::protobuf_unittest::TestEnumMapPlusExtra();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestEnumMapPlusExtra::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestEnumMapPlusExtra_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TestEnumMapPlusExtra_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse();
  }
  ::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse();
  }
  ::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestImportEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestImportEnumMap_default_instance_;
    new (ptr) ::protobuf_unittest::TestImportEnumMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestImportEnumMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestImportEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestImportEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse();
  }
  ::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestIntIntMap_default_instance_;
    new (ptr) ::protobuf_unittest::TestIntIntMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestIntIntMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_MEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestIntIntMap_MEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestIntIntMap_MEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse();
  }
  ::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestIntIntMap_MEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestIntIntMap_MEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {}};

static void InitDefaultsscc_info_TestMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestMaps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_TestMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsscc_info_TestMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestMaps_MInt32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MInt64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MUint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MUint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MSint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MSint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MFixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MFixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MSfixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MSfixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MBoolEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
      &scc_info_TestMaps_MStringEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MBoolEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MBoolEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MBoolEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MBoolEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MFixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MFixed32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MFixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MFixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MFixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MFixed64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MFixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MFixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MInt32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MInt32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MInt32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MInt32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MInt64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MInt64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MInt64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MInt64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MSfixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MSfixed32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MSfixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MSfixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MSfixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MSfixed64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MSfixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MSfixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MSint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MSint32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MSint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MSint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MSint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MSint64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MSint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MSint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MStringEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MStringEntry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MStringEntry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MStringEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MStringEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MStringEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MUint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MUint32Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MUint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MUint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestMaps_MUint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestMaps_MUint64Entry_DoNotUse_default_instance_;
    new (ptr) ::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse();
  }
  ::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMaps_MUint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestMaps_MUint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static void InitDefaultsscc_info_TestSubmessageMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestSubmessageMaps_default_instance_;
    new (ptr) ::protobuf_unittest::TestSubmessageMaps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestSubmessageMaps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestSubmessageMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestSubmessageMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto}, {
      &scc_info_TestMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap, known_map_field_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMap, unknown_map_field_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra, known_map_field_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEnumMapPlusExtra, unknown_map_field_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestImportEnumMap, import_enum_amp_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestIntIntMap, m_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestMaps, m_string_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestSubmessageMaps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestSubmessageMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestSubmessageMaps, m_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse)},
  { 9, 16, sizeof(::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse)},
  { 18, 25, sizeof(::protobuf_unittest::TestEnumMap)},
  { 27, 34, sizeof(::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse)},
  { 36, 43, sizeof(::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse)},
  { 45, 52, sizeof(::protobuf_unittest::TestEnumMapPlusExtra)},
  { 54, 61, sizeof(::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse)},
  { 63, 69, sizeof(::protobuf_unittest::TestImportEnumMap)},
  { 70, 77, sizeof(::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse)},
  { 79, 85, sizeof(::protobuf_unittest::TestIntIntMap)},
  { 86, 93, sizeof(::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse)},
  { 95, 102, sizeof(::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse)},
  { 104, 111, sizeof(::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse)},
  { 113, 120, sizeof(::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse)},
  { 122, 129, sizeof(::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse)},
  { 131, 138, sizeof(::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse)},
  { 140, 147, sizeof(::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse)},
  { 149, 156, sizeof(::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse)},
  { 158, 165, sizeof(::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse)},
  { 167, 174, sizeof(::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse)},
  { 176, 183, sizeof(::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse)},
  { 185, 192, sizeof(::protobuf_unittest::TestMaps_MStringEntry_DoNotUse)},
  { 194, 211, sizeof(::protobuf_unittest::TestMaps)},
  { 223, 229, sizeof(::protobuf_unittest::TestSubmessageMaps)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEnumMap_KnownMapFieldEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEnumMap_UnknownMapFieldEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEnumMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEnumMapPlusExtra_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestImportEnumMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestIntIntMap_MEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestIntIntMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MInt32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MInt64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MUint32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MUint64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MSint32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MSint64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MFixed32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MFixed64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MSfixed32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MSfixed64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MBoolEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_MStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestMaps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestSubmessageMaps_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)google/protobuf/map_proto2_unittest.pr"
  "oto\022\021protobuf_unittest\032%google/protobuf/"
  "unittest_import.proto\"\333\002\n\013TestEnumMap\022J\n"
  "\017known_map_field\030e \003(\01321.protobuf_unitte"
  "st.TestEnumMap.KnownMapFieldEntry\022N\n\021unk"
  "nown_map_field\030f \003(\01323.protobuf_unittest"
  ".TestEnumMap.UnknownMapFieldEntry\032V\n\022Kno"
  "wnMapFieldEntry\022\013\n\003key\030\001 \001(\005\022/\n\005value\030\002 "
  "\001(\0162 .protobuf_unittest.Proto2MapEnum:\0028"
  "\001\032X\n\024UnknownMapFieldEntry\022\013\n\003key\030\001 \001(\005\022/"
  "\n\005value\030\002 \001(\0162 .protobuf_unittest.Proto2"
  "MapEnum:\0028\001\"\210\003\n\024TestEnumMapPlusExtra\022S\n\017"
  "known_map_field\030e \003(\0132:.protobuf_unittes"
  "t.TestEnumMapPlusExtra.KnownMapFieldEntr"
  "y\022W\n\021unknown_map_field\030f \003(\0132<.protobuf_"
  "unittest.TestEnumMapPlusExtra.UnknownMap"
  "FieldEntry\032_\n\022KnownMapFieldEntry\022\013\n\003key\030"
  "\001 \001(\005\0228\n\005value\030\002 \001(\0162).protobuf_unittest"
  ".Proto2MapEnumPlusExtra:\0028\001\032a\n\024UnknownMa"
  "pFieldEntry\022\013\n\003key\030\001 \001(\005\0228\n\005value\030\002 \001(\0162"
  ").protobuf_unittest.Proto2MapEnumPlusExt"
  "ra:\0028\001\"\307\001\n\021TestImportEnumMap\022P\n\017import_e"
  "num_amp\030\001 \003(\01327.protobuf_unittest.TestIm"
  "portEnumMap.ImportEnumAmpEntry\032`\n\022Import"
  "EnumAmpEntry\022\013\n\003key\030\001 \001(\005\0229\n\005value\030\002 \001(\016"
  "2*.protobuf_unittest_import.ImportEnumFo"
  "rMap:\0028\001\"m\n\rTestIntIntMap\0222\n\001m\030\001 \003(\0132\'.p"
  "rotobuf_unittest.TestIntIntMap.MEntry\032(\n"
  "\006MEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\""
  "\270\r\n\010TestMaps\0228\n\007m_int32\030\001 \003(\0132\'.protobuf"
  "_unittest.TestMaps.MInt32Entry\0228\n\007m_int6"
  "4\030\002 \003(\0132\'.protobuf_unittest.TestMaps.MIn"
  "t64Entry\022:\n\010m_uint32\030\003 \003(\0132(.protobuf_un"
  "ittest.TestMaps.MUint32Entry\022:\n\010m_uint64"
  "\030\004 \003(\0132(.protobuf_unittest.TestMaps.MUin"
  "t64Entry\022:\n\010m_sint32\030\005 \003(\0132(.protobuf_un"
  "ittest.TestMaps.MSint32Entry\022:\n\010m_sint64"
  "\030\006 \003(\0132(.protobuf_unittest.TestMaps.MSin"
  "t64Entry\022<\n\tm_fixed32\030\007 \003(\0132).protobuf_u"
  "nittest.TestMaps.MFixed32Entry\022<\n\tm_fixe"
  "d64\030\010 \003(\0132).protobuf_unittest.TestMaps.M"
  "Fixed64Entry\022>\n\nm_sfixed32\030\t \003(\0132*.proto"
  "buf_unittest.TestMaps.MSfixed32Entry\022>\n\n"
  "m_sfixed64\030\n \003(\0132*.protobuf_unittest.Tes"
  "tMaps.MSfixed64Entry\0226\n\006m_bool\030\013 \003(\0132&.p"
  "rotobuf_unittest.TestMaps.MBoolEntry\022:\n\010"
  "m_string\030\014 \003(\0132(.protobuf_unittest.TestM"
  "aps.MStringEntry\032O\n\013MInt32Entry\022\013\n\003key\030\001"
  " \001(\005\022/\n\005value\030\002 \001(\0132 .protobuf_unittest."
  "TestIntIntMap:\0028\001\032O\n\013MInt64Entry\022\013\n\003key\030"
  "\001 \001(\003\022/\n\005value\030\002 \001(\0132 .protobuf_unittest"
  ".TestIntIntMap:\0028\001\032P\n\014MUint32Entry\022\013\n\003ke"
  "y\030\001 \001(\r\022/\n\005value\030\002 \001(\0132 .protobuf_unitte"
  "st.TestIntIntMap:\0028\001\032P\n\014MUint64Entry\022\013\n\003"
  "key\030\001 \001(\004\022/\n\005value\030\002 \001(\0132 .protobuf_unit"
  "test.TestIntIntMap:\0028\001\032P\n\014MSint32Entry\022\013"
  "\n\003key\030\001 \001(\021\022/\n\005value\030\002 \001(\0132 .protobuf_un"
  "ittest.TestIntIntMap:\0028\001\032P\n\014MSint64Entry"
  "\022\013\n\003key\030\001 \001(\022\022/\n\005value\030\002 \001(\0132 .protobuf_"
  "unittest.TestIntIntMap:\0028\001\032Q\n\rMFixed32En"
  "try\022\013\n\003key\030\001 \001(\007\022/\n\005value\030\002 \001(\0132 .protob"
  "uf_unittest.TestIntIntMap:\0028\001\032Q\n\rMFixed6"
  "4Entry\022\013\n\003key\030\001 \001(\006\022/\n\005value\030\002 \001(\0132 .pro"
  "tobuf_unittest.TestIntIntMap:\0028\001\032R\n\016MSfi"
  "xed32Entry\022\013\n\003key\030\001 \001(\017\022/\n\005value\030\002 \001(\0132 "
  ".protobuf_unittest.TestIntIntMap:\0028\001\032R\n\016"
  "MSfixed64Entry\022\013\n\003key\030\001 \001(\020\022/\n\005value\030\002 \001"
  "(\0132 .protobuf_unittest.TestIntIntMap:\0028\001"
  "\032N\n\nMBoolEntry\022\013\n\003key\030\001 \001(\010\022/\n\005value\030\002 \001"
  "(\0132 .protobuf_unittest.TestIntIntMap:\0028\001"
  "\032P\n\014MStringEntry\022\013\n\003key\030\001 \001(\t\022/\n\005value\030\002"
  " \001(\0132 .protobuf_unittest.TestIntIntMap:\002"
  "8\001\"<\n\022TestSubmessageMaps\022&\n\001m\030\001 \001(\0132\033.pr"
  "otobuf_unittest.TestMaps*Z\n\rProto2MapEnu"
  "m\022\027\n\023PROTO2_MAP_ENUM_FOO\020\000\022\027\n\023PROTO2_MAP"
  "_ENUM_BAR\020\001\022\027\n\023PROTO2_MAP_ENUM_BAZ\020\002*\206\001\n"
  "\026Proto2MapEnumPlusExtra\022\031\n\025E_PROTO2_MAP_"
  "ENUM_FOO\020\000\022\031\n\025E_PROTO2_MAP_ENUM_BAR\020\001\022\031\n"
  "\025E_PROTO2_MAP_ENUM_BAZ\020\002\022\033\n\027E_PROTO2_MAP"
  "_ENUM_EXTRA\020\003B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2funittest_5fimport_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_sccs[24] = {
  &scc_info_TestEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestEnumMap_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestEnumMap_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestEnumMapPlusExtra_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestImportEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestImportEnumMap_ImportEnumAmpEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestIntIntMap_MEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MBoolEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MFixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MFixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MInt32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MInt64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MSfixed32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MSfixed64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MSint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MSint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MStringEntry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MUint32Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestMaps_MUint64Entry_DoNotUse_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
  &scc_info_TestSubmessageMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once;
static bool descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto = {
  &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_initialized, descriptor_table_protodef_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto, "google/protobuf/map_proto2_unittest.proto", 3178,
  &descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_once, descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_sccs, descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto_deps, 24, 1,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto, 24, file_level_enum_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto, file_level_service_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto), true);
namespace protobuf_unittest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proto2MapEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[0];
}
bool Proto2MapEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proto2MapEnumPlusExtra_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto[1];
}
bool Proto2MapEnumPlusExtra_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

TestEnumMap_KnownMapFieldEntry_DoNotUse::TestEnumMap_KnownMapFieldEntry_DoNotUse() {}
TestEnumMap_KnownMapFieldEntry_DoNotUse::TestEnumMap_KnownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMap_KnownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMap_KnownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMap_KnownMapFieldEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestEnumMap_KnownMapFieldEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestEnumMap_UnknownMapFieldEntry_DoNotUse::TestEnumMap_UnknownMapFieldEntry_DoNotUse() {}
TestEnumMap_UnknownMapFieldEntry_DoNotUse::TestEnumMap_UnknownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMap_UnknownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMap_UnknownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMap_UnknownMapFieldEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestEnumMap_UnknownMapFieldEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TestEnumMap::InitAsDefaultInstance() {
}
class TestEnumMap::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEnumMap>()._has_bits_);
};

TestEnumMap::TestEnumMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestEnumMap)
}
TestEnumMap::TestEnumMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  known_map_field_(arena),
  unknown_map_field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMap)
}
TestEnumMap::TestEnumMap(const TestEnumMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMap)
}

void TestEnumMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
}

TestEnumMap::~TestEnumMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMap)
  SharedDtor();
}

void TestEnumMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestEnumMap::ArenaDtor(void* object) {
  TestEnumMap* _this = reinterpret_cast< TestEnumMap* >(object);
  (void)_this;
}
void TestEnumMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestEnumMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestEnumMap& TestEnumMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
  return *internal_default_instance();
}


void TestEnumMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  known_map_field_.Clear();
  unknown_map_field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestEnumMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper(&known_map_field_, ::protobuf_unittest::Proto2MapEnum_IsValid, 101, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1706);
        } else goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper(&unknown_map_field_, ::protobuf_unittest::Proto2MapEnum_IsValid, 102, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1714);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestEnumMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestEnumMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          TestEnumMap_KnownMapFieldEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestEnumMap_KnownMapFieldEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum > > parser(&known_map_field_);
          auto entry = parser.NewEntry();
          std::string data;
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(input, &data));
          DO_(entry->ParseFromString(data));
          if (::protobuf_unittest::Proto2MapEnum_IsValid(*entry->mutable_value())) {
            (*mutable_known_map_field())[entry->key()] =
                static_cast< ::protobuf_unittest::Proto2MapEnum >(*entry->mutable_value());
          } else {
            mutable_unknown_fields()->AddLengthDelimited(101, data);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          TestEnumMap_UnknownMapFieldEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestEnumMap_UnknownMapFieldEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum > > parser(&unknown_map_field_);
          auto entry = parser.NewEntry();
          std::string data;
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(input, &data));
          DO_(entry->ParseFromString(data));
          if (::protobuf_unittest::Proto2MapEnum_IsValid(*entry->mutable_value())) {
            (*mutable_unknown_map_field())[entry->key()] =
                static_cast< ::protobuf_unittest::Proto2MapEnum >(*entry->mutable_value());
          } else {
            mutable_unknown_fields()->AddLengthDelimited(102, data);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestEnumMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestEnumMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestEnumMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestEnumMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
  if (!this->known_map_field().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->known_map_field().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->known_map_field().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestEnumMap_KnownMapFieldEntry_DoNotUse::Funcs::SerializeToCodedStream(101, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it) {
        TestEnumMap_KnownMapFieldEntry_DoNotUse::Funcs::SerializeToCodedStream(101, it->first, it->second, output);
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
  if (!this->unknown_map_field().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->unknown_map_field().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->unknown_map_field().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestEnumMap_UnknownMapFieldEntry_DoNotUse::Funcs::SerializeToCodedStream(102, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it) {
        TestEnumMap_UnknownMapFieldEntry_DoNotUse::Funcs::SerializeToCodedStream(102, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestEnumMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestEnumMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
  if (!this->known_map_field().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->known_map_field().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->known_map_field().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestEnumMap_KnownMapFieldEntry_DoNotUse::Funcs::SerializeToArray(101, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it) {
        target = TestEnumMap_KnownMapFieldEntry_DoNotUse::Funcs::SerializeToArray(101, it->first, it->second, target);
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
  if (!this->unknown_map_field().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->unknown_map_field().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->unknown_map_field().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestEnumMap_UnknownMapFieldEntry_DoNotUse::Funcs::SerializeToArray(102, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it) {
        target = TestEnumMap_UnknownMapFieldEntry_DoNotUse::Funcs::SerializeToArray(102, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMap)
  return target;
}

size_t TestEnumMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnum> known_map_field = 101;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->known_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
      it = this->known_map_field().begin();
      it != this->known_map_field().end(); ++it) {
    total_size += TestEnumMap_KnownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.Proto2MapEnum> unknown_map_field = 102;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->unknown_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnum >::const_iterator
      it = this->unknown_map_field().begin();
      it != this->unknown_map_field().end(); ++it) {
    total_size += TestEnumMap_UnknownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEnumMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEnumMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestEnumMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestEnumMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestEnumMap)
    MergeFrom(*source);
  }
}

void TestEnumMap::MergeFrom(const TestEnumMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
}

void TestEnumMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEnumMap::CopyFrom(const TestEnumMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEnumMap::IsInitialized() const {
  return true;
}

void TestEnumMap::InternalSwap(TestEnumMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  known_map_field_.Swap(&other->known_map_field_);
  unknown_map_field_.Swap(&other->unknown_map_field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse() {}
TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse() {}
TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::MergeFrom(const TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TestEnumMapPlusExtra::InitAsDefaultInstance() {
}
class TestEnumMapPlusExtra::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEnumMapPlusExtra>()._has_bits_);
};

TestEnumMapPlusExtra::TestEnumMapPlusExtra()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestEnumMapPlusExtra)
}
TestEnumMapPlusExtra::TestEnumMapPlusExtra(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  known_map_field_(arena),
  unknown_map_field_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestEnumMapPlusExtra)
}
TestEnumMapPlusExtra::TestEnumMapPlusExtra(const TestEnumMapPlusExtra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEnumMapPlusExtra)
}

void TestEnumMapPlusExtra::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestEnumMapPlusExtra_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
}

TestEnumMapPlusExtra::~TestEnumMapPlusExtra() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEnumMapPlusExtra)
  SharedDtor();
}

void TestEnumMapPlusExtra::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestEnumMapPlusExtra::ArenaDtor(void* object) {
  TestEnumMapPlusExtra* _this = reinterpret_cast< TestEnumMapPlusExtra* >(object);
  (void)_this;
}
void TestEnumMapPlusExtra::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestEnumMapPlusExtra::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestEnumMapPlusExtra& TestEnumMapPlusExtra::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestEnumMapPlusExtra_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
  return *internal_default_instance();
}


void TestEnumMapPlusExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEnumMapPlusExtra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  known_map_field_.Clear();
  unknown_map_field_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestEnumMapPlusExtra::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper(&known_map_field_, ::protobuf_unittest::Proto2MapEnumPlusExtra_IsValid, 101, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1706);
        } else goto handle_unusual;
        continue;
      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper(&unknown_map_field_, ::protobuf_unittest::Proto2MapEnumPlusExtra_IsValid, 102, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1714);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestEnumMapPlusExtra::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestEnumMapPlusExtra)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra > > parser(&known_map_field_);
          auto entry = parser.NewEntry();
          std::string data;
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(input, &data));
          DO_(entry->ParseFromString(data));
          if (::protobuf_unittest::Proto2MapEnumPlusExtra_IsValid(*entry->mutable_value())) {
            (*mutable_known_map_field())[entry->key()] =
                static_cast< ::protobuf_unittest::Proto2MapEnumPlusExtra >(*entry->mutable_value());
          } else {
            mutable_unknown_fields()->AddLengthDelimited(101, data);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra > > parser(&unknown_map_field_);
          auto entry = parser.NewEntry();
          std::string data;
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(input, &data));
          DO_(entry->ParseFromString(data));
          if (::protobuf_unittest::Proto2MapEnumPlusExtra_IsValid(*entry->mutable_value())) {
            (*mutable_unknown_map_field())[entry->key()] =
                static_cast< ::protobuf_unittest::Proto2MapEnumPlusExtra >(*entry->mutable_value());
          } else {
            mutable_unknown_fields()->AddLengthDelimited(102, data);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestEnumMapPlusExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestEnumMapPlusExtra)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestEnumMapPlusExtra::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestEnumMapPlusExtra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
  if (!this->known_map_field().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->known_map_field().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->known_map_field().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::Funcs::SerializeToCodedStream(101, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it) {
        TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::Funcs::SerializeToCodedStream(101, it->first, it->second, output);
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
  if (!this->unknown_map_field().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->unknown_map_field().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->unknown_map_field().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::Funcs::SerializeToCodedStream(102, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it) {
        TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::Funcs::SerializeToCodedStream(102, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestEnumMapPlusExtra)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestEnumMapPlusExtra::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEnumMapPlusExtra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
  if (!this->known_map_field().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->known_map_field().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->known_map_field().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::Funcs::SerializeToArray(101, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->known_map_field().begin();
          it != this->known_map_field().end(); ++it) {
        target = TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::Funcs::SerializeToArray(101, it->first, it->second, target);
      }
    }
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
  if (!this->unknown_map_field().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->unknown_map_field().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->unknown_map_field().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::Funcs::SerializeToArray(102, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
          it = this->unknown_map_field().begin();
          it != this->unknown_map_field().end(); ++it) {
        target = TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::Funcs::SerializeToArray(102, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEnumMapPlusExtra)
  return target;
}

size_t TestEnumMapPlusExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEnumMapPlusExtra)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> known_map_field = 101;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->known_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
      it = this->known_map_field().begin();
      it != this->known_map_field().end(); ++it) {
    total_size += TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_unittest.Proto2MapEnumPlusExtra> unknown_map_field = 102;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->unknown_map_field_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::Proto2MapEnumPlusExtra >::const_iterator
      it = this->unknown_map_field().begin();
      it != this->unknown_map_field().end(); ++it) {
    total_size += TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEnumMapPlusExtra::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEnumMapPlusExtra* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestEnumMapPlusExtra>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestEnumMapPlusExtra)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestEnumMapPlusExtra)
    MergeFrom(*source);
  }
}

void TestEnumMapPlusExtra::MergeFrom(const TestEnumMapPlusExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  known_map_field_.MergeFrom(from.known_map_field_);
  unknown_map_field_.MergeFrom(from.unknown_map_field_);
}

void TestEnumMapPlusExtra::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEnumMapPlusExtra::CopyFrom(const TestEnumMapPlusExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEnumMapPlusExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEnumMapPlusExtra::IsInitialized() const {
  return true;
}

void TestEnumMapPlusExtra::InternalSwap(TestEnumMapPlusExtra* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  known_map_field_.Swap(&other->known_map_field_);
  unknown_map_field_.Swap(&other->unknown_map_field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEnumMapPlusExtra::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse() {}
TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::MergeFrom(const TestImportEnumMap_ImportEnumAmpEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TestImportEnumMap::InitAsDefaultInstance() {
}
class TestImportEnumMap::_Internal {
 public:
  using HasBits = decltype(std::declval<TestImportEnumMap>()._has_bits_);
};

TestImportEnumMap::TestImportEnumMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestImportEnumMap)
}
TestImportEnumMap::TestImportEnumMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  import_enum_amp_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestImportEnumMap)
}
TestImportEnumMap::TestImportEnumMap(const TestImportEnumMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  import_enum_amp_.MergeFrom(from.import_enum_amp_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestImportEnumMap)
}

void TestImportEnumMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestImportEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
}

TestImportEnumMap::~TestImportEnumMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestImportEnumMap)
  SharedDtor();
}

void TestImportEnumMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestImportEnumMap::ArenaDtor(void* object) {
  TestImportEnumMap* _this = reinterpret_cast< TestImportEnumMap* >(object);
  (void)_this;
}
void TestImportEnumMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestImportEnumMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestImportEnumMap& TestImportEnumMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestImportEnumMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
  return *internal_default_instance();
}


void TestImportEnumMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestImportEnumMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  import_enum_amp_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestImportEnumMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper(&import_enum_amp_, ::protobuf_unittest_import::ImportEnumForMap_IsValid, 1, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestImportEnumMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestImportEnumMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestImportEnumMap_ImportEnumAmpEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap > > parser(&import_enum_amp_);
          auto entry = parser.NewEntry();
          std::string data;
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(input, &data));
          DO_(entry->ParseFromString(data));
          if (::protobuf_unittest_import::ImportEnumForMap_IsValid(*entry->mutable_value())) {
            (*mutable_import_enum_amp())[entry->key()] =
                static_cast< ::protobuf_unittest_import::ImportEnumForMap >(*entry->mutable_value());
          } else {
            mutable_unknown_fields()->AddLengthDelimited(1, data);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestImportEnumMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestImportEnumMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestImportEnumMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestImportEnumMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
  if (!this->import_enum_amp().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->import_enum_amp().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->import_enum_amp().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
          it = this->import_enum_amp().begin();
          it != this->import_enum_amp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
          it = this->import_enum_amp().begin();
          it != this->import_enum_amp().end(); ++it) {
        TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestImportEnumMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestImportEnumMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestImportEnumMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
  if (!this->import_enum_amp().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->import_enum_amp().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->import_enum_amp().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
          it = this->import_enum_amp().begin();
          it != this->import_enum_amp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
          it = this->import_enum_amp().begin();
          it != this->import_enum_amp().end(); ++it) {
        target = TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestImportEnumMap)
  return target;
}

size_t TestImportEnumMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestImportEnumMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest_import.ImportEnumForMap> import_enum_amp = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->import_enum_amp_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest_import::ImportEnumForMap >::const_iterator
      it = this->import_enum_amp().begin();
      it != this->import_enum_amp().end(); ++it) {
    total_size += TestImportEnumMap_ImportEnumAmpEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestImportEnumMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestImportEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  const TestImportEnumMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestImportEnumMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestImportEnumMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestImportEnumMap)
    MergeFrom(*source);
  }
}

void TestImportEnumMap::MergeFrom(const TestImportEnumMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestImportEnumMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  import_enum_amp_.MergeFrom(from.import_enum_amp_);
}

void TestImportEnumMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestImportEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestImportEnumMap::CopyFrom(const TestImportEnumMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestImportEnumMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestImportEnumMap::IsInitialized() const {
  return true;
}

void TestImportEnumMap::InternalSwap(TestImportEnumMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  import_enum_amp_.Swap(&other->import_enum_amp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestImportEnumMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestIntIntMap_MEntry_DoNotUse::TestIntIntMap_MEntry_DoNotUse() {}
TestIntIntMap_MEntry_DoNotUse::TestIntIntMap_MEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestIntIntMap_MEntry_DoNotUse::MergeFrom(const TestIntIntMap_MEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestIntIntMap_MEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestIntIntMap_MEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TestIntIntMap::InitAsDefaultInstance() {
}
class TestIntIntMap::_Internal {
 public:
  using HasBits = decltype(std::declval<TestIntIntMap>()._has_bits_);
};

TestIntIntMap::TestIntIntMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestIntIntMap)
}
TestIntIntMap::TestIntIntMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  m_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestIntIntMap)
}
TestIntIntMap::TestIntIntMap(const TestIntIntMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  m_.MergeFrom(from.m_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestIntIntMap)
}

void TestIntIntMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
}

TestIntIntMap::~TestIntIntMap() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestIntIntMap)
  SharedDtor();
}

void TestIntIntMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestIntIntMap::ArenaDtor(void* object) {
  TestIntIntMap* _this = reinterpret_cast< TestIntIntMap* >(object);
  (void)_this;
}
void TestIntIntMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestIntIntMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestIntIntMap& TestIntIntMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestIntIntMap_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
  return *internal_default_instance();
}


void TestIntIntMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestIntIntMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestIntIntMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestIntIntMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestIntIntMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, int32> m = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          TestIntIntMap_MEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestIntIntMap_MEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 > > parser(&m_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestIntIntMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestIntIntMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestIntIntMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestIntIntMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> m = 1;
  if (!this->m().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->m().begin();
          it != this->m().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestIntIntMap_MEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->m().begin();
          it != this->m().end(); ++it) {
        TestIntIntMap_MEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestIntIntMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestIntIntMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestIntIntMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> m = 1;
  if (!this->m().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->m().begin();
          it != this->m().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestIntIntMap_MEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->m().begin();
          it != this->m().end(); ++it) {
        target = TestIntIntMap_MEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestIntIntMap)
  return target;
}

size_t TestIntIntMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestIntIntMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->m().begin();
      it != this->m().end(); ++it) {
    total_size += TestIntIntMap_MEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestIntIntMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestIntIntMap)
  GOOGLE_DCHECK_NE(&from, this);
  const TestIntIntMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestIntIntMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestIntIntMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestIntIntMap)
    MergeFrom(*source);
  }
}

void TestIntIntMap::MergeFrom(const TestIntIntMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestIntIntMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_.MergeFrom(from.m_);
}

void TestIntIntMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestIntIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestIntIntMap::CopyFrom(const TestIntIntMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestIntIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestIntIntMap::IsInitialized() const {
  return true;
}

void TestIntIntMap::InternalSwap(TestIntIntMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_.Swap(&other->m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestIntIntMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestMaps_MInt32Entry_DoNotUse::TestMaps_MInt32Entry_DoNotUse() {}
TestMaps_MInt32Entry_DoNotUse::TestMaps_MInt32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MInt32Entry_DoNotUse::MergeFrom(const TestMaps_MInt32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MInt32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MInt32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MInt64Entry_DoNotUse::TestMaps_MInt64Entry_DoNotUse() {}
TestMaps_MInt64Entry_DoNotUse::TestMaps_MInt64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MInt64Entry_DoNotUse::MergeFrom(const TestMaps_MInt64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MInt64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MInt64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MUint32Entry_DoNotUse::TestMaps_MUint32Entry_DoNotUse() {}
TestMaps_MUint32Entry_DoNotUse::TestMaps_MUint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MUint32Entry_DoNotUse::MergeFrom(const TestMaps_MUint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MUint32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MUint32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MUint64Entry_DoNotUse::TestMaps_MUint64Entry_DoNotUse() {}
TestMaps_MUint64Entry_DoNotUse::TestMaps_MUint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MUint64Entry_DoNotUse::MergeFrom(const TestMaps_MUint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MUint64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MUint64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MSint32Entry_DoNotUse::TestMaps_MSint32Entry_DoNotUse() {}
TestMaps_MSint32Entry_DoNotUse::TestMaps_MSint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MSint32Entry_DoNotUse::MergeFrom(const TestMaps_MSint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MSint32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MSint32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MSint64Entry_DoNotUse::TestMaps_MSint64Entry_DoNotUse() {}
TestMaps_MSint64Entry_DoNotUse::TestMaps_MSint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MSint64Entry_DoNotUse::MergeFrom(const TestMaps_MSint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MSint64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MSint64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MFixed32Entry_DoNotUse::TestMaps_MFixed32Entry_DoNotUse() {}
TestMaps_MFixed32Entry_DoNotUse::TestMaps_MFixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MFixed32Entry_DoNotUse::MergeFrom(const TestMaps_MFixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MFixed32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MFixed32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MFixed64Entry_DoNotUse::TestMaps_MFixed64Entry_DoNotUse() {}
TestMaps_MFixed64Entry_DoNotUse::TestMaps_MFixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MFixed64Entry_DoNotUse::MergeFrom(const TestMaps_MFixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MFixed64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MFixed64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MSfixed32Entry_DoNotUse::TestMaps_MSfixed32Entry_DoNotUse() {}
TestMaps_MSfixed32Entry_DoNotUse::TestMaps_MSfixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MSfixed32Entry_DoNotUse::MergeFrom(const TestMaps_MSfixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MSfixed32Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MSfixed32Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MSfixed64Entry_DoNotUse::TestMaps_MSfixed64Entry_DoNotUse() {}
TestMaps_MSfixed64Entry_DoNotUse::TestMaps_MSfixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MSfixed64Entry_DoNotUse::MergeFrom(const TestMaps_MSfixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MSfixed64Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MSfixed64Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MBoolEntry_DoNotUse::TestMaps_MBoolEntry_DoNotUse() {}
TestMaps_MBoolEntry_DoNotUse::TestMaps_MBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MBoolEntry_DoNotUse::MergeFrom(const TestMaps_MBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MBoolEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MBoolEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

TestMaps_MStringEntry_DoNotUse::TestMaps_MStringEntry_DoNotUse() {}
TestMaps_MStringEntry_DoNotUse::TestMaps_MStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestMaps_MStringEntry_DoNotUse::MergeFrom(const TestMaps_MStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestMaps_MStringEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestMaps_MStringEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TestMaps::InitAsDefaultInstance() {
}
class TestMaps::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMaps>()._has_bits_);
};

TestMaps::TestMaps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestMaps)
}
TestMaps::TestMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  m_int32_(arena),
  m_int64_(arena),
  m_uint32_(arena),
  m_uint64_(arena),
  m_sint32_(arena),
  m_sint64_(arena),
  m_fixed32_(arena),
  m_fixed64_(arena),
  m_sfixed32_(arena),
  m_sfixed64_(arena),
  m_bool_(arena),
  m_string_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestMaps)
}
TestMaps::TestMaps(const TestMaps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  m_int32_.MergeFrom(from.m_int32_);
  m_int64_.MergeFrom(from.m_int64_);
  m_uint32_.MergeFrom(from.m_uint32_);
  m_uint64_.MergeFrom(from.m_uint64_);
  m_sint32_.MergeFrom(from.m_sint32_);
  m_sint64_.MergeFrom(from.m_sint64_);
  m_fixed32_.MergeFrom(from.m_fixed32_);
  m_fixed64_.MergeFrom(from.m_fixed64_);
  m_sfixed32_.MergeFrom(from.m_sfixed32_);
  m_sfixed64_.MergeFrom(from.m_sfixed64_);
  m_bool_.MergeFrom(from.m_bool_);
  m_string_.MergeFrom(from.m_string_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestMaps)
}

void TestMaps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
}

TestMaps::~TestMaps() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestMaps)
  SharedDtor();
}

void TestMaps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TestMaps::ArenaDtor(void* object) {
  TestMaps* _this = reinterpret_cast< TestMaps* >(object);
  (void)_this;
}
void TestMaps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMaps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMaps& TestMaps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
  return *internal_default_instance();
}


void TestMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestMaps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_int32_.Clear();
  m_int64_.Clear();
  m_uint32_.Clear();
  m_uint64_.Clear();
  m_sint32_.Clear();
  m_sint64_.Clear();
  m_fixed32_.Clear();
  m_fixed64_.Clear();
  m_sfixed32_.Clear();
  m_sfixed64_.Clear();
  m_bool_.Clear();
  m_string_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestMaps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_int32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_int64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_uint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_uint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_sint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_sint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_fixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_fixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_sfixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_sfixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_bool_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestMaps::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestMaps)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          TestMaps_MInt32Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MInt32Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap > > parser(&m_int32_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          TestMaps_MInt64Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MInt64Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap > > parser(&m_int64_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          TestMaps_MUint32Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MUint32Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap > > parser(&m_uint32_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          TestMaps_MUint64Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MUint64Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap > > parser(&m_uint64_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          TestMaps_MSint32Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MSint32Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap > > parser(&m_sint32_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          TestMaps_MSint64Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MSint64Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap > > parser(&m_sint64_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          TestMaps_MFixed32Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MFixed32Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap > > parser(&m_fixed32_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          TestMaps_MFixed64Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MFixed64Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap > > parser(&m_fixed64_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          TestMaps_MSfixed32Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MSfixed32Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap > > parser(&m_sfixed32_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          TestMaps_MSfixed64Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MSfixed64Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap > > parser(&m_sfixed64_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          TestMaps_MBoolEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MBoolEntry_DoNotUse,
              bool, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap > > parser(&m_bool_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          TestMaps_MStringEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TestMaps_MStringEntry_DoNotUse,
              std::string, ::protobuf_unittest::TestIntIntMap,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap > > parser(&m_string_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "protobuf_unittest.TestMaps.MStringEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestMaps)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestMaps::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestMaps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
  if (!this->m_int32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_int32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_int32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int32().begin();
          it != this->m_int32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MInt32Entry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int32().begin();
          it != this->m_int32().end(); ++it) {
        TestMaps_MInt32Entry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
  if (!this->m_int64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_int64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_int64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int64().begin();
          it != this->m_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MInt64Entry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int64().begin();
          it != this->m_int64().end(); ++it) {
        TestMaps_MInt64Entry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
      }
    }
  }

  // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
  if (!this->m_uint32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_uint32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_uint32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint32().begin();
          it != this->m_uint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MUint32Entry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint32().begin();
          it != this->m_uint32().end(); ++it) {
        TestMaps_MUint32Entry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
      }
    }
  }

  // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
  if (!this->m_uint64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_uint64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_uint64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint64().begin();
          it != this->m_uint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MUint64Entry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint64().begin();
          it != this->m_uint64().end(); ++it) {
        TestMaps_MUint64Entry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
      }
    }
  }

  // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
  if (!this->m_sint32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_sint32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_sint32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint32().begin();
          it != this->m_sint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MSint32Entry_DoNotUse::Funcs::SerializeToCodedStream(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint32().begin();
          it != this->m_sint32().end(); ++it) {
        TestMaps_MSint32Entry_DoNotUse::Funcs::SerializeToCodedStream(5, it->first, it->second, output);
      }
    }
  }

  // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
  if (!this->m_sint64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_sint64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_sint64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint64().begin();
          it != this->m_sint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MSint64Entry_DoNotUse::Funcs::SerializeToCodedStream(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint64().begin();
          it != this->m_sint64().end(); ++it) {
        TestMaps_MSint64Entry_DoNotUse::Funcs::SerializeToCodedStream(6, it->first, it->second, output);
      }
    }
  }

  // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
  if (!this->m_fixed32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_fixed32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_fixed32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed32().begin();
          it != this->m_fixed32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MFixed32Entry_DoNotUse::Funcs::SerializeToCodedStream(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed32().begin();
          it != this->m_fixed32().end(); ++it) {
        TestMaps_MFixed32Entry_DoNotUse::Funcs::SerializeToCodedStream(7, it->first, it->second, output);
      }
    }
  }

  // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
  if (!this->m_fixed64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_fixed64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_fixed64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed64().begin();
          it != this->m_fixed64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MFixed64Entry_DoNotUse::Funcs::SerializeToCodedStream(8, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed64().begin();
          it != this->m_fixed64().end(); ++it) {
        TestMaps_MFixed64Entry_DoNotUse::Funcs::SerializeToCodedStream(8, it->first, it->second, output);
      }
    }
  }

  // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
  if (!this->m_sfixed32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_sfixed32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_sfixed32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed32().begin();
          it != this->m_sfixed32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MSfixed32Entry_DoNotUse::Funcs::SerializeToCodedStream(9, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed32().begin();
          it != this->m_sfixed32().end(); ++it) {
        TestMaps_MSfixed32Entry_DoNotUse::Funcs::SerializeToCodedStream(9, it->first, it->second, output);
      }
    }
  }

  // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
  if (!this->m_sfixed64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_sfixed64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_sfixed64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed64().begin();
          it != this->m_sfixed64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MSfixed64Entry_DoNotUse::Funcs::SerializeToCodedStream(10, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed64().begin();
          it != this->m_sfixed64().end(); ++it) {
        TestMaps_MSfixed64Entry_DoNotUse::Funcs::SerializeToCodedStream(10, it->first, it->second, output);
      }
    }
  }

  // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
  if (!this->m_bool().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->m_bool().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_bool().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_bool().begin();
          it != this->m_bool().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MBoolEntry_DoNotUse::Funcs::SerializeToCodedStream(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_bool().begin();
          it != this->m_bool().end(); ++it) {
        TestMaps_MBoolEntry_DoNotUse::Funcs::SerializeToCodedStream(11, it->first, it->second, output);
      }
    }
  }

  // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
  if (!this->m_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_unittest.TestMaps.MStringEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->m_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_string().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_string().begin();
          it != this->m_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TestMaps_MStringEntry_DoNotUse::Funcs::SerializeToCodedStream(12, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_string().begin();
          it != this->m_string().end(); ++it) {
        TestMaps_MStringEntry_DoNotUse::Funcs::SerializeToCodedStream(12, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestMaps)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMaps::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestMaps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
  if (!this->m_int32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_int32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_int32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int32().begin();
          it != this->m_int32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MInt32Entry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int32().begin();
          it != this->m_int32().end(); ++it) {
        target = TestMaps_MInt32Entry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
  if (!this->m_int64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_int64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_int64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int64().begin();
          it != this->m_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MInt64Entry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_int64().begin();
          it != this->m_int64().end(); ++it) {
        target = TestMaps_MInt64Entry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
      }
    }
  }

  // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
  if (!this->m_uint32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_uint32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_uint32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint32().begin();
          it != this->m_uint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MUint32Entry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint32().begin();
          it != this->m_uint32().end(); ++it) {
        target = TestMaps_MUint32Entry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
      }
    }
  }

  // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
  if (!this->m_uint64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_uint64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_uint64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint64().begin();
          it != this->m_uint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MUint64Entry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_uint64().begin();
          it != this->m_uint64().end(); ++it) {
        target = TestMaps_MUint64Entry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
      }
    }
  }

  // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
  if (!this->m_sint32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_sint32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_sint32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint32().begin();
          it != this->m_sint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MSint32Entry_DoNotUse::Funcs::SerializeToArray(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint32().begin();
          it != this->m_sint32().end(); ++it) {
        target = TestMaps_MSint32Entry_DoNotUse::Funcs::SerializeToArray(5, it->first, it->second, target);
      }
    }
  }

  // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
  if (!this->m_sint64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_sint64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_sint64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint64().begin();
          it != this->m_sint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MSint64Entry_DoNotUse::Funcs::SerializeToArray(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sint64().begin();
          it != this->m_sint64().end(); ++it) {
        target = TestMaps_MSint64Entry_DoNotUse::Funcs::SerializeToArray(6, it->first, it->second, target);
      }
    }
  }

  // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
  if (!this->m_fixed32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_fixed32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_fixed32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed32().begin();
          it != this->m_fixed32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MFixed32Entry_DoNotUse::Funcs::SerializeToArray(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed32().begin();
          it != this->m_fixed32().end(); ++it) {
        target = TestMaps_MFixed32Entry_DoNotUse::Funcs::SerializeToArray(7, it->first, it->second, target);
      }
    }
  }

  // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
  if (!this->m_fixed64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_fixed64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_fixed64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed64().begin();
          it != this->m_fixed64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MFixed64Entry_DoNotUse::Funcs::SerializeToArray(8, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_fixed64().begin();
          it != this->m_fixed64().end(); ++it) {
        target = TestMaps_MFixed64Entry_DoNotUse::Funcs::SerializeToArray(8, it->first, it->second, target);
      }
    }
  }

  // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
  if (!this->m_sfixed32().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_sfixed32().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_sfixed32().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed32().begin();
          it != this->m_sfixed32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MSfixed32Entry_DoNotUse::Funcs::SerializeToArray(9, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed32().begin();
          it != this->m_sfixed32().end(); ++it) {
        target = TestMaps_MSfixed32Entry_DoNotUse::Funcs::SerializeToArray(9, it->first, it->second, target);
      }
    }
  }

  // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
  if (!this->m_sfixed64().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_sfixed64().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_sfixed64().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed64().begin();
          it != this->m_sfixed64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MSfixed64Entry_DoNotUse::Funcs::SerializeToArray(10, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_sfixed64().begin();
          it != this->m_sfixed64().end(); ++it) {
        target = TestMaps_MSfixed64Entry_DoNotUse::Funcs::SerializeToArray(10, it->first, it->second, target);
      }
    }
  }

  // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
  if (!this->m_bool().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->m_bool().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_bool().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_bool().begin();
          it != this->m_bool().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MBoolEntry_DoNotUse::Funcs::SerializeToArray(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_bool().begin();
          it != this->m_bool().end(); ++it) {
        target = TestMaps_MBoolEntry_DoNotUse::Funcs::SerializeToArray(11, it->first, it->second, target);
      }
    }
  }

  // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
  if (!this->m_string().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_unittest.TestMaps.MStringEntry.key");
      }
    };

    if (false &&
        this->m_string().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->m_string().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_string().begin();
          it != this->m_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestMaps_MStringEntry_DoNotUse::Funcs::SerializeToArray(12, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
          it = this->m_string().begin();
          it != this->m_string().end(); ++it) {
        target = TestMaps_MStringEntry_DoNotUse::Funcs::SerializeToArray(12, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestMaps)
  return target;
}

size_t TestMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestMaps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .protobuf_unittest.TestIntIntMap> m_int32 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_int32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_int32().begin();
      it != this->m_int32().end(); ++it) {
    total_size += TestMaps_MInt32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, .protobuf_unittest.TestIntIntMap> m_int64 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_int64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_int64().begin();
      it != this->m_int64().end(); ++it) {
    total_size += TestMaps_MInt64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .protobuf_unittest.TestIntIntMap> m_uint32 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_uint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_uint32().begin();
      it != this->m_uint32().end(); ++it) {
    total_size += TestMaps_MUint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .protobuf_unittest.TestIntIntMap> m_uint64 = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_uint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_uint64().begin();
      it != this->m_uint64().end(); ++it) {
    total_size += TestMaps_MUint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint32, .protobuf_unittest.TestIntIntMap> m_sint32 = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_sint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_sint32().begin();
      it != this->m_sint32().end(); ++it) {
    total_size += TestMaps_MSint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint64, .protobuf_unittest.TestIntIntMap> m_sint64 = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_sint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_sint64().begin();
      it != this->m_sint64().end(); ++it) {
    total_size += TestMaps_MSint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed32, .protobuf_unittest.TestIntIntMap> m_fixed32 = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_fixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_fixed32().begin();
      it != this->m_fixed32().end(); ++it) {
    total_size += TestMaps_MFixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, .protobuf_unittest.TestIntIntMap> m_fixed64 = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_fixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_fixed64().begin();
      it != this->m_fixed64().end(); ++it) {
    total_size += TestMaps_MFixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed32, .protobuf_unittest.TestIntIntMap> m_sfixed32 = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_sfixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_sfixed32().begin();
      it != this->m_sfixed32().end(); ++it) {
    total_size += TestMaps_MSfixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed64, .protobuf_unittest.TestIntIntMap> m_sfixed64 = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_sfixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_sfixed64().begin();
      it != this->m_sfixed64().end(); ++it) {
    total_size += TestMaps_MSfixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, .protobuf_unittest.TestIntIntMap> m_bool = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_bool_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_bool().begin();
      it != this->m_bool().end(); ++it) {
    total_size += TestMaps_MBoolEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_unittest.TestIntIntMap> m_string = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->m_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_unittest::TestIntIntMap >::const_iterator
      it = this->m_string().begin();
      it != this->m_string().end(); ++it) {
    total_size += TestMaps_MStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMaps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestMaps)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMaps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMaps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestMaps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestMaps)
    MergeFrom(*source);
  }
}

void TestMaps::MergeFrom(const TestMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestMaps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_int32_.MergeFrom(from.m_int32_);
  m_int64_.MergeFrom(from.m_int64_);
  m_uint32_.MergeFrom(from.m_uint32_);
  m_uint64_.MergeFrom(from.m_uint64_);
  m_sint32_.MergeFrom(from.m_sint32_);
  m_sint64_.MergeFrom(from.m_sint64_);
  m_fixed32_.MergeFrom(from.m_fixed32_);
  m_fixed64_.MergeFrom(from.m_fixed64_);
  m_sfixed32_.MergeFrom(from.m_sfixed32_);
  m_sfixed64_.MergeFrom(from.m_sfixed64_);
  m_bool_.MergeFrom(from.m_bool_);
  m_string_.MergeFrom(from.m_string_);
}

void TestMaps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMaps::CopyFrom(const TestMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMaps::IsInitialized() const {
  return true;
}

void TestMaps::InternalSwap(TestMaps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_int32_.Swap(&other->m_int32_);
  m_int64_.Swap(&other->m_int64_);
  m_uint32_.Swap(&other->m_uint32_);
  m_uint64_.Swap(&other->m_uint64_);
  m_sint32_.Swap(&other->m_sint32_);
  m_sint64_.Swap(&other->m_sint64_);
  m_fixed32_.Swap(&other->m_fixed32_);
  m_fixed64_.Swap(&other->m_fixed64_);
  m_sfixed32_.Swap(&other->m_sfixed32_);
  m_sfixed64_.Swap(&other->m_sfixed64_);
  m_bool_.Swap(&other->m_bool_);
  m_string_.Swap(&other->m_string_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMaps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestSubmessageMaps::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestSubmessageMaps_default_instance_._instance.get_mutable()->m_ = const_cast< ::protobuf_unittest::TestMaps*>(
      ::protobuf_unittest::TestMaps::internal_default_instance());
}
class TestSubmessageMaps::_Internal {
 public:
  using HasBits = decltype(std::declval<TestSubmessageMaps>()._has_bits_);
  static const ::protobuf_unittest::TestMaps& m(const TestSubmessageMaps* msg);
  static void set_has_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestMaps&
TestSubmessageMaps::_Internal::m(const TestSubmessageMaps* msg) {
  return *msg->m_;
}
void TestSubmessageMaps::unsafe_arena_set_allocated_m(
    ::protobuf_unittest::TestMaps* m) {
  if (GetArenaNoVirtual() == nullptr) {
    delete m_;
  }
  m_ = m;
  if (m) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_unittest.TestSubmessageMaps.m)
}
TestSubmessageMaps::TestSubmessageMaps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestSubmessageMaps)
}
TestSubmessageMaps::TestSubmessageMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestSubmessageMaps)
}
TestSubmessageMaps::TestSubmessageMaps(const TestSubmessageMaps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_m()) {
    m_ = new ::protobuf_unittest::TestMaps(*from.m_);
  } else {
    m_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestSubmessageMaps)
}

void TestSubmessageMaps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestSubmessageMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
  m_ = nullptr;
}

TestSubmessageMaps::~TestSubmessageMaps() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestSubmessageMaps)
  SharedDtor();
}

void TestSubmessageMaps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete m_;
}

void TestSubmessageMaps::ArenaDtor(void* object) {
  TestSubmessageMaps* _this = reinterpret_cast< TestSubmessageMaps* >(object);
  (void)_this;
}
void TestSubmessageMaps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestSubmessageMaps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestSubmessageMaps& TestSubmessageMaps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestSubmessageMaps_google_2fprotobuf_2fmap_5fproto2_5funittest_2eproto.base);
  return *internal_default_instance();
}


void TestSubmessageMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestSubmessageMaps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(m_ != nullptr);
    m_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestSubmessageMaps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestMaps m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_m(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestSubmessageMaps::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestSubmessageMaps)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf_unittest.TestMaps m = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_m()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestSubmessageMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestSubmessageMaps)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestSubmessageMaps::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestSubmessageMaps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMaps m = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::m(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestSubmessageMaps)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestSubmessageMaps::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestSubmessageMaps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestMaps m = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::m(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestSubmessageMaps)
  return target;
}

size_t TestSubmessageMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestSubmessageMaps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestMaps m = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestSubmessageMaps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestSubmessageMaps)
  GOOGLE_DCHECK_NE(&from, this);
  const TestSubmessageMaps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestSubmessageMaps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestSubmessageMaps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestSubmessageMaps)
    MergeFrom(*source);
  }
}

void TestSubmessageMaps::MergeFrom(const TestSubmessageMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestSubmessageMaps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m()) {
    mutable_m()->::protobuf_unittest::TestMaps::MergeFrom(from.m());
  }
}

void TestSubmessageMaps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestSubmessageMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestSubmessageMaps::CopyFrom(const TestSubmessageMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestSubmessageMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSubmessageMaps::IsInitialized() const {
  return true;
}

void TestSubmessageMaps::InternalSwap(TestSubmessageMaps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_, other->m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestSubmessageMaps::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMap_KnownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMap_UnknownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMap* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMap >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtra_KnownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtra_UnknownMapFieldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEnumMapPlusExtra* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEnumMapPlusExtra >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestEnumMapPlusExtra >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestImportEnumMap_ImportEnumAmpEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestImportEnumMap* Arena::CreateMaybeMessage< ::protobuf_unittest::TestImportEnumMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestImportEnumMap >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIntIntMap_MEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestIntIntMap* Arena::CreateMaybeMessage< ::protobuf_unittest::TestIntIntMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestIntIntMap >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MInt32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MInt64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MUint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MUint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MSint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MSint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MFixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MFixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MSfixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MSfixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MBoolEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps_MStringEntry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps_MStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps_MStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestMaps* Arena::CreateMaybeMessage< ::protobuf_unittest::TestMaps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestMaps >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestSubmessageMaps* Arena::CreateMaybeMessage< ::protobuf_unittest::TestSubmessageMaps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestSubmessageMaps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
