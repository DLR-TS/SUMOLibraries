// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_lite.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5flite_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5flite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include "google/protobuf/unittest_import_lite.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5flite_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2funittest_5flite_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace protobuf_unittest {
class DupEnum;
class DupEnumDefaultTypeInternal;
extern DupEnumDefaultTypeInternal _DupEnum_default_instance_;
class ForeignMessageLite;
class ForeignMessageLiteDefaultTypeInternal;
extern ForeignMessageLiteDefaultTypeInternal _ForeignMessageLite_default_instance_;
class NonPackedFixed32;
class NonPackedFixed32DefaultTypeInternal;
extern NonPackedFixed32DefaultTypeInternal _NonPackedFixed32_default_instance_;
class NonPackedInt32;
class NonPackedInt32DefaultTypeInternal;
extern NonPackedInt32DefaultTypeInternal _NonPackedInt32_default_instance_;
class OptionalGroup_extension_lite;
class OptionalGroup_extension_liteDefaultTypeInternal;
extern OptionalGroup_extension_liteDefaultTypeInternal _OptionalGroup_extension_lite_default_instance_;
class PackedFixed32;
class PackedFixed32DefaultTypeInternal;
extern PackedFixed32DefaultTypeInternal _PackedFixed32_default_instance_;
class PackedInt32;
class PackedInt32DefaultTypeInternal;
extern PackedInt32DefaultTypeInternal _PackedInt32_default_instance_;
class RepeatedGroup_extension_lite;
class RepeatedGroup_extension_liteDefaultTypeInternal;
extern RepeatedGroup_extension_liteDefaultTypeInternal _RepeatedGroup_extension_lite_default_instance_;
class TestAllExtensionsLite;
class TestAllExtensionsLiteDefaultTypeInternal;
extern TestAllExtensionsLiteDefaultTypeInternal _TestAllExtensionsLite_default_instance_;
class TestAllTypesLite;
class TestAllTypesLiteDefaultTypeInternal;
extern TestAllTypesLiteDefaultTypeInternal _TestAllTypesLite_default_instance_;
class TestAllTypesLite_NestedMessage;
class TestAllTypesLite_NestedMessageDefaultTypeInternal;
extern TestAllTypesLite_NestedMessageDefaultTypeInternal _TestAllTypesLite_NestedMessage_default_instance_;
class TestAllTypesLite_OptionalGroup;
class TestAllTypesLite_OptionalGroupDefaultTypeInternal;
extern TestAllTypesLite_OptionalGroupDefaultTypeInternal _TestAllTypesLite_OptionalGroup_default_instance_;
class TestAllTypesLite_RepeatedGroup;
class TestAllTypesLite_RepeatedGroupDefaultTypeInternal;
extern TestAllTypesLite_RepeatedGroupDefaultTypeInternal _TestAllTypesLite_RepeatedGroup_default_instance_;
class TestDeprecatedLite;
class TestDeprecatedLiteDefaultTypeInternal;
extern TestDeprecatedLiteDefaultTypeInternal _TestDeprecatedLite_default_instance_;
class TestEmptyMessageLite;
class TestEmptyMessageLiteDefaultTypeInternal;
extern TestEmptyMessageLiteDefaultTypeInternal _TestEmptyMessageLite_default_instance_;
class TestEmptyMessageWithExtensionsLite;
class TestEmptyMessageWithExtensionsLiteDefaultTypeInternal;
extern TestEmptyMessageWithExtensionsLiteDefaultTypeInternal _TestEmptyMessageWithExtensionsLite_default_instance_;
class TestHugeFieldNumbersLite;
class TestHugeFieldNumbersLiteDefaultTypeInternal;
extern TestHugeFieldNumbersLiteDefaultTypeInternal _TestHugeFieldNumbersLite_default_instance_;
class TestHugeFieldNumbersLite_OptionalGroup;
class TestHugeFieldNumbersLite_OptionalGroupDefaultTypeInternal;
extern TestHugeFieldNumbersLite_OptionalGroupDefaultTypeInternal _TestHugeFieldNumbersLite_OptionalGroup_default_instance_;
class TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse;
class TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUseDefaultTypeInternal;
extern TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUseDefaultTypeInternal _TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse_default_instance_;
class TestNestedExtensionLite;
class TestNestedExtensionLiteDefaultTypeInternal;
extern TestNestedExtensionLiteDefaultTypeInternal _TestNestedExtensionLite_default_instance_;
class TestOneofParsingLite;
class TestOneofParsingLiteDefaultTypeInternal;
extern TestOneofParsingLiteDefaultTypeInternal _TestOneofParsingLite_default_instance_;
class TestPackedExtensionsLite;
class TestPackedExtensionsLiteDefaultTypeInternal;
extern TestPackedExtensionsLiteDefaultTypeInternal _TestPackedExtensionsLite_default_instance_;
class TestPackedTypesLite;
class TestPackedTypesLiteDefaultTypeInternal;
extern TestPackedTypesLiteDefaultTypeInternal _TestPackedTypesLite_default_instance_;
class TestParsingMergeLite;
class TestParsingMergeLiteDefaultTypeInternal;
extern TestParsingMergeLiteDefaultTypeInternal _TestParsingMergeLite_default_instance_;
class TestParsingMergeLite_OptionalGroup;
class TestParsingMergeLite_OptionalGroupDefaultTypeInternal;
extern TestParsingMergeLite_OptionalGroupDefaultTypeInternal _TestParsingMergeLite_OptionalGroup_default_instance_;
class TestParsingMergeLite_RepeatedFieldsGenerator;
class TestParsingMergeLite_RepeatedFieldsGeneratorDefaultTypeInternal;
extern TestParsingMergeLite_RepeatedFieldsGeneratorDefaultTypeInternal _TestParsingMergeLite_RepeatedFieldsGenerator_default_instance_;
class TestParsingMergeLite_RepeatedFieldsGenerator_Group1;
class TestParsingMergeLite_RepeatedFieldsGenerator_Group1DefaultTypeInternal;
extern TestParsingMergeLite_RepeatedFieldsGenerator_Group1DefaultTypeInternal _TestParsingMergeLite_RepeatedFieldsGenerator_Group1_default_instance_;
class TestParsingMergeLite_RepeatedFieldsGenerator_Group2;
class TestParsingMergeLite_RepeatedFieldsGenerator_Group2DefaultTypeInternal;
extern TestParsingMergeLite_RepeatedFieldsGenerator_Group2DefaultTypeInternal _TestParsingMergeLite_RepeatedFieldsGenerator_Group2_default_instance_;
class TestParsingMergeLite_RepeatedGroup;
class TestParsingMergeLite_RepeatedGroupDefaultTypeInternal;
extern TestParsingMergeLite_RepeatedGroupDefaultTypeInternal _TestParsingMergeLite_RepeatedGroup_default_instance_;
class V1MessageLite;
class V1MessageLiteDefaultTypeInternal;
extern V1MessageLiteDefaultTypeInternal _V1MessageLite_default_instance_;
class V2MessageLite;
class V2MessageLiteDefaultTypeInternal;
extern V2MessageLiteDefaultTypeInternal _V2MessageLite_default_instance_;
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf_unittest::DupEnum* Arena::CreateMaybeMessage<::protobuf_unittest::DupEnum>(Arena*);
template<> ::protobuf_unittest::ForeignMessageLite* Arena::CreateMaybeMessage<::protobuf_unittest::ForeignMessageLite>(Arena*);
template<> ::protobuf_unittest::NonPackedFixed32* Arena::CreateMaybeMessage<::protobuf_unittest::NonPackedFixed32>(Arena*);
template<> ::protobuf_unittest::NonPackedInt32* Arena::CreateMaybeMessage<::protobuf_unittest::NonPackedInt32>(Arena*);
template<> ::protobuf_unittest::OptionalGroup_extension_lite* Arena::CreateMaybeMessage<::protobuf_unittest::OptionalGroup_extension_lite>(Arena*);
template<> ::protobuf_unittest::PackedFixed32* Arena::CreateMaybeMessage<::protobuf_unittest::PackedFixed32>(Arena*);
template<> ::protobuf_unittest::PackedInt32* Arena::CreateMaybeMessage<::protobuf_unittest::PackedInt32>(Arena*);
template<> ::protobuf_unittest::RepeatedGroup_extension_lite* Arena::CreateMaybeMessage<::protobuf_unittest::RepeatedGroup_extension_lite>(Arena*);
template<> ::protobuf_unittest::TestAllExtensionsLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllExtensionsLite>(Arena*);
template<> ::protobuf_unittest::TestAllTypesLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite>(Arena*);
template<> ::protobuf_unittest::TestAllTypesLite_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite_NestedMessage>(Arena*);
template<> ::protobuf_unittest::TestAllTypesLite_OptionalGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite_OptionalGroup>(Arena*);
template<> ::protobuf_unittest::TestAllTypesLite_RepeatedGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite_RepeatedGroup>(Arena*);
template<> ::protobuf_unittest::TestDeprecatedLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestDeprecatedLite>(Arena*);
template<> ::protobuf_unittest::TestEmptyMessageLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestEmptyMessageLite>(Arena*);
template<> ::protobuf_unittest::TestEmptyMessageWithExtensionsLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestEmptyMessageWithExtensionsLite>(Arena*);
template<> ::protobuf_unittest::TestHugeFieldNumbersLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestHugeFieldNumbersLite>(Arena*);
template<> ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup>(Arena*);
template<> ::protobuf_unittest::TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_unittest::TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse>(Arena*);
template<> ::protobuf_unittest::TestNestedExtensionLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestNestedExtensionLite>(Arena*);
template<> ::protobuf_unittest::TestOneofParsingLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestOneofParsingLite>(Arena*);
template<> ::protobuf_unittest::TestPackedExtensionsLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestPackedExtensionsLite>(Arena*);
template<> ::protobuf_unittest::TestPackedTypesLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestPackedTypesLite>(Arena*);
template<> ::protobuf_unittest::TestParsingMergeLite* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMergeLite>(Arena*);
template<> ::protobuf_unittest::TestParsingMergeLite_OptionalGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMergeLite_OptionalGroup>(Arena*);
template<> ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator>(Arena*);
template<> ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1>(Arena*);
template<> ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2>(Arena*);
template<> ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup* Arena::CreateMaybeMessage<::protobuf_unittest::TestParsingMergeLite_RepeatedGroup>(Arena*);
template<> ::protobuf_unittest::V1MessageLite* Arena::CreateMaybeMessage<::protobuf_unittest::V1MessageLite>(Arena*);
template<> ::protobuf_unittest::V2MessageLite* Arena::CreateMaybeMessage<::protobuf_unittest::V2MessageLite>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf_unittest {

enum TestAllTypesLite_NestedEnum : int {
  TestAllTypesLite_NestedEnum_FOO = 1,
  TestAllTypesLite_NestedEnum_BAR = 2,
  TestAllTypesLite_NestedEnum_BAZ = 3
};
bool TestAllTypesLite_NestedEnum_IsValid(int value);
constexpr TestAllTypesLite_NestedEnum TestAllTypesLite_NestedEnum_NestedEnum_MIN = TestAllTypesLite_NestedEnum_FOO;
constexpr TestAllTypesLite_NestedEnum TestAllTypesLite_NestedEnum_NestedEnum_MAX = TestAllTypesLite_NestedEnum_BAZ;
constexpr int TestAllTypesLite_NestedEnum_NestedEnum_ARRAYSIZE = TestAllTypesLite_NestedEnum_NestedEnum_MAX + 1;

const std::string& TestAllTypesLite_NestedEnum_Name(TestAllTypesLite_NestedEnum value);
template<typename T>
inline const std::string& TestAllTypesLite_NestedEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestAllTypesLite_NestedEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestAllTypesLite_NestedEnum_Name.");
  return TestAllTypesLite_NestedEnum_Name(static_cast<TestAllTypesLite_NestedEnum>(enum_t_value));
}
bool TestAllTypesLite_NestedEnum_Parse(
    const std::string& name, TestAllTypesLite_NestedEnum* value);
enum DupEnum_TestEnumWithDupValueLite : int {
  DupEnum_TestEnumWithDupValueLite_FOO1 = 1,
  DupEnum_TestEnumWithDupValueLite_BAR1 = 2,
  DupEnum_TestEnumWithDupValueLite_BAZ = 3,
  DupEnum_TestEnumWithDupValueLite_FOO2 = 1,
  DupEnum_TestEnumWithDupValueLite_BAR2 = 2
};
bool DupEnum_TestEnumWithDupValueLite_IsValid(int value);
constexpr DupEnum_TestEnumWithDupValueLite DupEnum_TestEnumWithDupValueLite_TestEnumWithDupValueLite_MIN = DupEnum_TestEnumWithDupValueLite_FOO1;
constexpr DupEnum_TestEnumWithDupValueLite DupEnum_TestEnumWithDupValueLite_TestEnumWithDupValueLite_MAX = DupEnum_TestEnumWithDupValueLite_BAZ;
constexpr int DupEnum_TestEnumWithDupValueLite_TestEnumWithDupValueLite_ARRAYSIZE = DupEnum_TestEnumWithDupValueLite_TestEnumWithDupValueLite_MAX + 1;

const std::string& DupEnum_TestEnumWithDupValueLite_Name(DupEnum_TestEnumWithDupValueLite value);
template<typename T>
inline const std::string& DupEnum_TestEnumWithDupValueLite_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DupEnum_TestEnumWithDupValueLite>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DupEnum_TestEnumWithDupValueLite_Name.");
  return DupEnum_TestEnumWithDupValueLite_Name(static_cast<DupEnum_TestEnumWithDupValueLite>(enum_t_value));
}
bool DupEnum_TestEnumWithDupValueLite_Parse(
    const std::string& name, DupEnum_TestEnumWithDupValueLite* value);
enum ForeignEnumLite : int {
  FOREIGN_LITE_FOO = 4,
  FOREIGN_LITE_BAZ = 6,
  FOREIGN_LITE_BAR = 5
};
bool ForeignEnumLite_IsValid(int value);
constexpr ForeignEnumLite ForeignEnumLite_MIN = FOREIGN_LITE_FOO;
constexpr ForeignEnumLite ForeignEnumLite_MAX = FOREIGN_LITE_BAZ;
constexpr int ForeignEnumLite_ARRAYSIZE = ForeignEnumLite_MAX + 1;

const std::string& ForeignEnumLite_Name(ForeignEnumLite value);
template<typename T>
inline const std::string& ForeignEnumLite_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ForeignEnumLite>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ForeignEnumLite_Name.");
  return ForeignEnumLite_Name(static_cast<ForeignEnumLite>(enum_t_value));
}
bool ForeignEnumLite_Parse(
    const std::string& name, ForeignEnumLite* value);
enum V1EnumLite : int {
  V1_FIRST = 1
};
bool V1EnumLite_IsValid(int value);
constexpr V1EnumLite V1EnumLite_MIN = V1_FIRST;
constexpr V1EnumLite V1EnumLite_MAX = V1_FIRST;
constexpr int V1EnumLite_ARRAYSIZE = V1EnumLite_MAX + 1;

const std::string& V1EnumLite_Name(V1EnumLite value);
template<typename T>
inline const std::string& V1EnumLite_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V1EnumLite>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V1EnumLite_Name.");
  return V1EnumLite_Name(static_cast<V1EnumLite>(enum_t_value));
}
bool V1EnumLite_Parse(
    const std::string& name, V1EnumLite* value);
enum V2EnumLite : int {
  V2_FIRST = 1,
  V2_SECOND = 2
};
bool V2EnumLite_IsValid(int value);
constexpr V2EnumLite V2EnumLite_MIN = V2_FIRST;
constexpr V2EnumLite V2EnumLite_MAX = V2_SECOND;
constexpr int V2EnumLite_ARRAYSIZE = V2EnumLite_MAX + 1;

const std::string& V2EnumLite_Name(V2EnumLite value);
template<typename T>
inline const std::string& V2EnumLite_Name(T enum_t_value) {
  static_assert(::std::is_same<T, V2EnumLite>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function V2EnumLite_Name.");
  return V2EnumLite_Name(static_cast<V2EnumLite>(enum_t_value));
}
bool V2EnumLite_Parse(
    const std::string& name, V2EnumLite* value);
// ===================================================================

class TestAllTypesLite_NestedMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllTypesLite.NestedMessage) */ {
 public:
  TestAllTypesLite_NestedMessage();
  virtual ~TestAllTypesLite_NestedMessage();

  TestAllTypesLite_NestedMessage(const TestAllTypesLite_NestedMessage& from);
  TestAllTypesLite_NestedMessage(TestAllTypesLite_NestedMessage&& from) noexcept
    : TestAllTypesLite_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestAllTypesLite_NestedMessage& operator=(const TestAllTypesLite_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesLite_NestedMessage& operator=(TestAllTypesLite_NestedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestAllTypesLite_NestedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestAllTypesLite_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesLite_NestedMessage*>(
               &_TestAllTypesLite_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestAllTypesLite_NestedMessage& a, TestAllTypesLite_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesLite_NestedMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestAllTypesLite_NestedMessage* New() const final {
    return CreateMaybeMessage<TestAllTypesLite_NestedMessage>(nullptr);
  }

  TestAllTypesLite_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestAllTypesLite_NestedMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestAllTypesLite_NestedMessage& from);
  void MergeFrom(const TestAllTypesLite_NestedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestAllTypesLite_NestedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllTypesLite.NestedMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCcFieldNumber = 2,
    kBbFieldNumber = 1,
  };
  // optional int64 cc = 2;
  bool has_cc() const;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::int64 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 bb = 1;
  bool has_bb() const;
  void clear_bb();
  ::PROTOBUF_NAMESPACE_ID::int32 bb() const;
  void set_bb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllTypesLite.NestedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 cc_;
  ::PROTOBUF_NAMESPACE_ID::int32 bb_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypesLite_OptionalGroup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllTypesLite.OptionalGroup) */ {
 public:
  TestAllTypesLite_OptionalGroup();
  virtual ~TestAllTypesLite_OptionalGroup();

  TestAllTypesLite_OptionalGroup(const TestAllTypesLite_OptionalGroup& from);
  TestAllTypesLite_OptionalGroup(TestAllTypesLite_OptionalGroup&& from) noexcept
    : TestAllTypesLite_OptionalGroup() {
    *this = ::std::move(from);
  }

  inline TestAllTypesLite_OptionalGroup& operator=(const TestAllTypesLite_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesLite_OptionalGroup& operator=(TestAllTypesLite_OptionalGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestAllTypesLite_OptionalGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestAllTypesLite_OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesLite_OptionalGroup*>(
               &_TestAllTypesLite_OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestAllTypesLite_OptionalGroup& a, TestAllTypesLite_OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesLite_OptionalGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestAllTypesLite_OptionalGroup* New() const final {
    return CreateMaybeMessage<TestAllTypesLite_OptionalGroup>(nullptr);
  }

  TestAllTypesLite_OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestAllTypesLite_OptionalGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestAllTypesLite_OptionalGroup& from);
  void MergeFrom(const TestAllTypesLite_OptionalGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestAllTypesLite_OptionalGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllTypesLite.OptionalGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 17,
  };
  // optional int32 a = 17;
  bool has_a() const;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllTypesLite.OptionalGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypesLite_RepeatedGroup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllTypesLite.RepeatedGroup) */ {
 public:
  TestAllTypesLite_RepeatedGroup();
  virtual ~TestAllTypesLite_RepeatedGroup();

  TestAllTypesLite_RepeatedGroup(const TestAllTypesLite_RepeatedGroup& from);
  TestAllTypesLite_RepeatedGroup(TestAllTypesLite_RepeatedGroup&& from) noexcept
    : TestAllTypesLite_RepeatedGroup() {
    *this = ::std::move(from);
  }

  inline TestAllTypesLite_RepeatedGroup& operator=(const TestAllTypesLite_RepeatedGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesLite_RepeatedGroup& operator=(TestAllTypesLite_RepeatedGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestAllTypesLite_RepeatedGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestAllTypesLite_RepeatedGroup* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesLite_RepeatedGroup*>(
               &_TestAllTypesLite_RepeatedGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestAllTypesLite_RepeatedGroup& a, TestAllTypesLite_RepeatedGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesLite_RepeatedGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestAllTypesLite_RepeatedGroup* New() const final {
    return CreateMaybeMessage<TestAllTypesLite_RepeatedGroup>(nullptr);
  }

  TestAllTypesLite_RepeatedGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestAllTypesLite_RepeatedGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestAllTypesLite_RepeatedGroup& from);
  void MergeFrom(const TestAllTypesLite_RepeatedGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestAllTypesLite_RepeatedGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllTypesLite.RepeatedGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 47,
  };
  // optional int32 a = 47;
  bool has_a() const;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllTypesLite.RepeatedGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypesLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllTypesLite) */ {
 public:
  TestAllTypesLite();
  virtual ~TestAllTypesLite();

  TestAllTypesLite(const TestAllTypesLite& from);
  TestAllTypesLite(TestAllTypesLite&& from) noexcept
    : TestAllTypesLite() {
    *this = ::std::move(from);
  }

  inline TestAllTypesLite& operator=(const TestAllTypesLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesLite& operator=(TestAllTypesLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestAllTypesLite& default_instance();

  enum OneofFieldCase {
    kOneofUint32 = 111,
    kOneofNestedMessage = 112,
    kOneofString = 113,
    kOneofBytes = 114,
    kOneofLazyNestedMessage = 115,
    ONEOF_FIELD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestAllTypesLite* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesLite*>(
               &_TestAllTypesLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestAllTypesLite& a, TestAllTypesLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestAllTypesLite* New() const final {
    return CreateMaybeMessage<TestAllTypesLite>(nullptr);
  }

  TestAllTypesLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestAllTypesLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestAllTypesLite& from);
  void MergeFrom(const TestAllTypesLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestAllTypesLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllTypesLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TestAllTypesLite_NestedMessage NestedMessage;
  typedef TestAllTypesLite_OptionalGroup OptionalGroup;
  typedef TestAllTypesLite_RepeatedGroup RepeatedGroup;

  typedef TestAllTypesLite_NestedEnum NestedEnum;
  static constexpr NestedEnum FOO =
    TestAllTypesLite_NestedEnum_FOO;
  static constexpr NestedEnum BAR =
    TestAllTypesLite_NestedEnum_BAR;
  static constexpr NestedEnum BAZ =
    TestAllTypesLite_NestedEnum_BAZ;
  static inline bool NestedEnum_IsValid(int value) {
    return TestAllTypesLite_NestedEnum_IsValid(value);
  }
  static constexpr NestedEnum NestedEnum_MIN =
    TestAllTypesLite_NestedEnum_NestedEnum_MIN;
  static constexpr NestedEnum NestedEnum_MAX =
    TestAllTypesLite_NestedEnum_NestedEnum_MAX;
  static constexpr int NestedEnum_ARRAYSIZE =
    TestAllTypesLite_NestedEnum_NestedEnum_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NestedEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NestedEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NestedEnum_Name.");
    return TestAllTypesLite_NestedEnum_Name(enum_t_value);
  }
  static inline bool NestedEnum_Parse(const std::string& name,
      NestedEnum* value) {
    return TestAllTypesLite_NestedEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 31,
    kRepeatedInt64FieldNumber = 32,
    kRepeatedUint32FieldNumber = 33,
    kRepeatedUint64FieldNumber = 34,
    kRepeatedSint32FieldNumber = 35,
    kRepeatedSint64FieldNumber = 36,
    kRepeatedFixed32FieldNumber = 37,
    kRepeatedFixed64FieldNumber = 38,
    kRepeatedSfixed32FieldNumber = 39,
    kRepeatedSfixed64FieldNumber = 40,
    kRepeatedFloatFieldNumber = 41,
    kRepeatedDoubleFieldNumber = 42,
    kRepeatedBoolFieldNumber = 43,
    kRepeatedStringFieldNumber = 44,
    kRepeatedBytesFieldNumber = 45,
    kRepeatedgroupFieldNumber = 46,
    kRepeatedNestedMessageFieldNumber = 48,
    kRepeatedForeignMessageFieldNumber = 49,
    kRepeatedImportMessageFieldNumber = 50,
    kRepeatedNestedEnumFieldNumber = 51,
    kRepeatedForeignEnumFieldNumber = 52,
    kRepeatedImportEnumFieldNumber = 53,
    kRepeatedStringPieceFieldNumber = 54,
    kRepeatedCordFieldNumber = 55,
    kRepeatedLazyMessageFieldNumber = 57,
    kOptionalStringFieldNumber = 14,
    kOptionalBytesFieldNumber = 15,
    kOptionalStringPieceFieldNumber = 24,
    kOptionalCordFieldNumber = 25,
    kDefaultStringFieldNumber = 74,
    kDefaultBytesFieldNumber = 75,
    kDefaultStringPieceFieldNumber = 84,
    kDefaultCordFieldNumber = 85,
    kOptionalgroupFieldNumber = 16,
    kOptionalNestedMessageFieldNumber = 18,
    kOptionalForeignMessageFieldNumber = 19,
    kOptionalImportMessageFieldNumber = 20,
    kOptionalPublicImportMessageFieldNumber = 26,
    kOptionalLazyMessageFieldNumber = 27,
    kOptionalInt64FieldNumber = 2,
    kOptionalInt32FieldNumber = 1,
    kOptionalUint32FieldNumber = 3,
    kOptionalUint64FieldNumber = 4,
    kOptionalSint64FieldNumber = 6,
    kOptionalSint32FieldNumber = 5,
    kOptionalFixed32FieldNumber = 7,
    kOptionalFixed64FieldNumber = 8,
    kOptionalSfixed64FieldNumber = 10,
    kOptionalSfixed32FieldNumber = 9,
    kOptionalFloatFieldNumber = 11,
    kOptionalDoubleFieldNumber = 12,
    kOptionalBoolFieldNumber = 13,
    kDeceptivelyNamedListFieldNumber = 116,
    kDefaultImportEnumFieldNumber = 83,
    kOptionalNestedEnumFieldNumber = 21,
    kOptionalForeignEnumFieldNumber = 22,
    kOptionalImportEnumFieldNumber = 23,
    kDefaultInt32FieldNumber = 61,
    kDefaultInt64FieldNumber = 62,
    kDefaultUint64FieldNumber = 64,
    kDefaultUint32FieldNumber = 63,
    kDefaultSint32FieldNumber = 65,
    kDefaultSint64FieldNumber = 66,
    kDefaultFixed64FieldNumber = 68,
    kDefaultFixed32FieldNumber = 67,
    kDefaultSfixed32FieldNumber = 69,
    kDefaultSfixed64FieldNumber = 70,
    kDefaultDoubleFieldNumber = 72,
    kDefaultFloatFieldNumber = 71,
    kDefaultBoolFieldNumber = 73,
    kDefaultNestedEnumFieldNumber = 81,
    kDefaultForeignEnumFieldNumber = 82,
    kOneofUint32FieldNumber = 111,
    kOneofNestedMessageFieldNumber = 112,
    kOneofStringFieldNumber = 113,
    kOneofBytesFieldNumber = 114,
    kOneofLazyNestedMessageFieldNumber = 115,
  };
  // repeated int32 repeated_int32 = 31;
  int repeated_int32_size() const;
  void clear_repeated_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 repeated_int32(int index) const;
  void set_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_repeated_int32();

  // repeated int64 repeated_int64 = 32;
  int repeated_int64_size() const;
  void clear_repeated_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 repeated_int64(int index) const;
  void set_repeated_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_repeated_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      repeated_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_repeated_int64();

  // repeated uint32 repeated_uint32 = 33;
  int repeated_uint32_size() const;
  void clear_repeated_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated_uint32(int index) const;
  void set_repeated_uint32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      repeated_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_repeated_uint32();

  // repeated uint64 repeated_uint64 = 34;
  int repeated_uint64_size() const;
  void clear_repeated_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 repeated_uint64(int index) const;
  void set_repeated_uint64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      repeated_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_repeated_uint64();

  // repeated sint32 repeated_sint32 = 35;
  int repeated_sint32_size() const;
  void clear_repeated_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 repeated_sint32(int index) const;
  void set_repeated_sint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      repeated_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_repeated_sint32();

  // repeated sint64 repeated_sint64 = 36;
  int repeated_sint64_size() const;
  void clear_repeated_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 repeated_sint64(int index) const;
  void set_repeated_sint64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      repeated_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_repeated_sint64();

  // repeated fixed32 repeated_fixed32 = 37;
  int repeated_fixed32_size() const;
  void clear_repeated_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated_fixed32(int index) const;
  void set_repeated_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      repeated_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_repeated_fixed32();

  // repeated fixed64 repeated_fixed64 = 38;
  int repeated_fixed64_size() const;
  void clear_repeated_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 repeated_fixed64(int index) const;
  void set_repeated_fixed64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      repeated_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_repeated_fixed64();

  // repeated sfixed32 repeated_sfixed32 = 39;
  int repeated_sfixed32_size() const;
  void clear_repeated_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 repeated_sfixed32(int index) const;
  void set_repeated_sfixed32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      repeated_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_repeated_sfixed32();

  // repeated sfixed64 repeated_sfixed64 = 40;
  int repeated_sfixed64_size() const;
  void clear_repeated_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 repeated_sfixed64(int index) const;
  void set_repeated_sfixed64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      repeated_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_repeated_sfixed64();

  // repeated float repeated_float = 41;
  int repeated_float_size() const;
  void clear_repeated_float();
  float repeated_float(int index) const;
  void set_repeated_float(int index, float value);
  void add_repeated_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      repeated_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_repeated_float();

  // repeated double repeated_double = 42;
  int repeated_double_size() const;
  void clear_repeated_double();
  double repeated_double(int index) const;
  void set_repeated_double(int index, double value);
  void add_repeated_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      repeated_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_repeated_double();

  // repeated bool repeated_bool = 43;
  int repeated_bool_size() const;
  void clear_repeated_bool();
  bool repeated_bool(int index) const;
  void set_repeated_bool(int index, bool value);
  void add_repeated_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      repeated_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_repeated_bool();

  // repeated string repeated_string = 44;
  int repeated_string_size() const;
  void clear_repeated_string();
  const std::string& repeated_string(int index) const;
  std::string* mutable_repeated_string(int index);
  void set_repeated_string(int index, const std::string& value);
  void set_repeated_string(int index, std::string&& value);
  void set_repeated_string(int index, const char* value);
  void set_repeated_string(int index, const char* value, size_t size);
  std::string* add_repeated_string();
  void add_repeated_string(const std::string& value);
  void add_repeated_string(std::string&& value);
  void add_repeated_string(const char* value);
  void add_repeated_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string();

  // repeated bytes repeated_bytes = 45;
  int repeated_bytes_size() const;
  void clear_repeated_bytes();
  const std::string& repeated_bytes(int index) const;
  std::string* mutable_repeated_bytes(int index);
  void set_repeated_bytes(int index, const std::string& value);
  void set_repeated_bytes(int index, std::string&& value);
  void set_repeated_bytes(int index, const char* value);
  void set_repeated_bytes(int index, const void* value, size_t size);
  std::string* add_repeated_bytes();
  void add_repeated_bytes(const std::string& value);
  void add_repeated_bytes(std::string&& value);
  void add_repeated_bytes(const char* value);
  void add_repeated_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_bytes();

  // repeated group RepeatedGroup = 46 { ... };
  int repeatedgroup_size() const;
  void clear_repeatedgroup();
  ::protobuf_unittest::TestAllTypesLite_RepeatedGroup* mutable_repeatedgroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_RepeatedGroup >*
      mutable_repeatedgroup();
  const ::protobuf_unittest::TestAllTypesLite_RepeatedGroup& repeatedgroup(int index) const;
  ::protobuf_unittest::TestAllTypesLite_RepeatedGroup* add_repeatedgroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_RepeatedGroup >&
      repeatedgroup() const;

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
  int repeated_nested_message_size() const;
  void clear_repeated_nested_message();
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* mutable_repeated_nested_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage >*
      mutable_repeated_nested_message();
  const ::protobuf_unittest::TestAllTypesLite_NestedMessage& repeated_nested_message(int index) const;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* add_repeated_nested_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage >&
      repeated_nested_message() const;

  // repeated .protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
  int repeated_foreign_message_size() const;
  void clear_repeated_foreign_message();
  ::protobuf_unittest::ForeignMessageLite* mutable_repeated_foreign_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessageLite >*
      mutable_repeated_foreign_message();
  const ::protobuf_unittest::ForeignMessageLite& repeated_foreign_message(int index) const;
  ::protobuf_unittest::ForeignMessageLite* add_repeated_foreign_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessageLite >&
      repeated_foreign_message() const;

  // repeated .protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
  int repeated_import_message_size() const;
  void clear_repeated_import_message();
  ::protobuf_unittest_import::ImportMessageLite* mutable_repeated_import_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessageLite >*
      mutable_repeated_import_message();
  const ::protobuf_unittest_import::ImportMessageLite& repeated_import_message(int index) const;
  ::protobuf_unittest_import::ImportMessageLite* add_repeated_import_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessageLite >&
      repeated_import_message() const;

  // repeated .protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
  int repeated_nested_enum_size() const;
  void clear_repeated_nested_enum();
  ::protobuf_unittest::TestAllTypesLite_NestedEnum repeated_nested_enum(int index) const;
  void set_repeated_nested_enum(int index, ::protobuf_unittest::TestAllTypesLite_NestedEnum value);
  void add_repeated_nested_enum(::protobuf_unittest::TestAllTypesLite_NestedEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_nested_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_nested_enum();

  // repeated .protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
  int repeated_foreign_enum_size() const;
  void clear_repeated_foreign_enum();
  ::protobuf_unittest::ForeignEnumLite repeated_foreign_enum(int index) const;
  void set_repeated_foreign_enum(int index, ::protobuf_unittest::ForeignEnumLite value);
  void add_repeated_foreign_enum(::protobuf_unittest::ForeignEnumLite value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_foreign_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_foreign_enum();

  // repeated .protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
  int repeated_import_enum_size() const;
  void clear_repeated_import_enum();
  ::protobuf_unittest_import::ImportEnumLite repeated_import_enum(int index) const;
  void set_repeated_import_enum(int index, ::protobuf_unittest_import::ImportEnumLite value);
  void add_repeated_import_enum(::protobuf_unittest_import::ImportEnumLite value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_import_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_import_enum();

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  int repeated_string_piece_size() const;
  void clear_repeated_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& repeated_string_piece(int index) const;
  std::string* mutable_repeated_string_piece(int index);
  void set_repeated_string_piece(int index, const std::string& value);
  void set_repeated_string_piece(int index, std::string&& value);
  void set_repeated_string_piece(int index, const char* value);
  void set_repeated_string_piece(int index, const char* value, size_t size);
  std::string* add_repeated_string_piece();
  void add_repeated_string_piece(const std::string& value);
  void add_repeated_string_piece(std::string&& value);
  void add_repeated_string_piece(const char* value);
  void add_repeated_string_piece(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string_piece() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string_piece();
 public:

  // repeated string repeated_cord = 55 [ctype = CORD];
  int repeated_cord_size() const;
  void clear_repeated_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& repeated_cord(int index) const;
  std::string* mutable_repeated_cord(int index);
  void set_repeated_cord(int index, const std::string& value);
  void set_repeated_cord(int index, std::string&& value);
  void set_repeated_cord(int index, const char* value);
  void set_repeated_cord(int index, const char* value, size_t size);
  std::string* add_repeated_cord();
  void add_repeated_cord(const std::string& value);
  void add_repeated_cord(std::string&& value);
  void add_repeated_cord(const char* value);
  void add_repeated_cord(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_cord() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_cord();
 public:

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57 [lazy = true];
  int repeated_lazy_message_size() const;
  void clear_repeated_lazy_message();
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* mutable_repeated_lazy_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage >*
      mutable_repeated_lazy_message();
  const ::protobuf_unittest::TestAllTypesLite_NestedMessage& repeated_lazy_message(int index) const;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* add_repeated_lazy_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage >&
      repeated_lazy_message() const;

  // optional string optional_string = 14;
  bool has_optional_string() const;
  void clear_optional_string();
  const std::string& optional_string() const;
  void set_optional_string(const std::string& value);
  void set_optional_string(std::string&& value);
  void set_optional_string(const char* value);
  void set_optional_string(const char* value, size_t size);
  std::string* mutable_optional_string();
  std::string* release_optional_string();
  void set_allocated_optional_string(std::string* optional_string);

  // optional bytes optional_bytes = 15;
  bool has_optional_bytes() const;
  void clear_optional_bytes();
  const std::string& optional_bytes() const;
  void set_optional_bytes(const std::string& value);
  void set_optional_bytes(std::string&& value);
  void set_optional_bytes(const char* value);
  void set_optional_bytes(const void* value, size_t size);
  std::string* mutable_optional_bytes();
  std::string* release_optional_bytes();
  void set_allocated_optional_bytes(std::string* optional_bytes);

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  bool has_optional_string_piece() const;
  void clear_optional_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& optional_string_piece() const;
  void set_optional_string_piece(const std::string& value);
  void set_optional_string_piece(std::string&& value);
  void set_optional_string_piece(const char* value);
  void set_optional_string_piece(const char* value, size_t size);
  std::string* mutable_optional_string_piece();
  std::string* release_optional_string_piece();
  void set_allocated_optional_string_piece(std::string* optional_string_piece);
 public:

  // optional string optional_cord = 25 [ctype = CORD];
  bool has_optional_cord() const;
  void clear_optional_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& optional_cord() const;
  void set_optional_cord(const std::string& value);
  void set_optional_cord(std::string&& value);
  void set_optional_cord(const char* value);
  void set_optional_cord(const char* value, size_t size);
  std::string* mutable_optional_cord();
  std::string* release_optional_cord();
  void set_allocated_optional_cord(std::string* optional_cord);
 public:

  // optional string default_string = 74 [default = "hello"];
  bool has_default_string() const;
  void clear_default_string();
  const std::string& default_string() const;
  void set_default_string(const std::string& value);
  void set_default_string(std::string&& value);
  void set_default_string(const char* value);
  void set_default_string(const char* value, size_t size);
  std::string* mutable_default_string();
  std::string* release_default_string();
  void set_allocated_default_string(std::string* default_string);

  // optional bytes default_bytes = 75 [default = "world"];
  bool has_default_bytes() const;
  void clear_default_bytes();
  const std::string& default_bytes() const;
  void set_default_bytes(const std::string& value);
  void set_default_bytes(std::string&& value);
  void set_default_bytes(const char* value);
  void set_default_bytes(const void* value, size_t size);
  std::string* mutable_default_bytes();
  std::string* release_default_bytes();
  void set_allocated_default_bytes(std::string* default_bytes);

  // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
  bool has_default_string_piece() const;
  void clear_default_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& default_string_piece() const;
  void set_default_string_piece(const std::string& value);
  void set_default_string_piece(std::string&& value);
  void set_default_string_piece(const char* value);
  void set_default_string_piece(const char* value, size_t size);
  std::string* mutable_default_string_piece();
  std::string* release_default_string_piece();
  void set_allocated_default_string_piece(std::string* default_string_piece);
 public:

  // optional string default_cord = 85 [default = "123", ctype = CORD];
  bool has_default_cord() const;
  void clear_default_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& default_cord() const;
  void set_default_cord(const std::string& value);
  void set_default_cord(std::string&& value);
  void set_default_cord(const char* value);
  void set_default_cord(const char* value, size_t size);
  std::string* mutable_default_cord();
  std::string* release_default_cord();
  void set_allocated_default_cord(std::string* default_cord);
 public:

  // optional group OptionalGroup = 16 { ... };
  bool has_optionalgroup() const;
  void clear_optionalgroup();
  const ::protobuf_unittest::TestAllTypesLite_OptionalGroup& optionalgroup() const;
  ::protobuf_unittest::TestAllTypesLite_OptionalGroup* release_optionalgroup();
  ::protobuf_unittest::TestAllTypesLite_OptionalGroup* mutable_optionalgroup();
  void set_allocated_optionalgroup(::protobuf_unittest::TestAllTypesLite_OptionalGroup* optionalgroup);

  // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
  bool has_optional_nested_message() const;
  void clear_optional_nested_message();
  const ::protobuf_unittest::TestAllTypesLite_NestedMessage& optional_nested_message() const;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* release_optional_nested_message();
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* mutable_optional_nested_message();
  void set_allocated_optional_nested_message(::protobuf_unittest::TestAllTypesLite_NestedMessage* optional_nested_message);

  // optional .protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
  bool has_optional_foreign_message() const;
  void clear_optional_foreign_message();
  const ::protobuf_unittest::ForeignMessageLite& optional_foreign_message() const;
  ::protobuf_unittest::ForeignMessageLite* release_optional_foreign_message();
  ::protobuf_unittest::ForeignMessageLite* mutable_optional_foreign_message();
  void set_allocated_optional_foreign_message(::protobuf_unittest::ForeignMessageLite* optional_foreign_message);

  // optional .protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
  bool has_optional_import_message() const;
  void clear_optional_import_message();
  const ::protobuf_unittest_import::ImportMessageLite& optional_import_message() const;
  ::protobuf_unittest_import::ImportMessageLite* release_optional_import_message();
  ::protobuf_unittest_import::ImportMessageLite* mutable_optional_import_message();
  void set_allocated_optional_import_message(::protobuf_unittest_import::ImportMessageLite* optional_import_message);

  // optional .protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
  bool has_optional_public_import_message() const;
  void clear_optional_public_import_message();
  const ::protobuf_unittest_import::PublicImportMessageLite& optional_public_import_message() const;
  ::protobuf_unittest_import::PublicImportMessageLite* release_optional_public_import_message();
  ::protobuf_unittest_import::PublicImportMessageLite* mutable_optional_public_import_message();
  void set_allocated_optional_public_import_message(::protobuf_unittest_import::PublicImportMessageLite* optional_public_import_message);

  // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27 [lazy = true];
  bool has_optional_lazy_message() const;
  void clear_optional_lazy_message();
  const ::protobuf_unittest::TestAllTypesLite_NestedMessage& optional_lazy_message() const;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* release_optional_lazy_message();
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* mutable_optional_lazy_message();
  void set_allocated_optional_lazy_message(::protobuf_unittest::TestAllTypesLite_NestedMessage* optional_lazy_message);

  // optional int64 optional_int64 = 2;
  bool has_optional_int64() const;
  void clear_optional_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 optional_int64() const;
  void set_optional_int64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 optional_int32 = 1;
  bool has_optional_int32() const;
  void clear_optional_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 optional_int32() const;
  void set_optional_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 optional_uint32 = 3;
  bool has_optional_uint32() const;
  void clear_optional_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 optional_uint32() const;
  void set_optional_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 optional_uint64 = 4;
  bool has_optional_uint64() const;
  void clear_optional_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 optional_uint64() const;
  void set_optional_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional sint64 optional_sint64 = 6;
  bool has_optional_sint64() const;
  void clear_optional_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 optional_sint64() const;
  void set_optional_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional sint32 optional_sint32 = 5;
  bool has_optional_sint32() const;
  void clear_optional_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 optional_sint32() const;
  void set_optional_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional fixed32 optional_fixed32 = 7;
  bool has_optional_fixed32() const;
  void clear_optional_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 optional_fixed32() const;
  void set_optional_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed64 optional_fixed64 = 8;
  bool has_optional_fixed64() const;
  void clear_optional_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 optional_fixed64() const;
  void set_optional_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional sfixed64 optional_sfixed64 = 10;
  bool has_optional_sfixed64() const;
  void clear_optional_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 optional_sfixed64() const;
  void set_optional_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional sfixed32 optional_sfixed32 = 9;
  bool has_optional_sfixed32() const;
  void clear_optional_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 optional_sfixed32() const;
  void set_optional_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float optional_float = 11;
  bool has_optional_float() const;
  void clear_optional_float();
  float optional_float() const;
  void set_optional_float(float value);

  // optional double optional_double = 12;
  bool has_optional_double() const;
  void clear_optional_double();
  double optional_double() const;
  void set_optional_double(double value);

  // optional bool optional_bool = 13;
  bool has_optional_bool() const;
  void clear_optional_bool();
  bool optional_bool() const;
  void set_optional_bool(bool value);

  // optional int32 deceptively_named_list = 116;
  bool has_deceptively_named_list() const;
  void clear_deceptively_named_list();
  ::PROTOBUF_NAMESPACE_ID::int32 deceptively_named_list() const;
  void set_deceptively_named_list(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .protobuf_unittest_import.ImportEnumLite default_import_enum = 83 [default = IMPORT_LITE_BAR];
  bool has_default_import_enum() const;
  void clear_default_import_enum();
  ::protobuf_unittest_import::ImportEnumLite default_import_enum() const;
  void set_default_import_enum(::protobuf_unittest_import::ImportEnumLite value);

  // optional .protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
  bool has_optional_nested_enum() const;
  void clear_optional_nested_enum();
  ::protobuf_unittest::TestAllTypesLite_NestedEnum optional_nested_enum() const;
  void set_optional_nested_enum(::protobuf_unittest::TestAllTypesLite_NestedEnum value);

  // optional .protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
  bool has_optional_foreign_enum() const;
  void clear_optional_foreign_enum();
  ::protobuf_unittest::ForeignEnumLite optional_foreign_enum() const;
  void set_optional_foreign_enum(::protobuf_unittest::ForeignEnumLite value);

  // optional .protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
  bool has_optional_import_enum() const;
  void clear_optional_import_enum();
  ::protobuf_unittest_import::ImportEnumLite optional_import_enum() const;
  void set_optional_import_enum(::protobuf_unittest_import::ImportEnumLite value);

  // optional int32 default_int32 = 61 [default = 41];
  bool has_default_int32() const;
  void clear_default_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 default_int32() const;
  void set_default_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 default_int64 = 62 [default = 42];
  bool has_default_int64() const;
  void clear_default_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 default_int64() const;
  void set_default_int64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint64 default_uint64 = 64 [default = 44];
  bool has_default_uint64() const;
  void clear_default_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 default_uint64() const;
  void set_default_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 default_uint32 = 63 [default = 43];
  bool has_default_uint32() const;
  void clear_default_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_uint32() const;
  void set_default_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional sint32 default_sint32 = 65 [default = -45];
  bool has_default_sint32() const;
  void clear_default_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 default_sint32() const;
  void set_default_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint64 default_sint64 = 66 [default = 46];
  bool has_default_sint64() const;
  void clear_default_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 default_sint64() const;
  void set_default_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional fixed64 default_fixed64 = 68 [default = 48];
  bool has_default_fixed64() const;
  void clear_default_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 default_fixed64() const;
  void set_default_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional fixed32 default_fixed32 = 67 [default = 47];
  bool has_default_fixed32() const;
  void clear_default_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_fixed32() const;
  void set_default_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional sfixed32 default_sfixed32 = 69 [default = 49];
  bool has_default_sfixed32() const;
  void clear_default_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 default_sfixed32() const;
  void set_default_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sfixed64 default_sfixed64 = 70 [default = -50];
  bool has_default_sfixed64() const;
  void clear_default_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 default_sfixed64() const;
  void set_default_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double default_double = 72 [default = 52000];
  bool has_default_double() const;
  void clear_default_double();
  double default_double() const;
  void set_default_double(double value);

  // optional float default_float = 71 [default = 51.5];
  bool has_default_float() const;
  void clear_default_float();
  float default_float() const;
  void set_default_float(float value);

  // optional bool default_bool = 73 [default = true];
  bool has_default_bool() const;
  void clear_default_bool();
  bool default_bool() const;
  void set_default_bool(bool value);

  // optional .protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81 [default = BAR];
  bool has_default_nested_enum() const;
  void clear_default_nested_enum();
  ::protobuf_unittest::TestAllTypesLite_NestedEnum default_nested_enum() const;
  void set_default_nested_enum(::protobuf_unittest::TestAllTypesLite_NestedEnum value);

  // optional .protobuf_unittest.ForeignEnumLite default_foreign_enum = 82 [default = FOREIGN_LITE_BAR];
  bool has_default_foreign_enum() const;
  void clear_default_foreign_enum();
  ::protobuf_unittest::ForeignEnumLite default_foreign_enum() const;
  void set_default_foreign_enum(::protobuf_unittest::ForeignEnumLite value);

  // optional uint32 oneof_uint32 = 111;
  bool has_oneof_uint32() const;
  void clear_oneof_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32() const;
  void set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .protobuf_unittest.TestAllTypesLite.NestedMessage oneof_nested_message = 112;
  bool has_oneof_nested_message() const;
  void clear_oneof_nested_message();
  const ::protobuf_unittest::TestAllTypesLite_NestedMessage& oneof_nested_message() const;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* release_oneof_nested_message();
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* mutable_oneof_nested_message();
  void set_allocated_oneof_nested_message(::protobuf_unittest::TestAllTypesLite_NestedMessage* oneof_nested_message);

  // optional string oneof_string = 113;
  bool has_oneof_string() const;
  void clear_oneof_string();
  const std::string& oneof_string() const;
  void set_oneof_string(const std::string& value);
  void set_oneof_string(std::string&& value);
  void set_oneof_string(const char* value);
  void set_oneof_string(const char* value, size_t size);
  std::string* mutable_oneof_string();
  std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* oneof_string);

  // optional bytes oneof_bytes = 114;
  bool has_oneof_bytes() const;
  void clear_oneof_bytes();
  const std::string& oneof_bytes() const;
  void set_oneof_bytes(const std::string& value);
  void set_oneof_bytes(std::string&& value);
  void set_oneof_bytes(const char* value);
  void set_oneof_bytes(const void* value, size_t size);
  std::string* mutable_oneof_bytes();
  std::string* release_oneof_bytes();
  void set_allocated_oneof_bytes(std::string* oneof_bytes);

  // optional .protobuf_unittest.TestAllTypesLite.NestedMessage oneof_lazy_nested_message = 115 [lazy = true];
  bool has_oneof_lazy_nested_message() const;
  void clear_oneof_lazy_nested_message();
  const ::protobuf_unittest::TestAllTypesLite_NestedMessage& oneof_lazy_nested_message() const;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* release_oneof_lazy_nested_message();
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* mutable_oneof_lazy_nested_message();
  void set_allocated_oneof_lazy_nested_message(::protobuf_unittest::TestAllTypesLite_NestedMessage* oneof_lazy_nested_message);

  void clear_oneof_field();
  OneofFieldCase oneof_field_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllTypesLite)
 private:
  class _Internal;
  void set_has_oneof_uint32();
  void set_has_oneof_nested_message();
  void set_has_oneof_string();
  void set_has_oneof_bytes();
  void set_has_oneof_lazy_nested_message();

  inline bool has_oneof_field() const;
  inline void clear_has_oneof_field();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > repeated_int32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > repeated_int64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > repeated_uint32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > repeated_uint64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > repeated_sint32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > repeated_sint64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > repeated_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > repeated_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > repeated_sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > repeated_sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > repeated_float_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > repeated_double_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > repeated_bool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_bytes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_RepeatedGroup > repeatedgroup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage > repeated_nested_message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessageLite > repeated_foreign_message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessageLite > repeated_import_message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_nested_enum_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_foreign_enum_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_import_enum_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_piece_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_cord_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage > repeated_lazy_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_piece_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_cord_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_default_string_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_string_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_default_bytes_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_bytes_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_default_string_piece_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_string_piece_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_default_cord_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_cord_;
  ::protobuf_unittest::TestAllTypesLite_OptionalGroup* optionalgroup_;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* optional_nested_message_;
  ::protobuf_unittest::ForeignMessageLite* optional_foreign_message_;
  ::protobuf_unittest_import::ImportMessageLite* optional_import_message_;
  ::protobuf_unittest_import::PublicImportMessageLite* optional_public_import_message_;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* optional_lazy_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 optional_int64_;
  ::PROTOBUF_NAMESPACE_ID::int32 optional_int32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 optional_uint32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 optional_uint64_;
  ::PROTOBUF_NAMESPACE_ID::int64 optional_sint64_;
  ::PROTOBUF_NAMESPACE_ID::int32 optional_sint32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 optional_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 optional_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::int64 optional_sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::int32 optional_sfixed32_;
  float optional_float_;
  double optional_double_;
  bool optional_bool_;
  ::PROTOBUF_NAMESPACE_ID::int32 deceptively_named_list_;
  int default_import_enum_;
  int optional_nested_enum_;
  int optional_foreign_enum_;
  int optional_import_enum_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_int32_;
  ::PROTOBUF_NAMESPACE_ID::int64 default_int64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 default_uint64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_uint32_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_sint32_;
  ::PROTOBUF_NAMESPACE_ID::int64 default_sint64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 default_fixed64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::int64 default_sfixed64_;
  double default_double_;
  float default_float_;
  bool default_bool_;
  int default_nested_enum_;
  int default_foreign_enum_;
  union OneofFieldUnion {
    OneofFieldUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32_;
    ::protobuf_unittest::TestAllTypesLite_NestedMessage* oneof_nested_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
    ::protobuf_unittest::TestAllTypesLite_NestedMessage* oneof_lazy_nested_message_;
  } oneof_field_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class ForeignMessageLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.ForeignMessageLite) */ {
 public:
  ForeignMessageLite();
  virtual ~ForeignMessageLite();

  ForeignMessageLite(const ForeignMessageLite& from);
  ForeignMessageLite(ForeignMessageLite&& from) noexcept
    : ForeignMessageLite() {
    *this = ::std::move(from);
  }

  inline ForeignMessageLite& operator=(const ForeignMessageLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForeignMessageLite& operator=(ForeignMessageLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ForeignMessageLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForeignMessageLite* internal_default_instance() {
    return reinterpret_cast<const ForeignMessageLite*>(
               &_ForeignMessageLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ForeignMessageLite& a, ForeignMessageLite& b) {
    a.Swap(&b);
  }
  inline void Swap(ForeignMessageLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForeignMessageLite* New() const final {
    return CreateMaybeMessage<ForeignMessageLite>(nullptr);
  }

  ForeignMessageLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForeignMessageLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ForeignMessageLite& from);
  void MergeFrom(const ForeignMessageLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ForeignMessageLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.ForeignMessageLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 1,
  };
  // optional int32 c = 1;
  bool has_c() const;
  void clear_c();
  ::PROTOBUF_NAMESPACE_ID::int32 c() const;
  void set_c(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.ForeignMessageLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 c_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestPackedTypesLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestPackedTypesLite) */ {
 public:
  TestPackedTypesLite();
  virtual ~TestPackedTypesLite();

  TestPackedTypesLite(const TestPackedTypesLite& from);
  TestPackedTypesLite(TestPackedTypesLite&& from) noexcept
    : TestPackedTypesLite() {
    *this = ::std::move(from);
  }

  inline TestPackedTypesLite& operator=(const TestPackedTypesLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPackedTypesLite& operator=(TestPackedTypesLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestPackedTypesLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestPackedTypesLite* internal_default_instance() {
    return reinterpret_cast<const TestPackedTypesLite*>(
               &_TestPackedTypesLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TestPackedTypesLite& a, TestPackedTypesLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPackedTypesLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestPackedTypesLite* New() const final {
    return CreateMaybeMessage<TestPackedTypesLite>(nullptr);
  }

  TestPackedTypesLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestPackedTypesLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestPackedTypesLite& from);
  void MergeFrom(const TestPackedTypesLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestPackedTypesLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestPackedTypesLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedInt32FieldNumber = 90,
    kPackedInt64FieldNumber = 91,
    kPackedUint32FieldNumber = 92,
    kPackedUint64FieldNumber = 93,
    kPackedSint32FieldNumber = 94,
    kPackedSint64FieldNumber = 95,
    kPackedFixed32FieldNumber = 96,
    kPackedFixed64FieldNumber = 97,
    kPackedSfixed32FieldNumber = 98,
    kPackedSfixed64FieldNumber = 99,
    kPackedFloatFieldNumber = 100,
    kPackedDoubleFieldNumber = 101,
    kPackedBoolFieldNumber = 102,
    kPackedEnumFieldNumber = 103,
  };
  // repeated int32 packed_int32 = 90 [packed = true];
  int packed_int32_size() const;
  void clear_packed_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 packed_int32(int index) const;
  void set_packed_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_packed_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      packed_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_packed_int32();

  // repeated int64 packed_int64 = 91 [packed = true];
  int packed_int64_size() const;
  void clear_packed_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 packed_int64(int index) const;
  void set_packed_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_packed_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      packed_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_packed_int64();

  // repeated uint32 packed_uint32 = 92 [packed = true];
  int packed_uint32_size() const;
  void clear_packed_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 packed_uint32(int index) const;
  void set_packed_uint32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_packed_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      packed_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_packed_uint32();

  // repeated uint64 packed_uint64 = 93 [packed = true];
  int packed_uint64_size() const;
  void clear_packed_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 packed_uint64(int index) const;
  void set_packed_uint64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_packed_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      packed_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_packed_uint64();

  // repeated sint32 packed_sint32 = 94 [packed = true];
  int packed_sint32_size() const;
  void clear_packed_sint32();
  ::PROTOBUF_NAMESPACE_ID::int32 packed_sint32(int index) const;
  void set_packed_sint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_packed_sint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      packed_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_packed_sint32();

  // repeated sint64 packed_sint64 = 95 [packed = true];
  int packed_sint64_size() const;
  void clear_packed_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 packed_sint64(int index) const;
  void set_packed_sint64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_packed_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      packed_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_packed_sint64();

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  int packed_fixed32_size() const;
  void clear_packed_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 packed_fixed32(int index) const;
  void set_packed_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      packed_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_packed_fixed32();

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  int packed_fixed64_size() const;
  void clear_packed_fixed64();
  ::PROTOBUF_NAMESPACE_ID::uint64 packed_fixed64(int index) const;
  void set_packed_fixed64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      packed_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_packed_fixed64();

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  int packed_sfixed32_size() const;
  void clear_packed_sfixed32();
  ::PROTOBUF_NAMESPACE_ID::int32 packed_sfixed32(int index) const;
  void set_packed_sfixed32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      packed_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_packed_sfixed32();

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  int packed_sfixed64_size() const;
  void clear_packed_sfixed64();
  ::PROTOBUF_NAMESPACE_ID::int64 packed_sfixed64(int index) const;
  void set_packed_sfixed64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      packed_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_packed_sfixed64();

  // repeated float packed_float = 100 [packed = true];
  int packed_float_size() const;
  void clear_packed_float();
  float packed_float(int index) const;
  void set_packed_float(int index, float value);
  void add_packed_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      packed_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_packed_float();

  // repeated double packed_double = 101 [packed = true];
  int packed_double_size() const;
  void clear_packed_double();
  double packed_double(int index) const;
  void set_packed_double(int index, double value);
  void add_packed_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      packed_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_packed_double();

  // repeated bool packed_bool = 102 [packed = true];
  int packed_bool_size() const;
  void clear_packed_bool();
  bool packed_bool(int index) const;
  void set_packed_bool(int index, bool value);
  void add_packed_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      packed_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_packed_bool();

  // repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
  int packed_enum_size() const;
  void clear_packed_enum();
  ::protobuf_unittest::ForeignEnumLite packed_enum(int index) const;
  void set_packed_enum(int index, ::protobuf_unittest::ForeignEnumLite value);
  void add_packed_enum(::protobuf_unittest::ForeignEnumLite value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& packed_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_packed_enum();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestPackedTypesLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > packed_int32_;
  mutable std::atomic<int> _packed_int32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > packed_int64_;
  mutable std::atomic<int> _packed_int64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > packed_uint32_;
  mutable std::atomic<int> _packed_uint32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > packed_uint64_;
  mutable std::atomic<int> _packed_uint64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > packed_sint32_;
  mutable std::atomic<int> _packed_sint32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > packed_sint64_;
  mutable std::atomic<int> _packed_sint64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > packed_fixed32_;
  mutable std::atomic<int> _packed_fixed32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > packed_fixed64_;
  mutable std::atomic<int> _packed_fixed64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > packed_sfixed32_;
  mutable std::atomic<int> _packed_sfixed32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > packed_sfixed64_;
  mutable std::atomic<int> _packed_sfixed64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > packed_float_;
  mutable std::atomic<int> _packed_float_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > packed_double_;
  mutable std::atomic<int> _packed_double_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > packed_bool_;
  mutable std::atomic<int> _packed_bool_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> packed_enum_;
  mutable std::atomic<int> _packed_enum_cached_byte_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestAllExtensionsLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestAllExtensionsLite) */ {
 public:
  TestAllExtensionsLite();
  virtual ~TestAllExtensionsLite();

  TestAllExtensionsLite(const TestAllExtensionsLite& from);
  TestAllExtensionsLite(TestAllExtensionsLite&& from) noexcept
    : TestAllExtensionsLite() {
    *this = ::std::move(from);
  }

  inline TestAllExtensionsLite& operator=(const TestAllExtensionsLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllExtensionsLite& operator=(TestAllExtensionsLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestAllExtensionsLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestAllExtensionsLite* internal_default_instance() {
    return reinterpret_cast<const TestAllExtensionsLite*>(
               &_TestAllExtensionsLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TestAllExtensionsLite& a, TestAllExtensionsLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllExtensionsLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestAllExtensionsLite* New() const final {
    return CreateMaybeMessage<TestAllExtensionsLite>(nullptr);
  }

  TestAllExtensionsLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestAllExtensionsLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestAllExtensionsLite& from);
  void MergeFrom(const TestAllExtensionsLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestAllExtensionsLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestAllExtensionsLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestAllExtensionsLite)
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestAllExtensionsLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class OptionalGroup_extension_lite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.OptionalGroup_extension_lite) */ {
 public:
  OptionalGroup_extension_lite();
  virtual ~OptionalGroup_extension_lite();

  OptionalGroup_extension_lite(const OptionalGroup_extension_lite& from);
  OptionalGroup_extension_lite(OptionalGroup_extension_lite&& from) noexcept
    : OptionalGroup_extension_lite() {
    *this = ::std::move(from);
  }

  inline OptionalGroup_extension_lite& operator=(const OptionalGroup_extension_lite& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalGroup_extension_lite& operator=(OptionalGroup_extension_lite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OptionalGroup_extension_lite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionalGroup_extension_lite* internal_default_instance() {
    return reinterpret_cast<const OptionalGroup_extension_lite*>(
               &_OptionalGroup_extension_lite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OptionalGroup_extension_lite& a, OptionalGroup_extension_lite& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalGroup_extension_lite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionalGroup_extension_lite* New() const final {
    return CreateMaybeMessage<OptionalGroup_extension_lite>(nullptr);
  }

  OptionalGroup_extension_lite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionalGroup_extension_lite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OptionalGroup_extension_lite& from);
  void MergeFrom(const OptionalGroup_extension_lite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptionalGroup_extension_lite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.OptionalGroup_extension_lite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 17,
  };
  // optional int32 a = 17;
  bool has_a() const;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.OptionalGroup_extension_lite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class RepeatedGroup_extension_lite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.RepeatedGroup_extension_lite) */ {
 public:
  RepeatedGroup_extension_lite();
  virtual ~RepeatedGroup_extension_lite();

  RepeatedGroup_extension_lite(const RepeatedGroup_extension_lite& from);
  RepeatedGroup_extension_lite(RepeatedGroup_extension_lite&& from) noexcept
    : RepeatedGroup_extension_lite() {
    *this = ::std::move(from);
  }

  inline RepeatedGroup_extension_lite& operator=(const RepeatedGroup_extension_lite& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedGroup_extension_lite& operator=(RepeatedGroup_extension_lite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RepeatedGroup_extension_lite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedGroup_extension_lite* internal_default_instance() {
    return reinterpret_cast<const RepeatedGroup_extension_lite*>(
               &_RepeatedGroup_extension_lite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RepeatedGroup_extension_lite& a, RepeatedGroup_extension_lite& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedGroup_extension_lite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedGroup_extension_lite* New() const final {
    return CreateMaybeMessage<RepeatedGroup_extension_lite>(nullptr);
  }

  RepeatedGroup_extension_lite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedGroup_extension_lite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RepeatedGroup_extension_lite& from);
  void MergeFrom(const RepeatedGroup_extension_lite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RepeatedGroup_extension_lite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.RepeatedGroup_extension_lite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 47,
  };
  // optional int32 a = 47;
  bool has_a() const;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.RepeatedGroup_extension_lite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestPackedExtensionsLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestPackedExtensionsLite) */ {
 public:
  TestPackedExtensionsLite();
  virtual ~TestPackedExtensionsLite();

  TestPackedExtensionsLite(const TestPackedExtensionsLite& from);
  TestPackedExtensionsLite(TestPackedExtensionsLite&& from) noexcept
    : TestPackedExtensionsLite() {
    *this = ::std::move(from);
  }

  inline TestPackedExtensionsLite& operator=(const TestPackedExtensionsLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPackedExtensionsLite& operator=(TestPackedExtensionsLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestPackedExtensionsLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestPackedExtensionsLite* internal_default_instance() {
    return reinterpret_cast<const TestPackedExtensionsLite*>(
               &_TestPackedExtensionsLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TestPackedExtensionsLite& a, TestPackedExtensionsLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPackedExtensionsLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestPackedExtensionsLite* New() const final {
    return CreateMaybeMessage<TestPackedExtensionsLite>(nullptr);
  }

  TestPackedExtensionsLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestPackedExtensionsLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestPackedExtensionsLite& from);
  void MergeFrom(const TestPackedExtensionsLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestPackedExtensionsLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestPackedExtensionsLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestPackedExtensionsLite)
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestPackedExtensionsLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestNestedExtensionLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestNestedExtensionLite) */ {
 public:
  TestNestedExtensionLite();
  virtual ~TestNestedExtensionLite();

  TestNestedExtensionLite(const TestNestedExtensionLite& from);
  TestNestedExtensionLite(TestNestedExtensionLite&& from) noexcept
    : TestNestedExtensionLite() {
    *this = ::std::move(from);
  }

  inline TestNestedExtensionLite& operator=(const TestNestedExtensionLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestNestedExtensionLite& operator=(TestNestedExtensionLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestNestedExtensionLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestNestedExtensionLite* internal_default_instance() {
    return reinterpret_cast<const TestNestedExtensionLite*>(
               &_TestNestedExtensionLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TestNestedExtensionLite& a, TestNestedExtensionLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestNestedExtensionLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestNestedExtensionLite* New() const final {
    return CreateMaybeMessage<TestNestedExtensionLite>(nullptr);
  }

  TestNestedExtensionLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestNestedExtensionLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestNestedExtensionLite& from);
  void MergeFrom(const TestNestedExtensionLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestNestedExtensionLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestNestedExtensionLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kNestedExtensionFieldNumber = 12345;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
    nested_extension;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestNestedExtensionLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestDeprecatedLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestDeprecatedLite) */ {
 public:
  TestDeprecatedLite();
  virtual ~TestDeprecatedLite();

  TestDeprecatedLite(const TestDeprecatedLite& from);
  TestDeprecatedLite(TestDeprecatedLite&& from) noexcept
    : TestDeprecatedLite() {
    *this = ::std::move(from);
  }

  inline TestDeprecatedLite& operator=(const TestDeprecatedLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestDeprecatedLite& operator=(TestDeprecatedLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestDeprecatedLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestDeprecatedLite* internal_default_instance() {
    return reinterpret_cast<const TestDeprecatedLite*>(
               &_TestDeprecatedLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TestDeprecatedLite& a, TestDeprecatedLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestDeprecatedLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestDeprecatedLite* New() const final {
    return CreateMaybeMessage<TestDeprecatedLite>(nullptr);
  }

  TestDeprecatedLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestDeprecatedLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestDeprecatedLite& from);
  void MergeFrom(const TestDeprecatedLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestDeprecatedLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestDeprecatedLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedFieldFieldNumber = 1,
  };
  // optional int32 deprecated_field = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_field() const;
  PROTOBUF_DEPRECATED void clear_deprecated_field();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 deprecated_field() const;
  PROTOBUF_DEPRECATED void set_deprecated_field(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestDeprecatedLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 deprecated_field_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMergeLite_RepeatedFieldsGenerator_Group1 :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1) */ {
 public:
  TestParsingMergeLite_RepeatedFieldsGenerator_Group1();
  virtual ~TestParsingMergeLite_RepeatedFieldsGenerator_Group1();

  TestParsingMergeLite_RepeatedFieldsGenerator_Group1(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from);
  TestParsingMergeLite_RepeatedFieldsGenerator_Group1(TestParsingMergeLite_RepeatedFieldsGenerator_Group1&& from) noexcept
    : TestParsingMergeLite_RepeatedFieldsGenerator_Group1() {
    *this = ::std::move(from);
  }

  inline TestParsingMergeLite_RepeatedFieldsGenerator_Group1& operator=(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMergeLite_RepeatedFieldsGenerator_Group1& operator=(TestParsingMergeLite_RepeatedFieldsGenerator_Group1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestParsingMergeLite_RepeatedFieldsGenerator_Group1* internal_default_instance() {
    return reinterpret_cast<const TestParsingMergeLite_RepeatedFieldsGenerator_Group1*>(
               &_TestParsingMergeLite_RepeatedFieldsGenerator_Group1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TestParsingMergeLite_RepeatedFieldsGenerator_Group1& a, TestParsingMergeLite_RepeatedFieldsGenerator_Group1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMergeLite_RepeatedFieldsGenerator_Group1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestParsingMergeLite_RepeatedFieldsGenerator_Group1* New() const final {
    return CreateMaybeMessage<TestParsingMergeLite_RepeatedFieldsGenerator_Group1>(nullptr);
  }

  TestParsingMergeLite_RepeatedFieldsGenerator_Group1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestParsingMergeLite_RepeatedFieldsGenerator_Group1>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from);
  void MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestParsingMergeLite_RepeatedFieldsGenerator_Group1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField1FieldNumber = 11,
  };
  // optional .protobuf_unittest.TestAllTypesLite field1 = 11;
  bool has_field1() const;
  void clear_field1();
  const ::protobuf_unittest::TestAllTypesLite& field1() const;
  ::protobuf_unittest::TestAllTypesLite* release_field1();
  ::protobuf_unittest::TestAllTypesLite* mutable_field1();
  void set_allocated_field1(::protobuf_unittest::TestAllTypesLite* field1);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypesLite* field1_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMergeLite_RepeatedFieldsGenerator_Group2 :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2) */ {
 public:
  TestParsingMergeLite_RepeatedFieldsGenerator_Group2();
  virtual ~TestParsingMergeLite_RepeatedFieldsGenerator_Group2();

  TestParsingMergeLite_RepeatedFieldsGenerator_Group2(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from);
  TestParsingMergeLite_RepeatedFieldsGenerator_Group2(TestParsingMergeLite_RepeatedFieldsGenerator_Group2&& from) noexcept
    : TestParsingMergeLite_RepeatedFieldsGenerator_Group2() {
    *this = ::std::move(from);
  }

  inline TestParsingMergeLite_RepeatedFieldsGenerator_Group2& operator=(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMergeLite_RepeatedFieldsGenerator_Group2& operator=(TestParsingMergeLite_RepeatedFieldsGenerator_Group2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestParsingMergeLite_RepeatedFieldsGenerator_Group2* internal_default_instance() {
    return reinterpret_cast<const TestParsingMergeLite_RepeatedFieldsGenerator_Group2*>(
               &_TestParsingMergeLite_RepeatedFieldsGenerator_Group2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TestParsingMergeLite_RepeatedFieldsGenerator_Group2& a, TestParsingMergeLite_RepeatedFieldsGenerator_Group2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMergeLite_RepeatedFieldsGenerator_Group2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestParsingMergeLite_RepeatedFieldsGenerator_Group2* New() const final {
    return CreateMaybeMessage<TestParsingMergeLite_RepeatedFieldsGenerator_Group2>(nullptr);
  }

  TestParsingMergeLite_RepeatedFieldsGenerator_Group2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestParsingMergeLite_RepeatedFieldsGenerator_Group2>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from);
  void MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestParsingMergeLite_RepeatedFieldsGenerator_Group2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kField1FieldNumber = 21,
  };
  // optional .protobuf_unittest.TestAllTypesLite field1 = 21;
  bool has_field1() const;
  void clear_field1();
  const ::protobuf_unittest::TestAllTypesLite& field1() const;
  ::protobuf_unittest::TestAllTypesLite* release_field1();
  ::protobuf_unittest::TestAllTypesLite* mutable_field1();
  void set_allocated_field1(::protobuf_unittest::TestAllTypesLite* field1);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypesLite* field1_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMergeLite_RepeatedFieldsGenerator :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator) */ {
 public:
  TestParsingMergeLite_RepeatedFieldsGenerator();
  virtual ~TestParsingMergeLite_RepeatedFieldsGenerator();

  TestParsingMergeLite_RepeatedFieldsGenerator(const TestParsingMergeLite_RepeatedFieldsGenerator& from);
  TestParsingMergeLite_RepeatedFieldsGenerator(TestParsingMergeLite_RepeatedFieldsGenerator&& from) noexcept
    : TestParsingMergeLite_RepeatedFieldsGenerator() {
    *this = ::std::move(from);
  }

  inline TestParsingMergeLite_RepeatedFieldsGenerator& operator=(const TestParsingMergeLite_RepeatedFieldsGenerator& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMergeLite_RepeatedFieldsGenerator& operator=(TestParsingMergeLite_RepeatedFieldsGenerator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestParsingMergeLite_RepeatedFieldsGenerator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestParsingMergeLite_RepeatedFieldsGenerator* internal_default_instance() {
    return reinterpret_cast<const TestParsingMergeLite_RepeatedFieldsGenerator*>(
               &_TestParsingMergeLite_RepeatedFieldsGenerator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TestParsingMergeLite_RepeatedFieldsGenerator& a, TestParsingMergeLite_RepeatedFieldsGenerator& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMergeLite_RepeatedFieldsGenerator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestParsingMergeLite_RepeatedFieldsGenerator* New() const final {
    return CreateMaybeMessage<TestParsingMergeLite_RepeatedFieldsGenerator>(nullptr);
  }

  TestParsingMergeLite_RepeatedFieldsGenerator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestParsingMergeLite_RepeatedFieldsGenerator>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator& from);
  void MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestParsingMergeLite_RepeatedFieldsGenerator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TestParsingMergeLite_RepeatedFieldsGenerator_Group1 Group1;
  typedef TestParsingMergeLite_RepeatedFieldsGenerator_Group2 Group2;

  // accessors -------------------------------------------------------

  enum : int {
    kField1FieldNumber = 1,
    kField2FieldNumber = 2,
    kField3FieldNumber = 3,
    kGroup1FieldNumber = 10,
    kGroup2FieldNumber = 20,
    kExt1FieldNumber = 1000,
    kExt2FieldNumber = 1001,
  };
  // repeated .protobuf_unittest.TestAllTypesLite field1 = 1;
  int field1_size() const;
  void clear_field1();
  ::protobuf_unittest::TestAllTypesLite* mutable_field1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
      mutable_field1();
  const ::protobuf_unittest::TestAllTypesLite& field1(int index) const;
  ::protobuf_unittest::TestAllTypesLite* add_field1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
      field1() const;

  // repeated .protobuf_unittest.TestAllTypesLite field2 = 2;
  int field2_size() const;
  void clear_field2();
  ::protobuf_unittest::TestAllTypesLite* mutable_field2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
      mutable_field2();
  const ::protobuf_unittest::TestAllTypesLite& field2(int index) const;
  ::protobuf_unittest::TestAllTypesLite* add_field2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
      field2() const;

  // repeated .protobuf_unittest.TestAllTypesLite field3 = 3;
  int field3_size() const;
  void clear_field3();
  ::protobuf_unittest::TestAllTypesLite* mutable_field3(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
      mutable_field3();
  const ::protobuf_unittest::TestAllTypesLite& field3(int index) const;
  ::protobuf_unittest::TestAllTypesLite* add_field3();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
      field3() const;

  // repeated group Group1 = 10 { ... };
  int group1_size() const;
  void clear_group1();
  ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1* mutable_group1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1 >*
      mutable_group1();
  const ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1& group1(int index) const;
  ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1* add_group1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1 >&
      group1() const;

  // repeated group Group2 = 20 { ... };
  int group2_size() const;
  void clear_group2();
  ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2* mutable_group2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2 >*
      mutable_group2();
  const ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2& group2(int index) const;
  ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2* add_group2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2 >&
      group2() const;

  // repeated .protobuf_unittest.TestAllTypesLite ext1 = 1000;
  int ext1_size() const;
  void clear_ext1();
  ::protobuf_unittest::TestAllTypesLite* mutable_ext1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
      mutable_ext1();
  const ::protobuf_unittest::TestAllTypesLite& ext1(int index) const;
  ::protobuf_unittest::TestAllTypesLite* add_ext1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
      ext1() const;

  // repeated .protobuf_unittest.TestAllTypesLite ext2 = 1001;
  int ext2_size() const;
  void clear_ext2();
  ::protobuf_unittest::TestAllTypesLite* mutable_ext2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
      mutable_ext2();
  const ::protobuf_unittest::TestAllTypesLite& ext2(int index) const;
  ::protobuf_unittest::TestAllTypesLite* add_ext2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
      ext2() const;

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite > field1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite > field2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite > field3_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1 > group1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2 > group2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite > ext1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite > ext2_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMergeLite_OptionalGroup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMergeLite.OptionalGroup) */ {
 public:
  TestParsingMergeLite_OptionalGroup();
  virtual ~TestParsingMergeLite_OptionalGroup();

  TestParsingMergeLite_OptionalGroup(const TestParsingMergeLite_OptionalGroup& from);
  TestParsingMergeLite_OptionalGroup(TestParsingMergeLite_OptionalGroup&& from) noexcept
    : TestParsingMergeLite_OptionalGroup() {
    *this = ::std::move(from);
  }

  inline TestParsingMergeLite_OptionalGroup& operator=(const TestParsingMergeLite_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMergeLite_OptionalGroup& operator=(TestParsingMergeLite_OptionalGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestParsingMergeLite_OptionalGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestParsingMergeLite_OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const TestParsingMergeLite_OptionalGroup*>(
               &_TestParsingMergeLite_OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TestParsingMergeLite_OptionalGroup& a, TestParsingMergeLite_OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMergeLite_OptionalGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestParsingMergeLite_OptionalGroup* New() const final {
    return CreateMaybeMessage<TestParsingMergeLite_OptionalGroup>(nullptr);
  }

  TestParsingMergeLite_OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestParsingMergeLite_OptionalGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestParsingMergeLite_OptionalGroup& from);
  void MergeFrom(const TestParsingMergeLite_OptionalGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestParsingMergeLite_OptionalGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMergeLite.OptionalGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalGroupAllTypesFieldNumber = 11,
  };
  // optional .protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
  bool has_optional_group_all_types() const;
  void clear_optional_group_all_types();
  const ::protobuf_unittest::TestAllTypesLite& optional_group_all_types() const;
  ::protobuf_unittest::TestAllTypesLite* release_optional_group_all_types();
  ::protobuf_unittest::TestAllTypesLite* mutable_optional_group_all_types();
  void set_allocated_optional_group_all_types(::protobuf_unittest::TestAllTypesLite* optional_group_all_types);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMergeLite.OptionalGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypesLite* optional_group_all_types_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMergeLite_RepeatedGroup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMergeLite.RepeatedGroup) */ {
 public:
  TestParsingMergeLite_RepeatedGroup();
  virtual ~TestParsingMergeLite_RepeatedGroup();

  TestParsingMergeLite_RepeatedGroup(const TestParsingMergeLite_RepeatedGroup& from);
  TestParsingMergeLite_RepeatedGroup(TestParsingMergeLite_RepeatedGroup&& from) noexcept
    : TestParsingMergeLite_RepeatedGroup() {
    *this = ::std::move(from);
  }

  inline TestParsingMergeLite_RepeatedGroup& operator=(const TestParsingMergeLite_RepeatedGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMergeLite_RepeatedGroup& operator=(TestParsingMergeLite_RepeatedGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestParsingMergeLite_RepeatedGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestParsingMergeLite_RepeatedGroup* internal_default_instance() {
    return reinterpret_cast<const TestParsingMergeLite_RepeatedGroup*>(
               &_TestParsingMergeLite_RepeatedGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TestParsingMergeLite_RepeatedGroup& a, TestParsingMergeLite_RepeatedGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMergeLite_RepeatedGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestParsingMergeLite_RepeatedGroup* New() const final {
    return CreateMaybeMessage<TestParsingMergeLite_RepeatedGroup>(nullptr);
  }

  TestParsingMergeLite_RepeatedGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestParsingMergeLite_RepeatedGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestParsingMergeLite_RepeatedGroup& from);
  void MergeFrom(const TestParsingMergeLite_RepeatedGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestParsingMergeLite_RepeatedGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMergeLite.RepeatedGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedGroupAllTypesFieldNumber = 21,
  };
  // optional .protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
  bool has_repeated_group_all_types() const;
  void clear_repeated_group_all_types();
  const ::protobuf_unittest::TestAllTypesLite& repeated_group_all_types() const;
  ::protobuf_unittest::TestAllTypesLite* release_repeated_group_all_types();
  ::protobuf_unittest::TestAllTypesLite* mutable_repeated_group_all_types();
  void set_allocated_repeated_group_all_types(::protobuf_unittest::TestAllTypesLite* repeated_group_all_types);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMergeLite.RepeatedGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protobuf_unittest::TestAllTypesLite* repeated_group_all_types_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestParsingMergeLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestParsingMergeLite) */ {
 public:
  TestParsingMergeLite();
  virtual ~TestParsingMergeLite();

  TestParsingMergeLite(const TestParsingMergeLite& from);
  TestParsingMergeLite(TestParsingMergeLite&& from) noexcept
    : TestParsingMergeLite() {
    *this = ::std::move(from);
  }

  inline TestParsingMergeLite& operator=(const TestParsingMergeLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestParsingMergeLite& operator=(TestParsingMergeLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestParsingMergeLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestParsingMergeLite* internal_default_instance() {
    return reinterpret_cast<const TestParsingMergeLite*>(
               &_TestParsingMergeLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TestParsingMergeLite& a, TestParsingMergeLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestParsingMergeLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestParsingMergeLite* New() const final {
    return CreateMaybeMessage<TestParsingMergeLite>(nullptr);
  }

  TestParsingMergeLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestParsingMergeLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestParsingMergeLite& from);
  void MergeFrom(const TestParsingMergeLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestParsingMergeLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestParsingMergeLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TestParsingMergeLite_RepeatedFieldsGenerator RepeatedFieldsGenerator;
  typedef TestParsingMergeLite_OptionalGroup OptionalGroup;
  typedef TestParsingMergeLite_RepeatedGroup RepeatedGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedAllTypesFieldNumber = 3,
    kRepeatedgroupFieldNumber = 20,
    kRequiredAllTypesFieldNumber = 1,
    kOptionalAllTypesFieldNumber = 2,
    kOptionalgroupFieldNumber = 10,
  };
  // repeated .protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
  int repeated_all_types_size() const;
  void clear_repeated_all_types();
  ::protobuf_unittest::TestAllTypesLite* mutable_repeated_all_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
      mutable_repeated_all_types();
  const ::protobuf_unittest::TestAllTypesLite& repeated_all_types(int index) const;
  ::protobuf_unittest::TestAllTypesLite* add_repeated_all_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
      repeated_all_types() const;

  // repeated group RepeatedGroup = 20 { ... };
  int repeatedgroup_size() const;
  void clear_repeatedgroup();
  ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup* mutable_repeatedgroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup >*
      mutable_repeatedgroup();
  const ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup& repeatedgroup(int index) const;
  ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup* add_repeatedgroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup >&
      repeatedgroup() const;

  // required .protobuf_unittest.TestAllTypesLite required_all_types = 1;
  bool has_required_all_types() const;
  void clear_required_all_types();
  const ::protobuf_unittest::TestAllTypesLite& required_all_types() const;
  ::protobuf_unittest::TestAllTypesLite* release_required_all_types();
  ::protobuf_unittest::TestAllTypesLite* mutable_required_all_types();
  void set_allocated_required_all_types(::protobuf_unittest::TestAllTypesLite* required_all_types);

  // optional .protobuf_unittest.TestAllTypesLite optional_all_types = 2;
  bool has_optional_all_types() const;
  void clear_optional_all_types();
  const ::protobuf_unittest::TestAllTypesLite& optional_all_types() const;
  ::protobuf_unittest::TestAllTypesLite* release_optional_all_types();
  ::protobuf_unittest::TestAllTypesLite* mutable_optional_all_types();
  void set_allocated_optional_all_types(::protobuf_unittest::TestAllTypesLite* optional_all_types);

  // optional group OptionalGroup = 10 { ... };
  bool has_optionalgroup() const;
  void clear_optionalgroup();
  const ::protobuf_unittest::TestParsingMergeLite_OptionalGroup& optionalgroup() const;
  ::protobuf_unittest::TestParsingMergeLite_OptionalGroup* release_optionalgroup();
  ::protobuf_unittest::TestParsingMergeLite_OptionalGroup* mutable_optionalgroup();
  void set_allocated_optionalgroup(::protobuf_unittest::TestParsingMergeLite_OptionalGroup* optionalgroup);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestParsingMergeLite)
  static const int kOptionalExtFieldNumber = 1000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMergeLite,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite >, 11, false >
    optional_ext;
  static const int kRepeatedExtFieldNumber = 1001;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMergeLite,
      ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite >, 11, false >
    repeated_ext;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestParsingMergeLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite > repeated_all_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup > repeatedgroup_;
  ::protobuf_unittest::TestAllTypesLite* required_all_types_;
  ::protobuf_unittest::TestAllTypesLite* optional_all_types_;
  ::protobuf_unittest::TestParsingMergeLite_OptionalGroup* optionalgroup_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestEmptyMessageLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestEmptyMessageLite) */ {
 public:
  TestEmptyMessageLite();
  virtual ~TestEmptyMessageLite();

  TestEmptyMessageLite(const TestEmptyMessageLite& from);
  TestEmptyMessageLite(TestEmptyMessageLite&& from) noexcept
    : TestEmptyMessageLite() {
    *this = ::std::move(from);
  }

  inline TestEmptyMessageLite& operator=(const TestEmptyMessageLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEmptyMessageLite& operator=(TestEmptyMessageLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestEmptyMessageLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestEmptyMessageLite* internal_default_instance() {
    return reinterpret_cast<const TestEmptyMessageLite*>(
               &_TestEmptyMessageLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TestEmptyMessageLite& a, TestEmptyMessageLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEmptyMessageLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestEmptyMessageLite* New() const final {
    return CreateMaybeMessage<TestEmptyMessageLite>(nullptr);
  }

  TestEmptyMessageLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestEmptyMessageLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestEmptyMessageLite& from);
  void MergeFrom(const TestEmptyMessageLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestEmptyMessageLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestEmptyMessageLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEmptyMessageLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestEmptyMessageWithExtensionsLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestEmptyMessageWithExtensionsLite) */ {
 public:
  TestEmptyMessageWithExtensionsLite();
  virtual ~TestEmptyMessageWithExtensionsLite();

  TestEmptyMessageWithExtensionsLite(const TestEmptyMessageWithExtensionsLite& from);
  TestEmptyMessageWithExtensionsLite(TestEmptyMessageWithExtensionsLite&& from) noexcept
    : TestEmptyMessageWithExtensionsLite() {
    *this = ::std::move(from);
  }

  inline TestEmptyMessageWithExtensionsLite& operator=(const TestEmptyMessageWithExtensionsLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEmptyMessageWithExtensionsLite& operator=(TestEmptyMessageWithExtensionsLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestEmptyMessageWithExtensionsLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestEmptyMessageWithExtensionsLite* internal_default_instance() {
    return reinterpret_cast<const TestEmptyMessageWithExtensionsLite*>(
               &_TestEmptyMessageWithExtensionsLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TestEmptyMessageWithExtensionsLite& a, TestEmptyMessageWithExtensionsLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEmptyMessageWithExtensionsLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestEmptyMessageWithExtensionsLite* New() const final {
    return CreateMaybeMessage<TestEmptyMessageWithExtensionsLite>(nullptr);
  }

  TestEmptyMessageWithExtensionsLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestEmptyMessageWithExtensionsLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestEmptyMessageWithExtensionsLite& from);
  void MergeFrom(const TestEmptyMessageWithExtensionsLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestEmptyMessageWithExtensionsLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestEmptyMessageWithExtensionsLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestEmptyMessageWithExtensionsLite)
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestEmptyMessageWithExtensionsLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class V1MessageLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.V1MessageLite) */ {
 public:
  V1MessageLite();
  virtual ~V1MessageLite();

  V1MessageLite(const V1MessageLite& from);
  V1MessageLite(V1MessageLite&& from) noexcept
    : V1MessageLite() {
    *this = ::std::move(from);
  }

  inline V1MessageLite& operator=(const V1MessageLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline V1MessageLite& operator=(V1MessageLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const V1MessageLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V1MessageLite* internal_default_instance() {
    return reinterpret_cast<const V1MessageLite*>(
               &_V1MessageLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(V1MessageLite& a, V1MessageLite& b) {
    a.Swap(&b);
  }
  inline void Swap(V1MessageLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline V1MessageLite* New() const final {
    return CreateMaybeMessage<V1MessageLite>(nullptr);
  }

  V1MessageLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<V1MessageLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const V1MessageLite& from);
  void MergeFrom(const V1MessageLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(V1MessageLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.V1MessageLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntFieldFieldNumber = 1,
    kEnumFieldFieldNumber = 2,
  };
  // required int32 int_field = 1;
  bool has_int_field() const;
  void clear_int_field();
  ::PROTOBUF_NAMESPACE_ID::int32 int_field() const;
  void set_int_field(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .protobuf_unittest.V1EnumLite enum_field = 2 [default = V1_FIRST];
  bool has_enum_field() const;
  void clear_enum_field();
  ::protobuf_unittest::V1EnumLite enum_field() const;
  void set_enum_field(::protobuf_unittest::V1EnumLite value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.V1MessageLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_field_;
  int enum_field_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class V2MessageLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.V2MessageLite) */ {
 public:
  V2MessageLite();
  virtual ~V2MessageLite();

  V2MessageLite(const V2MessageLite& from);
  V2MessageLite(V2MessageLite&& from) noexcept
    : V2MessageLite() {
    *this = ::std::move(from);
  }

  inline V2MessageLite& operator=(const V2MessageLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline V2MessageLite& operator=(V2MessageLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const V2MessageLite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V2MessageLite* internal_default_instance() {
    return reinterpret_cast<const V2MessageLite*>(
               &_V2MessageLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(V2MessageLite& a, V2MessageLite& b) {
    a.Swap(&b);
  }
  inline void Swap(V2MessageLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline V2MessageLite* New() const final {
    return CreateMaybeMessage<V2MessageLite>(nullptr);
  }

  V2MessageLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<V2MessageLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const V2MessageLite& from);
  void MergeFrom(const V2MessageLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(V2MessageLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.V2MessageLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntFieldFieldNumber = 1,
    kEnumFieldFieldNumber = 2,
  };
  // required int32 int_field = 1;
  bool has_int_field() const;
  void clear_int_field();
  ::PROTOBUF_NAMESPACE_ID::int32 int_field() const;
  void set_int_field(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .protobuf_unittest.V2EnumLite enum_field = 2 [default = V2_FIRST];
  bool has_enum_field() const;
  void clear_enum_field();
  ::protobuf_unittest::V2EnumLite enum_field() const;
  void set_enum_field(::protobuf_unittest::V2EnumLite value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.V2MessageLite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_field_;
  int enum_field_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestHugeFieldNumbersLite_OptionalGroup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup) */ {
 public:
  TestHugeFieldNumbersLite_OptionalGroup();
  virtual ~TestHugeFieldNumbersLite_OptionalGroup();

  TestHugeFieldNumbersLite_OptionalGroup(const TestHugeFieldNumbersLite_OptionalGroup& from);
  TestHugeFieldNumbersLite_OptionalGroup(TestHugeFieldNumbersLite_OptionalGroup&& from) noexcept
    : TestHugeFieldNumbersLite_OptionalGroup() {
    *this = ::std::move(from);
  }

  inline TestHugeFieldNumbersLite_OptionalGroup& operator=(const TestHugeFieldNumbersLite_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestHugeFieldNumbersLite_OptionalGroup& operator=(TestHugeFieldNumbersLite_OptionalGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestHugeFieldNumbersLite_OptionalGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestHugeFieldNumbersLite_OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const TestHugeFieldNumbersLite_OptionalGroup*>(
               &_TestHugeFieldNumbersLite_OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TestHugeFieldNumbersLite_OptionalGroup& a, TestHugeFieldNumbersLite_OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TestHugeFieldNumbersLite_OptionalGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestHugeFieldNumbersLite_OptionalGroup* New() const final {
    return CreateMaybeMessage<TestHugeFieldNumbersLite_OptionalGroup>(nullptr);
  }

  TestHugeFieldNumbersLite_OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestHugeFieldNumbersLite_OptionalGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestHugeFieldNumbersLite_OptionalGroup& from);
  void MergeFrom(const TestHugeFieldNumbersLite_OptionalGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestHugeFieldNumbersLite_OptionalGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupAFieldNumber = 536870009,
  };
  // optional int32 group_a = 536870009;
  bool has_group_a() const;
  void clear_group_a();
  ::PROTOBUF_NAMESPACE_ID::int32 group_a() const;
  void set_group_a(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_a_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse();
  TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse& other);
  static const TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse*>(&_TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class TestHugeFieldNumbersLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestHugeFieldNumbersLite) */ {
 public:
  TestHugeFieldNumbersLite();
  virtual ~TestHugeFieldNumbersLite();

  TestHugeFieldNumbersLite(const TestHugeFieldNumbersLite& from);
  TestHugeFieldNumbersLite(TestHugeFieldNumbersLite&& from) noexcept
    : TestHugeFieldNumbersLite() {
    *this = ::std::move(from);
  }

  inline TestHugeFieldNumbersLite& operator=(const TestHugeFieldNumbersLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestHugeFieldNumbersLite& operator=(TestHugeFieldNumbersLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestHugeFieldNumbersLite& default_instance();

  enum OneofFieldCase {
    kOneofUint32 = 536870011,
    kOneofTestAllTypes = 536870012,
    kOneofString = 536870013,
    kOneofBytes = 536870014,
    ONEOF_FIELD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestHugeFieldNumbersLite* internal_default_instance() {
    return reinterpret_cast<const TestHugeFieldNumbersLite*>(
               &_TestHugeFieldNumbersLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TestHugeFieldNumbersLite& a, TestHugeFieldNumbersLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestHugeFieldNumbersLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestHugeFieldNumbersLite* New() const final {
    return CreateMaybeMessage<TestHugeFieldNumbersLite>(nullptr);
  }

  TestHugeFieldNumbersLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestHugeFieldNumbersLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestHugeFieldNumbersLite& from);
  void MergeFrom(const TestHugeFieldNumbersLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestHugeFieldNumbersLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestHugeFieldNumbersLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TestHugeFieldNumbersLite_OptionalGroup OptionalGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 536870002,
    kPackedInt32FieldNumber = 536870003,
    kStringStringMapFieldNumber = 536870010,
    kOptionalStringFieldNumber = 536870005,
    kOptionalBytesFieldNumber = 536870006,
    kOptionalMessageFieldNumber = 536870007,
    kOptionalgroupFieldNumber = 536870008,
    kOptionalInt32FieldNumber = 536870000,
    kFixed32FieldNumber = 536870001,
    kOptionalEnumFieldNumber = 536870004,
    kOneofUint32FieldNumber = 536870011,
    kOneofTestAllTypesFieldNumber = 536870012,
    kOneofStringFieldNumber = 536870013,
    kOneofBytesFieldNumber = 536870014,
  };
  // repeated int32 repeated_int32 = 536870002 [packed = false];
  int repeated_int32_size() const;
  void clear_repeated_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 repeated_int32(int index) const;
  void set_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_repeated_int32();

  // repeated int32 packed_int32 = 536870003 [packed = true];
  int packed_int32_size() const;
  void clear_packed_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 packed_int32(int index) const;
  void set_packed_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_packed_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      packed_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_packed_int32();

  // map<string, string> string_string_map = 536870010;
  int string_string_map_size() const;
  void clear_string_string_map();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      string_string_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_string_string_map();

  // optional string optional_string = 536870005;
  bool has_optional_string() const;
  void clear_optional_string();
  const std::string& optional_string() const;
  void set_optional_string(const std::string& value);
  void set_optional_string(std::string&& value);
  void set_optional_string(const char* value);
  void set_optional_string(const char* value, size_t size);
  std::string* mutable_optional_string();
  std::string* release_optional_string();
  void set_allocated_optional_string(std::string* optional_string);

  // optional bytes optional_bytes = 536870006;
  bool has_optional_bytes() const;
  void clear_optional_bytes();
  const std::string& optional_bytes() const;
  void set_optional_bytes(const std::string& value);
  void set_optional_bytes(std::string&& value);
  void set_optional_bytes(const char* value);
  void set_optional_bytes(const void* value, size_t size);
  std::string* mutable_optional_bytes();
  std::string* release_optional_bytes();
  void set_allocated_optional_bytes(std::string* optional_bytes);

  // optional .protobuf_unittest.ForeignMessageLite optional_message = 536870007;
  bool has_optional_message() const;
  void clear_optional_message();
  const ::protobuf_unittest::ForeignMessageLite& optional_message() const;
  ::protobuf_unittest::ForeignMessageLite* release_optional_message();
  ::protobuf_unittest::ForeignMessageLite* mutable_optional_message();
  void set_allocated_optional_message(::protobuf_unittest::ForeignMessageLite* optional_message);

  // optional group OptionalGroup = 536870008 { ... };
  bool has_optionalgroup() const;
  void clear_optionalgroup();
  const ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup& optionalgroup() const;
  ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* release_optionalgroup();
  ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* mutable_optionalgroup();
  void set_allocated_optionalgroup(::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* optionalgroup);

  // optional int32 optional_int32 = 536870000;
  bool has_optional_int32() const;
  void clear_optional_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 optional_int32() const;
  void set_optional_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 fixed_32 = 536870001;
  bool has_fixed_32() const;
  void clear_fixed_32();
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_32() const;
  void set_fixed_32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .protobuf_unittest.ForeignEnumLite optional_enum = 536870004;
  bool has_optional_enum() const;
  void clear_optional_enum();
  ::protobuf_unittest::ForeignEnumLite optional_enum() const;
  void set_optional_enum(::protobuf_unittest::ForeignEnumLite value);

  // optional uint32 oneof_uint32 = 536870011;
  bool has_oneof_uint32() const;
  void clear_oneof_uint32();
  ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32() const;
  void set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .protobuf_unittest.TestAllTypesLite oneof_test_all_types = 536870012;
  bool has_oneof_test_all_types() const;
  void clear_oneof_test_all_types();
  const ::protobuf_unittest::TestAllTypesLite& oneof_test_all_types() const;
  ::protobuf_unittest::TestAllTypesLite* release_oneof_test_all_types();
  ::protobuf_unittest::TestAllTypesLite* mutable_oneof_test_all_types();
  void set_allocated_oneof_test_all_types(::protobuf_unittest::TestAllTypesLite* oneof_test_all_types);

  // optional string oneof_string = 536870013;
  bool has_oneof_string() const;
  void clear_oneof_string();
  const std::string& oneof_string() const;
  void set_oneof_string(const std::string& value);
  void set_oneof_string(std::string&& value);
  void set_oneof_string(const char* value);
  void set_oneof_string(const char* value, size_t size);
  std::string* mutable_oneof_string();
  std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* oneof_string);

  // optional bytes oneof_bytes = 536870014;
  bool has_oneof_bytes() const;
  void clear_oneof_bytes();
  const std::string& oneof_bytes() const;
  void set_oneof_bytes(const std::string& value);
  void set_oneof_bytes(std::string&& value);
  void set_oneof_bytes(const char* value);
  void set_oneof_bytes(const void* value, size_t size);
  std::string* mutable_oneof_bytes();
  std::string* release_oneof_bytes();
  void set_allocated_oneof_bytes(std::string* oneof_bytes);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TestHugeFieldNumbersLite)
  void clear_oneof_field();
  OneofFieldCase oneof_field_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestHugeFieldNumbersLite)
 private:
  class _Internal;
  void set_has_oneof_uint32();
  void set_has_oneof_test_all_types();
  void set_has_oneof_string();
  void set_has_oneof_bytes();

  inline bool has_oneof_field() const;
  inline void clear_has_oneof_field();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > repeated_int32_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > packed_int32_;
  mutable std::atomic<int> _packed_int32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      TestHugeFieldNumbersLite_StringStringMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > string_string_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_bytes_;
  ::protobuf_unittest::ForeignMessageLite* optional_message_;
  ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* optionalgroup_;
  ::PROTOBUF_NAMESPACE_ID::int32 optional_int32_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_32_;
  int optional_enum_;
  union OneofFieldUnion {
    OneofFieldUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 oneof_uint32_;
    ::protobuf_unittest::TestAllTypesLite* oneof_test_all_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
  } oneof_field_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class TestOneofParsingLite :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.TestOneofParsingLite) */ {
 public:
  TestOneofParsingLite();
  virtual ~TestOneofParsingLite();

  TestOneofParsingLite(const TestOneofParsingLite& from);
  TestOneofParsingLite(TestOneofParsingLite&& from) noexcept
    : TestOneofParsingLite() {
    *this = ::std::move(from);
  }

  inline TestOneofParsingLite& operator=(const TestOneofParsingLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestOneofParsingLite& operator=(TestOneofParsingLite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TestOneofParsingLite& default_instance();

  enum OneofFieldCase {
    kOneofInt32 = 1,
    kOneofSubmessage = 2,
    kOneofString = 3,
    kOneofBytes = 4,
    kOneofStringCord = 5,
    kOneofBytesCord = 6,
    kOneofStringStringPiece = 7,
    kOneofBytesStringPiece = 8,
    kOneofEnum = 9,
    ONEOF_FIELD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestOneofParsingLite* internal_default_instance() {
    return reinterpret_cast<const TestOneofParsingLite*>(
               &_TestOneofParsingLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TestOneofParsingLite& a, TestOneofParsingLite& b) {
    a.Swap(&b);
  }
  inline void Swap(TestOneofParsingLite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestOneofParsingLite* New() const final {
    return CreateMaybeMessage<TestOneofParsingLite>(nullptr);
  }

  TestOneofParsingLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestOneofParsingLite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TestOneofParsingLite& from);
  void MergeFrom(const TestOneofParsingLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestOneofParsingLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.TestOneofParsingLite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneofInt32FieldNumber = 1,
    kOneofSubmessageFieldNumber = 2,
    kOneofStringFieldNumber = 3,
    kOneofBytesFieldNumber = 4,
    kOneofStringCordFieldNumber = 5,
    kOneofBytesCordFieldNumber = 6,
    kOneofStringStringPieceFieldNumber = 7,
    kOneofBytesStringPieceFieldNumber = 8,
    kOneofEnumFieldNumber = 9,
  };
  // optional int32 oneof_int32 = 1;
  bool has_oneof_int32() const;
  void clear_oneof_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 oneof_int32() const;
  void set_oneof_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .protobuf_unittest.TestAllTypesLite oneof_submessage = 2;
  bool has_oneof_submessage() const;
  void clear_oneof_submessage();
  const ::protobuf_unittest::TestAllTypesLite& oneof_submessage() const;
  ::protobuf_unittest::TestAllTypesLite* release_oneof_submessage();
  ::protobuf_unittest::TestAllTypesLite* mutable_oneof_submessage();
  void set_allocated_oneof_submessage(::protobuf_unittest::TestAllTypesLite* oneof_submessage);

  // optional string oneof_string = 3;
  bool has_oneof_string() const;
  void clear_oneof_string();
  const std::string& oneof_string() const;
  void set_oneof_string(const std::string& value);
  void set_oneof_string(std::string&& value);
  void set_oneof_string(const char* value);
  void set_oneof_string(const char* value, size_t size);
  std::string* mutable_oneof_string();
  std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* oneof_string);

  // optional bytes oneof_bytes = 4 [default = "default bytes"];
  bool has_oneof_bytes() const;
  void clear_oneof_bytes();
  const std::string& oneof_bytes() const;
  void set_oneof_bytes(const std::string& value);
  void set_oneof_bytes(std::string&& value);
  void set_oneof_bytes(const char* value);
  void set_oneof_bytes(const void* value, size_t size);
  std::string* mutable_oneof_bytes();
  std::string* release_oneof_bytes();
  void set_allocated_oneof_bytes(std::string* oneof_bytes);

  // optional string oneof_string_cord = 5 [default = "default Cord", ctype = CORD];
  bool has_oneof_string_cord() const;
  void clear_oneof_string_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& oneof_string_cord() const;
  void set_oneof_string_cord(const std::string& value);
  void set_oneof_string_cord(std::string&& value);
  void set_oneof_string_cord(const char* value);
  void set_oneof_string_cord(const char* value, size_t size);
  std::string* mutable_oneof_string_cord();
  std::string* release_oneof_string_cord();
  void set_allocated_oneof_string_cord(std::string* oneof_string_cord);
 public:

  // optional bytes oneof_bytes_cord = 6 [ctype = CORD];
  bool has_oneof_bytes_cord() const;
  void clear_oneof_bytes_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& oneof_bytes_cord() const;
  void set_oneof_bytes_cord(const std::string& value);
  void set_oneof_bytes_cord(std::string&& value);
  void set_oneof_bytes_cord(const char* value);
  void set_oneof_bytes_cord(const void* value, size_t size);
  std::string* mutable_oneof_bytes_cord();
  std::string* release_oneof_bytes_cord();
  void set_allocated_oneof_bytes_cord(std::string* oneof_bytes_cord);
 public:

  // optional string oneof_string_string_piece = 7 [ctype = STRING_PIECE];
  bool has_oneof_string_string_piece() const;
  void clear_oneof_string_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& oneof_string_string_piece() const;
  void set_oneof_string_string_piece(const std::string& value);
  void set_oneof_string_string_piece(std::string&& value);
  void set_oneof_string_string_piece(const char* value);
  void set_oneof_string_string_piece(const char* value, size_t size);
  std::string* mutable_oneof_string_string_piece();
  std::string* release_oneof_string_string_piece();
  void set_allocated_oneof_string_string_piece(std::string* oneof_string_string_piece);
 public:

  // optional bytes oneof_bytes_string_piece = 8 [default = "default StringPiece", ctype = STRING_PIECE];
  bool has_oneof_bytes_string_piece() const;
  void clear_oneof_bytes_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& oneof_bytes_string_piece() const;
  void set_oneof_bytes_string_piece(const std::string& value);
  void set_oneof_bytes_string_piece(std::string&& value);
  void set_oneof_bytes_string_piece(const char* value);
  void set_oneof_bytes_string_piece(const void* value, size_t size);
  std::string* mutable_oneof_bytes_string_piece();
  std::string* release_oneof_bytes_string_piece();
  void set_allocated_oneof_bytes_string_piece(std::string* oneof_bytes_string_piece);
 public:

  // optional .protobuf_unittest.V2EnumLite oneof_enum = 9;
  bool has_oneof_enum() const;
  void clear_oneof_enum();
  ::protobuf_unittest::V2EnumLite oneof_enum() const;
  void set_oneof_enum(::protobuf_unittest::V2EnumLite value);

  void clear_oneof_field();
  OneofFieldCase oneof_field_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TestOneofParsingLite)
 private:
  class _Internal;
  void set_has_oneof_int32();
  void set_has_oneof_submessage();
  void set_has_oneof_string();
  void set_has_oneof_bytes();
  void set_has_oneof_string_cord();
  void set_has_oneof_bytes_cord();
  void set_has_oneof_string_string_piece();
  void set_has_oneof_bytes_string_piece();
  void set_has_oneof_enum();

  inline bool has_oneof_field() const;
  inline void clear_has_oneof_field();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union OneofFieldUnion {
    OneofFieldUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 oneof_int32_;
    ::protobuf_unittest::TestAllTypesLite* oneof_submessage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_cord_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_cord_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_string_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_string_piece_;
    int oneof_enum_;
  } oneof_field_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_oneof_bytes_;
  private:
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_oneof_string_cord_;
  private:
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_;
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class PackedInt32 :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.PackedInt32) */ {
 public:
  PackedInt32();
  virtual ~PackedInt32();

  PackedInt32(const PackedInt32& from);
  PackedInt32(PackedInt32&& from) noexcept
    : PackedInt32() {
    *this = ::std::move(from);
  }

  inline PackedInt32& operator=(const PackedInt32& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackedInt32& operator=(PackedInt32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackedInt32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackedInt32* internal_default_instance() {
    return reinterpret_cast<const PackedInt32*>(
               &_PackedInt32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PackedInt32& a, PackedInt32& b) {
    a.Swap(&b);
  }
  inline void Swap(PackedInt32* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackedInt32* New() const final {
    return CreateMaybeMessage<PackedInt32>(nullptr);
  }

  PackedInt32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackedInt32>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackedInt32& from);
  void MergeFrom(const PackedInt32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackedInt32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.PackedInt32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 2048,
  };
  // repeated int32 repeated_int32 = 2048 [packed = true];
  int repeated_int32_size() const;
  void clear_repeated_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 repeated_int32(int index) const;
  void set_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_repeated_int32();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.PackedInt32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > repeated_int32_;
  mutable std::atomic<int> _repeated_int32_cached_byte_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class NonPackedInt32 :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.NonPackedInt32) */ {
 public:
  NonPackedInt32();
  virtual ~NonPackedInt32();

  NonPackedInt32(const NonPackedInt32& from);
  NonPackedInt32(NonPackedInt32&& from) noexcept
    : NonPackedInt32() {
    *this = ::std::move(from);
  }

  inline NonPackedInt32& operator=(const NonPackedInt32& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonPackedInt32& operator=(NonPackedInt32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NonPackedInt32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NonPackedInt32* internal_default_instance() {
    return reinterpret_cast<const NonPackedInt32*>(
               &_NonPackedInt32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(NonPackedInt32& a, NonPackedInt32& b) {
    a.Swap(&b);
  }
  inline void Swap(NonPackedInt32* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NonPackedInt32* New() const final {
    return CreateMaybeMessage<NonPackedInt32>(nullptr);
  }

  NonPackedInt32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NonPackedInt32>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NonPackedInt32& from);
  void MergeFrom(const NonPackedInt32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NonPackedInt32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.NonPackedInt32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 2048,
  };
  // repeated int32 repeated_int32 = 2048;
  int repeated_int32_size() const;
  void clear_repeated_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 repeated_int32(int index) const;
  void set_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_repeated_int32();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.NonPackedInt32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > repeated_int32_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class PackedFixed32 :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.PackedFixed32) */ {
 public:
  PackedFixed32();
  virtual ~PackedFixed32();

  PackedFixed32(const PackedFixed32& from);
  PackedFixed32(PackedFixed32&& from) noexcept
    : PackedFixed32() {
    *this = ::std::move(from);
  }

  inline PackedFixed32& operator=(const PackedFixed32& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackedFixed32& operator=(PackedFixed32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackedFixed32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackedFixed32* internal_default_instance() {
    return reinterpret_cast<const PackedFixed32*>(
               &_PackedFixed32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PackedFixed32& a, PackedFixed32& b) {
    a.Swap(&b);
  }
  inline void Swap(PackedFixed32* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackedFixed32* New() const final {
    return CreateMaybeMessage<PackedFixed32>(nullptr);
  }

  PackedFixed32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackedFixed32>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackedFixed32& from);
  void MergeFrom(const PackedFixed32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackedFixed32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.PackedFixed32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedFixed32FieldNumber = 2048,
  };
  // repeated fixed32 repeated_fixed32 = 2048 [packed = true];
  int repeated_fixed32_size() const;
  void clear_repeated_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated_fixed32(int index) const;
  void set_repeated_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      repeated_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_repeated_fixed32();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.PackedFixed32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > repeated_fixed32_;
  mutable std::atomic<int> _repeated_fixed32_cached_byte_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class NonPackedFixed32 :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.NonPackedFixed32) */ {
 public:
  NonPackedFixed32();
  virtual ~NonPackedFixed32();

  NonPackedFixed32(const NonPackedFixed32& from);
  NonPackedFixed32(NonPackedFixed32&& from) noexcept
    : NonPackedFixed32() {
    *this = ::std::move(from);
  }

  inline NonPackedFixed32& operator=(const NonPackedFixed32& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonPackedFixed32& operator=(NonPackedFixed32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NonPackedFixed32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NonPackedFixed32* internal_default_instance() {
    return reinterpret_cast<const NonPackedFixed32*>(
               &_NonPackedFixed32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(NonPackedFixed32& a, NonPackedFixed32& b) {
    a.Swap(&b);
  }
  inline void Swap(NonPackedFixed32* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NonPackedFixed32* New() const final {
    return CreateMaybeMessage<NonPackedFixed32>(nullptr);
  }

  NonPackedFixed32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NonPackedFixed32>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NonPackedFixed32& from);
  void MergeFrom(const NonPackedFixed32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NonPackedFixed32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.NonPackedFixed32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedFixed32FieldNumber = 2048,
  };
  // repeated fixed32 repeated_fixed32 = 2048;
  int repeated_fixed32_size() const;
  void clear_repeated_fixed32();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeated_fixed32(int index) const;
  void set_repeated_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      repeated_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_repeated_fixed32();

  // @@protoc_insertion_point(class_scope:protobuf_unittest.NonPackedFixed32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > repeated_fixed32_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// -------------------------------------------------------------------

class DupEnum :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protobuf_unittest.DupEnum) */ {
 public:
  DupEnum();
  virtual ~DupEnum();

  DupEnum(const DupEnum& from);
  DupEnum(DupEnum&& from) noexcept
    : DupEnum() {
    *this = ::std::move(from);
  }

  inline DupEnum& operator=(const DupEnum& from) {
    CopyFrom(from);
    return *this;
  }
  inline DupEnum& operator=(DupEnum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DupEnum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DupEnum* internal_default_instance() {
    return reinterpret_cast<const DupEnum*>(
               &_DupEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DupEnum& a, DupEnum& b) {
    a.Swap(&b);
  }
  inline void Swap(DupEnum* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DupEnum* New() const final {
    return CreateMaybeMessage<DupEnum>(nullptr);
  }

  DupEnum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DupEnum>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DupEnum& from);
  void MergeFrom(const DupEnum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DupEnum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_unittest.DupEnum";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DupEnum_TestEnumWithDupValueLite TestEnumWithDupValueLite;
  static constexpr TestEnumWithDupValueLite FOO1 =
    DupEnum_TestEnumWithDupValueLite_FOO1;
  static constexpr TestEnumWithDupValueLite BAR1 =
    DupEnum_TestEnumWithDupValueLite_BAR1;
  static constexpr TestEnumWithDupValueLite BAZ =
    DupEnum_TestEnumWithDupValueLite_BAZ;
  static constexpr TestEnumWithDupValueLite FOO2 =
    DupEnum_TestEnumWithDupValueLite_FOO2;
  static constexpr TestEnumWithDupValueLite BAR2 =
    DupEnum_TestEnumWithDupValueLite_BAR2;
  static inline bool TestEnumWithDupValueLite_IsValid(int value) {
    return DupEnum_TestEnumWithDupValueLite_IsValid(value);
  }
  static constexpr TestEnumWithDupValueLite TestEnumWithDupValueLite_MIN =
    DupEnum_TestEnumWithDupValueLite_TestEnumWithDupValueLite_MIN;
  static constexpr TestEnumWithDupValueLite TestEnumWithDupValueLite_MAX =
    DupEnum_TestEnumWithDupValueLite_TestEnumWithDupValueLite_MAX;
  static constexpr int TestEnumWithDupValueLite_ARRAYSIZE =
    DupEnum_TestEnumWithDupValueLite_TestEnumWithDupValueLite_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TestEnumWithDupValueLite_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TestEnumWithDupValueLite>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TestEnumWithDupValueLite_Name.");
    return DupEnum_TestEnumWithDupValueLite_Name(enum_t_value);
  }
  static inline bool TestEnumWithDupValueLite_Parse(const std::string& name,
      TestEnumWithDupValueLite* value) {
    return DupEnum_TestEnumWithDupValueLite_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.DupEnum)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5flite_2eproto;
};
// ===================================================================

static const int kOptionalInt32ExtensionLiteFieldNumber = 1;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  optional_int32_extension_lite;
static const int kOptionalInt64ExtensionLiteFieldNumber = 2;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  optional_int64_extension_lite;
static const int kOptionalUint32ExtensionLiteFieldNumber = 3;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  optional_uint32_extension_lite;
static const int kOptionalUint64ExtensionLiteFieldNumber = 4;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, false >
  optional_uint64_extension_lite;
static const int kOptionalSint32ExtensionLiteFieldNumber = 5;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, false >
  optional_sint32_extension_lite;
static const int kOptionalSint64ExtensionLiteFieldNumber = 6;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, false >
  optional_sint64_extension_lite;
static const int kOptionalFixed32ExtensionLiteFieldNumber = 7;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, false >
  optional_fixed32_extension_lite;
static const int kOptionalFixed64ExtensionLiteFieldNumber = 8;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, false >
  optional_fixed64_extension_lite;
static const int kOptionalSfixed32ExtensionLiteFieldNumber = 9;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, false >
  optional_sfixed32_extension_lite;
static const int kOptionalSfixed64ExtensionLiteFieldNumber = 10;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, false >
  optional_sfixed64_extension_lite;
static const int kOptionalFloatExtensionLiteFieldNumber = 11;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  optional_float_extension_lite;
static const int kOptionalDoubleExtensionLiteFieldNumber = 12;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false >
  optional_double_extension_lite;
static const int kOptionalBoolExtensionLiteFieldNumber = 13;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  optional_bool_extension_lite;
static const int kOptionalStringExtensionLiteFieldNumber = 14;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_string_extension_lite;
static const int kOptionalBytesExtensionLiteFieldNumber = 15;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  optional_bytes_extension_lite;
static const int kOptionalgroupExtensionLiteFieldNumber = 16;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionalGroup_extension_lite >, 10, false >
  optionalgroup_extension_lite;
static const int kOptionalNestedMessageExtensionLiteFieldNumber = 18;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  optional_nested_message_extension_lite;
static const int kOptionalForeignMessageExtensionLiteFieldNumber = 19;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::ForeignMessageLite >, 11, false >
  optional_foreign_message_extension_lite;
static const int kOptionalImportMessageExtensionLiteFieldNumber = 20;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::ImportMessageLite >, 11, false >
  optional_import_message_extension_lite;
static const int kOptionalNestedEnumExtensionLiteFieldNumber = 21;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false >
  optional_nested_enum_extension_lite;
static const int kOptionalForeignEnumExtensionLiteFieldNumber = 22;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false >
  optional_foreign_enum_extension_lite;
static const int kOptionalImportEnumExtensionLiteFieldNumber = 23;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false >
  optional_import_enum_extension_lite;
static const int kOptionalStringPieceExtensionLiteFieldNumber = 24;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_string_piece_extension_lite;
static const int kOptionalCordExtensionLiteFieldNumber = 25;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  optional_cord_extension_lite;
static const int kOptionalPublicImportMessageExtensionLiteFieldNumber = 26;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest_import::PublicImportMessageLite >, 11, false >
  optional_public_import_message_extension_lite;
static const int kOptionalLazyMessageExtensionLiteFieldNumber = 27;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  optional_lazy_message_extension_lite;
static const int kRepeatedInt32ExtensionLiteFieldNumber = 31;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  repeated_int32_extension_lite;
static const int kRepeatedInt64ExtensionLiteFieldNumber = 32;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  repeated_int64_extension_lite;
static const int kRepeatedUint32ExtensionLiteFieldNumber = 33;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  repeated_uint32_extension_lite;
static const int kRepeatedUint64ExtensionLiteFieldNumber = 34;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, false >
  repeated_uint64_extension_lite;
static const int kRepeatedSint32ExtensionLiteFieldNumber = 35;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, false >
  repeated_sint32_extension_lite;
static const int kRepeatedSint64ExtensionLiteFieldNumber = 36;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, false >
  repeated_sint64_extension_lite;
static const int kRepeatedFixed32ExtensionLiteFieldNumber = 37;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, false >
  repeated_fixed32_extension_lite;
static const int kRepeatedFixed64ExtensionLiteFieldNumber = 38;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, false >
  repeated_fixed64_extension_lite;
static const int kRepeatedSfixed32ExtensionLiteFieldNumber = 39;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, false >
  repeated_sfixed32_extension_lite;
static const int kRepeatedSfixed64ExtensionLiteFieldNumber = 40;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, false >
  repeated_sfixed64_extension_lite;
static const int kRepeatedFloatExtensionLiteFieldNumber = 41;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, false >
  repeated_float_extension_lite;
static const int kRepeatedDoubleExtensionLiteFieldNumber = 42;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, false >
  repeated_double_extension_lite;
static const int kRepeatedBoolExtensionLiteFieldNumber = 43;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false >
  repeated_bool_extension_lite;
static const int kRepeatedStringExtensionLiteFieldNumber = 44;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_string_extension_lite;
static const int kRepeatedBytesExtensionLiteFieldNumber = 45;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 12, false >
  repeated_bytes_extension_lite;
static const int kRepeatedgroupExtensionLiteFieldNumber = 46;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::RepeatedGroup_extension_lite >, 10, false >
  repeatedgroup_extension_lite;
static const int kRepeatedNestedMessageExtensionLiteFieldNumber = 48;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  repeated_nested_message_extension_lite;
static const int kRepeatedForeignMessageExtensionLiteFieldNumber = 49;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::ForeignMessageLite >, 11, false >
  repeated_foreign_message_extension_lite;
static const int kRepeatedImportMessageExtensionLiteFieldNumber = 50;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest_import::ImportMessageLite >, 11, false >
  repeated_import_message_extension_lite;
static const int kRepeatedNestedEnumExtensionLiteFieldNumber = 51;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false >
  repeated_nested_enum_extension_lite;
static const int kRepeatedForeignEnumExtensionLiteFieldNumber = 52;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false >
  repeated_foreign_enum_extension_lite;
static const int kRepeatedImportEnumExtensionLiteFieldNumber = 53;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false >
  repeated_import_enum_extension_lite;
static const int kRepeatedStringPieceExtensionLiteFieldNumber = 54;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_string_piece_extension_lite;
static const int kRepeatedCordExtensionLiteFieldNumber = 55;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedStringTypeTraits, 9, false >
  repeated_cord_extension_lite;
static const int kRepeatedLazyMessageExtensionLiteFieldNumber = 57;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  repeated_lazy_message_extension_lite;
static const int kDefaultInt32ExtensionLiteFieldNumber = 61;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  default_int32_extension_lite;
static const int kDefaultInt64ExtensionLiteFieldNumber = 62;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, false >
  default_int64_extension_lite;
static const int kDefaultUint32ExtensionLiteFieldNumber = 63;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  default_uint32_extension_lite;
static const int kDefaultUint64ExtensionLiteFieldNumber = 64;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, false >
  default_uint64_extension_lite;
static const int kDefaultSint32ExtensionLiteFieldNumber = 65;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, false >
  default_sint32_extension_lite;
static const int kDefaultSint64ExtensionLiteFieldNumber = 66;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, false >
  default_sint64_extension_lite;
static const int kDefaultFixed32ExtensionLiteFieldNumber = 67;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, false >
  default_fixed32_extension_lite;
static const int kDefaultFixed64ExtensionLiteFieldNumber = 68;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, false >
  default_fixed64_extension_lite;
static const int kDefaultSfixed32ExtensionLiteFieldNumber = 69;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, false >
  default_sfixed32_extension_lite;
static const int kDefaultSfixed64ExtensionLiteFieldNumber = 70;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, false >
  default_sfixed64_extension_lite;
static const int kDefaultFloatExtensionLiteFieldNumber = 71;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< float >, 2, false >
  default_float_extension_lite;
static const int kDefaultDoubleExtensionLiteFieldNumber = 72;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< double >, 1, false >
  default_double_extension_lite;
static const int kDefaultBoolExtensionLiteFieldNumber = 73;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  default_bool_extension_lite;
static const int kDefaultStringExtensionLiteFieldNumber = 74;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_string_extension_lite;
static const int kDefaultBytesExtensionLiteFieldNumber = 75;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  default_bytes_extension_lite;
static const int kDefaultNestedEnumExtensionLiteFieldNumber = 81;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false >
  default_nested_enum_extension_lite;
static const int kDefaultForeignEnumExtensionLiteFieldNumber = 82;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false >
  default_foreign_enum_extension_lite;
static const int kDefaultImportEnumExtensionLiteFieldNumber = 83;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false >
  default_import_enum_extension_lite;
static const int kDefaultStringPieceExtensionLiteFieldNumber = 84;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_string_piece_extension_lite;
static const int kDefaultCordExtensionLiteFieldNumber = 85;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  default_cord_extension_lite;
static const int kOneofUint32ExtensionLiteFieldNumber = 111;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  oneof_uint32_extension_lite;
static const int kOneofNestedMessageExtensionLiteFieldNumber = 112;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  oneof_nested_message_extension_lite;
static const int kOneofStringExtensionLiteFieldNumber = 113;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  oneof_string_extension_lite;
static const int kOneofBytesExtensionLiteFieldNumber = 114;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
  oneof_bytes_extension_lite;
static const int kPackedInt32ExtensionLiteFieldNumber = 90;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, true >
  packed_int32_extension_lite;
static const int kPackedInt64ExtensionLiteFieldNumber = 91;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 3, true >
  packed_int64_extension_lite;
static const int kPackedUint32ExtensionLiteFieldNumber = 92;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, true >
  packed_uint32_extension_lite;
static const int kPackedUint64ExtensionLiteFieldNumber = 93;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 4, true >
  packed_uint64_extension_lite;
static const int kPackedSint32ExtensionLiteFieldNumber = 94;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 17, true >
  packed_sint32_extension_lite;
static const int kPackedSint64ExtensionLiteFieldNumber = 95;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 18, true >
  packed_sint64_extension_lite;
static const int kPackedFixed32ExtensionLiteFieldNumber = 96;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 7, true >
  packed_fixed32_extension_lite;
static const int kPackedFixed64ExtensionLiteFieldNumber = 97;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint64 >, 6, true >
  packed_fixed64_extension_lite;
static const int kPackedSfixed32ExtensionLiteFieldNumber = 98;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 15, true >
  packed_sfixed32_extension_lite;
static const int kPackedSfixed64ExtensionLiteFieldNumber = 99;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int64 >, 16, true >
  packed_sfixed64_extension_lite;
static const int kPackedFloatExtensionLiteFieldNumber = 100;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< float >, 2, true >
  packed_float_extension_lite;
static const int kPackedDoubleExtensionLiteFieldNumber = 101;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< double >, 1, true >
  packed_double_extension_lite;
static const int kPackedBoolExtensionLiteFieldNumber = 102;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< bool >, 8, true >
  packed_bool_extension_lite;
static const int kPackedEnumExtensionLiteFieldNumber = 103;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, true >
  packed_enum_extension_lite;
static const int kTestAllTypesLiteFieldNumber = 536860000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestHugeFieldNumbersLite,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite >, 11, false >
  test_all_types_lite;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestAllTypesLite_NestedMessage

// optional int32 bb = 1;
inline bool TestAllTypesLite_NestedMessage::has_bb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestAllTypesLite_NestedMessage::clear_bb() {
  bb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite_NestedMessage::bb() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.NestedMessage.bb)
  return bb_;
}
inline void TestAllTypesLite_NestedMessage::set_bb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  bb_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.NestedMessage.bb)
}

// optional int64 cc = 2;
inline bool TestAllTypesLite_NestedMessage::has_cc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestAllTypesLite_NestedMessage::clear_cc() {
  cc_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite_NestedMessage::cc() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.NestedMessage.cc)
  return cc_;
}
inline void TestAllTypesLite_NestedMessage::set_cc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  cc_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.NestedMessage.cc)
}

// -------------------------------------------------------------------

// TestAllTypesLite_OptionalGroup

// optional int32 a = 17;
inline bool TestAllTypesLite_OptionalGroup::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestAllTypesLite_OptionalGroup::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite_OptionalGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.OptionalGroup.a)
  return a_;
}
inline void TestAllTypesLite_OptionalGroup::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.OptionalGroup.a)
}

// -------------------------------------------------------------------

// TestAllTypesLite_RepeatedGroup

// optional int32 a = 47;
inline bool TestAllTypesLite_RepeatedGroup::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestAllTypesLite_RepeatedGroup::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite_RepeatedGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.RepeatedGroup.a)
  return a_;
}
inline void TestAllTypesLite_RepeatedGroup::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.RepeatedGroup.a)
}

// -------------------------------------------------------------------

// TestAllTypesLite

// optional int32 optional_int32 = 1;
inline bool TestAllTypesLite::has_optional_int32() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TestAllTypesLite::clear_optional_int32() {
  optional_int32_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_int32)
  return optional_int32_;
}
inline void TestAllTypesLite::set_optional_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  optional_int32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_int32)
}

// optional int64 optional_int64 = 2;
inline bool TestAllTypesLite::has_optional_int64() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TestAllTypesLite::clear_optional_int64() {
  optional_int64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::optional_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_int64)
  return optional_int64_;
}
inline void TestAllTypesLite::set_optional_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  optional_int64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_int64)
}

// optional uint32 optional_uint32 = 3;
inline bool TestAllTypesLite::has_optional_uint32() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TestAllTypesLite::clear_optional_uint32() {
  optional_uint32_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestAllTypesLite::optional_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_uint32)
  return optional_uint32_;
}
inline void TestAllTypesLite::set_optional_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  optional_uint32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_uint32)
}

// optional uint64 optional_uint64 = 4;
inline bool TestAllTypesLite::has_optional_uint64() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TestAllTypesLite::clear_optional_uint64() {
  optional_uint64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestAllTypesLite::optional_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_uint64)
  return optional_uint64_;
}
inline void TestAllTypesLite::set_optional_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  optional_uint64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_uint64)
}

// optional sint32 optional_sint32 = 5;
inline bool TestAllTypesLite::has_optional_sint32() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TestAllTypesLite::clear_optional_sint32() {
  optional_sint32_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::optional_sint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_sint32)
  return optional_sint32_;
}
inline void TestAllTypesLite::set_optional_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  optional_sint32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_sint32)
}

// optional sint64 optional_sint64 = 6;
inline bool TestAllTypesLite::has_optional_sint64() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TestAllTypesLite::clear_optional_sint64() {
  optional_sint64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::optional_sint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_sint64)
  return optional_sint64_;
}
inline void TestAllTypesLite::set_optional_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00040000u;
  optional_sint64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_sint64)
}

// optional fixed32 optional_fixed32 = 7;
inline bool TestAllTypesLite::has_optional_fixed32() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TestAllTypesLite::clear_optional_fixed32() {
  optional_fixed32_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestAllTypesLite::optional_fixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_fixed32)
  return optional_fixed32_;
}
inline void TestAllTypesLite::set_optional_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  optional_fixed32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_fixed32)
}

// optional fixed64 optional_fixed64 = 8;
inline bool TestAllTypesLite::has_optional_fixed64() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TestAllTypesLite::clear_optional_fixed64() {
  optional_fixed64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestAllTypesLite::optional_fixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_fixed64)
  return optional_fixed64_;
}
inline void TestAllTypesLite::set_optional_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  optional_fixed64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_fixed64)
}

// optional sfixed32 optional_sfixed32 = 9;
inline bool TestAllTypesLite::has_optional_sfixed32() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TestAllTypesLite::clear_optional_sfixed32() {
  optional_sfixed32_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::optional_sfixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_sfixed32)
  return optional_sfixed32_;
}
inline void TestAllTypesLite::set_optional_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  optional_sfixed32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_sfixed32)
}

// optional sfixed64 optional_sfixed64 = 10;
inline bool TestAllTypesLite::has_optional_sfixed64() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TestAllTypesLite::clear_optional_sfixed64() {
  optional_sfixed64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::optional_sfixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_sfixed64)
  return optional_sfixed64_;
}
inline void TestAllTypesLite::set_optional_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00400000u;
  optional_sfixed64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_sfixed64)
}

// optional float optional_float = 11;
inline bool TestAllTypesLite::has_optional_float() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TestAllTypesLite::clear_optional_float() {
  optional_float_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float TestAllTypesLite::optional_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_float)
  return optional_float_;
}
inline void TestAllTypesLite::set_optional_float(float value) {
  _has_bits_[0] |= 0x01000000u;
  optional_float_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_float)
}

// optional double optional_double = 12;
inline bool TestAllTypesLite::has_optional_double() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TestAllTypesLite::clear_optional_double() {
  optional_double_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double TestAllTypesLite::optional_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_double)
  return optional_double_;
}
inline void TestAllTypesLite::set_optional_double(double value) {
  _has_bits_[0] |= 0x02000000u;
  optional_double_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_double)
}

// optional bool optional_bool = 13;
inline bool TestAllTypesLite::has_optional_bool() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TestAllTypesLite::clear_optional_bool() {
  optional_bool_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool TestAllTypesLite::optional_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_bool)
  return optional_bool_;
}
inline void TestAllTypesLite::set_optional_bool(bool value) {
  _has_bits_[0] |= 0x04000000u;
  optional_bool_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_bool)
}

// optional string optional_string = 14;
inline bool TestAllTypesLite::has_optional_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestAllTypesLite::clear_optional_string() {
  optional_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestAllTypesLite::optional_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_string)
  return optional_string_.GetNoArena();
}
inline void TestAllTypesLite::set_optional_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_string)
}
inline void TestAllTypesLite::set_optional_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.optional_string)
}
inline void TestAllTypesLite::set_optional_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  optional_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.optional_string)
}
inline void TestAllTypesLite::set_optional_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.optional_string)
}
inline std::string* TestAllTypesLite::mutable_optional_string() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_string)
  return optional_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestAllTypesLite::release_optional_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_string)
  if (!has_optional_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return optional_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestAllTypesLite::set_allocated_optional_string(std::string* optional_string) {
  if (optional_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_string);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_string)
}

// optional bytes optional_bytes = 15;
inline bool TestAllTypesLite::has_optional_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestAllTypesLite::clear_optional_bytes() {
  optional_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestAllTypesLite::optional_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_bytes)
  return optional_bytes_.GetNoArena();
}
inline void TestAllTypesLite::set_optional_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_bytes)
}
inline void TestAllTypesLite::set_optional_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.optional_bytes)
}
inline void TestAllTypesLite::set_optional_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.optional_bytes)
}
inline void TestAllTypesLite::set_optional_bytes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.optional_bytes)
}
inline std::string* TestAllTypesLite::mutable_optional_bytes() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_bytes)
  return optional_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestAllTypesLite::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_bytes)
  if (!has_optional_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return optional_bytes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestAllTypesLite::set_allocated_optional_bytes(std::string* optional_bytes) {
  if (optional_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_bytes);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_bytes)
}

// optional group OptionalGroup = 16 { ... };
inline bool TestAllTypesLite::has_optionalgroup() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TestAllTypesLite::clear_optionalgroup() {
  if (optionalgroup_ != nullptr) optionalgroup_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::protobuf_unittest::TestAllTypesLite_OptionalGroup& TestAllTypesLite::optionalgroup() const {
  const ::protobuf_unittest::TestAllTypesLite_OptionalGroup* p = optionalgroup_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optionalgroup)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite_OptionalGroup*>(
      &::protobuf_unittest::_TestAllTypesLite_OptionalGroup_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite_OptionalGroup* TestAllTypesLite::release_optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optionalgroup)
  _has_bits_[0] &= ~0x00000100u;
  ::protobuf_unittest::TestAllTypesLite_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite_OptionalGroup* TestAllTypesLite::mutable_optionalgroup() {
  _has_bits_[0] |= 0x00000100u;
  if (optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite_OptionalGroup>(GetArenaNoVirtual());
    optionalgroup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optionalgroup)
  return optionalgroup_;
}
inline void TestAllTypesLite::set_allocated_optionalgroup(::protobuf_unittest::TestAllTypesLite_OptionalGroup* optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optionalgroup_;
  }
  if (optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  optionalgroup_ = optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optionalgroup)
}

// optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
inline bool TestAllTypesLite::has_optional_nested_message() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TestAllTypesLite::clear_optional_nested_message() {
  if (optional_nested_message_ != nullptr) optional_nested_message_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::protobuf_unittest::TestAllTypesLite_NestedMessage& TestAllTypesLite::optional_nested_message() const {
  const ::protobuf_unittest::TestAllTypesLite_NestedMessage* p = optional_nested_message_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_nested_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite_NestedMessage*>(
      &::protobuf_unittest::_TestAllTypesLite_NestedMessage_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::release_optional_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_nested_message)
  _has_bits_[0] &= ~0x00000200u;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* temp = optional_nested_message_;
  optional_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::mutable_optional_nested_message() {
  _has_bits_[0] |= 0x00000200u;
  if (optional_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite_NestedMessage>(GetArenaNoVirtual());
    optional_nested_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_nested_message)
  return optional_nested_message_;
}
inline void TestAllTypesLite::set_allocated_optional_nested_message(::protobuf_unittest::TestAllTypesLite_NestedMessage* optional_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optional_nested_message_;
  }
  if (optional_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_nested_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  optional_nested_message_ = optional_nested_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_nested_message)
}

// optional .protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
inline bool TestAllTypesLite::has_optional_foreign_message() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TestAllTypesLite::clear_optional_foreign_message() {
  if (optional_foreign_message_ != nullptr) optional_foreign_message_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::protobuf_unittest::ForeignMessageLite& TestAllTypesLite::optional_foreign_message() const {
  const ::protobuf_unittest::ForeignMessageLite* p = optional_foreign_message_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_foreign_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::ForeignMessageLite*>(
      &::protobuf_unittest::_ForeignMessageLite_default_instance_);
}
inline ::protobuf_unittest::ForeignMessageLite* TestAllTypesLite::release_optional_foreign_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_foreign_message)
  _has_bits_[0] &= ~0x00000400u;
  ::protobuf_unittest::ForeignMessageLite* temp = optional_foreign_message_;
  optional_foreign_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::ForeignMessageLite* TestAllTypesLite::mutable_optional_foreign_message() {
  _has_bits_[0] |= 0x00000400u;
  if (optional_foreign_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::ForeignMessageLite>(GetArenaNoVirtual());
    optional_foreign_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_foreign_message)
  return optional_foreign_message_;
}
inline void TestAllTypesLite::set_allocated_optional_foreign_message(::protobuf_unittest::ForeignMessageLite* optional_foreign_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optional_foreign_message_;
  }
  if (optional_foreign_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional_foreign_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_foreign_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  optional_foreign_message_ = optional_foreign_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_foreign_message)
}

// optional .protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
inline bool TestAllTypesLite::has_optional_import_message() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::protobuf_unittest_import::ImportMessageLite& TestAllTypesLite::optional_import_message() const {
  const ::protobuf_unittest_import::ImportMessageLite* p = optional_import_message_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_import_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest_import::ImportMessageLite*>(
      &::protobuf_unittest_import::_ImportMessageLite_default_instance_);
}
inline ::protobuf_unittest_import::ImportMessageLite* TestAllTypesLite::release_optional_import_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_import_message)
  _has_bits_[0] &= ~0x00000800u;
  ::protobuf_unittest_import::ImportMessageLite* temp = optional_import_message_;
  optional_import_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest_import::ImportMessageLite* TestAllTypesLite::mutable_optional_import_message() {
  _has_bits_[0] |= 0x00000800u;
  if (optional_import_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest_import::ImportMessageLite>(GetArenaNoVirtual());
    optional_import_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_import_message)
  return optional_import_message_;
}
inline void TestAllTypesLite::set_allocated_optional_import_message(::protobuf_unittest_import::ImportMessageLite* optional_import_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_import_message_);
  }
  if (optional_import_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional_import_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_import_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  optional_import_message_ = optional_import_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_import_message)
}

// optional .protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
inline bool TestAllTypesLite::has_optional_nested_enum() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TestAllTypesLite::clear_optional_nested_enum() {
  optional_nested_enum_ = 1;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::protobuf_unittest::TestAllTypesLite_NestedEnum TestAllTypesLite::optional_nested_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_nested_enum)
  return static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(optional_nested_enum_);
}
inline void TestAllTypesLite::set_optional_nested_enum(::protobuf_unittest::TestAllTypesLite_NestedEnum value) {
  assert(::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(value));
  _has_bits_[0] |= 0x20000000u;
  optional_nested_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_nested_enum)
}

// optional .protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
inline bool TestAllTypesLite::has_optional_foreign_enum() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TestAllTypesLite::clear_optional_foreign_enum() {
  optional_foreign_enum_ = 4;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::protobuf_unittest::ForeignEnumLite TestAllTypesLite::optional_foreign_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_foreign_enum)
  return static_cast< ::protobuf_unittest::ForeignEnumLite >(optional_foreign_enum_);
}
inline void TestAllTypesLite::set_optional_foreign_enum(::protobuf_unittest::ForeignEnumLite value) {
  assert(::protobuf_unittest::ForeignEnumLite_IsValid(value));
  _has_bits_[0] |= 0x40000000u;
  optional_foreign_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_foreign_enum)
}

// optional .protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
inline bool TestAllTypesLite::has_optional_import_enum() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TestAllTypesLite::clear_optional_import_enum() {
  optional_import_enum_ = 7;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::protobuf_unittest_import::ImportEnumLite TestAllTypesLite::optional_import_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_import_enum)
  return static_cast< ::protobuf_unittest_import::ImportEnumLite >(optional_import_enum_);
}
inline void TestAllTypesLite::set_optional_import_enum(::protobuf_unittest_import::ImportEnumLite value) {
  assert(::protobuf_unittest_import::ImportEnumLite_IsValid(value));
  _has_bits_[0] |= 0x80000000u;
  optional_import_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_import_enum)
}

// optional string optional_string_piece = 24 [ctype = STRING_PIECE];
inline bool TestAllTypesLite::has_optional_string_piece() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestAllTypesLite::clear_optional_string_piece() {
  optional_string_piece_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestAllTypesLite::optional_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_string_piece)
  return optional_string_piece_.GetNoArena();
}
inline void TestAllTypesLite::set_optional_string_piece(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  optional_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_string_piece)
}
inline void TestAllTypesLite::set_optional_string_piece(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  optional_string_piece_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.optional_string_piece)
}
inline void TestAllTypesLite::set_optional_string_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  optional_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.optional_string_piece)
}
inline void TestAllTypesLite::set_optional_string_piece(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  optional_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.optional_string_piece)
}
inline std::string* TestAllTypesLite::mutable_optional_string_piece() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_string_piece)
  return optional_string_piece_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestAllTypesLite::release_optional_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_string_piece)
  if (!has_optional_string_piece()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return optional_string_piece_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestAllTypesLite::set_allocated_optional_string_piece(std::string* optional_string_piece) {
  if (optional_string_piece != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optional_string_piece_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_string_piece);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_string_piece)
}

// optional string optional_cord = 25 [ctype = CORD];
inline bool TestAllTypesLite::has_optional_cord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestAllTypesLite::clear_optional_cord() {
  optional_cord_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TestAllTypesLite::optional_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_cord)
  return optional_cord_.GetNoArena();
}
inline void TestAllTypesLite::set_optional_cord(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  optional_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.optional_cord)
}
inline void TestAllTypesLite::set_optional_cord(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  optional_cord_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.optional_cord)
}
inline void TestAllTypesLite::set_optional_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  optional_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.optional_cord)
}
inline void TestAllTypesLite::set_optional_cord(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  optional_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.optional_cord)
}
inline std::string* TestAllTypesLite::mutable_optional_cord() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_cord)
  return optional_cord_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestAllTypesLite::release_optional_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_cord)
  if (!has_optional_cord()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return optional_cord_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestAllTypesLite::set_allocated_optional_cord(std::string* optional_cord) {
  if (optional_cord != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  optional_cord_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_cord);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_cord)
}

// optional .protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
inline bool TestAllTypesLite::has_optional_public_import_message() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::protobuf_unittest_import::PublicImportMessageLite& TestAllTypesLite::optional_public_import_message() const {
  const ::protobuf_unittest_import::PublicImportMessageLite* p = optional_public_import_message_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_public_import_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest_import::PublicImportMessageLite*>(
      &::protobuf_unittest_import::_PublicImportMessageLite_default_instance_);
}
inline ::protobuf_unittest_import::PublicImportMessageLite* TestAllTypesLite::release_optional_public_import_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_public_import_message)
  _has_bits_[0] &= ~0x00001000u;
  ::protobuf_unittest_import::PublicImportMessageLite* temp = optional_public_import_message_;
  optional_public_import_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest_import::PublicImportMessageLite* TestAllTypesLite::mutable_optional_public_import_message() {
  _has_bits_[0] |= 0x00001000u;
  if (optional_public_import_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest_import::PublicImportMessageLite>(GetArenaNoVirtual());
    optional_public_import_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_public_import_message)
  return optional_public_import_message_;
}
inline void TestAllTypesLite::set_allocated_optional_public_import_message(::protobuf_unittest_import::PublicImportMessageLite* optional_public_import_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_public_import_message_);
  }
  if (optional_public_import_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional_public_import_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_public_import_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  optional_public_import_message_ = optional_public_import_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_public_import_message)
}

// optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27 [lazy = true];
inline bool TestAllTypesLite::has_optional_lazy_message() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TestAllTypesLite::clear_optional_lazy_message() {
  if (optional_lazy_message_ != nullptr) optional_lazy_message_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::protobuf_unittest::TestAllTypesLite_NestedMessage& TestAllTypesLite::optional_lazy_message() const {
  const ::protobuf_unittest::TestAllTypesLite_NestedMessage* p = optional_lazy_message_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.optional_lazy_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite_NestedMessage*>(
      &::protobuf_unittest::_TestAllTypesLite_NestedMessage_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::release_optional_lazy_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.optional_lazy_message)
  _has_bits_[0] &= ~0x00002000u;
  ::protobuf_unittest::TestAllTypesLite_NestedMessage* temp = optional_lazy_message_;
  optional_lazy_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::mutable_optional_lazy_message() {
  _has_bits_[0] |= 0x00002000u;
  if (optional_lazy_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite_NestedMessage>(GetArenaNoVirtual());
    optional_lazy_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.optional_lazy_message)
  return optional_lazy_message_;
}
inline void TestAllTypesLite::set_allocated_optional_lazy_message(::protobuf_unittest::TestAllTypesLite_NestedMessage* optional_lazy_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optional_lazy_message_;
  }
  if (optional_lazy_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional_lazy_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_lazy_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  optional_lazy_message_ = optional_lazy_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.optional_lazy_message)
}

// repeated int32 repeated_int32 = 31;
inline int TestAllTypesLite::repeated_int32_size() const {
  return repeated_int32_.size();
}
inline void TestAllTypesLite::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_int32)
  return repeated_int32_.Get(index);
}
inline void TestAllTypesLite::set_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_int32)
}
inline void TestAllTypesLite::add_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestAllTypesLite::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_int32)
  return repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestAllTypesLite::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_int32)
  return &repeated_int32_;
}

// repeated int64 repeated_int64 = 32;
inline int TestAllTypesLite::repeated_int64_size() const {
  return repeated_int64_.size();
}
inline void TestAllTypesLite::clear_repeated_int64() {
  repeated_int64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::repeated_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_int64)
  return repeated_int64_.Get(index);
}
inline void TestAllTypesLite::set_repeated_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  repeated_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_int64)
}
inline void TestAllTypesLite::add_repeated_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  repeated_int64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestAllTypesLite::repeated_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_int64)
  return repeated_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestAllTypesLite::mutable_repeated_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_int64)
  return &repeated_int64_;
}

// repeated uint32 repeated_uint32 = 33;
inline int TestAllTypesLite::repeated_uint32_size() const {
  return repeated_uint32_.size();
}
inline void TestAllTypesLite::clear_repeated_uint32() {
  repeated_uint32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestAllTypesLite::repeated_uint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_uint32)
  return repeated_uint32_.Get(index);
}
inline void TestAllTypesLite::set_repeated_uint32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_uint32)
}
inline void TestAllTypesLite::add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_uint32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TestAllTypesLite::repeated_uint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_uint32)
  return repeated_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TestAllTypesLite::mutable_repeated_uint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_uint32)
  return &repeated_uint32_;
}

// repeated uint64 repeated_uint64 = 34;
inline int TestAllTypesLite::repeated_uint64_size() const {
  return repeated_uint64_.size();
}
inline void TestAllTypesLite::clear_repeated_uint64() {
  repeated_uint64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestAllTypesLite::repeated_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_uint64)
  return repeated_uint64_.Get(index);
}
inline void TestAllTypesLite::set_repeated_uint64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  repeated_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_uint64)
}
inline void TestAllTypesLite::add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  repeated_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TestAllTypesLite::repeated_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_uint64)
  return repeated_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TestAllTypesLite::mutable_repeated_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_uint64)
  return &repeated_uint64_;
}

// repeated sint32 repeated_sint32 = 35;
inline int TestAllTypesLite::repeated_sint32_size() const {
  return repeated_sint32_.size();
}
inline void TestAllTypesLite::clear_repeated_sint32() {
  repeated_sint32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::repeated_sint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_sint32)
  return repeated_sint32_.Get(index);
}
inline void TestAllTypesLite::set_repeated_sint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_sint32)
}
inline void TestAllTypesLite::add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_sint32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestAllTypesLite::repeated_sint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_sint32)
  return repeated_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestAllTypesLite::mutable_repeated_sint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_sint32)
  return &repeated_sint32_;
}

// repeated sint64 repeated_sint64 = 36;
inline int TestAllTypesLite::repeated_sint64_size() const {
  return repeated_sint64_.size();
}
inline void TestAllTypesLite::clear_repeated_sint64() {
  repeated_sint64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::repeated_sint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_sint64)
  return repeated_sint64_.Get(index);
}
inline void TestAllTypesLite::set_repeated_sint64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  repeated_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_sint64)
}
inline void TestAllTypesLite::add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  repeated_sint64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestAllTypesLite::repeated_sint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_sint64)
  return repeated_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestAllTypesLite::mutable_repeated_sint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_sint64)
  return &repeated_sint64_;
}

// repeated fixed32 repeated_fixed32 = 37;
inline int TestAllTypesLite::repeated_fixed32_size() const {
  return repeated_fixed32_.size();
}
inline void TestAllTypesLite::clear_repeated_fixed32() {
  repeated_fixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestAllTypesLite::repeated_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_fixed32)
  return repeated_fixed32_.Get(index);
}
inline void TestAllTypesLite::set_repeated_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_fixed32)
}
inline void TestAllTypesLite::add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_fixed32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TestAllTypesLite::repeated_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_fixed32)
  return repeated_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TestAllTypesLite::mutable_repeated_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_fixed32)
  return &repeated_fixed32_;
}

// repeated fixed64 repeated_fixed64 = 38;
inline int TestAllTypesLite::repeated_fixed64_size() const {
  return repeated_fixed64_.size();
}
inline void TestAllTypesLite::clear_repeated_fixed64() {
  repeated_fixed64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestAllTypesLite::repeated_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_fixed64)
  return repeated_fixed64_.Get(index);
}
inline void TestAllTypesLite::set_repeated_fixed64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  repeated_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_fixed64)
}
inline void TestAllTypesLite::add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  repeated_fixed64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TestAllTypesLite::repeated_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_fixed64)
  return repeated_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TestAllTypesLite::mutable_repeated_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_fixed64)
  return &repeated_fixed64_;
}

// repeated sfixed32 repeated_sfixed32 = 39;
inline int TestAllTypesLite::repeated_sfixed32_size() const {
  return repeated_sfixed32_.size();
}
inline void TestAllTypesLite::clear_repeated_sfixed32() {
  repeated_sfixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::repeated_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_sfixed32)
  return repeated_sfixed32_.Get(index);
}
inline void TestAllTypesLite::set_repeated_sfixed32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_sfixed32)
}
inline void TestAllTypesLite::add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_sfixed32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestAllTypesLite::repeated_sfixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_sfixed32)
  return repeated_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestAllTypesLite::mutable_repeated_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_sfixed32)
  return &repeated_sfixed32_;
}

// repeated sfixed64 repeated_sfixed64 = 40;
inline int TestAllTypesLite::repeated_sfixed64_size() const {
  return repeated_sfixed64_.size();
}
inline void TestAllTypesLite::clear_repeated_sfixed64() {
  repeated_sfixed64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::repeated_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_sfixed64)
  return repeated_sfixed64_.Get(index);
}
inline void TestAllTypesLite::set_repeated_sfixed64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  repeated_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_sfixed64)
}
inline void TestAllTypesLite::add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  repeated_sfixed64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestAllTypesLite::repeated_sfixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_sfixed64)
  return repeated_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestAllTypesLite::mutable_repeated_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_sfixed64)
  return &repeated_sfixed64_;
}

// repeated float repeated_float = 41;
inline int TestAllTypesLite::repeated_float_size() const {
  return repeated_float_.size();
}
inline void TestAllTypesLite::clear_repeated_float() {
  repeated_float_.Clear();
}
inline float TestAllTypesLite::repeated_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_float)
  return repeated_float_.Get(index);
}
inline void TestAllTypesLite::set_repeated_float(int index, float value) {
  repeated_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_float)
}
inline void TestAllTypesLite::add_repeated_float(float value) {
  repeated_float_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypesLite::repeated_float() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_float)
  return repeated_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypesLite::mutable_repeated_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_float)
  return &repeated_float_;
}

// repeated double repeated_double = 42;
inline int TestAllTypesLite::repeated_double_size() const {
  return repeated_double_.size();
}
inline void TestAllTypesLite::clear_repeated_double() {
  repeated_double_.Clear();
}
inline double TestAllTypesLite::repeated_double(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_double)
  return repeated_double_.Get(index);
}
inline void TestAllTypesLite::set_repeated_double(int index, double value) {
  repeated_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_double)
}
inline void TestAllTypesLite::add_repeated_double(double value) {
  repeated_double_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypesLite::repeated_double() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_double)
  return repeated_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypesLite::mutable_repeated_double() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_double)
  return &repeated_double_;
}

// repeated bool repeated_bool = 43;
inline int TestAllTypesLite::repeated_bool_size() const {
  return repeated_bool_.size();
}
inline void TestAllTypesLite::clear_repeated_bool() {
  repeated_bool_.Clear();
}
inline bool TestAllTypesLite::repeated_bool(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_bool)
  return repeated_bool_.Get(index);
}
inline void TestAllTypesLite::set_repeated_bool(int index, bool value) {
  repeated_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_bool)
}
inline void TestAllTypesLite::add_repeated_bool(bool value) {
  repeated_bool_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypesLite::repeated_bool() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_bool)
  return repeated_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypesLite::mutable_repeated_bool() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_bool)
  return &repeated_bool_;
}

// repeated string repeated_string = 44;
inline int TestAllTypesLite::repeated_string_size() const {
  return repeated_string_.size();
}
inline void TestAllTypesLite::clear_repeated_string() {
  repeated_string_.Clear();
}
inline const std::string& TestAllTypesLite::repeated_string(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_string)
  return repeated_string_.Get(index);
}
inline std::string* TestAllTypesLite::mutable_repeated_string(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeated_string)
  return repeated_string_.Mutable(index);
}
inline void TestAllTypesLite::set_repeated_string(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_string)
  repeated_string_.Mutable(index)->assign(value);
}
inline void TestAllTypesLite::set_repeated_string(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_string)
  repeated_string_.Mutable(index)->assign(std::move(value));
}
inline void TestAllTypesLite::set_repeated_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.repeated_string)
}
inline void TestAllTypesLite::set_repeated_string(int index, const char* value, size_t size) {
  repeated_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.repeated_string)
}
inline std::string* TestAllTypesLite::add_repeated_string() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestAllTypesLite.repeated_string)
  return repeated_string_.Add();
}
inline void TestAllTypesLite::add_repeated_string(const std::string& value) {
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_string)
}
inline void TestAllTypesLite::add_repeated_string(std::string&& value) {
  repeated_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_string)
}
inline void TestAllTypesLite::add_repeated_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestAllTypesLite.repeated_string)
}
inline void TestAllTypesLite::add_repeated_string(const char* value, size_t size) {
  repeated_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestAllTypesLite.repeated_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypesLite::repeated_string() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_string)
  return repeated_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypesLite::mutable_repeated_string() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_string)
  return &repeated_string_;
}

// repeated bytes repeated_bytes = 45;
inline int TestAllTypesLite::repeated_bytes_size() const {
  return repeated_bytes_.size();
}
inline void TestAllTypesLite::clear_repeated_bytes() {
  repeated_bytes_.Clear();
}
inline const std::string& TestAllTypesLite::repeated_bytes(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_bytes)
  return repeated_bytes_.Get(index);
}
inline std::string* TestAllTypesLite::mutable_repeated_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeated_bytes)
  return repeated_bytes_.Mutable(index);
}
inline void TestAllTypesLite::set_repeated_bytes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_bytes)
  repeated_bytes_.Mutable(index)->assign(value);
}
inline void TestAllTypesLite::set_repeated_bytes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_bytes)
  repeated_bytes_.Mutable(index)->assign(std::move(value));
}
inline void TestAllTypesLite::set_repeated_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.repeated_bytes)
}
inline void TestAllTypesLite::set_repeated_bytes(int index, const void* value, size_t size) {
  repeated_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.repeated_bytes)
}
inline std::string* TestAllTypesLite::add_repeated_bytes() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestAllTypesLite.repeated_bytes)
  return repeated_bytes_.Add();
}
inline void TestAllTypesLite::add_repeated_bytes(const std::string& value) {
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_bytes)
}
inline void TestAllTypesLite::add_repeated_bytes(std::string&& value) {
  repeated_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_bytes)
}
inline void TestAllTypesLite::add_repeated_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestAllTypesLite.repeated_bytes)
}
inline void TestAllTypesLite::add_repeated_bytes(const void* value, size_t size) {
  repeated_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestAllTypesLite.repeated_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypesLite::repeated_bytes() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_bytes)
  return repeated_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypesLite::mutable_repeated_bytes() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_bytes)
  return &repeated_bytes_;
}

// repeated group RepeatedGroup = 46 { ... };
inline int TestAllTypesLite::repeatedgroup_size() const {
  return repeatedgroup_.size();
}
inline void TestAllTypesLite::clear_repeatedgroup() {
  repeatedgroup_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite_RepeatedGroup* TestAllTypesLite::mutable_repeatedgroup(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeatedgroup)
  return repeatedgroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_RepeatedGroup >*
TestAllTypesLite::mutable_repeatedgroup() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeatedgroup)
  return &repeatedgroup_;
}
inline const ::protobuf_unittest::TestAllTypesLite_RepeatedGroup& TestAllTypesLite::repeatedgroup(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeatedgroup)
  return repeatedgroup_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite_RepeatedGroup* TestAllTypesLite::add_repeatedgroup() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeatedgroup)
  return repeatedgroup_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_RepeatedGroup >&
TestAllTypesLite::repeatedgroup() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeatedgroup)
  return repeatedgroup_;
}

// repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
inline int TestAllTypesLite::repeated_nested_message_size() const {
  return repeated_nested_message_.size();
}
inline void TestAllTypesLite::clear_repeated_nested_message() {
  repeated_nested_message_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::mutable_repeated_nested_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeated_nested_message)
  return repeated_nested_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage >*
TestAllTypesLite::mutable_repeated_nested_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_nested_message)
  return &repeated_nested_message_;
}
inline const ::protobuf_unittest::TestAllTypesLite_NestedMessage& TestAllTypesLite::repeated_nested_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_nested_message)
  return repeated_nested_message_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::add_repeated_nested_message() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_nested_message)
  return repeated_nested_message_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage >&
TestAllTypesLite::repeated_nested_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_nested_message)
  return repeated_nested_message_;
}

// repeated .protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
inline int TestAllTypesLite::repeated_foreign_message_size() const {
  return repeated_foreign_message_.size();
}
inline void TestAllTypesLite::clear_repeated_foreign_message() {
  repeated_foreign_message_.Clear();
}
inline ::protobuf_unittest::ForeignMessageLite* TestAllTypesLite::mutable_repeated_foreign_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeated_foreign_message)
  return repeated_foreign_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessageLite >*
TestAllTypesLite::mutable_repeated_foreign_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_foreign_message)
  return &repeated_foreign_message_;
}
inline const ::protobuf_unittest::ForeignMessageLite& TestAllTypesLite::repeated_foreign_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_foreign_message)
  return repeated_foreign_message_.Get(index);
}
inline ::protobuf_unittest::ForeignMessageLite* TestAllTypesLite::add_repeated_foreign_message() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_foreign_message)
  return repeated_foreign_message_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::ForeignMessageLite >&
TestAllTypesLite::repeated_foreign_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_foreign_message)
  return repeated_foreign_message_;
}

// repeated .protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
inline int TestAllTypesLite::repeated_import_message_size() const {
  return repeated_import_message_.size();
}
inline ::protobuf_unittest_import::ImportMessageLite* TestAllTypesLite::mutable_repeated_import_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeated_import_message)
  return repeated_import_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessageLite >*
TestAllTypesLite::mutable_repeated_import_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_import_message)
  return &repeated_import_message_;
}
inline const ::protobuf_unittest_import::ImportMessageLite& TestAllTypesLite::repeated_import_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_import_message)
  return repeated_import_message_.Get(index);
}
inline ::protobuf_unittest_import::ImportMessageLite* TestAllTypesLite::add_repeated_import_message() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_import_message)
  return repeated_import_message_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest_import::ImportMessageLite >&
TestAllTypesLite::repeated_import_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_import_message)
  return repeated_import_message_;
}

// repeated .protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
inline int TestAllTypesLite::repeated_nested_enum_size() const {
  return repeated_nested_enum_.size();
}
inline void TestAllTypesLite::clear_repeated_nested_enum() {
  repeated_nested_enum_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite_NestedEnum TestAllTypesLite::repeated_nested_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_nested_enum)
  return static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(repeated_nested_enum_.Get(index));
}
inline void TestAllTypesLite::set_repeated_nested_enum(int index, ::protobuf_unittest::TestAllTypesLite_NestedEnum value) {
  assert(::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(value));
  repeated_nested_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_nested_enum)
}
inline void TestAllTypesLite::add_repeated_nested_enum(::protobuf_unittest::TestAllTypesLite_NestedEnum value) {
  assert(::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(value));
  repeated_nested_enum_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_nested_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypesLite::repeated_nested_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_nested_enum)
  return repeated_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesLite::mutable_repeated_nested_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_nested_enum)
  return &repeated_nested_enum_;
}

// repeated .protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
inline int TestAllTypesLite::repeated_foreign_enum_size() const {
  return repeated_foreign_enum_.size();
}
inline void TestAllTypesLite::clear_repeated_foreign_enum() {
  repeated_foreign_enum_.Clear();
}
inline ::protobuf_unittest::ForeignEnumLite TestAllTypesLite::repeated_foreign_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_foreign_enum)
  return static_cast< ::protobuf_unittest::ForeignEnumLite >(repeated_foreign_enum_.Get(index));
}
inline void TestAllTypesLite::set_repeated_foreign_enum(int index, ::protobuf_unittest::ForeignEnumLite value) {
  assert(::protobuf_unittest::ForeignEnumLite_IsValid(value));
  repeated_foreign_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_foreign_enum)
}
inline void TestAllTypesLite::add_repeated_foreign_enum(::protobuf_unittest::ForeignEnumLite value) {
  assert(::protobuf_unittest::ForeignEnumLite_IsValid(value));
  repeated_foreign_enum_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_foreign_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypesLite::repeated_foreign_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_foreign_enum)
  return repeated_foreign_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesLite::mutable_repeated_foreign_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_foreign_enum)
  return &repeated_foreign_enum_;
}

// repeated .protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
inline int TestAllTypesLite::repeated_import_enum_size() const {
  return repeated_import_enum_.size();
}
inline void TestAllTypesLite::clear_repeated_import_enum() {
  repeated_import_enum_.Clear();
}
inline ::protobuf_unittest_import::ImportEnumLite TestAllTypesLite::repeated_import_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_import_enum)
  return static_cast< ::protobuf_unittest_import::ImportEnumLite >(repeated_import_enum_.Get(index));
}
inline void TestAllTypesLite::set_repeated_import_enum(int index, ::protobuf_unittest_import::ImportEnumLite value) {
  assert(::protobuf_unittest_import::ImportEnumLite_IsValid(value));
  repeated_import_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_import_enum)
}
inline void TestAllTypesLite::add_repeated_import_enum(::protobuf_unittest_import::ImportEnumLite value) {
  assert(::protobuf_unittest_import::ImportEnumLite_IsValid(value));
  repeated_import_enum_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_import_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypesLite::repeated_import_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_import_enum)
  return repeated_import_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesLite::mutable_repeated_import_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_import_enum)
  return &repeated_import_enum_;
}

// repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
inline int TestAllTypesLite::repeated_string_piece_size() const {
  return repeated_string_piece_.size();
}
inline void TestAllTypesLite::clear_repeated_string_piece() {
  repeated_string_piece_.Clear();
}
inline const std::string& TestAllTypesLite::repeated_string_piece(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
  return repeated_string_piece_.Get(index);
}
inline std::string* TestAllTypesLite::mutable_repeated_string_piece(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
  return repeated_string_piece_.Mutable(index);
}
inline void TestAllTypesLite::set_repeated_string_piece(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
  repeated_string_piece_.Mutable(index)->assign(value);
}
inline void TestAllTypesLite::set_repeated_string_piece(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
  repeated_string_piece_.Mutable(index)->assign(std::move(value));
}
inline void TestAllTypesLite::set_repeated_string_piece(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_piece_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
}
inline void TestAllTypesLite::set_repeated_string_piece(int index, const char* value, size_t size) {
  repeated_string_piece_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
}
inline std::string* TestAllTypesLite::add_repeated_string_piece() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
  return repeated_string_piece_.Add();
}
inline void TestAllTypesLite::add_repeated_string_piece(const std::string& value) {
  repeated_string_piece_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
}
inline void TestAllTypesLite::add_repeated_string_piece(std::string&& value) {
  repeated_string_piece_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
}
inline void TestAllTypesLite::add_repeated_string_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_string_piece_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
}
inline void TestAllTypesLite::add_repeated_string_piece(const char* value, size_t size) {
  repeated_string_piece_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypesLite::repeated_string_piece() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
  return repeated_string_piece_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypesLite::mutable_repeated_string_piece() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_string_piece)
  return &repeated_string_piece_;
}

// repeated string repeated_cord = 55 [ctype = CORD];
inline int TestAllTypesLite::repeated_cord_size() const {
  return repeated_cord_.size();
}
inline void TestAllTypesLite::clear_repeated_cord() {
  repeated_cord_.Clear();
}
inline const std::string& TestAllTypesLite::repeated_cord(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_cord)
  return repeated_cord_.Get(index);
}
inline std::string* TestAllTypesLite::mutable_repeated_cord(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeated_cord)
  return repeated_cord_.Mutable(index);
}
inline void TestAllTypesLite::set_repeated_cord(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_cord)
  repeated_cord_.Mutable(index)->assign(value);
}
inline void TestAllTypesLite::set_repeated_cord(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.repeated_cord)
  repeated_cord_.Mutable(index)->assign(std::move(value));
}
inline void TestAllTypesLite::set_repeated_cord(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_cord_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.repeated_cord)
}
inline void TestAllTypesLite::set_repeated_cord(int index, const char* value, size_t size) {
  repeated_cord_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.repeated_cord)
}
inline std::string* TestAllTypesLite::add_repeated_cord() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_unittest.TestAllTypesLite.repeated_cord)
  return repeated_cord_.Add();
}
inline void TestAllTypesLite::add_repeated_cord(const std::string& value) {
  repeated_cord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_cord)
}
inline void TestAllTypesLite::add_repeated_cord(std::string&& value) {
  repeated_cord_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_cord)
}
inline void TestAllTypesLite::add_repeated_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeated_cord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_unittest.TestAllTypesLite.repeated_cord)
}
inline void TestAllTypesLite::add_repeated_cord(const char* value, size_t size) {
  repeated_cord_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_unittest.TestAllTypesLite.repeated_cord)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypesLite::repeated_cord() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_cord)
  return repeated_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypesLite::mutable_repeated_cord() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_cord)
  return &repeated_cord_;
}

// repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57 [lazy = true];
inline int TestAllTypesLite::repeated_lazy_message_size() const {
  return repeated_lazy_message_.size();
}
inline void TestAllTypesLite::clear_repeated_lazy_message() {
  repeated_lazy_message_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::mutable_repeated_lazy_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.repeated_lazy_message)
  return repeated_lazy_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage >*
TestAllTypesLite::mutable_repeated_lazy_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestAllTypesLite.repeated_lazy_message)
  return &repeated_lazy_message_;
}
inline const ::protobuf_unittest::TestAllTypesLite_NestedMessage& TestAllTypesLite::repeated_lazy_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.repeated_lazy_message)
  return repeated_lazy_message_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::add_repeated_lazy_message() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestAllTypesLite.repeated_lazy_message)
  return repeated_lazy_message_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite_NestedMessage >&
TestAllTypesLite::repeated_lazy_message() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestAllTypesLite.repeated_lazy_message)
  return repeated_lazy_message_;
}

// optional int32 default_int32 = 61 [default = 41];
inline bool TestAllTypesLite::has_default_int32() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TestAllTypesLite::clear_default_int32() {
  default_int32_ = 41;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::default_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_int32)
  return default_int32_;
}
inline void TestAllTypesLite::set_default_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  default_int32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_int32)
}

// optional int64 default_int64 = 62 [default = 42];
inline bool TestAllTypesLite::has_default_int64() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void TestAllTypesLite::clear_default_int64() {
  default_int64_ = PROTOBUF_LONGLONG(42);
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::default_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_int64)
  return default_int64_;
}
inline void TestAllTypesLite::set_default_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000002u;
  default_int64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_int64)
}

// optional uint32 default_uint32 = 63 [default = 43];
inline bool TestAllTypesLite::has_default_uint32() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void TestAllTypesLite::clear_default_uint32() {
  default_uint32_ = 43u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestAllTypesLite::default_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_uint32)
  return default_uint32_;
}
inline void TestAllTypesLite::set_default_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  default_uint32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_uint32)
}

// optional uint64 default_uint64 = 64 [default = 44];
inline bool TestAllTypesLite::has_default_uint64() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void TestAllTypesLite::clear_default_uint64() {
  default_uint64_ = PROTOBUF_ULONGLONG(44);
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestAllTypesLite::default_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_uint64)
  return default_uint64_;
}
inline void TestAllTypesLite::set_default_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000004u;
  default_uint64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_uint64)
}

// optional sint32 default_sint32 = 65 [default = -45];
inline bool TestAllTypesLite::has_default_sint32() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void TestAllTypesLite::clear_default_sint32() {
  default_sint32_ = -45;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::default_sint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_sint32)
  return default_sint32_;
}
inline void TestAllTypesLite::set_default_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  default_sint32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_sint32)
}

// optional sint64 default_sint64 = 66 [default = 46];
inline bool TestAllTypesLite::has_default_sint64() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void TestAllTypesLite::clear_default_sint64() {
  default_sint64_ = PROTOBUF_LONGLONG(46);
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::default_sint64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_sint64)
  return default_sint64_;
}
inline void TestAllTypesLite::set_default_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000020u;
  default_sint64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_sint64)
}

// optional fixed32 default_fixed32 = 67 [default = 47];
inline bool TestAllTypesLite::has_default_fixed32() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void TestAllTypesLite::clear_default_fixed32() {
  default_fixed32_ = 47u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestAllTypesLite::default_fixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_fixed32)
  return default_fixed32_;
}
inline void TestAllTypesLite::set_default_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  default_fixed32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_fixed32)
}

// optional fixed64 default_fixed64 = 68 [default = 48];
inline bool TestAllTypesLite::has_default_fixed64() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void TestAllTypesLite::clear_default_fixed64() {
  default_fixed64_ = PROTOBUF_ULONGLONG(48);
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestAllTypesLite::default_fixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_fixed64)
  return default_fixed64_;
}
inline void TestAllTypesLite::set_default_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000040u;
  default_fixed64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_fixed64)
}

// optional sfixed32 default_sfixed32 = 69 [default = 49];
inline bool TestAllTypesLite::has_default_sfixed32() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void TestAllTypesLite::clear_default_sfixed32() {
  default_sfixed32_ = 49;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::default_sfixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_sfixed32)
  return default_sfixed32_;
}
inline void TestAllTypesLite::set_default_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000100u;
  default_sfixed32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_sfixed32)
}

// optional sfixed64 default_sfixed64 = 70 [default = -50];
inline bool TestAllTypesLite::has_default_sfixed64() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void TestAllTypesLite::clear_default_sfixed64() {
  default_sfixed64_ = PROTOBUF_LONGLONG(-50);
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestAllTypesLite::default_sfixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_sfixed64)
  return default_sfixed64_;
}
inline void TestAllTypesLite::set_default_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000200u;
  default_sfixed64_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_sfixed64)
}

// optional float default_float = 71 [default = 51.5];
inline bool TestAllTypesLite::has_default_float() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void TestAllTypesLite::clear_default_float() {
  default_float_ = 51.5f;
  _has_bits_[1] &= ~0x00000800u;
}
inline float TestAllTypesLite::default_float() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_float)
  return default_float_;
}
inline void TestAllTypesLite::set_default_float(float value) {
  _has_bits_[1] |= 0x00000800u;
  default_float_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_float)
}

// optional double default_double = 72 [default = 52000];
inline bool TestAllTypesLite::has_default_double() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void TestAllTypesLite::clear_default_double() {
  default_double_ = 52000;
  _has_bits_[1] &= ~0x00000400u;
}
inline double TestAllTypesLite::default_double() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_double)
  return default_double_;
}
inline void TestAllTypesLite::set_default_double(double value) {
  _has_bits_[1] |= 0x00000400u;
  default_double_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_double)
}

// optional bool default_bool = 73 [default = true];
inline bool TestAllTypesLite::has_default_bool() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void TestAllTypesLite::clear_default_bool() {
  default_bool_ = true;
  _has_bits_[1] &= ~0x00001000u;
}
inline bool TestAllTypesLite::default_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_bool)
  return default_bool_;
}
inline void TestAllTypesLite::set_default_bool(bool value) {
  _has_bits_[1] |= 0x00001000u;
  default_bool_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_bool)
}

// optional string default_string = 74 [default = "hello"];
inline bool TestAllTypesLite::has_default_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestAllTypesLite::clear_default_string() {
  default_string_.ClearToDefaultNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_.get());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TestAllTypesLite::default_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_string)
  return default_string_.GetNoArena();
}
inline void TestAllTypesLite::set_default_string(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  default_string_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_.get(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_string)
}
inline void TestAllTypesLite::set_default_string(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  default_string_.SetNoArena(
    &::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.default_string)
}
inline void TestAllTypesLite::set_default_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  default_string_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.default_string)
}
inline void TestAllTypesLite::set_default_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  default_string_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.default_string)
}
inline std::string* TestAllTypesLite::mutable_default_string() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.default_string)
  return default_string_.MutableNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_.get());
}
inline std::string* TestAllTypesLite::release_default_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.default_string)
  if (!has_default_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return default_string_.ReleaseNonDefaultNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_.get());
}
inline void TestAllTypesLite::set_allocated_default_string(std::string* default_string) {
  if (default_string != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  default_string_.SetAllocatedNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_.get(), default_string);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.default_string)
}

// optional bytes default_bytes = 75 [default = "world"];
inline bool TestAllTypesLite::has_default_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TestAllTypesLite::clear_default_bytes() {
  default_bytes_.ClearToDefaultNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_.get());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TestAllTypesLite::default_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_bytes)
  return default_bytes_.GetNoArena();
}
inline void TestAllTypesLite::set_default_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  default_bytes_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_.get(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_bytes)
}
inline void TestAllTypesLite::set_default_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  default_bytes_.SetNoArena(
    &::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.default_bytes)
}
inline void TestAllTypesLite::set_default_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  default_bytes_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.default_bytes)
}
inline void TestAllTypesLite::set_default_bytes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  default_bytes_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.default_bytes)
}
inline std::string* TestAllTypesLite::mutable_default_bytes() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.default_bytes)
  return default_bytes_.MutableNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_.get());
}
inline std::string* TestAllTypesLite::release_default_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.default_bytes)
  if (!has_default_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return default_bytes_.ReleaseNonDefaultNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_.get());
}
inline void TestAllTypesLite::set_allocated_default_bytes(std::string* default_bytes) {
  if (default_bytes != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  default_bytes_.SetAllocatedNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_bytes_.get(), default_bytes);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.default_bytes)
}

// optional .protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81 [default = BAR];
inline bool TestAllTypesLite::has_default_nested_enum() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void TestAllTypesLite::clear_default_nested_enum() {
  default_nested_enum_ = 2;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::protobuf_unittest::TestAllTypesLite_NestedEnum TestAllTypesLite::default_nested_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_nested_enum)
  return static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(default_nested_enum_);
}
inline void TestAllTypesLite::set_default_nested_enum(::protobuf_unittest::TestAllTypesLite_NestedEnum value) {
  assert(::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(value));
  _has_bits_[1] |= 0x00002000u;
  default_nested_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_nested_enum)
}

// optional .protobuf_unittest.ForeignEnumLite default_foreign_enum = 82 [default = FOREIGN_LITE_BAR];
inline bool TestAllTypesLite::has_default_foreign_enum() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void TestAllTypesLite::clear_default_foreign_enum() {
  default_foreign_enum_ = 5;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::protobuf_unittest::ForeignEnumLite TestAllTypesLite::default_foreign_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_foreign_enum)
  return static_cast< ::protobuf_unittest::ForeignEnumLite >(default_foreign_enum_);
}
inline void TestAllTypesLite::set_default_foreign_enum(::protobuf_unittest::ForeignEnumLite value) {
  assert(::protobuf_unittest::ForeignEnumLite_IsValid(value));
  _has_bits_[1] |= 0x00004000u;
  default_foreign_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_foreign_enum)
}

// optional .protobuf_unittest_import.ImportEnumLite default_import_enum = 83 [default = IMPORT_LITE_BAR];
inline bool TestAllTypesLite::has_default_import_enum() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TestAllTypesLite::clear_default_import_enum() {
  default_import_enum_ = 8;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::protobuf_unittest_import::ImportEnumLite TestAllTypesLite::default_import_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_import_enum)
  return static_cast< ::protobuf_unittest_import::ImportEnumLite >(default_import_enum_);
}
inline void TestAllTypesLite::set_default_import_enum(::protobuf_unittest_import::ImportEnumLite value) {
  assert(::protobuf_unittest_import::ImportEnumLite_IsValid(value));
  _has_bits_[0] |= 0x10000000u;
  default_import_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_import_enum)
}

// optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
inline bool TestAllTypesLite::has_default_string_piece() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TestAllTypesLite::clear_default_string_piece() {
  default_string_piece_.ClearToDefaultNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_.get());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TestAllTypesLite::default_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_string_piece)
  return default_string_piece_.GetNoArena();
}
inline void TestAllTypesLite::set_default_string_piece(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  default_string_piece_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_.get(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_string_piece)
}
inline void TestAllTypesLite::set_default_string_piece(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  default_string_piece_.SetNoArena(
    &::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.default_string_piece)
}
inline void TestAllTypesLite::set_default_string_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  default_string_piece_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.default_string_piece)
}
inline void TestAllTypesLite::set_default_string_piece(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  default_string_piece_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.default_string_piece)
}
inline std::string* TestAllTypesLite::mutable_default_string_piece() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.default_string_piece)
  return default_string_piece_.MutableNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_.get());
}
inline std::string* TestAllTypesLite::release_default_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.default_string_piece)
  if (!has_default_string_piece()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return default_string_piece_.ReleaseNonDefaultNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_.get());
}
inline void TestAllTypesLite::set_allocated_default_string_piece(std::string* default_string_piece) {
  if (default_string_piece != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  default_string_piece_.SetAllocatedNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_string_piece_.get(), default_string_piece);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.default_string_piece)
}

// optional string default_cord = 85 [default = "123", ctype = CORD];
inline bool TestAllTypesLite::has_default_cord() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TestAllTypesLite::clear_default_cord() {
  default_cord_.ClearToDefaultNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_.get());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& TestAllTypesLite::default_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.default_cord)
  return default_cord_.GetNoArena();
}
inline void TestAllTypesLite::set_default_cord(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  default_cord_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_.get(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.default_cord)
}
inline void TestAllTypesLite::set_default_cord(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  default_cord_.SetNoArena(
    &::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.default_cord)
}
inline void TestAllTypesLite::set_default_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  default_cord_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.default_cord)
}
inline void TestAllTypesLite::set_default_cord(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  default_cord_.SetNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.default_cord)
}
inline std::string* TestAllTypesLite::mutable_default_cord() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.default_cord)
  return default_cord_.MutableNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_.get());
}
inline std::string* TestAllTypesLite::release_default_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.default_cord)
  if (!has_default_cord()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return default_cord_.ReleaseNonDefaultNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_.get());
}
inline void TestAllTypesLite::set_allocated_default_cord(std::string* default_cord) {
  if (default_cord != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  default_cord_.SetAllocatedNoArena(&::protobuf_unittest::TestAllTypesLite::_i_give_permission_to_break_this_code_default_default_cord_.get(), default_cord);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.default_cord)
}

// optional uint32 oneof_uint32 = 111;
inline bool TestAllTypesLite::has_oneof_uint32() const {
  return oneof_field_case() == kOneofUint32;
}
inline void TestAllTypesLite::set_has_oneof_uint32() {
  _oneof_case_[0] = kOneofUint32;
}
inline void TestAllTypesLite::clear_oneof_uint32() {
  if (has_oneof_uint32()) {
    oneof_field_.oneof_uint32_ = 0u;
    clear_has_oneof_field();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestAllTypesLite::oneof_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.oneof_uint32)
  if (has_oneof_uint32()) {
    return oneof_field_.oneof_uint32_;
  }
  return 0u;
}
inline void TestAllTypesLite::set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_oneof_uint32()) {
    clear_oneof_field();
    set_has_oneof_uint32();
  }
  oneof_field_.oneof_uint32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.oneof_uint32)
}

// optional .protobuf_unittest.TestAllTypesLite.NestedMessage oneof_nested_message = 112;
inline bool TestAllTypesLite::has_oneof_nested_message() const {
  return oneof_field_case() == kOneofNestedMessage;
}
inline void TestAllTypesLite::set_has_oneof_nested_message() {
  _oneof_case_[0] = kOneofNestedMessage;
}
inline void TestAllTypesLite::clear_oneof_nested_message() {
  if (has_oneof_nested_message()) {
    delete oneof_field_.oneof_nested_message_;
    clear_has_oneof_field();
  }
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::release_oneof_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.oneof_nested_message)
  if (has_oneof_nested_message()) {
    clear_has_oneof_field();
      ::protobuf_unittest::TestAllTypesLite_NestedMessage* temp = oneof_field_.oneof_nested_message_;
    oneof_field_.oneof_nested_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestAllTypesLite_NestedMessage& TestAllTypesLite::oneof_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.oneof_nested_message)
  return has_oneof_nested_message()
      ? *oneof_field_.oneof_nested_message_
      : *reinterpret_cast< ::protobuf_unittest::TestAllTypesLite_NestedMessage*>(&::protobuf_unittest::_TestAllTypesLite_NestedMessage_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::mutable_oneof_nested_message() {
  if (!has_oneof_nested_message()) {
    clear_oneof_field();
    set_has_oneof_nested_message();
    oneof_field_.oneof_nested_message_ = CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite_NestedMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.oneof_nested_message)
  return oneof_field_.oneof_nested_message_;
}

// optional string oneof_string = 113;
inline bool TestAllTypesLite::has_oneof_string() const {
  return oneof_field_case() == kOneofString;
}
inline void TestAllTypesLite::set_has_oneof_string() {
  _oneof_case_[0] = kOneofString;
}
inline void TestAllTypesLite::clear_oneof_string() {
  if (has_oneof_string()) {
    oneof_field_.oneof_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
inline const std::string& TestAllTypesLite::oneof_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.oneof_string)
  if (has_oneof_string()) {
    return oneof_field_.oneof_string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestAllTypesLite::set_oneof_string(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.oneof_string)
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.oneof_string)
}
inline void TestAllTypesLite::set_oneof_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.oneof_string)
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.oneof_string)
}
inline void TestAllTypesLite::set_oneof_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.oneof_string)
}
inline void TestAllTypesLite::set_oneof_string(const char* value, size_t size) {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.oneof_string)
}
inline std::string* TestAllTypesLite::mutable_oneof_string() {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.oneof_string)
  return oneof_field_.oneof_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestAllTypesLite::release_oneof_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.oneof_string)
  if (has_oneof_string()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TestAllTypesLite::set_allocated_oneof_string(std::string* oneof_string) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_string != nullptr) {
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(oneof_string);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.oneof_string)
}

// optional bytes oneof_bytes = 114;
inline bool TestAllTypesLite::has_oneof_bytes() const {
  return oneof_field_case() == kOneofBytes;
}
inline void TestAllTypesLite::set_has_oneof_bytes() {
  _oneof_case_[0] = kOneofBytes;
}
inline void TestAllTypesLite::clear_oneof_bytes() {
  if (has_oneof_bytes()) {
    oneof_field_.oneof_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
inline const std::string& TestAllTypesLite::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.oneof_bytes)
  if (has_oneof_bytes()) {
    return oneof_field_.oneof_bytes_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestAllTypesLite::set_oneof_bytes(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.oneof_bytes)
}
inline void TestAllTypesLite::set_oneof_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestAllTypesLite.oneof_bytes)
}
inline void TestAllTypesLite::set_oneof_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestAllTypesLite.oneof_bytes)
}
inline void TestAllTypesLite::set_oneof_bytes(const void* value, size_t size) {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestAllTypesLite.oneof_bytes)
}
inline std::string* TestAllTypesLite::mutable_oneof_bytes() {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.oneof_bytes)
  return oneof_field_.oneof_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestAllTypesLite::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.oneof_bytes)
  if (has_oneof_bytes()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TestAllTypesLite::set_allocated_oneof_bytes(std::string* oneof_bytes) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_bytes != nullptr) {
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(oneof_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestAllTypesLite.oneof_bytes)
}

// optional .protobuf_unittest.TestAllTypesLite.NestedMessage oneof_lazy_nested_message = 115 [lazy = true];
inline bool TestAllTypesLite::has_oneof_lazy_nested_message() const {
  return oneof_field_case() == kOneofLazyNestedMessage;
}
inline void TestAllTypesLite::set_has_oneof_lazy_nested_message() {
  _oneof_case_[0] = kOneofLazyNestedMessage;
}
inline void TestAllTypesLite::clear_oneof_lazy_nested_message() {
  if (has_oneof_lazy_nested_message()) {
    delete oneof_field_.oneof_lazy_nested_message_;
    clear_has_oneof_field();
  }
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::release_oneof_lazy_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestAllTypesLite.oneof_lazy_nested_message)
  if (has_oneof_lazy_nested_message()) {
    clear_has_oneof_field();
      ::protobuf_unittest::TestAllTypesLite_NestedMessage* temp = oneof_field_.oneof_lazy_nested_message_;
    oneof_field_.oneof_lazy_nested_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestAllTypesLite_NestedMessage& TestAllTypesLite::oneof_lazy_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.oneof_lazy_nested_message)
  return has_oneof_lazy_nested_message()
      ? *oneof_field_.oneof_lazy_nested_message_
      : *reinterpret_cast< ::protobuf_unittest::TestAllTypesLite_NestedMessage*>(&::protobuf_unittest::_TestAllTypesLite_NestedMessage_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite_NestedMessage* TestAllTypesLite::mutable_oneof_lazy_nested_message() {
  if (!has_oneof_lazy_nested_message()) {
    clear_oneof_field();
    set_has_oneof_lazy_nested_message();
    oneof_field_.oneof_lazy_nested_message_ = CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite_NestedMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestAllTypesLite.oneof_lazy_nested_message)
  return oneof_field_.oneof_lazy_nested_message_;
}

// optional int32 deceptively_named_list = 116;
inline bool TestAllTypesLite::has_deceptively_named_list() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TestAllTypesLite::clear_deceptively_named_list() {
  deceptively_named_list_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestAllTypesLite::deceptively_named_list() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestAllTypesLite.deceptively_named_list)
  return deceptively_named_list_;
}
inline void TestAllTypesLite::set_deceptively_named_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  deceptively_named_list_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestAllTypesLite.deceptively_named_list)
}

inline bool TestAllTypesLite::has_oneof_field() const {
  return oneof_field_case() != ONEOF_FIELD_NOT_SET;
}
inline void TestAllTypesLite::clear_has_oneof_field() {
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}
inline TestAllTypesLite::OneofFieldCase TestAllTypesLite::oneof_field_case() const {
  return TestAllTypesLite::OneofFieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ForeignMessageLite

// optional int32 c = 1;
inline bool ForeignMessageLite::has_c() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForeignMessageLite::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ForeignMessageLite::c() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.ForeignMessageLite.c)
  return c_;
}
inline void ForeignMessageLite::set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  c_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.ForeignMessageLite.c)
}

// -------------------------------------------------------------------

// TestPackedTypesLite

// repeated int32 packed_int32 = 90 [packed = true];
inline int TestPackedTypesLite::packed_int32_size() const {
  return packed_int32_.size();
}
inline void TestPackedTypesLite::clear_packed_int32() {
  packed_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestPackedTypesLite::packed_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_int32)
  return packed_int32_.Get(index);
}
inline void TestPackedTypesLite::set_packed_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  packed_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_int32)
}
inline void TestPackedTypesLite::add_packed_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  packed_int32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestPackedTypesLite::packed_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_int32)
  return packed_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestPackedTypesLite::mutable_packed_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_int32)
  return &packed_int32_;
}

// repeated int64 packed_int64 = 91 [packed = true];
inline int TestPackedTypesLite::packed_int64_size() const {
  return packed_int64_.size();
}
inline void TestPackedTypesLite::clear_packed_int64() {
  packed_int64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestPackedTypesLite::packed_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_int64)
  return packed_int64_.Get(index);
}
inline void TestPackedTypesLite::set_packed_int64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  packed_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_int64)
}
inline void TestPackedTypesLite::add_packed_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  packed_int64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestPackedTypesLite::packed_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_int64)
  return packed_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestPackedTypesLite::mutable_packed_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_int64)
  return &packed_int64_;
}

// repeated uint32 packed_uint32 = 92 [packed = true];
inline int TestPackedTypesLite::packed_uint32_size() const {
  return packed_uint32_.size();
}
inline void TestPackedTypesLite::clear_packed_uint32() {
  packed_uint32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPackedTypesLite::packed_uint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_uint32)
  return packed_uint32_.Get(index);
}
inline void TestPackedTypesLite::set_packed_uint32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  packed_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_uint32)
}
inline void TestPackedTypesLite::add_packed_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  packed_uint32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TestPackedTypesLite::packed_uint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_uint32)
  return packed_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TestPackedTypesLite::mutable_packed_uint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_uint32)
  return &packed_uint32_;
}

// repeated uint64 packed_uint64 = 93 [packed = true];
inline int TestPackedTypesLite::packed_uint64_size() const {
  return packed_uint64_.size();
}
inline void TestPackedTypesLite::clear_packed_uint64() {
  packed_uint64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestPackedTypesLite::packed_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_uint64)
  return packed_uint64_.Get(index);
}
inline void TestPackedTypesLite::set_packed_uint64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  packed_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_uint64)
}
inline void TestPackedTypesLite::add_packed_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  packed_uint64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TestPackedTypesLite::packed_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_uint64)
  return packed_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TestPackedTypesLite::mutable_packed_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_uint64)
  return &packed_uint64_;
}

// repeated sint32 packed_sint32 = 94 [packed = true];
inline int TestPackedTypesLite::packed_sint32_size() const {
  return packed_sint32_.size();
}
inline void TestPackedTypesLite::clear_packed_sint32() {
  packed_sint32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestPackedTypesLite::packed_sint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_sint32)
  return packed_sint32_.Get(index);
}
inline void TestPackedTypesLite::set_packed_sint32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  packed_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_sint32)
}
inline void TestPackedTypesLite::add_packed_sint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  packed_sint32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestPackedTypesLite::packed_sint32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_sint32)
  return packed_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestPackedTypesLite::mutable_packed_sint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_sint32)
  return &packed_sint32_;
}

// repeated sint64 packed_sint64 = 95 [packed = true];
inline int TestPackedTypesLite::packed_sint64_size() const {
  return packed_sint64_.size();
}
inline void TestPackedTypesLite::clear_packed_sint64() {
  packed_sint64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestPackedTypesLite::packed_sint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_sint64)
  return packed_sint64_.Get(index);
}
inline void TestPackedTypesLite::set_packed_sint64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  packed_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_sint64)
}
inline void TestPackedTypesLite::add_packed_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  packed_sint64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestPackedTypesLite::packed_sint64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_sint64)
  return packed_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestPackedTypesLite::mutable_packed_sint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_sint64)
  return &packed_sint64_;
}

// repeated fixed32 packed_fixed32 = 96 [packed = true];
inline int TestPackedTypesLite::packed_fixed32_size() const {
  return packed_fixed32_.size();
}
inline void TestPackedTypesLite::clear_packed_fixed32() {
  packed_fixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPackedTypesLite::packed_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_fixed32)
  return packed_fixed32_.Get(index);
}
inline void TestPackedTypesLite::set_packed_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  packed_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_fixed32)
}
inline void TestPackedTypesLite::add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  packed_fixed32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TestPackedTypesLite::packed_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_fixed32)
  return packed_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TestPackedTypesLite::mutable_packed_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_fixed32)
  return &packed_fixed32_;
}

// repeated fixed64 packed_fixed64 = 97 [packed = true];
inline int TestPackedTypesLite::packed_fixed64_size() const {
  return packed_fixed64_.size();
}
inline void TestPackedTypesLite::clear_packed_fixed64() {
  packed_fixed64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TestPackedTypesLite::packed_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_fixed64)
  return packed_fixed64_.Get(index);
}
inline void TestPackedTypesLite::set_packed_fixed64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  packed_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_fixed64)
}
inline void TestPackedTypesLite::add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  packed_fixed64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TestPackedTypesLite::packed_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_fixed64)
  return packed_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TestPackedTypesLite::mutable_packed_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_fixed64)
  return &packed_fixed64_;
}

// repeated sfixed32 packed_sfixed32 = 98 [packed = true];
inline int TestPackedTypesLite::packed_sfixed32_size() const {
  return packed_sfixed32_.size();
}
inline void TestPackedTypesLite::clear_packed_sfixed32() {
  packed_sfixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestPackedTypesLite::packed_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_sfixed32)
  return packed_sfixed32_.Get(index);
}
inline void TestPackedTypesLite::set_packed_sfixed32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  packed_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_sfixed32)
}
inline void TestPackedTypesLite::add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  packed_sfixed32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestPackedTypesLite::packed_sfixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_sfixed32)
  return packed_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestPackedTypesLite::mutable_packed_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_sfixed32)
  return &packed_sfixed32_;
}

// repeated sfixed64 packed_sfixed64 = 99 [packed = true];
inline int TestPackedTypesLite::packed_sfixed64_size() const {
  return packed_sfixed64_.size();
}
inline void TestPackedTypesLite::clear_packed_sfixed64() {
  packed_sfixed64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TestPackedTypesLite::packed_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_sfixed64)
  return packed_sfixed64_.Get(index);
}
inline void TestPackedTypesLite::set_packed_sfixed64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  packed_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_sfixed64)
}
inline void TestPackedTypesLite::add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  packed_sfixed64_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TestPackedTypesLite::packed_sfixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_sfixed64)
  return packed_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TestPackedTypesLite::mutable_packed_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_sfixed64)
  return &packed_sfixed64_;
}

// repeated float packed_float = 100 [packed = true];
inline int TestPackedTypesLite::packed_float_size() const {
  return packed_float_.size();
}
inline void TestPackedTypesLite::clear_packed_float() {
  packed_float_.Clear();
}
inline float TestPackedTypesLite::packed_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_float)
  return packed_float_.Get(index);
}
inline void TestPackedTypesLite::set_packed_float(int index, float value) {
  packed_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_float)
}
inline void TestPackedTypesLite::add_packed_float(float value) {
  packed_float_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestPackedTypesLite::packed_float() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_float)
  return packed_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestPackedTypesLite::mutable_packed_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_float)
  return &packed_float_;
}

// repeated double packed_double = 101 [packed = true];
inline int TestPackedTypesLite::packed_double_size() const {
  return packed_double_.size();
}
inline void TestPackedTypesLite::clear_packed_double() {
  packed_double_.Clear();
}
inline double TestPackedTypesLite::packed_double(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_double)
  return packed_double_.Get(index);
}
inline void TestPackedTypesLite::set_packed_double(int index, double value) {
  packed_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_double)
}
inline void TestPackedTypesLite::add_packed_double(double value) {
  packed_double_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestPackedTypesLite::packed_double() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_double)
  return packed_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestPackedTypesLite::mutable_packed_double() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_double)
  return &packed_double_;
}

// repeated bool packed_bool = 102 [packed = true];
inline int TestPackedTypesLite::packed_bool_size() const {
  return packed_bool_.size();
}
inline void TestPackedTypesLite::clear_packed_bool() {
  packed_bool_.Clear();
}
inline bool TestPackedTypesLite::packed_bool(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_bool)
  return packed_bool_.Get(index);
}
inline void TestPackedTypesLite::set_packed_bool(int index, bool value) {
  packed_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_bool)
}
inline void TestPackedTypesLite::add_packed_bool(bool value) {
  packed_bool_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestPackedTypesLite::packed_bool() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_bool)
  return packed_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestPackedTypesLite::mutable_packed_bool() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_bool)
  return &packed_bool_;
}

// repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
inline int TestPackedTypesLite::packed_enum_size() const {
  return packed_enum_.size();
}
inline void TestPackedTypesLite::clear_packed_enum() {
  packed_enum_.Clear();
}
inline ::protobuf_unittest::ForeignEnumLite TestPackedTypesLite::packed_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestPackedTypesLite.packed_enum)
  return static_cast< ::protobuf_unittest::ForeignEnumLite >(packed_enum_.Get(index));
}
inline void TestPackedTypesLite::set_packed_enum(int index, ::protobuf_unittest::ForeignEnumLite value) {
  assert(::protobuf_unittest::ForeignEnumLite_IsValid(value));
  packed_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestPackedTypesLite.packed_enum)
}
inline void TestPackedTypesLite::add_packed_enum(::protobuf_unittest::ForeignEnumLite value) {
  assert(::protobuf_unittest::ForeignEnumLite_IsValid(value));
  packed_enum_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestPackedTypesLite.packed_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestPackedTypesLite::packed_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestPackedTypesLite.packed_enum)
  return packed_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestPackedTypesLite::mutable_packed_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestPackedTypesLite.packed_enum)
  return &packed_enum_;
}

// -------------------------------------------------------------------

// TestAllExtensionsLite

// -------------------------------------------------------------------

// OptionalGroup_extension_lite

// optional int32 a = 17;
inline bool OptionalGroup_extension_lite::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionalGroup_extension_lite::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionalGroup_extension_lite::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.OptionalGroup_extension_lite.a)
  return a_;
}
inline void OptionalGroup_extension_lite::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.OptionalGroup_extension_lite.a)
}

// -------------------------------------------------------------------

// RepeatedGroup_extension_lite

// optional int32 a = 47;
inline bool RepeatedGroup_extension_lite::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepeatedGroup_extension_lite::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RepeatedGroup_extension_lite::a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.RepeatedGroup_extension_lite.a)
  return a_;
}
inline void RepeatedGroup_extension_lite::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.RepeatedGroup_extension_lite.a)
}

// -------------------------------------------------------------------

// TestPackedExtensionsLite

// -------------------------------------------------------------------

// TestNestedExtensionLite

// -------------------------------------------------------------------

// TestDeprecatedLite

// optional int32 deprecated_field = 1 [deprecated = true];
inline bool TestDeprecatedLite::has_deprecated_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestDeprecatedLite::clear_deprecated_field() {
  deprecated_field_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestDeprecatedLite::deprecated_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestDeprecatedLite.deprecated_field)
  return deprecated_field_;
}
inline void TestDeprecatedLite::set_deprecated_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  deprecated_field_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestDeprecatedLite.deprecated_field)
}

// -------------------------------------------------------------------

// TestParsingMergeLite_RepeatedFieldsGenerator_Group1

// optional .protobuf_unittest.TestAllTypesLite field1 = 11;
inline bool TestParsingMergeLite_RepeatedFieldsGenerator_Group1::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::clear_field1() {
  if (field1_ != nullptr) field1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_RepeatedFieldsGenerator_Group1::field1() const {
  const ::protobuf_unittest::TestAllTypesLite* p = field1_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1.field1)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite*>(
      &::protobuf_unittest::_TestAllTypesLite_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator_Group1::release_field1() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1.field1)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypesLite* temp = field1_;
  field1_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator_Group1::mutable_field1() {
  _has_bits_[0] |= 0x00000001u;
  if (field1_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite>(GetArenaNoVirtual());
    field1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1.field1)
  return field1_;
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::set_allocated_field1(::protobuf_unittest::TestAllTypesLite* field1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete field1_;
  }
  if (field1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      field1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field1_ = field1;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1.field1)
}

// -------------------------------------------------------------------

// TestParsingMergeLite_RepeatedFieldsGenerator_Group2

// optional .protobuf_unittest.TestAllTypesLite field1 = 21;
inline bool TestParsingMergeLite_RepeatedFieldsGenerator_Group2::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::clear_field1() {
  if (field1_ != nullptr) field1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_RepeatedFieldsGenerator_Group2::field1() const {
  const ::protobuf_unittest::TestAllTypesLite* p = field1_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2.field1)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite*>(
      &::protobuf_unittest::_TestAllTypesLite_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator_Group2::release_field1() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2.field1)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypesLite* temp = field1_;
  field1_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator_Group2::mutable_field1() {
  _has_bits_[0] |= 0x00000001u;
  if (field1_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite>(GetArenaNoVirtual());
    field1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2.field1)
  return field1_;
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::set_allocated_field1(::protobuf_unittest::TestAllTypesLite* field1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete field1_;
  }
  if (field1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      field1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field1_ = field1;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2.field1)
}

// -------------------------------------------------------------------

// TestParsingMergeLite_RepeatedFieldsGenerator

// repeated .protobuf_unittest.TestAllTypesLite field1 = 1;
inline int TestParsingMergeLite_RepeatedFieldsGenerator::field1_size() const {
  return field1_.size();
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator::clear_field1() {
  field1_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::mutable_field1(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field1)
  return field1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
TestParsingMergeLite_RepeatedFieldsGenerator::mutable_field1() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field1)
  return &field1_;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_RepeatedFieldsGenerator::field1(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field1)
  return field1_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::add_field1() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field1)
  return field1_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
TestParsingMergeLite_RepeatedFieldsGenerator::field1() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field1)
  return field1_;
}

// repeated .protobuf_unittest.TestAllTypesLite field2 = 2;
inline int TestParsingMergeLite_RepeatedFieldsGenerator::field2_size() const {
  return field2_.size();
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator::clear_field2() {
  field2_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::mutable_field2(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field2)
  return field2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
TestParsingMergeLite_RepeatedFieldsGenerator::mutable_field2() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field2)
  return &field2_;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_RepeatedFieldsGenerator::field2(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field2)
  return field2_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::add_field2() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field2)
  return field2_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
TestParsingMergeLite_RepeatedFieldsGenerator::field2() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field2)
  return field2_;
}

// repeated .protobuf_unittest.TestAllTypesLite field3 = 3;
inline int TestParsingMergeLite_RepeatedFieldsGenerator::field3_size() const {
  return field3_.size();
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator::clear_field3() {
  field3_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::mutable_field3(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field3)
  return field3_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
TestParsingMergeLite_RepeatedFieldsGenerator::mutable_field3() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field3)
  return &field3_;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_RepeatedFieldsGenerator::field3(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field3)
  return field3_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::add_field3() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field3)
  return field3_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
TestParsingMergeLite_RepeatedFieldsGenerator::field3() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.field3)
  return field3_;
}

// repeated group Group1 = 10 { ... };
inline int TestParsingMergeLite_RepeatedFieldsGenerator::group1_size() const {
  return group1_.size();
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator::clear_group1() {
  group1_.Clear();
}
inline ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1* TestParsingMergeLite_RepeatedFieldsGenerator::mutable_group1(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group1)
  return group1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1 >*
TestParsingMergeLite_RepeatedFieldsGenerator::mutable_group1() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group1)
  return &group1_;
}
inline const ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1& TestParsingMergeLite_RepeatedFieldsGenerator::group1(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group1)
  return group1_.Get(index);
}
inline ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1* TestParsingMergeLite_RepeatedFieldsGenerator::add_group1() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group1)
  return group1_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group1 >&
TestParsingMergeLite_RepeatedFieldsGenerator::group1() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group1)
  return group1_;
}

// repeated group Group2 = 20 { ... };
inline int TestParsingMergeLite_RepeatedFieldsGenerator::group2_size() const {
  return group2_.size();
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator::clear_group2() {
  group2_.Clear();
}
inline ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2* TestParsingMergeLite_RepeatedFieldsGenerator::mutable_group2(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group2)
  return group2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2 >*
TestParsingMergeLite_RepeatedFieldsGenerator::mutable_group2() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group2)
  return &group2_;
}
inline const ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2& TestParsingMergeLite_RepeatedFieldsGenerator::group2(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group2)
  return group2_.Get(index);
}
inline ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2* TestParsingMergeLite_RepeatedFieldsGenerator::add_group2() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group2)
  return group2_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedFieldsGenerator_Group2 >&
TestParsingMergeLite_RepeatedFieldsGenerator::group2() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.group2)
  return group2_;
}

// repeated .protobuf_unittest.TestAllTypesLite ext1 = 1000;
inline int TestParsingMergeLite_RepeatedFieldsGenerator::ext1_size() const {
  return ext1_.size();
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator::clear_ext1() {
  ext1_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::mutable_ext1(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext1)
  return ext1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
TestParsingMergeLite_RepeatedFieldsGenerator::mutable_ext1() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext1)
  return &ext1_;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_RepeatedFieldsGenerator::ext1(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext1)
  return ext1_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::add_ext1() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext1)
  return ext1_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
TestParsingMergeLite_RepeatedFieldsGenerator::ext1() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext1)
  return ext1_;
}

// repeated .protobuf_unittest.TestAllTypesLite ext2 = 1001;
inline int TestParsingMergeLite_RepeatedFieldsGenerator::ext2_size() const {
  return ext2_.size();
}
inline void TestParsingMergeLite_RepeatedFieldsGenerator::clear_ext2() {
  ext2_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::mutable_ext2(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext2)
  return ext2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
TestParsingMergeLite_RepeatedFieldsGenerator::mutable_ext2() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext2)
  return &ext2_;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_RepeatedFieldsGenerator::ext2(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext2)
  return ext2_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedFieldsGenerator::add_ext2() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext2)
  return ext2_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
TestParsingMergeLite_RepeatedFieldsGenerator::ext2() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.ext2)
  return ext2_;
}

// -------------------------------------------------------------------

// TestParsingMergeLite_OptionalGroup

// optional .protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
inline bool TestParsingMergeLite_OptionalGroup::has_optional_group_all_types() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestParsingMergeLite_OptionalGroup::clear_optional_group_all_types() {
  if (optional_group_all_types_ != nullptr) optional_group_all_types_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_OptionalGroup::optional_group_all_types() const {
  const ::protobuf_unittest::TestAllTypesLite* p = optional_group_all_types_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.OptionalGroup.optional_group_all_types)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite*>(
      &::protobuf_unittest::_TestAllTypesLite_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_OptionalGroup::release_optional_group_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMergeLite.OptionalGroup.optional_group_all_types)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypesLite* temp = optional_group_all_types_;
  optional_group_all_types_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_OptionalGroup::mutable_optional_group_all_types() {
  _has_bits_[0] |= 0x00000001u;
  if (optional_group_all_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite>(GetArenaNoVirtual());
    optional_group_all_types_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.OptionalGroup.optional_group_all_types)
  return optional_group_all_types_;
}
inline void TestParsingMergeLite_OptionalGroup::set_allocated_optional_group_all_types(::protobuf_unittest::TestAllTypesLite* optional_group_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optional_group_all_types_;
  }
  if (optional_group_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional_group_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_group_all_types, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_group_all_types_ = optional_group_all_types;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMergeLite.OptionalGroup.optional_group_all_types)
}

// -------------------------------------------------------------------

// TestParsingMergeLite_RepeatedGroup

// optional .protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
inline bool TestParsingMergeLite_RepeatedGroup::has_repeated_group_all_types() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestParsingMergeLite_RepeatedGroup::clear_repeated_group_all_types() {
  if (repeated_group_all_types_ != nullptr) repeated_group_all_types_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite_RepeatedGroup::repeated_group_all_types() const {
  const ::protobuf_unittest::TestAllTypesLite* p = repeated_group_all_types_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.RepeatedGroup.repeated_group_all_types)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite*>(
      &::protobuf_unittest::_TestAllTypesLite_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedGroup::release_repeated_group_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMergeLite.RepeatedGroup.repeated_group_all_types)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypesLite* temp = repeated_group_all_types_;
  repeated_group_all_types_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite_RepeatedGroup::mutable_repeated_group_all_types() {
  _has_bits_[0] |= 0x00000001u;
  if (repeated_group_all_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite>(GetArenaNoVirtual());
    repeated_group_all_types_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.RepeatedGroup.repeated_group_all_types)
  return repeated_group_all_types_;
}
inline void TestParsingMergeLite_RepeatedGroup::set_allocated_repeated_group_all_types(::protobuf_unittest::TestAllTypesLite* repeated_group_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete repeated_group_all_types_;
  }
  if (repeated_group_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      repeated_group_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_group_all_types, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  repeated_group_all_types_ = repeated_group_all_types;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMergeLite.RepeatedGroup.repeated_group_all_types)
}

// -------------------------------------------------------------------

// TestParsingMergeLite

// required .protobuf_unittest.TestAllTypesLite required_all_types = 1;
inline bool TestParsingMergeLite::has_required_all_types() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestParsingMergeLite::clear_required_all_types() {
  if (required_all_types_ != nullptr) required_all_types_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite::required_all_types() const {
  const ::protobuf_unittest::TestAllTypesLite* p = required_all_types_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.required_all_types)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite*>(
      &::protobuf_unittest::_TestAllTypesLite_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite::release_required_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMergeLite.required_all_types)
  _has_bits_[0] &= ~0x00000001u;
  ::protobuf_unittest::TestAllTypesLite* temp = required_all_types_;
  required_all_types_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite::mutable_required_all_types() {
  _has_bits_[0] |= 0x00000001u;
  if (required_all_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite>(GetArenaNoVirtual());
    required_all_types_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.required_all_types)
  return required_all_types_;
}
inline void TestParsingMergeLite::set_allocated_required_all_types(::protobuf_unittest::TestAllTypesLite* required_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete required_all_types_;
  }
  if (required_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      required_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, required_all_types, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  required_all_types_ = required_all_types;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMergeLite.required_all_types)
}

// optional .protobuf_unittest.TestAllTypesLite optional_all_types = 2;
inline bool TestParsingMergeLite::has_optional_all_types() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestParsingMergeLite::clear_optional_all_types() {
  if (optional_all_types_ != nullptr) optional_all_types_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite::optional_all_types() const {
  const ::protobuf_unittest::TestAllTypesLite* p = optional_all_types_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.optional_all_types)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestAllTypesLite*>(
      &::protobuf_unittest::_TestAllTypesLite_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite::release_optional_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMergeLite.optional_all_types)
  _has_bits_[0] &= ~0x00000002u;
  ::protobuf_unittest::TestAllTypesLite* temp = optional_all_types_;
  optional_all_types_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite::mutable_optional_all_types() {
  _has_bits_[0] |= 0x00000002u;
  if (optional_all_types_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestAllTypesLite>(GetArenaNoVirtual());
    optional_all_types_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.optional_all_types)
  return optional_all_types_;
}
inline void TestParsingMergeLite::set_allocated_optional_all_types(::protobuf_unittest::TestAllTypesLite* optional_all_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optional_all_types_;
  }
  if (optional_all_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional_all_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_all_types, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_all_types_ = optional_all_types;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMergeLite.optional_all_types)
}

// repeated .protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
inline int TestParsingMergeLite::repeated_all_types_size() const {
  return repeated_all_types_.size();
}
inline void TestParsingMergeLite::clear_repeated_all_types() {
  repeated_all_types_.Clear();
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite::mutable_repeated_all_types(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.repeated_all_types)
  return repeated_all_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >*
TestParsingMergeLite::mutable_repeated_all_types() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.repeated_all_types)
  return &repeated_all_types_;
}
inline const ::protobuf_unittest::TestAllTypesLite& TestParsingMergeLite::repeated_all_types(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.repeated_all_types)
  return repeated_all_types_.Get(index);
}
inline ::protobuf_unittest::TestAllTypesLite* TestParsingMergeLite::add_repeated_all_types() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.repeated_all_types)
  return repeated_all_types_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestAllTypesLite >&
TestParsingMergeLite::repeated_all_types() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.repeated_all_types)
  return repeated_all_types_;
}

// optional group OptionalGroup = 10 { ... };
inline bool TestParsingMergeLite::has_optionalgroup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestParsingMergeLite::clear_optionalgroup() {
  if (optionalgroup_ != nullptr) optionalgroup_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::TestParsingMergeLite_OptionalGroup& TestParsingMergeLite::optionalgroup() const {
  const ::protobuf_unittest::TestParsingMergeLite_OptionalGroup* p = optionalgroup_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.optionalgroup)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestParsingMergeLite_OptionalGroup*>(
      &::protobuf_unittest::_TestParsingMergeLite_OptionalGroup_default_instance_);
}
inline ::protobuf_unittest::TestParsingMergeLite_OptionalGroup* TestParsingMergeLite::release_optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestParsingMergeLite.optionalgroup)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::TestParsingMergeLite_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestParsingMergeLite_OptionalGroup* TestParsingMergeLite::mutable_optionalgroup() {
  _has_bits_[0] |= 0x00000004u;
  if (optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestParsingMergeLite_OptionalGroup>(GetArenaNoVirtual());
    optionalgroup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.optionalgroup)
  return optionalgroup_;
}
inline void TestParsingMergeLite::set_allocated_optionalgroup(::protobuf_unittest::TestParsingMergeLite_OptionalGroup* optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optionalgroup_;
  }
  if (optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optionalgroup_ = optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestParsingMergeLite.optionalgroup)
}

// repeated group RepeatedGroup = 20 { ... };
inline int TestParsingMergeLite::repeatedgroup_size() const {
  return repeatedgroup_.size();
}
inline void TestParsingMergeLite::clear_repeatedgroup() {
  repeatedgroup_.Clear();
}
inline ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup* TestParsingMergeLite::mutable_repeatedgroup(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestParsingMergeLite.repeatedgroup)
  return repeatedgroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup >*
TestParsingMergeLite::mutable_repeatedgroup() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestParsingMergeLite.repeatedgroup)
  return &repeatedgroup_;
}
inline const ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup& TestParsingMergeLite::repeatedgroup(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestParsingMergeLite.repeatedgroup)
  return repeatedgroup_.Get(index);
}
inline ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup* TestParsingMergeLite::add_repeatedgroup() {
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestParsingMergeLite.repeatedgroup)
  return repeatedgroup_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_unittest::TestParsingMergeLite_RepeatedGroup >&
TestParsingMergeLite::repeatedgroup() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestParsingMergeLite.repeatedgroup)
  return repeatedgroup_;
}

// -------------------------------------------------------------------

// TestEmptyMessageLite

// -------------------------------------------------------------------

// TestEmptyMessageWithExtensionsLite

// -------------------------------------------------------------------

// V1MessageLite

// required int32 int_field = 1;
inline bool V1MessageLite::has_int_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V1MessageLite::clear_int_field() {
  int_field_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V1MessageLite::int_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.V1MessageLite.int_field)
  return int_field_;
}
inline void V1MessageLite::set_int_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  int_field_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.V1MessageLite.int_field)
}

// optional .protobuf_unittest.V1EnumLite enum_field = 2 [default = V1_FIRST];
inline bool V1MessageLite::has_enum_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V1MessageLite::clear_enum_field() {
  enum_field_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protobuf_unittest::V1EnumLite V1MessageLite::enum_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.V1MessageLite.enum_field)
  return static_cast< ::protobuf_unittest::V1EnumLite >(enum_field_);
}
inline void V1MessageLite::set_enum_field(::protobuf_unittest::V1EnumLite value) {
  assert(::protobuf_unittest::V1EnumLite_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  enum_field_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.V1MessageLite.enum_field)
}

// -------------------------------------------------------------------

// V2MessageLite

// required int32 int_field = 1;
inline bool V2MessageLite::has_int_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V2MessageLite::clear_int_field() {
  int_field_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V2MessageLite::int_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.V2MessageLite.int_field)
  return int_field_;
}
inline void V2MessageLite::set_int_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  int_field_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.V2MessageLite.int_field)
}

// optional .protobuf_unittest.V2EnumLite enum_field = 2 [default = V2_FIRST];
inline bool V2MessageLite::has_enum_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V2MessageLite::clear_enum_field() {
  enum_field_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protobuf_unittest::V2EnumLite V2MessageLite::enum_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.V2MessageLite.enum_field)
  return static_cast< ::protobuf_unittest::V2EnumLite >(enum_field_);
}
inline void V2MessageLite::set_enum_field(::protobuf_unittest::V2EnumLite value) {
  assert(::protobuf_unittest::V2EnumLite_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  enum_field_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.V2MessageLite.enum_field)
}

// -------------------------------------------------------------------

// TestHugeFieldNumbersLite_OptionalGroup

// optional int32 group_a = 536870009;
inline bool TestHugeFieldNumbersLite_OptionalGroup::has_group_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestHugeFieldNumbersLite_OptionalGroup::clear_group_a() {
  group_a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestHugeFieldNumbersLite_OptionalGroup::group_a() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup.group_a)
  return group_a_;
}
inline void TestHugeFieldNumbersLite_OptionalGroup::set_group_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  group_a_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.OptionalGroup.group_a)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestHugeFieldNumbersLite

// optional int32 optional_int32 = 536870000;
inline bool TestHugeFieldNumbersLite::has_optional_int32() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestHugeFieldNumbersLite::clear_optional_int32() {
  optional_int32_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestHugeFieldNumbersLite::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.optional_int32)
  return optional_int32_;
}
inline void TestHugeFieldNumbersLite::set_optional_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  optional_int32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.optional_int32)
}

// optional int32 fixed_32 = 536870001;
inline bool TestHugeFieldNumbersLite::has_fixed_32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TestHugeFieldNumbersLite::clear_fixed_32() {
  fixed_32_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestHugeFieldNumbersLite::fixed_32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.fixed_32)
  return fixed_32_;
}
inline void TestHugeFieldNumbersLite::set_fixed_32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  fixed_32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.fixed_32)
}

// repeated int32 repeated_int32 = 536870002 [packed = false];
inline int TestHugeFieldNumbersLite::repeated_int32_size() const {
  return repeated_int32_.size();
}
inline void TestHugeFieldNumbersLite::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestHugeFieldNumbersLite::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.repeated_int32)
  return repeated_int32_.Get(index);
}
inline void TestHugeFieldNumbersLite::set_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.repeated_int32)
}
inline void TestHugeFieldNumbersLite::add_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestHugeFieldNumbersLite.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestHugeFieldNumbersLite::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestHugeFieldNumbersLite.repeated_int32)
  return repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestHugeFieldNumbersLite::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestHugeFieldNumbersLite.repeated_int32)
  return &repeated_int32_;
}

// repeated int32 packed_int32 = 536870003 [packed = true];
inline int TestHugeFieldNumbersLite::packed_int32_size() const {
  return packed_int32_.size();
}
inline void TestHugeFieldNumbersLite::clear_packed_int32() {
  packed_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestHugeFieldNumbersLite::packed_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.packed_int32)
  return packed_int32_.Get(index);
}
inline void TestHugeFieldNumbersLite::set_packed_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  packed_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.packed_int32)
}
inline void TestHugeFieldNumbersLite::add_packed_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  packed_int32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.TestHugeFieldNumbersLite.packed_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestHugeFieldNumbersLite::packed_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.TestHugeFieldNumbersLite.packed_int32)
  return packed_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestHugeFieldNumbersLite::mutable_packed_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.TestHugeFieldNumbersLite.packed_int32)
  return &packed_int32_;
}

// optional .protobuf_unittest.ForeignEnumLite optional_enum = 536870004;
inline bool TestHugeFieldNumbersLite::has_optional_enum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TestHugeFieldNumbersLite::clear_optional_enum() {
  optional_enum_ = 4;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::protobuf_unittest::ForeignEnumLite TestHugeFieldNumbersLite::optional_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.optional_enum)
  return static_cast< ::protobuf_unittest::ForeignEnumLite >(optional_enum_);
}
inline void TestHugeFieldNumbersLite::set_optional_enum(::protobuf_unittest::ForeignEnumLite value) {
  assert(::protobuf_unittest::ForeignEnumLite_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  optional_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.optional_enum)
}

// optional string optional_string = 536870005;
inline bool TestHugeFieldNumbersLite::has_optional_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestHugeFieldNumbersLite::clear_optional_string() {
  optional_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestHugeFieldNumbersLite::optional_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.optional_string)
  return optional_string_.GetNoArena();
}
inline void TestHugeFieldNumbersLite::set_optional_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.optional_string)
}
inline void TestHugeFieldNumbersLite::set_optional_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestHugeFieldNumbersLite.optional_string)
}
inline void TestHugeFieldNumbersLite::set_optional_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  optional_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestHugeFieldNumbersLite.optional_string)
}
inline void TestHugeFieldNumbersLite::set_optional_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  optional_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestHugeFieldNumbersLite.optional_string)
}
inline std::string* TestHugeFieldNumbersLite::mutable_optional_string() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbersLite.optional_string)
  return optional_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestHugeFieldNumbersLite::release_optional_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbersLite.optional_string)
  if (!has_optional_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return optional_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestHugeFieldNumbersLite::set_allocated_optional_string(std::string* optional_string) {
  if (optional_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  optional_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_string);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbersLite.optional_string)
}

// optional bytes optional_bytes = 536870006;
inline bool TestHugeFieldNumbersLite::has_optional_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestHugeFieldNumbersLite::clear_optional_bytes() {
  optional_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestHugeFieldNumbersLite::optional_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.optional_bytes)
  return optional_bytes_.GetNoArena();
}
inline void TestHugeFieldNumbersLite::set_optional_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.optional_bytes)
}
inline void TestHugeFieldNumbersLite::set_optional_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestHugeFieldNumbersLite.optional_bytes)
}
inline void TestHugeFieldNumbersLite::set_optional_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestHugeFieldNumbersLite.optional_bytes)
}
inline void TestHugeFieldNumbersLite::set_optional_bytes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  optional_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestHugeFieldNumbersLite.optional_bytes)
}
inline std::string* TestHugeFieldNumbersLite::mutable_optional_bytes() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbersLite.optional_bytes)
  return optional_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestHugeFieldNumbersLite::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbersLite.optional_bytes)
  if (!has_optional_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return optional_bytes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestHugeFieldNumbersLite::set_allocated_optional_bytes(std::string* optional_bytes) {
  if (optional_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optional_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optional_bytes);
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbersLite.optional_bytes)
}

// optional .protobuf_unittest.ForeignMessageLite optional_message = 536870007;
inline bool TestHugeFieldNumbersLite::has_optional_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestHugeFieldNumbersLite::clear_optional_message() {
  if (optional_message_ != nullptr) optional_message_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_unittest::ForeignMessageLite& TestHugeFieldNumbersLite::optional_message() const {
  const ::protobuf_unittest::ForeignMessageLite* p = optional_message_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.optional_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::ForeignMessageLite*>(
      &::protobuf_unittest::_ForeignMessageLite_default_instance_);
}
inline ::protobuf_unittest::ForeignMessageLite* TestHugeFieldNumbersLite::release_optional_message() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbersLite.optional_message)
  _has_bits_[0] &= ~0x00000004u;
  ::protobuf_unittest::ForeignMessageLite* temp = optional_message_;
  optional_message_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::ForeignMessageLite* TestHugeFieldNumbersLite::mutable_optional_message() {
  _has_bits_[0] |= 0x00000004u;
  if (optional_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::ForeignMessageLite>(GetArenaNoVirtual());
    optional_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbersLite.optional_message)
  return optional_message_;
}
inline void TestHugeFieldNumbersLite::set_allocated_optional_message(::protobuf_unittest::ForeignMessageLite* optional_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optional_message_;
  }
  if (optional_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  optional_message_ = optional_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbersLite.optional_message)
}

// optional group OptionalGroup = 536870008 { ... };
inline bool TestHugeFieldNumbersLite::has_optionalgroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestHugeFieldNumbersLite::clear_optionalgroup() {
  if (optionalgroup_ != nullptr) optionalgroup_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup& TestHugeFieldNumbersLite::optionalgroup() const {
  const ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* p = optionalgroup_;
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.optionalgroup)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup*>(
      &::protobuf_unittest::_TestHugeFieldNumbersLite_OptionalGroup_default_instance_);
}
inline ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* TestHugeFieldNumbersLite::release_optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbersLite.optionalgroup)
  _has_bits_[0] &= ~0x00000008u;
  ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* temp = optionalgroup_;
  optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* TestHugeFieldNumbersLite::mutable_optionalgroup() {
  _has_bits_[0] |= 0x00000008u;
  if (optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup>(GetArenaNoVirtual());
    optionalgroup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbersLite.optionalgroup)
  return optionalgroup_;
}
inline void TestHugeFieldNumbersLite::set_allocated_optionalgroup(::protobuf_unittest::TestHugeFieldNumbersLite_OptionalGroup* optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optionalgroup_;
  }
  if (optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalgroup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  optionalgroup_ = optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbersLite.optionalgroup)
}

// map<string, string> string_string_map = 536870010;
inline int TestHugeFieldNumbersLite::string_string_map_size() const {
  return string_string_map_.size();
}
inline void TestHugeFieldNumbersLite::clear_string_string_map() {
  string_string_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestHugeFieldNumbersLite::string_string_map() const {
  // @@protoc_insertion_point(field_map:protobuf_unittest.TestHugeFieldNumbersLite.string_string_map)
  return string_string_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestHugeFieldNumbersLite::mutable_string_string_map() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_unittest.TestHugeFieldNumbersLite.string_string_map)
  return string_string_map_.MutableMap();
}

// optional uint32 oneof_uint32 = 536870011;
inline bool TestHugeFieldNumbersLite::has_oneof_uint32() const {
  return oneof_field_case() == kOneofUint32;
}
inline void TestHugeFieldNumbersLite::set_has_oneof_uint32() {
  _oneof_case_[0] = kOneofUint32;
}
inline void TestHugeFieldNumbersLite::clear_oneof_uint32() {
  if (has_oneof_uint32()) {
    oneof_field_.oneof_uint32_ = 0u;
    clear_has_oneof_field();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestHugeFieldNumbersLite::oneof_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.oneof_uint32)
  if (has_oneof_uint32()) {
    return oneof_field_.oneof_uint32_;
  }
  return 0u;
}
inline void TestHugeFieldNumbersLite::set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_oneof_uint32()) {
    clear_oneof_field();
    set_has_oneof_uint32();
  }
  oneof_field_.oneof_uint32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.oneof_uint32)
}

// optional .protobuf_unittest.TestAllTypesLite oneof_test_all_types = 536870012;
inline bool TestHugeFieldNumbersLite::has_oneof_test_all_types() const {
  return oneof_field_case() == kOneofTestAllTypes;
}
inline void TestHugeFieldNumbersLite::set_has_oneof_test_all_types() {
  _oneof_case_[0] = kOneofTestAllTypes;
}
inline void TestHugeFieldNumbersLite::clear_oneof_test_all_types() {
  if (has_oneof_test_all_types()) {
    delete oneof_field_.oneof_test_all_types_;
    clear_has_oneof_field();
  }
}
inline ::protobuf_unittest::TestAllTypesLite* TestHugeFieldNumbersLite::release_oneof_test_all_types() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbersLite.oneof_test_all_types)
  if (has_oneof_test_all_types()) {
    clear_has_oneof_field();
      ::protobuf_unittest::TestAllTypesLite* temp = oneof_field_.oneof_test_all_types_;
    oneof_field_.oneof_test_all_types_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestAllTypesLite& TestHugeFieldNumbersLite::oneof_test_all_types() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.oneof_test_all_types)
  return has_oneof_test_all_types()
      ? *oneof_field_.oneof_test_all_types_
      : *reinterpret_cast< ::protobuf_unittest::TestAllTypesLite*>(&::protobuf_unittest::_TestAllTypesLite_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite* TestHugeFieldNumbersLite::mutable_oneof_test_all_types() {
  if (!has_oneof_test_all_types()) {
    clear_oneof_field();
    set_has_oneof_test_all_types();
    oneof_field_.oneof_test_all_types_ = CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbersLite.oneof_test_all_types)
  return oneof_field_.oneof_test_all_types_;
}

// optional string oneof_string = 536870013;
inline bool TestHugeFieldNumbersLite::has_oneof_string() const {
  return oneof_field_case() == kOneofString;
}
inline void TestHugeFieldNumbersLite::set_has_oneof_string() {
  _oneof_case_[0] = kOneofString;
}
inline void TestHugeFieldNumbersLite::clear_oneof_string() {
  if (has_oneof_string()) {
    oneof_field_.oneof_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
inline const std::string& TestHugeFieldNumbersLite::oneof_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
  if (has_oneof_string()) {
    return oneof_field_.oneof_string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestHugeFieldNumbersLite::set_oneof_string(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
}
inline void TestHugeFieldNumbersLite::set_oneof_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
}
inline void TestHugeFieldNumbersLite::set_oneof_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
}
inline void TestHugeFieldNumbersLite::set_oneof_string(const char* value, size_t size) {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
}
inline std::string* TestHugeFieldNumbersLite::mutable_oneof_string() {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
  return oneof_field_.oneof_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestHugeFieldNumbersLite::release_oneof_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
  if (has_oneof_string()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TestHugeFieldNumbersLite::set_allocated_oneof_string(std::string* oneof_string) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_string != nullptr) {
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(oneof_string);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbersLite.oneof_string)
}

// optional bytes oneof_bytes = 536870014;
inline bool TestHugeFieldNumbersLite::has_oneof_bytes() const {
  return oneof_field_case() == kOneofBytes;
}
inline void TestHugeFieldNumbersLite::set_has_oneof_bytes() {
  _oneof_case_[0] = kOneofBytes;
}
inline void TestHugeFieldNumbersLite::clear_oneof_bytes() {
  if (has_oneof_bytes()) {
    oneof_field_.oneof_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
inline const std::string& TestHugeFieldNumbersLite::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
  if (has_oneof_bytes()) {
    return oneof_field_.oneof_bytes_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestHugeFieldNumbersLite::set_oneof_bytes(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
}
inline void TestHugeFieldNumbersLite::set_oneof_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
}
inline void TestHugeFieldNumbersLite::set_oneof_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
}
inline void TestHugeFieldNumbersLite::set_oneof_bytes(const void* value, size_t size) {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
}
inline std::string* TestHugeFieldNumbersLite::mutable_oneof_bytes() {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
  return oneof_field_.oneof_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestHugeFieldNumbersLite::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
  if (has_oneof_bytes()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TestHugeFieldNumbersLite::set_allocated_oneof_bytes(std::string* oneof_bytes) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_bytes != nullptr) {
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(oneof_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestHugeFieldNumbersLite.oneof_bytes)
}

inline bool TestHugeFieldNumbersLite::has_oneof_field() const {
  return oneof_field_case() != ONEOF_FIELD_NOT_SET;
}
inline void TestHugeFieldNumbersLite::clear_has_oneof_field() {
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}
inline TestHugeFieldNumbersLite::OneofFieldCase TestHugeFieldNumbersLite::oneof_field_case() const {
  return TestHugeFieldNumbersLite::OneofFieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestOneofParsingLite

// optional int32 oneof_int32 = 1;
inline bool TestOneofParsingLite::has_oneof_int32() const {
  return oneof_field_case() == kOneofInt32;
}
inline void TestOneofParsingLite::set_has_oneof_int32() {
  _oneof_case_[0] = kOneofInt32;
}
inline void TestOneofParsingLite::clear_oneof_int32() {
  if (has_oneof_int32()) {
    oneof_field_.oneof_int32_ = 0;
    clear_has_oneof_field();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestOneofParsingLite::oneof_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_int32)
  if (has_oneof_int32()) {
    return oneof_field_.oneof_int32_;
  }
  return 0;
}
inline void TestOneofParsingLite::set_oneof_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!has_oneof_int32()) {
    clear_oneof_field();
    set_has_oneof_int32();
  }
  oneof_field_.oneof_int32_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_int32)
}

// optional .protobuf_unittest.TestAllTypesLite oneof_submessage = 2;
inline bool TestOneofParsingLite::has_oneof_submessage() const {
  return oneof_field_case() == kOneofSubmessage;
}
inline void TestOneofParsingLite::set_has_oneof_submessage() {
  _oneof_case_[0] = kOneofSubmessage;
}
inline void TestOneofParsingLite::clear_oneof_submessage() {
  if (has_oneof_submessage()) {
    delete oneof_field_.oneof_submessage_;
    clear_has_oneof_field();
  }
}
inline ::protobuf_unittest::TestAllTypesLite* TestOneofParsingLite::release_oneof_submessage() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofParsingLite.oneof_submessage)
  if (has_oneof_submessage()) {
    clear_has_oneof_field();
      ::protobuf_unittest::TestAllTypesLite* temp = oneof_field_.oneof_submessage_;
    oneof_field_.oneof_submessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_unittest::TestAllTypesLite& TestOneofParsingLite::oneof_submessage() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_submessage)
  return has_oneof_submessage()
      ? *oneof_field_.oneof_submessage_
      : *reinterpret_cast< ::protobuf_unittest::TestAllTypesLite*>(&::protobuf_unittest::_TestAllTypesLite_default_instance_);
}
inline ::protobuf_unittest::TestAllTypesLite* TestOneofParsingLite::mutable_oneof_submessage() {
  if (!has_oneof_submessage()) {
    clear_oneof_field();
    set_has_oneof_submessage();
    oneof_field_.oneof_submessage_ = CreateMaybeMessage< ::protobuf_unittest::TestAllTypesLite >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofParsingLite.oneof_submessage)
  return oneof_field_.oneof_submessage_;
}

// optional string oneof_string = 3;
inline bool TestOneofParsingLite::has_oneof_string() const {
  return oneof_field_case() == kOneofString;
}
inline void TestOneofParsingLite::set_has_oneof_string() {
  _oneof_case_[0] = kOneofString;
}
inline void TestOneofParsingLite::clear_oneof_string() {
  if (has_oneof_string()) {
    oneof_field_.oneof_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
inline const std::string& TestOneofParsingLite::oneof_string() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_string)
  if (has_oneof_string()) {
    return oneof_field_.oneof_string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneofParsingLite::set_oneof_string(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string)
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string)
}
inline void TestOneofParsingLite::set_oneof_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string)
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestOneofParsingLite.oneof_string)
}
inline void TestOneofParsingLite::set_oneof_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestOneofParsingLite.oneof_string)
}
inline void TestOneofParsingLite::set_oneof_string(const char* value, size_t size) {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestOneofParsingLite.oneof_string)
}
inline std::string* TestOneofParsingLite::mutable_oneof_string() {
  if (!has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofParsingLite.oneof_string)
  return oneof_field_.oneof_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestOneofParsingLite::release_oneof_string() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofParsingLite.oneof_string)
  if (has_oneof_string()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TestOneofParsingLite::set_allocated_oneof_string(std::string* oneof_string) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_string != nullptr) {
    set_has_oneof_string();
    oneof_field_.oneof_string_.UnsafeSetDefault(oneof_string);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofParsingLite.oneof_string)
}

// optional bytes oneof_bytes = 4 [default = "default bytes"];
inline bool TestOneofParsingLite::has_oneof_bytes() const {
  return oneof_field_case() == kOneofBytes;
}
inline void TestOneofParsingLite::set_has_oneof_bytes() {
  _oneof_case_[0] = kOneofBytes;
}
inline void TestOneofParsingLite::clear_oneof_bytes() {
  if (has_oneof_bytes()) {
    oneof_field_.oneof_bytes_.DestroyNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get());
    clear_has_oneof_field();
  }
}
inline const std::string& TestOneofParsingLite::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
  if (has_oneof_bytes()) {
    return oneof_field_.oneof_bytes_.GetNoArena();
  }
  return *&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get();
}
inline void TestOneofParsingLite::set_oneof_bytes(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
}
inline void TestOneofParsingLite::set_oneof_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
}
inline void TestOneofParsingLite::set_oneof_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
}
inline void TestOneofParsingLite::set_oneof_bytes(const void* value, size_t size) {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get());
  }
  oneof_field_.oneof_bytes_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
}
inline std::string* TestOneofParsingLite::mutable_oneof_bytes() {
  if (!has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
  return oneof_field_.oneof_bytes_.MutableNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get());
}
inline std::string* TestOneofParsingLite::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
  if (has_oneof_bytes()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_bytes_.ReleaseNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_.get());
  } else {
    return nullptr;
  }
}
inline void TestOneofParsingLite::set_allocated_oneof_bytes(std::string* oneof_bytes) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_bytes != nullptr) {
    set_has_oneof_bytes();
    oneof_field_.oneof_bytes_.UnsafeSetDefault(oneof_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofParsingLite.oneof_bytes)
}

// optional string oneof_string_cord = 5 [default = "default Cord", ctype = CORD];
inline bool TestOneofParsingLite::has_oneof_string_cord() const {
  return oneof_field_case() == kOneofStringCord;
}
inline void TestOneofParsingLite::set_has_oneof_string_cord() {
  _oneof_case_[0] = kOneofStringCord;
}
inline void TestOneofParsingLite::clear_oneof_string_cord() {
  if (has_oneof_string_cord()) {
    oneof_field_.oneof_string_cord_.DestroyNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get());
    clear_has_oneof_field();
  }
}
inline const std::string& TestOneofParsingLite::oneof_string_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
  if (has_oneof_string_cord()) {
    return oneof_field_.oneof_string_cord_.GetNoArena();
  }
  return *&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get();
}
inline void TestOneofParsingLite::set_oneof_string_cord(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
  if (!has_oneof_string_cord()) {
    clear_oneof_field();
    set_has_oneof_string_cord();
    oneof_field_.oneof_string_cord_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get());
  }
  oneof_field_.oneof_string_cord_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
}
inline void TestOneofParsingLite::set_oneof_string_cord(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
  if (!has_oneof_string_cord()) {
    clear_oneof_field();
    set_has_oneof_string_cord();
    oneof_field_.oneof_string_cord_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get());
  }
  oneof_field_.oneof_string_cord_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
}
inline void TestOneofParsingLite::set_oneof_string_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_string_cord()) {
    clear_oneof_field();
    set_has_oneof_string_cord();
    oneof_field_.oneof_string_cord_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get());
  }
  oneof_field_.oneof_string_cord_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
}
inline void TestOneofParsingLite::set_oneof_string_cord(const char* value, size_t size) {
  if (!has_oneof_string_cord()) {
    clear_oneof_field();
    set_has_oneof_string_cord();
    oneof_field_.oneof_string_cord_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get());
  }
  oneof_field_.oneof_string_cord_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
}
inline std::string* TestOneofParsingLite::mutable_oneof_string_cord() {
  if (!has_oneof_string_cord()) {
    clear_oneof_field();
    set_has_oneof_string_cord();
    oneof_field_.oneof_string_cord_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
  return oneof_field_.oneof_string_cord_.MutableNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get());
}
inline std::string* TestOneofParsingLite::release_oneof_string_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
  if (has_oneof_string_cord()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_string_cord_.ReleaseNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_string_cord_.get());
  } else {
    return nullptr;
  }
}
inline void TestOneofParsingLite::set_allocated_oneof_string_cord(std::string* oneof_string_cord) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_string_cord != nullptr) {
    set_has_oneof_string_cord();
    oneof_field_.oneof_string_cord_.UnsafeSetDefault(oneof_string_cord);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofParsingLite.oneof_string_cord)
}

// optional bytes oneof_bytes_cord = 6 [ctype = CORD];
inline bool TestOneofParsingLite::has_oneof_bytes_cord() const {
  return oneof_field_case() == kOneofBytesCord;
}
inline void TestOneofParsingLite::set_has_oneof_bytes_cord() {
  _oneof_case_[0] = kOneofBytesCord;
}
inline void TestOneofParsingLite::clear_oneof_bytes_cord() {
  if (has_oneof_bytes_cord()) {
    oneof_field_.oneof_bytes_cord_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
inline const std::string& TestOneofParsingLite::oneof_bytes_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
  if (has_oneof_bytes_cord()) {
    return oneof_field_.oneof_bytes_cord_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneofParsingLite::set_oneof_bytes_cord(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
  if (!has_oneof_bytes_cord()) {
    clear_oneof_field();
    set_has_oneof_bytes_cord();
    oneof_field_.oneof_bytes_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
}
inline void TestOneofParsingLite::set_oneof_bytes_cord(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
  if (!has_oneof_bytes_cord()) {
    clear_oneof_field();
    set_has_oneof_bytes_cord();
    oneof_field_.oneof_bytes_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
}
inline void TestOneofParsingLite::set_oneof_bytes_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_bytes_cord()) {
    clear_oneof_field();
    set_has_oneof_bytes_cord();
    oneof_field_.oneof_bytes_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
}
inline void TestOneofParsingLite::set_oneof_bytes_cord(const void* value, size_t size) {
  if (!has_oneof_bytes_cord()) {
    clear_oneof_field();
    set_has_oneof_bytes_cord();
    oneof_field_.oneof_bytes_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_bytes_cord_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
}
inline std::string* TestOneofParsingLite::mutable_oneof_bytes_cord() {
  if (!has_oneof_bytes_cord()) {
    clear_oneof_field();
    set_has_oneof_bytes_cord();
    oneof_field_.oneof_bytes_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
  return oneof_field_.oneof_bytes_cord_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestOneofParsingLite::release_oneof_bytes_cord() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
  if (has_oneof_bytes_cord()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_bytes_cord_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TestOneofParsingLite::set_allocated_oneof_bytes_cord(std::string* oneof_bytes_cord) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_bytes_cord != nullptr) {
    set_has_oneof_bytes_cord();
    oneof_field_.oneof_bytes_cord_.UnsafeSetDefault(oneof_bytes_cord);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofParsingLite.oneof_bytes_cord)
}

// optional string oneof_string_string_piece = 7 [ctype = STRING_PIECE];
inline bool TestOneofParsingLite::has_oneof_string_string_piece() const {
  return oneof_field_case() == kOneofStringStringPiece;
}
inline void TestOneofParsingLite::set_has_oneof_string_string_piece() {
  _oneof_case_[0] = kOneofStringStringPiece;
}
inline void TestOneofParsingLite::clear_oneof_string_string_piece() {
  if (has_oneof_string_string_piece()) {
    oneof_field_.oneof_string_string_piece_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_field();
  }
}
inline const std::string& TestOneofParsingLite::oneof_string_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
  if (has_oneof_string_string_piece()) {
    return oneof_field_.oneof_string_string_piece_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestOneofParsingLite::set_oneof_string_string_piece(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
  if (!has_oneof_string_string_piece()) {
    clear_oneof_field();
    set_has_oneof_string_string_piece();
    oneof_field_.oneof_string_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
}
inline void TestOneofParsingLite::set_oneof_string_string_piece(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
  if (!has_oneof_string_string_piece()) {
    clear_oneof_field();
    set_has_oneof_string_string_piece();
    oneof_field_.oneof_string_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
}
inline void TestOneofParsingLite::set_oneof_string_string_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_string_string_piece()) {
    clear_oneof_field();
    set_has_oneof_string_string_piece();
    oneof_field_.oneof_string_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
}
inline void TestOneofParsingLite::set_oneof_string_string_piece(const char* value, size_t size) {
  if (!has_oneof_string_string_piece()) {
    clear_oneof_field();
    set_has_oneof_string_string_piece();
    oneof_field_.oneof_string_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  oneof_field_.oneof_string_string_piece_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
}
inline std::string* TestOneofParsingLite::mutable_oneof_string_string_piece() {
  if (!has_oneof_string_string_piece()) {
    clear_oneof_field();
    set_has_oneof_string_string_piece();
    oneof_field_.oneof_string_string_piece_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
  return oneof_field_.oneof_string_string_piece_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestOneofParsingLite::release_oneof_string_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
  if (has_oneof_string_string_piece()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_string_string_piece_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TestOneofParsingLite::set_allocated_oneof_string_string_piece(std::string* oneof_string_string_piece) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_string_string_piece != nullptr) {
    set_has_oneof_string_string_piece();
    oneof_field_.oneof_string_string_piece_.UnsafeSetDefault(oneof_string_string_piece);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofParsingLite.oneof_string_string_piece)
}

// optional bytes oneof_bytes_string_piece = 8 [default = "default StringPiece", ctype = STRING_PIECE];
inline bool TestOneofParsingLite::has_oneof_bytes_string_piece() const {
  return oneof_field_case() == kOneofBytesStringPiece;
}
inline void TestOneofParsingLite::set_has_oneof_bytes_string_piece() {
  _oneof_case_[0] = kOneofBytesStringPiece;
}
inline void TestOneofParsingLite::clear_oneof_bytes_string_piece() {
  if (has_oneof_bytes_string_piece()) {
    oneof_field_.oneof_bytes_string_piece_.DestroyNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get());
    clear_has_oneof_field();
  }
}
inline const std::string& TestOneofParsingLite::oneof_bytes_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
  if (has_oneof_bytes_string_piece()) {
    return oneof_field_.oneof_bytes_string_piece_.GetNoArena();
  }
  return *&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get();
}
inline void TestOneofParsingLite::set_oneof_bytes_string_piece(const std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
  if (!has_oneof_bytes_string_piece()) {
    clear_oneof_field();
    set_has_oneof_bytes_string_piece();
    oneof_field_.oneof_bytes_string_piece_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get());
  }
  oneof_field_.oneof_bytes_string_piece_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get(), value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
}
inline void TestOneofParsingLite::set_oneof_bytes_string_piece(std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
  if (!has_oneof_bytes_string_piece()) {
    clear_oneof_field();
    set_has_oneof_bytes_string_piece();
    oneof_field_.oneof_bytes_string_piece_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get());
  }
  oneof_field_.oneof_bytes_string_piece_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
}
inline void TestOneofParsingLite::set_oneof_bytes_string_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_oneof_bytes_string_piece()) {
    clear_oneof_field();
    set_has_oneof_bytes_string_piece();
    oneof_field_.oneof_bytes_string_piece_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get());
  }
  oneof_field_.oneof_bytes_string_piece_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
}
inline void TestOneofParsingLite::set_oneof_bytes_string_piece(const void* value, size_t size) {
  if (!has_oneof_bytes_string_piece()) {
    clear_oneof_field();
    set_has_oneof_bytes_string_piece();
    oneof_field_.oneof_bytes_string_piece_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get());
  }
  oneof_field_.oneof_bytes_string_piece_.SetNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
}
inline std::string* TestOneofParsingLite::mutable_oneof_bytes_string_piece() {
  if (!has_oneof_bytes_string_piece()) {
    clear_oneof_field();
    set_has_oneof_bytes_string_piece();
    oneof_field_.oneof_bytes_string_piece_.UnsafeSetDefault(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get());
  }
  // @@protoc_insertion_point(field_mutable:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
  return oneof_field_.oneof_bytes_string_piece_.MutableNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get());
}
inline std::string* TestOneofParsingLite::release_oneof_bytes_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
  if (has_oneof_bytes_string_piece()) {
    clear_has_oneof_field();
    return oneof_field_.oneof_bytes_string_piece_.ReleaseNoArena(&::protobuf_unittest::TestOneofParsingLite::_i_give_permission_to_break_this_code_default_oneof_bytes_string_piece_.get());
  } else {
    return nullptr;
  }
}
inline void TestOneofParsingLite::set_allocated_oneof_bytes_string_piece(std::string* oneof_bytes_string_piece) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_bytes_string_piece != nullptr) {
    set_has_oneof_bytes_string_piece();
    oneof_field_.oneof_bytes_string_piece_.UnsafeSetDefault(oneof_bytes_string_piece);
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_unittest.TestOneofParsingLite.oneof_bytes_string_piece)
}

// optional .protobuf_unittest.V2EnumLite oneof_enum = 9;
inline bool TestOneofParsingLite::has_oneof_enum() const {
  return oneof_field_case() == kOneofEnum;
}
inline void TestOneofParsingLite::set_has_oneof_enum() {
  _oneof_case_[0] = kOneofEnum;
}
inline void TestOneofParsingLite::clear_oneof_enum() {
  if (has_oneof_enum()) {
    oneof_field_.oneof_enum_ = 1;
    clear_has_oneof_field();
  }
}
inline ::protobuf_unittest::V2EnumLite TestOneofParsingLite::oneof_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TestOneofParsingLite.oneof_enum)
  if (has_oneof_enum()) {
    return static_cast< ::protobuf_unittest::V2EnumLite >(oneof_field_.oneof_enum_);
  }
  return static_cast< ::protobuf_unittest::V2EnumLite >(1);
}
inline void TestOneofParsingLite::set_oneof_enum(::protobuf_unittest::V2EnumLite value) {
  assert(::protobuf_unittest::V2EnumLite_IsValid(value));
  if (!has_oneof_enum()) {
    clear_oneof_field();
    set_has_oneof_enum();
  }
  oneof_field_.oneof_enum_ = value;
  // @@protoc_insertion_point(field_set:protobuf_unittest.TestOneofParsingLite.oneof_enum)
}

inline bool TestOneofParsingLite::has_oneof_field() const {
  return oneof_field_case() != ONEOF_FIELD_NOT_SET;
}
inline void TestOneofParsingLite::clear_has_oneof_field() {
  _oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}
inline TestOneofParsingLite::OneofFieldCase TestOneofParsingLite::oneof_field_case() const {
  return TestOneofParsingLite::OneofFieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PackedInt32

// repeated int32 repeated_int32 = 2048 [packed = true];
inline int PackedInt32::repeated_int32_size() const {
  return repeated_int32_.size();
}
inline void PackedInt32::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackedInt32::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.PackedInt32.repeated_int32)
  return repeated_int32_.Get(index);
}
inline void PackedInt32::set_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.PackedInt32.repeated_int32)
}
inline void PackedInt32::add_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.PackedInt32.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PackedInt32::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.PackedInt32.repeated_int32)
  return repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PackedInt32::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.PackedInt32.repeated_int32)
  return &repeated_int32_;
}

// -------------------------------------------------------------------

// NonPackedInt32

// repeated int32 repeated_int32 = 2048;
inline int NonPackedInt32::repeated_int32_size() const {
  return repeated_int32_.size();
}
inline void NonPackedInt32::clear_repeated_int32() {
  repeated_int32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NonPackedInt32::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NonPackedInt32.repeated_int32)
  return repeated_int32_.Get(index);
}
inline void NonPackedInt32::set_repeated_int32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.NonPackedInt32.repeated_int32)
}
inline void NonPackedInt32::add_repeated_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  repeated_int32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.NonPackedInt32.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NonPackedInt32::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.NonPackedInt32.repeated_int32)
  return repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NonPackedInt32::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.NonPackedInt32.repeated_int32)
  return &repeated_int32_;
}

// -------------------------------------------------------------------

// PackedFixed32

// repeated fixed32 repeated_fixed32 = 2048 [packed = true];
inline int PackedFixed32::repeated_fixed32_size() const {
  return repeated_fixed32_.size();
}
inline void PackedFixed32::clear_repeated_fixed32() {
  repeated_fixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PackedFixed32::repeated_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.PackedFixed32.repeated_fixed32)
  return repeated_fixed32_.Get(index);
}
inline void PackedFixed32::set_repeated_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.PackedFixed32.repeated_fixed32)
}
inline void PackedFixed32::add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_fixed32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.PackedFixed32.repeated_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PackedFixed32::repeated_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.PackedFixed32.repeated_fixed32)
  return repeated_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PackedFixed32::mutable_repeated_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.PackedFixed32.repeated_fixed32)
  return &repeated_fixed32_;
}

// -------------------------------------------------------------------

// NonPackedFixed32

// repeated fixed32 repeated_fixed32 = 2048;
inline int NonPackedFixed32::repeated_fixed32_size() const {
  return repeated_fixed32_.size();
}
inline void NonPackedFixed32::clear_repeated_fixed32() {
  repeated_fixed32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NonPackedFixed32::repeated_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.NonPackedFixed32.repeated_fixed32)
  return repeated_fixed32_.Get(index);
}
inline void NonPackedFixed32::set_repeated_fixed32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.NonPackedFixed32.repeated_fixed32)
}
inline void NonPackedFixed32::add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  repeated_fixed32_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_unittest.NonPackedFixed32.repeated_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NonPackedFixed32::repeated_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_unittest.NonPackedFixed32.repeated_fixed32)
  return repeated_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NonPackedFixed32::mutable_repeated_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_unittest.NonPackedFixed32.repeated_fixed32)
  return &repeated_fixed32_;
}

// -------------------------------------------------------------------

// DupEnum

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protobuf_unittest::TestAllTypesLite_NestedEnum> : ::std::true_type {};
template <> struct is_proto_enum< ::protobuf_unittest::DupEnum_TestEnumWithDupValueLite> : ::std::true_type {};
template <> struct is_proto_enum< ::protobuf_unittest::ForeignEnumLite> : ::std::true_type {};
template <> struct is_proto_enum< ::protobuf_unittest::V1EnumLite> : ::std::true_type {};
template <> struct is_proto_enum< ::protobuf_unittest::V2EnumLite> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5flite_2eproto
