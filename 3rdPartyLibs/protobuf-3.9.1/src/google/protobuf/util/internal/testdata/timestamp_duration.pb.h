// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/timestamp_duration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto;
namespace proto_util_converter {
namespace testing {
class DurationType;
class DurationTypeDefaultTypeInternal;
extern DurationTypeDefaultTypeInternal _DurationType_default_instance_;
class TimeStampType;
class TimeStampTypeDefaultTypeInternal;
extern TimeStampTypeDefaultTypeInternal _TimeStampType_default_instance_;
class TimestampDuration;
class TimestampDurationDefaultTypeInternal;
extern TimestampDurationDefaultTypeInternal _TimestampDuration_default_instance_;
class TimestampDurationTestCases;
class TimestampDurationTestCasesDefaultTypeInternal;
extern TimestampDurationTestCasesDefaultTypeInternal _TimestampDurationTestCases_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_util_converter::testing::DurationType* Arena::CreateMaybeMessage<::proto_util_converter::testing::DurationType>(Arena*);
template<> ::proto_util_converter::testing::TimeStampType* Arena::CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(Arena*);
template<> ::proto_util_converter::testing::TimestampDuration* Arena::CreateMaybeMessage<::proto_util_converter::testing::TimestampDuration>(Arena*);
template<> ::proto_util_converter::testing::TimestampDurationTestCases* Arena::CreateMaybeMessage<::proto_util_converter::testing::TimestampDurationTestCases>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_util_converter {
namespace testing {

// ===================================================================

class TimestampDurationTestCases :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.TimestampDurationTestCases) */ {
 public:
  TimestampDurationTestCases();
  virtual ~TimestampDurationTestCases();

  TimestampDurationTestCases(const TimestampDurationTestCases& from);
  TimestampDurationTestCases(TimestampDurationTestCases&& from) noexcept
    : TimestampDurationTestCases() {
    *this = ::std::move(from);
  }

  inline TimestampDurationTestCases& operator=(const TimestampDurationTestCases& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampDurationTestCases& operator=(TimestampDurationTestCases&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimestampDurationTestCases& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimestampDurationTestCases* internal_default_instance() {
    return reinterpret_cast<const TimestampDurationTestCases*>(
               &_TimestampDurationTestCases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimestampDurationTestCases& a, TimestampDurationTestCases& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampDurationTestCases* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimestampDurationTestCases* New() const final {
    return CreateMaybeMessage<TimestampDurationTestCases>(nullptr);
  }

  TimestampDurationTestCases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimestampDurationTestCases>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimestampDurationTestCases& from);
  void MergeFrom(const TimestampDurationTestCases& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampDurationTestCases* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.TimestampDurationTestCases";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochFieldNumber = 1,
    kEpoch2FieldNumber = 2,
    kMintimeFieldNumber = 3,
    kMaxtimeFieldNumber = 4,
    kTimeval1FieldNumber = 5,
    kTimeval2FieldNumber = 6,
    kTimeval3FieldNumber = 7,
    kTimeval4FieldNumber = 8,
    kTimeval5FieldNumber = 9,
    kTimeval6FieldNumber = 10,
    kTimeval7FieldNumber = 11,
    kTimeval8FieldNumber = 12,
    kZeroDurationFieldNumber = 101,
    kMinDurationFieldNumber = 102,
    kMaxDurationFieldNumber = 103,
    kDuration1FieldNumber = 104,
    kDuration2FieldNumber = 105,
    kDuration3FieldNumber = 106,
    kDuration4FieldNumber = 107,
    kDuration5FieldNumber = 108,
  };
  // .proto_util_converter.testing.TimeStampType epoch = 1;
  bool has_epoch() const;
  void clear_epoch();
  const ::proto_util_converter::testing::TimeStampType& epoch() const;
  ::proto_util_converter::testing::TimeStampType* release_epoch();
  ::proto_util_converter::testing::TimeStampType* mutable_epoch();
  void set_allocated_epoch(::proto_util_converter::testing::TimeStampType* epoch);

  // .proto_util_converter.testing.TimeStampType epoch2 = 2;
  bool has_epoch2() const;
  void clear_epoch2();
  const ::proto_util_converter::testing::TimeStampType& epoch2() const;
  ::proto_util_converter::testing::TimeStampType* release_epoch2();
  ::proto_util_converter::testing::TimeStampType* mutable_epoch2();
  void set_allocated_epoch2(::proto_util_converter::testing::TimeStampType* epoch2);

  // .proto_util_converter.testing.TimeStampType mintime = 3;
  bool has_mintime() const;
  void clear_mintime();
  const ::proto_util_converter::testing::TimeStampType& mintime() const;
  ::proto_util_converter::testing::TimeStampType* release_mintime();
  ::proto_util_converter::testing::TimeStampType* mutable_mintime();
  void set_allocated_mintime(::proto_util_converter::testing::TimeStampType* mintime);

  // .proto_util_converter.testing.TimeStampType maxtime = 4;
  bool has_maxtime() const;
  void clear_maxtime();
  const ::proto_util_converter::testing::TimeStampType& maxtime() const;
  ::proto_util_converter::testing::TimeStampType* release_maxtime();
  ::proto_util_converter::testing::TimeStampType* mutable_maxtime();
  void set_allocated_maxtime(::proto_util_converter::testing::TimeStampType* maxtime);

  // .proto_util_converter.testing.TimeStampType timeval1 = 5;
  bool has_timeval1() const;
  void clear_timeval1();
  const ::proto_util_converter::testing::TimeStampType& timeval1() const;
  ::proto_util_converter::testing::TimeStampType* release_timeval1();
  ::proto_util_converter::testing::TimeStampType* mutable_timeval1();
  void set_allocated_timeval1(::proto_util_converter::testing::TimeStampType* timeval1);

  // .proto_util_converter.testing.TimeStampType timeval2 = 6;
  bool has_timeval2() const;
  void clear_timeval2();
  const ::proto_util_converter::testing::TimeStampType& timeval2() const;
  ::proto_util_converter::testing::TimeStampType* release_timeval2();
  ::proto_util_converter::testing::TimeStampType* mutable_timeval2();
  void set_allocated_timeval2(::proto_util_converter::testing::TimeStampType* timeval2);

  // .proto_util_converter.testing.TimeStampType timeval3 = 7;
  bool has_timeval3() const;
  void clear_timeval3();
  const ::proto_util_converter::testing::TimeStampType& timeval3() const;
  ::proto_util_converter::testing::TimeStampType* release_timeval3();
  ::proto_util_converter::testing::TimeStampType* mutable_timeval3();
  void set_allocated_timeval3(::proto_util_converter::testing::TimeStampType* timeval3);

  // .proto_util_converter.testing.TimeStampType timeval4 = 8;
  bool has_timeval4() const;
  void clear_timeval4();
  const ::proto_util_converter::testing::TimeStampType& timeval4() const;
  ::proto_util_converter::testing::TimeStampType* release_timeval4();
  ::proto_util_converter::testing::TimeStampType* mutable_timeval4();
  void set_allocated_timeval4(::proto_util_converter::testing::TimeStampType* timeval4);

  // .proto_util_converter.testing.TimeStampType timeval5 = 9;
  bool has_timeval5() const;
  void clear_timeval5();
  const ::proto_util_converter::testing::TimeStampType& timeval5() const;
  ::proto_util_converter::testing::TimeStampType* release_timeval5();
  ::proto_util_converter::testing::TimeStampType* mutable_timeval5();
  void set_allocated_timeval5(::proto_util_converter::testing::TimeStampType* timeval5);

  // .proto_util_converter.testing.TimeStampType timeval6 = 10;
  bool has_timeval6() const;
  void clear_timeval6();
  const ::proto_util_converter::testing::TimeStampType& timeval6() const;
  ::proto_util_converter::testing::TimeStampType* release_timeval6();
  ::proto_util_converter::testing::TimeStampType* mutable_timeval6();
  void set_allocated_timeval6(::proto_util_converter::testing::TimeStampType* timeval6);

  // .proto_util_converter.testing.TimeStampType timeval7 = 11;
  bool has_timeval7() const;
  void clear_timeval7();
  const ::proto_util_converter::testing::TimeStampType& timeval7() const;
  ::proto_util_converter::testing::TimeStampType* release_timeval7();
  ::proto_util_converter::testing::TimeStampType* mutable_timeval7();
  void set_allocated_timeval7(::proto_util_converter::testing::TimeStampType* timeval7);

  // .google.protobuf.Timestamp timeval8 = 12;
  bool has_timeval8() const;
  void clear_timeval8();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timeval8() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timeval8();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timeval8();
  void set_allocated_timeval8(PROTOBUF_NAMESPACE_ID::Timestamp* timeval8);

  // .proto_util_converter.testing.DurationType zero_duration = 101;
  bool has_zero_duration() const;
  void clear_zero_duration();
  const ::proto_util_converter::testing::DurationType& zero_duration() const;
  ::proto_util_converter::testing::DurationType* release_zero_duration();
  ::proto_util_converter::testing::DurationType* mutable_zero_duration();
  void set_allocated_zero_duration(::proto_util_converter::testing::DurationType* zero_duration);

  // .proto_util_converter.testing.DurationType min_duration = 102;
  bool has_min_duration() const;
  void clear_min_duration();
  const ::proto_util_converter::testing::DurationType& min_duration() const;
  ::proto_util_converter::testing::DurationType* release_min_duration();
  ::proto_util_converter::testing::DurationType* mutable_min_duration();
  void set_allocated_min_duration(::proto_util_converter::testing::DurationType* min_duration);

  // .proto_util_converter.testing.DurationType max_duration = 103;
  bool has_max_duration() const;
  void clear_max_duration();
  const ::proto_util_converter::testing::DurationType& max_duration() const;
  ::proto_util_converter::testing::DurationType* release_max_duration();
  ::proto_util_converter::testing::DurationType* mutable_max_duration();
  void set_allocated_max_duration(::proto_util_converter::testing::DurationType* max_duration);

  // .proto_util_converter.testing.DurationType duration1 = 104;
  bool has_duration1() const;
  void clear_duration1();
  const ::proto_util_converter::testing::DurationType& duration1() const;
  ::proto_util_converter::testing::DurationType* release_duration1();
  ::proto_util_converter::testing::DurationType* mutable_duration1();
  void set_allocated_duration1(::proto_util_converter::testing::DurationType* duration1);

  // .proto_util_converter.testing.DurationType duration2 = 105;
  bool has_duration2() const;
  void clear_duration2();
  const ::proto_util_converter::testing::DurationType& duration2() const;
  ::proto_util_converter::testing::DurationType* release_duration2();
  ::proto_util_converter::testing::DurationType* mutable_duration2();
  void set_allocated_duration2(::proto_util_converter::testing::DurationType* duration2);

  // .proto_util_converter.testing.DurationType duration3 = 106;
  bool has_duration3() const;
  void clear_duration3();
  const ::proto_util_converter::testing::DurationType& duration3() const;
  ::proto_util_converter::testing::DurationType* release_duration3();
  ::proto_util_converter::testing::DurationType* mutable_duration3();
  void set_allocated_duration3(::proto_util_converter::testing::DurationType* duration3);

  // .proto_util_converter.testing.DurationType duration4 = 107;
  bool has_duration4() const;
  void clear_duration4();
  const ::proto_util_converter::testing::DurationType& duration4() const;
  ::proto_util_converter::testing::DurationType* release_duration4();
  ::proto_util_converter::testing::DurationType* mutable_duration4();
  void set_allocated_duration4(::proto_util_converter::testing::DurationType* duration4);

  // .google.protobuf.Duration duration5 = 108;
  bool has_duration5() const;
  void clear_duration5();
  const PROTOBUF_NAMESPACE_ID::Duration& duration5() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration5();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration5();
  void set_allocated_duration5(PROTOBUF_NAMESPACE_ID::Duration* duration5);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.TimestampDurationTestCases)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto_util_converter::testing::TimeStampType* epoch_;
  ::proto_util_converter::testing::TimeStampType* epoch2_;
  ::proto_util_converter::testing::TimeStampType* mintime_;
  ::proto_util_converter::testing::TimeStampType* maxtime_;
  ::proto_util_converter::testing::TimeStampType* timeval1_;
  ::proto_util_converter::testing::TimeStampType* timeval2_;
  ::proto_util_converter::testing::TimeStampType* timeval3_;
  ::proto_util_converter::testing::TimeStampType* timeval4_;
  ::proto_util_converter::testing::TimeStampType* timeval5_;
  ::proto_util_converter::testing::TimeStampType* timeval6_;
  ::proto_util_converter::testing::TimeStampType* timeval7_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timeval8_;
  ::proto_util_converter::testing::DurationType* zero_duration_;
  ::proto_util_converter::testing::DurationType* min_duration_;
  ::proto_util_converter::testing::DurationType* max_duration_;
  ::proto_util_converter::testing::DurationType* duration1_;
  ::proto_util_converter::testing::DurationType* duration2_;
  ::proto_util_converter::testing::DurationType* duration3_;
  ::proto_util_converter::testing::DurationType* duration4_;
  PROTOBUF_NAMESPACE_ID::Duration* duration5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto;
};
// -------------------------------------------------------------------

class TimeStampType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.TimeStampType) */ {
 public:
  TimeStampType();
  virtual ~TimeStampType();

  TimeStampType(const TimeStampType& from);
  TimeStampType(TimeStampType&& from) noexcept
    : TimeStampType() {
    *this = ::std::move(from);
  }

  inline TimeStampType& operator=(const TimeStampType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStampType& operator=(TimeStampType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeStampType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeStampType* internal_default_instance() {
    return reinterpret_cast<const TimeStampType*>(
               &_TimeStampType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeStampType& a, TimeStampType& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStampType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeStampType* New() const final {
    return CreateMaybeMessage<TimeStampType>(nullptr);
  }

  TimeStampType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeStampType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeStampType& from);
  void MergeFrom(const TimeStampType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStampType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.TimeStampType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.TimeStampType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto;
};
// -------------------------------------------------------------------

class DurationType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.DurationType) */ {
 public:
  DurationType();
  virtual ~DurationType();

  DurationType(const DurationType& from);
  DurationType(DurationType&& from) noexcept
    : DurationType() {
    *this = ::std::move(from);
  }

  inline DurationType& operator=(const DurationType& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurationType& operator=(DurationType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DurationType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DurationType* internal_default_instance() {
    return reinterpret_cast<const DurationType*>(
               &_DurationType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DurationType& a, DurationType& b) {
    a.Swap(&b);
  }
  inline void Swap(DurationType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurationType* New() const final {
    return CreateMaybeMessage<DurationType>(nullptr);
  }

  DurationType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurationType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DurationType& from);
  void MergeFrom(const DurationType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DurationType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.DurationType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
  };
  // .google.protobuf.Duration duration = 1;
  bool has_duration() const;
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.DurationType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto;
};
// -------------------------------------------------------------------

class TimestampDuration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.TimestampDuration) */ {
 public:
  TimestampDuration();
  virtual ~TimestampDuration();

  TimestampDuration(const TimestampDuration& from);
  TimestampDuration(TimestampDuration&& from) noexcept
    : TimestampDuration() {
    *this = ::std::move(from);
  }

  inline TimestampDuration& operator=(const TimestampDuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampDuration& operator=(TimestampDuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimestampDuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimestampDuration* internal_default_instance() {
    return reinterpret_cast<const TimestampDuration*>(
               &_TimestampDuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimestampDuration& a, TimestampDuration& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampDuration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimestampDuration* New() const final {
    return CreateMaybeMessage<TimestampDuration>(nullptr);
  }

  TimestampDuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimestampDuration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimestampDuration& from);
  void MergeFrom(const TimestampDuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampDuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.TimestampDuration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepTsFieldNumber = 3,
    kTsFieldNumber = 1,
    kDurFieldNumber = 2,
  };
  // repeated .google.protobuf.Timestamp rep_ts = 3;
  int rep_ts_size() const;
  void clear_rep_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_rep_ts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >*
      mutable_rep_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& rep_ts(int index) const;
  PROTOBUF_NAMESPACE_ID::Timestamp* add_rep_ts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >&
      rep_ts() const;

  // .google.protobuf.Timestamp ts = 1;
  bool has_ts() const;
  void clear_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts();
  void set_allocated_ts(PROTOBUF_NAMESPACE_ID::Timestamp* ts);

  // .google.protobuf.Duration dur = 2;
  bool has_dur() const;
  void clear_dur();
  const PROTOBUF_NAMESPACE_ID::Duration& dur() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_dur();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_dur();
  void set_allocated_dur(PROTOBUF_NAMESPACE_ID::Duration* dur);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.TimestampDuration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp > rep_ts_;
  PROTOBUF_NAMESPACE_ID::Timestamp* ts_;
  PROTOBUF_NAMESPACE_ID::Duration* dur_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimestampDurationTestCases

// .proto_util_converter.testing.TimeStampType epoch = 1;
inline bool TimestampDurationTestCases::has_epoch() const {
  return this != internal_default_instance() && epoch_ != nullptr;
}
inline void TimestampDurationTestCases::clear_epoch() {
  if (GetArenaNoVirtual() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::epoch() const {
  const ::proto_util_converter::testing::TimeStampType* p = epoch_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.epoch)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_epoch() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.epoch)
  
  ::proto_util_converter::testing::TimeStampType* temp = epoch_;
  epoch_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_epoch() {
  
  if (epoch_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    epoch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.epoch)
  return epoch_;
}
inline void TimestampDurationTestCases::set_allocated_epoch(::proto_util_converter::testing::TimeStampType* epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete epoch_;
  }
  if (epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch, submessage_arena);
    }
    
  } else {
    
  }
  epoch_ = epoch;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.epoch)
}

// .proto_util_converter.testing.TimeStampType epoch2 = 2;
inline bool TimestampDurationTestCases::has_epoch2() const {
  return this != internal_default_instance() && epoch2_ != nullptr;
}
inline void TimestampDurationTestCases::clear_epoch2() {
  if (GetArenaNoVirtual() == nullptr && epoch2_ != nullptr) {
    delete epoch2_;
  }
  epoch2_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::epoch2() const {
  const ::proto_util_converter::testing::TimeStampType* p = epoch2_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.epoch2)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_epoch2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.epoch2)
  
  ::proto_util_converter::testing::TimeStampType* temp = epoch2_;
  epoch2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_epoch2() {
  
  if (epoch2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    epoch2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.epoch2)
  return epoch2_;
}
inline void TimestampDurationTestCases::set_allocated_epoch2(::proto_util_converter::testing::TimeStampType* epoch2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete epoch2_;
  }
  if (epoch2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      epoch2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch2, submessage_arena);
    }
    
  } else {
    
  }
  epoch2_ = epoch2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.epoch2)
}

// .proto_util_converter.testing.TimeStampType mintime = 3;
inline bool TimestampDurationTestCases::has_mintime() const {
  return this != internal_default_instance() && mintime_ != nullptr;
}
inline void TimestampDurationTestCases::clear_mintime() {
  if (GetArenaNoVirtual() == nullptr && mintime_ != nullptr) {
    delete mintime_;
  }
  mintime_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::mintime() const {
  const ::proto_util_converter::testing::TimeStampType* p = mintime_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.mintime)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_mintime() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.mintime)
  
  ::proto_util_converter::testing::TimeStampType* temp = mintime_;
  mintime_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_mintime() {
  
  if (mintime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    mintime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.mintime)
  return mintime_;
}
inline void TimestampDurationTestCases::set_allocated_mintime(::proto_util_converter::testing::TimeStampType* mintime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mintime_;
  }
  if (mintime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mintime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mintime, submessage_arena);
    }
    
  } else {
    
  }
  mintime_ = mintime;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.mintime)
}

// .proto_util_converter.testing.TimeStampType maxtime = 4;
inline bool TimestampDurationTestCases::has_maxtime() const {
  return this != internal_default_instance() && maxtime_ != nullptr;
}
inline void TimestampDurationTestCases::clear_maxtime() {
  if (GetArenaNoVirtual() == nullptr && maxtime_ != nullptr) {
    delete maxtime_;
  }
  maxtime_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::maxtime() const {
  const ::proto_util_converter::testing::TimeStampType* p = maxtime_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.maxtime)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_maxtime() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.maxtime)
  
  ::proto_util_converter::testing::TimeStampType* temp = maxtime_;
  maxtime_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_maxtime() {
  
  if (maxtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    maxtime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.maxtime)
  return maxtime_;
}
inline void TimestampDurationTestCases::set_allocated_maxtime(::proto_util_converter::testing::TimeStampType* maxtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete maxtime_;
  }
  if (maxtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maxtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxtime, submessage_arena);
    }
    
  } else {
    
  }
  maxtime_ = maxtime;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.maxtime)
}

// .proto_util_converter.testing.TimeStampType timeval1 = 5;
inline bool TimestampDurationTestCases::has_timeval1() const {
  return this != internal_default_instance() && timeval1_ != nullptr;
}
inline void TimestampDurationTestCases::clear_timeval1() {
  if (GetArenaNoVirtual() == nullptr && timeval1_ != nullptr) {
    delete timeval1_;
  }
  timeval1_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::timeval1() const {
  const ::proto_util_converter::testing::TimeStampType* p = timeval1_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.timeval1)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_timeval1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.timeval1)
  
  ::proto_util_converter::testing::TimeStampType* temp = timeval1_;
  timeval1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_timeval1() {
  
  if (timeval1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    timeval1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.timeval1)
  return timeval1_;
}
inline void TimestampDurationTestCases::set_allocated_timeval1(::proto_util_converter::testing::TimeStampType* timeval1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timeval1_;
  }
  if (timeval1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeval1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeval1, submessage_arena);
    }
    
  } else {
    
  }
  timeval1_ = timeval1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.timeval1)
}

// .proto_util_converter.testing.TimeStampType timeval2 = 6;
inline bool TimestampDurationTestCases::has_timeval2() const {
  return this != internal_default_instance() && timeval2_ != nullptr;
}
inline void TimestampDurationTestCases::clear_timeval2() {
  if (GetArenaNoVirtual() == nullptr && timeval2_ != nullptr) {
    delete timeval2_;
  }
  timeval2_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::timeval2() const {
  const ::proto_util_converter::testing::TimeStampType* p = timeval2_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.timeval2)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_timeval2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.timeval2)
  
  ::proto_util_converter::testing::TimeStampType* temp = timeval2_;
  timeval2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_timeval2() {
  
  if (timeval2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    timeval2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.timeval2)
  return timeval2_;
}
inline void TimestampDurationTestCases::set_allocated_timeval2(::proto_util_converter::testing::TimeStampType* timeval2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timeval2_;
  }
  if (timeval2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeval2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeval2, submessage_arena);
    }
    
  } else {
    
  }
  timeval2_ = timeval2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.timeval2)
}

// .proto_util_converter.testing.TimeStampType timeval3 = 7;
inline bool TimestampDurationTestCases::has_timeval3() const {
  return this != internal_default_instance() && timeval3_ != nullptr;
}
inline void TimestampDurationTestCases::clear_timeval3() {
  if (GetArenaNoVirtual() == nullptr && timeval3_ != nullptr) {
    delete timeval3_;
  }
  timeval3_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::timeval3() const {
  const ::proto_util_converter::testing::TimeStampType* p = timeval3_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.timeval3)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_timeval3() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.timeval3)
  
  ::proto_util_converter::testing::TimeStampType* temp = timeval3_;
  timeval3_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_timeval3() {
  
  if (timeval3_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    timeval3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.timeval3)
  return timeval3_;
}
inline void TimestampDurationTestCases::set_allocated_timeval3(::proto_util_converter::testing::TimeStampType* timeval3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timeval3_;
  }
  if (timeval3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeval3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeval3, submessage_arena);
    }
    
  } else {
    
  }
  timeval3_ = timeval3;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.timeval3)
}

// .proto_util_converter.testing.TimeStampType timeval4 = 8;
inline bool TimestampDurationTestCases::has_timeval4() const {
  return this != internal_default_instance() && timeval4_ != nullptr;
}
inline void TimestampDurationTestCases::clear_timeval4() {
  if (GetArenaNoVirtual() == nullptr && timeval4_ != nullptr) {
    delete timeval4_;
  }
  timeval4_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::timeval4() const {
  const ::proto_util_converter::testing::TimeStampType* p = timeval4_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.timeval4)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_timeval4() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.timeval4)
  
  ::proto_util_converter::testing::TimeStampType* temp = timeval4_;
  timeval4_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_timeval4() {
  
  if (timeval4_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    timeval4_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.timeval4)
  return timeval4_;
}
inline void TimestampDurationTestCases::set_allocated_timeval4(::proto_util_converter::testing::TimeStampType* timeval4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timeval4_;
  }
  if (timeval4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeval4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeval4, submessage_arena);
    }
    
  } else {
    
  }
  timeval4_ = timeval4;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.timeval4)
}

// .proto_util_converter.testing.TimeStampType timeval5 = 9;
inline bool TimestampDurationTestCases::has_timeval5() const {
  return this != internal_default_instance() && timeval5_ != nullptr;
}
inline void TimestampDurationTestCases::clear_timeval5() {
  if (GetArenaNoVirtual() == nullptr && timeval5_ != nullptr) {
    delete timeval5_;
  }
  timeval5_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::timeval5() const {
  const ::proto_util_converter::testing::TimeStampType* p = timeval5_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.timeval5)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_timeval5() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.timeval5)
  
  ::proto_util_converter::testing::TimeStampType* temp = timeval5_;
  timeval5_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_timeval5() {
  
  if (timeval5_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    timeval5_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.timeval5)
  return timeval5_;
}
inline void TimestampDurationTestCases::set_allocated_timeval5(::proto_util_converter::testing::TimeStampType* timeval5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timeval5_;
  }
  if (timeval5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeval5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeval5, submessage_arena);
    }
    
  } else {
    
  }
  timeval5_ = timeval5;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.timeval5)
}

// .proto_util_converter.testing.TimeStampType timeval6 = 10;
inline bool TimestampDurationTestCases::has_timeval6() const {
  return this != internal_default_instance() && timeval6_ != nullptr;
}
inline void TimestampDurationTestCases::clear_timeval6() {
  if (GetArenaNoVirtual() == nullptr && timeval6_ != nullptr) {
    delete timeval6_;
  }
  timeval6_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::timeval6() const {
  const ::proto_util_converter::testing::TimeStampType* p = timeval6_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.timeval6)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_timeval6() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.timeval6)
  
  ::proto_util_converter::testing::TimeStampType* temp = timeval6_;
  timeval6_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_timeval6() {
  
  if (timeval6_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    timeval6_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.timeval6)
  return timeval6_;
}
inline void TimestampDurationTestCases::set_allocated_timeval6(::proto_util_converter::testing::TimeStampType* timeval6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timeval6_;
  }
  if (timeval6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeval6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeval6, submessage_arena);
    }
    
  } else {
    
  }
  timeval6_ = timeval6;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.timeval6)
}

// .proto_util_converter.testing.TimeStampType timeval7 = 11;
inline bool TimestampDurationTestCases::has_timeval7() const {
  return this != internal_default_instance() && timeval7_ != nullptr;
}
inline void TimestampDurationTestCases::clear_timeval7() {
  if (GetArenaNoVirtual() == nullptr && timeval7_ != nullptr) {
    delete timeval7_;
  }
  timeval7_ = nullptr;
}
inline const ::proto_util_converter::testing::TimeStampType& TimestampDurationTestCases::timeval7() const {
  const ::proto_util_converter::testing::TimeStampType* p = timeval7_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.timeval7)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::TimeStampType*>(
      &::proto_util_converter::testing::_TimeStampType_default_instance_);
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::release_timeval7() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.timeval7)
  
  ::proto_util_converter::testing::TimeStampType* temp = timeval7_;
  timeval7_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::TimeStampType* TimestampDurationTestCases::mutable_timeval7() {
  
  if (timeval7_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::TimeStampType>(GetArenaNoVirtual());
    timeval7_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.timeval7)
  return timeval7_;
}
inline void TimestampDurationTestCases::set_allocated_timeval7(::proto_util_converter::testing::TimeStampType* timeval7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timeval7_;
  }
  if (timeval7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeval7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeval7, submessage_arena);
    }
    
  } else {
    
  }
  timeval7_ = timeval7;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.timeval7)
}

// .google.protobuf.Timestamp timeval8 = 12;
inline bool TimestampDurationTestCases::has_timeval8() const {
  return this != internal_default_instance() && timeval8_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampDurationTestCases::timeval8() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timeval8_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.timeval8)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampDurationTestCases::release_timeval8() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.timeval8)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timeval8_;
  timeval8_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampDurationTestCases::mutable_timeval8() {
  
  if (timeval8_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timeval8_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.timeval8)
  return timeval8_;
}
inline void TimestampDurationTestCases::set_allocated_timeval8(PROTOBUF_NAMESPACE_ID::Timestamp* timeval8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeval8_);
  }
  if (timeval8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeval8)->GetArena();
    if (message_arena != submessage_arena) {
      timeval8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeval8, submessage_arena);
    }
    
  } else {
    
  }
  timeval8_ = timeval8;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.timeval8)
}

// .proto_util_converter.testing.DurationType zero_duration = 101;
inline bool TimestampDurationTestCases::has_zero_duration() const {
  return this != internal_default_instance() && zero_duration_ != nullptr;
}
inline void TimestampDurationTestCases::clear_zero_duration() {
  if (GetArenaNoVirtual() == nullptr && zero_duration_ != nullptr) {
    delete zero_duration_;
  }
  zero_duration_ = nullptr;
}
inline const ::proto_util_converter::testing::DurationType& TimestampDurationTestCases::zero_duration() const {
  const ::proto_util_converter::testing::DurationType* p = zero_duration_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.zero_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DurationType*>(
      &::proto_util_converter::testing::_DurationType_default_instance_);
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::release_zero_duration() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.zero_duration)
  
  ::proto_util_converter::testing::DurationType* temp = zero_duration_;
  zero_duration_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::mutable_zero_duration() {
  
  if (zero_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DurationType>(GetArenaNoVirtual());
    zero_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.zero_duration)
  return zero_duration_;
}
inline void TimestampDurationTestCases::set_allocated_zero_duration(::proto_util_converter::testing::DurationType* zero_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zero_duration_;
  }
  if (zero_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zero_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zero_duration, submessage_arena);
    }
    
  } else {
    
  }
  zero_duration_ = zero_duration;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.zero_duration)
}

// .proto_util_converter.testing.DurationType min_duration = 102;
inline bool TimestampDurationTestCases::has_min_duration() const {
  return this != internal_default_instance() && min_duration_ != nullptr;
}
inline void TimestampDurationTestCases::clear_min_duration() {
  if (GetArenaNoVirtual() == nullptr && min_duration_ != nullptr) {
    delete min_duration_;
  }
  min_duration_ = nullptr;
}
inline const ::proto_util_converter::testing::DurationType& TimestampDurationTestCases::min_duration() const {
  const ::proto_util_converter::testing::DurationType* p = min_duration_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.min_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DurationType*>(
      &::proto_util_converter::testing::_DurationType_default_instance_);
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::release_min_duration() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.min_duration)
  
  ::proto_util_converter::testing::DurationType* temp = min_duration_;
  min_duration_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::mutable_min_duration() {
  
  if (min_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DurationType>(GetArenaNoVirtual());
    min_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.min_duration)
  return min_duration_;
}
inline void TimestampDurationTestCases::set_allocated_min_duration(::proto_util_converter::testing::DurationType* min_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete min_duration_;
  }
  if (min_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      min_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_duration, submessage_arena);
    }
    
  } else {
    
  }
  min_duration_ = min_duration;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.min_duration)
}

// .proto_util_converter.testing.DurationType max_duration = 103;
inline bool TimestampDurationTestCases::has_max_duration() const {
  return this != internal_default_instance() && max_duration_ != nullptr;
}
inline void TimestampDurationTestCases::clear_max_duration() {
  if (GetArenaNoVirtual() == nullptr && max_duration_ != nullptr) {
    delete max_duration_;
  }
  max_duration_ = nullptr;
}
inline const ::proto_util_converter::testing::DurationType& TimestampDurationTestCases::max_duration() const {
  const ::proto_util_converter::testing::DurationType* p = max_duration_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.max_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DurationType*>(
      &::proto_util_converter::testing::_DurationType_default_instance_);
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::release_max_duration() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.max_duration)
  
  ::proto_util_converter::testing::DurationType* temp = max_duration_;
  max_duration_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::mutable_max_duration() {
  
  if (max_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DurationType>(GetArenaNoVirtual());
    max_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.max_duration)
  return max_duration_;
}
inline void TimestampDurationTestCases::set_allocated_max_duration(::proto_util_converter::testing::DurationType* max_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete max_duration_;
  }
  if (max_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_duration, submessage_arena);
    }
    
  } else {
    
  }
  max_duration_ = max_duration;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.max_duration)
}

// .proto_util_converter.testing.DurationType duration1 = 104;
inline bool TimestampDurationTestCases::has_duration1() const {
  return this != internal_default_instance() && duration1_ != nullptr;
}
inline void TimestampDurationTestCases::clear_duration1() {
  if (GetArenaNoVirtual() == nullptr && duration1_ != nullptr) {
    delete duration1_;
  }
  duration1_ = nullptr;
}
inline const ::proto_util_converter::testing::DurationType& TimestampDurationTestCases::duration1() const {
  const ::proto_util_converter::testing::DurationType* p = duration1_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.duration1)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DurationType*>(
      &::proto_util_converter::testing::_DurationType_default_instance_);
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::release_duration1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.duration1)
  
  ::proto_util_converter::testing::DurationType* temp = duration1_;
  duration1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::mutable_duration1() {
  
  if (duration1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DurationType>(GetArenaNoVirtual());
    duration1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.duration1)
  return duration1_;
}
inline void TimestampDurationTestCases::set_allocated_duration1(::proto_util_converter::testing::DurationType* duration1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete duration1_;
  }
  if (duration1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      duration1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration1, submessage_arena);
    }
    
  } else {
    
  }
  duration1_ = duration1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.duration1)
}

// .proto_util_converter.testing.DurationType duration2 = 105;
inline bool TimestampDurationTestCases::has_duration2() const {
  return this != internal_default_instance() && duration2_ != nullptr;
}
inline void TimestampDurationTestCases::clear_duration2() {
  if (GetArenaNoVirtual() == nullptr && duration2_ != nullptr) {
    delete duration2_;
  }
  duration2_ = nullptr;
}
inline const ::proto_util_converter::testing::DurationType& TimestampDurationTestCases::duration2() const {
  const ::proto_util_converter::testing::DurationType* p = duration2_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.duration2)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DurationType*>(
      &::proto_util_converter::testing::_DurationType_default_instance_);
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::release_duration2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.duration2)
  
  ::proto_util_converter::testing::DurationType* temp = duration2_;
  duration2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::mutable_duration2() {
  
  if (duration2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DurationType>(GetArenaNoVirtual());
    duration2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.duration2)
  return duration2_;
}
inline void TimestampDurationTestCases::set_allocated_duration2(::proto_util_converter::testing::DurationType* duration2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete duration2_;
  }
  if (duration2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      duration2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration2, submessage_arena);
    }
    
  } else {
    
  }
  duration2_ = duration2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.duration2)
}

// .proto_util_converter.testing.DurationType duration3 = 106;
inline bool TimestampDurationTestCases::has_duration3() const {
  return this != internal_default_instance() && duration3_ != nullptr;
}
inline void TimestampDurationTestCases::clear_duration3() {
  if (GetArenaNoVirtual() == nullptr && duration3_ != nullptr) {
    delete duration3_;
  }
  duration3_ = nullptr;
}
inline const ::proto_util_converter::testing::DurationType& TimestampDurationTestCases::duration3() const {
  const ::proto_util_converter::testing::DurationType* p = duration3_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.duration3)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DurationType*>(
      &::proto_util_converter::testing::_DurationType_default_instance_);
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::release_duration3() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.duration3)
  
  ::proto_util_converter::testing::DurationType* temp = duration3_;
  duration3_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::mutable_duration3() {
  
  if (duration3_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DurationType>(GetArenaNoVirtual());
    duration3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.duration3)
  return duration3_;
}
inline void TimestampDurationTestCases::set_allocated_duration3(::proto_util_converter::testing::DurationType* duration3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete duration3_;
  }
  if (duration3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      duration3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration3, submessage_arena);
    }
    
  } else {
    
  }
  duration3_ = duration3;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.duration3)
}

// .proto_util_converter.testing.DurationType duration4 = 107;
inline bool TimestampDurationTestCases::has_duration4() const {
  return this != internal_default_instance() && duration4_ != nullptr;
}
inline void TimestampDurationTestCases::clear_duration4() {
  if (GetArenaNoVirtual() == nullptr && duration4_ != nullptr) {
    delete duration4_;
  }
  duration4_ = nullptr;
}
inline const ::proto_util_converter::testing::DurationType& TimestampDurationTestCases::duration4() const {
  const ::proto_util_converter::testing::DurationType* p = duration4_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.duration4)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::DurationType*>(
      &::proto_util_converter::testing::_DurationType_default_instance_);
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::release_duration4() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.duration4)
  
  ::proto_util_converter::testing::DurationType* temp = duration4_;
  duration4_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::DurationType* TimestampDurationTestCases::mutable_duration4() {
  
  if (duration4_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::DurationType>(GetArenaNoVirtual());
    duration4_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.duration4)
  return duration4_;
}
inline void TimestampDurationTestCases::set_allocated_duration4(::proto_util_converter::testing::DurationType* duration4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete duration4_;
  }
  if (duration4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      duration4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration4, submessage_arena);
    }
    
  } else {
    
  }
  duration4_ = duration4;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.duration4)
}

// .google.protobuf.Duration duration5 = 108;
inline bool TimestampDurationTestCases::has_duration5() const {
  return this != internal_default_instance() && duration5_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimestampDurationTestCases::duration5() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration5_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDurationTestCases.duration5)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimestampDurationTestCases::release_duration5() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDurationTestCases.duration5)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration5_;
  duration5_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimestampDurationTestCases::mutable_duration5() {
  
  if (duration5_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    duration5_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDurationTestCases.duration5)
  return duration5_;
}
inline void TimestampDurationTestCases::set_allocated_duration5(PROTOBUF_NAMESPACE_ID::Duration* duration5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration5_);
  }
  if (duration5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration5)->GetArena();
    if (message_arena != submessage_arena) {
      duration5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration5, submessage_arena);
    }
    
  } else {
    
  }
  duration5_ = duration5;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDurationTestCases.duration5)
}

// -------------------------------------------------------------------

// TimeStampType

// .google.protobuf.Timestamp timestamp = 1;
inline bool TimeStampType::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeStampType::timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimeStampType.timestamp)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeStampType::release_timestamp() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimeStampType.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeStampType::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimeStampType.timestamp)
  return timestamp_;
}
inline void TimeStampType::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimeStampType.timestamp)
}

// -------------------------------------------------------------------

// DurationType

// .google.protobuf.Duration duration = 1;
inline bool DurationType::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationType::duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.DurationType.duration)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationType::release_duration() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.DurationType.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationType::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.DurationType.duration)
  return duration_;
}
inline void DurationType::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.DurationType.duration)
}

// -------------------------------------------------------------------

// TimestampDuration

// .google.protobuf.Timestamp ts = 1;
inline bool TimestampDuration::has_ts() const {
  return this != internal_default_instance() && ts_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampDuration::ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = ts_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDuration.ts)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampDuration::release_ts() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDuration.ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = ts_;
  ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampDuration::mutable_ts() {
  
  if (ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    ts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDuration.ts)
  return ts_;
}
inline void TimestampDuration::set_allocated_ts(PROTOBUF_NAMESPACE_ID::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts)->GetArena();
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    
  } else {
    
  }
  ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDuration.ts)
}

// .google.protobuf.Duration dur = 2;
inline bool TimestampDuration::has_dur() const {
  return this != internal_default_instance() && dur_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimestampDuration::dur() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = dur_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDuration.dur)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimestampDuration::release_dur() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TimestampDuration.dur)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = dur_;
  dur_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimestampDuration::mutable_dur() {
  
  if (dur_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    dur_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDuration.dur)
  return dur_;
}
inline void TimestampDuration::set_allocated_dur(PROTOBUF_NAMESPACE_ID::Duration* dur) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dur_);
  }
  if (dur) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dur)->GetArena();
    if (message_arena != submessage_arena) {
      dur = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dur, submessage_arena);
    }
    
  } else {
    
  }
  dur_ = dur;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TimestampDuration.dur)
}

// repeated .google.protobuf.Timestamp rep_ts = 3;
inline int TimestampDuration::rep_ts_size() const {
  return rep_ts_.size();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampDuration::mutable_rep_ts(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TimestampDuration.rep_ts)
  return rep_ts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >*
TimestampDuration::mutable_rep_ts() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.TimestampDuration.rep_ts)
  return &rep_ts_;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampDuration::rep_ts(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TimestampDuration.rep_ts)
  return rep_ts_.Get(index);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampDuration::add_rep_ts() {
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.TimestampDuration.rep_ts)
  return rep_ts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >&
TimestampDuration::rep_ts() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.TimestampDuration.rep_ts)
  return rep_ts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace proto_util_converter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto
