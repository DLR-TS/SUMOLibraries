// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/anys.proto

#include "google/protobuf/util/internal/testdata/anys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnyWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Data_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto;
namespace proto_util_converter {
namespace testing {
class AnyTestCasesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyTestCases> _instance;
} _AnyTestCases_default_instance_;
class AnyWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyWrapper> _instance;
} _AnyWrapper_default_instance_;
class ImportsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Imports> _instance;
} _Imports_default_instance_;
class Data_MapDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data_MapDataEntry_DoNotUse> _instance;
} _Data_MapDataEntry_DoNotUse_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Data> _instance;
} _Data_default_instance_;
class AnyInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyIn> _instance;
} _AnyIn_default_instance_;
class AnyOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyOut> _instance;
} _AnyOut_default_instance_;
class AnyMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyM> _instance;
} _AnyM_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static void InitDefaultsscc_info_AnyIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_AnyIn_default_instance_;
    new (ptr) ::proto_util_converter::testing::AnyIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::AnyIn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnyIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AnyIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_AnyM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_AnyM_default_instance_;
    new (ptr) ::proto_util_converter::testing::AnyM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::AnyM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnyM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AnyM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto}, {}};

static void InitDefaultsscc_info_AnyOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_AnyOut_default_instance_;
    new (ptr) ::proto_util_converter::testing::AnyOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::AnyOut::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnyOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AnyOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_AnyTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_AnyTestCases_default_instance_;
    new (ptr) ::proto_util_converter::testing::AnyTestCases();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::AnyTestCases::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AnyTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto}, {
      &scc_info_AnyWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_AnyWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_AnyWrapper_default_instance_;
    new (ptr) ::proto_util_converter::testing::AnyWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::AnyWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnyWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AnyWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Data_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_Data_default_instance_;
    new (ptr) ::proto_util_converter::testing::Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Data_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Data_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Data_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Data_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_Data_MapDataEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::Data_MapDataEntry_DoNotUse();
  }
  ::proto_util_converter::testing::Data_MapDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Data_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Data_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto}, {}};

static void InitDefaultsscc_info_Imports_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_Imports_default_instance_;
    new (ptr) ::proto_util_converter::testing::Imports();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::Imports::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Imports_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_Imports_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Data_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, empty_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, type_only_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, wrapper_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_timestamp_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_duration_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_struct_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, recursive_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_message_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_nested_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_message_with_wrapper_type_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_message_with_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_message_containing_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_message_containing_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, any_with_message_containing_repeated_message_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, recursive_any_with_type_field_at_end_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, repeated_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, empty_any_with_null_type_url_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, top_level_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, top_level_any_with_type_field_at_end_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, top_level_any_with_pivot_one_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, top_level_any_with_pivot_two_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyTestCases, top_level_any_unordered_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyWrapper, any_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Imports, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Imports, dbl_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Imports, struct__),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Imports, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Imports, duration_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Imports, i32_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Imports, data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data_MapDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data_MapDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data_MapDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data_MapDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, attr_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, str_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, msgs_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, nested_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, int_wrapper_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, time_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, map_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, struct_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, repeated_data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Data, repeated_any_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyIn, something_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyIn, any_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyOut, any_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::AnyM, foo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto_util_converter::testing::AnyTestCases)},
  { 27, -1, sizeof(::proto_util_converter::testing::AnyWrapper)},
  { 33, -1, sizeof(::proto_util_converter::testing::Imports)},
  { 44, 51, sizeof(::proto_util_converter::testing::Data_MapDataEntry_DoNotUse)},
  { 53, -1, sizeof(::proto_util_converter::testing::Data)},
  { 68, -1, sizeof(::proto_util_converter::testing::AnyIn)},
  { 75, -1, sizeof(::proto_util_converter::testing::AnyOut)},
  { 81, -1, sizeof(::proto_util_converter::testing::AnyM)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_AnyTestCases_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_AnyWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_Imports_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_Data_MapDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_AnyIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_AnyOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_AnyM_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1google/protobuf/util/internal/testdata"
  "/anys.proto\022\034proto_util_converter.testin"
  "g\032\031google/protobuf/any.proto\032\036google/pro"
  "tobuf/duration.proto\032\034google/protobuf/st"
  "ruct.proto\032\037google/protobuf/timestamp.pr"
  "oto\032\036google/protobuf/wrappers.proto\"\273\014\n\014"
  "AnyTestCases\022;\n\tempty_any\030\001 \001(\0132(.proto_"
  "util_converter.testing.AnyWrapper\022\?\n\rtyp"
  "e_only_any\030\002 \001(\0132(.proto_util_converter."
  "testing.AnyWrapper\022=\n\013wrapper_any\030\003 \001(\0132"
  "(.proto_util_converter.testing.AnyWrappe"
  "r\022J\n\030any_with_timestamp_value\030\004 \001(\0132(.pr"
  "oto_util_converter.testing.AnyWrapper\022I\n"
  "\027any_with_duration_value\030\005 \001(\0132(.proto_u"
  "til_converter.testing.AnyWrapper\022G\n\025any_"
  "with_struct_value\030\006 \001(\0132(.proto_util_con"
  "verter.testing.AnyWrapper\022\?\n\rrecursive_a"
  "ny\030\007 \001(\0132(.proto_util_converter.testing."
  "AnyWrapper\022H\n\026any_with_message_value\030\010 \001"
  "(\0132(.proto_util_converter.testing.AnyWra"
  "pper\022I\n\027any_with_nested_message\030\t \001(\0132(."
  "proto_util_converter.testing.AnyWrapper\022"
  "T\n\"any_with_message_with_wrapper_type\030\n "
  "\001(\0132(.proto_util_converter.testing.AnyWr"
  "apper\022Q\n\037any_with_message_with_timestamp"
  "\030\013 \001(\0132(.proto_util_converter.testing.An"
  "yWrapper\022Q\n\037any_with_message_containing_"
  "map\030\014 \001(\0132(.proto_util_converter.testing"
  ".AnyWrapper\022T\n\"any_with_message_containi"
  "ng_struct\030\r \001(\0132(.proto_util_converter.t"
  "esting.AnyWrapper\022^\n,any_with_message_co"
  "ntaining_repeated_message\030\016 \001(\0132(.proto_"
  "util_converter.testing.AnyWrapper\022V\n$rec"
  "ursive_any_with_type_field_at_end\030\017 \001(\0132"
  "(.proto_util_converter.testing.AnyWrappe"
  "r\022>\n\014repeated_any\030\020 \001(\0132(.proto_util_con"
  "verter.testing.AnyWrapper\022N\n\034empty_any_w"
  "ith_null_type_url\030\021 \001(\0132(.proto_util_con"
  "verter.testing.AnyWrapper\022+\n\rtop_level_a"
  "ny\0302 \001(\0132\024.google.protobuf.Any\022B\n$top_le"
  "vel_any_with_type_field_at_end\0303 \001(\0132\024.g"
  "oogle.protobuf.Any\022:\n\034top_level_any_with"
  "_pivot_one\0304 \001(\0132\024.google.protobuf.Any\022:"
  "\n\034top_level_any_with_pivot_two\0305 \001(\0132\024.g"
  "oogle.protobuf.Any\0225\n\027top_level_any_unor"
  "dered\0306 \001(\0132\024.google.protobuf.Any\"/\n\nAny"
  "Wrapper\022!\n\003any\030\001 \001(\0132\024.google.protobuf.A"
  "ny\"\225\002\n\007Imports\022)\n\003dbl\030\001 \001(\0132\034.google.pro"
  "tobuf.DoubleValue\022\'\n\006struct\030\002 \001(\0132\027.goog"
  "le.protobuf.Struct\022-\n\ttimestamp\030\003 \001(\0132\032."
  "google.protobuf.Timestamp\022+\n\010duration\030\004 "
  "\001(\0132\031.google.protobuf.Duration\022(\n\003i32\030\005 "
  "\001(\0132\033.google.protobuf.Int32Value\0220\n\004data"
  "\030d \001(\0132\".proto_util_converter.testing.Da"
  "ta\"\314\003\n\004Data\022\014\n\004attr\030\001 \001(\005\022\013\n\003str\030\002 \001(\t\022\014"
  "\n\004msgs\030\003 \003(\t\0227\n\013nested_data\030\004 \001(\0132\".prot"
  "o_util_converter.testing.Data\0220\n\013int_wra"
  "pper\030\005 \001(\0132\033.google.protobuf.Int32Value\022"
  "(\n\004time\030\006 \001(\0132\032.google.protobuf.Timestam"
  "p\022A\n\010map_data\030\007 \003(\0132/.proto_util_convert"
  "er.testing.Data.MapDataEntry\022,\n\013struct_d"
  "ata\030\010 \001(\0132\027.google.protobuf.Struct\0229\n\rre"
  "peated_data\030\t \003(\0132\".proto_util_converter"
  ".testing.Data\022*\n\014repeated_any\030\n \003(\0132\024.go"
  "ogle.protobuf.Any\032.\n\014MapDataEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"=\n\005AnyIn\022\021\n\tso"
  "mething\030\001 \001(\t\022!\n\003any\030\002 \001(\0132\024.google.prot"
  "obuf.Any\"+\n\006AnyOut\022!\n\003any\030\001 \001(\0132\024.google"
  ".protobuf.Any\"\023\n\004AnyM\022\013\n\003foo\030\001 \001(\t2\307\001\n\016A"
  "nyTestService\022^\n\004Call\022*.proto_util_conve"
  "rter.testing.AnyTestCases\032*.proto_util_c"
  "onverter.testing.AnyTestCases\022U\n\005Call1\022%"
  ".proto_util_converter.testing.Imports\032%."
  "proto_util_converter.testing.Importsb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto_sccs[8] = {
  &scc_info_AnyIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
  &scc_info_AnyM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
  &scc_info_AnyOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
  &scc_info_AnyTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
  &scc_info_AnyWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
  &scc_info_Data_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
  &scc_info_Data_MapDataEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
  &scc_info_Imports_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto_once;
static bool descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto = {
  &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto_initialized, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto, "google/protobuf/util/internal/testdata/anys.proto", 2964,
  &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto_sccs, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto_deps, 8, 5,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto, 8, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto, file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto), true);
namespace proto_util_converter {
namespace testing {

// ===================================================================

void AnyTestCases::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->empty_any_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->type_only_any_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->wrapper_any_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_timestamp_value_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_duration_value_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_struct_value_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->recursive_any_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_message_value_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_nested_message_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_message_with_wrapper_type_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_message_with_timestamp_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_message_containing_map_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_message_containing_struct_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->any_with_message_containing_repeated_message_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->recursive_any_with_type_field_at_end_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->repeated_any_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->empty_any_with_null_type_url_ = const_cast< ::proto_util_converter::testing::AnyWrapper*>(
      ::proto_util_converter::testing::AnyWrapper::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->top_level_any_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->top_level_any_with_type_field_at_end_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->top_level_any_with_pivot_one_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->top_level_any_with_pivot_two_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::proto_util_converter::testing::_AnyTestCases_default_instance_._instance.get_mutable()->top_level_any_unordered_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class AnyTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::AnyWrapper& empty_any(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& type_only_any(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& wrapper_any(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_timestamp_value(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_duration_value(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_struct_value(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& recursive_any(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_message_value(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_nested_message(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_message_with_wrapper_type(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_message_with_timestamp(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_message_containing_map(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_message_containing_struct(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& any_with_message_containing_repeated_message(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& recursive_any_with_type_field_at_end(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& repeated_any(const AnyTestCases* msg);
  static const ::proto_util_converter::testing::AnyWrapper& empty_any_with_null_type_url(const AnyTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& top_level_any(const AnyTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& top_level_any_with_type_field_at_end(const AnyTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& top_level_any_with_pivot_one(const AnyTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& top_level_any_with_pivot_two(const AnyTestCases* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& top_level_any_unordered(const AnyTestCases* msg);
};

const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::empty_any(const AnyTestCases* msg) {
  return *msg->empty_any_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::type_only_any(const AnyTestCases* msg) {
  return *msg->type_only_any_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::wrapper_any(const AnyTestCases* msg) {
  return *msg->wrapper_any_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_timestamp_value(const AnyTestCases* msg) {
  return *msg->any_with_timestamp_value_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_duration_value(const AnyTestCases* msg) {
  return *msg->any_with_duration_value_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_struct_value(const AnyTestCases* msg) {
  return *msg->any_with_struct_value_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::recursive_any(const AnyTestCases* msg) {
  return *msg->recursive_any_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_message_value(const AnyTestCases* msg) {
  return *msg->any_with_message_value_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_nested_message(const AnyTestCases* msg) {
  return *msg->any_with_nested_message_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_message_with_wrapper_type(const AnyTestCases* msg) {
  return *msg->any_with_message_with_wrapper_type_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_message_with_timestamp(const AnyTestCases* msg) {
  return *msg->any_with_message_with_timestamp_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_message_containing_map(const AnyTestCases* msg) {
  return *msg->any_with_message_containing_map_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_message_containing_struct(const AnyTestCases* msg) {
  return *msg->any_with_message_containing_struct_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::any_with_message_containing_repeated_message(const AnyTestCases* msg) {
  return *msg->any_with_message_containing_repeated_message_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::recursive_any_with_type_field_at_end(const AnyTestCases* msg) {
  return *msg->recursive_any_with_type_field_at_end_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::repeated_any(const AnyTestCases* msg) {
  return *msg->repeated_any_;
}
const ::proto_util_converter::testing::AnyWrapper&
AnyTestCases::_Internal::empty_any_with_null_type_url(const AnyTestCases* msg) {
  return *msg->empty_any_with_null_type_url_;
}
const PROTOBUF_NAMESPACE_ID::Any&
AnyTestCases::_Internal::top_level_any(const AnyTestCases* msg) {
  return *msg->top_level_any_;
}
const PROTOBUF_NAMESPACE_ID::Any&
AnyTestCases::_Internal::top_level_any_with_type_field_at_end(const AnyTestCases* msg) {
  return *msg->top_level_any_with_type_field_at_end_;
}
const PROTOBUF_NAMESPACE_ID::Any&
AnyTestCases::_Internal::top_level_any_with_pivot_one(const AnyTestCases* msg) {
  return *msg->top_level_any_with_pivot_one_;
}
const PROTOBUF_NAMESPACE_ID::Any&
AnyTestCases::_Internal::top_level_any_with_pivot_two(const AnyTestCases* msg) {
  return *msg->top_level_any_with_pivot_two_;
}
const PROTOBUF_NAMESPACE_ID::Any&
AnyTestCases::_Internal::top_level_any_unordered(const AnyTestCases* msg) {
  return *msg->top_level_any_unordered_;
}
void AnyTestCases::clear_top_level_any() {
  if (GetArenaNoVirtual() == nullptr && top_level_any_ != nullptr) {
    delete top_level_any_;
  }
  top_level_any_ = nullptr;
}
void AnyTestCases::clear_top_level_any_with_type_field_at_end() {
  if (GetArenaNoVirtual() == nullptr && top_level_any_with_type_field_at_end_ != nullptr) {
    delete top_level_any_with_type_field_at_end_;
  }
  top_level_any_with_type_field_at_end_ = nullptr;
}
void AnyTestCases::clear_top_level_any_with_pivot_one() {
  if (GetArenaNoVirtual() == nullptr && top_level_any_with_pivot_one_ != nullptr) {
    delete top_level_any_with_pivot_one_;
  }
  top_level_any_with_pivot_one_ = nullptr;
}
void AnyTestCases::clear_top_level_any_with_pivot_two() {
  if (GetArenaNoVirtual() == nullptr && top_level_any_with_pivot_two_ != nullptr) {
    delete top_level_any_with_pivot_two_;
  }
  top_level_any_with_pivot_two_ = nullptr;
}
void AnyTestCases::clear_top_level_any_unordered() {
  if (GetArenaNoVirtual() == nullptr && top_level_any_unordered_ != nullptr) {
    delete top_level_any_unordered_;
  }
  top_level_any_unordered_ = nullptr;
}
AnyTestCases::AnyTestCases()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.AnyTestCases)
}
AnyTestCases::AnyTestCases(const AnyTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_empty_any()) {
    empty_any_ = new ::proto_util_converter::testing::AnyWrapper(*from.empty_any_);
  } else {
    empty_any_ = nullptr;
  }
  if (from.has_type_only_any()) {
    type_only_any_ = new ::proto_util_converter::testing::AnyWrapper(*from.type_only_any_);
  } else {
    type_only_any_ = nullptr;
  }
  if (from.has_wrapper_any()) {
    wrapper_any_ = new ::proto_util_converter::testing::AnyWrapper(*from.wrapper_any_);
  } else {
    wrapper_any_ = nullptr;
  }
  if (from.has_any_with_timestamp_value()) {
    any_with_timestamp_value_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_timestamp_value_);
  } else {
    any_with_timestamp_value_ = nullptr;
  }
  if (from.has_any_with_duration_value()) {
    any_with_duration_value_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_duration_value_);
  } else {
    any_with_duration_value_ = nullptr;
  }
  if (from.has_any_with_struct_value()) {
    any_with_struct_value_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_struct_value_);
  } else {
    any_with_struct_value_ = nullptr;
  }
  if (from.has_recursive_any()) {
    recursive_any_ = new ::proto_util_converter::testing::AnyWrapper(*from.recursive_any_);
  } else {
    recursive_any_ = nullptr;
  }
  if (from.has_any_with_message_value()) {
    any_with_message_value_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_message_value_);
  } else {
    any_with_message_value_ = nullptr;
  }
  if (from.has_any_with_nested_message()) {
    any_with_nested_message_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_nested_message_);
  } else {
    any_with_nested_message_ = nullptr;
  }
  if (from.has_any_with_message_with_wrapper_type()) {
    any_with_message_with_wrapper_type_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_message_with_wrapper_type_);
  } else {
    any_with_message_with_wrapper_type_ = nullptr;
  }
  if (from.has_any_with_message_with_timestamp()) {
    any_with_message_with_timestamp_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_message_with_timestamp_);
  } else {
    any_with_message_with_timestamp_ = nullptr;
  }
  if (from.has_any_with_message_containing_map()) {
    any_with_message_containing_map_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_message_containing_map_);
  } else {
    any_with_message_containing_map_ = nullptr;
  }
  if (from.has_any_with_message_containing_struct()) {
    any_with_message_containing_struct_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_message_containing_struct_);
  } else {
    any_with_message_containing_struct_ = nullptr;
  }
  if (from.has_any_with_message_containing_repeated_message()) {
    any_with_message_containing_repeated_message_ = new ::proto_util_converter::testing::AnyWrapper(*from.any_with_message_containing_repeated_message_);
  } else {
    any_with_message_containing_repeated_message_ = nullptr;
  }
  if (from.has_recursive_any_with_type_field_at_end()) {
    recursive_any_with_type_field_at_end_ = new ::proto_util_converter::testing::AnyWrapper(*from.recursive_any_with_type_field_at_end_);
  } else {
    recursive_any_with_type_field_at_end_ = nullptr;
  }
  if (from.has_repeated_any()) {
    repeated_any_ = new ::proto_util_converter::testing::AnyWrapper(*from.repeated_any_);
  } else {
    repeated_any_ = nullptr;
  }
  if (from.has_empty_any_with_null_type_url()) {
    empty_any_with_null_type_url_ = new ::proto_util_converter::testing::AnyWrapper(*from.empty_any_with_null_type_url_);
  } else {
    empty_any_with_null_type_url_ = nullptr;
  }
  if (from.has_top_level_any()) {
    top_level_any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.top_level_any_);
  } else {
    top_level_any_ = nullptr;
  }
  if (from.has_top_level_any_with_type_field_at_end()) {
    top_level_any_with_type_field_at_end_ = new PROTOBUF_NAMESPACE_ID::Any(*from.top_level_any_with_type_field_at_end_);
  } else {
    top_level_any_with_type_field_at_end_ = nullptr;
  }
  if (from.has_top_level_any_with_pivot_one()) {
    top_level_any_with_pivot_one_ = new PROTOBUF_NAMESPACE_ID::Any(*from.top_level_any_with_pivot_one_);
  } else {
    top_level_any_with_pivot_one_ = nullptr;
  }
  if (from.has_top_level_any_with_pivot_two()) {
    top_level_any_with_pivot_two_ = new PROTOBUF_NAMESPACE_ID::Any(*from.top_level_any_with_pivot_two_);
  } else {
    top_level_any_with_pivot_two_ = nullptr;
  }
  if (from.has_top_level_any_unordered()) {
    top_level_any_unordered_ = new PROTOBUF_NAMESPACE_ID::Any(*from.top_level_any_unordered_);
  } else {
    top_level_any_unordered_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyTestCases)
}

void AnyTestCases::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  ::memset(&empty_any_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_level_any_unordered_) -
      reinterpret_cast<char*>(&empty_any_)) + sizeof(top_level_any_unordered_));
}

AnyTestCases::~AnyTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyTestCases)
  SharedDtor();
}

void AnyTestCases::SharedDtor() {
  if (this != internal_default_instance()) delete empty_any_;
  if (this != internal_default_instance()) delete type_only_any_;
  if (this != internal_default_instance()) delete wrapper_any_;
  if (this != internal_default_instance()) delete any_with_timestamp_value_;
  if (this != internal_default_instance()) delete any_with_duration_value_;
  if (this != internal_default_instance()) delete any_with_struct_value_;
  if (this != internal_default_instance()) delete recursive_any_;
  if (this != internal_default_instance()) delete any_with_message_value_;
  if (this != internal_default_instance()) delete any_with_nested_message_;
  if (this != internal_default_instance()) delete any_with_message_with_wrapper_type_;
  if (this != internal_default_instance()) delete any_with_message_with_timestamp_;
  if (this != internal_default_instance()) delete any_with_message_containing_map_;
  if (this != internal_default_instance()) delete any_with_message_containing_struct_;
  if (this != internal_default_instance()) delete any_with_message_containing_repeated_message_;
  if (this != internal_default_instance()) delete recursive_any_with_type_field_at_end_;
  if (this != internal_default_instance()) delete repeated_any_;
  if (this != internal_default_instance()) delete empty_any_with_null_type_url_;
  if (this != internal_default_instance()) delete top_level_any_;
  if (this != internal_default_instance()) delete top_level_any_with_type_field_at_end_;
  if (this != internal_default_instance()) delete top_level_any_with_pivot_one_;
  if (this != internal_default_instance()) delete top_level_any_with_pivot_two_;
  if (this != internal_default_instance()) delete top_level_any_unordered_;
}

void AnyTestCases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyTestCases& AnyTestCases::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  return *internal_default_instance();
}


void AnyTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && empty_any_ != nullptr) {
    delete empty_any_;
  }
  empty_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_only_any_ != nullptr) {
    delete type_only_any_;
  }
  type_only_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wrapper_any_ != nullptr) {
    delete wrapper_any_;
  }
  wrapper_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_timestamp_value_ != nullptr) {
    delete any_with_timestamp_value_;
  }
  any_with_timestamp_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_duration_value_ != nullptr) {
    delete any_with_duration_value_;
  }
  any_with_duration_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_struct_value_ != nullptr) {
    delete any_with_struct_value_;
  }
  any_with_struct_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recursive_any_ != nullptr) {
    delete recursive_any_;
  }
  recursive_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_value_ != nullptr) {
    delete any_with_message_value_;
  }
  any_with_message_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_nested_message_ != nullptr) {
    delete any_with_nested_message_;
  }
  any_with_nested_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_with_wrapper_type_ != nullptr) {
    delete any_with_message_with_wrapper_type_;
  }
  any_with_message_with_wrapper_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_with_timestamp_ != nullptr) {
    delete any_with_message_with_timestamp_;
  }
  any_with_message_with_timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_containing_map_ != nullptr) {
    delete any_with_message_containing_map_;
  }
  any_with_message_containing_map_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_containing_struct_ != nullptr) {
    delete any_with_message_containing_struct_;
  }
  any_with_message_containing_struct_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_with_message_containing_repeated_message_ != nullptr) {
    delete any_with_message_containing_repeated_message_;
  }
  any_with_message_containing_repeated_message_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recursive_any_with_type_field_at_end_ != nullptr) {
    delete recursive_any_with_type_field_at_end_;
  }
  recursive_any_with_type_field_at_end_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && repeated_any_ != nullptr) {
    delete repeated_any_;
  }
  repeated_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_any_with_null_type_url_ != nullptr) {
    delete empty_any_with_null_type_url_;
  }
  empty_any_with_null_type_url_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_any_ != nullptr) {
    delete top_level_any_;
  }
  top_level_any_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_any_with_type_field_at_end_ != nullptr) {
    delete top_level_any_with_type_field_at_end_;
  }
  top_level_any_with_type_field_at_end_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_any_with_pivot_one_ != nullptr) {
    delete top_level_any_with_pivot_one_;
  }
  top_level_any_with_pivot_one_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_any_with_pivot_two_ != nullptr) {
    delete top_level_any_with_pivot_two_;
  }
  top_level_any_with_pivot_two_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && top_level_any_unordered_ != nullptr) {
    delete top_level_any_unordered_;
  }
  top_level_any_unordered_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnyTestCases::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto_util_converter.testing.AnyWrapper empty_any = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_empty_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper type_only_any = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_type_only_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper wrapper_any = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_wrapper_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_timestamp_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_any_with_timestamp_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_duration_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_any_with_duration_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_struct_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_any_with_struct_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper recursive_any = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_recursive_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_message_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_any_with_message_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_nested_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_any_with_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_message_with_wrapper_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_any_with_message_with_wrapper_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_message_with_timestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_any_with_message_with_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_message_containing_map = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_any_with_message_containing_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_message_containing_struct = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_any_with_message_containing_struct(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper any_with_message_containing_repeated_message = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_any_with_message_containing_repeated_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper recursive_any_with_type_field_at_end = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_recursive_any_with_type_field_at_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper repeated_any = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_repeated_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.AnyWrapper empty_any_with_null_type_url = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_empty_any_with_null_type_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any top_level_any = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_top_level_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any top_level_any_with_type_field_at_end = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_top_level_any_with_type_field_at_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any top_level_any_with_pivot_one = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_top_level_any_with_pivot_one(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any top_level_any_with_pivot_two = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_top_level_any_with_pivot_two(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any top_level_any_unordered = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_top_level_any_unordered(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnyTestCases::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.AnyTestCases)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto_util_converter.testing.AnyWrapper empty_any = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper type_only_any = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_type_only_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper wrapper_any = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wrapper_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_timestamp_value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_timestamp_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_duration_value = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_duration_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_struct_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_struct_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper recursive_any = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recursive_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_message_value = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_message_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_nested_message = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_nested_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_message_with_wrapper_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_message_with_wrapper_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_message_with_timestamp = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_message_with_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_message_containing_map = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_message_containing_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_message_containing_struct = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_message_containing_struct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper any_with_message_containing_repeated_message = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_with_message_containing_repeated_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper recursive_any_with_type_field_at_end = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recursive_any_with_type_field_at_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper repeated_any = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_repeated_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.AnyWrapper empty_any_with_null_type_url = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_any_with_null_type_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any top_level_any = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_top_level_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any top_level_any_with_type_field_at_end = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_top_level_any_with_type_field_at_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any top_level_any_with_pivot_one = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_top_level_any_with_pivot_one()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any top_level_any_with_pivot_two = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_top_level_any_with_pivot_two()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any top_level_any_unordered = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_top_level_any_unordered()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.AnyTestCases)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.AnyTestCases)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnyTestCases::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.AnyTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.AnyWrapper empty_any = 1;
  if (this->has_empty_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::empty_any(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper type_only_any = 2;
  if (this->has_type_only_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::type_only_any(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper wrapper_any = 3;
  if (this->has_wrapper_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::wrapper_any(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_timestamp_value = 4;
  if (this->has_any_with_timestamp_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::any_with_timestamp_value(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_duration_value = 5;
  if (this->has_any_with_duration_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::any_with_duration_value(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_struct_value = 6;
  if (this->has_any_with_struct_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::any_with_struct_value(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper recursive_any = 7;
  if (this->has_recursive_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::recursive_any(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_value = 8;
  if (this->has_any_with_message_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::any_with_message_value(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_nested_message = 9;
  if (this->has_any_with_nested_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::any_with_nested_message(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_with_wrapper_type = 10;
  if (this->has_any_with_message_with_wrapper_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::any_with_message_with_wrapper_type(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_with_timestamp = 11;
  if (this->has_any_with_message_with_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::any_with_message_with_timestamp(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_map = 12;
  if (this->has_any_with_message_containing_map()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::any_with_message_containing_map(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_struct = 13;
  if (this->has_any_with_message_containing_struct()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::any_with_message_containing_struct(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_repeated_message = 14;
  if (this->has_any_with_message_containing_repeated_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::any_with_message_containing_repeated_message(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper recursive_any_with_type_field_at_end = 15;
  if (this->has_recursive_any_with_type_field_at_end()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::recursive_any_with_type_field_at_end(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper repeated_any = 16;
  if (this->has_repeated_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::repeated_any(this), output);
  }

  // .proto_util_converter.testing.AnyWrapper empty_any_with_null_type_url = 17;
  if (this->has_empty_any_with_null_type_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, _Internal::empty_any_with_null_type_url(this), output);
  }

  // .google.protobuf.Any top_level_any = 50;
  if (this->has_top_level_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, _Internal::top_level_any(this), output);
  }

  // .google.protobuf.Any top_level_any_with_type_field_at_end = 51;
  if (this->has_top_level_any_with_type_field_at_end()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, _Internal::top_level_any_with_type_field_at_end(this), output);
  }

  // .google.protobuf.Any top_level_any_with_pivot_one = 52;
  if (this->has_top_level_any_with_pivot_one()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, _Internal::top_level_any_with_pivot_one(this), output);
  }

  // .google.protobuf.Any top_level_any_with_pivot_two = 53;
  if (this->has_top_level_any_with_pivot_two()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, _Internal::top_level_any_with_pivot_two(this), output);
  }

  // .google.protobuf.Any top_level_any_unordered = 54;
  if (this->has_top_level_any_unordered()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, _Internal::top_level_any_unordered(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.AnyTestCases)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyTestCases::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.AnyWrapper empty_any = 1;
  if (this->has_empty_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::empty_any(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper type_only_any = 2;
  if (this->has_type_only_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::type_only_any(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper wrapper_any = 3;
  if (this->has_wrapper_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::wrapper_any(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_timestamp_value = 4;
  if (this->has_any_with_timestamp_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::any_with_timestamp_value(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_duration_value = 5;
  if (this->has_any_with_duration_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::any_with_duration_value(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_struct_value = 6;
  if (this->has_any_with_struct_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::any_with_struct_value(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper recursive_any = 7;
  if (this->has_recursive_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::recursive_any(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_value = 8;
  if (this->has_any_with_message_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::any_with_message_value(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_nested_message = 9;
  if (this->has_any_with_nested_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::any_with_nested_message(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_with_wrapper_type = 10;
  if (this->has_any_with_message_with_wrapper_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::any_with_message_with_wrapper_type(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_with_timestamp = 11;
  if (this->has_any_with_message_with_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::any_with_message_with_timestamp(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_map = 12;
  if (this->has_any_with_message_containing_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::any_with_message_containing_map(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_struct = 13;
  if (this->has_any_with_message_containing_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::any_with_message_containing_struct(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_repeated_message = 14;
  if (this->has_any_with_message_containing_repeated_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::any_with_message_containing_repeated_message(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper recursive_any_with_type_field_at_end = 15;
  if (this->has_recursive_any_with_type_field_at_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::recursive_any_with_type_field_at_end(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper repeated_any = 16;
  if (this->has_repeated_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::repeated_any(this), target);
  }

  // .proto_util_converter.testing.AnyWrapper empty_any_with_null_type_url = 17;
  if (this->has_empty_any_with_null_type_url()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::empty_any_with_null_type_url(this), target);
  }

  // .google.protobuf.Any top_level_any = 50;
  if (this->has_top_level_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, _Internal::top_level_any(this), target);
  }

  // .google.protobuf.Any top_level_any_with_type_field_at_end = 51;
  if (this->has_top_level_any_with_type_field_at_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, _Internal::top_level_any_with_type_field_at_end(this), target);
  }

  // .google.protobuf.Any top_level_any_with_pivot_one = 52;
  if (this->has_top_level_any_with_pivot_one()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        52, _Internal::top_level_any_with_pivot_one(this), target);
  }

  // .google.protobuf.Any top_level_any_with_pivot_two = 53;
  if (this->has_top_level_any_with_pivot_two()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        53, _Internal::top_level_any_with_pivot_two(this), target);
  }

  // .google.protobuf.Any top_level_any_unordered = 54;
  if (this->has_top_level_any_unordered()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        54, _Internal::top_level_any_unordered(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyTestCases)
  return target;
}

size_t AnyTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyTestCases)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.AnyWrapper empty_any = 1;
  if (this->has_empty_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_any_);
  }

  // .proto_util_converter.testing.AnyWrapper type_only_any = 2;
  if (this->has_type_only_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_only_any_);
  }

  // .proto_util_converter.testing.AnyWrapper wrapper_any = 3;
  if (this->has_wrapper_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wrapper_any_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_timestamp_value = 4;
  if (this->has_any_with_timestamp_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_timestamp_value_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_duration_value = 5;
  if (this->has_any_with_duration_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_duration_value_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_struct_value = 6;
  if (this->has_any_with_struct_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_struct_value_);
  }

  // .proto_util_converter.testing.AnyWrapper recursive_any = 7;
  if (this->has_recursive_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recursive_any_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_value = 8;
  if (this->has_any_with_message_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_value_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_nested_message = 9;
  if (this->has_any_with_nested_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_nested_message_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_with_wrapper_type = 10;
  if (this->has_any_with_message_with_wrapper_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_with_wrapper_type_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_with_timestamp = 11;
  if (this->has_any_with_message_with_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_with_timestamp_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_map = 12;
  if (this->has_any_with_message_containing_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_containing_map_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_struct = 13;
  if (this->has_any_with_message_containing_struct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_containing_struct_);
  }

  // .proto_util_converter.testing.AnyWrapper any_with_message_containing_repeated_message = 14;
  if (this->has_any_with_message_containing_repeated_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_with_message_containing_repeated_message_);
  }

  // .proto_util_converter.testing.AnyWrapper recursive_any_with_type_field_at_end = 15;
  if (this->has_recursive_any_with_type_field_at_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recursive_any_with_type_field_at_end_);
  }

  // .proto_util_converter.testing.AnyWrapper repeated_any = 16;
  if (this->has_repeated_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeated_any_);
  }

  // .proto_util_converter.testing.AnyWrapper empty_any_with_null_type_url = 17;
  if (this->has_empty_any_with_null_type_url()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_any_with_null_type_url_);
  }

  // .google.protobuf.Any top_level_any = 50;
  if (this->has_top_level_any()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_any_);
  }

  // .google.protobuf.Any top_level_any_with_type_field_at_end = 51;
  if (this->has_top_level_any_with_type_field_at_end()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_any_with_type_field_at_end_);
  }

  // .google.protobuf.Any top_level_any_with_pivot_one = 52;
  if (this->has_top_level_any_with_pivot_one()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_any_with_pivot_one_);
  }

  // .google.protobuf.Any top_level_any_with_pivot_two = 53;
  if (this->has_top_level_any_with_pivot_two()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_any_with_pivot_two_);
  }

  // .google.protobuf.Any top_level_any_unordered = 54;
  if (this->has_top_level_any_unordered()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_level_any_unordered_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyTestCases::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.AnyTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyTestCases* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyTestCases>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.AnyTestCases)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.AnyTestCases)
    MergeFrom(*source);
  }
}

void AnyTestCases::MergeFrom(const AnyTestCases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_empty_any()) {
    mutable_empty_any()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.empty_any());
  }
  if (from.has_type_only_any()) {
    mutable_type_only_any()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.type_only_any());
  }
  if (from.has_wrapper_any()) {
    mutable_wrapper_any()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.wrapper_any());
  }
  if (from.has_any_with_timestamp_value()) {
    mutable_any_with_timestamp_value()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_timestamp_value());
  }
  if (from.has_any_with_duration_value()) {
    mutable_any_with_duration_value()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_duration_value());
  }
  if (from.has_any_with_struct_value()) {
    mutable_any_with_struct_value()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_struct_value());
  }
  if (from.has_recursive_any()) {
    mutable_recursive_any()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.recursive_any());
  }
  if (from.has_any_with_message_value()) {
    mutable_any_with_message_value()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_message_value());
  }
  if (from.has_any_with_nested_message()) {
    mutable_any_with_nested_message()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_nested_message());
  }
  if (from.has_any_with_message_with_wrapper_type()) {
    mutable_any_with_message_with_wrapper_type()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_message_with_wrapper_type());
  }
  if (from.has_any_with_message_with_timestamp()) {
    mutable_any_with_message_with_timestamp()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_message_with_timestamp());
  }
  if (from.has_any_with_message_containing_map()) {
    mutable_any_with_message_containing_map()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_message_containing_map());
  }
  if (from.has_any_with_message_containing_struct()) {
    mutable_any_with_message_containing_struct()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_message_containing_struct());
  }
  if (from.has_any_with_message_containing_repeated_message()) {
    mutable_any_with_message_containing_repeated_message()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.any_with_message_containing_repeated_message());
  }
  if (from.has_recursive_any_with_type_field_at_end()) {
    mutable_recursive_any_with_type_field_at_end()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.recursive_any_with_type_field_at_end());
  }
  if (from.has_repeated_any()) {
    mutable_repeated_any()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.repeated_any());
  }
  if (from.has_empty_any_with_null_type_url()) {
    mutable_empty_any_with_null_type_url()->::proto_util_converter::testing::AnyWrapper::MergeFrom(from.empty_any_with_null_type_url());
  }
  if (from.has_top_level_any()) {
    mutable_top_level_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.top_level_any());
  }
  if (from.has_top_level_any_with_type_field_at_end()) {
    mutable_top_level_any_with_type_field_at_end()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.top_level_any_with_type_field_at_end());
  }
  if (from.has_top_level_any_with_pivot_one()) {
    mutable_top_level_any_with_pivot_one()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.top_level_any_with_pivot_one());
  }
  if (from.has_top_level_any_with_pivot_two()) {
    mutable_top_level_any_with_pivot_two()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.top_level_any_with_pivot_two());
  }
  if (from.has_top_level_any_unordered()) {
    mutable_top_level_any_unordered()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.top_level_any_unordered());
  }
}

void AnyTestCases::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.AnyTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyTestCases::CopyFrom(const AnyTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyTestCases::IsInitialized() const {
  return true;
}

void AnyTestCases::InternalSwap(AnyTestCases* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(empty_any_, other->empty_any_);
  swap(type_only_any_, other->type_only_any_);
  swap(wrapper_any_, other->wrapper_any_);
  swap(any_with_timestamp_value_, other->any_with_timestamp_value_);
  swap(any_with_duration_value_, other->any_with_duration_value_);
  swap(any_with_struct_value_, other->any_with_struct_value_);
  swap(recursive_any_, other->recursive_any_);
  swap(any_with_message_value_, other->any_with_message_value_);
  swap(any_with_nested_message_, other->any_with_nested_message_);
  swap(any_with_message_with_wrapper_type_, other->any_with_message_with_wrapper_type_);
  swap(any_with_message_with_timestamp_, other->any_with_message_with_timestamp_);
  swap(any_with_message_containing_map_, other->any_with_message_containing_map_);
  swap(any_with_message_containing_struct_, other->any_with_message_containing_struct_);
  swap(any_with_message_containing_repeated_message_, other->any_with_message_containing_repeated_message_);
  swap(recursive_any_with_type_field_at_end_, other->recursive_any_with_type_field_at_end_);
  swap(repeated_any_, other->repeated_any_);
  swap(empty_any_with_null_type_url_, other->empty_any_with_null_type_url_);
  swap(top_level_any_, other->top_level_any_);
  swap(top_level_any_with_type_field_at_end_, other->top_level_any_with_type_field_at_end_);
  swap(top_level_any_with_pivot_one_, other->top_level_any_with_pivot_one_);
  swap(top_level_any_with_pivot_two_, other->top_level_any_with_pivot_two_);
  swap(top_level_any_unordered_, other->top_level_any_unordered_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyTestCases::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyWrapper::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_AnyWrapper_default_instance_._instance.get_mutable()->any_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class AnyWrapper::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& any(const AnyWrapper* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
AnyWrapper::_Internal::any(const AnyWrapper* msg) {
  return *msg->any_;
}
void AnyWrapper::clear_any() {
  if (GetArenaNoVirtual() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
}
AnyWrapper::AnyWrapper()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.AnyWrapper)
}
AnyWrapper::AnyWrapper(const AnyWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_any()) {
    any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.any_);
  } else {
    any_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyWrapper)
}

void AnyWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  any_ = nullptr;
}

AnyWrapper::~AnyWrapper() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyWrapper)
  SharedDtor();
}

void AnyWrapper::SharedDtor() {
  if (this != internal_default_instance()) delete any_;
}

void AnyWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyWrapper& AnyWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  return *internal_default_instance();
}


void AnyWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnyWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any any = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnyWrapper::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.AnyWrapper)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any any = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.AnyWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.AnyWrapper)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnyWrapper::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.AnyWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->has_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::any(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.AnyWrapper)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyWrapper::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->has_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::any(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyWrapper)
  return target;
}

size_t AnyWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyWrapper)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->has_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.AnyWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.AnyWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.AnyWrapper)
    MergeFrom(*source);
  }
}

void AnyWrapper::MergeFrom(const AnyWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_any()) {
    mutable_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.any());
  }
}

void AnyWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.AnyWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyWrapper::CopyFrom(const AnyWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyWrapper::IsInitialized() const {
  return true;
}

void AnyWrapper::InternalSwap(AnyWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(any_, other->any_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Imports::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_Imports_default_instance_._instance.get_mutable()->dbl_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::proto_util_converter::testing::_Imports_default_instance_._instance.get_mutable()->struct__ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::proto_util_converter::testing::_Imports_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::proto_util_converter::testing::_Imports_default_instance_._instance.get_mutable()->duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::proto_util_converter::testing::_Imports_default_instance_._instance.get_mutable()->i32_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::proto_util_converter::testing::_Imports_default_instance_._instance.get_mutable()->data_ = const_cast< ::proto_util_converter::testing::Data*>(
      ::proto_util_converter::testing::Data::internal_default_instance());
}
class Imports::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& dbl(const Imports* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& struct_(const Imports* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Imports* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const Imports* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& i32(const Imports* msg);
  static const ::proto_util_converter::testing::Data& data(const Imports* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
Imports::_Internal::dbl(const Imports* msg) {
  return *msg->dbl_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Imports::_Internal::struct_(const Imports* msg) {
  return *msg->struct__;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Imports::_Internal::timestamp(const Imports* msg) {
  return *msg->timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
Imports::_Internal::duration(const Imports* msg) {
  return *msg->duration_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Imports::_Internal::i32(const Imports* msg) {
  return *msg->i32_;
}
const ::proto_util_converter::testing::Data&
Imports::_Internal::data(const Imports* msg) {
  return *msg->data_;
}
void Imports::clear_dbl() {
  if (GetArenaNoVirtual() == nullptr && dbl_ != nullptr) {
    delete dbl_;
  }
  dbl_ = nullptr;
}
void Imports::clear_struct_() {
  if (GetArenaNoVirtual() == nullptr && struct__ != nullptr) {
    delete struct__;
  }
  struct__ = nullptr;
}
void Imports::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void Imports::clear_duration() {
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void Imports::clear_i32() {
  if (GetArenaNoVirtual() == nullptr && i32_ != nullptr) {
    delete i32_;
  }
  i32_ = nullptr;
}
Imports::Imports()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.Imports)
}
Imports::Imports(const Imports& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dbl()) {
    dbl_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.dbl_);
  } else {
    dbl_ = nullptr;
  }
  if (from.has_struct_()) {
    struct__ = new PROTOBUF_NAMESPACE_ID::Struct(*from.struct__);
  } else {
    struct__ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from.has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from.has_i32()) {
    i32_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.i32_);
  } else {
    i32_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::proto_util_converter::testing::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.Imports)
}

void Imports::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Imports_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  ::memset(&dbl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&dbl_)) + sizeof(data_));
}

Imports::~Imports() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.Imports)
  SharedDtor();
}

void Imports::SharedDtor() {
  if (this != internal_default_instance()) delete dbl_;
  if (this != internal_default_instance()) delete struct__;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete i32_;
  if (this != internal_default_instance()) delete data_;
}

void Imports::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Imports& Imports::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Imports_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  return *internal_default_instance();
}


void Imports::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.Imports)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dbl_ != nullptr) {
    delete dbl_;
  }
  dbl_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct__ != nullptr) {
    delete struct__;
  }
  struct__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && i32_ != nullptr) {
    delete i32_;
  }
  i32_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Imports::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue dbl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_dbl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value i32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_i32(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Data data = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Imports::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.Imports)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.DoubleValue dbl = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dbl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct struct = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_struct_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration duration = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value i32 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_i32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.Data data = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.Imports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.Imports)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Imports::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.Imports)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue dbl = 1;
  if (this->has_dbl()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::dbl(this), output);
  }

  // .google.protobuf.Struct struct = 2;
  if (this->has_struct_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::struct_(this), output);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::timestamp(this), output);
  }

  // .google.protobuf.Duration duration = 4;
  if (this->has_duration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::duration(this), output);
  }

  // .google.protobuf.Int32Value i32 = 5;
  if (this->has_i32()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::i32(this), output);
  }

  // .proto_util_converter.testing.Data data = 100;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, _Internal::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.Imports)
}

::PROTOBUF_NAMESPACE_ID::uint8* Imports::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.Imports)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue dbl = 1;
  if (this->has_dbl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::dbl(this), target);
  }

  // .google.protobuf.Struct struct = 2;
  if (this->has_struct_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::struct_(this), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::timestamp(this), target);
  }

  // .google.protobuf.Duration duration = 4;
  if (this->has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::duration(this), target);
  }

  // .google.protobuf.Int32Value i32 = 5;
  if (this->has_i32()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::i32(this), target);
  }

  // .proto_util_converter.testing.Data data = 100;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, _Internal::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.Imports)
  return target;
}

size_t Imports::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.Imports)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue dbl = 1;
  if (this->has_dbl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dbl_);
  }

  // .google.protobuf.Struct struct = 2;
  if (this->has_struct_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct__);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .google.protobuf.Duration duration = 4;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .google.protobuf.Int32Value i32 = 5;
  if (this->has_i32()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *i32_);
  }

  // .proto_util_converter.testing.Data data = 100;
  if (this->has_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Imports::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.Imports)
  GOOGLE_DCHECK_NE(&from, this);
  const Imports* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Imports>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.Imports)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.Imports)
    MergeFrom(*source);
  }
}

void Imports::MergeFrom(const Imports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.Imports)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dbl()) {
    mutable_dbl()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from.dbl());
  }
  if (from.has_struct_()) {
    mutable_struct_()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from.struct_());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_duration()) {
    mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from.duration());
  }
  if (from.has_i32()) {
    mutable_i32()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from.i32());
  }
  if (from.has_data()) {
    mutable_data()->::proto_util_converter::testing::Data::MergeFrom(from.data());
  }
}

void Imports::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.Imports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imports::CopyFrom(const Imports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.Imports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imports::IsInitialized() const {
  return true;
}

void Imports::InternalSwap(Imports* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dbl_, other->dbl_);
  swap(struct__, other->struct__);
  swap(timestamp_, other->timestamp_);
  swap(duration_, other->duration_);
  swap(i32_, other->i32_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Imports::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Data_MapDataEntry_DoNotUse::Data_MapDataEntry_DoNotUse() {}
Data_MapDataEntry_DoNotUse::Data_MapDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Data_MapDataEntry_DoNotUse::MergeFrom(const Data_MapDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Data_MapDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Data_MapDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Data::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_Data_default_instance_._instance.get_mutable()->nested_data_ = const_cast< ::proto_util_converter::testing::Data*>(
      ::proto_util_converter::testing::Data::internal_default_instance());
  ::proto_util_converter::testing::_Data_default_instance_._instance.get_mutable()->int_wrapper_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::proto_util_converter::testing::_Data_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::proto_util_converter::testing::_Data_default_instance_._instance.get_mutable()->struct_data_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
}
class Data::_Internal {
 public:
  static const ::proto_util_converter::testing::Data& nested_data(const Data* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& int_wrapper(const Data* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const Data* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& struct_data(const Data* msg);
};

const ::proto_util_converter::testing::Data&
Data::_Internal::nested_data(const Data* msg) {
  return *msg->nested_data_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
Data::_Internal::int_wrapper(const Data* msg) {
  return *msg->int_wrapper_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Data::_Internal::time(const Data* msg) {
  return *msg->time_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Data::_Internal::struct_data(const Data* msg) {
  return *msg->struct_data_;
}
void Data::clear_int_wrapper() {
  if (GetArenaNoVirtual() == nullptr && int_wrapper_ != nullptr) {
    delete int_wrapper_;
  }
  int_wrapper_ = nullptr;
}
void Data::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
void Data::clear_struct_data() {
  if (GetArenaNoVirtual() == nullptr && struct_data_ != nullptr) {
    delete struct_data_;
  }
  struct_data_ = nullptr;
}
void Data::clear_repeated_any() {
  repeated_any_.Clear();
}
Data::Data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msgs_(from.msgs_),
      repeated_data_(from.repeated_data_),
      repeated_any_(from.repeated_any_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.MergeFrom(from.map_data_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.str().empty()) {
    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.has_nested_data()) {
    nested_data_ = new ::proto_util_converter::testing::Data(*from.nested_data_);
  } else {
    nested_data_ = nullptr;
  }
  if (from.has_int_wrapper()) {
    int_wrapper_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.int_wrapper_);
  } else {
    int_wrapper_ = nullptr;
  }
  if (from.has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from.has_struct_data()) {
    struct_data_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.struct_data_);
  } else {
    struct_data_ = nullptr;
  }
  attr_ = from.attr_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.Data)
}

void Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Data_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nested_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attr_) -
      reinterpret_cast<char*>(&nested_data_)) + sizeof(attr_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nested_data_;
  if (this != internal_default_instance()) delete int_wrapper_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete struct_data_;
}

void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Data& Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Data_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  map_data_.Clear();
  repeated_data_.Clear();
  repeated_any_.Clear();
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && nested_data_ != nullptr) {
    delete nested_data_;
  }
  nested_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && int_wrapper_ != nullptr) {
    delete int_wrapper_;
  }
  int_wrapper_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && struct_data_ != nullptr) {
    delete struct_data_;
  }
  struct_data_ = nullptr;
  attr_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_str(), ptr, ctx, "proto_util_converter.testing.Data.str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_msgs(), ptr, ctx, "proto_util_converter.testing.Data.msgs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Data nested_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_nested_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value int_wrapper = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_int_wrapper(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> map_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct struct_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_struct_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.Data repeated_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_repeated_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any repeated_any = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_repeated_any(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Data::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.Data)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 attr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), static_cast<int>(this->str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.Data.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string msgs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_msgs()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msgs(this->msgs_size() - 1).data(),
            static_cast<int>(this->msgs(this->msgs_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.Data.msgs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.Data nested_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nested_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value int_wrapper = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_int_wrapper()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> map_data = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          Data_MapDataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Data_MapDataEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&map_data_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.Data.MapDataEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.Data.MapDataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct struct_data = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_struct_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto_util_converter.testing.Data repeated_data = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_repeated_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any repeated_any = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_repeated_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.Data)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Data::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attr = 1;
  if (this->attr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->attr(), output);
  }

  // string str = 2;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.Data.str");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  // repeated string msgs = 3;
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msgs(i).data(), static_cast<int>(this->msgs(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.Data.msgs");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->msgs(i), output);
  }

  // .proto_util_converter.testing.Data nested_data = 4;
  if (this->has_nested_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::nested_data(this), output);
  }

  // .google.protobuf.Int32Value int_wrapper = 5;
  if (this->has_int_wrapper()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::int_wrapper(this), output);
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->has_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::time(this), output);
  }

  // map<string, string> map_data = 7;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.Data.MapDataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.Data.MapDataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Data_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        Data_MapDataEntry_DoNotUse::Funcs::SerializeToCodedStream(7, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Struct struct_data = 8;
  if (this->has_struct_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::struct_data(this), output);
  }

  // repeated .proto_util_converter.testing.Data repeated_data = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->repeated_data(static_cast<int>(i)),
      output);
  }

  // repeated .google.protobuf.Any repeated_any = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_any_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->repeated_any(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.Data)
}

::PROTOBUF_NAMESPACE_ID::uint8* Data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attr = 1;
  if (this->attr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->attr(), target);
  }

  // string str = 2;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.Data.str");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  // repeated string msgs = 3;
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msgs(i).data(), static_cast<int>(this->msgs(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.Data.msgs");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->msgs(i), target);
  }

  // .proto_util_converter.testing.Data nested_data = 4;
  if (this->has_nested_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::nested_data(this), target);
  }

  // .google.protobuf.Int32Value int_wrapper = 5;
  if (this->has_int_wrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::int_wrapper(this), target);
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::time(this), target);
  }

  // map<string, string> map_data = 7;
  if (!this->map_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.Data.MapDataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.Data.MapDataEntry.value");
      }
    };

    if (false &&
        this->map_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Data_MapDataEntry_DoNotUse::Funcs::SerializeToArray(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_data().begin();
          it != this->map_data().end(); ++it) {
        target = Data_MapDataEntry_DoNotUse::Funcs::SerializeToArray(7, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Struct struct_data = 8;
  if (this->has_struct_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::struct_data(this), target);
  }

  // repeated .proto_util_converter.testing.Data repeated_data = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->repeated_data(static_cast<int>(i)), target);
  }

  // repeated .google.protobuf.Any repeated_any = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_any_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->repeated_any(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string msgs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->msgs_size());
  for (int i = 0, n = this->msgs_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->msgs(i));
  }

  // map<string, string> map_data = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->map_data().begin();
      it != this->map_data().end(); ++it) {
    total_size += Data_MapDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .proto_util_converter.testing.Data repeated_data = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->repeated_data(static_cast<int>(i)));
    }
  }

  // repeated .google.protobuf.Any repeated_any = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_any_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->repeated_any(static_cast<int>(i)));
    }
  }

  // string str = 2;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->str());
  }

  // .proto_util_converter.testing.Data nested_data = 4;
  if (this->has_nested_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nested_data_);
  }

  // .google.protobuf.Int32Value int_wrapper = 5;
  if (this->has_int_wrapper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *int_wrapper_);
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .google.protobuf.Struct struct_data = 8;
  if (this->has_struct_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *struct_data_);
  }

  // int32 attr = 1;
  if (this->attr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->attr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  map_data_.MergeFrom(from.map_data_);
  repeated_data_.MergeFrom(from.repeated_data_);
  repeated_any_.MergeFrom(from.repeated_any_);
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.has_nested_data()) {
    mutable_nested_data()->::proto_util_converter::testing::Data::MergeFrom(from.nested_data());
  }
  if (from.has_int_wrapper()) {
    mutable_int_wrapper()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from.int_wrapper());
  }
  if (from.has_time()) {
    mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from.time());
  }
  if (from.has_struct_data()) {
    mutable_struct_data()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from.struct_data());
  }
  if (from.attr() != 0) {
    set_attr(from.attr());
  }
}

void Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msgs_.InternalSwap(CastToBase(&other->msgs_));
  map_data_.Swap(&other->map_data_);
  CastToBase(&repeated_data_)->InternalSwap(CastToBase(&other->repeated_data_));
  CastToBase(&repeated_any_)->InternalSwap(CastToBase(&other->repeated_any_));
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nested_data_, other->nested_data_);
  swap(int_wrapper_, other->int_wrapper_);
  swap(time_, other->time_);
  swap(struct_data_, other->struct_data_);
  swap(attr_, other->attr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyIn::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_AnyIn_default_instance_._instance.get_mutable()->any_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class AnyIn::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& any(const AnyIn* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
AnyIn::_Internal::any(const AnyIn* msg) {
  return *msg->any_;
}
void AnyIn::clear_any() {
  if (GetArenaNoVirtual() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
}
AnyIn::AnyIn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.AnyIn)
}
AnyIn::AnyIn(const AnyIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  something_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.something().empty()) {
    something_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.something_);
  }
  if (from.has_any()) {
    any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.any_);
  } else {
    any_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyIn)
}

void AnyIn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  something_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  any_ = nullptr;
}

AnyIn::~AnyIn() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyIn)
  SharedDtor();
}

void AnyIn::SharedDtor() {
  something_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete any_;
}

void AnyIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyIn& AnyIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  return *internal_default_instance();
}


void AnyIn::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  something_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnyIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string something = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_something(), ptr, ctx, "proto_util_converter.testing.AnyIn.something");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any any = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnyIn::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.AnyIn)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string something = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_something()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->something().data(), static_cast<int>(this->something().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.AnyIn.something"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any any = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.AnyIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.AnyIn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnyIn::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.AnyIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string something = 1;
  if (this->something().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->something().data(), static_cast<int>(this->something().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.AnyIn.something");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->something(), output);
  }

  // .google.protobuf.Any any = 2;
  if (this->has_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::any(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.AnyIn)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyIn::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string something = 1;
  if (this->something().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->something().data(), static_cast<int>(this->something().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.AnyIn.something");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->something(), target);
  }

  // .google.protobuf.Any any = 2;
  if (this->has_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::any(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyIn)
  return target;
}

size_t AnyIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyIn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string something = 1;
  if (this->something().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->something());
  }

  // .google.protobuf.Any any = 2;
  if (this->has_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.AnyIn)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.AnyIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.AnyIn)
    MergeFrom(*source);
  }
}

void AnyIn::MergeFrom(const AnyIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.something().size() > 0) {

    something_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.something_);
  }
  if (from.has_any()) {
    mutable_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.any());
  }
}

void AnyIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.AnyIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyIn::CopyFrom(const AnyIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyIn::IsInitialized() const {
  return true;
}

void AnyIn::InternalSwap(AnyIn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  something_.Swap(&other->something_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(any_, other->any_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyOut::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_AnyOut_default_instance_._instance.get_mutable()->any_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class AnyOut::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& any(const AnyOut* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
AnyOut::_Internal::any(const AnyOut* msg) {
  return *msg->any_;
}
void AnyOut::clear_any() {
  if (GetArenaNoVirtual() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
}
AnyOut::AnyOut()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.AnyOut)
}
AnyOut::AnyOut(const AnyOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_any()) {
    any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.any_);
  } else {
    any_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyOut)
}

void AnyOut::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  any_ = nullptr;
}

AnyOut::~AnyOut() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyOut)
  SharedDtor();
}

void AnyOut::SharedDtor() {
  if (this != internal_default_instance()) delete any_;
}

void AnyOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyOut& AnyOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  return *internal_default_instance();
}


void AnyOut::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && any_ != nullptr) {
    delete any_;
  }
  any_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnyOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any any = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnyOut::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.AnyOut)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any any = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.AnyOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.AnyOut)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnyOut::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.AnyOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->has_any()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::any(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.AnyOut)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyOut::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->has_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::any(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyOut)
  return target;
}

size_t AnyOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyOut)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any any = 1;
  if (this->has_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.AnyOut)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.AnyOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.AnyOut)
    MergeFrom(*source);
  }
}

void AnyOut::MergeFrom(const AnyOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_any()) {
    mutable_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.any());
  }
}

void AnyOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.AnyOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyOut::CopyFrom(const AnyOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyOut::IsInitialized() const {
  return true;
}

void AnyOut::InternalSwap(AnyOut* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(any_, other->any_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyM::InitAsDefaultInstance() {
}
class AnyM::_Internal {
 public:
};

AnyM::AnyM()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.AnyM)
}
AnyM::AnyM(const AnyM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  foo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.foo().empty()) {
    foo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.foo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.AnyM)
}

void AnyM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  foo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AnyM::~AnyM() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.AnyM)
  SharedDtor();
}

void AnyM::SharedDtor() {
  foo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnyM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyM& AnyM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fanys_2eproto.base);
  return *internal_default_instance();
}


void AnyM::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.AnyM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnyM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string foo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_foo(), ptr, ctx, "proto_util_converter.testing.AnyM.foo");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnyM::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.AnyM)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string foo = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_foo()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->foo().data(), static_cast<int>(this->foo().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.AnyM.foo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.AnyM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.AnyM)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnyM::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.AnyM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string foo = 1;
  if (this->foo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->foo().data(), static_cast<int>(this->foo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.AnyM.foo");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->foo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.AnyM)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyM::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.AnyM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string foo = 1;
  if (this->foo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->foo().data(), static_cast<int>(this->foo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.AnyM.foo");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->foo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.AnyM)
  return target;
}

size_t AnyM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.AnyM)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string foo = 1;
  if (this->foo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->foo());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.AnyM)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.AnyM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.AnyM)
    MergeFrom(*source);
  }
}

void AnyM::MergeFrom(const AnyM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.AnyM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.foo().size() > 0) {

    foo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.foo_);
  }
}

void AnyM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.AnyM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyM::CopyFrom(const AnyM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.AnyM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyM::IsInitialized() const {
  return true;
}

void AnyM::InternalSwap(AnyM* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  foo_.Swap(&other->foo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyM::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyTestCases* Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyTestCases >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::AnyTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyWrapper* Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyWrapper >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::AnyWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Imports* Arena::CreateMaybeMessage< ::proto_util_converter::testing::Imports >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::Imports >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Data_MapDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::Data_MapDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::Data_MapDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Data* Arena::CreateMaybeMessage< ::proto_util_converter::testing::Data >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyIn* Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyIn >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::AnyIn >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyOut* Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyOut >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::AnyOut >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::AnyM* Arena::CreateMaybeMessage< ::proto_util_converter::testing::AnyM >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::AnyM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
