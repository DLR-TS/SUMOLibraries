// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/maps.proto

#include "google/protobuf/util/internal/testdata/maps.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoolToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EmptyMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapIn_MapAnyEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapIn_MapInputEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOfObjects_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOfObjects_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOfObjects_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MapOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOut_Map1Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOut_Map3Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOut_Map4Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOutWireFormat_Map1Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOutWireFormat_Map2Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOutWireFormat_Map3Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOutWireFormat_Map4Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mixed1_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mixed1_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mixed2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mixed2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringtoInt_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringtoInt_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto;
namespace proto_util_converter {
namespace testing {
class MapsTestCasesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapsTestCases> _instance;
} _MapsTestCases_default_instance_;
class EmptyMap_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyMap_MapEntry_DoNotUse> _instance;
} _EmptyMap_MapEntry_DoNotUse_default_instance_;
class EmptyMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyMap> _instance;
} _EmptyMap_default_instance_;
class StringtoInt_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringtoInt_MapEntry_DoNotUse> _instance;
} _StringtoInt_MapEntry_DoNotUse_default_instance_;
class StringtoIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringtoInt> _instance;
} _StringtoInt_default_instance_;
class IntToString_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntToString_MapEntry_DoNotUse> _instance;
} _IntToString_MapEntry_DoNotUse_default_instance_;
class IntToStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntToString> _instance;
} _IntToString_default_instance_;
class BoolToString_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolToString_MapEntry_DoNotUse> _instance;
} _BoolToString_MapEntry_DoNotUse_default_instance_;
class BoolToStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolToString> _instance;
} _BoolToString_default_instance_;
class Mixed1_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mixed1_MapEntry_DoNotUse> _instance;
} _Mixed1_MapEntry_DoNotUse_default_instance_;
class Mixed1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mixed1> _instance;
} _Mixed1_default_instance_;
class Mixed2_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mixed2_MapEntry_DoNotUse> _instance;
} _Mixed2_MapEntry_DoNotUse_default_instance_;
class Mixed2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mixed2> _instance;
} _Mixed2_default_instance_;
class MapOfObjects_MDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOfObjects_M> _instance;
} _MapOfObjects_M_default_instance_;
class MapOfObjects_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOfObjects_MapEntry_DoNotUse> _instance;
} _MapOfObjects_MapEntry_DoNotUse_default_instance_;
class MapOfObjectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOfObjects> _instance;
} _MapOfObjects_default_instance_;
class DummyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DummyRequest> _instance;
} _DummyRequest_default_instance_;
class MapIn_MapInputEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapIn_MapInputEntry_DoNotUse> _instance;
} _MapIn_MapInputEntry_DoNotUse_default_instance_;
class MapIn_MapAnyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapIn_MapAnyEntry_DoNotUse> _instance;
} _MapIn_MapAnyEntry_DoNotUse_default_instance_;
class MapInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapIn> _instance;
} _MapIn_default_instance_;
class MapOut_Map1Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOut_Map1Entry_DoNotUse> _instance;
} _MapOut_Map1Entry_DoNotUse_default_instance_;
class MapOut_Map2Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOut_Map2Entry_DoNotUse> _instance;
} _MapOut_Map2Entry_DoNotUse_default_instance_;
class MapOut_Map3Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOut_Map3Entry_DoNotUse> _instance;
} _MapOut_Map3Entry_DoNotUse_default_instance_;
class MapOut_Map4Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOut_Map4Entry_DoNotUse> _instance;
} _MapOut_Map4Entry_DoNotUse_default_instance_;
class MapOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOut> _instance;
} _MapOut_default_instance_;
class MapOutWireFormat_Map1EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOutWireFormat_Map1Entry> _instance;
} _MapOutWireFormat_Map1Entry_default_instance_;
class MapOutWireFormat_Map2EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOutWireFormat_Map2Entry> _instance;
} _MapOutWireFormat_Map2Entry_default_instance_;
class MapOutWireFormat_Map3EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOutWireFormat_Map3Entry> _instance;
} _MapOutWireFormat_Map3Entry_default_instance_;
class MapOutWireFormat_Map4EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOutWireFormat_Map4Entry> _instance;
} _MapOutWireFormat_Map4Entry_default_instance_;
class MapOutWireFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapOutWireFormat> _instance;
} _MapOutWireFormat_default_instance_;
class MapMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapM> _instance;
} _MapM_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static void InitDefaultsscc_info_BoolToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_BoolToString_default_instance_;
    new (ptr) ::proto_util_converter::testing::BoolToString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::BoolToString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoolToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoolToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_BoolToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_BoolToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_BoolToString_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BoolToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_DummyRequest_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_DummyRequest_default_instance_;
    new (ptr) ::proto_util_converter::testing::DummyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::DummyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DummyRequest_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DummyRequest_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_EmptyMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_EmptyMap_default_instance_;
    new (ptr) ::proto_util_converter::testing::EmptyMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::EmptyMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EmptyMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EmptyMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_EmptyMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_EmptyMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_EmptyMap_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EmptyMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_IntToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_IntToString_default_instance_;
    new (ptr) ::proto_util_converter::testing::IntToString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::IntToString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IntToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_IntToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_IntToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_IntToString_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_MapIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapIn_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapIn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MapIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_MapIn_MapInputEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_MapIn_MapAnyEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_MapIn_MapAnyEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapIn_MapAnyEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse();
  }
  ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapIn_MapAnyEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MapIn_MapAnyEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MapIn_MapInputEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapIn_MapInputEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse();
  }
  ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapIn_MapInputEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapIn_MapInputEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapM_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_MapOfObjects_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOfObjects_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOfObjects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapOfObjects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOfObjects_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MapOfObjects_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_MapOfObjects_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_MapOfObjects_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOfObjects_M_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOfObjects_M();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapOfObjects_M::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOfObjects_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapOfObjects_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_MapOfObjects_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOfObjects_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOfObjects_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MapOfObjects_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_MapOfObjects_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_MapOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOut_Map2Entry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse();
  }
  {
    void* ptr = &::proto_util_converter::testing::_MapOut_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse::InitAsDefaultInstance();
  ::proto_util_converter::testing::MapOut::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MapOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MapOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_MapOut_Map1Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_MapOut_Map3Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_MapOut_Map4Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_MapOut_Map1Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOut_Map1Entry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse();
  }
  ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOut_Map1Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MapOut_Map1Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_MapOut_Map3Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOut_Map3Entry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse();
  }
  ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOut_Map3Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapOut_Map3Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_MapOut_Map4Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOut_Map4Entry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse();
  }
  ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOut_Map4Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapOut_Map4Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_MapOutWireFormat_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOutWireFormat_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOutWireFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapOutWireFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MapOutWireFormat_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_MapOutWireFormat_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_MapOutWireFormat_Map1Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_MapOutWireFormat_Map2Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_MapOutWireFormat_Map3Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_MapOutWireFormat_Map4Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_MapOutWireFormat_Map1Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOutWireFormat_Map1Entry_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOutWireFormat_Map1Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapOutWireFormat_Map1Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOutWireFormat_Map1Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MapOutWireFormat_Map1Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_MapOutWireFormat_Map2Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOutWireFormat_Map2Entry_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOutWireFormat_Map2Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapOutWireFormat_Map2Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapOutWireFormat_Map2Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MapOutWireFormat_Map2Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_MapOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_MapOutWireFormat_Map3Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOutWireFormat_Map3Entry_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOutWireFormat_Map3Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapOutWireFormat_Map3Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOutWireFormat_Map3Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapOutWireFormat_Map3Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_MapOutWireFormat_Map4Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapOutWireFormat_Map4Entry_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapOutWireFormat_Map4Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapOutWireFormat_Map4Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapOutWireFormat_Map4Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapOutWireFormat_Map4Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_MapsTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_MapsTestCases_default_instance_;
    new (ptr) ::proto_util_converter::testing::MapsTestCases();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::MapsTestCases::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MapsTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_MapsTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_EmptyMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_StringtoInt_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_IntToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_Mixed1_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_Mixed2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_MapOfObjects_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
      &scc_info_BoolToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_Mixed1_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_Mixed1_default_instance_;
    new (ptr) ::proto_util_converter::testing::Mixed1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::Mixed1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mixed1_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Mixed1_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_Mixed1_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_Mixed1_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_Mixed1_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mixed1_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Mixed1_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_Mixed2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_Mixed2_default_instance_;
    new (ptr) ::proto_util_converter::testing::Mixed2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::Mixed2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Mixed2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Mixed2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_Mixed2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_Mixed2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_Mixed2_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mixed2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Mixed2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static void InitDefaultsscc_info_StringtoInt_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_StringtoInt_default_instance_;
    new (ptr) ::proto_util_converter::testing::StringtoInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::StringtoInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringtoInt_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StringtoInt_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {
      &scc_info_StringtoInt_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,}};

static void InitDefaultsscc_info_StringtoInt_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_StringtoInt_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse();
  }
  ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringtoInt_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StringtoInt_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[31];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, string_to_int_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, int_to_string_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, mixed1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, mixed2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, map_of_objects_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_string_to_int1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_string_to_int2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_string_to_int3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_bool_to_string_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_int_to_string_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_mixed_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapsTestCases, empty_key_map_objects_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::EmptyMap, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StringtoInt, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::IntToString, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::BoolToString, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1, msg_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed1, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2, map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Mixed2, ee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_M, inner_text_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfObjects, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DummyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, other_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, things_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, map_input_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapIn, map_any_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, map1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, map2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, map3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, map4_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOut, bar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map1Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map1Entry, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map1Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map2Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map2Entry, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map2Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map3Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map3Entry, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map3Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map4Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map4Entry, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat_Map4Entry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, map1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, map2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, map3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, map4_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOutWireFormat, bar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapM, foo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto_util_converter::testing::MapsTestCases)},
  { 18, 25, sizeof(::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse)},
  { 27, -1, sizeof(::proto_util_converter::testing::EmptyMap)},
  { 33, 40, sizeof(::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse)},
  { 42, -1, sizeof(::proto_util_converter::testing::StringtoInt)},
  { 48, 55, sizeof(::proto_util_converter::testing::IntToString_MapEntry_DoNotUse)},
  { 57, -1, sizeof(::proto_util_converter::testing::IntToString)},
  { 63, 70, sizeof(::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse)},
  { 72, -1, sizeof(::proto_util_converter::testing::BoolToString)},
  { 78, 85, sizeof(::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse)},
  { 87, -1, sizeof(::proto_util_converter::testing::Mixed1)},
  { 94, 101, sizeof(::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse)},
  { 103, -1, sizeof(::proto_util_converter::testing::Mixed2)},
  { 110, -1, sizeof(::proto_util_converter::testing::MapOfObjects_M)},
  { 116, 123, sizeof(::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse)},
  { 125, -1, sizeof(::proto_util_converter::testing::MapOfObjects)},
  { 131, -1, sizeof(::proto_util_converter::testing::DummyRequest)},
  { 136, 143, sizeof(::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse)},
  { 145, 152, sizeof(::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse)},
  { 154, -1, sizeof(::proto_util_converter::testing::MapIn)},
  { 163, 170, sizeof(::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse)},
  { 172, 179, sizeof(::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse)},
  { 181, 188, sizeof(::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse)},
  { 190, 197, sizeof(::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse)},
  { 199, -1, sizeof(::proto_util_converter::testing::MapOut)},
  { 209, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat_Map1Entry)},
  { 216, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat_Map2Entry)},
  { 223, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat_Map3Entry)},
  { 230, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat_Map4Entry)},
  { 237, -1, sizeof(::proto_util_converter::testing::MapOutWireFormat)},
  { 247, -1, sizeof(::proto_util_converter::testing::MapM)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapsTestCases_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_EmptyMap_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_EmptyMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_StringtoInt_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_StringtoInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_IntToString_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_IntToString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_BoolToString_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_BoolToString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_Mixed1_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_Mixed1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_Mixed2_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_Mixed2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOfObjects_M_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOfObjects_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOfObjects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_DummyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapIn_MapInputEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapIn_MapAnyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOut_Map1Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOut_Map2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOut_Map3Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOut_Map4Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOutWireFormat_Map1Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOutWireFormat_Map2Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOutWireFormat_Map3Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOutWireFormat_Map4Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapOutWireFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_MapM_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1google/protobuf/util/internal/testdata"
  "/maps.proto\022\034proto_util_converter.testin"
  "g\032\031google/protobuf/any.proto\"\211\007\n\rMapsTes"
  "tCases\0229\n\tempty_map\030\001 \001(\0132&.proto_util_c"
  "onverter.testing.EmptyMap\022@\n\rstring_to_i"
  "nt\030\002 \001(\0132).proto_util_converter.testing."
  "StringtoInt\022@\n\rint_to_string\030\003 \001(\0132).pro"
  "to_util_converter.testing.IntToString\0224\n"
  "\006mixed1\030\004 \001(\0132$.proto_util_converter.tes"
  "ting.Mixed1\0224\n\006mixed2\030\005 \001(\0132$.proto_util"
  "_converter.testing.Mixed2\022B\n\016map_of_obje"
  "cts\030\006 \001(\0132*.proto_util_converter.testing"
  ".MapOfObjects\022K\n\030empty_key_string_to_int"
  "1\030\007 \001(\0132).proto_util_converter.testing.S"
  "tringtoInt\022K\n\030empty_key_string_to_int2\030\010"
  " \001(\0132).proto_util_converter.testing.Stri"
  "ngtoInt\022K\n\030empty_key_string_to_int3\030\t \001("
  "\0132).proto_util_converter.testing.Stringt"
  "oInt\022L\n\030empty_key_bool_to_string\030\n \001(\0132*"
  ".proto_util_converter.testing.BoolToStri"
  "ng\022J\n\027empty_key_int_to_string\030\013 \001(\0132).pr"
  "oto_util_converter.testing.IntToString\022="
  "\n\017empty_key_mixed\030\014 \001(\0132$.proto_util_con"
  "verter.testing.Mixed1\022I\n\025empty_key_map_o"
  "bjects\030\r \001(\0132*.proto_util_converter.test"
  "ing.MapOfObjects\"t\n\010EmptyMap\022<\n\003map\030\001 \003("
  "\0132/.proto_util_converter.testing.EmptyMa"
  "p.MapEntry\032*\n\010MapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
  "alue\030\002 \001(\005:\0028\001\"z\n\013StringtoInt\022\?\n\003map\030\001 \003"
  "(\01322.proto_util_converter.testing.String"
  "toInt.MapEntry\032*\n\010MapEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\005:\0028\001\"z\n\013IntToString\022\?\n\003map"
  "\030\001 \003(\01322.proto_util_converter.testing.In"
  "tToString.MapEntry\032*\n\010MapEntry\022\013\n\003key\030\001 "
  "\001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\"|\n\014BoolToString\022@"
  "\n\003map\030\001 \003(\01323.proto_util_converter.testi"
  "ng.BoolToString.MapEntry\032*\n\010MapEntry\022\013\n\003"
  "key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t:\0028\001\"}\n\006Mixed1\022\013"
  "\n\003msg\030\001 \001(\t\022:\n\003map\030\002 \003(\0132-.proto_util_co"
  "nverter.testing.Mixed1.MapEntry\032*\n\010MapEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\311\001\n\006"
  "Mixed2\022:\n\003map\030\001 \003(\0132-.proto_util_convert"
  "er.testing.Mixed2.MapEntry\0222\n\002ee\030\002 \001(\0162&"
  ".proto_util_converter.testing.Mixed2.E\032*"
  "\n\010MapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\002"
  "8\001\"#\n\001E\022\006\n\002E0\020\000\022\006\n\002E1\020\001\022\006\n\002E2\020\002\022\006\n\002E3\020\003\""
  "\303\001\n\014MapOfObjects\022@\n\003map\030\001 \003(\01323.proto_ut"
  "il_converter.testing.MapOfObjects.MapEnt"
  "ry\032\027\n\001M\022\022\n\ninner_text\030\001 \001(\t\032X\n\010MapEntry\022"
  "\013\n\003key\030\001 \001(\t\022;\n\005value\030\002 \001(\0132,.proto_util"
  "_converter.testing.MapOfObjects.M:\0028\001\"\016\n"
  "\014DummyRequest\"\244\002\n\005MapIn\022\r\n\005other\030\001 \001(\t\022\016"
  "\n\006things\030\002 \003(\t\022D\n\tmap_input\030\003 \003(\01321.prot"
  "o_util_converter.testing.MapIn.MapInputE"
  "ntry\022@\n\007map_any\030\004 \003(\0132/.proto_util_conve"
  "rter.testing.MapIn.MapAnyEntry\032/\n\rMapInp"
  "utEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032"
  "C\n\013MapAnyEntry\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001"
  "(\0132\024.google.protobuf.Any:\0028\001\"\213\004\n\006MapOut\022"
  "<\n\004map1\030\001 \003(\0132..proto_util_converter.tes"
  "ting.MapOut.Map1Entry\022<\n\004map2\030\002 \003(\0132..pr"
  "oto_util_converter.testing.MapOut.Map2En"
  "try\022<\n\004map3\030\003 \003(\0132..proto_util_converter"
  ".testing.MapOut.Map3Entry\022<\n\004map4\030\005 \003(\0132"
  "..proto_util_converter.testing.MapOut.Ma"
  "p4Entry\022\013\n\003bar\030\004 \001(\t\032O\n\tMap1Entry\022\013\n\003key"
  "\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".proto_util_conve"
  "rter.testing.MapM:\0028\001\032Q\n\tMap2Entry\022\013\n\003ke"
  "y\030\001 \001(\t\0223\n\005value\030\002 \001(\0132$.proto_util_conv"
  "erter.testing.MapOut:\0028\001\032+\n\tMap3Entry\022\013\n"
  "\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\032+\n\tMap4Ent"
  "ry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t:\0028\001\"\255\004\n\020M"
  "apOutWireFormat\022F\n\004map1\030\001 \003(\01328.proto_ut"
  "il_converter.testing.MapOutWireFormat.Ma"
  "p1Entry\022F\n\004map2\030\002 \003(\01328.proto_util_conve"
  "rter.testing.MapOutWireFormat.Map2Entry\022"
  "F\n\004map3\030\003 \003(\01328.proto_util_converter.tes"
  "ting.MapOutWireFormat.Map3Entry\022F\n\004map4\030"
  "\005 \003(\01328.proto_util_converter.testing.Map"
  "OutWireFormat.Map4Entry\022\013\n\003bar\030\004 \001(\t\032K\n\t"
  "Map1Entry\022\013\n\003key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\"."
  "proto_util_converter.testing.MapM\032M\n\tMap"
  "2Entry\022\013\n\003key\030\001 \001(\t\0223\n\005value\030\002 \001(\0132$.pro"
  "to_util_converter.testing.MapOut\032\'\n\tMap3"
  "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t\032\'\n\tMap"
  "4Entry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 \001(\t\"\023\n\004Ma"
  "pM\022\013\n\003foo\030\001 \001(\t2r\n\017MapsTestService\022_\n\004Ca"
  "ll\022*.proto_util_converter.testing.DummyR"
  "equest\032+.proto_util_converter.testing.Ma"
  "psTestCasesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_sccs[30] = {
  &scc_info_BoolToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_BoolToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_DummyRequest_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_EmptyMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_EmptyMap_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_IntToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_IntToString_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapIn_MapAnyEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapIn_MapInputEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOfObjects_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOfObjects_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOfObjects_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOut_Map1Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOut_Map3Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOut_Map4Entry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOutWireFormat_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOutWireFormat_Map1Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOutWireFormat_Map2Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOutWireFormat_Map3Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapOutWireFormat_Map4Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_MapsTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_Mixed1_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_Mixed1_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_Mixed2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_Mixed2_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_StringtoInt_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
  &scc_info_StringtoInt_MapEntry_DoNotUse_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once;
static bool descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto = {
  &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_initialized, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto, "google/protobuf/util/internal/testdata/maps.proto", 3579,
  &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_sccs, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_deps, 30, 1,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto, 31, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto, file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto), true);
namespace proto_util_converter {
namespace testing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mixed2_E_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto[0];
}
bool Mixed2_E_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Mixed2_E Mixed2::E0;
constexpr Mixed2_E Mixed2::E1;
constexpr Mixed2_E Mixed2::E2;
constexpr Mixed2_E Mixed2::E3;
constexpr Mixed2_E Mixed2::E_MIN;
constexpr Mixed2_E Mixed2::E_MAX;
constexpr int Mixed2::E_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MapsTestCases::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->empty_map_ = const_cast< ::proto_util_converter::testing::EmptyMap*>(
      ::proto_util_converter::testing::EmptyMap::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->string_to_int_ = const_cast< ::proto_util_converter::testing::StringtoInt*>(
      ::proto_util_converter::testing::StringtoInt::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->int_to_string_ = const_cast< ::proto_util_converter::testing::IntToString*>(
      ::proto_util_converter::testing::IntToString::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->mixed1_ = const_cast< ::proto_util_converter::testing::Mixed1*>(
      ::proto_util_converter::testing::Mixed1::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->mixed2_ = const_cast< ::proto_util_converter::testing::Mixed2*>(
      ::proto_util_converter::testing::Mixed2::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->map_of_objects_ = const_cast< ::proto_util_converter::testing::MapOfObjects*>(
      ::proto_util_converter::testing::MapOfObjects::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->empty_key_string_to_int1_ = const_cast< ::proto_util_converter::testing::StringtoInt*>(
      ::proto_util_converter::testing::StringtoInt::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->empty_key_string_to_int2_ = const_cast< ::proto_util_converter::testing::StringtoInt*>(
      ::proto_util_converter::testing::StringtoInt::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->empty_key_string_to_int3_ = const_cast< ::proto_util_converter::testing::StringtoInt*>(
      ::proto_util_converter::testing::StringtoInt::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->empty_key_bool_to_string_ = const_cast< ::proto_util_converter::testing::BoolToString*>(
      ::proto_util_converter::testing::BoolToString::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->empty_key_int_to_string_ = const_cast< ::proto_util_converter::testing::IntToString*>(
      ::proto_util_converter::testing::IntToString::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->empty_key_mixed_ = const_cast< ::proto_util_converter::testing::Mixed1*>(
      ::proto_util_converter::testing::Mixed1::internal_default_instance());
  ::proto_util_converter::testing::_MapsTestCases_default_instance_._instance.get_mutable()->empty_key_map_objects_ = const_cast< ::proto_util_converter::testing::MapOfObjects*>(
      ::proto_util_converter::testing::MapOfObjects::internal_default_instance());
}
class MapsTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::EmptyMap& empty_map(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::StringtoInt& string_to_int(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::IntToString& int_to_string(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::Mixed1& mixed1(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::Mixed2& mixed2(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::MapOfObjects& map_of_objects(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int1(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int2(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::StringtoInt& empty_key_string_to_int3(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::BoolToString& empty_key_bool_to_string(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::IntToString& empty_key_int_to_string(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::Mixed1& empty_key_mixed(const MapsTestCases* msg);
  static const ::proto_util_converter::testing::MapOfObjects& empty_key_map_objects(const MapsTestCases* msg);
};

const ::proto_util_converter::testing::EmptyMap&
MapsTestCases::_Internal::empty_map(const MapsTestCases* msg) {
  return *msg->empty_map_;
}
const ::proto_util_converter::testing::StringtoInt&
MapsTestCases::_Internal::string_to_int(const MapsTestCases* msg) {
  return *msg->string_to_int_;
}
const ::proto_util_converter::testing::IntToString&
MapsTestCases::_Internal::int_to_string(const MapsTestCases* msg) {
  return *msg->int_to_string_;
}
const ::proto_util_converter::testing::Mixed1&
MapsTestCases::_Internal::mixed1(const MapsTestCases* msg) {
  return *msg->mixed1_;
}
const ::proto_util_converter::testing::Mixed2&
MapsTestCases::_Internal::mixed2(const MapsTestCases* msg) {
  return *msg->mixed2_;
}
const ::proto_util_converter::testing::MapOfObjects&
MapsTestCases::_Internal::map_of_objects(const MapsTestCases* msg) {
  return *msg->map_of_objects_;
}
const ::proto_util_converter::testing::StringtoInt&
MapsTestCases::_Internal::empty_key_string_to_int1(const MapsTestCases* msg) {
  return *msg->empty_key_string_to_int1_;
}
const ::proto_util_converter::testing::StringtoInt&
MapsTestCases::_Internal::empty_key_string_to_int2(const MapsTestCases* msg) {
  return *msg->empty_key_string_to_int2_;
}
const ::proto_util_converter::testing::StringtoInt&
MapsTestCases::_Internal::empty_key_string_to_int3(const MapsTestCases* msg) {
  return *msg->empty_key_string_to_int3_;
}
const ::proto_util_converter::testing::BoolToString&
MapsTestCases::_Internal::empty_key_bool_to_string(const MapsTestCases* msg) {
  return *msg->empty_key_bool_to_string_;
}
const ::proto_util_converter::testing::IntToString&
MapsTestCases::_Internal::empty_key_int_to_string(const MapsTestCases* msg) {
  return *msg->empty_key_int_to_string_;
}
const ::proto_util_converter::testing::Mixed1&
MapsTestCases::_Internal::empty_key_mixed(const MapsTestCases* msg) {
  return *msg->empty_key_mixed_;
}
const ::proto_util_converter::testing::MapOfObjects&
MapsTestCases::_Internal::empty_key_map_objects(const MapsTestCases* msg) {
  return *msg->empty_key_map_objects_;
}
MapsTestCases::MapsTestCases()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapsTestCases)
}
MapsTestCases::MapsTestCases(const MapsTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_empty_map()) {
    empty_map_ = new ::proto_util_converter::testing::EmptyMap(*from.empty_map_);
  } else {
    empty_map_ = nullptr;
  }
  if (from.has_string_to_int()) {
    string_to_int_ = new ::proto_util_converter::testing::StringtoInt(*from.string_to_int_);
  } else {
    string_to_int_ = nullptr;
  }
  if (from.has_int_to_string()) {
    int_to_string_ = new ::proto_util_converter::testing::IntToString(*from.int_to_string_);
  } else {
    int_to_string_ = nullptr;
  }
  if (from.has_mixed1()) {
    mixed1_ = new ::proto_util_converter::testing::Mixed1(*from.mixed1_);
  } else {
    mixed1_ = nullptr;
  }
  if (from.has_mixed2()) {
    mixed2_ = new ::proto_util_converter::testing::Mixed2(*from.mixed2_);
  } else {
    mixed2_ = nullptr;
  }
  if (from.has_map_of_objects()) {
    map_of_objects_ = new ::proto_util_converter::testing::MapOfObjects(*from.map_of_objects_);
  } else {
    map_of_objects_ = nullptr;
  }
  if (from.has_empty_key_string_to_int1()) {
    empty_key_string_to_int1_ = new ::proto_util_converter::testing::StringtoInt(*from.empty_key_string_to_int1_);
  } else {
    empty_key_string_to_int1_ = nullptr;
  }
  if (from.has_empty_key_string_to_int2()) {
    empty_key_string_to_int2_ = new ::proto_util_converter::testing::StringtoInt(*from.empty_key_string_to_int2_);
  } else {
    empty_key_string_to_int2_ = nullptr;
  }
  if (from.has_empty_key_string_to_int3()) {
    empty_key_string_to_int3_ = new ::proto_util_converter::testing::StringtoInt(*from.empty_key_string_to_int3_);
  } else {
    empty_key_string_to_int3_ = nullptr;
  }
  if (from.has_empty_key_bool_to_string()) {
    empty_key_bool_to_string_ = new ::proto_util_converter::testing::BoolToString(*from.empty_key_bool_to_string_);
  } else {
    empty_key_bool_to_string_ = nullptr;
  }
  if (from.has_empty_key_int_to_string()) {
    empty_key_int_to_string_ = new ::proto_util_converter::testing::IntToString(*from.empty_key_int_to_string_);
  } else {
    empty_key_int_to_string_ = nullptr;
  }
  if (from.has_empty_key_mixed()) {
    empty_key_mixed_ = new ::proto_util_converter::testing::Mixed1(*from.empty_key_mixed_);
  } else {
    empty_key_mixed_ = nullptr;
  }
  if (from.has_empty_key_map_objects()) {
    empty_key_map_objects_ = new ::proto_util_converter::testing::MapOfObjects(*from.empty_key_map_objects_);
  } else {
    empty_key_map_objects_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapsTestCases)
}

void MapsTestCases::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapsTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  ::memset(&empty_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&empty_key_map_objects_) -
      reinterpret_cast<char*>(&empty_map_)) + sizeof(empty_key_map_objects_));
}

MapsTestCases::~MapsTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapsTestCases)
  SharedDtor();
}

void MapsTestCases::SharedDtor() {
  if (this != internal_default_instance()) delete empty_map_;
  if (this != internal_default_instance()) delete string_to_int_;
  if (this != internal_default_instance()) delete int_to_string_;
  if (this != internal_default_instance()) delete mixed1_;
  if (this != internal_default_instance()) delete mixed2_;
  if (this != internal_default_instance()) delete map_of_objects_;
  if (this != internal_default_instance()) delete empty_key_string_to_int1_;
  if (this != internal_default_instance()) delete empty_key_string_to_int2_;
  if (this != internal_default_instance()) delete empty_key_string_to_int3_;
  if (this != internal_default_instance()) delete empty_key_bool_to_string_;
  if (this != internal_default_instance()) delete empty_key_int_to_string_;
  if (this != internal_default_instance()) delete empty_key_mixed_;
  if (this != internal_default_instance()) delete empty_key_map_objects_;
}

void MapsTestCases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapsTestCases& MapsTestCases::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapsTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapsTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapsTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && empty_map_ != nullptr) {
    delete empty_map_;
  }
  empty_map_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && string_to_int_ != nullptr) {
    delete string_to_int_;
  }
  string_to_int_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && int_to_string_ != nullptr) {
    delete int_to_string_;
  }
  int_to_string_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mixed1_ != nullptr) {
    delete mixed1_;
  }
  mixed1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mixed2_ != nullptr) {
    delete mixed2_;
  }
  mixed2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_of_objects_ != nullptr) {
    delete map_of_objects_;
  }
  map_of_objects_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_key_string_to_int1_ != nullptr) {
    delete empty_key_string_to_int1_;
  }
  empty_key_string_to_int1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_key_string_to_int2_ != nullptr) {
    delete empty_key_string_to_int2_;
  }
  empty_key_string_to_int2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_key_string_to_int3_ != nullptr) {
    delete empty_key_string_to_int3_;
  }
  empty_key_string_to_int3_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_key_bool_to_string_ != nullptr) {
    delete empty_key_bool_to_string_;
  }
  empty_key_bool_to_string_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_key_int_to_string_ != nullptr) {
    delete empty_key_int_to_string_;
  }
  empty_key_int_to_string_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_key_mixed_ != nullptr) {
    delete empty_key_mixed_;
  }
  empty_key_mixed_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_key_map_objects_ != nullptr) {
    delete empty_key_map_objects_;
  }
  empty_key_map_objects_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapsTestCases::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto_util_converter.testing.EmptyMap empty_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_empty_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoInt string_to_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_string_to_int(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.IntToString int_to_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_int_to_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Mixed1 mixed1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_mixed1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Mixed2 mixed2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_mixed2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_map_of_objects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_empty_key_string_to_int1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_empty_key_string_to_int2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_empty_key_string_to_int3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_empty_key_bool_to_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_empty_key_int_to_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_empty_key_mixed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_empty_key_map_objects(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapsTestCases::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapsTestCases)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto_util_converter.testing.EmptyMap empty_map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.StringtoInt string_to_int = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_string_to_int()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.IntToString int_to_string = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_int_to_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.Mixed1 mixed1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mixed1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.Mixed2 mixed2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mixed2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_of_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_key_string_to_int1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_key_string_to_int2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_key_string_to_int3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_key_bool_to_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_key_int_to_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_key_mixed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_key_map_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapsTestCases)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapsTestCases)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapsTestCases::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapsTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.EmptyMap empty_map = 1;
  if (this->has_empty_map()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::empty_map(this), output);
  }

  // .proto_util_converter.testing.StringtoInt string_to_int = 2;
  if (this->has_string_to_int()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::string_to_int(this), output);
  }

  // .proto_util_converter.testing.IntToString int_to_string = 3;
  if (this->has_int_to_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::int_to_string(this), output);
  }

  // .proto_util_converter.testing.Mixed1 mixed1 = 4;
  if (this->has_mixed1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::mixed1(this), output);
  }

  // .proto_util_converter.testing.Mixed2 mixed2 = 5;
  if (this->has_mixed2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::mixed2(this), output);
  }

  // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
  if (this->has_map_of_objects()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::map_of_objects(this), output);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
  if (this->has_empty_key_string_to_int1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::empty_key_string_to_int1(this), output);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
  if (this->has_empty_key_string_to_int2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::empty_key_string_to_int2(this), output);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
  if (this->has_empty_key_string_to_int3()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::empty_key_string_to_int3(this), output);
  }

  // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
  if (this->has_empty_key_bool_to_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::empty_key_bool_to_string(this), output);
  }

  // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
  if (this->has_empty_key_int_to_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::empty_key_int_to_string(this), output);
  }

  // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
  if (this->has_empty_key_mixed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::empty_key_mixed(this), output);
  }

  // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
  if (this->has_empty_key_map_objects()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::empty_key_map_objects(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapsTestCases)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapsTestCases::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapsTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.EmptyMap empty_map = 1;
  if (this->has_empty_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::empty_map(this), target);
  }

  // .proto_util_converter.testing.StringtoInt string_to_int = 2;
  if (this->has_string_to_int()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::string_to_int(this), target);
  }

  // .proto_util_converter.testing.IntToString int_to_string = 3;
  if (this->has_int_to_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::int_to_string(this), target);
  }

  // .proto_util_converter.testing.Mixed1 mixed1 = 4;
  if (this->has_mixed1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::mixed1(this), target);
  }

  // .proto_util_converter.testing.Mixed2 mixed2 = 5;
  if (this->has_mixed2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::mixed2(this), target);
  }

  // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
  if (this->has_map_of_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::map_of_objects(this), target);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
  if (this->has_empty_key_string_to_int1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::empty_key_string_to_int1(this), target);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
  if (this->has_empty_key_string_to_int2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::empty_key_string_to_int2(this), target);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
  if (this->has_empty_key_string_to_int3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::empty_key_string_to_int3(this), target);
  }

  // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
  if (this->has_empty_key_bool_to_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::empty_key_bool_to_string(this), target);
  }

  // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
  if (this->has_empty_key_int_to_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::empty_key_int_to_string(this), target);
  }

  // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
  if (this->has_empty_key_mixed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::empty_key_mixed(this), target);
  }

  // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
  if (this->has_empty_key_map_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::empty_key_map_objects(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapsTestCases)
  return target;
}

size_t MapsTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapsTestCases)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.EmptyMap empty_map = 1;
  if (this->has_empty_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_map_);
  }

  // .proto_util_converter.testing.StringtoInt string_to_int = 2;
  if (this->has_string_to_int()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *string_to_int_);
  }

  // .proto_util_converter.testing.IntToString int_to_string = 3;
  if (this->has_int_to_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *int_to_string_);
  }

  // .proto_util_converter.testing.Mixed1 mixed1 = 4;
  if (this->has_mixed1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed1_);
  }

  // .proto_util_converter.testing.Mixed2 mixed2 = 5;
  if (this->has_mixed2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mixed2_);
  }

  // .proto_util_converter.testing.MapOfObjects map_of_objects = 6;
  if (this->has_map_of_objects()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_of_objects_);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int1 = 7;
  if (this->has_empty_key_string_to_int1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_string_to_int1_);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int2 = 8;
  if (this->has_empty_key_string_to_int2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_string_to_int2_);
  }

  // .proto_util_converter.testing.StringtoInt empty_key_string_to_int3 = 9;
  if (this->has_empty_key_string_to_int3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_string_to_int3_);
  }

  // .proto_util_converter.testing.BoolToString empty_key_bool_to_string = 10;
  if (this->has_empty_key_bool_to_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_bool_to_string_);
  }

  // .proto_util_converter.testing.IntToString empty_key_int_to_string = 11;
  if (this->has_empty_key_int_to_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_int_to_string_);
  }

  // .proto_util_converter.testing.Mixed1 empty_key_mixed = 12;
  if (this->has_empty_key_mixed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_mixed_);
  }

  // .proto_util_converter.testing.MapOfObjects empty_key_map_objects = 13;
  if (this->has_empty_key_map_objects()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_key_map_objects_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapsTestCases::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapsTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  const MapsTestCases* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapsTestCases>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapsTestCases)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapsTestCases)
    MergeFrom(*source);
  }
}

void MapsTestCases::MergeFrom(const MapsTestCases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapsTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_empty_map()) {
    mutable_empty_map()->::proto_util_converter::testing::EmptyMap::MergeFrom(from.empty_map());
  }
  if (from.has_string_to_int()) {
    mutable_string_to_int()->::proto_util_converter::testing::StringtoInt::MergeFrom(from.string_to_int());
  }
  if (from.has_int_to_string()) {
    mutable_int_to_string()->::proto_util_converter::testing::IntToString::MergeFrom(from.int_to_string());
  }
  if (from.has_mixed1()) {
    mutable_mixed1()->::proto_util_converter::testing::Mixed1::MergeFrom(from.mixed1());
  }
  if (from.has_mixed2()) {
    mutable_mixed2()->::proto_util_converter::testing::Mixed2::MergeFrom(from.mixed2());
  }
  if (from.has_map_of_objects()) {
    mutable_map_of_objects()->::proto_util_converter::testing::MapOfObjects::MergeFrom(from.map_of_objects());
  }
  if (from.has_empty_key_string_to_int1()) {
    mutable_empty_key_string_to_int1()->::proto_util_converter::testing::StringtoInt::MergeFrom(from.empty_key_string_to_int1());
  }
  if (from.has_empty_key_string_to_int2()) {
    mutable_empty_key_string_to_int2()->::proto_util_converter::testing::StringtoInt::MergeFrom(from.empty_key_string_to_int2());
  }
  if (from.has_empty_key_string_to_int3()) {
    mutable_empty_key_string_to_int3()->::proto_util_converter::testing::StringtoInt::MergeFrom(from.empty_key_string_to_int3());
  }
  if (from.has_empty_key_bool_to_string()) {
    mutable_empty_key_bool_to_string()->::proto_util_converter::testing::BoolToString::MergeFrom(from.empty_key_bool_to_string());
  }
  if (from.has_empty_key_int_to_string()) {
    mutable_empty_key_int_to_string()->::proto_util_converter::testing::IntToString::MergeFrom(from.empty_key_int_to_string());
  }
  if (from.has_empty_key_mixed()) {
    mutable_empty_key_mixed()->::proto_util_converter::testing::Mixed1::MergeFrom(from.empty_key_mixed());
  }
  if (from.has_empty_key_map_objects()) {
    mutable_empty_key_map_objects()->::proto_util_converter::testing::MapOfObjects::MergeFrom(from.empty_key_map_objects());
  }
}

void MapsTestCases::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapsTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapsTestCases::CopyFrom(const MapsTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapsTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapsTestCases::IsInitialized() const {
  return true;
}

void MapsTestCases::InternalSwap(MapsTestCases* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(empty_map_, other->empty_map_);
  swap(string_to_int_, other->string_to_int_);
  swap(int_to_string_, other->int_to_string_);
  swap(mixed1_, other->mixed1_);
  swap(mixed2_, other->mixed2_);
  swap(map_of_objects_, other->map_of_objects_);
  swap(empty_key_string_to_int1_, other->empty_key_string_to_int1_);
  swap(empty_key_string_to_int2_, other->empty_key_string_to_int2_);
  swap(empty_key_string_to_int3_, other->empty_key_string_to_int3_);
  swap(empty_key_bool_to_string_, other->empty_key_bool_to_string_);
  swap(empty_key_int_to_string_, other->empty_key_int_to_string_);
  swap(empty_key_mixed_, other->empty_key_mixed_);
  swap(empty_key_map_objects_, other->empty_key_map_objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapsTestCases::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

EmptyMap_MapEntry_DoNotUse::EmptyMap_MapEntry_DoNotUse() {}
EmptyMap_MapEntry_DoNotUse::EmptyMap_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EmptyMap_MapEntry_DoNotUse::MergeFrom(const EmptyMap_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EmptyMap_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EmptyMap_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void EmptyMap::InitAsDefaultInstance() {
}
class EmptyMap::_Internal {
 public:
};

EmptyMap::EmptyMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.EmptyMap)
}
EmptyMap::EmptyMap(const EmptyMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.EmptyMap)
}

void EmptyMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EmptyMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
}

EmptyMap::~EmptyMap() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.EmptyMap)
  SharedDtor();
}

void EmptyMap::SharedDtor() {
}

void EmptyMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyMap& EmptyMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyMap_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void EmptyMap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.EmptyMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmptyMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmptyMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.EmptyMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, int32> map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          EmptyMap_MapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              EmptyMap_MapEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 > > parser(&map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.EmptyMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.EmptyMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmptyMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.EmptyMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EmptyMap_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        EmptyMap_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.EmptyMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.EmptyMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EmptyMap_MapEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        target = EmptyMap_MapEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.EmptyMap)
  return target;
}

size_t EmptyMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.EmptyMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->map().begin();
      it != this->map().end(); ++it) {
    total_size += EmptyMap_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.EmptyMap)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.EmptyMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.EmptyMap)
    MergeFrom(*source);
  }
}

void EmptyMap::MergeFrom(const EmptyMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.EmptyMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
}

void EmptyMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.EmptyMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMap::CopyFrom(const EmptyMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.EmptyMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMap::IsInitialized() const {
  return true;
}

void EmptyMap::InternalSwap(EmptyMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StringtoInt_MapEntry_DoNotUse::StringtoInt_MapEntry_DoNotUse() {}
StringtoInt_MapEntry_DoNotUse::StringtoInt_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StringtoInt_MapEntry_DoNotUse::MergeFrom(const StringtoInt_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StringtoInt_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StringtoInt_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void StringtoInt::InitAsDefaultInstance() {
}
class StringtoInt::_Internal {
 public:
};

StringtoInt::StringtoInt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.StringtoInt)
}
StringtoInt::StringtoInt(const StringtoInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StringtoInt)
}

void StringtoInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringtoInt_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
}

StringtoInt::~StringtoInt() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StringtoInt)
  SharedDtor();
}

void StringtoInt::SharedDtor() {
}

void StringtoInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringtoInt& StringtoInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringtoInt_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void StringtoInt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StringtoInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringtoInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, int32> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringtoInt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.StringtoInt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, int32> map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          StringtoInt_MapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              StringtoInt_MapEntry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 > > parser(&map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.StringtoInt.MapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.StringtoInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.StringtoInt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringtoInt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.StringtoInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.StringtoInt.MapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        StringtoInt_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        StringtoInt_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.StringtoInt)
}

::PROTOBUF_NAMESPACE_ID::uint8* StringtoInt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StringtoInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.StringtoInt.MapEntry.key");
      }
    };

    if (false &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StringtoInt_MapEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        target = StringtoInt_MapEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StringtoInt)
  return target;
}

size_t StringtoInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StringtoInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->map().begin();
      it != this->map().end(); ++it) {
    total_size += StringtoInt_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringtoInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.StringtoInt)
  GOOGLE_DCHECK_NE(&from, this);
  const StringtoInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringtoInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.StringtoInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.StringtoInt)
    MergeFrom(*source);
  }
}

void StringtoInt::MergeFrom(const StringtoInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StringtoInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
}

void StringtoInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.StringtoInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringtoInt::CopyFrom(const StringtoInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StringtoInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringtoInt::IsInitialized() const {
  return true;
}

void StringtoInt::InternalSwap(StringtoInt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringtoInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

IntToString_MapEntry_DoNotUse::IntToString_MapEntry_DoNotUse() {}
IntToString_MapEntry_DoNotUse::IntToString_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IntToString_MapEntry_DoNotUse::MergeFrom(const IntToString_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IntToString_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void IntToString_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void IntToString::InitAsDefaultInstance() {
}
class IntToString::_Internal {
 public:
};

IntToString::IntToString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.IntToString)
}
IntToString::IntToString(const IntToString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.IntToString)
}

void IntToString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
}

IntToString::~IntToString() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.IntToString)
  SharedDtor();
}

void IntToString::SharedDtor() {
}

void IntToString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntToString& IntToString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void IntToString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.IntToString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntToString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, string> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntToString::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.IntToString)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, string> map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          IntToString_MapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              IntToString_MapEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string > > parser(&map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.IntToString.MapEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.IntToString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.IntToString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntToString::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.IntToString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.IntToString.MapEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        IntToString_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        IntToString_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.IntToString)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntToString::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.IntToString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.IntToString.MapEntry.value");
      }
    };

    if (false &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = IntToString_MapEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        target = IntToString_MapEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.IntToString)
  return target;
}

size_t IntToString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.IntToString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->map().begin();
      it != this->map().end(); ++it) {
    total_size += IntToString_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntToString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.IntToString)
  GOOGLE_DCHECK_NE(&from, this);
  const IntToString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntToString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.IntToString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.IntToString)
    MergeFrom(*source);
  }
}

void IntToString::MergeFrom(const IntToString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.IntToString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
}

void IntToString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.IntToString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntToString::CopyFrom(const IntToString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.IntToString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntToString::IsInitialized() const {
  return true;
}

void IntToString::InternalSwap(IntToString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntToString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BoolToString_MapEntry_DoNotUse::BoolToString_MapEntry_DoNotUse() {}
BoolToString_MapEntry_DoNotUse::BoolToString_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BoolToString_MapEntry_DoNotUse::MergeFrom(const BoolToString_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BoolToString_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BoolToString_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void BoolToString::InitAsDefaultInstance() {
}
class BoolToString::_Internal {
 public:
};

BoolToString::BoolToString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.BoolToString)
}
BoolToString::BoolToString(const BoolToString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.BoolToString)
}

void BoolToString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoolToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
}

BoolToString::~BoolToString() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.BoolToString)
  SharedDtor();
}

void BoolToString::SharedDtor() {
}

void BoolToString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolToString& BoolToString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolToString_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void BoolToString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.BoolToString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoolToString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<bool, string> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoolToString::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.BoolToString)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<bool, string> map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          BoolToString_MapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              BoolToString_MapEntry_DoNotUse,
              bool, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string > > parser(&map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.BoolToString.MapEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.BoolToString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.BoolToString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoolToString::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.BoolToString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<bool, string> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.BoolToString.MapEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        BoolToString_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        BoolToString_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.BoolToString)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolToString::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.BoolToString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<bool, string> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.BoolToString.MapEntry.value");
      }
    };

    if (false &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BoolToString_MapEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        target = BoolToString_MapEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.BoolToString)
  return target;
}

size_t BoolToString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.BoolToString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<bool, string> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
      it = this->map().begin();
      it != this->map().end(); ++it) {
    total_size += BoolToString_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolToString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.BoolToString)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolToString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolToString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.BoolToString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.BoolToString)
    MergeFrom(*source);
  }
}

void BoolToString::MergeFrom(const BoolToString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.BoolToString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
}

void BoolToString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.BoolToString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolToString::CopyFrom(const BoolToString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.BoolToString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolToString::IsInitialized() const {
  return true;
}

void BoolToString::InternalSwap(BoolToString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolToString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Mixed1_MapEntry_DoNotUse::Mixed1_MapEntry_DoNotUse() {}
Mixed1_MapEntry_DoNotUse::Mixed1_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Mixed1_MapEntry_DoNotUse::MergeFrom(const Mixed1_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Mixed1_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Mixed1_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Mixed1::InitAsDefaultInstance() {
}
class Mixed1::_Internal {
 public:
};

Mixed1::Mixed1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.Mixed1)
}
Mixed1::Mixed1(const Mixed1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.Mixed1)
}

void Mixed1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mixed1_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Mixed1::~Mixed1() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.Mixed1)
  SharedDtor();
}

void Mixed1::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mixed1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mixed1& Mixed1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mixed1_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void Mixed1::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.Mixed1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mixed1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "proto_util_converter.testing.Mixed1.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, float> map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mixed1::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.Mixed1)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.Mixed1.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> map = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          Mixed1_MapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Mixed1_MapEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.Mixed1.MapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.Mixed1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.Mixed1)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mixed1::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.Mixed1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.Mixed1.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // map<string, float> map = 2;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.Mixed1.MapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Mixed1_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        Mixed1_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.Mixed1)
}

::PROTOBUF_NAMESPACE_ID::uint8* Mixed1::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.Mixed1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.Mixed1.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // map<string, float> map = 2;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.Mixed1.MapEntry.key");
      }
    };

    if (false &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Mixed1_MapEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        target = Mixed1_MapEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.Mixed1)
  return target;
}

size_t Mixed1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.Mixed1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->map().begin();
      it != this->map().end(); ++it) {
    total_size += Mixed1_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mixed1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.Mixed1)
  GOOGLE_DCHECK_NE(&from, this);
  const Mixed1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mixed1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.Mixed1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.Mixed1)
    MergeFrom(*source);
  }
}

void Mixed1::MergeFrom(const Mixed1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.Mixed1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Mixed1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.Mixed1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mixed1::CopyFrom(const Mixed1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.Mixed1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mixed1::IsInitialized() const {
  return true;
}

void Mixed1::InternalSwap(Mixed1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Mixed1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Mixed2_MapEntry_DoNotUse::Mixed2_MapEntry_DoNotUse() {}
Mixed2_MapEntry_DoNotUse::Mixed2_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Mixed2_MapEntry_DoNotUse::MergeFrom(const Mixed2_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Mixed2_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Mixed2_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Mixed2::InitAsDefaultInstance() {
}
class Mixed2::_Internal {
 public:
};

Mixed2::Mixed2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.Mixed2)
}
Mixed2::Mixed2(const Mixed2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  ee_ = from.ee_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.Mixed2)
}

void Mixed2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mixed2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  ee_ = 0;
}

Mixed2::~Mixed2() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.Mixed2)
  SharedDtor();
}

void Mixed2::SharedDtor() {
}

void Mixed2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mixed2& Mixed2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mixed2_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void Mixed2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.Mixed2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  ee_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mixed2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, bool> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.Mixed2.E ee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ee(static_cast<::proto_util_converter::testing::Mixed2_E>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mixed2::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.Mixed2)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, bool> map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          Mixed2_MapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Mixed2_MapEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, bool,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool > > parser(&map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.Mixed2.E ee = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ee(static_cast< ::proto_util_converter::testing::Mixed2_E >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.Mixed2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.Mixed2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mixed2::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.Mixed2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Mixed2_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        Mixed2_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  // .proto_util_converter.testing.Mixed2.E ee = 2;
  if (this->ee() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ee(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.Mixed2)
}

::PROTOBUF_NAMESPACE_ID::uint8* Mixed2::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.Mixed2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Mixed2_MapEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        target = Mixed2_MapEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  // .proto_util_converter.testing.Mixed2.E ee = 2;
  if (this->ee() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ee(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.Mixed2)
  return target;
}

size_t Mixed2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.Mixed2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
      it = this->map().begin();
      it != this->map().end(); ++it) {
    total_size += Mixed2_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .proto_util_converter.testing.Mixed2.E ee = 2;
  if (this->ee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ee());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mixed2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.Mixed2)
  GOOGLE_DCHECK_NE(&from, this);
  const Mixed2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mixed2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.Mixed2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.Mixed2)
    MergeFrom(*source);
  }
}

void Mixed2::MergeFrom(const Mixed2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.Mixed2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (from.ee() != 0) {
    set_ee(from.ee());
  }
}

void Mixed2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.Mixed2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mixed2::CopyFrom(const Mixed2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.Mixed2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mixed2::IsInitialized() const {
  return true;
}

void Mixed2::InternalSwap(Mixed2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
  swap(ee_, other->ee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mixed2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapOfObjects_M::InitAsDefaultInstance() {
}
class MapOfObjects_M::_Internal {
 public:
};

MapOfObjects_M::MapOfObjects_M()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapOfObjects.M)
}
MapOfObjects_M::MapOfObjects_M(const MapOfObjects_M& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.inner_text().empty()) {
    inner_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inner_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOfObjects.M)
}

void MapOfObjects_M::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapOfObjects_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  inner_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MapOfObjects_M::~MapOfObjects_M() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOfObjects.M)
  SharedDtor();
}

void MapOfObjects_M::SharedDtor() {
  inner_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapOfObjects_M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapOfObjects_M& MapOfObjects_M::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapOfObjects_M_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapOfObjects_M::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOfObjects.M)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapOfObjects_M::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string inner_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_inner_text(), ptr, ctx, "proto_util_converter.testing.MapOfObjects.M.inner_text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapOfObjects_M::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapOfObjects.M)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string inner_text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->inner_text().data(), static_cast<int>(this->inner_text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOfObjects.M.inner_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapOfObjects.M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapOfObjects.M)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapOfObjects_M::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapOfObjects.M)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_text = 1;
  if (this->inner_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->inner_text().data(), static_cast<int>(this->inner_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOfObjects.M.inner_text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inner_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapOfObjects.M)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapOfObjects_M::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOfObjects.M)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_text = 1;
  if (this->inner_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->inner_text().data(), static_cast<int>(this->inner_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOfObjects.M.inner_text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->inner_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOfObjects.M)
  return target;
}

size_t MapOfObjects_M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOfObjects.M)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inner_text = 1;
  if (this->inner_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->inner_text());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOfObjects_M::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapOfObjects.M)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOfObjects_M* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapOfObjects_M>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapOfObjects.M)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapOfObjects.M)
    MergeFrom(*source);
  }
}

void MapOfObjects_M::MergeFrom(const MapOfObjects_M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOfObjects.M)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_text().size() > 0) {

    inner_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inner_text_);
  }
}

void MapOfObjects_M::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapOfObjects.M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOfObjects_M::CopyFrom(const MapOfObjects_M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOfObjects.M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOfObjects_M::IsInitialized() const {
  return true;
}

void MapOfObjects_M::InternalSwap(MapOfObjects_M* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inner_text_.Swap(&other->inner_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOfObjects_M::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MapOfObjects_MapEntry_DoNotUse::MapOfObjects_MapEntry_DoNotUse() {}
MapOfObjects_MapEntry_DoNotUse::MapOfObjects_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOfObjects_MapEntry_DoNotUse::MergeFrom(const MapOfObjects_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOfObjects_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapOfObjects_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MapOfObjects::InitAsDefaultInstance() {
}
class MapOfObjects::_Internal {
 public:
};

MapOfObjects::MapOfObjects()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapOfObjects)
}
MapOfObjects::MapOfObjects(const MapOfObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOfObjects)
}

void MapOfObjects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapOfObjects_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
}

MapOfObjects::~MapOfObjects() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOfObjects)
  SharedDtor();
}

void MapOfObjects::SharedDtor() {
}

void MapOfObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapOfObjects& MapOfObjects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapOfObjects_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapOfObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOfObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapOfObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapOfObjects::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapOfObjects)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          MapOfObjects_MapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MapOfObjects_MapEntry_DoNotUse,
              std::string, ::proto_util_converter::testing::MapOfObjects_M,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M > > parser(&map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOfObjects.MapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapOfObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapOfObjects)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapOfObjects::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapOfObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOfObjects.MapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MapOfObjects_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        MapOfObjects_MapEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapOfObjects)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapOfObjects::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOfObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
  if (!this->map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOfObjects.MapEntry.key");
      }
    };

    if (false &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapOfObjects_MapEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        target = MapOfObjects_MapEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOfObjects)
  return target;
}

size_t MapOfObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOfObjects)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapOfObjects.M> map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOfObjects_M >::const_iterator
      it = this->map().begin();
      it != this->map().end(); ++it) {
    total_size += MapOfObjects_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOfObjects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapOfObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOfObjects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapOfObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapOfObjects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapOfObjects)
    MergeFrom(*source);
  }
}

void MapOfObjects::MergeFrom(const MapOfObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOfObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
}

void MapOfObjects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapOfObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOfObjects::CopyFrom(const MapOfObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOfObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOfObjects::IsInitialized() const {
  return true;
}

void MapOfObjects::InternalSwap(MapOfObjects* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_.Swap(&other->map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOfObjects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DummyRequest::InitAsDefaultInstance() {
}
class DummyRequest::_Internal {
 public:
};

DummyRequest::DummyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.DummyRequest)
}
DummyRequest::DummyRequest(const DummyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DummyRequest)
}

void DummyRequest::SharedCtor() {
}

DummyRequest::~DummyRequest() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.DummyRequest)
  SharedDtor();
}

void DummyRequest::SharedDtor() {
}

void DummyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DummyRequest& DummyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DummyRequest_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void DummyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.DummyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DummyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DummyRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.DummyRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.DummyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.DummyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DummyRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.DummyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.DummyRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DummyRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.DummyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.DummyRequest)
  return target;
}

size_t DummyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.DummyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DummyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.DummyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DummyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.DummyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.DummyRequest)
    MergeFrom(*source);
  }
}

void DummyRequest::MergeFrom(const DummyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.DummyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DummyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.DummyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyRequest::CopyFrom(const DummyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.DummyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyRequest::IsInitialized() const {
  return true;
}

void DummyRequest::InternalSwap(DummyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MapIn_MapInputEntry_DoNotUse::MapIn_MapInputEntry_DoNotUse() {}
MapIn_MapInputEntry_DoNotUse::MapIn_MapInputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapIn_MapInputEntry_DoNotUse::MergeFrom(const MapIn_MapInputEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapIn_MapInputEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapIn_MapInputEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MapIn_MapAnyEntry_DoNotUse::MapIn_MapAnyEntry_DoNotUse() {}
MapIn_MapAnyEntry_DoNotUse::MapIn_MapAnyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapIn_MapAnyEntry_DoNotUse::MergeFrom(const MapIn_MapAnyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapIn_MapAnyEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapIn_MapAnyEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MapIn::InitAsDefaultInstance() {
}
class MapIn::_Internal {
 public:
};

void MapIn::clear_map_any() {
  map_any_.Clear();
}
MapIn::MapIn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapIn)
}
MapIn::MapIn(const MapIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      things_(from.things_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_input_.MergeFrom(from.map_input_);
  map_any_.MergeFrom(from.map_any_);
  other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.other().empty()) {
    other_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.other_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapIn)
}

void MapIn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  other_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MapIn::~MapIn() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapIn)
  SharedDtor();
}

void MapIn::SharedDtor() {
  other_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapIn& MapIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapIn_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapIn::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  things_.Clear();
  map_input_.Clear();
  map_any_.Clear();
  other_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string other = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_other(), ptr, ctx, "proto_util_converter.testing.MapIn.other");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string things = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_things(), ptr, ctx, "proto_util_converter.testing.MapIn.things");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // map<string, string> map_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_input_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> map_any = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_any_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapIn::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapIn)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string other = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_other()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->other().data(), static_cast<int>(this->other().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapIn.other"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string things = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_things()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->things(this->things_size() - 1).data(),
            static_cast<int>(this->things(this->things_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapIn.things"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> map_input = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          MapIn_MapInputEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MapIn_MapInputEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&map_input_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapIn.MapInputEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapIn.MapInputEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.Any> map_any = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          MapIn_MapAnyEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MapIn_MapAnyEntry_DoNotUse,
              std::string, PROTOBUF_NAMESPACE_ID::Any,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any > > parser(&map_any_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapIn.MapAnyEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapIn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapIn::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string other = 1;
  if (this->other().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->other().data(), static_cast<int>(this->other().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapIn.other");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->other(), output);
  }

  // repeated string things = 2;
  for (int i = 0, n = this->things_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->things(i).data(), static_cast<int>(this->things(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapIn.things");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->things(i), output);
  }

  // map<string, string> map_input = 3;
  if (!this->map_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapIn.MapInputEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapIn.MapInputEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_input().begin();
          it != this->map_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MapIn_MapInputEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_input().begin();
          it != this->map_input().end(); ++it) {
        MapIn_MapInputEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .google.protobuf.Any> map_any = 4;
  if (!this->map_any().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapIn.MapAnyEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_any().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_any().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->map_any().begin();
          it != this->map_any().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MapIn_MapAnyEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->map_any().begin();
          it != this->map_any().end(); ++it) {
        MapIn_MapAnyEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapIn)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapIn::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string other = 1;
  if (this->other().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->other().data(), static_cast<int>(this->other().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapIn.other");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->other(), target);
  }

  // repeated string things = 2;
  for (int i = 0, n = this->things_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->things(i).data(), static_cast<int>(this->things(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapIn.things");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->things(i), target);
  }

  // map<string, string> map_input = 3;
  if (!this->map_input().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapIn.MapInputEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapIn.MapInputEntry.value");
      }
    };

    if (false &&
        this->map_input().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_input().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_input().begin();
          it != this->map_input().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapIn_MapInputEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->map_input().begin();
          it != this->map_input().end(); ++it) {
        target = MapIn_MapInputEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .google.protobuf.Any> map_any = 4;
  if (!this->map_any().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapIn.MapAnyEntry.key");
      }
    };

    if (false &&
        this->map_any().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_any().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->map_any().begin();
          it != this->map_any().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapIn_MapAnyEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
          it = this->map_any().begin();
          it != this->map_any().end(); ++it) {
        target = MapIn_MapAnyEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapIn)
  return target;
}

size_t MapIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapIn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string things = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->things_size());
  for (int i = 0, n = this->things_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->things(i));
  }

  // map<string, string> map_input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_input_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->map_input().begin();
      it != this->map_input().end(); ++it) {
    total_size += MapIn_MapInputEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .google.protobuf.Any> map_any = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map_any_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->map_any().begin();
      it != this->map_any().end(); ++it) {
    total_size += MapIn_MapAnyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string other = 1;
  if (this->other().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->other());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapIn)
  GOOGLE_DCHECK_NE(&from, this);
  const MapIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapIn)
    MergeFrom(*source);
  }
}

void MapIn::MergeFrom(const MapIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  things_.MergeFrom(from.things_);
  map_input_.MergeFrom(from.map_input_);
  map_any_.MergeFrom(from.map_any_);
  if (from.other().size() > 0) {

    other_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.other_);
  }
}

void MapIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapIn::CopyFrom(const MapIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapIn::IsInitialized() const {
  return true;
}

void MapIn::InternalSwap(MapIn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  things_.InternalSwap(CastToBase(&other->things_));
  map_input_.Swap(&other->map_input_);
  map_any_.Swap(&other->map_any_);
  other_.Swap(&other->other_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MapIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MapOut_Map1Entry_DoNotUse::MapOut_Map1Entry_DoNotUse() {}
MapOut_Map1Entry_DoNotUse::MapOut_Map1Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOut_Map1Entry_DoNotUse::MergeFrom(const MapOut_Map1Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOut_Map1Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapOut_Map1Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MapOut_Map2Entry_DoNotUse::MapOut_Map2Entry_DoNotUse() {}
MapOut_Map2Entry_DoNotUse::MapOut_Map2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOut_Map2Entry_DoNotUse::MergeFrom(const MapOut_Map2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOut_Map2Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapOut_Map2Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MapOut_Map3Entry_DoNotUse::MapOut_Map3Entry_DoNotUse() {}
MapOut_Map3Entry_DoNotUse::MapOut_Map3Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOut_Map3Entry_DoNotUse::MergeFrom(const MapOut_Map3Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOut_Map3Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapOut_Map3Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MapOut_Map4Entry_DoNotUse::MapOut_Map4Entry_DoNotUse() {}
MapOut_Map4Entry_DoNotUse::MapOut_Map4Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOut_Map4Entry_DoNotUse::MergeFrom(const MapOut_Map4Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOut_Map4Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapOut_Map4Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MapOut::InitAsDefaultInstance() {
}
class MapOut::_Internal {
 public:
};

MapOut::MapOut()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapOut)
}
MapOut::MapOut(const MapOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  map3_.MergeFrom(from.map3_);
  map4_.MergeFrom(from.map4_);
  bar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.bar().empty()) {
    bar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bar_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOut)
}

void MapOut::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  bar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MapOut::~MapOut() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOut)
  SharedDtor();
}

void MapOut::SharedDtor() {
  bar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapOut& MapOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapOut_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapOut::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map1_.Clear();
  map2_.Clear();
  map3_.Clear();
  map4_.Clear();
  bar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .proto_util_converter.testing.MapM> map1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map1_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // map<int32, string> map3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map3_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // string bar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bar(), ptr, ctx, "proto_util_converter.testing.MapOut.bar");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<bool, string> map4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map4_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapOut::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapOut)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .proto_util_converter.testing.MapM> map1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          MapOut_Map1Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MapOut_Map1Entry_DoNotUse,
              std::string, ::proto_util_converter::testing::MapM,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM > > parser(&map1_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOut.Map1Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          MapOut_Map2Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MapOut_Map2Entry_DoNotUse,
              std::string, ::proto_util_converter::testing::MapOut,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut > > parser(&map2_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOut.Map2Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, string> map3 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          MapOut_Map3Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MapOut_Map3Entry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string > > parser(&map3_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOut.Map3Entry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bar = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bar()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bar().data(), static_cast<int>(this->bar().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOut.bar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<bool, string> map4 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          MapOut_Map4Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MapOut_Map4Entry_DoNotUse,
              bool, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string > > parser(&map4_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOut.Map4Entry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapOut)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapOut::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapM> map1 = 1;
  if (!this->map1().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOut.Map1Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map1().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map1().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::const_iterator
          it = this->map1().begin();
          it != this->map1().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MapOut_Map1Entry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::const_iterator
          it = this->map1().begin();
          it != this->map1().end(); ++it) {
        MapOut_Map1Entry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
  if (!this->map2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOut.Map2Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::const_iterator
          it = this->map2().begin();
          it != this->map2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MapOut_Map2Entry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::const_iterator
          it = this->map2().begin();
          it != this->map2().end(); ++it) {
        MapOut_Map2Entry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> map3 = 3;
  if (!this->map3().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOut.Map3Entry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map3().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map3().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->map3().begin();
          it != this->map3().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MapOut_Map3Entry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->map3().begin();
          it != this->map3().end(); ++it) {
        MapOut_Map3Entry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string bar = 4;
  if (this->bar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bar().data(), static_cast<int>(this->bar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOut.bar");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bar(), output);
  }

  // map<bool, string> map4 = 5;
  if (!this->map4().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOut.Map4Entry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map4().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map4().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
          it = this->map4().begin();
          it != this->map4().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MapOut_Map4Entry_DoNotUse::Funcs::SerializeToCodedStream(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
          it = this->map4().begin();
          it != this->map4().end(); ++it) {
        MapOut_Map4Entry_DoNotUse::Funcs::SerializeToCodedStream(5, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapOut)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapOut::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapM> map1 = 1;
  if (!this->map1().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOut.Map1Entry.key");
      }
    };

    if (false &&
        this->map1().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map1().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::const_iterator
          it = this->map1().begin();
          it != this->map1().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapOut_Map1Entry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::const_iterator
          it = this->map1().begin();
          it != this->map1().end(); ++it) {
        target = MapOut_Map1Entry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
  if (!this->map2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOut.Map2Entry.key");
      }
    };

    if (false &&
        this->map2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::const_iterator
          it = this->map2().begin();
          it != this->map2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapOut_Map2Entry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::const_iterator
          it = this->map2().begin();
          it != this->map2().end(); ++it) {
        target = MapOut_Map2Entry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> map3 = 3;
  if (!this->map3().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOut.Map3Entry.value");
      }
    };

    if (false &&
        this->map3().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map3().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->map3().begin();
          it != this->map3().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapOut_Map3Entry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->map3().begin();
          it != this->map3().end(); ++it) {
        target = MapOut_Map3Entry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string bar = 4;
  if (this->bar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bar().data(), static_cast<int>(this->bar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOut.bar");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->bar(), target);
  }

  // map<bool, string> map4 = 5;
  if (!this->map4().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "proto_util_converter.testing.MapOut.Map4Entry.value");
      }
    };

    if (false &&
        this->map4().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map4().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
          it = this->map4().begin();
          it != this->map4().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapOut_Map4Entry_DoNotUse::Funcs::SerializeToArray(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
          it = this->map4().begin();
          it != this->map4().end(); ++it) {
        target = MapOut_Map4Entry_DoNotUse::Funcs::SerializeToArray(5, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOut)
  return target;
}

size_t MapOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOut)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .proto_util_converter.testing.MapM> map1 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map1_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapM >::const_iterator
      it = this->map1().begin();
      it != this->map1().end(); ++it) {
    total_size += MapOut_Map1Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .proto_util_converter.testing.MapOut> map2 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto_util_converter::testing::MapOut >::const_iterator
      it = this->map2().begin();
      it != this->map2().end(); ++it) {
    total_size += MapOut_Map2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> map3 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map3_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->map3().begin();
      it != this->map3().end(); ++it) {
    total_size += MapOut_Map3Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, string> map4 = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->map4_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, std::string >::const_iterator
      it = this->map4().begin();
      it != this->map4().end(); ++it) {
    total_size += MapOut_Map4Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string bar = 4;
  if (this->bar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bar());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapOut)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapOut)
    MergeFrom(*source);
  }
}

void MapOut::MergeFrom(const MapOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  map3_.MergeFrom(from.map3_);
  map4_.MergeFrom(from.map4_);
  if (from.bar().size() > 0) {

    bar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bar_);
  }
}

void MapOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOut::CopyFrom(const MapOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOut::IsInitialized() const {
  return true;
}

void MapOut::InternalSwap(MapOut* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map1_.Swap(&other->map1_);
  map2_.Swap(&other->map2_);
  map3_.Swap(&other->map3_);
  map4_.Swap(&other->map4_);
  bar_.Swap(&other->bar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapOutWireFormat_Map1Entry::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_MapOutWireFormat_Map1Entry_default_instance_._instance.get_mutable()->value_ = const_cast< ::proto_util_converter::testing::MapM*>(
      ::proto_util_converter::testing::MapM::internal_default_instance());
}
class MapOutWireFormat_Map1Entry::_Internal {
 public:
  static const ::proto_util_converter::testing::MapM& value(const MapOutWireFormat_Map1Entry* msg);
};

const ::proto_util_converter::testing::MapM&
MapOutWireFormat_Map1Entry::_Internal::value(const MapOutWireFormat_Map1Entry* msg) {
  return *msg->value_;
}
MapOutWireFormat_Map1Entry::MapOutWireFormat_Map1Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
}
MapOutWireFormat_Map1Entry::MapOutWireFormat_Map1Entry(const MapOutWireFormat_Map1Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::proto_util_converter::testing::MapM(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
}

void MapOutWireFormat_Map1Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapOutWireFormat_Map1Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

MapOutWireFormat_Map1Entry::~MapOutWireFormat_Map1Entry() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  SharedDtor();
}

void MapOutWireFormat_Map1Entry::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void MapOutWireFormat_Map1Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapOutWireFormat_Map1Entry& MapOutWireFormat_Map1Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapOutWireFormat_Map1Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapOutWireFormat_Map1Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapOutWireFormat_Map1Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "proto_util_converter.testing.MapOutWireFormat.Map1Entry.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapM value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapOutWireFormat_Map1Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOutWireFormat.Map1Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.MapM value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapOutWireFormat_Map1Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map1Entry.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .proto_util_converter.testing.MapM value = 2;
  if (this->has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapOutWireFormat_Map1Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map1Entry.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .proto_util_converter.testing.MapM value = 2;
  if (this->has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  return target;
}

size_t MapOutWireFormat_Map1Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .proto_util_converter.testing.MapM value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOutWireFormat_Map1Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOutWireFormat_Map1Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapOutWireFormat_Map1Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
    MergeFrom(*source);
  }
}

void MapOutWireFormat_Map1Entry::MergeFrom(const MapOutWireFormat_Map1Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::proto_util_converter::testing::MapM::MergeFrom(from.value());
  }
}

void MapOutWireFormat_Map1Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat_Map1Entry::CopyFrom(const MapOutWireFormat_Map1Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map1Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map1Entry::IsInitialized() const {
  return true;
}

void MapOutWireFormat_Map1Entry::InternalSwap(MapOutWireFormat_Map1Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat_Map1Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapOutWireFormat_Map2Entry::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_MapOutWireFormat_Map2Entry_default_instance_._instance.get_mutable()->value_ = const_cast< ::proto_util_converter::testing::MapOut*>(
      ::proto_util_converter::testing::MapOut::internal_default_instance());
}
class MapOutWireFormat_Map2Entry::_Internal {
 public:
  static const ::proto_util_converter::testing::MapOut& value(const MapOutWireFormat_Map2Entry* msg);
};

const ::proto_util_converter::testing::MapOut&
MapOutWireFormat_Map2Entry::_Internal::value(const MapOutWireFormat_Map2Entry* msg) {
  return *msg->value_;
}
MapOutWireFormat_Map2Entry::MapOutWireFormat_Map2Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
}
MapOutWireFormat_Map2Entry::MapOutWireFormat_Map2Entry(const MapOutWireFormat_Map2Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::proto_util_converter::testing::MapOut(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
}

void MapOutWireFormat_Map2Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapOutWireFormat_Map2Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

MapOutWireFormat_Map2Entry::~MapOutWireFormat_Map2Entry() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  SharedDtor();
}

void MapOutWireFormat_Map2Entry::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void MapOutWireFormat_Map2Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapOutWireFormat_Map2Entry& MapOutWireFormat_Map2Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapOutWireFormat_Map2Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapOutWireFormat_Map2Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapOutWireFormat_Map2Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "proto_util_converter.testing.MapOutWireFormat.Map2Entry.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOut value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapOutWireFormat_Map2Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOutWireFormat.Map2Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.MapOut value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapOutWireFormat_Map2Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map2Entry.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .proto_util_converter.testing.MapOut value = 2;
  if (this->has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapOutWireFormat_Map2Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map2Entry.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .proto_util_converter.testing.MapOut value = 2;
  if (this->has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  return target;
}

size_t MapOutWireFormat_Map2Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .proto_util_converter.testing.MapOut value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOutWireFormat_Map2Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOutWireFormat_Map2Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapOutWireFormat_Map2Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
    MergeFrom(*source);
  }
}

void MapOutWireFormat_Map2Entry::MergeFrom(const MapOutWireFormat_Map2Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::proto_util_converter::testing::MapOut::MergeFrom(from.value());
  }
}

void MapOutWireFormat_Map2Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat_Map2Entry::CopyFrom(const MapOutWireFormat_Map2Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map2Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map2Entry::IsInitialized() const {
  return true;
}

void MapOutWireFormat_Map2Entry::InternalSwap(MapOutWireFormat_Map2Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat_Map2Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapOutWireFormat_Map3Entry::InitAsDefaultInstance() {
}
class MapOutWireFormat_Map3Entry::_Internal {
 public:
};

MapOutWireFormat_Map3Entry::MapOutWireFormat_Map3Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
}
MapOutWireFormat_Map3Entry::MapOutWireFormat_Map3Entry(const MapOutWireFormat_Map3Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
}

void MapOutWireFormat_Map3Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapOutWireFormat_Map3Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = 0;
}

MapOutWireFormat_Map3Entry::~MapOutWireFormat_Map3Entry() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  SharedDtor();
}

void MapOutWireFormat_Map3Entry::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapOutWireFormat_Map3Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapOutWireFormat_Map3Entry& MapOutWireFormat_Map3Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapOutWireFormat_Map3Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapOutWireFormat_Map3Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapOutWireFormat_Map3Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "proto_util_converter.testing.MapOutWireFormat.Map3Entry.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapOutWireFormat_Map3Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOutWireFormat.Map3Entry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapOutWireFormat_Map3Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map3Entry.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapOutWireFormat_Map3Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map3Entry.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  return target;
}

size_t MapOutWireFormat_Map3Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOutWireFormat_Map3Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOutWireFormat_Map3Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapOutWireFormat_Map3Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
    MergeFrom(*source);
  }
}

void MapOutWireFormat_Map3Entry::MergeFrom(const MapOutWireFormat_Map3Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
}

void MapOutWireFormat_Map3Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat_Map3Entry::CopyFrom(const MapOutWireFormat_Map3Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map3Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map3Entry::IsInitialized() const {
  return true;
}

void MapOutWireFormat_Map3Entry::InternalSwap(MapOutWireFormat_Map3Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat_Map3Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapOutWireFormat_Map4Entry::InitAsDefaultInstance() {
}
class MapOutWireFormat_Map4Entry::_Internal {
 public:
};

MapOutWireFormat_Map4Entry::MapOutWireFormat_Map4Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
}
MapOutWireFormat_Map4Entry::MapOutWireFormat_Map4Entry(const MapOutWireFormat_Map4Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
}

void MapOutWireFormat_Map4Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapOutWireFormat_Map4Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = false;
}

MapOutWireFormat_Map4Entry::~MapOutWireFormat_Map4Entry() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  SharedDtor();
}

void MapOutWireFormat_Map4Entry::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapOutWireFormat_Map4Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapOutWireFormat_Map4Entry& MapOutWireFormat_Map4Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapOutWireFormat_Map4Entry_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapOutWireFormat_Map4Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapOutWireFormat_Map4Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "proto_util_converter.testing.MapOutWireFormat.Map4Entry.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapOutWireFormat_Map4Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOutWireFormat.Map4Entry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapOutWireFormat_Map4Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool key = 1;
  if (this->key() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map4Entry.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapOutWireFormat_Map4Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool key = 1;
  if (this->key() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.Map4Entry.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  return target;
}

size_t MapOutWireFormat_Map4Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // bool key = 1;
  if (this->key() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOutWireFormat_Map4Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOutWireFormat_Map4Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapOutWireFormat_Map4Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
    MergeFrom(*source);
  }
}

void MapOutWireFormat_Map4Entry::MergeFrom(const MapOutWireFormat_Map4Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
}

void MapOutWireFormat_Map4Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat_Map4Entry::CopyFrom(const MapOutWireFormat_Map4Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat.Map4Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map4Entry::IsInitialized() const {
  return true;
}

void MapOutWireFormat_Map4Entry::InternalSwap(MapOutWireFormat_Map4Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat_Map4Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapOutWireFormat::InitAsDefaultInstance() {
}
class MapOutWireFormat::_Internal {
 public:
};

MapOutWireFormat::MapOutWireFormat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapOutWireFormat)
}
MapOutWireFormat::MapOutWireFormat(const MapOutWireFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      map1_(from.map1_),
      map2_(from.map2_),
      map3_(from.map3_),
      map4_(from.map4_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.bar().empty()) {
    bar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bar_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOutWireFormat)
}

void MapOutWireFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapOutWireFormat_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  bar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MapOutWireFormat::~MapOutWireFormat() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOutWireFormat)
  SharedDtor();
}

void MapOutWireFormat::SharedDtor() {
  bar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapOutWireFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapOutWireFormat& MapOutWireFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapOutWireFormat_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapOutWireFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOutWireFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map1_.Clear();
  map2_.Clear();
  map3_.Clear();
  map4_.Clear();
  bar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapOutWireFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // string bar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bar(), ptr, ctx, "proto_util_converter.testing.MapOutWireFormat.bar");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map4(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapOutWireFormat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapOutWireFormat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bar = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bar()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bar().data(), static_cast<int>(this->bar().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapOutWireFormat.bar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapOutWireFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapOutWireFormat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapOutWireFormat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapOutWireFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map1_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map1(static_cast<int>(i)),
      output);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map2_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->map2(static_cast<int>(i)),
      output);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map3_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->map3(static_cast<int>(i)),
      output);
  }

  // string bar = 4;
  if (this->bar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bar().data(), static_cast<int>(this->bar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.bar");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bar(), output);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map4_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->map4(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapOutWireFormat)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapOutWireFormat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOutWireFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map1_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map1(static_cast<int>(i)), target);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map2_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->map2(static_cast<int>(i)), target);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map3_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->map3(static_cast<int>(i)), target);
  }

  // string bar = 4;
  if (this->bar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bar().data(), static_cast<int>(this->bar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapOutWireFormat.bar");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->bar(), target);
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map4_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->map4(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOutWireFormat)
  return target;
}

size_t MapOutWireFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOutWireFormat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map1Entry map1 = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map1_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map1(static_cast<int>(i)));
    }
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map2Entry map2 = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->map2_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map2(static_cast<int>(i)));
    }
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map3Entry map3 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->map3_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map3(static_cast<int>(i)));
    }
  }

  // repeated .proto_util_converter.testing.MapOutWireFormat.Map4Entry map4 = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->map4_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map4(static_cast<int>(i)));
    }
  }

  // string bar = 4;
  if (this->bar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bar());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapOutWireFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapOutWireFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const MapOutWireFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapOutWireFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapOutWireFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapOutWireFormat)
    MergeFrom(*source);
  }
}

void MapOutWireFormat::MergeFrom(const MapOutWireFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOutWireFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  map3_.MergeFrom(from.map3_);
  map4_.MergeFrom(from.map4_);
  if (from.bar().size() > 0) {

    bar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bar_);
  }
}

void MapOutWireFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapOutWireFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat::CopyFrom(const MapOutWireFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOutWireFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat::IsInitialized() const {
  return true;
}

void MapOutWireFormat::InternalSwap(MapOutWireFormat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&map1_)->InternalSwap(CastToBase(&other->map1_));
  CastToBase(&map2_)->InternalSwap(CastToBase(&other->map2_));
  CastToBase(&map3_)->InternalSwap(CastToBase(&other->map3_));
  CastToBase(&map4_)->InternalSwap(CastToBase(&other->map4_));
  bar_.Swap(&other->bar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOutWireFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapM::InitAsDefaultInstance() {
}
class MapM::_Internal {
 public:
};

MapM::MapM()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.MapM)
}
MapM::MapM(const MapM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  foo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.foo().empty()) {
    foo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.foo_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapM)
}

void MapM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  foo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MapM::~MapM() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapM)
  SharedDtor();
}

void MapM::SharedDtor() {
  foo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapM& MapM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapM_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto.base);
  return *internal_default_instance();
}


void MapM::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string foo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_foo(), ptr, ctx, "proto_util_converter.testing.MapM.foo");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapM::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.MapM)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string foo = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_foo()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->foo().data(), static_cast<int>(this->foo().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.MapM.foo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.MapM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.MapM)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapM::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.MapM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string foo = 1;
  if (this->foo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->foo().data(), static_cast<int>(this->foo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapM.foo");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->foo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.MapM)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapM::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string foo = 1;
  if (this->foo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->foo().data(), static_cast<int>(this->foo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.MapM.foo");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->foo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapM)
  return target;
}

size_t MapM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapM)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string foo = 1;
  if (this->foo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->foo());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.MapM)
  GOOGLE_DCHECK_NE(&from, this);
  const MapM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.MapM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.MapM)
    MergeFrom(*source);
  }
}

void MapM::MergeFrom(const MapM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.foo().size() > 0) {

    foo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.foo_);
  }
}

void MapM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.MapM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapM::CopyFrom(const MapM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapM::IsInitialized() const {
  return true;
}

void MapM::InternalSwap(MapM* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  foo_.Swap(&other->foo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MapM::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapsTestCases* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapsTestCases >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapsTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::EmptyMap_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::EmptyMap* Arena::CreateMaybeMessage< ::proto_util_converter::testing::EmptyMap >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::EmptyMap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::StringtoInt_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StringtoInt* Arena::CreateMaybeMessage< ::proto_util_converter::testing::StringtoInt >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::StringtoInt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::IntToString_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::IntToString* Arena::CreateMaybeMessage< ::proto_util_converter::testing::IntToString >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::IntToString >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::BoolToString_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::BoolToString* Arena::CreateMaybeMessage< ::proto_util_converter::testing::BoolToString >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::BoolToString >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::Mixed1_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Mixed1* Arena::CreateMaybeMessage< ::proto_util_converter::testing::Mixed1 >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::Mixed1 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::Mixed2_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Mixed2* Arena::CreateMaybeMessage< ::proto_util_converter::testing::Mixed2 >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::Mixed2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfObjects_M* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfObjects_M >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOfObjects_M >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOfObjects_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfObjects* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfObjects >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOfObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DummyRequest* Arena::CreateMaybeMessage< ::proto_util_converter::testing::DummyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::DummyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapIn_MapInputEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapIn_MapAnyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapIn* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapIn >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapIn >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOut_Map1Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOut_Map2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOut_Map3Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOut_Map4Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOut* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOut >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOut >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat_Map1Entry* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOutWireFormat_Map1Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat_Map2Entry* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOutWireFormat_Map2Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat_Map3Entry* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOutWireFormat_Map3Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat_Map4Entry* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOutWireFormat_Map4Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOutWireFormat* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOutWireFormat >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapOutWireFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapM* Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapM >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::MapM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
