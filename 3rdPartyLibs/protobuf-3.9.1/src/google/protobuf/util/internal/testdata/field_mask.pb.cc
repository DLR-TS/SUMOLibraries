// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/field_mask.proto

#include "google/protobuf/util/internal/testdata/field_mask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldMaskWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NestedFieldMask_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto;
namespace proto_util_converter {
namespace testing {
class NestedFieldMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NestedFieldMask> _instance;
} _NestedFieldMask_default_instance_;
class FieldMaskTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMaskTest> _instance;
} _FieldMaskTest_default_instance_;
class FieldMaskTestCasesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMaskTestCases> _instance;
} _FieldMaskTestCases_default_instance_;
class FieldMaskWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMaskWrapper> _instance;
} _FieldMaskWrapper_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static void InitDefaultsscc_info_FieldMaskTest_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_FieldMaskTest_default_instance_;
    new (ptr) ::proto_util_converter::testing::FieldMaskTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::FieldMaskTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FieldMaskTest_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FieldMaskTest_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto}, {
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,
      &scc_info_NestedFieldMask_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_FieldMaskTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_FieldMaskTestCases_default_instance_;
    new (ptr) ::proto_util_converter::testing::FieldMaskTestCases();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::FieldMaskTestCases::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldMaskTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FieldMaskTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto}, {
      &scc_info_FieldMaskWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_FieldMaskWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_FieldMaskWrapper_default_instance_;
    new (ptr) ::proto_util_converter::testing::FieldMaskWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::FieldMaskWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldMaskWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FieldMaskWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto}, {
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_NestedFieldMask_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_util_converter::testing::_NestedFieldMask_default_instance_;
    new (ptr) ::proto_util_converter::testing::NestedFieldMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_util_converter::testing::NestedFieldMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NestedFieldMask_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NestedFieldMask_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto}, {
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::NestedFieldMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::NestedFieldMask, data_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::NestedFieldMask, single_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::NestedFieldMask, repeated_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, id_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, single_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, repeated_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTest, nested_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, single_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, multiple_mask_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, snake_camel_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, empty_field_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, apiary_format1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, apiary_format2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, apiary_format3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key4_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskTestCases, map_key5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::FieldMaskWrapper, mask_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto_util_converter::testing::NestedFieldMask)},
  { 8, -1, sizeof(::proto_util_converter::testing::FieldMaskTest)},
  { 17, -1, sizeof(::proto_util_converter::testing::FieldMaskTestCases)},
  { 34, -1, sizeof(::proto_util_converter::testing::FieldMaskWrapper)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_NestedFieldMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_FieldMaskTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_FieldMaskTestCases_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_util_converter::testing::_FieldMaskWrapper_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7google/protobuf/util/internal/testdata"
  "/field_mask.proto\022\034proto_util_converter."
  "testing\032 google/protobuf/field_mask.prot"
  "o\"\203\001\n\017NestedFieldMask\022\014\n\004data\030\001 \001(\t\022/\n\013s"
  "ingle_mask\030\002 \001(\0132\032.google.protobuf.Field"
  "Mask\0221\n\rrepeated_mask\030\003 \003(\0132\032.google.pro"
  "tobuf.FieldMask\"\303\001\n\rFieldMaskTest\022\n\n\002id\030"
  "\001 \001(\t\022/\n\013single_mask\030\002 \001(\0132\032.google.prot"
  "obuf.FieldMask\0221\n\rrepeated_mask\030\003 \003(\0132\032."
  "google.protobuf.FieldMask\022B\n\013nested_mask"
  "\030\004 \003(\0132-.proto_util_converter.testing.Ne"
  "stedFieldMask\"\314\006\n\022FieldMaskTestCases\022C\n\013"
  "single_mask\030\001 \001(\0132..proto_util_converter"
  ".testing.FieldMaskWrapper\022E\n\rmultiple_ma"
  "sk\030\002 \001(\0132..proto_util_converter.testing."
  "FieldMaskWrapper\022C\n\013snake_camel\030\003 \001(\0132.."
  "proto_util_converter.testing.FieldMaskWr"
  "apper\022C\n\013empty_field\030\004 \001(\0132..proto_util_"
  "converter.testing.FieldMaskWrapper\022F\n\016ap"
  "iary_format1\030\005 \001(\0132..proto_util_converte"
  "r.testing.FieldMaskWrapper\022F\n\016apiary_for"
  "mat2\030\006 \001(\0132..proto_util_converter.testin"
  "g.FieldMaskWrapper\022F\n\016apiary_format3\030\007 \001"
  "(\0132..proto_util_converter.testing.FieldM"
  "askWrapper\022@\n\010map_key1\030\010 \001(\0132..proto_uti"
  "l_converter.testing.FieldMaskWrapper\022@\n\010"
  "map_key2\030\t \001(\0132..proto_util_converter.te"
  "sting.FieldMaskWrapper\022@\n\010map_key3\030\n \001(\013"
  "2..proto_util_converter.testing.FieldMas"
  "kWrapper\022@\n\010map_key4\030\013 \001(\0132..proto_util_"
  "converter.testing.FieldMaskWrapper\022@\n\010ma"
  "p_key5\030\014 \001(\0132..proto_util_converter.test"
  "ing.FieldMaskWrapper\"<\n\020FieldMaskWrapper"
  "\022(\n\004mask\030\001 \001(\0132\032.google.protobuf.FieldMa"
  "sk2\202\001\n\024FieldMaskTestService\022j\n\004Call\0220.pr"
  "oto_util_converter.testing.FieldMaskTest"
  "Cases\0320.proto_util_converter.testing.Fie"
  "ldMaskTestCasesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_sccs[4] = {
  &scc_info_FieldMaskTest_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base,
  &scc_info_FieldMaskTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base,
  &scc_info_FieldMaskWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base,
  &scc_info_NestedFieldMask_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_once;
static bool descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto = {
  &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_initialized, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto, "google/protobuf/util/internal/testdata/field_mask.proto", 1503,
  &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_sccs, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto, 4, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto, file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto), true);
namespace proto_util_converter {
namespace testing {

// ===================================================================

void NestedFieldMask::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_NestedFieldMask_default_instance_._instance.get_mutable()->single_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class NestedFieldMask::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FieldMask& single_mask(const NestedFieldMask* msg);
};

const PROTOBUF_NAMESPACE_ID::FieldMask&
NestedFieldMask::_Internal::single_mask(const NestedFieldMask* msg) {
  return *msg->single_mask_;
}
void NestedFieldMask::clear_single_mask() {
  if (GetArenaNoVirtual() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
}
void NestedFieldMask::clear_repeated_mask() {
  repeated_mask_.Clear();
}
NestedFieldMask::NestedFieldMask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.NestedFieldMask)
}
NestedFieldMask::NestedFieldMask(const NestedFieldMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      repeated_mask_(from.repeated_mask_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_single_mask()) {
    single_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.single_mask_);
  } else {
    single_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.NestedFieldMask)
}

void NestedFieldMask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NestedFieldMask_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  single_mask_ = nullptr;
}

NestedFieldMask::~NestedFieldMask() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.NestedFieldMask)
  SharedDtor();
}

void NestedFieldMask::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete single_mask_;
}

void NestedFieldMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NestedFieldMask& NestedFieldMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NestedFieldMask_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base);
  return *internal_default_instance();
}


void NestedFieldMask::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.NestedFieldMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_mask_.Clear();
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NestedFieldMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_data(), ptr, ctx, "proto_util_converter.testing.NestedFieldMask.data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask single_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_single_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.FieldMask repeated_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_repeated_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NestedFieldMask::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.NestedFieldMask)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.NestedFieldMask.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask single_mask = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_single_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.FieldMask repeated_mask = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_repeated_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.NestedFieldMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.NestedFieldMask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NestedFieldMask::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.NestedFieldMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.NestedFieldMask.data");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->has_single_mask()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::single_mask(this), output);
  }

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_mask_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->repeated_mask(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.NestedFieldMask)
}

::PROTOBUF_NAMESPACE_ID::uint8* NestedFieldMask::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.NestedFieldMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.NestedFieldMask.data");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->has_single_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::single_mask(this), target);
  }

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_mask_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->repeated_mask(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.NestedFieldMask)
  return target;
}

size_t NestedFieldMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.NestedFieldMask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_mask_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->repeated_mask(static_cast<int>(i)));
    }
  }

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->has_single_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_mask_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NestedFieldMask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.NestedFieldMask)
  GOOGLE_DCHECK_NE(&from, this);
  const NestedFieldMask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NestedFieldMask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.NestedFieldMask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.NestedFieldMask)
    MergeFrom(*source);
  }
}

void NestedFieldMask::MergeFrom(const NestedFieldMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.NestedFieldMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_mask_.MergeFrom(from.repeated_mask_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_single_mask()) {
    mutable_single_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from.single_mask());
  }
}

void NestedFieldMask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.NestedFieldMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedFieldMask::CopyFrom(const NestedFieldMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.NestedFieldMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedFieldMask::IsInitialized() const {
  return true;
}

void NestedFieldMask::InternalSwap(NestedFieldMask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&repeated_mask_)->InternalSwap(CastToBase(&other->repeated_mask_));
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(single_mask_, other->single_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NestedFieldMask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMaskTest::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_FieldMaskTest_default_instance_._instance.get_mutable()->single_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class FieldMaskTest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FieldMask& single_mask(const FieldMaskTest* msg);
};

const PROTOBUF_NAMESPACE_ID::FieldMask&
FieldMaskTest::_Internal::single_mask(const FieldMaskTest* msg) {
  return *msg->single_mask_;
}
void FieldMaskTest::clear_single_mask() {
  if (GetArenaNoVirtual() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
}
void FieldMaskTest::clear_repeated_mask() {
  repeated_mask_.Clear();
}
FieldMaskTest::FieldMaskTest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.FieldMaskTest)
}
FieldMaskTest::FieldMaskTest(const FieldMaskTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      repeated_mask_(from.repeated_mask_),
      nested_mask_(from.nested_mask_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_single_mask()) {
    single_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.single_mask_);
  } else {
    single_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.FieldMaskTest)
}

void FieldMaskTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMaskTest_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  single_mask_ = nullptr;
}

FieldMaskTest::~FieldMaskTest() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.FieldMaskTest)
  SharedDtor();
}

void FieldMaskTest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete single_mask_;
}

void FieldMaskTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMaskTest& FieldMaskTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMaskTest_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base);
  return *internal_default_instance();
}


void FieldMaskTest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.FieldMaskTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_mask_.Clear();
  nested_mask_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldMaskTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "proto_util_converter.testing.FieldMaskTest.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask single_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_single_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.FieldMask repeated_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_repeated_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_nested_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldMaskTest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.FieldMaskTest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto_util_converter.testing.FieldMaskTest.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask single_mask = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_single_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.FieldMask repeated_mask = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_repeated_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_nested_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.FieldMaskTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.FieldMaskTest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldMaskTest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.FieldMaskTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.FieldMaskTest.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->has_single_mask()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::single_mask(this), output);
  }

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_mask_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->repeated_mask(static_cast<int>(i)),
      output);
  }

  // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nested_mask_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->nested_mask(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.FieldMaskTest)
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMaskTest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.FieldMaskTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.FieldMaskTest.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->has_single_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::single_mask(this), target);
  }

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_mask_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->repeated_mask(static_cast<int>(i)), target);
  }

  // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nested_mask_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->nested_mask(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.FieldMaskTest)
  return target;
}

size_t FieldMaskTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.FieldMaskTest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.FieldMask repeated_mask = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_mask_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->repeated_mask(static_cast<int>(i)));
    }
  }

  // repeated .proto_util_converter.testing.NestedFieldMask nested_mask = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->nested_mask_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->nested_mask(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .google.protobuf.FieldMask single_mask = 2;
  if (this->has_single_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_mask_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMaskTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.FieldMaskTest)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMaskTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMaskTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.FieldMaskTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.FieldMaskTest)
    MergeFrom(*source);
  }
}

void FieldMaskTest::MergeFrom(const FieldMaskTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.FieldMaskTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_mask_.MergeFrom(from.repeated_mask_);
  nested_mask_.MergeFrom(from.nested_mask_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_single_mask()) {
    mutable_single_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from.single_mask());
  }
}

void FieldMaskTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.FieldMaskTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMaskTest::CopyFrom(const FieldMaskTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.FieldMaskTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMaskTest::IsInitialized() const {
  return true;
}

void FieldMaskTest::InternalSwap(FieldMaskTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&repeated_mask_)->InternalSwap(CastToBase(&other->repeated_mask_));
  CastToBase(&nested_mask_)->InternalSwap(CastToBase(&other->nested_mask_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(single_mask_, other->single_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMaskTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMaskTestCases::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->single_mask_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->multiple_mask_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->snake_camel_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->empty_field_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->apiary_format1_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->apiary_format2_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->apiary_format3_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->map_key1_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->map_key2_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->map_key3_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->map_key4_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
  ::proto_util_converter::testing::_FieldMaskTestCases_default_instance_._instance.get_mutable()->map_key5_ = const_cast< ::proto_util_converter::testing::FieldMaskWrapper*>(
      ::proto_util_converter::testing::FieldMaskWrapper::internal_default_instance());
}
class FieldMaskTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::FieldMaskWrapper& single_mask(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& multiple_mask(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& snake_camel(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& empty_field(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format1(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format2(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& apiary_format3(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key1(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key2(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key3(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key4(const FieldMaskTestCases* msg);
  static const ::proto_util_converter::testing::FieldMaskWrapper& map_key5(const FieldMaskTestCases* msg);
};

const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::single_mask(const FieldMaskTestCases* msg) {
  return *msg->single_mask_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::multiple_mask(const FieldMaskTestCases* msg) {
  return *msg->multiple_mask_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::snake_camel(const FieldMaskTestCases* msg) {
  return *msg->snake_camel_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::empty_field(const FieldMaskTestCases* msg) {
  return *msg->empty_field_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::apiary_format1(const FieldMaskTestCases* msg) {
  return *msg->apiary_format1_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::apiary_format2(const FieldMaskTestCases* msg) {
  return *msg->apiary_format2_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::apiary_format3(const FieldMaskTestCases* msg) {
  return *msg->apiary_format3_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key1(const FieldMaskTestCases* msg) {
  return *msg->map_key1_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key2(const FieldMaskTestCases* msg) {
  return *msg->map_key2_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key3(const FieldMaskTestCases* msg) {
  return *msg->map_key3_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key4(const FieldMaskTestCases* msg) {
  return *msg->map_key4_;
}
const ::proto_util_converter::testing::FieldMaskWrapper&
FieldMaskTestCases::_Internal::map_key5(const FieldMaskTestCases* msg) {
  return *msg->map_key5_;
}
FieldMaskTestCases::FieldMaskTestCases()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.FieldMaskTestCases)
}
FieldMaskTestCases::FieldMaskTestCases(const FieldMaskTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_single_mask()) {
    single_mask_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.single_mask_);
  } else {
    single_mask_ = nullptr;
  }
  if (from.has_multiple_mask()) {
    multiple_mask_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.multiple_mask_);
  } else {
    multiple_mask_ = nullptr;
  }
  if (from.has_snake_camel()) {
    snake_camel_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.snake_camel_);
  } else {
    snake_camel_ = nullptr;
  }
  if (from.has_empty_field()) {
    empty_field_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.empty_field_);
  } else {
    empty_field_ = nullptr;
  }
  if (from.has_apiary_format1()) {
    apiary_format1_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.apiary_format1_);
  } else {
    apiary_format1_ = nullptr;
  }
  if (from.has_apiary_format2()) {
    apiary_format2_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.apiary_format2_);
  } else {
    apiary_format2_ = nullptr;
  }
  if (from.has_apiary_format3()) {
    apiary_format3_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.apiary_format3_);
  } else {
    apiary_format3_ = nullptr;
  }
  if (from.has_map_key1()) {
    map_key1_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key1_);
  } else {
    map_key1_ = nullptr;
  }
  if (from.has_map_key2()) {
    map_key2_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key2_);
  } else {
    map_key2_ = nullptr;
  }
  if (from.has_map_key3()) {
    map_key3_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key3_);
  } else {
    map_key3_ = nullptr;
  }
  if (from.has_map_key4()) {
    map_key4_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key4_);
  } else {
    map_key4_ = nullptr;
  }
  if (from.has_map_key5()) {
    map_key5_ = new ::proto_util_converter::testing::FieldMaskWrapper(*from.map_key5_);
  } else {
    map_key5_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.FieldMaskTestCases)
}

void FieldMaskTestCases::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMaskTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base);
  ::memset(&single_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_key5_) -
      reinterpret_cast<char*>(&single_mask_)) + sizeof(map_key5_));
}

FieldMaskTestCases::~FieldMaskTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.FieldMaskTestCases)
  SharedDtor();
}

void FieldMaskTestCases::SharedDtor() {
  if (this != internal_default_instance()) delete single_mask_;
  if (this != internal_default_instance()) delete multiple_mask_;
  if (this != internal_default_instance()) delete snake_camel_;
  if (this != internal_default_instance()) delete empty_field_;
  if (this != internal_default_instance()) delete apiary_format1_;
  if (this != internal_default_instance()) delete apiary_format2_;
  if (this != internal_default_instance()) delete apiary_format3_;
  if (this != internal_default_instance()) delete map_key1_;
  if (this != internal_default_instance()) delete map_key2_;
  if (this != internal_default_instance()) delete map_key3_;
  if (this != internal_default_instance()) delete map_key4_;
  if (this != internal_default_instance()) delete map_key5_;
}

void FieldMaskTestCases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMaskTestCases& FieldMaskTestCases::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMaskTestCases_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base);
  return *internal_default_instance();
}


void FieldMaskTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.FieldMaskTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && single_mask_ != nullptr) {
    delete single_mask_;
  }
  single_mask_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multiple_mask_ != nullptr) {
    delete multiple_mask_;
  }
  multiple_mask_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && snake_camel_ != nullptr) {
    delete snake_camel_;
  }
  snake_camel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && empty_field_ != nullptr) {
    delete empty_field_;
  }
  empty_field_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && apiary_format1_ != nullptr) {
    delete apiary_format1_;
  }
  apiary_format1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && apiary_format2_ != nullptr) {
    delete apiary_format2_;
  }
  apiary_format2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && apiary_format3_ != nullptr) {
    delete apiary_format3_;
  }
  apiary_format3_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_key1_ != nullptr) {
    delete map_key1_;
  }
  map_key1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_key2_ != nullptr) {
    delete map_key2_;
  }
  map_key2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_key3_ != nullptr) {
    delete map_key3_;
  }
  map_key3_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_key4_ != nullptr) {
    delete map_key4_;
  }
  map_key4_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_key5_ != nullptr) {
    delete map_key5_;
  }
  map_key5_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldMaskTestCases::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_single_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_multiple_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_snake_camel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_empty_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_apiary_format1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_apiary_format2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_apiary_format3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_map_key1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_map_key2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_map_key3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_map_key4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_map_key5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldMaskTestCases::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.FieldMaskTestCases)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_single_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multiple_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_snake_camel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apiary_format1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apiary_format2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apiary_format3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_key1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_key2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_key3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_key4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map_key5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.FieldMaskTestCases)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.FieldMaskTestCases)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldMaskTestCases::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.FieldMaskTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
  if (this->has_single_mask()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::single_mask(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
  if (this->has_multiple_mask()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::multiple_mask(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
  if (this->has_snake_camel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::snake_camel(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
  if (this->has_empty_field()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::empty_field(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
  if (this->has_apiary_format1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::apiary_format1(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
  if (this->has_apiary_format2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::apiary_format2(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
  if (this->has_apiary_format3()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::apiary_format3(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
  if (this->has_map_key1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::map_key1(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
  if (this->has_map_key2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::map_key2(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
  if (this->has_map_key3()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::map_key3(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
  if (this->has_map_key4()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::map_key4(this), output);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
  if (this->has_map_key5()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::map_key5(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.FieldMaskTestCases)
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMaskTestCases::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.FieldMaskTestCases)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
  if (this->has_single_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::single_mask(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
  if (this->has_multiple_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::multiple_mask(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
  if (this->has_snake_camel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::snake_camel(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
  if (this->has_empty_field()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::empty_field(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
  if (this->has_apiary_format1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::apiary_format1(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
  if (this->has_apiary_format2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::apiary_format2(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
  if (this->has_apiary_format3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::apiary_format3(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
  if (this->has_map_key1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::map_key1(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
  if (this->has_map_key2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::map_key2(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
  if (this->has_map_key3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::map_key3(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
  if (this->has_map_key4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::map_key4(this), target);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
  if (this->has_map_key5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::map_key5(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.FieldMaskTestCases)
  return target;
}

size_t FieldMaskTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.FieldMaskTestCases)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.FieldMaskWrapper single_mask = 1;
  if (this->has_single_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_mask_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper multiple_mask = 2;
  if (this->has_multiple_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiple_mask_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper snake_camel = 3;
  if (this->has_snake_camel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snake_camel_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper empty_field = 4;
  if (this->has_empty_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *empty_field_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format1 = 5;
  if (this->has_apiary_format1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apiary_format1_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format2 = 6;
  if (this->has_apiary_format2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apiary_format2_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper apiary_format3 = 7;
  if (this->has_apiary_format3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apiary_format3_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key1 = 8;
  if (this->has_map_key1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key1_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key2 = 9;
  if (this->has_map_key2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key2_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key3 = 10;
  if (this->has_map_key3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key3_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key4 = 11;
  if (this->has_map_key4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key4_);
  }

  // .proto_util_converter.testing.FieldMaskWrapper map_key5 = 12;
  if (this->has_map_key5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_key5_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMaskTestCases::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.FieldMaskTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMaskTestCases* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMaskTestCases>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.FieldMaskTestCases)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.FieldMaskTestCases)
    MergeFrom(*source);
  }
}

void FieldMaskTestCases::MergeFrom(const FieldMaskTestCases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.FieldMaskTestCases)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_single_mask()) {
    mutable_single_mask()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.single_mask());
  }
  if (from.has_multiple_mask()) {
    mutable_multiple_mask()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.multiple_mask());
  }
  if (from.has_snake_camel()) {
    mutable_snake_camel()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.snake_camel());
  }
  if (from.has_empty_field()) {
    mutable_empty_field()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.empty_field());
  }
  if (from.has_apiary_format1()) {
    mutable_apiary_format1()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.apiary_format1());
  }
  if (from.has_apiary_format2()) {
    mutable_apiary_format2()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.apiary_format2());
  }
  if (from.has_apiary_format3()) {
    mutable_apiary_format3()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.apiary_format3());
  }
  if (from.has_map_key1()) {
    mutable_map_key1()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.map_key1());
  }
  if (from.has_map_key2()) {
    mutable_map_key2()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.map_key2());
  }
  if (from.has_map_key3()) {
    mutable_map_key3()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.map_key3());
  }
  if (from.has_map_key4()) {
    mutable_map_key4()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.map_key4());
  }
  if (from.has_map_key5()) {
    mutable_map_key5()->::proto_util_converter::testing::FieldMaskWrapper::MergeFrom(from.map_key5());
  }
}

void FieldMaskTestCases::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.FieldMaskTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMaskTestCases::CopyFrom(const FieldMaskTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.FieldMaskTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMaskTestCases::IsInitialized() const {
  return true;
}

void FieldMaskTestCases::InternalSwap(FieldMaskTestCases* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(single_mask_, other->single_mask_);
  swap(multiple_mask_, other->multiple_mask_);
  swap(snake_camel_, other->snake_camel_);
  swap(empty_field_, other->empty_field_);
  swap(apiary_format1_, other->apiary_format1_);
  swap(apiary_format2_, other->apiary_format2_);
  swap(apiary_format3_, other->apiary_format3_);
  swap(map_key1_, other->map_key1_);
  swap(map_key2_, other->map_key2_);
  swap(map_key3_, other->map_key3_);
  swap(map_key4_, other->map_key4_);
  swap(map_key5_, other->map_key5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMaskTestCases::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMaskWrapper::InitAsDefaultInstance() {
  ::proto_util_converter::testing::_FieldMaskWrapper_default_instance_._instance.get_mutable()->mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class FieldMaskWrapper::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FieldMask& mask(const FieldMaskWrapper* msg);
};

const PROTOBUF_NAMESPACE_ID::FieldMask&
FieldMaskWrapper::_Internal::mask(const FieldMaskWrapper* msg) {
  return *msg->mask_;
}
void FieldMaskWrapper::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
FieldMaskWrapper::FieldMaskWrapper()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_util_converter.testing.FieldMaskWrapper)
}
FieldMaskWrapper::FieldMaskWrapper(const FieldMaskWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mask()) {
    mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.FieldMaskWrapper)
}

void FieldMaskWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMaskWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base);
  mask_ = nullptr;
}

FieldMaskWrapper::~FieldMaskWrapper() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.FieldMaskWrapper)
  SharedDtor();
}

void FieldMaskWrapper::SharedDtor() {
  if (this != internal_default_instance()) delete mask_;
}

void FieldMaskWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMaskWrapper& FieldMaskWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMaskWrapper_google_2fprotobuf_2futil_2finternal_2ftestdata_2ffield_5fmask_2eproto.base);
  return *internal_default_instance();
}


void FieldMaskWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.FieldMaskWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldMaskWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FieldMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldMaskWrapper::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_util_converter.testing.FieldMaskWrapper)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.FieldMask mask = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_util_converter.testing.FieldMaskWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_util_converter.testing.FieldMaskWrapper)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldMaskWrapper::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_util_converter.testing.FieldMaskWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FieldMask mask = 1;
  if (this->has_mask()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_util_converter.testing.FieldMaskWrapper)
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMaskWrapper::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.FieldMaskWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FieldMask mask = 1;
  if (this->has_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.FieldMaskWrapper)
  return target;
}

size_t FieldMaskWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.FieldMaskWrapper)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FieldMask mask = 1;
  if (this->has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMaskWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_util_converter.testing.FieldMaskWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMaskWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMaskWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_util_converter.testing.FieldMaskWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_util_converter.testing.FieldMaskWrapper)
    MergeFrom(*source);
  }
}

void FieldMaskWrapper::MergeFrom(const FieldMaskWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.FieldMaskWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mask()) {
    mutable_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from.mask());
  }
}

void FieldMaskWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_util_converter.testing.FieldMaskWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMaskWrapper::CopyFrom(const FieldMaskWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.FieldMaskWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMaskWrapper::IsInitialized() const {
  return true;
}

void FieldMaskWrapper::InternalSwap(FieldMaskWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mask_, other->mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMaskWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::NestedFieldMask* Arena::CreateMaybeMessage< ::proto_util_converter::testing::NestedFieldMask >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::NestedFieldMask >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::FieldMaskTest* Arena::CreateMaybeMessage< ::proto_util_converter::testing::FieldMaskTest >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::FieldMaskTest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::FieldMaskTestCases* Arena::CreateMaybeMessage< ::proto_util_converter::testing::FieldMaskTestCases >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::FieldMaskTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::FieldMaskWrapper* Arena::CreateMaybeMessage< ::proto_util_converter::testing::FieldMaskWrapper >(Arena* arena) {
  return Arena::CreateInternal< ::proto_util_converter::testing::FieldMaskWrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
