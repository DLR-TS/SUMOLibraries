// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
namespace proto_util_converter {
namespace testing {
class Dummy;
class DummyDefaultTypeInternal;
extern DummyDefaultTypeInternal _Dummy_default_instance_;
class ListValueWrapper;
class ListValueWrapperDefaultTypeInternal;
extern ListValueWrapperDefaultTypeInternal _ListValueWrapper_default_instance_;
class MapOfStruct;
class MapOfStructDefaultTypeInternal;
extern MapOfStructDefaultTypeInternal _MapOfStruct_default_instance_;
class MapOfStruct_ListvalueMapEntry_DoNotUse;
class MapOfStruct_ListvalueMapEntry_DoNotUseDefaultTypeInternal;
extern MapOfStruct_ListvalueMapEntry_DoNotUseDefaultTypeInternal _MapOfStruct_ListvalueMapEntry_DoNotUse_default_instance_;
class MapOfStruct_StructMapEntry_DoNotUse;
class MapOfStruct_StructMapEntry_DoNotUseDefaultTypeInternal;
extern MapOfStruct_StructMapEntry_DoNotUseDefaultTypeInternal _MapOfStruct_StructMapEntry_DoNotUse_default_instance_;
class MapOfStruct_ValueMapEntry_DoNotUse;
class MapOfStruct_ValueMapEntry_DoNotUseDefaultTypeInternal;
extern MapOfStruct_ValueMapEntry_DoNotUseDefaultTypeInternal _MapOfStruct_ValueMapEntry_DoNotUse_default_instance_;
class RepeatedListValueWrapper;
class RepeatedListValueWrapperDefaultTypeInternal;
extern RepeatedListValueWrapperDefaultTypeInternal _RepeatedListValueWrapper_default_instance_;
class RepeatedValueWrapper;
class RepeatedValueWrapperDefaultTypeInternal;
extern RepeatedValueWrapperDefaultTypeInternal _RepeatedValueWrapper_default_instance_;
class StructTestCases;
class StructTestCasesDefaultTypeInternal;
extern StructTestCasesDefaultTypeInternal _StructTestCases_default_instance_;
class StructType;
class StructTypeDefaultTypeInternal;
extern StructTypeDefaultTypeInternal _StructType_default_instance_;
class StructWrapper;
class StructWrapperDefaultTypeInternal;
extern StructWrapperDefaultTypeInternal _StructWrapper_default_instance_;
class ValueWrapper;
class ValueWrapperDefaultTypeInternal;
extern ValueWrapperDefaultTypeInternal _ValueWrapper_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_util_converter::testing::Dummy* Arena::CreateMaybeMessage<::proto_util_converter::testing::Dummy>(Arena*);
template<> ::proto_util_converter::testing::ListValueWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::ListValueWrapper>(Arena*);
template<> ::proto_util_converter::testing::MapOfStruct* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOfStruct>(Arena*);
template<> ::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse* Arena::CreateMaybeMessage<::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse>(Arena*);
template<> ::proto_util_converter::testing::RepeatedListValueWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::RepeatedListValueWrapper>(Arena*);
template<> ::proto_util_converter::testing::RepeatedValueWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::RepeatedValueWrapper>(Arena*);
template<> ::proto_util_converter::testing::StructTestCases* Arena::CreateMaybeMessage<::proto_util_converter::testing::StructTestCases>(Arena*);
template<> ::proto_util_converter::testing::StructType* Arena::CreateMaybeMessage<::proto_util_converter::testing::StructType>(Arena*);
template<> ::proto_util_converter::testing::StructWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(Arena*);
template<> ::proto_util_converter::testing::ValueWrapper* Arena::CreateMaybeMessage<::proto_util_converter::testing::ValueWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_util_converter {
namespace testing {

// ===================================================================

class StructTestCases :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.StructTestCases) */ {
 public:
  StructTestCases();
  virtual ~StructTestCases();

  StructTestCases(const StructTestCases& from);
  StructTestCases(StructTestCases&& from) noexcept
    : StructTestCases() {
    *this = ::std::move(from);
  }

  inline StructTestCases& operator=(const StructTestCases& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructTestCases& operator=(StructTestCases&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructTestCases& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructTestCases* internal_default_instance() {
    return reinterpret_cast<const StructTestCases*>(
               &_StructTestCases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StructTestCases& a, StructTestCases& b) {
    a.Swap(&b);
  }
  inline void Swap(StructTestCases* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructTestCases* New() const final {
    return CreateMaybeMessage<StructTestCases>(nullptr);
  }

  StructTestCases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructTestCases>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructTestCases& from);
  void MergeFrom(const StructTestCases& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructTestCases* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.StructTestCases";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyValueFieldNumber = 1,
    kEmptyValue2FieldNumber = 2,
    kNullValueFieldNumber = 3,
    kSimpleStructFieldNumber = 4,
    kLongerStructFieldNumber = 5,
    kStructWithNestedStructFieldNumber = 6,
    kStructWithNestedListFieldNumber = 7,
    kStructWithListOfNullsFieldNumber = 8,
    kStructWithListOfListsFieldNumber = 9,
    kStructWithListOfStructsFieldNumber = 10,
    kStructWithEmptyListFieldNumber = 11,
    kStructWithListWithEmptyStructFieldNumber = 12,
    kTopLevelStructFieldNumber = 13,
    kTopLevelStructWithEmptyListFieldNumber = 14,
    kTopLevelStructWithListWithEmptyStructFieldNumber = 15,
    kValueWrapperSimpleFieldNumber = 16,
    kValueWrapperWithStructFieldNumber = 17,
    kValueWrapperWithListFieldNumber = 18,
    kValueWrapperWithEmptyListFieldNumber = 19,
    kValueWrapperWithListWithEmptyStructFieldNumber = 20,
    kListValueWrapperFieldNumber = 21,
    kListValueWrapperWithEmptyListFieldNumber = 22,
    kListValueWrapperWithListWithEmptyStructFieldNumber = 23,
    kTopLevelValueSimpleFieldNumber = 24,
    kTopLevelValueWithStructFieldNumber = 25,
    kTopLevelValueWithListFieldNumber = 26,
    kTopLevelValueWithEmptyListFieldNumber = 27,
    kTopLevelValueWithListWithEmptyStructFieldNumber = 28,
    kTopLevelListvalueFieldNumber = 29,
    kTopLevelEmptyListvalueFieldNumber = 30,
    kTopLevelListvalueWithEmptyStructFieldNumber = 31,
    kRepeatedValueFieldNumber = 32,
    kRepeatedValueNestedListFieldNumber = 33,
    kRepeatedValueNestedList2FieldNumber = 34,
    kRepeatedValueNestedList3FieldNumber = 35,
    kRepeatedListvalueFieldNumber = 36,
    kMapOfStructFieldNumber = 37,
    kMapOfStructValueFieldNumber = 38,
    kMapOfListvalueFieldNumber = 39,
  };
  // .proto_util_converter.testing.StructWrapper empty_value = 1;
  bool has_empty_value() const;
  void clear_empty_value();
  const ::proto_util_converter::testing::StructWrapper& empty_value() const;
  ::proto_util_converter::testing::StructWrapper* release_empty_value();
  ::proto_util_converter::testing::StructWrapper* mutable_empty_value();
  void set_allocated_empty_value(::proto_util_converter::testing::StructWrapper* empty_value);

  // .proto_util_converter.testing.StructWrapper empty_value2 = 2;
  bool has_empty_value2() const;
  void clear_empty_value2();
  const ::proto_util_converter::testing::StructWrapper& empty_value2() const;
  ::proto_util_converter::testing::StructWrapper* release_empty_value2();
  ::proto_util_converter::testing::StructWrapper* mutable_empty_value2();
  void set_allocated_empty_value2(::proto_util_converter::testing::StructWrapper* empty_value2);

  // .proto_util_converter.testing.StructWrapper null_value = 3;
  bool has_null_value() const;
  void clear_null_value();
  const ::proto_util_converter::testing::StructWrapper& null_value() const;
  ::proto_util_converter::testing::StructWrapper* release_null_value();
  ::proto_util_converter::testing::StructWrapper* mutable_null_value();
  void set_allocated_null_value(::proto_util_converter::testing::StructWrapper* null_value);

  // .proto_util_converter.testing.StructWrapper simple_struct = 4;
  bool has_simple_struct() const;
  void clear_simple_struct();
  const ::proto_util_converter::testing::StructWrapper& simple_struct() const;
  ::proto_util_converter::testing::StructWrapper* release_simple_struct();
  ::proto_util_converter::testing::StructWrapper* mutable_simple_struct();
  void set_allocated_simple_struct(::proto_util_converter::testing::StructWrapper* simple_struct);

  // .proto_util_converter.testing.StructWrapper longer_struct = 5;
  bool has_longer_struct() const;
  void clear_longer_struct();
  const ::proto_util_converter::testing::StructWrapper& longer_struct() const;
  ::proto_util_converter::testing::StructWrapper* release_longer_struct();
  ::proto_util_converter::testing::StructWrapper* mutable_longer_struct();
  void set_allocated_longer_struct(::proto_util_converter::testing::StructWrapper* longer_struct);

  // .proto_util_converter.testing.StructWrapper struct_with_nested_struct = 6;
  bool has_struct_with_nested_struct() const;
  void clear_struct_with_nested_struct();
  const ::proto_util_converter::testing::StructWrapper& struct_with_nested_struct() const;
  ::proto_util_converter::testing::StructWrapper* release_struct_with_nested_struct();
  ::proto_util_converter::testing::StructWrapper* mutable_struct_with_nested_struct();
  void set_allocated_struct_with_nested_struct(::proto_util_converter::testing::StructWrapper* struct_with_nested_struct);

  // .proto_util_converter.testing.StructWrapper struct_with_nested_list = 7;
  bool has_struct_with_nested_list() const;
  void clear_struct_with_nested_list();
  const ::proto_util_converter::testing::StructWrapper& struct_with_nested_list() const;
  ::proto_util_converter::testing::StructWrapper* release_struct_with_nested_list();
  ::proto_util_converter::testing::StructWrapper* mutable_struct_with_nested_list();
  void set_allocated_struct_with_nested_list(::proto_util_converter::testing::StructWrapper* struct_with_nested_list);

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_nulls = 8;
  bool has_struct_with_list_of_nulls() const;
  void clear_struct_with_list_of_nulls();
  const ::proto_util_converter::testing::StructWrapper& struct_with_list_of_nulls() const;
  ::proto_util_converter::testing::StructWrapper* release_struct_with_list_of_nulls();
  ::proto_util_converter::testing::StructWrapper* mutable_struct_with_list_of_nulls();
  void set_allocated_struct_with_list_of_nulls(::proto_util_converter::testing::StructWrapper* struct_with_list_of_nulls);

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_lists = 9;
  bool has_struct_with_list_of_lists() const;
  void clear_struct_with_list_of_lists();
  const ::proto_util_converter::testing::StructWrapper& struct_with_list_of_lists() const;
  ::proto_util_converter::testing::StructWrapper* release_struct_with_list_of_lists();
  ::proto_util_converter::testing::StructWrapper* mutable_struct_with_list_of_lists();
  void set_allocated_struct_with_list_of_lists(::proto_util_converter::testing::StructWrapper* struct_with_list_of_lists);

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_structs = 10;
  bool has_struct_with_list_of_structs() const;
  void clear_struct_with_list_of_structs();
  const ::proto_util_converter::testing::StructWrapper& struct_with_list_of_structs() const;
  ::proto_util_converter::testing::StructWrapper* release_struct_with_list_of_structs();
  ::proto_util_converter::testing::StructWrapper* mutable_struct_with_list_of_structs();
  void set_allocated_struct_with_list_of_structs(::proto_util_converter::testing::StructWrapper* struct_with_list_of_structs);

  // .proto_util_converter.testing.StructWrapper struct_with_empty_list = 11;
  bool has_struct_with_empty_list() const;
  void clear_struct_with_empty_list();
  const ::proto_util_converter::testing::StructWrapper& struct_with_empty_list() const;
  ::proto_util_converter::testing::StructWrapper* release_struct_with_empty_list();
  ::proto_util_converter::testing::StructWrapper* mutable_struct_with_empty_list();
  void set_allocated_struct_with_empty_list(::proto_util_converter::testing::StructWrapper* struct_with_empty_list);

  // .proto_util_converter.testing.StructWrapper struct_with_list_with_empty_struct = 12;
  bool has_struct_with_list_with_empty_struct() const;
  void clear_struct_with_list_with_empty_struct();
  const ::proto_util_converter::testing::StructWrapper& struct_with_list_with_empty_struct() const;
  ::proto_util_converter::testing::StructWrapper* release_struct_with_list_with_empty_struct();
  ::proto_util_converter::testing::StructWrapper* mutable_struct_with_list_with_empty_struct();
  void set_allocated_struct_with_list_with_empty_struct(::proto_util_converter::testing::StructWrapper* struct_with_list_with_empty_struct);

  // .google.protobuf.Struct top_level_struct = 13;
  bool has_top_level_struct() const;
  void clear_top_level_struct();
  const PROTOBUF_NAMESPACE_ID::Struct& top_level_struct() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_top_level_struct();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_top_level_struct();
  void set_allocated_top_level_struct(PROTOBUF_NAMESPACE_ID::Struct* top_level_struct);

  // .google.protobuf.Struct top_level_struct_with_empty_list = 14;
  bool has_top_level_struct_with_empty_list() const;
  void clear_top_level_struct_with_empty_list();
  const PROTOBUF_NAMESPACE_ID::Struct& top_level_struct_with_empty_list() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_top_level_struct_with_empty_list();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_top_level_struct_with_empty_list();
  void set_allocated_top_level_struct_with_empty_list(PROTOBUF_NAMESPACE_ID::Struct* top_level_struct_with_empty_list);

  // .google.protobuf.Struct top_level_struct_with_list_with_empty_struct = 15;
  bool has_top_level_struct_with_list_with_empty_struct() const;
  void clear_top_level_struct_with_list_with_empty_struct();
  const PROTOBUF_NAMESPACE_ID::Struct& top_level_struct_with_list_with_empty_struct() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_top_level_struct_with_list_with_empty_struct();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_top_level_struct_with_list_with_empty_struct();
  void set_allocated_top_level_struct_with_list_with_empty_struct(PROTOBUF_NAMESPACE_ID::Struct* top_level_struct_with_list_with_empty_struct);

  // .proto_util_converter.testing.ValueWrapper value_wrapper_simple = 16;
  bool has_value_wrapper_simple() const;
  void clear_value_wrapper_simple();
  const ::proto_util_converter::testing::ValueWrapper& value_wrapper_simple() const;
  ::proto_util_converter::testing::ValueWrapper* release_value_wrapper_simple();
  ::proto_util_converter::testing::ValueWrapper* mutable_value_wrapper_simple();
  void set_allocated_value_wrapper_simple(::proto_util_converter::testing::ValueWrapper* value_wrapper_simple);

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_struct = 17;
  bool has_value_wrapper_with_struct() const;
  void clear_value_wrapper_with_struct();
  const ::proto_util_converter::testing::ValueWrapper& value_wrapper_with_struct() const;
  ::proto_util_converter::testing::ValueWrapper* release_value_wrapper_with_struct();
  ::proto_util_converter::testing::ValueWrapper* mutable_value_wrapper_with_struct();
  void set_allocated_value_wrapper_with_struct(::proto_util_converter::testing::ValueWrapper* value_wrapper_with_struct);

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_list = 18;
  bool has_value_wrapper_with_list() const;
  void clear_value_wrapper_with_list();
  const ::proto_util_converter::testing::ValueWrapper& value_wrapper_with_list() const;
  ::proto_util_converter::testing::ValueWrapper* release_value_wrapper_with_list();
  ::proto_util_converter::testing::ValueWrapper* mutable_value_wrapper_with_list();
  void set_allocated_value_wrapper_with_list(::proto_util_converter::testing::ValueWrapper* value_wrapper_with_list);

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_empty_list = 19;
  bool has_value_wrapper_with_empty_list() const;
  void clear_value_wrapper_with_empty_list();
  const ::proto_util_converter::testing::ValueWrapper& value_wrapper_with_empty_list() const;
  ::proto_util_converter::testing::ValueWrapper* release_value_wrapper_with_empty_list();
  ::proto_util_converter::testing::ValueWrapper* mutable_value_wrapper_with_empty_list();
  void set_allocated_value_wrapper_with_empty_list(::proto_util_converter::testing::ValueWrapper* value_wrapper_with_empty_list);

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_list_with_empty_struct = 20;
  bool has_value_wrapper_with_list_with_empty_struct() const;
  void clear_value_wrapper_with_list_with_empty_struct();
  const ::proto_util_converter::testing::ValueWrapper& value_wrapper_with_list_with_empty_struct() const;
  ::proto_util_converter::testing::ValueWrapper* release_value_wrapper_with_list_with_empty_struct();
  ::proto_util_converter::testing::ValueWrapper* mutable_value_wrapper_with_list_with_empty_struct();
  void set_allocated_value_wrapper_with_list_with_empty_struct(::proto_util_converter::testing::ValueWrapper* value_wrapper_with_list_with_empty_struct);

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper = 21;
  bool has_list_value_wrapper() const;
  void clear_list_value_wrapper();
  const ::proto_util_converter::testing::ListValueWrapper& list_value_wrapper() const;
  ::proto_util_converter::testing::ListValueWrapper* release_list_value_wrapper();
  ::proto_util_converter::testing::ListValueWrapper* mutable_list_value_wrapper();
  void set_allocated_list_value_wrapper(::proto_util_converter::testing::ListValueWrapper* list_value_wrapper);

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_empty_list = 22;
  bool has_list_value_wrapper_with_empty_list() const;
  void clear_list_value_wrapper_with_empty_list();
  const ::proto_util_converter::testing::ListValueWrapper& list_value_wrapper_with_empty_list() const;
  ::proto_util_converter::testing::ListValueWrapper* release_list_value_wrapper_with_empty_list();
  ::proto_util_converter::testing::ListValueWrapper* mutable_list_value_wrapper_with_empty_list();
  void set_allocated_list_value_wrapper_with_empty_list(::proto_util_converter::testing::ListValueWrapper* list_value_wrapper_with_empty_list);

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_list_with_empty_struct = 23;
  bool has_list_value_wrapper_with_list_with_empty_struct() const;
  void clear_list_value_wrapper_with_list_with_empty_struct();
  const ::proto_util_converter::testing::ListValueWrapper& list_value_wrapper_with_list_with_empty_struct() const;
  ::proto_util_converter::testing::ListValueWrapper* release_list_value_wrapper_with_list_with_empty_struct();
  ::proto_util_converter::testing::ListValueWrapper* mutable_list_value_wrapper_with_list_with_empty_struct();
  void set_allocated_list_value_wrapper_with_list_with_empty_struct(::proto_util_converter::testing::ListValueWrapper* list_value_wrapper_with_list_with_empty_struct);

  // .google.protobuf.Value top_level_value_simple = 24;
  bool has_top_level_value_simple() const;
  void clear_top_level_value_simple();
  const PROTOBUF_NAMESPACE_ID::Value& top_level_value_simple() const;
  PROTOBUF_NAMESPACE_ID::Value* release_top_level_value_simple();
  PROTOBUF_NAMESPACE_ID::Value* mutable_top_level_value_simple();
  void set_allocated_top_level_value_simple(PROTOBUF_NAMESPACE_ID::Value* top_level_value_simple);

  // .google.protobuf.Value top_level_value_with_struct = 25;
  bool has_top_level_value_with_struct() const;
  void clear_top_level_value_with_struct();
  const PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_struct() const;
  PROTOBUF_NAMESPACE_ID::Value* release_top_level_value_with_struct();
  PROTOBUF_NAMESPACE_ID::Value* mutable_top_level_value_with_struct();
  void set_allocated_top_level_value_with_struct(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_struct);

  // .google.protobuf.Value top_level_value_with_list = 26;
  bool has_top_level_value_with_list() const;
  void clear_top_level_value_with_list();
  const PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_list() const;
  PROTOBUF_NAMESPACE_ID::Value* release_top_level_value_with_list();
  PROTOBUF_NAMESPACE_ID::Value* mutable_top_level_value_with_list();
  void set_allocated_top_level_value_with_list(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list);

  // .google.protobuf.Value top_level_value_with_empty_list = 27;
  bool has_top_level_value_with_empty_list() const;
  void clear_top_level_value_with_empty_list();
  const PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_empty_list() const;
  PROTOBUF_NAMESPACE_ID::Value* release_top_level_value_with_empty_list();
  PROTOBUF_NAMESPACE_ID::Value* mutable_top_level_value_with_empty_list();
  void set_allocated_top_level_value_with_empty_list(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_empty_list);

  // .google.protobuf.Value top_level_value_with_list_with_empty_struct = 28;
  bool has_top_level_value_with_list_with_empty_struct() const;
  void clear_top_level_value_with_list_with_empty_struct();
  const PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_list_with_empty_struct() const;
  PROTOBUF_NAMESPACE_ID::Value* release_top_level_value_with_list_with_empty_struct();
  PROTOBUF_NAMESPACE_ID::Value* mutable_top_level_value_with_list_with_empty_struct();
  void set_allocated_top_level_value_with_list_with_empty_struct(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list_with_empty_struct);

  // .google.protobuf.ListValue top_level_listvalue = 29;
  bool has_top_level_listvalue() const;
  void clear_top_level_listvalue();
  const PROTOBUF_NAMESPACE_ID::ListValue& top_level_listvalue() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_top_level_listvalue();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_top_level_listvalue();
  void set_allocated_top_level_listvalue(PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue);

  // .google.protobuf.ListValue top_level_empty_listvalue = 30;
  bool has_top_level_empty_listvalue() const;
  void clear_top_level_empty_listvalue();
  const PROTOBUF_NAMESPACE_ID::ListValue& top_level_empty_listvalue() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_top_level_empty_listvalue();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_top_level_empty_listvalue();
  void set_allocated_top_level_empty_listvalue(PROTOBUF_NAMESPACE_ID::ListValue* top_level_empty_listvalue);

  // .google.protobuf.ListValue top_level_listvalue_with_empty_struct = 31;
  bool has_top_level_listvalue_with_empty_struct() const;
  void clear_top_level_listvalue_with_empty_struct();
  const PROTOBUF_NAMESPACE_ID::ListValue& top_level_listvalue_with_empty_struct() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_top_level_listvalue_with_empty_struct();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_top_level_listvalue_with_empty_struct();
  void set_allocated_top_level_listvalue_with_empty_struct(PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue_with_empty_struct);

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value = 32;
  bool has_repeated_value() const;
  void clear_repeated_value();
  const ::proto_util_converter::testing::RepeatedValueWrapper& repeated_value() const;
  ::proto_util_converter::testing::RepeatedValueWrapper* release_repeated_value();
  ::proto_util_converter::testing::RepeatedValueWrapper* mutable_repeated_value();
  void set_allocated_repeated_value(::proto_util_converter::testing::RepeatedValueWrapper* repeated_value);

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list = 33;
  bool has_repeated_value_nested_list() const;
  void clear_repeated_value_nested_list();
  const ::proto_util_converter::testing::RepeatedValueWrapper& repeated_value_nested_list() const;
  ::proto_util_converter::testing::RepeatedValueWrapper* release_repeated_value_nested_list();
  ::proto_util_converter::testing::RepeatedValueWrapper* mutable_repeated_value_nested_list();
  void set_allocated_repeated_value_nested_list(::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list);

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list2 = 34;
  bool has_repeated_value_nested_list2() const;
  void clear_repeated_value_nested_list2();
  const ::proto_util_converter::testing::RepeatedValueWrapper& repeated_value_nested_list2() const;
  ::proto_util_converter::testing::RepeatedValueWrapper* release_repeated_value_nested_list2();
  ::proto_util_converter::testing::RepeatedValueWrapper* mutable_repeated_value_nested_list2();
  void set_allocated_repeated_value_nested_list2(::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list2);

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list3 = 35;
  bool has_repeated_value_nested_list3() const;
  void clear_repeated_value_nested_list3();
  const ::proto_util_converter::testing::RepeatedValueWrapper& repeated_value_nested_list3() const;
  ::proto_util_converter::testing::RepeatedValueWrapper* release_repeated_value_nested_list3();
  ::proto_util_converter::testing::RepeatedValueWrapper* mutable_repeated_value_nested_list3();
  void set_allocated_repeated_value_nested_list3(::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list3);

  // .proto_util_converter.testing.RepeatedListValueWrapper repeated_listvalue = 36;
  bool has_repeated_listvalue() const;
  void clear_repeated_listvalue();
  const ::proto_util_converter::testing::RepeatedListValueWrapper& repeated_listvalue() const;
  ::proto_util_converter::testing::RepeatedListValueWrapper* release_repeated_listvalue();
  ::proto_util_converter::testing::RepeatedListValueWrapper* mutable_repeated_listvalue();
  void set_allocated_repeated_listvalue(::proto_util_converter::testing::RepeatedListValueWrapper* repeated_listvalue);

  // .proto_util_converter.testing.MapOfStruct map_of_struct = 37;
  bool has_map_of_struct() const;
  void clear_map_of_struct();
  const ::proto_util_converter::testing::MapOfStruct& map_of_struct() const;
  ::proto_util_converter::testing::MapOfStruct* release_map_of_struct();
  ::proto_util_converter::testing::MapOfStruct* mutable_map_of_struct();
  void set_allocated_map_of_struct(::proto_util_converter::testing::MapOfStruct* map_of_struct);

  // .proto_util_converter.testing.MapOfStruct map_of_struct_value = 38;
  bool has_map_of_struct_value() const;
  void clear_map_of_struct_value();
  const ::proto_util_converter::testing::MapOfStruct& map_of_struct_value() const;
  ::proto_util_converter::testing::MapOfStruct* release_map_of_struct_value();
  ::proto_util_converter::testing::MapOfStruct* mutable_map_of_struct_value();
  void set_allocated_map_of_struct_value(::proto_util_converter::testing::MapOfStruct* map_of_struct_value);

  // .proto_util_converter.testing.MapOfStruct map_of_listvalue = 39;
  bool has_map_of_listvalue() const;
  void clear_map_of_listvalue();
  const ::proto_util_converter::testing::MapOfStruct& map_of_listvalue() const;
  ::proto_util_converter::testing::MapOfStruct* release_map_of_listvalue();
  ::proto_util_converter::testing::MapOfStruct* mutable_map_of_listvalue();
  void set_allocated_map_of_listvalue(::proto_util_converter::testing::MapOfStruct* map_of_listvalue);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.StructTestCases)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto_util_converter::testing::StructWrapper* empty_value_;
  ::proto_util_converter::testing::StructWrapper* empty_value2_;
  ::proto_util_converter::testing::StructWrapper* null_value_;
  ::proto_util_converter::testing::StructWrapper* simple_struct_;
  ::proto_util_converter::testing::StructWrapper* longer_struct_;
  ::proto_util_converter::testing::StructWrapper* struct_with_nested_struct_;
  ::proto_util_converter::testing::StructWrapper* struct_with_nested_list_;
  ::proto_util_converter::testing::StructWrapper* struct_with_list_of_nulls_;
  ::proto_util_converter::testing::StructWrapper* struct_with_list_of_lists_;
  ::proto_util_converter::testing::StructWrapper* struct_with_list_of_structs_;
  ::proto_util_converter::testing::StructWrapper* struct_with_empty_list_;
  ::proto_util_converter::testing::StructWrapper* struct_with_list_with_empty_struct_;
  PROTOBUF_NAMESPACE_ID::Struct* top_level_struct_;
  PROTOBUF_NAMESPACE_ID::Struct* top_level_struct_with_empty_list_;
  PROTOBUF_NAMESPACE_ID::Struct* top_level_struct_with_list_with_empty_struct_;
  ::proto_util_converter::testing::ValueWrapper* value_wrapper_simple_;
  ::proto_util_converter::testing::ValueWrapper* value_wrapper_with_struct_;
  ::proto_util_converter::testing::ValueWrapper* value_wrapper_with_list_;
  ::proto_util_converter::testing::ValueWrapper* value_wrapper_with_empty_list_;
  ::proto_util_converter::testing::ValueWrapper* value_wrapper_with_list_with_empty_struct_;
  ::proto_util_converter::testing::ListValueWrapper* list_value_wrapper_;
  ::proto_util_converter::testing::ListValueWrapper* list_value_wrapper_with_empty_list_;
  ::proto_util_converter::testing::ListValueWrapper* list_value_wrapper_with_list_with_empty_struct_;
  PROTOBUF_NAMESPACE_ID::Value* top_level_value_simple_;
  PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_struct_;
  PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list_;
  PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_empty_list_;
  PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list_with_empty_struct_;
  PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue_;
  PROTOBUF_NAMESPACE_ID::ListValue* top_level_empty_listvalue_;
  PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue_with_empty_struct_;
  ::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_;
  ::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list_;
  ::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list2_;
  ::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list3_;
  ::proto_util_converter::testing::RepeatedListValueWrapper* repeated_listvalue_;
  ::proto_util_converter::testing::MapOfStruct* map_of_struct_;
  ::proto_util_converter::testing::MapOfStruct* map_of_struct_value_;
  ::proto_util_converter::testing::MapOfStruct* map_of_listvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class StructWrapper :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.StructWrapper) */ {
 public:
  StructWrapper();
  virtual ~StructWrapper();

  StructWrapper(const StructWrapper& from);
  StructWrapper(StructWrapper&& from) noexcept
    : StructWrapper() {
    *this = ::std::move(from);
  }

  inline StructWrapper& operator=(const StructWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructWrapper& operator=(StructWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructWrapper* internal_default_instance() {
    return reinterpret_cast<const StructWrapper*>(
               &_StructWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StructWrapper& a, StructWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(StructWrapper* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructWrapper* New() const final {
    return CreateMaybeMessage<StructWrapper>(nullptr);
  }

  StructWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructWrapper& from);
  void MergeFrom(const StructWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.StructWrapper";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructFieldNumber = 1,
  };
  // .google.protobuf.Struct struct = 1;
  bool has_struct_() const;
  void clear_struct_();
  const PROTOBUF_NAMESPACE_ID::Struct& struct_() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_struct_();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_struct_();
  void set_allocated_struct_(PROTOBUF_NAMESPACE_ID::Struct* struct_);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.StructWrapper)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Struct* struct__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class ValueWrapper :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.ValueWrapper) */ {
 public:
  ValueWrapper();
  virtual ~ValueWrapper();

  ValueWrapper(const ValueWrapper& from);
  ValueWrapper(ValueWrapper&& from) noexcept
    : ValueWrapper() {
    *this = ::std::move(from);
  }

  inline ValueWrapper& operator=(const ValueWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueWrapper& operator=(ValueWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValueWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueWrapper* internal_default_instance() {
    return reinterpret_cast<const ValueWrapper*>(
               &_ValueWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ValueWrapper& a, ValueWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueWrapper* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueWrapper* New() const final {
    return CreateMaybeMessage<ValueWrapper>(nullptr);
  }

  ValueWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValueWrapper& from);
  void MergeFrom(const ValueWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.ValueWrapper";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .google.protobuf.Value value = 1;
  bool has_value() const;
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::Value& value() const;
  PROTOBUF_NAMESPACE_ID::Value* release_value();
  PROTOBUF_NAMESPACE_ID::Value* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::Value* value);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.ValueWrapper)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Value* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class RepeatedValueWrapper :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.RepeatedValueWrapper) */ {
 public:
  RepeatedValueWrapper();
  virtual ~RepeatedValueWrapper();

  RepeatedValueWrapper(const RepeatedValueWrapper& from);
  RepeatedValueWrapper(RepeatedValueWrapper&& from) noexcept
    : RepeatedValueWrapper() {
    *this = ::std::move(from);
  }

  inline RepeatedValueWrapper& operator=(const RepeatedValueWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedValueWrapper& operator=(RepeatedValueWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedValueWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedValueWrapper* internal_default_instance() {
    return reinterpret_cast<const RepeatedValueWrapper*>(
               &_RepeatedValueWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RepeatedValueWrapper& a, RepeatedValueWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedValueWrapper* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedValueWrapper* New() const final {
    return CreateMaybeMessage<RepeatedValueWrapper>(nullptr);
  }

  RepeatedValueWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedValueWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedValueWrapper& from);
  void MergeFrom(const RepeatedValueWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedValueWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.RepeatedValueWrapper";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .google.protobuf.Value values = 1;
  int values_size() const;
  void clear_values();
  PROTOBUF_NAMESPACE_ID::Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Value >*
      mutable_values();
  const PROTOBUF_NAMESPACE_ID::Value& values(int index) const;
  PROTOBUF_NAMESPACE_ID::Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.RepeatedValueWrapper)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Value > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class ListValueWrapper :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.ListValueWrapper) */ {
 public:
  ListValueWrapper();
  virtual ~ListValueWrapper();

  ListValueWrapper(const ListValueWrapper& from);
  ListValueWrapper(ListValueWrapper&& from) noexcept
    : ListValueWrapper() {
    *this = ::std::move(from);
  }

  inline ListValueWrapper& operator=(const ListValueWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValueWrapper& operator=(ListValueWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListValueWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListValueWrapper* internal_default_instance() {
    return reinterpret_cast<const ListValueWrapper*>(
               &_ListValueWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListValueWrapper& a, ListValueWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(ListValueWrapper* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListValueWrapper* New() const final {
    return CreateMaybeMessage<ListValueWrapper>(nullptr);
  }

  ListValueWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListValueWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListValueWrapper& from);
  void MergeFrom(const ListValueWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListValueWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.ListValueWrapper";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShoppingListFieldNumber = 1,
  };
  // .google.protobuf.ListValue shopping_list = 1;
  bool has_shopping_list() const;
  void clear_shopping_list();
  const PROTOBUF_NAMESPACE_ID::ListValue& shopping_list() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_shopping_list();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_shopping_list();
  void set_allocated_shopping_list(PROTOBUF_NAMESPACE_ID::ListValue* shopping_list);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.ListValueWrapper)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::ListValue* shopping_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class RepeatedListValueWrapper :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.RepeatedListValueWrapper) */ {
 public:
  RepeatedListValueWrapper();
  virtual ~RepeatedListValueWrapper();

  RepeatedListValueWrapper(const RepeatedListValueWrapper& from);
  RepeatedListValueWrapper(RepeatedListValueWrapper&& from) noexcept
    : RepeatedListValueWrapper() {
    *this = ::std::move(from);
  }

  inline RepeatedListValueWrapper& operator=(const RepeatedListValueWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedListValueWrapper& operator=(RepeatedListValueWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedListValueWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedListValueWrapper* internal_default_instance() {
    return reinterpret_cast<const RepeatedListValueWrapper*>(
               &_RepeatedListValueWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RepeatedListValueWrapper& a, RepeatedListValueWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedListValueWrapper* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedListValueWrapper* New() const final {
    return CreateMaybeMessage<RepeatedListValueWrapper>(nullptr);
  }

  RepeatedListValueWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedListValueWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedListValueWrapper& from);
  void MergeFrom(const RepeatedListValueWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedListValueWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.RepeatedListValueWrapper";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 1,
  };
  // repeated .google.protobuf.ListValue dimensions = 1;
  int dimensions_size() const;
  void clear_dimensions();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_dimensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue >*
      mutable_dimensions();
  const PROTOBUF_NAMESPACE_ID::ListValue& dimensions(int index) const;
  PROTOBUF_NAMESPACE_ID::ListValue* add_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue >&
      dimensions() const;

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.RepeatedListValueWrapper)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue > dimensions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class MapOfStruct_StructMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOfStruct_StructMapEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Struct,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOfStruct_StructMapEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Struct,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MapOfStruct_StructMapEntry_DoNotUse();
  MapOfStruct_StructMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapOfStruct_StructMapEntry_DoNotUse& other);
  static const MapOfStruct_StructMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapOfStruct_StructMapEntry_DoNotUse*>(&_MapOfStruct_StructMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapOfStruct.StructMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class MapOfStruct_ValueMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOfStruct_ValueMapEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOfStruct_ValueMapEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MapOfStruct_ValueMapEntry_DoNotUse();
  MapOfStruct_ValueMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapOfStruct_ValueMapEntry_DoNotUse& other);
  static const MapOfStruct_ValueMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapOfStruct_ValueMapEntry_DoNotUse*>(&_MapOfStruct_ValueMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapOfStruct.ValueMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class MapOfStruct_ListvalueMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOfStruct_ListvalueMapEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::ListValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MapOfStruct_ListvalueMapEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::ListValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MapOfStruct_ListvalueMapEntry_DoNotUse();
  MapOfStruct_ListvalueMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MapOfStruct_ListvalueMapEntry_DoNotUse& other);
  static const MapOfStruct_ListvalueMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MapOfStruct_ListvalueMapEntry_DoNotUse*>(&_MapOfStruct_ListvalueMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto_util_converter.testing.MapOfStruct.ListvalueMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class MapOfStruct :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.MapOfStruct) */ {
 public:
  MapOfStruct();
  virtual ~MapOfStruct();

  MapOfStruct(const MapOfStruct& from);
  MapOfStruct(MapOfStruct&& from) noexcept
    : MapOfStruct() {
    *this = ::std::move(from);
  }

  inline MapOfStruct& operator=(const MapOfStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOfStruct& operator=(MapOfStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapOfStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapOfStruct* internal_default_instance() {
    return reinterpret_cast<const MapOfStruct*>(
               &_MapOfStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MapOfStruct& a, MapOfStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOfStruct* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapOfStruct* New() const final {
    return CreateMaybeMessage<MapOfStruct>(nullptr);
  }

  MapOfStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapOfStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapOfStruct& from);
  void MergeFrom(const MapOfStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOfStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.MapOfStruct";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStructMapFieldNumber = 1,
    kValueMapFieldNumber = 2,
    kListvalueMapFieldNumber = 3,
  };
  // map<string, .google.protobuf.Struct> struct_map = 1;
  int struct_map_size() const;
  void clear_struct_map();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >&
      struct_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >*
      mutable_struct_map();

  // map<string, .google.protobuf.Value> value_map = 2;
  int value_map_size() const;
  void clear_value_map();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      value_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      mutable_value_map();

  // map<string, .google.protobuf.ListValue> listvalue_map = 3;
  int listvalue_map_size() const;
  void clear_listvalue_map();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::ListValue >&
      listvalue_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::ListValue >*
      mutable_listvalue_map();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.MapOfStruct)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapOfStruct_StructMapEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Struct,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > struct_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapOfStruct_ValueMapEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > value_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MapOfStruct_ListvalueMapEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::ListValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > listvalue_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class Dummy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Dummy) */ {
 public:
  Dummy();
  virtual ~Dummy();

  Dummy(const Dummy& from);
  Dummy(Dummy&& from) noexcept
    : Dummy() {
    *this = ::std::move(from);
  }

  inline Dummy& operator=(const Dummy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dummy& operator=(Dummy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dummy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dummy* internal_default_instance() {
    return reinterpret_cast<const Dummy*>(
               &_Dummy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Dummy& a, Dummy& b) {
    a.Swap(&b);
  }
  inline void Swap(Dummy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dummy* New() const final {
    return CreateMaybeMessage<Dummy>(nullptr);
  }

  Dummy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dummy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dummy& from);
  void MergeFrom(const Dummy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dummy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Dummy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Dummy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// -------------------------------------------------------------------

class StructType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.StructType) */ {
 public:
  StructType();
  virtual ~StructType();

  StructType(const StructType& from);
  StructType(StructType&& from) noexcept
    : StructType() {
    *this = ::std::move(from);
  }

  inline StructType& operator=(const StructType& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructType& operator=(StructType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructType* internal_default_instance() {
    return reinterpret_cast<const StructType*>(
               &_StructType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StructType& a, StructType& b) {
    a.Swap(&b);
  }
  inline void Swap(StructType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructType* New() const final {
    return CreateMaybeMessage<StructType>(nullptr);
  }

  StructType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructType& from);
  void MergeFrom(const StructType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.StructType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
    return ::descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
  };
  // .google.protobuf.Struct object = 1;
  bool has_object() const;
  void clear_object();
  const PROTOBUF_NAMESPACE_ID::Struct& object() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_object();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_object();
  void set_allocated_object(PROTOBUF_NAMESPACE_ID::Struct* object);

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.StructType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Struct* object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StructTestCases

// .proto_util_converter.testing.StructWrapper empty_value = 1;
inline bool StructTestCases::has_empty_value() const {
  return this != internal_default_instance() && empty_value_ != nullptr;
}
inline void StructTestCases::clear_empty_value() {
  if (GetArenaNoVirtual() == nullptr && empty_value_ != nullptr) {
    delete empty_value_;
  }
  empty_value_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::empty_value() const {
  const ::proto_util_converter::testing::StructWrapper* p = empty_value_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.empty_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_empty_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.empty_value)
  
  ::proto_util_converter::testing::StructWrapper* temp = empty_value_;
  empty_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_empty_value() {
  
  if (empty_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    empty_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.empty_value)
  return empty_value_;
}
inline void StructTestCases::set_allocated_empty_value(::proto_util_converter::testing::StructWrapper* empty_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete empty_value_;
  }
  if (empty_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      empty_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_value, submessage_arena);
    }
    
  } else {
    
  }
  empty_value_ = empty_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.empty_value)
}

// .proto_util_converter.testing.StructWrapper empty_value2 = 2;
inline bool StructTestCases::has_empty_value2() const {
  return this != internal_default_instance() && empty_value2_ != nullptr;
}
inline void StructTestCases::clear_empty_value2() {
  if (GetArenaNoVirtual() == nullptr && empty_value2_ != nullptr) {
    delete empty_value2_;
  }
  empty_value2_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::empty_value2() const {
  const ::proto_util_converter::testing::StructWrapper* p = empty_value2_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.empty_value2)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_empty_value2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.empty_value2)
  
  ::proto_util_converter::testing::StructWrapper* temp = empty_value2_;
  empty_value2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_empty_value2() {
  
  if (empty_value2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    empty_value2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.empty_value2)
  return empty_value2_;
}
inline void StructTestCases::set_allocated_empty_value2(::proto_util_converter::testing::StructWrapper* empty_value2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete empty_value2_;
  }
  if (empty_value2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      empty_value2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_value2, submessage_arena);
    }
    
  } else {
    
  }
  empty_value2_ = empty_value2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.empty_value2)
}

// .proto_util_converter.testing.StructWrapper null_value = 3;
inline bool StructTestCases::has_null_value() const {
  return this != internal_default_instance() && null_value_ != nullptr;
}
inline void StructTestCases::clear_null_value() {
  if (GetArenaNoVirtual() == nullptr && null_value_ != nullptr) {
    delete null_value_;
  }
  null_value_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::null_value() const {
  const ::proto_util_converter::testing::StructWrapper* p = null_value_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.null_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_null_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.null_value)
  
  ::proto_util_converter::testing::StructWrapper* temp = null_value_;
  null_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_null_value() {
  
  if (null_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    null_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.null_value)
  return null_value_;
}
inline void StructTestCases::set_allocated_null_value(::proto_util_converter::testing::StructWrapper* null_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete null_value_;
  }
  if (null_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      null_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null_value, submessage_arena);
    }
    
  } else {
    
  }
  null_value_ = null_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.null_value)
}

// .proto_util_converter.testing.StructWrapper simple_struct = 4;
inline bool StructTestCases::has_simple_struct() const {
  return this != internal_default_instance() && simple_struct_ != nullptr;
}
inline void StructTestCases::clear_simple_struct() {
  if (GetArenaNoVirtual() == nullptr && simple_struct_ != nullptr) {
    delete simple_struct_;
  }
  simple_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::simple_struct() const {
  const ::proto_util_converter::testing::StructWrapper* p = simple_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.simple_struct)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_simple_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.simple_struct)
  
  ::proto_util_converter::testing::StructWrapper* temp = simple_struct_;
  simple_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_simple_struct() {
  
  if (simple_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    simple_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.simple_struct)
  return simple_struct_;
}
inline void StructTestCases::set_allocated_simple_struct(::proto_util_converter::testing::StructWrapper* simple_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete simple_struct_;
  }
  if (simple_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple_struct, submessage_arena);
    }
    
  } else {
    
  }
  simple_struct_ = simple_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.simple_struct)
}

// .proto_util_converter.testing.StructWrapper longer_struct = 5;
inline bool StructTestCases::has_longer_struct() const {
  return this != internal_default_instance() && longer_struct_ != nullptr;
}
inline void StructTestCases::clear_longer_struct() {
  if (GetArenaNoVirtual() == nullptr && longer_struct_ != nullptr) {
    delete longer_struct_;
  }
  longer_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::longer_struct() const {
  const ::proto_util_converter::testing::StructWrapper* p = longer_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.longer_struct)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_longer_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.longer_struct)
  
  ::proto_util_converter::testing::StructWrapper* temp = longer_struct_;
  longer_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_longer_struct() {
  
  if (longer_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    longer_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.longer_struct)
  return longer_struct_;
}
inline void StructTestCases::set_allocated_longer_struct(::proto_util_converter::testing::StructWrapper* longer_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete longer_struct_;
  }
  if (longer_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      longer_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longer_struct, submessage_arena);
    }
    
  } else {
    
  }
  longer_struct_ = longer_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.longer_struct)
}

// .proto_util_converter.testing.StructWrapper struct_with_nested_struct = 6;
inline bool StructTestCases::has_struct_with_nested_struct() const {
  return this != internal_default_instance() && struct_with_nested_struct_ != nullptr;
}
inline void StructTestCases::clear_struct_with_nested_struct() {
  if (GetArenaNoVirtual() == nullptr && struct_with_nested_struct_ != nullptr) {
    delete struct_with_nested_struct_;
  }
  struct_with_nested_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::struct_with_nested_struct() const {
  const ::proto_util_converter::testing::StructWrapper* p = struct_with_nested_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.struct_with_nested_struct)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_struct_with_nested_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.struct_with_nested_struct)
  
  ::proto_util_converter::testing::StructWrapper* temp = struct_with_nested_struct_;
  struct_with_nested_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_struct_with_nested_struct() {
  
  if (struct_with_nested_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    struct_with_nested_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.struct_with_nested_struct)
  return struct_with_nested_struct_;
}
inline void StructTestCases::set_allocated_struct_with_nested_struct(::proto_util_converter::testing::StructWrapper* struct_with_nested_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete struct_with_nested_struct_;
  }
  if (struct_with_nested_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      struct_with_nested_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_nested_struct, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_nested_struct_ = struct_with_nested_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.struct_with_nested_struct)
}

// .proto_util_converter.testing.StructWrapper struct_with_nested_list = 7;
inline bool StructTestCases::has_struct_with_nested_list() const {
  return this != internal_default_instance() && struct_with_nested_list_ != nullptr;
}
inline void StructTestCases::clear_struct_with_nested_list() {
  if (GetArenaNoVirtual() == nullptr && struct_with_nested_list_ != nullptr) {
    delete struct_with_nested_list_;
  }
  struct_with_nested_list_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::struct_with_nested_list() const {
  const ::proto_util_converter::testing::StructWrapper* p = struct_with_nested_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.struct_with_nested_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_struct_with_nested_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.struct_with_nested_list)
  
  ::proto_util_converter::testing::StructWrapper* temp = struct_with_nested_list_;
  struct_with_nested_list_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_struct_with_nested_list() {
  
  if (struct_with_nested_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    struct_with_nested_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.struct_with_nested_list)
  return struct_with_nested_list_;
}
inline void StructTestCases::set_allocated_struct_with_nested_list(::proto_util_converter::testing::StructWrapper* struct_with_nested_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete struct_with_nested_list_;
  }
  if (struct_with_nested_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      struct_with_nested_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_nested_list, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_nested_list_ = struct_with_nested_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.struct_with_nested_list)
}

// .proto_util_converter.testing.StructWrapper struct_with_list_of_nulls = 8;
inline bool StructTestCases::has_struct_with_list_of_nulls() const {
  return this != internal_default_instance() && struct_with_list_of_nulls_ != nullptr;
}
inline void StructTestCases::clear_struct_with_list_of_nulls() {
  if (GetArenaNoVirtual() == nullptr && struct_with_list_of_nulls_ != nullptr) {
    delete struct_with_list_of_nulls_;
  }
  struct_with_list_of_nulls_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::struct_with_list_of_nulls() const {
  const ::proto_util_converter::testing::StructWrapper* p = struct_with_list_of_nulls_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.struct_with_list_of_nulls)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_struct_with_list_of_nulls() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.struct_with_list_of_nulls)
  
  ::proto_util_converter::testing::StructWrapper* temp = struct_with_list_of_nulls_;
  struct_with_list_of_nulls_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_struct_with_list_of_nulls() {
  
  if (struct_with_list_of_nulls_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    struct_with_list_of_nulls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.struct_with_list_of_nulls)
  return struct_with_list_of_nulls_;
}
inline void StructTestCases::set_allocated_struct_with_list_of_nulls(::proto_util_converter::testing::StructWrapper* struct_with_list_of_nulls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete struct_with_list_of_nulls_;
  }
  if (struct_with_list_of_nulls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      struct_with_list_of_nulls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_list_of_nulls, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_list_of_nulls_ = struct_with_list_of_nulls;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.struct_with_list_of_nulls)
}

// .proto_util_converter.testing.StructWrapper struct_with_list_of_lists = 9;
inline bool StructTestCases::has_struct_with_list_of_lists() const {
  return this != internal_default_instance() && struct_with_list_of_lists_ != nullptr;
}
inline void StructTestCases::clear_struct_with_list_of_lists() {
  if (GetArenaNoVirtual() == nullptr && struct_with_list_of_lists_ != nullptr) {
    delete struct_with_list_of_lists_;
  }
  struct_with_list_of_lists_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::struct_with_list_of_lists() const {
  const ::proto_util_converter::testing::StructWrapper* p = struct_with_list_of_lists_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.struct_with_list_of_lists)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_struct_with_list_of_lists() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.struct_with_list_of_lists)
  
  ::proto_util_converter::testing::StructWrapper* temp = struct_with_list_of_lists_;
  struct_with_list_of_lists_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_struct_with_list_of_lists() {
  
  if (struct_with_list_of_lists_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    struct_with_list_of_lists_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.struct_with_list_of_lists)
  return struct_with_list_of_lists_;
}
inline void StructTestCases::set_allocated_struct_with_list_of_lists(::proto_util_converter::testing::StructWrapper* struct_with_list_of_lists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete struct_with_list_of_lists_;
  }
  if (struct_with_list_of_lists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      struct_with_list_of_lists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_list_of_lists, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_list_of_lists_ = struct_with_list_of_lists;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.struct_with_list_of_lists)
}

// .proto_util_converter.testing.StructWrapper struct_with_list_of_structs = 10;
inline bool StructTestCases::has_struct_with_list_of_structs() const {
  return this != internal_default_instance() && struct_with_list_of_structs_ != nullptr;
}
inline void StructTestCases::clear_struct_with_list_of_structs() {
  if (GetArenaNoVirtual() == nullptr && struct_with_list_of_structs_ != nullptr) {
    delete struct_with_list_of_structs_;
  }
  struct_with_list_of_structs_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::struct_with_list_of_structs() const {
  const ::proto_util_converter::testing::StructWrapper* p = struct_with_list_of_structs_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.struct_with_list_of_structs)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_struct_with_list_of_structs() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.struct_with_list_of_structs)
  
  ::proto_util_converter::testing::StructWrapper* temp = struct_with_list_of_structs_;
  struct_with_list_of_structs_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_struct_with_list_of_structs() {
  
  if (struct_with_list_of_structs_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    struct_with_list_of_structs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.struct_with_list_of_structs)
  return struct_with_list_of_structs_;
}
inline void StructTestCases::set_allocated_struct_with_list_of_structs(::proto_util_converter::testing::StructWrapper* struct_with_list_of_structs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete struct_with_list_of_structs_;
  }
  if (struct_with_list_of_structs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      struct_with_list_of_structs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_list_of_structs, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_list_of_structs_ = struct_with_list_of_structs;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.struct_with_list_of_structs)
}

// .proto_util_converter.testing.StructWrapper struct_with_empty_list = 11;
inline bool StructTestCases::has_struct_with_empty_list() const {
  return this != internal_default_instance() && struct_with_empty_list_ != nullptr;
}
inline void StructTestCases::clear_struct_with_empty_list() {
  if (GetArenaNoVirtual() == nullptr && struct_with_empty_list_ != nullptr) {
    delete struct_with_empty_list_;
  }
  struct_with_empty_list_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::struct_with_empty_list() const {
  const ::proto_util_converter::testing::StructWrapper* p = struct_with_empty_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.struct_with_empty_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_struct_with_empty_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.struct_with_empty_list)
  
  ::proto_util_converter::testing::StructWrapper* temp = struct_with_empty_list_;
  struct_with_empty_list_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_struct_with_empty_list() {
  
  if (struct_with_empty_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    struct_with_empty_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.struct_with_empty_list)
  return struct_with_empty_list_;
}
inline void StructTestCases::set_allocated_struct_with_empty_list(::proto_util_converter::testing::StructWrapper* struct_with_empty_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete struct_with_empty_list_;
  }
  if (struct_with_empty_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      struct_with_empty_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_empty_list, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_empty_list_ = struct_with_empty_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.struct_with_empty_list)
}

// .proto_util_converter.testing.StructWrapper struct_with_list_with_empty_struct = 12;
inline bool StructTestCases::has_struct_with_list_with_empty_struct() const {
  return this != internal_default_instance() && struct_with_list_with_empty_struct_ != nullptr;
}
inline void StructTestCases::clear_struct_with_list_with_empty_struct() {
  if (GetArenaNoVirtual() == nullptr && struct_with_list_with_empty_struct_ != nullptr) {
    delete struct_with_list_with_empty_struct_;
  }
  struct_with_list_with_empty_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::StructWrapper& StructTestCases::struct_with_list_with_empty_struct() const {
  const ::proto_util_converter::testing::StructWrapper* p = struct_with_list_with_empty_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.struct_with_list_with_empty_struct)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::StructWrapper*>(
      &::proto_util_converter::testing::_StructWrapper_default_instance_);
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::release_struct_with_list_with_empty_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.struct_with_list_with_empty_struct)
  
  ::proto_util_converter::testing::StructWrapper* temp = struct_with_list_with_empty_struct_;
  struct_with_list_with_empty_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::StructWrapper* StructTestCases::mutable_struct_with_list_with_empty_struct() {
  
  if (struct_with_list_with_empty_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::StructWrapper>(GetArenaNoVirtual());
    struct_with_list_with_empty_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.struct_with_list_with_empty_struct)
  return struct_with_list_with_empty_struct_;
}
inline void StructTestCases::set_allocated_struct_with_list_with_empty_struct(::proto_util_converter::testing::StructWrapper* struct_with_list_with_empty_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete struct_with_list_with_empty_struct_;
  }
  if (struct_with_list_with_empty_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      struct_with_list_with_empty_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_with_list_with_empty_struct, submessage_arena);
    }
    
  } else {
    
  }
  struct_with_list_with_empty_struct_ = struct_with_list_with_empty_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.struct_with_list_with_empty_struct)
}

// .google.protobuf.Struct top_level_struct = 13;
inline bool StructTestCases::has_top_level_struct() const {
  return this != internal_default_instance() && top_level_struct_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& StructTestCases::top_level_struct() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = top_level_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_struct)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructTestCases::release_top_level_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_struct)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = top_level_struct_;
  top_level_struct_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructTestCases::mutable_top_level_struct() {
  
  if (top_level_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    top_level_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_struct)
  return top_level_struct_;
}
inline void StructTestCases::set_allocated_top_level_struct(PROTOBUF_NAMESPACE_ID::Struct* top_level_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct_);
  }
  if (top_level_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_struct, submessage_arena);
    }
    
  } else {
    
  }
  top_level_struct_ = top_level_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_struct)
}

// .google.protobuf.Struct top_level_struct_with_empty_list = 14;
inline bool StructTestCases::has_top_level_struct_with_empty_list() const {
  return this != internal_default_instance() && top_level_struct_with_empty_list_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& StructTestCases::top_level_struct_with_empty_list() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = top_level_struct_with_empty_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_struct_with_empty_list)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructTestCases::release_top_level_struct_with_empty_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_struct_with_empty_list)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = top_level_struct_with_empty_list_;
  top_level_struct_with_empty_list_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructTestCases::mutable_top_level_struct_with_empty_list() {
  
  if (top_level_struct_with_empty_list_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    top_level_struct_with_empty_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_struct_with_empty_list)
  return top_level_struct_with_empty_list_;
}
inline void StructTestCases::set_allocated_top_level_struct_with_empty_list(PROTOBUF_NAMESPACE_ID::Struct* top_level_struct_with_empty_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct_with_empty_list_);
  }
  if (top_level_struct_with_empty_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct_with_empty_list)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_struct_with_empty_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_struct_with_empty_list, submessage_arena);
    }
    
  } else {
    
  }
  top_level_struct_with_empty_list_ = top_level_struct_with_empty_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_struct_with_empty_list)
}

// .google.protobuf.Struct top_level_struct_with_list_with_empty_struct = 15;
inline bool StructTestCases::has_top_level_struct_with_list_with_empty_struct() const {
  return this != internal_default_instance() && top_level_struct_with_list_with_empty_struct_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& StructTestCases::top_level_struct_with_list_with_empty_struct() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = top_level_struct_with_list_with_empty_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_struct_with_list_with_empty_struct)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructTestCases::release_top_level_struct_with_list_with_empty_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_struct_with_list_with_empty_struct)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = top_level_struct_with_list_with_empty_struct_;
  top_level_struct_with_list_with_empty_struct_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructTestCases::mutable_top_level_struct_with_list_with_empty_struct() {
  
  if (top_level_struct_with_list_with_empty_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    top_level_struct_with_list_with_empty_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_struct_with_list_with_empty_struct)
  return top_level_struct_with_list_with_empty_struct_;
}
inline void StructTestCases::set_allocated_top_level_struct_with_list_with_empty_struct(PROTOBUF_NAMESPACE_ID::Struct* top_level_struct_with_list_with_empty_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct_with_list_with_empty_struct_);
  }
  if (top_level_struct_with_list_with_empty_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_struct_with_list_with_empty_struct)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_struct_with_list_with_empty_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_struct_with_list_with_empty_struct, submessage_arena);
    }
    
  } else {
    
  }
  top_level_struct_with_list_with_empty_struct_ = top_level_struct_with_list_with_empty_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_struct_with_list_with_empty_struct)
}

// .proto_util_converter.testing.ValueWrapper value_wrapper_simple = 16;
inline bool StructTestCases::has_value_wrapper_simple() const {
  return this != internal_default_instance() && value_wrapper_simple_ != nullptr;
}
inline void StructTestCases::clear_value_wrapper_simple() {
  if (GetArenaNoVirtual() == nullptr && value_wrapper_simple_ != nullptr) {
    delete value_wrapper_simple_;
  }
  value_wrapper_simple_ = nullptr;
}
inline const ::proto_util_converter::testing::ValueWrapper& StructTestCases::value_wrapper_simple() const {
  const ::proto_util_converter::testing::ValueWrapper* p = value_wrapper_simple_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.value_wrapper_simple)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ValueWrapper*>(
      &::proto_util_converter::testing::_ValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::release_value_wrapper_simple() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.value_wrapper_simple)
  
  ::proto_util_converter::testing::ValueWrapper* temp = value_wrapper_simple_;
  value_wrapper_simple_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::mutable_value_wrapper_simple() {
  
  if (value_wrapper_simple_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ValueWrapper>(GetArenaNoVirtual());
    value_wrapper_simple_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.value_wrapper_simple)
  return value_wrapper_simple_;
}
inline void StructTestCases::set_allocated_value_wrapper_simple(::proto_util_converter::testing::ValueWrapper* value_wrapper_simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_wrapper_simple_;
  }
  if (value_wrapper_simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_wrapper_simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_wrapper_simple, submessage_arena);
    }
    
  } else {
    
  }
  value_wrapper_simple_ = value_wrapper_simple;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.value_wrapper_simple)
}

// .proto_util_converter.testing.ValueWrapper value_wrapper_with_struct = 17;
inline bool StructTestCases::has_value_wrapper_with_struct() const {
  return this != internal_default_instance() && value_wrapper_with_struct_ != nullptr;
}
inline void StructTestCases::clear_value_wrapper_with_struct() {
  if (GetArenaNoVirtual() == nullptr && value_wrapper_with_struct_ != nullptr) {
    delete value_wrapper_with_struct_;
  }
  value_wrapper_with_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::ValueWrapper& StructTestCases::value_wrapper_with_struct() const {
  const ::proto_util_converter::testing::ValueWrapper* p = value_wrapper_with_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.value_wrapper_with_struct)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ValueWrapper*>(
      &::proto_util_converter::testing::_ValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::release_value_wrapper_with_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.value_wrapper_with_struct)
  
  ::proto_util_converter::testing::ValueWrapper* temp = value_wrapper_with_struct_;
  value_wrapper_with_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::mutable_value_wrapper_with_struct() {
  
  if (value_wrapper_with_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ValueWrapper>(GetArenaNoVirtual());
    value_wrapper_with_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.value_wrapper_with_struct)
  return value_wrapper_with_struct_;
}
inline void StructTestCases::set_allocated_value_wrapper_with_struct(::proto_util_converter::testing::ValueWrapper* value_wrapper_with_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_wrapper_with_struct_;
  }
  if (value_wrapper_with_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_wrapper_with_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_wrapper_with_struct, submessage_arena);
    }
    
  } else {
    
  }
  value_wrapper_with_struct_ = value_wrapper_with_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.value_wrapper_with_struct)
}

// .proto_util_converter.testing.ValueWrapper value_wrapper_with_list = 18;
inline bool StructTestCases::has_value_wrapper_with_list() const {
  return this != internal_default_instance() && value_wrapper_with_list_ != nullptr;
}
inline void StructTestCases::clear_value_wrapper_with_list() {
  if (GetArenaNoVirtual() == nullptr && value_wrapper_with_list_ != nullptr) {
    delete value_wrapper_with_list_;
  }
  value_wrapper_with_list_ = nullptr;
}
inline const ::proto_util_converter::testing::ValueWrapper& StructTestCases::value_wrapper_with_list() const {
  const ::proto_util_converter::testing::ValueWrapper* p = value_wrapper_with_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.value_wrapper_with_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ValueWrapper*>(
      &::proto_util_converter::testing::_ValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::release_value_wrapper_with_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.value_wrapper_with_list)
  
  ::proto_util_converter::testing::ValueWrapper* temp = value_wrapper_with_list_;
  value_wrapper_with_list_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::mutable_value_wrapper_with_list() {
  
  if (value_wrapper_with_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ValueWrapper>(GetArenaNoVirtual());
    value_wrapper_with_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.value_wrapper_with_list)
  return value_wrapper_with_list_;
}
inline void StructTestCases::set_allocated_value_wrapper_with_list(::proto_util_converter::testing::ValueWrapper* value_wrapper_with_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_wrapper_with_list_;
  }
  if (value_wrapper_with_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_wrapper_with_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_wrapper_with_list, submessage_arena);
    }
    
  } else {
    
  }
  value_wrapper_with_list_ = value_wrapper_with_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.value_wrapper_with_list)
}

// .proto_util_converter.testing.ValueWrapper value_wrapper_with_empty_list = 19;
inline bool StructTestCases::has_value_wrapper_with_empty_list() const {
  return this != internal_default_instance() && value_wrapper_with_empty_list_ != nullptr;
}
inline void StructTestCases::clear_value_wrapper_with_empty_list() {
  if (GetArenaNoVirtual() == nullptr && value_wrapper_with_empty_list_ != nullptr) {
    delete value_wrapper_with_empty_list_;
  }
  value_wrapper_with_empty_list_ = nullptr;
}
inline const ::proto_util_converter::testing::ValueWrapper& StructTestCases::value_wrapper_with_empty_list() const {
  const ::proto_util_converter::testing::ValueWrapper* p = value_wrapper_with_empty_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.value_wrapper_with_empty_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ValueWrapper*>(
      &::proto_util_converter::testing::_ValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::release_value_wrapper_with_empty_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.value_wrapper_with_empty_list)
  
  ::proto_util_converter::testing::ValueWrapper* temp = value_wrapper_with_empty_list_;
  value_wrapper_with_empty_list_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::mutable_value_wrapper_with_empty_list() {
  
  if (value_wrapper_with_empty_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ValueWrapper>(GetArenaNoVirtual());
    value_wrapper_with_empty_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.value_wrapper_with_empty_list)
  return value_wrapper_with_empty_list_;
}
inline void StructTestCases::set_allocated_value_wrapper_with_empty_list(::proto_util_converter::testing::ValueWrapper* value_wrapper_with_empty_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_wrapper_with_empty_list_;
  }
  if (value_wrapper_with_empty_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_wrapper_with_empty_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_wrapper_with_empty_list, submessage_arena);
    }
    
  } else {
    
  }
  value_wrapper_with_empty_list_ = value_wrapper_with_empty_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.value_wrapper_with_empty_list)
}

// .proto_util_converter.testing.ValueWrapper value_wrapper_with_list_with_empty_struct = 20;
inline bool StructTestCases::has_value_wrapper_with_list_with_empty_struct() const {
  return this != internal_default_instance() && value_wrapper_with_list_with_empty_struct_ != nullptr;
}
inline void StructTestCases::clear_value_wrapper_with_list_with_empty_struct() {
  if (GetArenaNoVirtual() == nullptr && value_wrapper_with_list_with_empty_struct_ != nullptr) {
    delete value_wrapper_with_list_with_empty_struct_;
  }
  value_wrapper_with_list_with_empty_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::ValueWrapper& StructTestCases::value_wrapper_with_list_with_empty_struct() const {
  const ::proto_util_converter::testing::ValueWrapper* p = value_wrapper_with_list_with_empty_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.value_wrapper_with_list_with_empty_struct)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ValueWrapper*>(
      &::proto_util_converter::testing::_ValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::release_value_wrapper_with_list_with_empty_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.value_wrapper_with_list_with_empty_struct)
  
  ::proto_util_converter::testing::ValueWrapper* temp = value_wrapper_with_list_with_empty_struct_;
  value_wrapper_with_list_with_empty_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ValueWrapper* StructTestCases::mutable_value_wrapper_with_list_with_empty_struct() {
  
  if (value_wrapper_with_list_with_empty_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ValueWrapper>(GetArenaNoVirtual());
    value_wrapper_with_list_with_empty_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.value_wrapper_with_list_with_empty_struct)
  return value_wrapper_with_list_with_empty_struct_;
}
inline void StructTestCases::set_allocated_value_wrapper_with_list_with_empty_struct(::proto_util_converter::testing::ValueWrapper* value_wrapper_with_list_with_empty_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_wrapper_with_list_with_empty_struct_;
  }
  if (value_wrapper_with_list_with_empty_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_wrapper_with_list_with_empty_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_wrapper_with_list_with_empty_struct, submessage_arena);
    }
    
  } else {
    
  }
  value_wrapper_with_list_with_empty_struct_ = value_wrapper_with_list_with_empty_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.value_wrapper_with_list_with_empty_struct)
}

// .proto_util_converter.testing.ListValueWrapper list_value_wrapper = 21;
inline bool StructTestCases::has_list_value_wrapper() const {
  return this != internal_default_instance() && list_value_wrapper_ != nullptr;
}
inline void StructTestCases::clear_list_value_wrapper() {
  if (GetArenaNoVirtual() == nullptr && list_value_wrapper_ != nullptr) {
    delete list_value_wrapper_;
  }
  list_value_wrapper_ = nullptr;
}
inline const ::proto_util_converter::testing::ListValueWrapper& StructTestCases::list_value_wrapper() const {
  const ::proto_util_converter::testing::ListValueWrapper* p = list_value_wrapper_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.list_value_wrapper)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ListValueWrapper*>(
      &::proto_util_converter::testing::_ListValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::ListValueWrapper* StructTestCases::release_list_value_wrapper() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.list_value_wrapper)
  
  ::proto_util_converter::testing::ListValueWrapper* temp = list_value_wrapper_;
  list_value_wrapper_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ListValueWrapper* StructTestCases::mutable_list_value_wrapper() {
  
  if (list_value_wrapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ListValueWrapper>(GetArenaNoVirtual());
    list_value_wrapper_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.list_value_wrapper)
  return list_value_wrapper_;
}
inline void StructTestCases::set_allocated_list_value_wrapper(::proto_util_converter::testing::ListValueWrapper* list_value_wrapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete list_value_wrapper_;
  }
  if (list_value_wrapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list_value_wrapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_value_wrapper, submessage_arena);
    }
    
  } else {
    
  }
  list_value_wrapper_ = list_value_wrapper;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.list_value_wrapper)
}

// .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_empty_list = 22;
inline bool StructTestCases::has_list_value_wrapper_with_empty_list() const {
  return this != internal_default_instance() && list_value_wrapper_with_empty_list_ != nullptr;
}
inline void StructTestCases::clear_list_value_wrapper_with_empty_list() {
  if (GetArenaNoVirtual() == nullptr && list_value_wrapper_with_empty_list_ != nullptr) {
    delete list_value_wrapper_with_empty_list_;
  }
  list_value_wrapper_with_empty_list_ = nullptr;
}
inline const ::proto_util_converter::testing::ListValueWrapper& StructTestCases::list_value_wrapper_with_empty_list() const {
  const ::proto_util_converter::testing::ListValueWrapper* p = list_value_wrapper_with_empty_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.list_value_wrapper_with_empty_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ListValueWrapper*>(
      &::proto_util_converter::testing::_ListValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::ListValueWrapper* StructTestCases::release_list_value_wrapper_with_empty_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.list_value_wrapper_with_empty_list)
  
  ::proto_util_converter::testing::ListValueWrapper* temp = list_value_wrapper_with_empty_list_;
  list_value_wrapper_with_empty_list_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ListValueWrapper* StructTestCases::mutable_list_value_wrapper_with_empty_list() {
  
  if (list_value_wrapper_with_empty_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ListValueWrapper>(GetArenaNoVirtual());
    list_value_wrapper_with_empty_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.list_value_wrapper_with_empty_list)
  return list_value_wrapper_with_empty_list_;
}
inline void StructTestCases::set_allocated_list_value_wrapper_with_empty_list(::proto_util_converter::testing::ListValueWrapper* list_value_wrapper_with_empty_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete list_value_wrapper_with_empty_list_;
  }
  if (list_value_wrapper_with_empty_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list_value_wrapper_with_empty_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_value_wrapper_with_empty_list, submessage_arena);
    }
    
  } else {
    
  }
  list_value_wrapper_with_empty_list_ = list_value_wrapper_with_empty_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.list_value_wrapper_with_empty_list)
}

// .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_list_with_empty_struct = 23;
inline bool StructTestCases::has_list_value_wrapper_with_list_with_empty_struct() const {
  return this != internal_default_instance() && list_value_wrapper_with_list_with_empty_struct_ != nullptr;
}
inline void StructTestCases::clear_list_value_wrapper_with_list_with_empty_struct() {
  if (GetArenaNoVirtual() == nullptr && list_value_wrapper_with_list_with_empty_struct_ != nullptr) {
    delete list_value_wrapper_with_list_with_empty_struct_;
  }
  list_value_wrapper_with_list_with_empty_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::ListValueWrapper& StructTestCases::list_value_wrapper_with_list_with_empty_struct() const {
  const ::proto_util_converter::testing::ListValueWrapper* p = list_value_wrapper_with_list_with_empty_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.list_value_wrapper_with_list_with_empty_struct)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::ListValueWrapper*>(
      &::proto_util_converter::testing::_ListValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::ListValueWrapper* StructTestCases::release_list_value_wrapper_with_list_with_empty_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.list_value_wrapper_with_list_with_empty_struct)
  
  ::proto_util_converter::testing::ListValueWrapper* temp = list_value_wrapper_with_list_with_empty_struct_;
  list_value_wrapper_with_list_with_empty_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::ListValueWrapper* StructTestCases::mutable_list_value_wrapper_with_list_with_empty_struct() {
  
  if (list_value_wrapper_with_list_with_empty_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::ListValueWrapper>(GetArenaNoVirtual());
    list_value_wrapper_with_list_with_empty_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.list_value_wrapper_with_list_with_empty_struct)
  return list_value_wrapper_with_list_with_empty_struct_;
}
inline void StructTestCases::set_allocated_list_value_wrapper_with_list_with_empty_struct(::proto_util_converter::testing::ListValueWrapper* list_value_wrapper_with_list_with_empty_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete list_value_wrapper_with_list_with_empty_struct_;
  }
  if (list_value_wrapper_with_list_with_empty_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list_value_wrapper_with_list_with_empty_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_value_wrapper_with_list_with_empty_struct, submessage_arena);
    }
    
  } else {
    
  }
  list_value_wrapper_with_list_with_empty_struct_ = list_value_wrapper_with_list_with_empty_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.list_value_wrapper_with_list_with_empty_struct)
}

// .google.protobuf.Value top_level_value_simple = 24;
inline bool StructTestCases::has_top_level_value_simple() const {
  return this != internal_default_instance() && top_level_value_simple_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Value& StructTestCases::top_level_value_simple() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = top_level_value_simple_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_value_simple)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::release_top_level_value_simple() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_value_simple)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_simple_;
  top_level_value_simple_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::mutable_top_level_value_simple() {
  
  if (top_level_value_simple_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArenaNoVirtual());
    top_level_value_simple_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_value_simple)
  return top_level_value_simple_;
}
inline void StructTestCases::set_allocated_top_level_value_simple(PROTOBUF_NAMESPACE_ID::Value* top_level_value_simple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_simple_);
  }
  if (top_level_value_simple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_simple)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_value_simple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_value_simple, submessage_arena);
    }
    
  } else {
    
  }
  top_level_value_simple_ = top_level_value_simple;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_value_simple)
}

// .google.protobuf.Value top_level_value_with_struct = 25;
inline bool StructTestCases::has_top_level_value_with_struct() const {
  return this != internal_default_instance() && top_level_value_with_struct_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Value& StructTestCases::top_level_value_with_struct() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = top_level_value_with_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_value_with_struct)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::release_top_level_value_with_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_value_with_struct)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_with_struct_;
  top_level_value_with_struct_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::mutable_top_level_value_with_struct() {
  
  if (top_level_value_with_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArenaNoVirtual());
    top_level_value_with_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_value_with_struct)
  return top_level_value_with_struct_;
}
inline void StructTestCases::set_allocated_top_level_value_with_struct(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_struct_);
  }
  if (top_level_value_with_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_struct)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_value_with_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_value_with_struct, submessage_arena);
    }
    
  } else {
    
  }
  top_level_value_with_struct_ = top_level_value_with_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_value_with_struct)
}

// .google.protobuf.Value top_level_value_with_list = 26;
inline bool StructTestCases::has_top_level_value_with_list() const {
  return this != internal_default_instance() && top_level_value_with_list_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Value& StructTestCases::top_level_value_with_list() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = top_level_value_with_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_value_with_list)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::release_top_level_value_with_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_value_with_list)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_with_list_;
  top_level_value_with_list_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::mutable_top_level_value_with_list() {
  
  if (top_level_value_with_list_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArenaNoVirtual());
    top_level_value_with_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_value_with_list)
  return top_level_value_with_list_;
}
inline void StructTestCases::set_allocated_top_level_value_with_list(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_list_);
  }
  if (top_level_value_with_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_list)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_value_with_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_value_with_list, submessage_arena);
    }
    
  } else {
    
  }
  top_level_value_with_list_ = top_level_value_with_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_value_with_list)
}

// .google.protobuf.Value top_level_value_with_empty_list = 27;
inline bool StructTestCases::has_top_level_value_with_empty_list() const {
  return this != internal_default_instance() && top_level_value_with_empty_list_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Value& StructTestCases::top_level_value_with_empty_list() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = top_level_value_with_empty_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_value_with_empty_list)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::release_top_level_value_with_empty_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_value_with_empty_list)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_with_empty_list_;
  top_level_value_with_empty_list_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::mutable_top_level_value_with_empty_list() {
  
  if (top_level_value_with_empty_list_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArenaNoVirtual());
    top_level_value_with_empty_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_value_with_empty_list)
  return top_level_value_with_empty_list_;
}
inline void StructTestCases::set_allocated_top_level_value_with_empty_list(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_empty_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_empty_list_);
  }
  if (top_level_value_with_empty_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_empty_list)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_value_with_empty_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_value_with_empty_list, submessage_arena);
    }
    
  } else {
    
  }
  top_level_value_with_empty_list_ = top_level_value_with_empty_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_value_with_empty_list)
}

// .google.protobuf.Value top_level_value_with_list_with_empty_struct = 28;
inline bool StructTestCases::has_top_level_value_with_list_with_empty_struct() const {
  return this != internal_default_instance() && top_level_value_with_list_with_empty_struct_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Value& StructTestCases::top_level_value_with_list_with_empty_struct() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = top_level_value_with_list_with_empty_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_value_with_list_with_empty_struct)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::release_top_level_value_with_list_with_empty_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_value_with_list_with_empty_struct)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = top_level_value_with_list_with_empty_struct_;
  top_level_value_with_list_with_empty_struct_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* StructTestCases::mutable_top_level_value_with_list_with_empty_struct() {
  
  if (top_level_value_with_list_with_empty_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArenaNoVirtual());
    top_level_value_with_list_with_empty_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_value_with_list_with_empty_struct)
  return top_level_value_with_list_with_empty_struct_;
}
inline void StructTestCases::set_allocated_top_level_value_with_list_with_empty_struct(PROTOBUF_NAMESPACE_ID::Value* top_level_value_with_list_with_empty_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_list_with_empty_struct_);
  }
  if (top_level_value_with_list_with_empty_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_value_with_list_with_empty_struct)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_value_with_list_with_empty_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_value_with_list_with_empty_struct, submessage_arena);
    }
    
  } else {
    
  }
  top_level_value_with_list_with_empty_struct_ = top_level_value_with_list_with_empty_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_value_with_list_with_empty_struct)
}

// .google.protobuf.ListValue top_level_listvalue = 29;
inline bool StructTestCases::has_top_level_listvalue() const {
  return this != internal_default_instance() && top_level_listvalue_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& StructTestCases::top_level_listvalue() const {
  const PROTOBUF_NAMESPACE_ID::ListValue* p = top_level_listvalue_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_listvalue)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::ListValue*>(
      &PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::ListValue* StructTestCases::release_top_level_listvalue() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_listvalue)
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = top_level_listvalue_;
  top_level_listvalue_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* StructTestCases::mutable_top_level_listvalue() {
  
  if (top_level_listvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::ListValue>(GetArenaNoVirtual());
    top_level_listvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_listvalue)
  return top_level_listvalue_;
}
inline void StructTestCases::set_allocated_top_level_listvalue(PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_listvalue_);
  }
  if (top_level_listvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_listvalue)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_listvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_listvalue, submessage_arena);
    }
    
  } else {
    
  }
  top_level_listvalue_ = top_level_listvalue;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_listvalue)
}

// .google.protobuf.ListValue top_level_empty_listvalue = 30;
inline bool StructTestCases::has_top_level_empty_listvalue() const {
  return this != internal_default_instance() && top_level_empty_listvalue_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& StructTestCases::top_level_empty_listvalue() const {
  const PROTOBUF_NAMESPACE_ID::ListValue* p = top_level_empty_listvalue_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_empty_listvalue)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::ListValue*>(
      &PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::ListValue* StructTestCases::release_top_level_empty_listvalue() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_empty_listvalue)
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = top_level_empty_listvalue_;
  top_level_empty_listvalue_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* StructTestCases::mutable_top_level_empty_listvalue() {
  
  if (top_level_empty_listvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::ListValue>(GetArenaNoVirtual());
    top_level_empty_listvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_empty_listvalue)
  return top_level_empty_listvalue_;
}
inline void StructTestCases::set_allocated_top_level_empty_listvalue(PROTOBUF_NAMESPACE_ID::ListValue* top_level_empty_listvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_empty_listvalue_);
  }
  if (top_level_empty_listvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_empty_listvalue)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_empty_listvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_empty_listvalue, submessage_arena);
    }
    
  } else {
    
  }
  top_level_empty_listvalue_ = top_level_empty_listvalue;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_empty_listvalue)
}

// .google.protobuf.ListValue top_level_listvalue_with_empty_struct = 31;
inline bool StructTestCases::has_top_level_listvalue_with_empty_struct() const {
  return this != internal_default_instance() && top_level_listvalue_with_empty_struct_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& StructTestCases::top_level_listvalue_with_empty_struct() const {
  const PROTOBUF_NAMESPACE_ID::ListValue* p = top_level_listvalue_with_empty_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.top_level_listvalue_with_empty_struct)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::ListValue*>(
      &PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::ListValue* StructTestCases::release_top_level_listvalue_with_empty_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.top_level_listvalue_with_empty_struct)
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = top_level_listvalue_with_empty_struct_;
  top_level_listvalue_with_empty_struct_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* StructTestCases::mutable_top_level_listvalue_with_empty_struct() {
  
  if (top_level_listvalue_with_empty_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::ListValue>(GetArenaNoVirtual());
    top_level_listvalue_with_empty_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.top_level_listvalue_with_empty_struct)
  return top_level_listvalue_with_empty_struct_;
}
inline void StructTestCases::set_allocated_top_level_listvalue_with_empty_struct(PROTOBUF_NAMESPACE_ID::ListValue* top_level_listvalue_with_empty_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_listvalue_with_empty_struct_);
  }
  if (top_level_listvalue_with_empty_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_level_listvalue_with_empty_struct)->GetArena();
    if (message_arena != submessage_arena) {
      top_level_listvalue_with_empty_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_level_listvalue_with_empty_struct, submessage_arena);
    }
    
  } else {
    
  }
  top_level_listvalue_with_empty_struct_ = top_level_listvalue_with_empty_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.top_level_listvalue_with_empty_struct)
}

// .proto_util_converter.testing.RepeatedValueWrapper repeated_value = 32;
inline bool StructTestCases::has_repeated_value() const {
  return this != internal_default_instance() && repeated_value_ != nullptr;
}
inline void StructTestCases::clear_repeated_value() {
  if (GetArenaNoVirtual() == nullptr && repeated_value_ != nullptr) {
    delete repeated_value_;
  }
  repeated_value_ = nullptr;
}
inline const ::proto_util_converter::testing::RepeatedValueWrapper& StructTestCases::repeated_value() const {
  const ::proto_util_converter::testing::RepeatedValueWrapper* p = repeated_value_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.repeated_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::RepeatedValueWrapper*>(
      &::proto_util_converter::testing::_RepeatedValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::RepeatedValueWrapper* StructTestCases::release_repeated_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.repeated_value)
  
  ::proto_util_converter::testing::RepeatedValueWrapper* temp = repeated_value_;
  repeated_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::RepeatedValueWrapper* StructTestCases::mutable_repeated_value() {
  
  if (repeated_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::RepeatedValueWrapper>(GetArenaNoVirtual());
    repeated_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.repeated_value)
  return repeated_value_;
}
inline void StructTestCases::set_allocated_repeated_value(::proto_util_converter::testing::RepeatedValueWrapper* repeated_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete repeated_value_;
  }
  if (repeated_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      repeated_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_value, submessage_arena);
    }
    
  } else {
    
  }
  repeated_value_ = repeated_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.repeated_value)
}

// .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list = 33;
inline bool StructTestCases::has_repeated_value_nested_list() const {
  return this != internal_default_instance() && repeated_value_nested_list_ != nullptr;
}
inline void StructTestCases::clear_repeated_value_nested_list() {
  if (GetArenaNoVirtual() == nullptr && repeated_value_nested_list_ != nullptr) {
    delete repeated_value_nested_list_;
  }
  repeated_value_nested_list_ = nullptr;
}
inline const ::proto_util_converter::testing::RepeatedValueWrapper& StructTestCases::repeated_value_nested_list() const {
  const ::proto_util_converter::testing::RepeatedValueWrapper* p = repeated_value_nested_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.repeated_value_nested_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::RepeatedValueWrapper*>(
      &::proto_util_converter::testing::_RepeatedValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::RepeatedValueWrapper* StructTestCases::release_repeated_value_nested_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.repeated_value_nested_list)
  
  ::proto_util_converter::testing::RepeatedValueWrapper* temp = repeated_value_nested_list_;
  repeated_value_nested_list_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::RepeatedValueWrapper* StructTestCases::mutable_repeated_value_nested_list() {
  
  if (repeated_value_nested_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::RepeatedValueWrapper>(GetArenaNoVirtual());
    repeated_value_nested_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.repeated_value_nested_list)
  return repeated_value_nested_list_;
}
inline void StructTestCases::set_allocated_repeated_value_nested_list(::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete repeated_value_nested_list_;
  }
  if (repeated_value_nested_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      repeated_value_nested_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_value_nested_list, submessage_arena);
    }
    
  } else {
    
  }
  repeated_value_nested_list_ = repeated_value_nested_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.repeated_value_nested_list)
}

// .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list2 = 34;
inline bool StructTestCases::has_repeated_value_nested_list2() const {
  return this != internal_default_instance() && repeated_value_nested_list2_ != nullptr;
}
inline void StructTestCases::clear_repeated_value_nested_list2() {
  if (GetArenaNoVirtual() == nullptr && repeated_value_nested_list2_ != nullptr) {
    delete repeated_value_nested_list2_;
  }
  repeated_value_nested_list2_ = nullptr;
}
inline const ::proto_util_converter::testing::RepeatedValueWrapper& StructTestCases::repeated_value_nested_list2() const {
  const ::proto_util_converter::testing::RepeatedValueWrapper* p = repeated_value_nested_list2_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.repeated_value_nested_list2)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::RepeatedValueWrapper*>(
      &::proto_util_converter::testing::_RepeatedValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::RepeatedValueWrapper* StructTestCases::release_repeated_value_nested_list2() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.repeated_value_nested_list2)
  
  ::proto_util_converter::testing::RepeatedValueWrapper* temp = repeated_value_nested_list2_;
  repeated_value_nested_list2_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::RepeatedValueWrapper* StructTestCases::mutable_repeated_value_nested_list2() {
  
  if (repeated_value_nested_list2_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::RepeatedValueWrapper>(GetArenaNoVirtual());
    repeated_value_nested_list2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.repeated_value_nested_list2)
  return repeated_value_nested_list2_;
}
inline void StructTestCases::set_allocated_repeated_value_nested_list2(::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete repeated_value_nested_list2_;
  }
  if (repeated_value_nested_list2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      repeated_value_nested_list2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_value_nested_list2, submessage_arena);
    }
    
  } else {
    
  }
  repeated_value_nested_list2_ = repeated_value_nested_list2;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.repeated_value_nested_list2)
}

// .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list3 = 35;
inline bool StructTestCases::has_repeated_value_nested_list3() const {
  return this != internal_default_instance() && repeated_value_nested_list3_ != nullptr;
}
inline void StructTestCases::clear_repeated_value_nested_list3() {
  if (GetArenaNoVirtual() == nullptr && repeated_value_nested_list3_ != nullptr) {
    delete repeated_value_nested_list3_;
  }
  repeated_value_nested_list3_ = nullptr;
}
inline const ::proto_util_converter::testing::RepeatedValueWrapper& StructTestCases::repeated_value_nested_list3() const {
  const ::proto_util_converter::testing::RepeatedValueWrapper* p = repeated_value_nested_list3_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.repeated_value_nested_list3)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::RepeatedValueWrapper*>(
      &::proto_util_converter::testing::_RepeatedValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::RepeatedValueWrapper* StructTestCases::release_repeated_value_nested_list3() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.repeated_value_nested_list3)
  
  ::proto_util_converter::testing::RepeatedValueWrapper* temp = repeated_value_nested_list3_;
  repeated_value_nested_list3_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::RepeatedValueWrapper* StructTestCases::mutable_repeated_value_nested_list3() {
  
  if (repeated_value_nested_list3_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::RepeatedValueWrapper>(GetArenaNoVirtual());
    repeated_value_nested_list3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.repeated_value_nested_list3)
  return repeated_value_nested_list3_;
}
inline void StructTestCases::set_allocated_repeated_value_nested_list3(::proto_util_converter::testing::RepeatedValueWrapper* repeated_value_nested_list3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete repeated_value_nested_list3_;
  }
  if (repeated_value_nested_list3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      repeated_value_nested_list3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_value_nested_list3, submessage_arena);
    }
    
  } else {
    
  }
  repeated_value_nested_list3_ = repeated_value_nested_list3;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.repeated_value_nested_list3)
}

// .proto_util_converter.testing.RepeatedListValueWrapper repeated_listvalue = 36;
inline bool StructTestCases::has_repeated_listvalue() const {
  return this != internal_default_instance() && repeated_listvalue_ != nullptr;
}
inline void StructTestCases::clear_repeated_listvalue() {
  if (GetArenaNoVirtual() == nullptr && repeated_listvalue_ != nullptr) {
    delete repeated_listvalue_;
  }
  repeated_listvalue_ = nullptr;
}
inline const ::proto_util_converter::testing::RepeatedListValueWrapper& StructTestCases::repeated_listvalue() const {
  const ::proto_util_converter::testing::RepeatedListValueWrapper* p = repeated_listvalue_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.repeated_listvalue)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::RepeatedListValueWrapper*>(
      &::proto_util_converter::testing::_RepeatedListValueWrapper_default_instance_);
}
inline ::proto_util_converter::testing::RepeatedListValueWrapper* StructTestCases::release_repeated_listvalue() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.repeated_listvalue)
  
  ::proto_util_converter::testing::RepeatedListValueWrapper* temp = repeated_listvalue_;
  repeated_listvalue_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::RepeatedListValueWrapper* StructTestCases::mutable_repeated_listvalue() {
  
  if (repeated_listvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::RepeatedListValueWrapper>(GetArenaNoVirtual());
    repeated_listvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.repeated_listvalue)
  return repeated_listvalue_;
}
inline void StructTestCases::set_allocated_repeated_listvalue(::proto_util_converter::testing::RepeatedListValueWrapper* repeated_listvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete repeated_listvalue_;
  }
  if (repeated_listvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      repeated_listvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, repeated_listvalue, submessage_arena);
    }
    
  } else {
    
  }
  repeated_listvalue_ = repeated_listvalue;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.repeated_listvalue)
}

// .proto_util_converter.testing.MapOfStruct map_of_struct = 37;
inline bool StructTestCases::has_map_of_struct() const {
  return this != internal_default_instance() && map_of_struct_ != nullptr;
}
inline void StructTestCases::clear_map_of_struct() {
  if (GetArenaNoVirtual() == nullptr && map_of_struct_ != nullptr) {
    delete map_of_struct_;
  }
  map_of_struct_ = nullptr;
}
inline const ::proto_util_converter::testing::MapOfStruct& StructTestCases::map_of_struct() const {
  const ::proto_util_converter::testing::MapOfStruct* p = map_of_struct_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.map_of_struct)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MapOfStruct*>(
      &::proto_util_converter::testing::_MapOfStruct_default_instance_);
}
inline ::proto_util_converter::testing::MapOfStruct* StructTestCases::release_map_of_struct() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.map_of_struct)
  
  ::proto_util_converter::testing::MapOfStruct* temp = map_of_struct_;
  map_of_struct_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MapOfStruct* StructTestCases::mutable_map_of_struct() {
  
  if (map_of_struct_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MapOfStruct>(GetArenaNoVirtual());
    map_of_struct_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.map_of_struct)
  return map_of_struct_;
}
inline void StructTestCases::set_allocated_map_of_struct(::proto_util_converter::testing::MapOfStruct* map_of_struct) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_of_struct_;
  }
  if (map_of_struct) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_of_struct = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_of_struct, submessage_arena);
    }
    
  } else {
    
  }
  map_of_struct_ = map_of_struct;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.map_of_struct)
}

// .proto_util_converter.testing.MapOfStruct map_of_struct_value = 38;
inline bool StructTestCases::has_map_of_struct_value() const {
  return this != internal_default_instance() && map_of_struct_value_ != nullptr;
}
inline void StructTestCases::clear_map_of_struct_value() {
  if (GetArenaNoVirtual() == nullptr && map_of_struct_value_ != nullptr) {
    delete map_of_struct_value_;
  }
  map_of_struct_value_ = nullptr;
}
inline const ::proto_util_converter::testing::MapOfStruct& StructTestCases::map_of_struct_value() const {
  const ::proto_util_converter::testing::MapOfStruct* p = map_of_struct_value_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.map_of_struct_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MapOfStruct*>(
      &::proto_util_converter::testing::_MapOfStruct_default_instance_);
}
inline ::proto_util_converter::testing::MapOfStruct* StructTestCases::release_map_of_struct_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.map_of_struct_value)
  
  ::proto_util_converter::testing::MapOfStruct* temp = map_of_struct_value_;
  map_of_struct_value_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MapOfStruct* StructTestCases::mutable_map_of_struct_value() {
  
  if (map_of_struct_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MapOfStruct>(GetArenaNoVirtual());
    map_of_struct_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.map_of_struct_value)
  return map_of_struct_value_;
}
inline void StructTestCases::set_allocated_map_of_struct_value(::proto_util_converter::testing::MapOfStruct* map_of_struct_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_of_struct_value_;
  }
  if (map_of_struct_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_of_struct_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_of_struct_value, submessage_arena);
    }
    
  } else {
    
  }
  map_of_struct_value_ = map_of_struct_value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.map_of_struct_value)
}

// .proto_util_converter.testing.MapOfStruct map_of_listvalue = 39;
inline bool StructTestCases::has_map_of_listvalue() const {
  return this != internal_default_instance() && map_of_listvalue_ != nullptr;
}
inline void StructTestCases::clear_map_of_listvalue() {
  if (GetArenaNoVirtual() == nullptr && map_of_listvalue_ != nullptr) {
    delete map_of_listvalue_;
  }
  map_of_listvalue_ = nullptr;
}
inline const ::proto_util_converter::testing::MapOfStruct& StructTestCases::map_of_listvalue() const {
  const ::proto_util_converter::testing::MapOfStruct* p = map_of_listvalue_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructTestCases.map_of_listvalue)
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_util_converter::testing::MapOfStruct*>(
      &::proto_util_converter::testing::_MapOfStruct_default_instance_);
}
inline ::proto_util_converter::testing::MapOfStruct* StructTestCases::release_map_of_listvalue() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructTestCases.map_of_listvalue)
  
  ::proto_util_converter::testing::MapOfStruct* temp = map_of_listvalue_;
  map_of_listvalue_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::MapOfStruct* StructTestCases::mutable_map_of_listvalue() {
  
  if (map_of_listvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::MapOfStruct>(GetArenaNoVirtual());
    map_of_listvalue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructTestCases.map_of_listvalue)
  return map_of_listvalue_;
}
inline void StructTestCases::set_allocated_map_of_listvalue(::proto_util_converter::testing::MapOfStruct* map_of_listvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_of_listvalue_;
  }
  if (map_of_listvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_of_listvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_of_listvalue, submessage_arena);
    }
    
  } else {
    
  }
  map_of_listvalue_ = map_of_listvalue;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructTestCases.map_of_listvalue)
}

// -------------------------------------------------------------------

// StructWrapper

// .google.protobuf.Struct struct = 1;
inline bool StructWrapper::has_struct_() const {
  return this != internal_default_instance() && struct__ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& StructWrapper::struct_() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = struct__;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructWrapper.struct)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructWrapper::release_struct_() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructWrapper.struct)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = struct__;
  struct__ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructWrapper::mutable_struct_() {
  
  if (struct__ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    struct__ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructWrapper.struct)
  return struct__;
}
inline void StructWrapper::set_allocated_struct_(PROTOBUF_NAMESPACE_ID::Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct__);
  }
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_)->GetArena();
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    
  } else {
    
  }
  struct__ = struct_;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructWrapper.struct)
}

// -------------------------------------------------------------------

// ValueWrapper

// .google.protobuf.Value value = 1;
inline bool ValueWrapper::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Value& ValueWrapper::value() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = value_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.ValueWrapper.value)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value*>(
      &PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Value* ValueWrapper::release_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.ValueWrapper.value)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* ValueWrapper::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.ValueWrapper.value)
  return value_;
}
inline void ValueWrapper::set_allocated_value(PROTOBUF_NAMESPACE_ID::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.ValueWrapper.value)
}

// -------------------------------------------------------------------

// RepeatedValueWrapper

// repeated .google.protobuf.Value values = 1;
inline int RepeatedValueWrapper::values_size() const {
  return values_.size();
}
inline PROTOBUF_NAMESPACE_ID::Value* RepeatedValueWrapper::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.RepeatedValueWrapper.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Value >*
RepeatedValueWrapper::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.RepeatedValueWrapper.values)
  return &values_;
}
inline const PROTOBUF_NAMESPACE_ID::Value& RepeatedValueWrapper::values(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.RepeatedValueWrapper.values)
  return values_.Get(index);
}
inline PROTOBUF_NAMESPACE_ID::Value* RepeatedValueWrapper::add_values() {
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.RepeatedValueWrapper.values)
  return values_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Value >&
RepeatedValueWrapper::values() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.RepeatedValueWrapper.values)
  return values_;
}

// -------------------------------------------------------------------

// ListValueWrapper

// .google.protobuf.ListValue shopping_list = 1;
inline bool ListValueWrapper::has_shopping_list() const {
  return this != internal_default_instance() && shopping_list_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& ListValueWrapper::shopping_list() const {
  const PROTOBUF_NAMESPACE_ID::ListValue* p = shopping_list_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.ListValueWrapper.shopping_list)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::ListValue*>(
      &PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::ListValue* ListValueWrapper::release_shopping_list() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.ListValueWrapper.shopping_list)
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = shopping_list_;
  shopping_list_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* ListValueWrapper::mutable_shopping_list() {
  
  if (shopping_list_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::ListValue>(GetArenaNoVirtual());
    shopping_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.ListValueWrapper.shopping_list)
  return shopping_list_;
}
inline void ListValueWrapper::set_allocated_shopping_list(PROTOBUF_NAMESPACE_ID::ListValue* shopping_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shopping_list_);
  }
  if (shopping_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shopping_list)->GetArena();
    if (message_arena != submessage_arena) {
      shopping_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shopping_list, submessage_arena);
    }
    
  } else {
    
  }
  shopping_list_ = shopping_list;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.ListValueWrapper.shopping_list)
}

// -------------------------------------------------------------------

// RepeatedListValueWrapper

// repeated .google.protobuf.ListValue dimensions = 1;
inline int RepeatedListValueWrapper::dimensions_size() const {
  return dimensions_.size();
}
inline PROTOBUF_NAMESPACE_ID::ListValue* RepeatedListValueWrapper::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.RepeatedListValueWrapper.dimensions)
  return dimensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue >*
RepeatedListValueWrapper::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.RepeatedListValueWrapper.dimensions)
  return &dimensions_;
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& RepeatedListValueWrapper::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.RepeatedListValueWrapper.dimensions)
  return dimensions_.Get(index);
}
inline PROTOBUF_NAMESPACE_ID::ListValue* RepeatedListValueWrapper::add_dimensions() {
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.RepeatedListValueWrapper.dimensions)
  return dimensions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::ListValue >&
RepeatedListValueWrapper::dimensions() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.RepeatedListValueWrapper.dimensions)
  return dimensions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MapOfStruct

// map<string, .google.protobuf.Struct> struct_map = 1;
inline int MapOfStruct::struct_map_size() const {
  return struct_map_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >&
MapOfStruct::struct_map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapOfStruct.struct_map)
  return struct_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Struct >*
MapOfStruct::mutable_struct_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapOfStruct.struct_map)
  return struct_map_.MutableMap();
}

// map<string, .google.protobuf.Value> value_map = 2;
inline int MapOfStruct::value_map_size() const {
  return value_map_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
MapOfStruct::value_map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapOfStruct.value_map)
  return value_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
MapOfStruct::mutable_value_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapOfStruct.value_map)
  return value_map_.MutableMap();
}

// map<string, .google.protobuf.ListValue> listvalue_map = 3;
inline int MapOfStruct::listvalue_map_size() const {
  return listvalue_map_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::ListValue >&
MapOfStruct::listvalue_map() const {
  // @@protoc_insertion_point(field_map:proto_util_converter.testing.MapOfStruct.listvalue_map)
  return listvalue_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::ListValue >*
MapOfStruct::mutable_listvalue_map() {
  // @@protoc_insertion_point(field_mutable_map:proto_util_converter.testing.MapOfStruct.listvalue_map)
  return listvalue_map_.MutableMap();
}

// -------------------------------------------------------------------

// Dummy

// string text = 1;
inline void Dummy::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Dummy::text() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Dummy.text)
  return text_.GetNoArena();
}
inline void Dummy::set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Dummy.text)
}
inline void Dummy::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_util_converter.testing.Dummy.text)
}
inline void Dummy::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.Dummy.text)
}
inline void Dummy::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.Dummy.text)
}
inline std::string* Dummy::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Dummy.text)
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dummy::release_text() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Dummy.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dummy::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Dummy.text)
}

// -------------------------------------------------------------------

// StructType

// .google.protobuf.Struct object = 1;
inline bool StructType::has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& StructType::object() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = object_;
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.StructType.object)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructType::release_object() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.StructType.object)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = object_;
  object_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* StructType::mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.StructType.object)
  return object_;
}
inline void StructType::set_allocated_object(PROTOBUF_NAMESPACE_ID::Struct* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.StructType.object)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace proto_util_converter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto
