// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_embed_optimize_for.proto

#include "google/protobuf/unittest_embed_optimize_for.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5foptimize_5ffor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestOptimizedForSize_google_2fprotobuf_2funittest_5foptimize_5ffor_2eproto;
namespace protobuf_unittest {
class TestEmbedOptimizedForSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestEmbedOptimizedForSize> _instance;
} _TestEmbedOptimizedForSize_default_instance_;
}  // namespace protobuf_unittest
static void InitDefaultsscc_info_TestEmbedOptimizedForSize_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestEmbedOptimizedForSize_default_instance_;
    new (ptr) ::protobuf_unittest::TestEmbedOptimizedForSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestEmbedOptimizedForSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestEmbedOptimizedForSize_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TestEmbedOptimizedForSize_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto}, {
      &scc_info_TestOptimizedForSize_google_2fprotobuf_2funittest_5foptimize_5ffor_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmbedOptimizedForSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmbedOptimizedForSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmbedOptimizedForSize, optional_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestEmbedOptimizedForSize, repeated_message_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::protobuf_unittest::TestEmbedOptimizedForSize)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestEmbedOptimizedForSize_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1google/protobuf/unittest_embed_optimiz"
  "e_for.proto\022\021protobuf_unittest\032+google/p"
  "rotobuf/unittest_optimize_for.proto\"\241\001\n\031"
  "TestEmbedOptimizedForSize\022A\n\020optional_me"
  "ssage\030\001 \001(\0132\'.protobuf_unittest.TestOpti"
  "mizedForSize\022A\n\020repeated_message\030\002 \003(\0132\'"
  ".protobuf_unittest.TestOptimizedForSizeB"
  "\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2funittest_5foptimize_5ffor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto_sccs[1] = {
  &scc_info_TestEmbedOptimizedForSize_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto_once;
static bool descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto = {
  &descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto_initialized, descriptor_table_protodef_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto, "google/protobuf/unittest_embed_optimize_for.proto", 283,
  &descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto_once, descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto_sccs, descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto, 1, file_level_enum_descriptors_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto, file_level_service_descriptors_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto), true);
namespace protobuf_unittest {

// ===================================================================

void TestEmbedOptimizedForSize::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestEmbedOptimizedForSize_default_instance_._instance.get_mutable()->optional_message_ = const_cast< ::protobuf_unittest::TestOptimizedForSize*>(
      ::protobuf_unittest::TestOptimizedForSize::internal_default_instance());
}
class TestEmbedOptimizedForSize::_Internal {
 public:
  using HasBits = decltype(std::declval<TestEmbedOptimizedForSize>()._has_bits_);
  static const ::protobuf_unittest::TestOptimizedForSize& optional_message(const TestEmbedOptimizedForSize* msg);
  static void set_has_optional_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_unittest::TestOptimizedForSize&
TestEmbedOptimizedForSize::_Internal::optional_message(const TestEmbedOptimizedForSize* msg) {
  return *msg->optional_message_;
}
void TestEmbedOptimizedForSize::clear_optional_message() {
  if (optional_message_ != nullptr) optional_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TestEmbedOptimizedForSize::clear_repeated_message() {
  repeated_message_.Clear();
}
TestEmbedOptimizedForSize::TestEmbedOptimizedForSize()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.TestEmbedOptimizedForSize)
}
TestEmbedOptimizedForSize::TestEmbedOptimizedForSize(const TestEmbedOptimizedForSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_message_(from.repeated_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_optional_message()) {
    optional_message_ = new ::protobuf_unittest::TestOptimizedForSize(*from.optional_message_);
  } else {
    optional_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestEmbedOptimizedForSize)
}

void TestEmbedOptimizedForSize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestEmbedOptimizedForSize_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto.base);
  optional_message_ = nullptr;
}

TestEmbedOptimizedForSize::~TestEmbedOptimizedForSize() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestEmbedOptimizedForSize)
  SharedDtor();
}

void TestEmbedOptimizedForSize::SharedDtor() {
  if (this != internal_default_instance()) delete optional_message_;
}

void TestEmbedOptimizedForSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestEmbedOptimizedForSize& TestEmbedOptimizedForSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestEmbedOptimizedForSize_google_2fprotobuf_2funittest_5fembed_5foptimize_5ffor_2eproto.base);
  return *internal_default_instance();
}


void TestEmbedOptimizedForSize::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestEmbedOptimizedForSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(optional_message_ != nullptr);
    optional_message_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestEmbedOptimizedForSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestOptimizedForSize optional_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_optional_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_unittest.TestOptimizedForSize repeated_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_repeated_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestEmbedOptimizedForSize::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_unittest.TestEmbedOptimizedForSize)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf_unittest.TestOptimizedForSize optional_message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_optional_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protobuf_unittest.TestOptimizedForSize repeated_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_repeated_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.TestEmbedOptimizedForSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.TestEmbedOptimizedForSize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestEmbedOptimizedForSize::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.TestEmbedOptimizedForSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestOptimizedForSize optional_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::optional_message(this), output);
  }

  // repeated .protobuf_unittest.TestOptimizedForSize repeated_message = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_message_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->repeated_message(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.TestEmbedOptimizedForSize)
}

::PROTOBUF_NAMESPACE_ID::uint8* TestEmbedOptimizedForSize::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestEmbedOptimizedForSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_unittest.TestOptimizedForSize optional_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::optional_message(this), target);
  }

  // repeated .protobuf_unittest.TestOptimizedForSize repeated_message = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_message_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->repeated_message(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestEmbedOptimizedForSize)
  return target;
}

size_t TestEmbedOptimizedForSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestEmbedOptimizedForSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestOptimizedForSize repeated_message = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_message_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->repeated_message(static_cast<int>(i)));
    }
  }

  // optional .protobuf_unittest.TestOptimizedForSize optional_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_message_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestEmbedOptimizedForSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestEmbedOptimizedForSize)
  GOOGLE_DCHECK_NE(&from, this);
  const TestEmbedOptimizedForSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestEmbedOptimizedForSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestEmbedOptimizedForSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestEmbedOptimizedForSize)
    MergeFrom(*source);
  }
}

void TestEmbedOptimizedForSize::MergeFrom(const TestEmbedOptimizedForSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestEmbedOptimizedForSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_message_.MergeFrom(from.repeated_message_);
  if (from.has_optional_message()) {
    mutable_optional_message()->::protobuf_unittest::TestOptimizedForSize::MergeFrom(from.optional_message());
  }
}

void TestEmbedOptimizedForSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestEmbedOptimizedForSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestEmbedOptimizedForSize::CopyFrom(const TestEmbedOptimizedForSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestEmbedOptimizedForSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestEmbedOptimizedForSize::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->repeated_message())) return false;
  if (has_optional_message()) {
    if (!this->optional_message_->IsInitialized()) return false;
  }
  return true;
}

void TestEmbedOptimizedForSize::InternalSwap(TestEmbedOptimizedForSize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&repeated_message_)->InternalSwap(CastToBase(&other->repeated_message_));
  swap(optional_message_, other->optional_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestEmbedOptimizedForSize::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestEmbedOptimizedForSize* Arena::CreateMaybeMessage< ::protobuf_unittest::TestEmbedOptimizedForSize >(Arena* arena) {
  return Arena::CreateInternal< ::protobuf_unittest::TestEmbedOptimizedForSize >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
