.TH "gdal_merge" 1 "Fri Jun 28 2019" "GDAL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gdal_merge \- Mosaics a set of images\&.
.SH "SYNOPSIS"
.PP
.PP
.nf
gdal_merge.py [-o out_filename] [-of out_format] [-co NAME=VALUE]*
              [-ps pixelsize_x pixelsize_y] [-tap] [-separate] [-q] [-v] [-pct]
              [-ul_lr ulx uly lrx lry] [-init "value [value...]"]
              [-n nodata_value] [-a_nodata output_nodata_value]
              [-ot datatype] [-createonly] input_files
.fi
.PP
.SH "DESCRIPTION"
.PP
This utility will automatically mosaic a set of images\&. All the images must be in the same coordinate system and have a matching number of bands, but they may be overlapping, and at different resolutions\&. In areas of overlap, the last image will be copied over earlier ones\&.
.PP
.IP "\fB\fB-o\fP \fIout_filename\fP:\fP" 1c
The name of the output file, which will be created if it does not already exist (defaults to 'out\&.tif')\&. 
.IP "\fB\fB-of\fP \fIformat\fP:\fP" 1c
Select the output format\&. Starting with GDAL 2\&.3, if not specified, the format is guessed from the extension (previously was GTiff)\&. Use the short format name\&.  
.IP "\fB\fB-co\fP \fINAME=VALUE\fP:\fP" 1c
Creation option for output file\&. Multiple options can be specified\&. See \fCformat specific documentation for legal creation options for each format\fP  
.IP "\fB\fB-ot\fP \fIdatatype\fP:\fP" 1c
Force the output image bands to have a specific type\&. Use type names (i\&.e\&. Byte, Int16,\&.\&.\&.)  
.IP "\fB\fB-ps\fP \fIpixelsize_x pixelsize_y\fP:\fP" 1c
Pixel size to be used for the output file\&. If not specified the resolution of the first input file will be used\&.
.PP
.IP "\fB\fB-tap\fP:\fP" 1c
(GDAL >= 1\&.8\&.0) (target aligned pixels) align the coordinates of the extent of the output file to the values of the -tr, such that the aligned extent includes the minimum extent\&.
.PP
.IP "\fB\fB-ul_lr\fP \fIulx uly lrx lry\fP:\fP" 1c
The extents of the output file\&. If not specified the aggregate extents of all input files will be used\&. 
.IP "\fB\fP" 1c
.IP "\fB\fB-v\fP:\fP" 1c
Generate verbose output of mosaicing operations as they are done\&. 
.IP "\fB\fB-separate\fP:\fP" 1c
Place each input file into a separate band\&.  
.IP "\fB\fB-pct\fP:\fP" 1c
Grab a pseudo-color table from the first input image, and use it for the output\&. Merging pseudo-colored images this way assumes that all input files use the same color table\&.  
.IP "\fB\fB-n\fP \fInodata_value\fP:\fP" 1c
Ignore pixels from files being merged in with this pixel value\&.  
.IP "\fB\fB-a_nodata\fP \fIoutput_nodata_value\fP:\fP" 1c
(GDAL >= 1\&.9\&.0) Assign a specified nodata value to output bands\&. 
.IP "\fB\fB-init\fP \fI'value(s)'\fP:\fP" 1c
Pre-initialize the output image bands with these values\&. However, it is not marked as the nodata value in the output file\&. If only one value is given, the same value is used in all the bands\&.  
.IP "\fB\fB-createonly\fP:\fP" 1c
The output file is created (and potentially pre-initialized) but no input image data is copied into it\&.  
.PP
.PP
NOTE: gdal_merge\&.py is a Python script, and will only work if GDAL was built with Python support\&.
.SH "EXAMPLE"
.PP
Create an image with the pixels in all bands initialized to 255\&.
.PP
.PP
.nf
% gdal_merge.py -init 255 -o out.tif in1.tif in2.tif
.fi
.PP
.PP
Create an RGB image that shows blue in pixels with no data\&. The first two bands will be initialized to 0 and the third band will be initialized to 255\&.
.PP
.PP
.nf
% gdal_merge.py -init "0 0 255" -o out.tif in1.tif in2.tif
.fi
.PP
.SH "AUTHORS"
.PP
Frank Warmerdam warmerdam@pobox.com, Silke Reimer silke@intevation.de 
